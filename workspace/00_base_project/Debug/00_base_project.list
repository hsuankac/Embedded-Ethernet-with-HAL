
00_base_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000354  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800054c  0800054c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800054c  0800054c  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800054c  0800054c  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800054c  0800054c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800054c  0800054c  0000154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000550  08000550  00001550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000554  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000560  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000560  00002028  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001beb  00000000  00000000  0000203a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065b  00000000  00000000  00003c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00004280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c1  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d84  00000000  00000000  000046c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cd0  00000000  00000000  0002b44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100f39  00000000  00000000  0002e11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f056  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008e4  00000000  00000000  0012f09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0012f980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08000534 	.word	0x08000534

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08000534 	.word	0x08000534

08000238 <main>:
#include <stdint.h>
#include "main.h"


int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_Init();
 800023c:	f000 f82b 	bl	8000296 <HAL_Init>

	while(1)
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <main+0x8>

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	@ (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	@ (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	@ (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	@ (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 f93b 	bl	80004ec <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000276:	f7ff ffdf 	bl	8000238 <main>

0800027a <LoopForever>:

LoopForever:
  b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000288:	08000554 	.word	0x08000554
  ldr r2, =_sbss
 800028c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000290:	20000028 	.word	0x20000028

08000294 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC_IRQHandler>

08000296 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800029a:	2003      	movs	r0, #3
 800029c:	f000 f8f2 	bl	8000484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002a0:	2000      	movs	r0, #0
 80002a2:	f000 f80d 	bl	80002c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80002a6:	f000 f803 	bl	80002b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80002aa:	2300      	movs	r3, #0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
	...

080002c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <HAL_InitTick+0x54>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <HAL_InitTick+0x58>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	4619      	mov	r1, r3
 80002d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80002da:	fbb2 f3f3 	udiv	r3, r2, r3
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f8f7 	bl	80004d2 <HAL_SYSTICK_Config>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002ea:	2301      	movs	r3, #1
 80002ec:	e00e      	b.n	800030c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2b0f      	cmp	r3, #15
 80002f2:	d80a      	bhi.n	800030a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002f4:	2200      	movs	r2, #0
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80002fc:	f000 f8cd 	bl	800049a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000300:	4a06      	ldr	r2, [pc, #24]	@ (800031c <HAL_InitTick+0x5c>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000306:	2300      	movs	r3, #0
 8000308:	e000      	b.n	800030c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800030a:	2301      	movs	r3, #1
}
 800030c:	4618      	mov	r0, r3
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000000 	.word	0x20000000
 8000318:	20000008 	.word	0x20000008
 800031c:	20000004 	.word	0x20000004

08000320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000330:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <__NVIC_SetPriorityGrouping+0x40>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000336:	68ba      	ldr	r2, [r7, #8]
 8000338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800033c:	4013      	ands	r3, r2
 800033e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <__NVIC_SetPriorityGrouping+0x44>)
 800034a:	4313      	orrs	r3, r2
 800034c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800034e:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <__NVIC_SetPriorityGrouping+0x40>)
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	60d3      	str	r3, [r2, #12]
}
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	05fa0000 	.word	0x05fa0000

08000368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800036c:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <__NVIC_GetPriorityGrouping+0x18>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	0a1b      	lsrs	r3, r3, #8
 8000372:	f003 0307 	and.w	r3, r3, #7
}
 8000376:	4618      	mov	r0, r3
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	db0a      	blt.n	80003ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	b2da      	uxtb	r2, r3
 800039c:	490c      	ldr	r1, [pc, #48]	@ (80003d0 <__NVIC_SetPriority+0x4c>)
 800039e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a2:	0112      	lsls	r2, r2, #4
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	440b      	add	r3, r1
 80003a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ac:	e00a      	b.n	80003c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4908      	ldr	r1, [pc, #32]	@ (80003d4 <__NVIC_SetPriority+0x50>)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f003 030f 	and.w	r3, r3, #15
 80003ba:	3b04      	subs	r3, #4
 80003bc:	0112      	lsls	r2, r2, #4
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	440b      	add	r3, r1
 80003c2:	761a      	strb	r2, [r3, #24]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	e000e100 	.word	0xe000e100
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003d8:	b480      	push	{r7}
 80003da:	b089      	sub	sp, #36	@ 0x24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f003 0307 	and.w	r3, r3, #7
 80003ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	f1c3 0307 	rsb	r3, r3, #7
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	bf28      	it	cs
 80003f6:	2304      	movcs	r3, #4
 80003f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	3304      	adds	r3, #4
 80003fe:	2b06      	cmp	r3, #6
 8000400:	d902      	bls.n	8000408 <NVIC_EncodePriority+0x30>
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	3b03      	subs	r3, #3
 8000406:	e000      	b.n	800040a <NVIC_EncodePriority+0x32>
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800040c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	fa02 f303 	lsl.w	r3, r2, r3
 8000416:	43da      	mvns	r2, r3
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	401a      	ands	r2, r3
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000420:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	43d9      	mvns	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000430:	4313      	orrs	r3, r2
         );
}
 8000432:	4618      	mov	r0, r3
 8000434:	3724      	adds	r7, #36	@ 0x24
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000450:	d301      	bcc.n	8000456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000452:	2301      	movs	r3, #1
 8000454:	e00f      	b.n	8000476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <SysTick_Config+0x40>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800045e:	210f      	movs	r1, #15
 8000460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000464:	f7ff ff8e 	bl	8000384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <SysTick_Config+0x40>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800046e:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <SysTick_Config+0x40>)
 8000470:	2207      	movs	r2, #7
 8000472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000474:	2300      	movs	r3, #0
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	e000e010 	.word	0xe000e010

08000484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff ff47 	bl	8000320 <__NVIC_SetPriorityGrouping>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800049a:	b580      	push	{r7, lr}
 800049c:	b086      	sub	sp, #24
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4603      	mov	r3, r0
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
 80004a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004ac:	f7ff ff5c 	bl	8000368 <__NVIC_GetPriorityGrouping>
 80004b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	68b9      	ldr	r1, [r7, #8]
 80004b6:	6978      	ldr	r0, [r7, #20]
 80004b8:	f7ff ff8e 	bl	80003d8 <NVIC_EncodePriority>
 80004bc:	4602      	mov	r2, r0
 80004be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff5d 	bl	8000384 <__NVIC_SetPriority>
}
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff ffb0 	bl	8000440 <SysTick_Config>
 80004e0:	4603      	mov	r3, r0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <__libc_init_array>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000524 <__libc_init_array+0x38>)
 80004f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000528 <__libc_init_array+0x3c>)
 80004f2:	1b64      	subs	r4, r4, r5
 80004f4:	10a4      	asrs	r4, r4, #2
 80004f6:	2600      	movs	r6, #0
 80004f8:	42a6      	cmp	r6, r4
 80004fa:	d109      	bne.n	8000510 <__libc_init_array+0x24>
 80004fc:	4d0b      	ldr	r5, [pc, #44]	@ (800052c <__libc_init_array+0x40>)
 80004fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000530 <__libc_init_array+0x44>)
 8000500:	f000 f818 	bl	8000534 <_init>
 8000504:	1b64      	subs	r4, r4, r5
 8000506:	10a4      	asrs	r4, r4, #2
 8000508:	2600      	movs	r6, #0
 800050a:	42a6      	cmp	r6, r4
 800050c:	d105      	bne.n	800051a <__libc_init_array+0x2e>
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	f855 3b04 	ldr.w	r3, [r5], #4
 8000514:	4798      	blx	r3
 8000516:	3601      	adds	r6, #1
 8000518:	e7ee      	b.n	80004f8 <__libc_init_array+0xc>
 800051a:	f855 3b04 	ldr.w	r3, [r5], #4
 800051e:	4798      	blx	r3
 8000520:	3601      	adds	r6, #1
 8000522:	e7f2      	b.n	800050a <__libc_init_array+0x1e>
 8000524:	0800054c 	.word	0x0800054c
 8000528:	0800054c 	.word	0x0800054c
 800052c:	0800054c 	.word	0x0800054c
 8000530:	08000550 	.word	0x08000550

08000534 <_init>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr

08000540 <_fini>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr
