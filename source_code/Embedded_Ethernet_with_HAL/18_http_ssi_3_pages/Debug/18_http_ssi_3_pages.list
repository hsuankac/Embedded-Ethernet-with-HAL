
18_http_ssi_3_pages.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014830  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002d580  08014a30  08014a30  00024a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08041fb0  08041fb0  0006008c  2**0
                  CONTENTS
  4 .ARM          00000008  08041fb0  08041fb0  00051fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08041fb8  08041fb8  0006008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08041fb8  08041fb8  00051fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08041fbc  08041fbc  00051fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08041fc0  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007af0  2000008c  0804204c  0006008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007b7c  0804204c  00067b7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0006008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003989a  00000000  00000000  000600ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c41  00000000  00000000  00099954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  000a0598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  000a1c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000350a2  00000000  00000000  000a3180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7a3  00000000  00000000  000d8222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab09  00000000  00000000  001029c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021d4ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006424  00000000  00000000  0021d524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000008c 	.word	0x2000008c
 800021c:	00000000 	.word	0x00000000
 8000220:	08014a18 	.word	0x08014a18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000090 	.word	0x20000090
 800023c:	08014a18 	.word	0x08014a18

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <adc1_pa4_init>:

ADC_HandleTypeDef hadc1;


void adc1_pa4_init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
    ADC_ChannelConfTypeDef sConfig 	  = {0};
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <adc1_pa4_init+0xe0>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a2d      	ldr	r2, [pc, #180]	; (80006e8 <adc1_pa4_init+0xe0>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <adc1_pa4_init+0xe0>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <adc1_pa4_init+0xe0>)
 8000646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <adc1_pa4_init+0xe0>)
 800064a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800064e:	6453      	str	r3, [r2, #68]	; 0x44
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <adc1_pa4_init+0xe0>)
 8000652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

	/*Set PA4 as analog pin*/
	GPIO_InitStruct.Pin  = SENSOR_PIN;
 800065c:	2310      	movs	r3, #16
 800065e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000660:	2303      	movs	r3, #3
 8000662:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(SENSOR_PORT,&GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	481f      	ldr	r0, [pc, #124]	; (80006ec <adc1_pa4_init+0xe4>)
 8000670:	f002 fa2c 	bl	8002acc <HAL_GPIO_Init>


	/*Configure ADC parameters*/

	hadc1.Instance =  ADC1;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <adc1_pa4_init+0xe8>)
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <adc1_pa4_init+0xec>)
 8000678:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler =  ADC_CLOCK_SYNC_PCLK_DIV8;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <adc1_pa4_init+0xe8>)
 800067c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000680:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution	  =  ADC_RESOLUTION_12B;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <adc1_pa4_init+0xe8>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode   =  ADC_SCAN_DISABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <adc1_pa4_init+0xe8>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode	= DISABLE;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <adc1_pa4_init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <adc1_pa4_init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <adc1_pa4_init+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <adc1_pa4_init+0xf0>)
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006be:	2201      	movs	r2, #1
 80006c0:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006c4:	f000 fbf8 	bl	8000eb8 <HAL_ADC_Init>

	sConfig.Channel = ADC_CHANNEL_4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
	sConfig.Rank    = ADC_REGULAR_RANK_1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime =  ADC_SAMPLETIME_480CYCLES;
 80006d0:	2307      	movs	r3, #7
 80006d2:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1,&sConfig);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006dc:	f000 fd16 	bl	800110c <HAL_ADC_ConfigChannel>


}
 80006e0:	bf00      	nop
 80006e2:	3730      	adds	r7, #48	; 0x30
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	200006f8 	.word	0x200006f8
 80006f4:	40012000 	.word	0x40012000
 80006f8:	0f000001 	.word	0x0f000001

080006fc <button_init>:
#include "button.h"



void button_init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStruct = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <button_init+0x48>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <button_init+0x48>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6313      	str	r3, [r2, #48]	; 0x30
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <button_init+0x48>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin =  BTN_Pin;
 8000728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(BTN_Port,&GPIO_InitStruct);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <button_init+0x4c>)
 8000738:	f002 f9c8 	bl	8002acc <HAL_GPIO_Init>
}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020800 	.word	0x40020800

0800074c <get_btn_state>:

uint8_t get_btn_state(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BTN_Port,BTN_Pin);
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <get_btn_state+0x14>)
 8000756:	f002 fb65 	bl	8002e24 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
}
 800075c:	4618      	mov	r0, r3
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40020800 	.word	0x40020800

08000764 <leds_init>:
#include "leds.h"



void leds_init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef   GPIO_InitStruct = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <leds_init+0x4c>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <leds_init+0x4c>)
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	6313      	str	r3, [r2, #48]	; 0x30
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <leds_init+0x4c>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStruct.Pin  = GREEN_LED | BLUE_LED | RED_LED | CUSTOM_LED;
 8000790:	f24c 0381 	movw	r3, #49281	; 0xc081
 8000794:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull =  GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(LEDS_PORT,&GPIO_InitStruct);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <leds_init+0x50>)
 80007a4:	f002 f992 	bl	8002acc <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020400 	.word	0x40020400

080007b8 <led_on>:


void led_on(uint32_t led)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	switch(led)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007c6:	d025      	beq.n	8000814 <led_on+0x5c>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007ce:	d828      	bhi.n	8000822 <led_on+0x6a>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007d6:	d016      	beq.n	8000806 <led_on+0x4e>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007de:	d820      	bhi.n	8000822 <led_on+0x6a>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d003      	beq.n	80007ee <led_on+0x36>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b80      	cmp	r3, #128	; 0x80
 80007ea:	d006      	beq.n	80007fa <led_on+0x42>
		case CUSTOM_LED:
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
			break;

	}
}
 80007ec:	e019      	b.n	8000822 <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,GREEN_LED,GPIO_PIN_SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2101      	movs	r1, #1
 80007f2:	480e      	ldr	r0, [pc, #56]	; (800082c <led_on+0x74>)
 80007f4:	f002 fb2e 	bl	8002e54 <HAL_GPIO_WritePin>
			break;
 80007f8:	e013      	b.n	8000822 <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,BLUE_LED,GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <led_on+0x74>)
 8000800:	f002 fb28 	bl	8002e54 <HAL_GPIO_WritePin>
			break;
 8000804:	e00d      	b.n	8000822 <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,RED_LED,GPIO_PIN_SET);
 8000806:	2201      	movs	r2, #1
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <led_on+0x74>)
 800080e:	f002 fb21 	bl	8002e54 <HAL_GPIO_WritePin>
			break;
 8000812:	e006      	b.n	8000822 <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <led_on+0x74>)
 800081c:	f002 fb1a 	bl	8002e54 <HAL_GPIO_WritePin>
			break;
 8000820:	bf00      	nop
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40020400 	.word	0x40020400

08000830 <main>:
extern struct netif gnetif;



int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	HAL_Init();
 8000834:	f000 fab7 	bl	8000da6 <HAL_Init>
	sysclock_config();
 8000838:	f000 f850 	bl	80008dc <sysclock_config>
	leds_init();
 800083c:	f7ff ff92 	bl	8000764 <leds_init>
	uart3_tx_init();
 8000840:	f000 f9fa 	bl	8000c38 <uart3_tx_init>
	adc1_pa4_init();
 8000844:	f7ff fee0 	bl	8000608 <adc1_pa4_init>
	button_init();
 8000848:	f7ff ff58 	bl	80006fc <button_init>

	lwip_lib_init();
 800084c:	f003 fca6 	bl	800419c <lwip_lib_init>
	httpd_init();
 8000850:	f005 faea 	bl	8005e28 <httpd_init>
	http_set_ssi_handler(ssi_handler,(const char **)tags,NUM_OF_TAGS);
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <main+0x88>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2203      	movs	r2, #3
 800085a:	4619      	mov	r1, r3
 800085c:	4817      	ldr	r0, [pc, #92]	; (80008bc <main+0x8c>)
 800085e:	f005 fb03 	bl	8005e68 <http_set_ssi_handler>

	g_hclk_freq = HAL_RCC_GetHCLKFreq();
 8000862:	f002 ffb1 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8000866:	4603      	mov	r3, r0
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <main+0x90>)
 800086a:	6013      	str	r3, [r2, #0]
	g_pclk1_freq = HAL_RCC_GetPCLK1Freq();
 800086c:	f002 ffb8 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8000870:	4603      	mov	r3, r0
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <main+0x94>)
 8000874:	6013      	str	r3, [r2, #0]
	g_pclk2_freq = HAL_RCC_GetPCLK2Freq();
 8000876:	f002 ffc7 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 800087a:	4603      	mov	r3, r0
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <main+0x98>)
 800087e:	6013      	str	r3, [r2, #0]

	led_on(GREEN_LED);
 8000880:	2001      	movs	r0, #1
 8000882:	f7ff ff99 	bl	80007b8 <led_on>
	led_on(BLUE_LED);
 8000886:	2080      	movs	r0, #128	; 0x80
 8000888:	f7ff ff96 	bl	80007b8 <led_on>
	led_on(RED_LED);
 800088c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000890:	f7ff ff92 	bl	80007b8 <led_on>

	ethernetif_notify_conn_changed(&gnetif);
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <main+0x9c>)
 8000896:	f000 f87f 	bl	8000998 <ethernetif_notify_conn_changed>
	while(1)
	{

		lwip_process();
 800089a:	f003 fcc5 	bl	8004228 <lwip_process>
        HAL_ADC_Start(&hadc1);
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <main+0xa0>)
 80008a0:	f000 fb58 	bl	8000f54 <HAL_ADC_Start>
		printf("IP address from DHCP :  %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <main+0xa4>)
 80008a6:	f011 fe61 	bl	801256c <ip4addr_ntoa>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4619      	mov	r1, r3
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <main+0xa8>)
 80008b0:	f012 fece 	bl	8013650 <iprintf>
		lwip_process();
 80008b4:	e7f1      	b.n	800089a <main+0x6a>
 80008b6:	bf00      	nop
 80008b8:	2000000c 	.word	0x2000000c
 80008bc:	080009d1 	.word	0x080009d1
 80008c0:	2000074c 	.word	0x2000074c
 80008c4:	20000740 	.word	0x20000740
 80008c8:	20000748 	.word	0x20000748
 80008cc:	200007dc 	.word	0x200007dc
 80008d0:	200006f8 	.word	0x200006f8
 80008d4:	200007e0 	.word	0x200007e0
 80008d8:	08014a30 	.word	0x08014a30

080008dc <sysclock_config>:




void sysclock_config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b094      	sub	sp, #80	; 0x50
 80008e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef		RCC_OscInitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2234      	movs	r2, #52	; 0x34
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f012 fea8 	bl	8013640 <memset>
	RCC_ClkInitTypeDef		RCC_ClkInitStruct = {0};
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <sysclock_config+0xb4>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a22      	ldr	r2, [pc, #136]	; (8000990 <sysclock_config+0xb4>)
 8000906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <sysclock_config+0xb4>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <sysclock_config+0xb8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <sysclock_config+0xb8>)
 800091e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <sysclock_config+0xb8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000930:	2301      	movs	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState		 = RCC_HSE_BYPASS;
 8000934:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000938:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 800093e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000942:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM		 = 12;
 8000944:	230c      	movs	r3, #12
 8000946:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN		 = 192;
 8000948:	23c0      	movs	r3, #192	; 0xc0
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ		 = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP		 = RCC_PLLP_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fae5 	bl	8002f28 <HAL_RCC_OscConfig>

	/*Activate the over drive mode */
	HAL_PWREx_EnableOverDrive();
 800095e:	f002 fa93 	bl	8002e88 <HAL_PWREx_EnableOverDrive>


	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	60bb      	str	r3, [r7, #8]
								  |RCC_CLOCKTYPE_PCLK1 |RCC_CLOCKTYPE_PCLK2;

	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2302      	movs	r3, #2
 8000968:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800096e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000972:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000978:	61bb      	str	r3, [r7, #24]

	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_6);
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	2106      	movs	r1, #6
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fd7f 	bl	8003484 <HAL_RCC_ClockConfig>

}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <ethernetif_notify_conn_changed>:

 void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	  if(netif_is_link_up(netif))
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <ethernetif_notify_conn_changed+0x22>
	  {
		  printf("Cable Connected !!\n\r");
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <ethernetif_notify_conn_changed+0x30>)
 80009b4:	f012 fe4c 	bl	8013650 <iprintf>
	  }
	  else
	  {
		  printf("ERR : Cable not connected !!\n\r");
	  }
}
 80009b8:	e002      	b.n	80009c0 <ethernetif_notify_conn_changed+0x28>
		  printf("ERR : Cable not connected !!\n\r");
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <ethernetif_notify_conn_changed+0x34>)
 80009bc:	f012 fe48 	bl	8013650 <iprintf>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	08014a50 	.word	0x08014a50
 80009cc:	08014a68 	.word	0x08014a68

080009d0 <ssi_handler>:
char const ** tags =  ssi_tags;
extern ADC_HandleTypeDef hadc1;


uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]

	switch(iIndex)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d026      	beq.n	8000a30 <ssi_handler+0x60>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	dc31      	bgt.n	8000a4c <ssi_handler+0x7c>
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <ssi_handler+0x26>
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d00e      	beq.n	8000a12 <ssi_handler+0x42>
		case 2:
			sprintf(pcInsert, "%d", (int)get_btn_state());
			return strlen(pcInsert);
			break;
		default:
			break;
 80009f4:	e02a      	b.n	8000a4c <ssi_handler+0x7c>
			sprintf(pcInsert, "%d", (int)HAL_GetTick());
 80009f6:	f000 fa2f 	bl	8000e58 <HAL_GetTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4916      	ldr	r1, [pc, #88]	; (8000a58 <ssi_handler+0x88>)
 8000a00:	68b8      	ldr	r0, [r7, #8]
 8000a02:	f012 fe7d 	bl	8013700 <siprintf>
			return strlen(pcInsert);
 8000a06:	68b8      	ldr	r0, [r7, #8]
 8000a08:	f7ff fc24 	bl	8000254 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	e01e      	b.n	8000a50 <ssi_handler+0x80>
			sprintf(pcInsert, "%d", (int)HAL_ADC_GetValue(&hadc1));
 8000a12:	4812      	ldr	r0, [pc, #72]	; (8000a5c <ssi_handler+0x8c>)
 8000a14:	f000 fb6c 	bl	80010f0 <HAL_ADC_GetValue>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	490e      	ldr	r1, [pc, #56]	; (8000a58 <ssi_handler+0x88>)
 8000a1e:	68b8      	ldr	r0, [r7, #8]
 8000a20:	f012 fe6e 	bl	8013700 <siprintf>
			return strlen(pcInsert);
 8000a24:	68b8      	ldr	r0, [r7, #8]
 8000a26:	f7ff fc15 	bl	8000254 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	e00f      	b.n	8000a50 <ssi_handler+0x80>
			sprintf(pcInsert, "%d", (int)get_btn_state());
 8000a30:	f7ff fe8c 	bl	800074c <get_btn_state>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4907      	ldr	r1, [pc, #28]	; (8000a58 <ssi_handler+0x88>)
 8000a3a:	68b8      	ldr	r0, [r7, #8]
 8000a3c:	f012 fe60 	bl	8013700 <siprintf>
			return strlen(pcInsert);
 8000a40:	68b8      	ldr	r0, [r7, #8]
 8000a42:	f7ff fc07 	bl	8000254 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	e001      	b.n	8000a50 <ssi_handler+0x80>
			break;
 8000a4c:	bf00      	nop

	}
   return 0;
 8000a4e:	2300      	movs	r3, #0
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	08014aa0 	.word	0x08014aa0
 8000a5c:	200006f8 	.word	0x200006f8

08000a60 <SysTick_Handler>:


extern ETH_HandleTypeDef heth;

void SysTick_Handler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a64:	f000 f9e4 	bl	8000e30 <HAL_IncTick>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ETH_IRQHandler>:


void ETH_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_ETH_IRQHandler(&heth);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <ETH_IRQHandler+0x10>)
 8000a72:	f001 fa7f 	bl	8001f74 <HAL_ETH_IRQHandler>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000272c 	.word	0x2000272c

08000a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	return 1;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_kill>:

int _kill(int pid, int sig)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <_kill+0x20>)
 8000a9c:	2216      	movs	r2, #22
 8000a9e:	601a      	str	r2, [r3, #0]
	return -1;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20007b6c 	.word	0x20007b6c

08000ab4 <_exit>:

void _exit (int status)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ffe5 	bl	8000a90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ac6:	e7fe      	b.n	8000ac6 <_exit+0x12>

08000ac8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
	}

return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e009      	b.n	8000b28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f879 	bl	8000c14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf1      	blt.n	8000b14 <_write+0x12>
	}
	return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_close>:

int _close(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
	return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b62:	605a      	str	r2, [r3, #4]
	return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_isatty>:

int _isatty(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	return 1;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d205      	bcs.n	8000be0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <_sbrk+0x6c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	20080000 	.word	0x20080000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	200000a8 	.word	0x200000a8
 8000c0c:	20007b80 	.word	0x20007b80
 8000c10:	20007b6c 	.word	0x20007b6c

08000c14 <__io_putchar>:

static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate);


int __io_putchar(int ch)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,10);
 8000c1c:	1d39      	adds	r1, r7, #4
 8000c1e:	230a      	movs	r3, #10
 8000c20:	2201      	movs	r2, #1
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <__io_putchar+0x20>)
 8000c24:	f002 fe5c 	bl	80038e0 <HAL_UART_Transmit>
	return ch;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000750 	.word	0x20000750

08000c38 <uart3_tx_init>:

void uart3_tx_init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <uart3_tx_init+0xb8>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a27      	ldr	r2, [pc, #156]	; (8000cf0 <uart3_tx_init+0xb8>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <uart3_tx_init+0xb8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]


	GPIO_InitStruct.Pin  = GPIO_PIN_8;
 8000c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOD,&GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <uart3_tx_init+0xbc>)
 8000c84:	f001 ff22 	bl	8002acc <HAL_GPIO_Init>


	__HAL_RCC_USART3_CLK_ENABLE();
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <uart3_tx_init+0xb8>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <uart3_tx_init+0xb8>)
 8000c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <uart3_tx_init+0xb8>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]


	huart3.Instance = USART3;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <uart3_tx_init+0xc4>)
 8000ca4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits   = UART_STOPBITS_1;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity	= UART_PARITY_NONE;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling =  UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]

	HAL_UART_Init(&huart3);
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <uart3_tx_init+0xc0>)
 8000cda:	f002 fda9 	bl	8003830 <HAL_UART_Init>

   /*Set baudrate fix*/
	uart3_set_baudrate(16000000,115200);
 8000cde:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <uart3_tx_init+0xc8>)
 8000ce4:	f000 f822 	bl	8000d2c <uart3_set_baudrate>
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	20000750 	.word	0x20000750
 8000cfc:	40004800 	.word	0x40004800
 8000d00:	00f42400 	.word	0x00f42400

08000d04 <compute_uart_div>:



static uint16_t compute_uart_div(uint32_t periph_clock, uint32_t baudrate)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	return ((periph_clock + (baudrate/2U))/baudrate);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	085a      	lsrs	r2, r3, #1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	441a      	add	r2, r3
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1c:	b29b      	uxth	r3, r3
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <uart3_set_baudrate>:


static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
	USART3->BRR  = compute_uart_div(periph_clock,baudrate);
 8000d36:	6839      	ldr	r1, [r7, #0]
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ffe3 	bl	8000d04 <compute_uart_div>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <uart3_set_baudrate+0x24>)
 8000d44:	60da      	str	r2, [r3, #12]
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004800 	.word	0x40004800

08000d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5e:	490d      	ldr	r1, [pc, #52]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d74:	4c0a      	ldr	r4, [pc, #40]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d82:	f012 fc03 	bl	801358c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fd53 	bl	8000830 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000d98:	08041fc0 	.word	0x08041fc0
  ldr r2, =_sbss
 8000d9c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000da0:	20007b7c 	.word	0x20007b7c

08000da4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>

08000da6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f000 fcc2 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 f80d 	bl	8000dd0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000db6:	f000 f803 	bl	8000dc0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fcd5 	bl	800179e <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 fc9d 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000010 	.word	0x20000010
 8000e28:	20000018 	.word	0x20000018
 8000e2c:	20000014 	.word	0x20000014

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000018 	.word	0x20000018
 8000e54:	200007d4 	.word	0x200007d4

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200007d4 	.word	0x200007d4

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000018 	.word	0x20000018

08000eb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e031      	b.n	8000f32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d109      	bne.n	8000eea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f832 	bl	8000f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f003 0310 	and.w	r3, r3, #16
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d116      	bne.n	8000f24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_ADC_Init+0x84>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	f043 0202 	orr.w	r2, r3, #2
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fa4a 	bl	80013a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f023 0303 	bic.w	r3, r3, #3
 8000f1a:	f043 0201 	orr.w	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
 8000f22:	e001      	b.n	8000f28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	ffffeefd 	.word	0xffffeefd

08000f40 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_Start+0x1a>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e0ad      	b.n	80010ca <HAL_ADC_Start+0x176>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d018      	beq.n	8000fb6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000f94:	4b50      	ldr	r3, [pc, #320]	; (80010d8 <HAL_ADC_Start+0x184>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a50      	ldr	r2, [pc, #320]	; (80010dc <HAL_ADC_Start+0x188>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9a      	lsrs	r2, r3, #18
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000fa8:	e002      	b.n	8000fb0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f9      	bne.n	8000faa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d175      	bne.n	80010b0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc8:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <HAL_ADC_Start+0x18c>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ffe:	d106      	bne.n	800100e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	f023 0206 	bic.w	r2, r3, #6
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	645a      	str	r2, [r3, #68]	; 0x44
 800100c:	e002      	b.n	8001014 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001024:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_ADC_Start+0x190>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10f      	bne.n	8001052 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d143      	bne.n	80010c8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	e03a      	b.n	80010c8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <HAL_ADC_Start+0x194>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d10e      	bne.n	800107a <HAL_ADC_Start+0x126>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d107      	bne.n	800107a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001078:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_ADC_Start+0x190>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	2b00      	cmp	r3, #0
 8001084:	d120      	bne.n	80010c8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a18      	ldr	r2, [pc, #96]	; (80010ec <HAL_ADC_Start+0x198>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d11b      	bne.n	80010c8 <HAL_ADC_Start+0x174>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d114      	bne.n	80010c8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	e00b      	b.n	80010c8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f043 0210 	orr.w	r2, r3, #16
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	f043 0201 	orr.w	r2, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000010 	.word	0x20000010
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	fffff8fe 	.word	0xfffff8fe
 80010e4:	40012300 	.word	0x40012300
 80010e8:	40012000 	.word	0x40012000
 80010ec:	40012200 	.word	0x40012200

080010f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x1c>
 8001124:	2302      	movs	r3, #2
 8001126:	e12a      	b.n	800137e <HAL_ADC_ConfigChannel+0x272>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b09      	cmp	r3, #9
 8001136:	d93a      	bls.n	80011ae <HAL_ADC_ConfigChannel+0xa2>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001140:	d035      	beq.n	80011ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68d9      	ldr	r1, [r3, #12]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	4613      	mov	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4413      	add	r3, r2
 8001156:	3b1e      	subs	r3, #30
 8001158:	2207      	movs	r2, #7
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	400a      	ands	r2, r1
 8001166:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a87      	ldr	r2, [pc, #540]	; (800138c <HAL_ADC_ConfigChannel+0x280>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10a      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68d9      	ldr	r1, [r3, #12]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	061a      	lsls	r2, r3, #24
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001186:	e035      	b.n	80011f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68d9      	ldr	r1, [r3, #12]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	4603      	mov	r3, r0
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4403      	add	r3, r0
 80011a0:	3b1e      	subs	r3, #30
 80011a2:	409a      	lsls	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ac:	e022      	b.n	80011f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6919      	ldr	r1, [r3, #16]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	2207      	movs	r2, #7
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43da      	mvns	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	400a      	ands	r2, r1
 80011d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6919      	ldr	r1, [r3, #16]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	4603      	mov	r3, r0
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4403      	add	r3, r0
 80011ea:	409a      	lsls	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b06      	cmp	r3, #6
 80011fa:	d824      	bhi.n	8001246 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	3b05      	subs	r3, #5
 800120e:	221f      	movs	r2, #31
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43da      	mvns	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	400a      	ands	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b29b      	uxth	r3, r3
 800122a:	4618      	mov	r0, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b05      	subs	r3, #5
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	635a      	str	r2, [r3, #52]	; 0x34
 8001244:	e04c      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b0c      	cmp	r3, #12
 800124c:	d824      	bhi.n	8001298 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b23      	subs	r3, #35	; 0x23
 8001260:	221f      	movs	r2, #31
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	400a      	ands	r2, r1
 800126e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b23      	subs	r3, #35	; 0x23
 800128a:	fa00 f203 	lsl.w	r2, r0, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	631a      	str	r2, [r3, #48]	; 0x30
 8001296:	e023      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	3b41      	subs	r3, #65	; 0x41
 80012aa:	221f      	movs	r2, #31
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43da      	mvns	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	400a      	ands	r2, r1
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	3b41      	subs	r3, #65	; 0x41
 80012d4:	fa00 f203 	lsl.w	r2, r0, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a2a      	ldr	r2, [pc, #168]	; (8001390 <HAL_ADC_ConfigChannel+0x284>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10a      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1f4>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012f2:	d105      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_ADC_ConfigChannel+0x288>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_ADC_ConfigChannel+0x288>)
 80012fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <HAL_ADC_ConfigChannel+0x284>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d109      	bne.n	800131e <HAL_ADC_ConfigChannel+0x212>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b12      	cmp	r3, #18
 8001310:	d105      	bne.n	800131e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_ADC_ConfigChannel+0x288>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_ADC_ConfigChannel+0x288>)
 8001318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800131c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_ADC_ConfigChannel+0x284>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d125      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x268>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <HAL_ADC_ConfigChannel+0x280>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d003      	beq.n	800133a <HAL_ADC_ConfigChannel+0x22e>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b11      	cmp	r3, #17
 8001338:	d11c      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_ADC_ConfigChannel+0x288>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_ADC_ConfigChannel+0x288>)
 8001340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001344:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_ADC_ConfigChannel+0x280>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d111      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_ADC_ConfigChannel+0x28c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a11      	ldr	r2, [pc, #68]	; (800139c <HAL_ADC_ConfigChannel+0x290>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9a      	lsrs	r2, r3, #18
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001366:	e002      	b.n	800136e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3b01      	subs	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f9      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	10000012 	.word	0x10000012
 8001390:	40012000 	.word	0x40012000
 8001394:	40012300 	.word	0x40012300
 8001398:	20000010 	.word	0x20000010
 800139c:	431bde83 	.word	0x431bde83

080013a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80013a8:	4b78      	ldr	r3, [pc, #480]	; (800158c <ADC_Init+0x1ec>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a77      	ldr	r2, [pc, #476]	; (800158c <ADC_Init+0x1ec>)
 80013ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80013b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80013b4:	4b75      	ldr	r3, [pc, #468]	; (800158c <ADC_Init+0x1ec>)
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4973      	ldr	r1, [pc, #460]	; (800158c <ADC_Init+0x1ec>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6859      	ldr	r1, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	021a      	lsls	r2, r3, #8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6899      	ldr	r1, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	4a58      	ldr	r2, [pc, #352]	; (8001590 <ADC_Init+0x1f0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d022      	beq.n	800147a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6899      	ldr	r1, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6899      	ldr	r1, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	e00f      	b.n	800149a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001498:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0202 	bic.w	r2, r2, #2
 80014a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6899      	ldr	r1, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	005a      	lsls	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01b      	beq.n	8001500 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	3b01      	subs	r3, #1
 80014f4:	035a      	lsls	r2, r3, #13
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	e007      	b.n	8001510 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	3b01      	subs	r3, #1
 800152c:	051a      	lsls	r2, r3, #20
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6899      	ldr	r1, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001552:	025a      	lsls	r2, r3, #9
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800156a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6899      	ldr	r1, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	029a      	lsls	r2, r3, #10
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	609a      	str	r2, [r3, #8]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40012300 	.word	0x40012300
 8001590:	0f000001 	.word	0x0f000001

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <__NVIC_SetPriorityGrouping+0x40>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x40>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00
 80015d8:	05fa0000 	.word	0x05fa0000

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	; (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff3e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff31 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80017c8:	4ba9      	ldr	r3, [pc, #676]	; (8001a70 <HAL_ETH_Init+0x2b8>)
 80017ca:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e181      	b.n	8001ae2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d106      	bne.n	80017f8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f002 fd24 	bl	8004240 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f8:	4b9e      	ldr	r3, [pc, #632]	; (8001a74 <HAL_ETH_Init+0x2bc>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	4a9d      	ldr	r2, [pc, #628]	; (8001a74 <HAL_ETH_Init+0x2bc>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001802:	6453      	str	r3, [r2, #68]	; 0x44
 8001804:	4b9b      	ldr	r3, [pc, #620]	; (8001a74 <HAL_ETH_Init+0x2bc>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001810:	4b99      	ldr	r3, [pc, #612]	; (8001a78 <HAL_ETH_Init+0x2c0>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a98      	ldr	r2, [pc, #608]	; (8001a78 <HAL_ETH_Init+0x2c0>)
 8001816:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800181a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800181c:	4b96      	ldr	r3, [pc, #600]	; (8001a78 <HAL_ETH_Init+0x2c0>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4994      	ldr	r1, [pc, #592]	; (8001a78 <HAL_ETH_Init+0x2c0>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0201 	orr.w	r2, r2, #1
 800183c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001840:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001842:	f7ff fb09 	bl	8000e58 <HAL_GetTick>
 8001846:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001848:	e011      	b.n	800186e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800184a:	f7ff fb05 	bl	8000e58 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001858:	d909      	bls.n	800186e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2203      	movs	r2, #3
 800185e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e139      	b.n	8001ae2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1e4      	bne.n	800184a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f023 031c 	bic.w	r3, r3, #28
 800188e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001890:	f001 ff9a 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8001894:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4a78      	ldr	r2, [pc, #480]	; (8001a7c <HAL_ETH_Init+0x2c4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d908      	bls.n	80018b0 <HAL_ETH_Init+0xf8>
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4a77      	ldr	r2, [pc, #476]	; (8001a80 <HAL_ETH_Init+0x2c8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d804      	bhi.n	80018b0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	61fb      	str	r3, [r7, #28]
 80018ae:	e027      	b.n	8001900 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <HAL_ETH_Init+0x2c8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d908      	bls.n	80018ca <HAL_ETH_Init+0x112>
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	4a6d      	ldr	r2, [pc, #436]	; (8001a70 <HAL_ETH_Init+0x2b8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d204      	bcs.n	80018ca <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f043 030c 	orr.w	r3, r3, #12
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	e01a      	b.n	8001900 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4a68      	ldr	r2, [pc, #416]	; (8001a70 <HAL_ETH_Init+0x2b8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d303      	bcc.n	80018da <HAL_ETH_Init+0x122>
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4a6b      	ldr	r2, [pc, #428]	; (8001a84 <HAL_ETH_Init+0x2cc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d911      	bls.n	80018fe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4a69      	ldr	r2, [pc, #420]	; (8001a84 <HAL_ETH_Init+0x2cc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d908      	bls.n	80018f4 <HAL_ETH_Init+0x13c>
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4a68      	ldr	r2, [pc, #416]	; (8001a88 <HAL_ETH_Init+0x2d0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d804      	bhi.n	80018f4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e005      	b.n	8001900 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f043 0310 	orr.w	r3, r3, #16
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	e000      	b.n	8001900 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80018fe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001908:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800190c:	2100      	movs	r1, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 fc1d 	bl	800214e <HAL_ETH_WritePHYRegister>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800191e:	6939      	ldr	r1, [r7, #16]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 fdd3 	bl	80024cc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0d7      	b.n	8001ae2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001932:	20ff      	movs	r0, #255	; 0xff
 8001934:	f7ff fa9c 	bl	8000e70 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80a5 	beq.w	8001a8c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001942:	f7ff fa89 	bl	8000e58 <HAL_GetTick>
 8001946:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	461a      	mov	r2, r3
 800194e:	2101      	movs	r1, #1
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fb94 	bl	800207e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001956:	f7ff fa7f 	bl	8000e58 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d90f      	bls.n	8001988 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800196c:	6939      	ldr	r1, [r7, #16]
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fdac 	bl	80024cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e0ac      	b.n	8001ae2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0da      	beq.n	8001948 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001992:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001996:	2100      	movs	r1, #0
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 fbd8 	bl	800214e <HAL_ETH_WritePHYRegister>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 fd8e 	bl	80024cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80019b8:	2301      	movs	r3, #1
 80019ba:	e092      	b.n	8001ae2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fa4c 	bl	8000e58 <HAL_GetTick>
 80019c0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	461a      	mov	r2, r3
 80019c8:	2101      	movs	r1, #1
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fb57 	bl	800207e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80019d0:	f7ff fa42 	bl	8000e58 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d90f      	bls.n	8001a02 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80019e6:	6939      	ldr	r1, [r7, #16]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fd6f 	bl	80024cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e06f      	b.n	8001ae2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0da      	beq.n	80019c2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	461a      	mov	r2, r3
 8001a12:	2110      	movs	r1, #16
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fb32 	bl	800207e <HAL_ETH_ReadPHYRegister>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a24:	6939      	ldr	r1, [r7, #16]
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fd50 	bl	80024cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001a34:	2301      	movs	r3, #1
 8001a36:	e054      	b.n	8001ae2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	e002      	b.n	8001a52 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	e035      	b.n	8001ad0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	e030      	b.n	8001ad0 <HAL_ETH_Init+0x318>
 8001a6e:	bf00      	nop
 8001a70:	03938700 	.word	0x03938700
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	01312cff 	.word	0x01312cff
 8001a80:	02160ebf 	.word	0x02160ebf
 8001a84:	05f5e0ff 	.word	0x05f5e0ff
 8001a88:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fb52 	bl	800214e <HAL_ETH_WritePHYRegister>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ab4:	6939      	ldr	r1, [r7, #16]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fd08 	bl	80024cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e00c      	b.n	8001ae2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001ac8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001acc:	f7ff f9d0 	bl	8000e70 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001ad0:	6939      	ldr	r1, [r7, #16]
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fcfa 	bl	80024cc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop

08001aec <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_ETH_DMATxDescListInit+0x20>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e052      	b.n	8001bb2 <HAL_ETH_DMATxDescListInit+0xc6>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e030      	b.n	8001b8a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	015b      	lsls	r3, r3, #5
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	4413      	add	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b38:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b40:	fb02 f303 	mul.w	r3, r2, r3
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d208      	bcs.n	8001b7e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	015b      	lsls	r3, r3, #5
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	4413      	add	r3, r2
 8001b76:	461a      	mov	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	e002      	b.n	8001b84 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d3ca      	bcc.n	8001b28 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6819      	ldr	r1, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b9c:	440b      	add	r3, r1
 8001b9e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b087      	sub	sp, #28
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_ETH_DMARxDescListInit+0x20>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e056      	b.n	8001c8c <HAL_ETH_DMARxDescListInit+0xce>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2202      	movs	r2, #2
 8001bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e034      	b.n	8001c64 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	015b      	lsls	r3, r3, #5
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c0a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c12:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	461a      	mov	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d208      	bcs.n	8001c58 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	4413      	add	r3, r2
 8001c50:	461a      	mov	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	e002      	b.n	8001c5e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3c6      	bcc.n	8001bfa <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6819      	ldr	r1, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	f241 030c 	movw	r3, #4108	; 0x100c
 8001c76:	440b      	add	r3, r1
 8001c78:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_ETH_TransmitFrame+0x24>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e0cd      	b.n	8001e58 <HAL_ETH_TransmitFrame+0x1c0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e0b8      	b.n	8001e58 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da09      	bge.n	8001d04 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2212      	movs	r2, #18
 8001cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0a9      	b.n	8001e58 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d915      	bls.n	8001d3a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	4a54      	ldr	r2, [pc, #336]	; (8001e64 <HAL_ETH_TransmitFrame+0x1cc>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	4b51      	ldr	r3, [pc, #324]	; (8001e64 <HAL_ETH_TransmitFrame+0x1cc>)
 8001d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001d28:	fb01 f303 	mul.w	r3, r1, r3
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	e001      	b.n	8001d3e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d11c      	bne.n	8001d7e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001d52:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001d5e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d6e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	461a      	mov	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d7c:	e04b      	b.n	8001e16 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e044      	b.n	8001e0e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d92:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001da8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001db2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d116      	bne.n	8001dec <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001dcc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <HAL_ETH_TransmitFrame+0x1d0>)
 8001dd2:	fb02 f203 	mul.w	r2, r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001dde:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001dea:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001dfa:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3b6      	bcc.n	8001d84 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001e1e:	4413      	add	r3, r2
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00d      	beq.n	8001e46 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001e32:	4413      	add	r3, r2
 8001e34:	2204      	movs	r2, #4
 8001e36:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e40:	4413      	add	r3, r2
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	ac02b00b 	.word	0xac02b00b
 8001e68:	fffffa0c 	.word	0xfffffa0c

08001e6c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ETH_GetReceivedFrame+0x1a>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e070      	b.n	8001f68 <HAL_ETH_GetReceivedFrame+0xfc>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db5a      	blt.n	8001f56 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d030      	beq.n	8001f10 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d103      	bne.n	8001ec8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0c1b      	lsrs	r3, r3, #16
 8001ed8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001edc:	3b04      	subs	r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e02b      	b.n	8001f68 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d010      	beq.n	8001f40 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f3e:	e00a      	b.n	8001f56 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f84:	4413      	add	r3, r2
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b40      	cmp	r3, #64	; 0x40
 8001f8e:	d112      	bne.n	8001fb6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f860 	bl	8002056 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f9e:	4413      	add	r3, r2
 8001fa0:	2240      	movs	r2, #64	; 0x40
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fb4:	e01b      	b.n	8001fee <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f241 0314 	movw	r3, #4116	; 0x1014
 8001fbe:	4413      	add	r3, r2
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d111      	bne.n	8001fee <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f839 	bl	8002042 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	f241 0314 	movw	r3, #4116	; 0x1014
 8001fd8:	4413      	add	r3, r2
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ffc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f241 0314 	movw	r3, #4116	; 0x1014
 8002006:	4413      	add	r3, r2
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800200e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002012:	d112      	bne.n	800203a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f828 	bl	800206a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002022:	4413      	add	r3, r2
 8002024:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002028:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	460b      	mov	r3, r1
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b82      	cmp	r3, #130	; 0x82
 800209e:	d101      	bne.n	80020a4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
 80020a2:	e050      	b.n	8002146 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2282      	movs	r2, #130	; 0x82
 80020a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 031c 	and.w	r3, r3, #28
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8a1b      	ldrh	r3, [r3, #16]
 80020c0:	02db      	lsls	r3, r3, #11
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	019b      	lsls	r3, r3, #6
 80020ce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f023 0302 	bic.w	r3, r3, #2
 80020de:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80020f0:	f7fe feb2 	bl	8000e58 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020f6:	e015      	b.n	8002124 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80020f8:	f7fe feae 	bl	8000e58 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d309      	bcc.n	800211c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e014      	b.n	8002146 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1e4      	bne.n	80020f8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	b29b      	uxth	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	460b      	mov	r3, r1
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b42      	cmp	r3, #66	; 0x42
 800216e:	d101      	bne.n	8002174 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
 8002172:	e04e      	b.n	8002212 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2242      	movs	r2, #66	; 0x42
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 031c 	and.w	r3, r3, #28
 800218a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8a1b      	ldrh	r3, [r3, #16]
 8002190:	02db      	lsls	r3, r3, #11
 8002192:	b29b      	uxth	r3, r3
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800219a:	897b      	ldrh	r3, [r7, #10]
 800219c:	019b      	lsls	r3, r3, #6
 800219e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80021ca:	f7fe fe45 	bl	8000e58 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021d0:	e015      	b.n	80021fe <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80021d2:	f7fe fe41 	bl	8000e58 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d309      	bcc.n	80021f6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e00d      	b.n	8002212 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e4      	bne.n	80021d2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_ETH_Start+0x16>
 800222c:	2302      	movs	r3, #2
 800222e:	e01f      	b.n	8002270 <HAL_ETH_Start+0x56>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fb45 	bl	80028d0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fb7c 	bl	8002944 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fc13 	bl	8002a78 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fbb0 	bl	80029b8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fbdd 	bl	8002a18 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_ETH_Stop+0x16>
 800228a:	2302      	movs	r3, #2
 800228c:	e01f      	b.n	80022ce <HAL_ETH_Stop+0x56>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fba2 	bl	80029e8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fbcf 	bl	8002a48 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fb67 	bl	800297e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fbe1 	bl	8002a78 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fb27 	bl	800290a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_ETH_ConfigMAC+0x1c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e0e4      	b.n	80024be <HAL_ETH_ConfigMAC+0x1e6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80b1 	beq.w	800246e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002324:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800232a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002330:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002336:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800233c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002342:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002348:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800234e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002354:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800235a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002360:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002366:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800237e:	2001      	movs	r0, #1
 8002380:	f7fe fd76 	bl	8000e70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002394:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800239a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80023a0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80023a6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80023ac:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80023b2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80023be:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023c0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7fe fd50 	bl	8000e70 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023e0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023ea:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80023fa:	4013      	ands	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002408:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800240e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002414:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800241a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002420:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002438:	2001      	movs	r0, #1
 800243a:	f7fe fd19 	bl	8000e70 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800245e:	2001      	movs	r0, #1
 8002460:	f7fe fd06 	bl	8000e70 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	61da      	str	r2, [r3, #28]
 800246c:	e01e      	b.n	80024ac <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800247c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7fe fce6 	bl	8000e70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	ff20810f 	.word	0xff20810f

080024cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0b0      	sub	sp, #192	; 0xc0
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024e8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80024fa:	2300      	movs	r3, #0
 80024fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002516:	663b      	str	r3, [r7, #96]	; 0x60
 8002518:	e001      	b.n	800251e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800251e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002522:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002528:	2300      	movs	r3, #0
 800252a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002538:	2340      	movs	r3, #64	; 0x40
 800253a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80025a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a4:	4bab      	ldr	r3, [pc, #684]	; (8002854 <ETH_MACDMAConfig+0x388>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80025ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80025ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80025b0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80025b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80025b4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80025b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80025b8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80025be:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80025c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80025c2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80025c6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80025cc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80025ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80025d0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80025d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80025d4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80025d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80025d8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80025da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80025dc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80025de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80025e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80025e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002600:	2001      	movs	r0, #1
 8002602:	f7fe fc35 	bl	8000e70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800260e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002610:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002614:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002618:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800261a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800261e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002624:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800262a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800262c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002630:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002634:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800263c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800263e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800264a:	2001      	movs	r0, #1
 800264c:	f7fe fc10 	bl	8000e70 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002658:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002662:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800266c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002678:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800267c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002680:	4013      	ands	r3, r2
 8002682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002686:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800268a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800268c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002690:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002696:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800269c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800269e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80026a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80026a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80026a8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80026aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026bc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7fe fbd1 	bl	8000e70 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026d6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80026d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80026dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f7fe fbbc 	bl	8000e70 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002700:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800270a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002710:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002714:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002726:	2304      	movs	r3, #4
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800272a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002746:	2300      	movs	r3, #0
 8002748:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800274a:	2300      	movs	r3, #0
 800274c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f241 0318 	movw	r3, #4120	; 0x1018
 8002756:	4413      	add	r3, r2
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800275e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002762:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <ETH_MACDMAConfig+0x38c>)
 8002764:	4013      	ands	r3, r2
 8002766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800276a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800276c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800276e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002770:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002772:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002774:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002776:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002778:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800277a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800277c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800277e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002780:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002782:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002786:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002788:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800278a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800278c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	f241 0318 	movw	r3, #4120	; 0x1018
 800279e:	4413      	add	r3, r2
 80027a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80027ae:	4413      	add	r3, r2
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7fe fb5a 	bl	8000e70 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80027c4:	4413      	add	r3, r2
 80027c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027d0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80027d4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80027d8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80027da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80027dc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80027de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80027e2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80027e6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002804:	2001      	movs	r0, #1
 8002806:	f7fe fb33 	bl	8000e70 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002812:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002816:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10d      	bne.n	800283c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	f241 031c 	movw	r3, #4124	; 0x101c
 8002828:	4413      	add	r3, r2
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6811      	ldr	r1, [r2, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <ETH_MACDMAConfig+0x390>)
 8002832:	431a      	orrs	r2, r3
 8002834:	f241 031c 	movw	r3, #4124	; 0x101c
 8002838:	440b      	add	r3, r1
 800283a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	461a      	mov	r2, r3
 8002842:	2100      	movs	r1, #0
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f80b 	bl	8002860 <ETH_MACAddressConfig>
}
 800284a:	bf00      	nop
 800284c:	37c0      	adds	r7, #192	; 0xc0
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	ff20810f 	.word	0xff20810f
 8002858:	f8de3f23 	.word	0xf8de3f23
 800285c:	00010040 	.word	0x00010040

08002860 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3305      	adds	r3, #5
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	3204      	adds	r2, #4
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <ETH_MACAddressConfig+0x68>)
 8002882:	4413      	add	r3, r2
 8002884:	461a      	mov	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3303      	adds	r3, #3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	061a      	lsls	r2, r3, #24
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3302      	adds	r3, #2
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3301      	adds	r3, #1
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	4313      	orrs	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <ETH_MACAddressConfig+0x6c>)
 80028b2:	4413      	add	r3, r2
 80028b4:	461a      	mov	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	6013      	str	r3, [r2, #0]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40028040 	.word	0x40028040
 80028cc:	40028044 	.word	0x40028044

080028d0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0208 	orr.w	r2, r2, #8
 80028ea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7fe fabb 	bl	8000e70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0208 	bic.w	r2, r2, #8
 8002924:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800292e:	2001      	movs	r0, #1
 8002930:	f7fe fa9e 	bl	8000e70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0204 	orr.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002968:	2001      	movs	r0, #1
 800296a:	f7fe fa81 	bl	8000e70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	601a      	str	r2, [r3, #0]
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fe fa64 	bl	8000e70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80029c8:	4413      	add	r3, r2
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6811      	ldr	r1, [r2, #0]
 80029d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80029d8:	440b      	add	r3, r1
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80029f8:	4413      	add	r3, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6811      	ldr	r1, [r2, #0]
 8002a00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a04:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a08:	440b      	add	r3, r1
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a28:	4413      	add	r3, r2
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6811      	ldr	r1, [r2, #0]
 8002a30:	f043 0202 	orr.w	r2, r3, #2
 8002a34:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a38:	440b      	add	r3, r1
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a58:	4413      	add	r3, r2
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6811      	ldr	r1, [r2, #0]
 8002a60:	f023 0202 	bic.w	r2, r3, #2
 8002a64:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a68:	440b      	add	r3, r1
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a8c:	4413      	add	r3, r2
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6811      	ldr	r1, [r2, #0]
 8002a94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a98:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a9c:	440b      	add	r3, r1
 8002a9e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f7fe f9de 	bl	8000e70 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f241 0318 	movw	r3, #4120	; 0x1018
 8002abe:	440b      	add	r3, r1
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e175      	b.n	8002dd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8164 	bne.w	8002dd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d00b      	beq.n	8002b2a <HAL_GPIO_Init+0x5e>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b1e:	2b11      	cmp	r3, #17
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x100>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b12      	cmp	r3, #18
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80be 	beq.w	8002dd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c6e:	4a61      	ldr	r2, [pc, #388]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_GPIO_Init+0x32c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d037      	beq.n	8002d0a <HAL_GPIO_Init+0x23e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d031      	beq.n	8002d06 <HAL_GPIO_Init+0x23a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a56      	ldr	r2, [pc, #344]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02b      	beq.n	8002d02 <HAL_GPIO_Init+0x236>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a55      	ldr	r2, [pc, #340]	; (8002e04 <HAL_GPIO_Init+0x338>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d025      	beq.n	8002cfe <HAL_GPIO_Init+0x232>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a54      	ldr	r2, [pc, #336]	; (8002e08 <HAL_GPIO_Init+0x33c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <HAL_GPIO_Init+0x22e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <HAL_GPIO_Init+0x340>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0x22a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_GPIO_Init+0x344>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <HAL_GPIO_Init+0x348>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00d      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a50      	ldr	r2, [pc, #320]	; (8002e18 <HAL_GPIO_Init+0x34c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <HAL_GPIO_Init+0x350>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002ce2:	2309      	movs	r3, #9
 8002ce4:	e012      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002ce6:	230a      	movs	r3, #10
 8002ce8:	e010      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cea:	2308      	movs	r3, #8
 8002cec:	e00e      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cee:	2307      	movs	r3, #7
 8002cf0:	e00c      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	e00a      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	e008      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f002 0203 	and.w	r2, r2, #3
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4093      	lsls	r3, r2
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d1c:	4935      	ldr	r1, [pc, #212]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4e:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b0f      	cmp	r3, #15
 8002ddc:	f67f ae86 	bls.w	8002aec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	40020800 	.word	0x40020800
 8002e04:	40020c00 	.word	0x40020c00
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40021400 	.word	0x40021400
 8002e10:	40021800 	.word	0x40021800
 8002e14:	40021c00 	.word	0x40021c00
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40022400 	.word	0x40022400
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e001      	b.n	8002e46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	807b      	strh	r3, [r7, #2]
 8002e60:	4613      	mov	r3, r2
 8002e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e70:	e003      	b.n	8002e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	041a      	lsls	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	619a      	str	r2, [r3, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb6:	f7fd ffcf 	bl	8000e58 <HAL_GetTick>
 8002eba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ebc:	e009      	b.n	8002ed2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ebe:	f7fd ffcb 	bl	8000e58 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ecc:	d901      	bls.n	8002ed2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e022      	b.n	8002f18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ede:	d1ee      	bne.n	8002ebe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eec:	f7fd ffb4 	bl	8000e58 <HAL_GetTick>
 8002ef0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ef2:	e009      	b.n	8002f08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ef4:	f7fd ffb0 	bl	8000e58 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f02:	d901      	bls.n	8002f08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e007      	b.n	8002f18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40007000 	.word	0x40007000

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e29b      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8087 	beq.w	800305a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d00c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f58:	4b93      	ldr	r3, [pc, #588]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d112      	bne.n	8002f8a <HAL_RCC_OscConfig+0x62>
 8002f64:	4b90      	ldr	r3, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f70:	d10b      	bne.n	8002f8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f72:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d06c      	beq.n	8003058 <HAL_RCC_OscConfig+0x130>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d168      	bne.n	8003058 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e275      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x7a>
 8002f94:	4b84      	ldr	r3, [pc, #528]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a83      	ldr	r2, [pc, #524]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	e02e      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x9c>
 8002faa:	4b7f      	ldr	r3, [pc, #508]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a7e      	ldr	r2, [pc, #504]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	4b7c      	ldr	r3, [pc, #496]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7b      	ldr	r2, [pc, #492]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0xc0>
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b73      	ldr	r3, [pc, #460]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xd8>
 8002fe8:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6b      	ldr	r2, [pc, #428]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fd ff26 	bl	8000e58 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003010:	f7fd ff22 	bl	8000e58 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e229      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xe8>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd ff12 	bl	8000e58 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7fd ff0e 	bl	8000e58 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e215      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b57      	ldr	r3, [pc, #348]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x110>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d069      	beq.n	800313a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003066:	4b50      	ldr	r3, [pc, #320]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x190>
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1e9      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	493d      	ldr	r1, [pc, #244]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e040      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d023      	beq.n	8003108 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b39      	ldr	r3, [pc, #228]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fd fec4 	bl	8000e58 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fd fec0 	bl	8000e58 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1c7      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4929      	ldr	r1, [pc, #164]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
 8003106:	e018      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fd fea0 	bl	8000e58 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7fd fe9c 	bl	8000e58 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e1a3      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d038      	beq.n	80031b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d019      	beq.n	8003182 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd fe7d 	bl	8000e58 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7fd fe79 	bl	8000e58 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e180      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x23a>
 8003180:	e01a      	b.n	80031b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_RCC_OscConfig+0x280>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fd fe63 	bl	8000e58 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003196:	f7fd fe5f 	bl	8000e58 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d903      	bls.n	80031ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e166      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
 80031a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ac:	4b92      	ldr	r3, [pc, #584]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ee      	bne.n	8003196 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a4 	beq.w	800330e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c6:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10d      	bne.n	80031ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	4a88      	ldr	r2, [pc, #544]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	; 0x40
 80031de:	4b86      	ldr	r3, [pc, #536]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ea:	2301      	movs	r3, #1
 80031ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ee:	4b83      	ldr	r3, [pc, #524]	; (80033fc <HAL_RCC_OscConfig+0x4d4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d118      	bne.n	800322c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031fa:	4b80      	ldr	r3, [pc, #512]	; (80033fc <HAL_RCC_OscConfig+0x4d4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7f      	ldr	r2, [pc, #508]	; (80033fc <HAL_RCC_OscConfig+0x4d4>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003206:	f7fd fe27 	bl	8000e58 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800320e:	f7fd fe23 	bl	8000e58 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b64      	cmp	r3, #100	; 0x64
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e12a      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCC_OscConfig+0x4d4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x31a>
 8003234:	4b70      	ldr	r3, [pc, #448]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a6f      	ldr	r2, [pc, #444]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	e02d      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x33c>
 800324a:	4b6b      	ldr	r3, [pc, #428]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324e:	4a6a      	ldr	r2, [pc, #424]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003250:	f023 0301 	bic.w	r3, r3, #1
 8003254:	6713      	str	r3, [r2, #112]	; 0x70
 8003256:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a67      	ldr	r2, [pc, #412]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800325c:	f023 0304 	bic.w	r3, r3, #4
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	e01c      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b05      	cmp	r3, #5
 800326a:	d10c      	bne.n	8003286 <HAL_RCC_OscConfig+0x35e>
 800326c:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003270:	4a61      	ldr	r2, [pc, #388]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6713      	str	r3, [r2, #112]	; 0x70
 8003278:	4b5f      	ldr	r3, [pc, #380]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a5e      	ldr	r2, [pc, #376]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	e00b      	b.n	800329e <HAL_RCC_OscConfig+0x376>
 8003286:	4b5c      	ldr	r3, [pc, #368]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a5b      	ldr	r2, [pc, #364]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	4b59      	ldr	r3, [pc, #356]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003298:	f023 0304 	bic.w	r3, r3, #4
 800329c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d015      	beq.n	80032d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fd fdd7 	bl	8000e58 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fd fdd3 	bl	8000e58 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e0d8      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	4b4c      	ldr	r3, [pc, #304]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ee      	beq.n	80032ae <HAL_RCC_OscConfig+0x386>
 80032d0:	e014      	b.n	80032fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d2:	f7fd fdc1 	bl	8000e58 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd fdbd 	bl	8000e58 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e0c2      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	4b41      	ldr	r3, [pc, #260]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ee      	bne.n	80032da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a3c      	ldr	r2, [pc, #240]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80ae 	beq.w	8003474 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003318:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b08      	cmp	r3, #8
 8003322:	d06d      	beq.n	8003400 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d14b      	bne.n	80033c4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fd8e 	bl	8000e58 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fd fd8a 	bl	8000e58 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e091      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	019b      	lsls	r3, r3, #6
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	3b01      	subs	r3, #1
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	491b      	ldr	r1, [pc, #108]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fd fd5c 	bl	8000e58 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fd fd58 	bl	8000e58 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e05f      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0x47c>
 80033c2:	e057      	b.n	8003474 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7fd fd42 	bl	8000e58 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d8:	f7fd fd3e 	bl	8000e58 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e045      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ea:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4b0>
 80033f6:	e03d      	b.n	8003474 <HAL_RCC_OscConfig+0x54c>
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003400:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <HAL_RCC_OscConfig+0x558>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d030      	beq.n	8003470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d129      	bne.n	8003470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d122      	bne.n	8003470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003436:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003438:	4293      	cmp	r3, r2
 800343a:	d119      	bne.n	8003470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	3b01      	subs	r3, #1
 800344a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d10f      	bne.n	8003470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800346c:	429a      	cmp	r2, r3
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800

08003484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0d0      	b.n	800363e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800349c:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d910      	bls.n	80034cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b67      	ldr	r3, [pc, #412]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 020f 	bic.w	r2, r3, #15
 80034b2:	4965      	ldr	r1, [pc, #404]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0b8      	b.n	800363e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d020      	beq.n	800351a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e4:	4b59      	ldr	r3, [pc, #356]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a58      	ldr	r2, [pc, #352]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003508:	4b50      	ldr	r3, [pc, #320]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	494d      	ldr	r1, [pc, #308]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d040      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d115      	bne.n	8003566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e07f      	b.n	800363e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b41      	ldr	r3, [pc, #260]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e073      	b.n	800363e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e06b      	b.n	800363e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b39      	ldr	r3, [pc, #228]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4936      	ldr	r1, [pc, #216]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003578:	f7fd fc6e 	bl	8000e58 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fd fc6a 	bl	8000e58 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e053      	b.n	800363e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d210      	bcs.n	80035d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f023 020f 	bic.w	r2, r3, #15
 80035be:	4922      	ldr	r1, [pc, #136]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d001      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e032      	b.n	800363e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4916      	ldr	r1, [pc, #88]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	490e      	ldr	r1, [pc, #56]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003616:	f000 f821 	bl	800365c <HAL_RCC_GetSysClockFreq>
 800361a:	4602      	mov	r2, r0
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	490a      	ldr	r1, [pc, #40]	; (8003650 <HAL_RCC_ClockConfig+0x1cc>)
 8003628:	5ccb      	ldrb	r3, [r1, r3]
 800362a:	fa22 f303 	lsr.w	r3, r2, r3
 800362e:	4a09      	ldr	r2, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1d0>)
 8003630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1d4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fbca 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40023c00 	.word	0x40023c00
 800364c:	40023800 	.word	0x40023800
 8003650:	0801798c 	.word	0x0801798c
 8003654:	20000010 	.word	0x20000010
 8003658:	20000014 	.word	0x20000014

0800365c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800365c:	b5b0      	push	{r4, r5, r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003662:	2100      	movs	r1, #0
 8003664:	6079      	str	r1, [r7, #4]
 8003666:	2100      	movs	r1, #0
 8003668:	60f9      	str	r1, [r7, #12]
 800366a:	2100      	movs	r1, #0
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800366e:	2100      	movs	r1, #0
 8003670:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003672:	4952      	ldr	r1, [pc, #328]	; (80037bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003674:	6889      	ldr	r1, [r1, #8]
 8003676:	f001 010c 	and.w	r1, r1, #12
 800367a:	2908      	cmp	r1, #8
 800367c:	d00d      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x3e>
 800367e:	2908      	cmp	r1, #8
 8003680:	f200 8094 	bhi.w	80037ac <HAL_RCC_GetSysClockFreq+0x150>
 8003684:	2900      	cmp	r1, #0
 8003686:	d002      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x32>
 8003688:	2904      	cmp	r1, #4
 800368a:	d003      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x38>
 800368c:	e08e      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800368e:	4b4c      	ldr	r3, [pc, #304]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003690:	60bb      	str	r3, [r7, #8]
      break;
 8003692:	e08e      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003694:	4b4b      	ldr	r3, [pc, #300]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003696:	60bb      	str	r3, [r7, #8]
      break;
 8003698:	e08b      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800369a:	4948      	ldr	r1, [pc, #288]	; (80037bc <HAL_RCC_GetSysClockFreq+0x160>)
 800369c:	6849      	ldr	r1, [r1, #4]
 800369e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80036a2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036a4:	4945      	ldr	r1, [pc, #276]	; (80037bc <HAL_RCC_GetSysClockFreq+0x160>)
 80036a6:	6849      	ldr	r1, [r1, #4]
 80036a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80036ac:	2900      	cmp	r1, #0
 80036ae:	d024      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b0:	4942      	ldr	r1, [pc, #264]	; (80037bc <HAL_RCC_GetSysClockFreq+0x160>)
 80036b2:	6849      	ldr	r1, [r1, #4]
 80036b4:	0989      	lsrs	r1, r1, #6
 80036b6:	4608      	mov	r0, r1
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036c0:	f04f 0500 	mov.w	r5, #0
 80036c4:	ea00 0204 	and.w	r2, r0, r4
 80036c8:	ea01 0305 	and.w	r3, r1, r5
 80036cc:	493d      	ldr	r1, [pc, #244]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036ce:	fb01 f003 	mul.w	r0, r1, r3
 80036d2:	2100      	movs	r1, #0
 80036d4:	fb01 f102 	mul.w	r1, r1, r2
 80036d8:	1844      	adds	r4, r0, r1
 80036da:	493a      	ldr	r1, [pc, #232]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80036dc:	fba2 0101 	umull	r0, r1, r2, r1
 80036e0:	1863      	adds	r3, r4, r1
 80036e2:	4619      	mov	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	f7fc fe10 	bl	8000310 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e04a      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <HAL_RCC_GetSysClockFreq+0x160>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	461a      	mov	r2, r3
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	f240 10ff 	movw	r0, #511	; 0x1ff
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	ea02 0400 	and.w	r4, r2, r0
 8003712:	ea03 0501 	and.w	r5, r3, r1
 8003716:	4620      	mov	r0, r4
 8003718:	4629      	mov	r1, r5
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	014b      	lsls	r3, r1, #5
 8003724:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003728:	0142      	lsls	r2, r0, #5
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	1b00      	subs	r0, r0, r4
 8003730:	eb61 0105 	sbc.w	r1, r1, r5
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	018b      	lsls	r3, r1, #6
 800373e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003742:	0182      	lsls	r2, r0, #6
 8003744:	1a12      	subs	r2, r2, r0
 8003746:	eb63 0301 	sbc.w	r3, r3, r1
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	00d9      	lsls	r1, r3, #3
 8003754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003758:	00d0      	lsls	r0, r2, #3
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	1912      	adds	r2, r2, r4
 8003760:	eb45 0303 	adc.w	r3, r5, r3
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	0299      	lsls	r1, r3, #10
 800376e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003772:	0290      	lsls	r0, r2, #10
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	f7fc fdc4 	bl	8000310 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4613      	mov	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	3301      	adds	r3, #1
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	60bb      	str	r3, [r7, #8]
      break;
 80037aa:	e002      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80037ae:	60bb      	str	r3, [r7, #8]
      break;
 80037b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b2:	68bb      	ldr	r3, [r7, #8]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bdb0      	pop	{r4, r5, r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	017d7840 	.word	0x017d7840

080037c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000010 	.word	0x20000010

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037e4:	f7ff fff0 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0a9b      	lsrs	r3, r3, #10
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	0801799c 	.word	0x0801799c

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800380c:	f7ff ffdc 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0b5b      	lsrs	r3, r3, #13
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	0801799c 	.word	0x0801799c

08003830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e040      	b.n	80038c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f83a 	bl	80038cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	; 0x24
 800385c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8ca 	bl	8003a08 <UART_SetConfig>
 8003874:	4603      	mov	r3, r0
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fb20 	bl	8003ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800389a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fba7 	bl	8004010 <UART_CheckIdleState>
 80038c2:	4603      	mov	r3, r0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	f040 8081 	bne.w	80039fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_Transmit+0x26>
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e079      	b.n	80039fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_UART_Transmit+0x38>
 8003914:	2302      	movs	r3, #2
 8003916:	e072      	b.n	80039fe <HAL_UART_Transmit+0x11e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2221      	movs	r2, #33	; 0x21
 800392c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800392e:	f7fd fa93 	bl	8000e58 <HAL_GetTick>
 8003932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	88fa      	ldrh	r2, [r7, #6]
 8003938:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394c:	d108      	bne.n	8003960 <HAL_UART_Transmit+0x80>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	e003      	b.n	8003968 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003970:	e02c      	b.n	80039cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2200      	movs	r2, #0
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fb90 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e038      	b.n	80039fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10b      	bne.n	80039aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	3302      	adds	r3, #2
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	e007      	b.n	80039ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3301      	adds	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1cc      	bne.n	8003972 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	2140      	movs	r1, #64	; 0x40
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fb5d 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e005      	b.n	80039fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4ba7      	ldr	r3, [pc, #668]	; (8003cd0 <UART_SetConfig+0x2c8>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a95      	ldr	r2, [pc, #596]	; (8003cd4 <UART_SetConfig+0x2cc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d120      	bne.n	8003ac6 <UART_SetConfig+0xbe>
 8003a84:	4b94      	ldr	r3, [pc, #592]	; (8003cd8 <UART_SetConfig+0x2d0>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d816      	bhi.n	8003ac0 <UART_SetConfig+0xb8>
 8003a92:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <UART_SetConfig+0x90>)
 8003a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab5 	.word	0x08003ab5
 8003aa0:	08003aaf 	.word	0x08003aaf
 8003aa4:	08003abb 	.word	0x08003abb
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e14f      	b.n	8003d4e <UART_SetConfig+0x346>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e14c      	b.n	8003d4e <UART_SetConfig+0x346>
 8003ab4:	2304      	movs	r3, #4
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e149      	b.n	8003d4e <UART_SetConfig+0x346>
 8003aba:	2308      	movs	r3, #8
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e146      	b.n	8003d4e <UART_SetConfig+0x346>
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e143      	b.n	8003d4e <UART_SetConfig+0x346>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a84      	ldr	r2, [pc, #528]	; (8003cdc <UART_SetConfig+0x2d4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d132      	bne.n	8003b36 <UART_SetConfig+0x12e>
 8003ad0:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <UART_SetConfig+0x2d0>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d828      	bhi.n	8003b30 <UART_SetConfig+0x128>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <UART_SetConfig+0xdc>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b19 	.word	0x08003b19
 8003ae8:	08003b31 	.word	0x08003b31
 8003aec:	08003b31 	.word	0x08003b31
 8003af0:	08003b31 	.word	0x08003b31
 8003af4:	08003b25 	.word	0x08003b25
 8003af8:	08003b31 	.word	0x08003b31
 8003afc:	08003b31 	.word	0x08003b31
 8003b00:	08003b31 	.word	0x08003b31
 8003b04:	08003b1f 	.word	0x08003b1f
 8003b08:	08003b31 	.word	0x08003b31
 8003b0c:	08003b31 	.word	0x08003b31
 8003b10:	08003b31 	.word	0x08003b31
 8003b14:	08003b2b 	.word	0x08003b2b
 8003b18:	2300      	movs	r3, #0
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e117      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e114      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b24:	2304      	movs	r3, #4
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e111      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e10e      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b30:	2310      	movs	r3, #16
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e10b      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a69      	ldr	r2, [pc, #420]	; (8003ce0 <UART_SetConfig+0x2d8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d120      	bne.n	8003b82 <UART_SetConfig+0x17a>
 8003b40:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <UART_SetConfig+0x2d0>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b4a:	2b30      	cmp	r3, #48	; 0x30
 8003b4c:	d013      	beq.n	8003b76 <UART_SetConfig+0x16e>
 8003b4e:	2b30      	cmp	r3, #48	; 0x30
 8003b50:	d814      	bhi.n	8003b7c <UART_SetConfig+0x174>
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d009      	beq.n	8003b6a <UART_SetConfig+0x162>
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d810      	bhi.n	8003b7c <UART_SetConfig+0x174>
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <UART_SetConfig+0x15c>
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d006      	beq.n	8003b70 <UART_SetConfig+0x168>
 8003b62:	e00b      	b.n	8003b7c <UART_SetConfig+0x174>
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e0f1      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e0ee      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b70:	2304      	movs	r3, #4
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e0eb      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b76:	2308      	movs	r3, #8
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e0e8      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e0e5      	b.n	8003d4e <UART_SetConfig+0x346>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a57      	ldr	r2, [pc, #348]	; (8003ce4 <UART_SetConfig+0x2dc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d120      	bne.n	8003bce <UART_SetConfig+0x1c6>
 8003b8c:	4b52      	ldr	r3, [pc, #328]	; (8003cd8 <UART_SetConfig+0x2d0>)
 8003b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b96:	2bc0      	cmp	r3, #192	; 0xc0
 8003b98:	d013      	beq.n	8003bc2 <UART_SetConfig+0x1ba>
 8003b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b9c:	d814      	bhi.n	8003bc8 <UART_SetConfig+0x1c0>
 8003b9e:	2b80      	cmp	r3, #128	; 0x80
 8003ba0:	d009      	beq.n	8003bb6 <UART_SetConfig+0x1ae>
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d810      	bhi.n	8003bc8 <UART_SetConfig+0x1c0>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <UART_SetConfig+0x1a8>
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d006      	beq.n	8003bbc <UART_SetConfig+0x1b4>
 8003bae:	e00b      	b.n	8003bc8 <UART_SetConfig+0x1c0>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e0cb      	b.n	8003d4e <UART_SetConfig+0x346>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e0c8      	b.n	8003d4e <UART_SetConfig+0x346>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e0c5      	b.n	8003d4e <UART_SetConfig+0x346>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e0c2      	b.n	8003d4e <UART_SetConfig+0x346>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e0bf      	b.n	8003d4e <UART_SetConfig+0x346>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a45      	ldr	r2, [pc, #276]	; (8003ce8 <UART_SetConfig+0x2e0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d125      	bne.n	8003c24 <UART_SetConfig+0x21c>
 8003bd8:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <UART_SetConfig+0x2d0>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be6:	d017      	beq.n	8003c18 <UART_SetConfig+0x210>
 8003be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bec:	d817      	bhi.n	8003c1e <UART_SetConfig+0x216>
 8003bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf2:	d00b      	beq.n	8003c0c <UART_SetConfig+0x204>
 8003bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf8:	d811      	bhi.n	8003c1e <UART_SetConfig+0x216>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <UART_SetConfig+0x1fe>
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c02:	d006      	beq.n	8003c12 <UART_SetConfig+0x20a>
 8003c04:	e00b      	b.n	8003c1e <UART_SetConfig+0x216>
 8003c06:	2300      	movs	r3, #0
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e0a0      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e09d      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c12:	2304      	movs	r3, #4
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e09a      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e097      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c1e:	2310      	movs	r3, #16
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e094      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a30      	ldr	r2, [pc, #192]	; (8003cec <UART_SetConfig+0x2e4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d125      	bne.n	8003c7a <UART_SetConfig+0x272>
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <UART_SetConfig+0x2d0>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c3c:	d017      	beq.n	8003c6e <UART_SetConfig+0x266>
 8003c3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c42:	d817      	bhi.n	8003c74 <UART_SetConfig+0x26c>
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c48:	d00b      	beq.n	8003c62 <UART_SetConfig+0x25a>
 8003c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4e:	d811      	bhi.n	8003c74 <UART_SetConfig+0x26c>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <UART_SetConfig+0x254>
 8003c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c58:	d006      	beq.n	8003c68 <UART_SetConfig+0x260>
 8003c5a:	e00b      	b.n	8003c74 <UART_SetConfig+0x26c>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e075      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c62:	2302      	movs	r3, #2
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e072      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c68:	2304      	movs	r3, #4
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e06f      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c6e:	2308      	movs	r3, #8
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e06c      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c74:	2310      	movs	r3, #16
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e069      	b.n	8003d4e <UART_SetConfig+0x346>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <UART_SetConfig+0x2e8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d137      	bne.n	8003cf4 <UART_SetConfig+0x2ec>
 8003c84:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <UART_SetConfig+0x2d0>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c92:	d017      	beq.n	8003cc4 <UART_SetConfig+0x2bc>
 8003c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c98:	d817      	bhi.n	8003cca <UART_SetConfig+0x2c2>
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9e:	d00b      	beq.n	8003cb8 <UART_SetConfig+0x2b0>
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d811      	bhi.n	8003cca <UART_SetConfig+0x2c2>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <UART_SetConfig+0x2aa>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cae:	d006      	beq.n	8003cbe <UART_SetConfig+0x2b6>
 8003cb0:	e00b      	b.n	8003cca <UART_SetConfig+0x2c2>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e04a      	b.n	8003d4e <UART_SetConfig+0x346>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e047      	b.n	8003d4e <UART_SetConfig+0x346>
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e044      	b.n	8003d4e <UART_SetConfig+0x346>
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e041      	b.n	8003d4e <UART_SetConfig+0x346>
 8003cca:	2310      	movs	r3, #16
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e03e      	b.n	8003d4e <UART_SetConfig+0x346>
 8003cd0:	efff69f3 	.word	0xefff69f3
 8003cd4:	40011000 	.word	0x40011000
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40004400 	.word	0x40004400
 8003ce0:	40004800 	.word	0x40004800
 8003ce4:	40004c00 	.word	0x40004c00
 8003ce8:	40005000 	.word	0x40005000
 8003cec:	40011400 	.word	0x40011400
 8003cf0:	40007800 	.word	0x40007800
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a71      	ldr	r2, [pc, #452]	; (8003ec0 <UART_SetConfig+0x4b8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d125      	bne.n	8003d4a <UART_SetConfig+0x342>
 8003cfe:	4b71      	ldr	r3, [pc, #452]	; (8003ec4 <UART_SetConfig+0x4bc>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d0c:	d017      	beq.n	8003d3e <UART_SetConfig+0x336>
 8003d0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d12:	d817      	bhi.n	8003d44 <UART_SetConfig+0x33c>
 8003d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d18:	d00b      	beq.n	8003d32 <UART_SetConfig+0x32a>
 8003d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1e:	d811      	bhi.n	8003d44 <UART_SetConfig+0x33c>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <UART_SetConfig+0x324>
 8003d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d28:	d006      	beq.n	8003d38 <UART_SetConfig+0x330>
 8003d2a:	e00b      	b.n	8003d44 <UART_SetConfig+0x33c>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e00d      	b.n	8003d4e <UART_SetConfig+0x346>
 8003d32:	2302      	movs	r3, #2
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e00a      	b.n	8003d4e <UART_SetConfig+0x346>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e007      	b.n	8003d4e <UART_SetConfig+0x346>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e004      	b.n	8003d4e <UART_SetConfig+0x346>
 8003d44:	2310      	movs	r3, #16
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e001      	b.n	8003d4e <UART_SetConfig+0x346>
 8003d4a:	2310      	movs	r3, #16
 8003d4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d56:	d15b      	bne.n	8003e10 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003d58:	7ffb      	ldrb	r3, [r7, #31]
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d827      	bhi.n	8003dae <UART_SetConfig+0x3a6>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <UART_SetConfig+0x35c>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d9f 	.word	0x08003d9f
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7ff fd2a 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8003d8c:	61b8      	str	r0, [r7, #24]
        break;
 8003d8e:	e013      	b.n	8003db8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7ff fd3a 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8003d94:	61b8      	str	r0, [r7, #24]
        break;
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <UART_SetConfig+0x4c0>)
 8003d9a:	61bb      	str	r3, [r7, #24]
        break;
 8003d9c:	e00c      	b.n	8003db8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7ff fc5d 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8003da2:	61b8      	str	r0, [r7, #24]
        break;
 8003da4:	e008      	b.n	8003db8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	61bb      	str	r3, [r7, #24]
        break;
 8003dac:	e004      	b.n	8003db8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	77bb      	strb	r3, [r7, #30]
        break;
 8003db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d074      	beq.n	8003ea8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	005a      	lsls	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	441a      	add	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b0f      	cmp	r3, #15
 8003dda:	d916      	bls.n	8003e0a <UART_SetConfig+0x402>
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de2:	d212      	bcs.n	8003e0a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f023 030f 	bic.w	r3, r3, #15
 8003dec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	89fb      	ldrh	r3, [r7, #14]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	89fa      	ldrh	r2, [r7, #14]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e04e      	b.n	8003ea8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	77bb      	strb	r3, [r7, #30]
 8003e0e:	e04b      	b.n	8003ea8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e10:	7ffb      	ldrb	r3, [r7, #31]
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d827      	bhi.n	8003e66 <UART_SetConfig+0x45e>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x414>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e49 	.word	0x08003e49
 8003e24:	08003e51 	.word	0x08003e51
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e57 	.word	0x08003e57
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e67 	.word	0x08003e67
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7ff fcce 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 8003e44:	61b8      	str	r0, [r7, #24]
        break;
 8003e46:	e013      	b.n	8003e70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e48:	f7ff fcde 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8003e4c:	61b8      	str	r0, [r7, #24]
        break;
 8003e4e:	e00f      	b.n	8003e70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <UART_SetConfig+0x4c0>)
 8003e52:	61bb      	str	r3, [r7, #24]
        break;
 8003e54:	e00c      	b.n	8003e70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7ff fc01 	bl	800365c <HAL_RCC_GetSysClockFreq>
 8003e5a:	61b8      	str	r0, [r7, #24]
        break;
 8003e5c:	e008      	b.n	8003e70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	61bb      	str	r3, [r7, #24]
        break;
 8003e64:	e004      	b.n	8003e70 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d018      	beq.n	8003ea8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	085a      	lsrs	r2, r3, #1
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	441a      	add	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b0f      	cmp	r3, #15
 8003e90:	d908      	bls.n	8003ea4 <UART_SetConfig+0x49c>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e98:	d204      	bcs.n	8003ea4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	e001      	b.n	8003ea8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40007c00 	.word	0x40007c00
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	00f42400 	.word	0x00f42400

08003ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01a      	beq.n	8003fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fca:	d10a      	bne.n	8003fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af02      	add	r7, sp, #8
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004020:	f7fc ff1a 	bl	8000e58 <HAL_GetTick>
 8004024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b08      	cmp	r3, #8
 8004032:	d10e      	bne.n	8004052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f82d 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e023      	b.n	800409a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b04      	cmp	r3, #4
 800405e:	d10e      	bne.n	800407e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f817 	bl	80040a2 <UART_WaitOnFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e00d      	b.n	800409a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b2:	e05e      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d05a      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040bc:	f7fc fecc 	bl	8000e58 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d302      	bcc.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11b      	bne.n	800410a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e043      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02c      	beq.n	8004172 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004126:	d124      	bne.n	8004172 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004130:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004140:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e00f      	b.n	8004192 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	429a      	cmp	r2, r3
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	429a      	cmp	r2, r3
 800418e:	d091      	beq.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <lwip_lib_init>:
uint8_t GATEWAY_ADDRESS[4];



void lwip_lib_init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af04      	add	r7, sp, #16

	 ipaddr.addr = 0;
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <lwip_lib_init+0x70>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
	 netmask.addr = 0;
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <lwip_lib_init+0x74>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
	 gw.addr = 0;
 80041ae:	4b19      	ldr	r3, [pc, #100]	; (8004214 <lwip_lib_init+0x78>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

	 /*Initialize lwip stack  without RTOS*/
	 lwip_init();
 80041b4:	f002 f8ab 	bl	800630e <lwip_init>
	 /*Add network interface without using RTOS*/
	 netif_add(&gnetif,&ipaddr,&netmask,&gw,NULL,&ethernetif_init,&ethernet_input);
 80041b8:	4b17      	ldr	r3, [pc, #92]	; (8004218 <lwip_lib_init+0x7c>)
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	4b17      	ldr	r3, [pc, #92]	; (800421c <lwip_lib_init+0x80>)
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <lwip_lib_init+0x78>)
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <lwip_lib_init+0x74>)
 80041c8:	4910      	ldr	r1, [pc, #64]	; (800420c <lwip_lib_init+0x70>)
 80041ca:	4815      	ldr	r0, [pc, #84]	; (8004220 <lwip_lib_init+0x84>)
 80041cc:	f002 fdb4 	bl	8006d38 <netif_add>

	 /*Register default netif */
	 netif_set_default(&gnetif);
 80041d0:	4813      	ldr	r0, [pc, #76]	; (8004220 <lwip_lib_init+0x84>)
 80041d2:	f002 ff6b 	bl	80070ac <netif_set_default>

	 /*Check if link is up*/
	 if(netif_is_link_up(&gnetif))
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <lwip_lib_init+0x84>)
 80041d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <lwip_lib_init+0x54>
	 {
		 netif_set_up(&gnetif);
 80041e8:	480d      	ldr	r0, [pc, #52]	; (8004220 <lwip_lib_init+0x84>)
 80041ea:	f002 ff6f 	bl	80070cc <netif_set_up>
 80041ee:	e002      	b.n	80041f6 <lwip_lib_init+0x5a>
	 }
	 else
	 {
		 netif_set_down(&gnetif);
 80041f0:	480b      	ldr	r0, [pc, #44]	; (8004220 <lwip_lib_init+0x84>)
 80041f2:	f002 ffd7 	bl	80071a4 <netif_set_down>
	 }


	 /*Set link change callback*/
	 netif_set_link_callback(&gnetif,ethernetif_update_config);
 80041f6:	490b      	ldr	r1, [pc, #44]	; (8004224 <lwip_lib_init+0x88>)
 80041f8:	4809      	ldr	r0, [pc, #36]	; (8004220 <lwip_lib_init+0x84>)
 80041fa:	f003 f805 	bl	8007208 <netif_set_link_callback>

	 /*Enable DHCP*/
	 dhcp_start(&gnetif);
 80041fe:	4808      	ldr	r0, [pc, #32]	; (8004220 <lwip_lib_init+0x84>)
 8004200:	f00b f95a 	bl	800f4b8 <dhcp_start>

}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000814 	.word	0x20000814
 8004210:	20000820 	.word	0x20000820
 8004214:	20000824 	.word	0x20000824
 8004218:	08013389 	.word	0x08013389
 800421c:	08004839 	.word	0x08004839
 8004220:	200007dc 	.word	0x200007dc
 8004224:	08004875 	.word	0x08004875

08004228 <lwip_process>:



void lwip_process(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
	ethernetif_input(&gnetif);
 800422c:	4803      	ldr	r0, [pc, #12]	; (800423c <lwip_process+0x14>)
 800422e:	f000 fadb 	bl	80047e8 <ethernetif_input>
	sys_check_timeouts();
 8004232:	f00a f83d 	bl	800e2b0 <sys_check_timeouts>
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200007dc 	.word	0x200007dc

08004240 <HAL_ETH_MspInit>:

		void);


void HAL_ETH_MspInit( ETH_HandleTypeDef * ethHandle )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	; 0x38
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	611a      	str	r2, [r3, #16]

	if(ethHandle->Instance ==  ETH)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a4e      	ldr	r2, [pc, #312]	; (8004398 <HAL_ETH_MspInit+0x158>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f040 8096 	bne.w	8004390 <HAL_ETH_MspInit+0x150>
		PB13     ------> ETH_TXD1
		PG11     ------> ETH_TX_EN
		PG13     ------> ETH_TXD0
		*/

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8004264:	4b4d      	ldr	r3, [pc, #308]	; (800439c <HAL_ETH_MspInit+0x15c>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	4a4c      	ldr	r2, [pc, #304]	; (800439c <HAL_ETH_MspInit+0x15c>)
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	6313      	str	r3, [r2, #48]	; 0x30
 8004270:	4b4a      	ldr	r3, [pc, #296]	; (800439c <HAL_ETH_MspInit+0x15c>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800427c:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_ETH_MspInit+0x15c>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004280:	4a46      	ldr	r2, [pc, #280]	; (800439c <HAL_ETH_MspInit+0x15c>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6313      	str	r3, [r2, #48]	; 0x30
 8004288:	4b44      	ldr	r3, [pc, #272]	; (800439c <HAL_ETH_MspInit+0x15c>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8004294:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_ETH_MspInit+0x15c>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	4a40      	ldr	r2, [pc, #256]	; (800439c <HAL_ETH_MspInit+0x15c>)
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	6313      	str	r3, [r2, #48]	; 0x30
 80042a0:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4a3a      	ldr	r2, [pc, #232]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b6:	6313      	str	r3, [r2, #48]	; 0x30
 80042b8:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_ETH_CLK_ENABLE();
 80042c4:	4b35      	ldr	r3, [pc, #212]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	4a34      	ldr	r2, [pc, #208]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042ce:	6313      	str	r3, [r2, #48]	; 0x30
 80042d0:	4b32      	ldr	r3, [pc, #200]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4b2f      	ldr	r3, [pc, #188]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	4a2e      	ldr	r2, [pc, #184]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042e6:	6313      	str	r3, [r2, #48]	; 0x30
 80042e8:	4b2c      	ldr	r3, [pc, #176]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4b29      	ldr	r3, [pc, #164]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4a28      	ldr	r2, [pc, #160]	; (800439c <HAL_ETH_MspInit+0x15c>)
 80042fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004300:	4b26      	ldr	r3, [pc, #152]	; (800439c <HAL_ETH_MspInit+0x15c>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]


		GPIO_InitStruct.Pin   = GPIO_PIN_1 |GPIO_PIN_4|GPIO_PIN_5;
 800430c:	2332      	movs	r3, #50	; 0x32
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8004310:	2302      	movs	r3, #2
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004314:	2303      	movs	r3, #3
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004318:	230b      	movs	r3, #11
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004320:	4619      	mov	r1, r3
 8004322:	481f      	ldr	r0, [pc, #124]	; (80043a0 <HAL_ETH_MspInit+0x160>)
 8004324:	f7fe fbd2 	bl	8002acc <HAL_GPIO_Init>

		GPIO_InitStruct.Pin   = GPIO_PIN_1 |GPIO_PIN_2|GPIO_PIN_7;
 8004328:	2386      	movs	r3, #134	; 0x86
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004330:	2303      	movs	r3, #3
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004334:	230b      	movs	r3, #11
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800433c:	4619      	mov	r1, r3
 800433e:	4819      	ldr	r0, [pc, #100]	; (80043a4 <HAL_ETH_MspInit+0x164>)
 8004340:	f7fe fbc4 	bl	8002acc <HAL_GPIO_Init>

		GPIO_InitStruct.Pin   = GPIO_PIN_13;
 8004344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 800434a:	2302      	movs	r3, #2
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434e:	2303      	movs	r3, #3
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004352:	230b      	movs	r3, #11
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800435a:	4619      	mov	r1, r3
 800435c:	4812      	ldr	r0, [pc, #72]	; (80043a8 <HAL_ETH_MspInit+0x168>)
 800435e:	f7fe fbb5 	bl	8002acc <HAL_GPIO_Init>


		GPIO_InitStruct.Pin   = GPIO_PIN_11 |GPIO_PIN_13;
 8004362:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8004368:	2302      	movs	r3, #2
 800436a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436c:	2303      	movs	r3, #3
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004370:	230b      	movs	r3, #11
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	4619      	mov	r1, r3
 800437a:	480c      	ldr	r0, [pc, #48]	; (80043ac <HAL_ETH_MspInit+0x16c>)
 800437c:	f7fe fba6 	bl	8002acc <HAL_GPIO_Init>

		/*Set ETH interrupt priority*/

		HAL_NVIC_SetPriority(ETH_IRQn,0,0);
 8004380:	2200      	movs	r2, #0
 8004382:	2100      	movs	r1, #0
 8004384:	203d      	movs	r0, #61	; 0x3d
 8004386:	f7fd f9e0 	bl	800174a <HAL_NVIC_SetPriority>

		/*Enable ETH interrupt*/
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 800438a:	203d      	movs	r0, #61	; 0x3d
 800438c:	f7fd f9f9 	bl	8001782 <HAL_NVIC_EnableIRQ>

	}

}
 8004390:	bf00      	nop
 8004392:	3738      	adds	r7, #56	; 0x38
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40028000 	.word	0x40028000
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020800 	.word	0x40020800
 80043a4:	40020000 	.word	0x40020000
 80043a8:	40020400 	.word	0x40020400
 80043ac:	40021800 	.word	0x40021800

080043b0 <low_level_init>:



static void low_level_init(struct netif *netif)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	613b      	str	r3, [r7, #16]

  HAL_StatusTypeDef 	hal_eth_init_status;

  uint8_t MACAddr[6];

  heth.Instance = ETH;
 80043bc:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <low_level_init+0x144>)
 80043be:	4a4e      	ldr	r2, [pc, #312]	; (80044f8 <low_level_init+0x148>)
 80043c0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation =  ETH_AUTONEGOTIATION_ENABLE;
 80043c2:	4b4c      	ldr	r3, [pc, #304]	; (80044f4 <low_level_init+0x144>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed =  ETH_SPEED_100M;
 80043c8:	4b4a      	ldr	r3, [pc, #296]	; (80044f4 <low_level_init+0x144>)
 80043ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043ce:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode =  ETH_MODE_FULLDUPLEX;
 80043d0:	4b48      	ldr	r3, [pc, #288]	; (80044f4 <low_level_init+0x144>)
 80043d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043d6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80043d8:	4b46      	ldr	r3, [pc, #280]	; (80044f4 <low_level_init+0x144>)
 80043da:	2200      	movs	r2, #0
 80043dc:	821a      	strh	r2, [r3, #16]

  MACAddr[0] = 0x00;
 80043de:	2300      	movs	r3, #0
 80043e0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xAB;
 80043e2:	23ab      	movs	r3, #171	; 0xab
 80043e4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xCD;
 80043e6:	23cd      	movs	r3, #205	; 0xcd
 80043e8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80043ea:	2300      	movs	r3, #0
 80043ec:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80043ee:	2300      	movs	r3, #0
 80043f0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80043f2:	2300      	movs	r3, #0
 80043f4:	737b      	strb	r3, [r7, #13]

  heth.Init.MACAddr = &MACAddr[0];
 80043f6:	4a3f      	ldr	r2, [pc, #252]	; (80044f4 <low_level_init+0x144>)
 80043f8:	f107 0308 	add.w	r3, r7, #8
 80043fc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode  =  ETH_RXPOLLING_MODE;
 80043fe:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <low_level_init+0x144>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]

  heth.Init.ChecksumMode =  ETH_CHECKSUM_BY_HARDWARE;
 8004404:	4b3b      	ldr	r3, [pc, #236]	; (80044f4 <low_level_init+0x144>)
 8004406:	2200      	movs	r2, #0
 8004408:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface =  ETH_MEDIA_INTERFACE_RMII;
 800440a:	4b3a      	ldr	r3, [pc, #232]	; (80044f4 <low_level_init+0x144>)
 800440c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004410:	621a      	str	r2, [r3, #32]

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004412:	4838      	ldr	r0, [pc, #224]	; (80044f4 <low_level_init+0x144>)
 8004414:	f7fd f9d0 	bl	80017b8 <HAL_ETH_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	75fb      	strb	r3, [r7, #23]

  if(hal_eth_init_status ==  HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <low_level_init+0x84>
  {
	  netif->flags |= NETIF_FLAG_LINK_UP;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	b2da      	uxtb	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0],ETH_TXBUFNB);
 8004434:	2305      	movs	r3, #5
 8004436:	4a31      	ldr	r2, [pc, #196]	; (80044fc <low_level_init+0x14c>)
 8004438:	4931      	ldr	r1, [pc, #196]	; (8004500 <low_level_init+0x150>)
 800443a:	482e      	ldr	r0, [pc, #184]	; (80044f4 <low_level_init+0x144>)
 800443c:	f7fd fb56 	bl	8001aec <HAL_ETH_DMATxDescListInit>

  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0],ETH_RXBUFNB);
 8004440:	2305      	movs	r3, #5
 8004442:	4a30      	ldr	r2, [pc, #192]	; (8004504 <low_level_init+0x154>)
 8004444:	4930      	ldr	r1, [pc, #192]	; (8004508 <low_level_init+0x158>)
 8004446:	482b      	ldr	r0, [pc, #172]	; (80044f4 <low_level_init+0x144>)
 8004448:	f7fd fbb9 	bl	8001bbe <HAL_ETH_DMARxDescListInit>

  /*set MAC address len*/
  netif->hwaddr_len =  ETH_HWADDR_LEN;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2206      	movs	r2, #6
 8004450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  netif->hwaddr[0] = heth.Init.MACAddr[0];
 8004454:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <low_level_init+0x144>)
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	781a      	ldrb	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] = heth.Init.MACAddr[1];
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <low_level_init+0x144>)
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	785a      	ldrb	r2, [r3, #1]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] = heth.Init.MACAddr[2];
 800446c:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <low_level_init+0x144>)
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	789a      	ldrb	r2, [r3, #2]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] = heth.Init.MACAddr[3];
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <low_level_init+0x144>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	78da      	ldrb	r2, [r3, #3]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] = heth.Init.MACAddr[4];
 8004484:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <low_level_init+0x144>)
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	791a      	ldrb	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] = heth.Init.MACAddr[5];
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <low_level_init+0x144>)
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	795a      	ldrb	r2, [r3, #5]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f


   /*Set MTU : Maximum transfer unit*/
  netif->mtu = 1500;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80044a2:	851a      	strh	r2, [r3, #40]	; 0x28

  /*Enable broadcasting and ARP*/
  netif->flags  |= NETIF_FLAG_BROADCAST |NETIF_FLAG_ETHARP;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044aa:	f043 030a 	orr.w	r3, r3, #10
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /*Start MAC and DMA transmission and reception*/

  HAL_ETH_Start(&heth);
 80044b6:	480f      	ldr	r0, [pc, #60]	; (80044f4 <low_level_init+0x144>)
 80044b8:	f7fd feaf 	bl	800221a <HAL_ETH_Start>


  /*Enable link down interupt*/
  HAL_ETH_ReadPHYRegister(&heth,PHY_ISFR,&regvalue);
 80044bc:	f107 0310 	add.w	r3, r7, #16
 80044c0:	461a      	mov	r2, r3
 80044c2:	211d      	movs	r1, #29
 80044c4:	480b      	ldr	r0, [pc, #44]	; (80044f4 <low_level_init+0x144>)
 80044c6:	f7fd fdda 	bl	800207e <HAL_ETH_ReadPHYRegister>
  regvalue |= PHY_ISFR_INT4;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f043 030b 	orr.w	r3, r3, #11
 80044d0:	613b      	str	r3, [r7, #16]

  HAL_ETH_WritePHYRegister(&heth,PHY_ISFR,regvalue);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	461a      	mov	r2, r3
 80044d6:	211d      	movs	r1, #29
 80044d8:	4806      	ldr	r0, [pc, #24]	; (80044f4 <low_level_init+0x144>)
 80044da:	f7fd fe38 	bl	800214e <HAL_ETH_WritePHYRegister>

  HAL_ETH_ReadPHYRegister(&heth,PHY_ISFR,&regvalue);
 80044de:	f107 0310 	add.w	r3, r7, #16
 80044e2:	461a      	mov	r2, r3
 80044e4:	211d      	movs	r1, #29
 80044e6:	4803      	ldr	r0, [pc, #12]	; (80044f4 <low_level_init+0x144>)
 80044e8:	f7fd fdc9 	bl	800207e <HAL_ETH_ReadPHYRegister>



}
 80044ec:	bf00      	nop
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	2000272c 	.word	0x2000272c
 80044f8:	40028000 	.word	0x40028000
 80044fc:	20002774 	.word	0x20002774
 8004500:	20000828 	.word	0x20000828
 8004504:	200008c8 	.word	0x200008c8
 8004508:	2000268c 	.word	0x2000268c

0800450c <low_level_output>:


static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
	err_t errval;
	struct pbuf *q;
	__IO ETH_DMADescTypeDef	*DmaTxDesc;
	uint8_t *buffer =  (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004516:	4b4a      	ldr	r3, [pc, #296]	; (8004640 <low_level_output+0x134>)
 8004518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	61fb      	str	r3, [r7, #28]
	DmaTxDesc  = heth.TxDesc;
 800451e:	4b48      	ldr	r3, [pc, #288]	; (8004640 <low_level_output+0x134>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	623b      	str	r3, [r7, #32]

	uint32_t framelength = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
	uint32_t bufferoffset = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
	uint32_t byteslefttocopy = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
	uint32_t payloadoffset = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]


	/*Copy frames from pbufs ro ETH buff*/

	for(q = p; q != NULL; q =  q->next )
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
 8004538:	e05a      	b.n	80045f0 <low_level_output+0xe4>
	{
		/*Check if buffer is available*/
		if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) !=  (uint32_t)RESET)
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	da03      	bge.n	800454a <low_level_output+0x3e>
		{
			errval =  ERR_USE;
 8004542:	23f8      	movs	r3, #248	; 0xf8
 8004544:	72fb      	strb	r3, [r7, #11]
			process_error();
 8004546:	f000 f87d 	bl	8004644 <process_error>
		}

	    byteslefttocopy = q->len;
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	895b      	ldrh	r3, [r3, #10]
 800454e:	613b      	str	r3, [r7, #16]
	    payloadoffset = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]

	    /*Copy and update size variables when data length is larger than TX BUFF Size*/
	    while((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 8004554:	e02f      	b.n	80045b6 <low_level_output+0xaa>
	    {
	    	/*Copy data to TX buffer*/
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 8004556:	69fa      	ldr	r2, [r7, #28]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	18d0      	adds	r0, r2, r3
	    			(uint8_t *)((uint8_t *)q->payload + payloadoffset),
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	685a      	ldr	r2, [r3, #4]
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	18d1      	adds	r1, r2, r3
					(ETH_TX_BUF_SIZE - bufferoffset));
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800456a:	1a9b      	subs	r3, r3, r2
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 800456c:	461a      	mov	r2, r3
 800456e:	f00f f83f 	bl	80135f0 <memcpy>

	    	/*Point to the next descriptor*/
	    	DmaTxDesc  =  (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	623b      	str	r3, [r7, #32]

			/*Check if buffer is available*/
			if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) !=  (uint32_t)RESET)
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	da03      	bge.n	8004588 <low_level_output+0x7c>
			{
				errval =  ERR_USE;
 8004580:	23f8      	movs	r3, #248	; 0xf8
 8004582:	72fb      	strb	r3, [r7, #11]
				process_error();
 8004584:	f000 f85e 	bl	8004644 <process_error>
			}

			buffer  =  (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	61fb      	str	r3, [r7, #28]

			byteslefttocopy  = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset );
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004598:	613b      	str	r3, [r7, #16]
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset );
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80045a4:	60fb      	str	r3, [r7, #12]
			framelength =  framelength + (ETH_TX_BUF_SIZE - bufferoffset );
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80045b0:	61bb      	str	r3, [r7, #24]

			bufferoffset = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
	    while((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	4413      	add	r3, r2
 80045bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d8c8      	bhi.n	8004556 <low_level_output+0x4a>
	    }

	    /*Copy the rest of bytes*/
	    memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	18d0      	adds	r0, r2, r3
    			(uint8_t *)((uint8_t *)q->payload + payloadoffset),
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	685a      	ldr	r2, [r3, #4]
	    memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4619      	mov	r1, r3
 80045d6:	f00f f80b 	bl	80135f0 <memcpy>
				byteslefttocopy);

    	bufferoffset  =  bufferoffset + byteslefttocopy;
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
    	framelength   =  framelength + byteslefttocopy;
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4413      	add	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
	for(q = p; q != NULL; q =  q->next )
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1a1      	bne.n	800453a <low_level_output+0x2e>


	}

	/*Prep TX descriptors to give to DMA*/
	HAL_ETH_TransmitFrame(&heth,framelength);
 80045f6:	69b9      	ldr	r1, [r7, #24]
 80045f8:	4811      	ldr	r0, [pc, #68]	; (8004640 <low_level_output+0x134>)
 80045fa:	f7fd fb4d 	bl	8001c98 <HAL_ETH_TransmitFrame>

	errval = ERR_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	72fb      	strb	r3, [r7, #11]

	/*Check if Transmit Underflow Status (TUS) is set*/
	if((heth.Instance->DMASR & ETH_DMASR_TUS) !=  (uint32_t)RESET)
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <low_level_output+0x134>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	f241 0314 	movw	r3, #4116	; 0x1014
 800460a:	4413      	add	r3, r2
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <low_level_output+0x126>
	{
		 /*Clear  Transmit Underflow Status (TUS)*/
		heth.Instance->DMASR =  ETH_DMASR_TUS;
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <low_level_output+0x134>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	f241 0314 	movw	r3, #4116	; 0x1014
 800461e:	4413      	add	r3, r2
 8004620:	2220      	movs	r2, #32
 8004622:	601a      	str	r2, [r3, #0]

		/*Resume DMA Transmission*/
		heth.Instance->DMATPDR = 0;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <low_level_output+0x134>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	f241 0304 	movw	r3, #4100	; 0x1004
 800462c:	4413      	add	r3, r2
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
	}


	return errval;
 8004632:	f997 300b 	ldrsb.w	r3, [r7, #11]


}
 8004636:	4618      	mov	r0, r3
 8004638:	3728      	adds	r7, #40	; 0x28
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	2000272c 	.word	0x2000272c

08004644 <process_error>:



static void process_error(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0

	/*Check if Transmit Underflow Status (TUS) is set*/
	if((heth.Instance->DMASR & ETH_DMASR_TUS) !=  (uint32_t)RESET)
 8004648:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <process_error+0x40>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004650:	4413      	add	r3, r2
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00d      	beq.n	8004678 <process_error+0x34>
	{
		 /*Clear  Transmit Underflow Status (TUS)*/
		heth.Instance->DMASR =  ETH_DMASR_TUS;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <process_error+0x40>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f241 0314 	movw	r3, #4116	; 0x1014
 8004664:	4413      	add	r3, r2
 8004666:	2220      	movs	r2, #32
 8004668:	601a      	str	r2, [r3, #0]

		/*Resume DMA Transmission*/
		heth.Instance->DMATPDR = 0;
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <process_error+0x40>)
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004672:	4413      	add	r3, r2
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
	}
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	2000272c 	.word	0x2000272c

08004688 <low_level_input>:



static struct pbuf * low_level_input(struct netif * netif)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08c      	sub	sp, #48	; 0x30
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	__IO ETH_DMADescTypeDef  *dmarxdesc;
	uint8_t * buffer;
	struct pbuf *p = NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
	struct pbuf *q = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	623b      	str	r3, [r7, #32]
	uint16_t len   = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	81fb      	strh	r3, [r7, #14]

	uint32_t bufferoffset    =  0;
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]
	uint32_t payloadoffset   =  0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
	uint32_t byteslefttocopy = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]


	/*Get received frame*/
	if(HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80046a8:	484e      	ldr	r0, [pc, #312]	; (80047e4 <low_level_input+0x15c>)
 80046aa:	f7fd fbdf 	bl	8001e6c <HAL_ETH_GetReceivedFrame>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <low_level_input+0x30>
	{
		return NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e090      	b.n	80047da <low_level_input+0x152>
	}


	/*Get size of packet*/
	len =  heth.RxFrameInfos.length;
 80046b8:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <low_level_input+0x15c>)
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	81fb      	strh	r3, [r7, #14]

	buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80046be:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <low_level_input+0x15c>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28

	if( len > 0)
 80046c4:	89fb      	ldrh	r3, [r7, #14]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <low_level_input+0x52>
	{
		/*Allocate pbuf from lwip buffer pool*/
		p  = pbuf_alloc(PBUF_RAW,len,PBUF_POOL);
 80046ca:	89fb      	ldrh	r3, [r7, #14]
 80046cc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80046d0:	4619      	mov	r1, r3
 80046d2:	2000      	movs	r0, #0
 80046d4:	f002 fe34 	bl	8007340 <pbuf_alloc>
 80046d8:	6278      	str	r0, [r7, #36]	; 0x24

	}
		if( p != NULL)
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d049      	beq.n	8004774 <low_level_input+0xec>
		{
			dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80046e0:	4b40      	ldr	r3, [pc, #256]	; (80047e4 <low_level_input+0x15c>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			bufferoffset =  0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]

			for( q = p; q != NULL; q = q->next)
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	623b      	str	r3, [r7, #32]
 80046ee:	e03e      	b.n	800476e <low_level_input+0xe6>
			{
				byteslefttocopy =  q->len;
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	895b      	ldrh	r3, [r3, #10]
 80046f4:	617b      	str	r3, [r7, #20]
				payloadoffset = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]

			    /*Copy and update size variables when data length is larger than RX BUFF Size*/


				while( (byteslefttocopy + bufferoffset) >  ETH_RX_BUF_SIZE)
 80046fa:	e01f      	b.n	800473c <low_level_input+0xb4>
				{

					/*Copy data to pbuf*/

					memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	18d0      	adds	r0, r2, r3
							((uint8_t *)((uint8_t *)buffer +  bufferoffset)),
 8004704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	18d1      	adds	r1, r2, r3
							(ETH_RX_BUF_SIZE -  bufferoffset));
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004710:	1a9b      	subs	r3, r3, r2
					memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004712:	461a      	mov	r2, r3
 8004714:	f00e ff6c 	bl	80135f0 <memcpy>

					/*Poin to the next descriptor*/
					dmarxdesc =  (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c

					buffer = (uint8_t *) dmarxdesc->Buffer1Addr;
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28

					byteslefttocopy =  byteslefttocopy - (ETH_RX_BUF_SIZE -  bufferoffset);
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4413      	add	r3, r2
 800472a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800472e:	617b      	str	r3, [r7, #20]

					payloadoffset =  payloadoffset + (ETH_RX_BUF_SIZE -  bufferoffset);
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800473a:	61bb      	str	r3, [r7, #24]
				while( (byteslefttocopy + bufferoffset) >  ETH_RX_BUF_SIZE)
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004746:	4293      	cmp	r3, r2
 8004748:	d8d8      	bhi.n	80046fc <low_level_input+0x74>

				}

				/*Copy remaining dat in pbuf*/

				memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	18d0      	adds	r0, r2, r3
						((uint8_t *)((uint8_t *)buffer +  bufferoffset)),
 8004752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
				memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4619      	mov	r1, r3
 800475c:	f00e ff48 	bl	80135f0 <memcpy>
						byteslefttocopy);


				bufferoffset  = bufferoffset + byteslefttocopy;
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	4413      	add	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]
			for( q = p; q != NULL; q = q->next)
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1bd      	bne.n	80046f0 <low_level_input+0x68>



		/*Point to first descriptor*/

		dmarxdesc =  heth.RxFrameInfos.FSRxDesc;
 8004774:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <low_level_input+0x15c>)
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c

		/*Set OWN bit in RX descriptors*/
		for(int i = 0; i<heth.RxFrameInfos.SegCount; i++)
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	e00b      	b.n	8004798 <low_level_input+0x110>
		{
			dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	601a      	str	r2, [r3, #0]
			dmarxdesc =  (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i = 0; i<heth.RxFrameInfos.SegCount; i++)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	3301      	adds	r3, #1
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <low_level_input+0x15c>)
 800479a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d8ee      	bhi.n	8004780 <low_level_input+0xf8>
		}

		/*Clear Segment Count*/

		heth.RxFrameInfos.SegCount =  0;
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <low_level_input+0x15c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38

		/*Check if RX Buffer unavailable flag is set,
		 * if so, clear and resume reception*/

		if((heth.Instance->DMASR & ETH_DMASR_RBUS) !=  (uint32_t)RESET)
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <low_level_input+0x15c>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f241 0314 	movw	r3, #4116	; 0x1014
 80047b0:	4413      	add	r3, r2
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <low_level_input+0x150>
		{
			/*Clear the RBUS flag*/
			heth.Instance->DMASR  = ETH_DMASR_RBUS;
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <low_level_input+0x15c>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	f241 0314 	movw	r3, #4116	; 0x1014
 80047c4:	4413      	add	r3, r2
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	601a      	str	r2, [r3, #0]

			/*Resume reception*/
			heth.Instance->DMARPDR = 0;
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <low_level_input+0x15c>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	f241 0308 	movw	r3, #4104	; 0x1008
 80047d2:	4413      	add	r3, r2
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
		}

	return p;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3730      	adds	r7, #48	; 0x30
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	2000272c 	.word	0x2000272c

080047e8 <ethernetif_input>:



void ethernetif_input(struct netif * netif)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	err_t err;
	struct pbuf *p;

	/*Move received pcket into new pbuf*/
	p = low_level_input(netif);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ff49 	bl	8004688 <low_level_input>
 80047f6:	60f8      	str	r0, [r7, #12]

	if( p == NULL)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d010      	beq.n	8004820 <ethernetif_input+0x38>

	{
		return;
	}
	/*Entry point into LWIP stack*/
	err = netif->input(p,netif);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	4798      	blx	r3
 8004808:	4603      	mov	r3, r0
 800480a:	72fb      	strb	r3, [r7, #11]

	if(err != ERR_OK)
 800480c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d006      	beq.n	8004822 <ethernetif_input+0x3a>
	{
		pbuf_free(p);
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f003 f833 	bl	8007880 <pbuf_free>

		p =NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e000      	b.n	8004822 <ethernetif_input+0x3a>
		return;
 8004820:	bf00      	nop
	}
}
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <sys_now>:


u32_t sys_now(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800482c:	f7fc fb14 	bl	8000e58 <HAL_GetTick>
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <ethernetif_init>:



err_t ethernetif_init(struct netif * netif)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	/*Set netif name*/
	netif->name[0] =  IFNAME0;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2245      	movs	r2, #69	; 0x45
 8004844:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	netif->name[1] =  IFNAME1;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2258      	movs	r2, #88	; 0x58
 800484c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	/*Set netif output function*/
	netif->output = etharp_output;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a06      	ldr	r2, [pc, #24]	; (800486c <ethernetif_init+0x34>)
 8004854:	615a      	str	r2, [r3, #20]

	/*Set netif link output function*/
	netif->linkoutput =  low_level_output;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a05      	ldr	r2, [pc, #20]	; (8004870 <ethernetif_init+0x38>)
 800485a:	619a      	str	r2, [r3, #24]

	/*Init hardware*/
	low_level_init(netif);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff fda7 	bl	80043b0 <low_level_init>

	return ERR_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	08011345 	.word	0x08011345
 8004870:	0800450d 	.word	0x0800450d

08004874 <ethernetif_update_config>:



void ethernetif_update_config(struct netif *netif)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	 __IO uint32_t tickstart = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
	 uint32_t regvalue = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	60bb      	str	r3, [r7, #8]

	 /*Check if link is up*/
	  if(netif_is_link_up(netif))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d062      	beq.n	800495c <ethernetif_update_config+0xe8>
	  {
		 /*Check if auto-negotiation is enabled*/
		  if(heth.Init.AutoNegotiation  != ETH_AUTONEGOTIATION_DISABLE)
 8004896:	4b36      	ldr	r3, [pc, #216]	; (8004970 <ethernetif_update_config+0xfc>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d047      	beq.n	800492e <ethernetif_update_config+0xba>
		  {
			/*Enable Auto-negotiation*/
			  HAL_ETH_WritePHYRegister(&heth,PHY_BCR, PHY_AUTONEGOTIATION);
 800489e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048a2:	2100      	movs	r1, #0
 80048a4:	4832      	ldr	r0, [pc, #200]	; (8004970 <ethernetif_update_config+0xfc>)
 80048a6:	f7fd fc52 	bl	800214e <HAL_ETH_WritePHYRegister>

			  /*Get current tick value*/
			  tickstart =  HAL_GetTick();
 80048aa:	f7fc fad5 	bl	8000e58 <HAL_GetTick>
 80048ae:	4603      	mov	r3, r0
 80048b0:	60fb      	str	r3, [r7, #12]

			  /*Wait for auto-negotiation to complete*/
			  do
			  {
				HAL_ETH_ReadPHYRegister(&heth,PHY_BSR,&regvalue);
 80048b2:	f107 0308 	add.w	r3, r7, #8
 80048b6:	461a      	mov	r2, r3
 80048b8:	2101      	movs	r1, #1
 80048ba:	482d      	ldr	r0, [pc, #180]	; (8004970 <ethernetif_update_config+0xfc>)
 80048bc:	f7fd fbdf 	bl	800207e <HAL_ETH_ReadPHYRegister>

				if((HAL_GetTick() - tickstart) > 1000 )
 80048c0:	f7fc faca 	bl	8000e58 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ce:	d90e      	bls.n	80048ee <ethernetif_update_config+0x7a>
				{
					/*Set MAC speed and Duplex Mode to PHY*/
					HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 80048d0:	4b27      	ldr	r3, [pc, #156]	; (8004970 <ethernetif_update_config+0xfc>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	08db      	lsrs	r3, r3, #3
 80048d6:	b29a      	uxth	r2, r3
																(uint16_t)(heth.Init.Speed>>1));
 80048d8:	4b25      	ldr	r3, [pc, #148]	; (8004970 <ethernetif_update_config+0xfc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	b29b      	uxth	r3, r3
					HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 80048e0:	4313      	orrs	r3, r2
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	2100      	movs	r1, #0
 80048e8:	4821      	ldr	r0, [pc, #132]	; (8004970 <ethernetif_update_config+0xfc>)
 80048ea:	f7fd fc30 	bl	800214e <HAL_ETH_WritePHYRegister>
				}

			  }while((regvalue & PHY_AUTONEGO_COMPLETE) !=  PHY_AUTONEGO_COMPLETE);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0dc      	beq.n	80048b2 <ethernetif_update_config+0x3e>

			  /*Read the results of the auto-negotiation*/

			  if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <ethernetif_update_config+0x98>
			  {
				  /*Set ETH duplex to full-duplex*/
				  heth.Init.DuplexMode =  ETH_MODE_FULLDUPLEX;
 8004902:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <ethernetif_update_config+0xfc>)
 8004904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	e002      	b.n	8004912 <ethernetif_update_config+0x9e>
			  }
			  else
			  {
				  /*Set ETH duplex to half-duplex*/
				  heth.Init.DuplexMode =  ETH_MODE_HALFDUPLEX;
 800490c:	4b18      	ldr	r3, [pc, #96]	; (8004970 <ethernetif_update_config+0xfc>)
 800490e:	2200      	movs	r2, #0
 8004910:	60da      	str	r2, [r3, #12]
			  }

			  if(regvalue & PHY_SPEED_STATUS)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <ethernetif_update_config+0xb0>
			  {
				  /*Set ETH speed 10M*/
				  heth.Init.Speed  =  ETH_SPEED_10M;
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <ethernetif_update_config+0xfc>)
 800491e:	2200      	movs	r2, #0
 8004920:	609a      	str	r2, [r3, #8]
 8004922:	e013      	b.n	800494c <ethernetif_update_config+0xd8>
			  }
			  else
			  {
				  /*Set ETH speed 100M*/
				  heth.Init.Speed  =  ETH_SPEED_100M;
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <ethernetif_update_config+0xfc>)
 8004926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	e00e      	b.n	800494c <ethernetif_update_config+0xd8>
			  }
		  }
		  else
		  {
				/*Set MAC speed and Duplex Mode to PHY*/
				HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 800492e:	4b10      	ldr	r3, [pc, #64]	; (8004970 <ethernetif_update_config+0xfc>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	08db      	lsrs	r3, r3, #3
 8004934:	b29a      	uxth	r2, r3
															(uint16_t)(heth.Init.Speed>>1));
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <ethernetif_update_config+0xfc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	b29b      	uxth	r3, r3
				HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 800493e:	4313      	orrs	r3, r2
 8004940:	b29b      	uxth	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	2100      	movs	r1, #0
 8004946:	480a      	ldr	r0, [pc, #40]	; (8004970 <ethernetif_update_config+0xfc>)
 8004948:	f7fd fc01 	bl	800214e <HAL_ETH_WritePHYRegister>
		  }


		  /*Re-configure ETH MAC*/
		  HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *)NULL);
 800494c:	2100      	movs	r1, #0
 800494e:	4808      	ldr	r0, [pc, #32]	; (8004970 <ethernetif_update_config+0xfc>)
 8004950:	f7fd fcc2 	bl	80022d8 <HAL_ETH_ConfigMAC>

		  /*Restart MAC interface*/
		  HAL_ETH_Start(&heth);
 8004954:	4806      	ldr	r0, [pc, #24]	; (8004970 <ethernetif_update_config+0xfc>)
 8004956:	f7fd fc60 	bl	800221a <HAL_ETH_Start>
 800495a:	e002      	b.n	8004962 <ethernetif_update_config+0xee>

	  }
	  else
	  {
		  /*Stop MAC*/
		  HAL_ETH_Stop(&heth);
 800495c:	4804      	ldr	r0, [pc, #16]	; (8004970 <ethernetif_update_config+0xfc>)
 800495e:	f7fd fc8b 	bl	8002278 <HAL_ETH_Stop>
	  }

	  ethernetif_notify_conn_changed(netif);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc f818 	bl	8000998 <ethernetif_notify_conn_changed>
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	2000272c 	.word	0x2000272c

08004974 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <fs_open+0x16>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <fs_open+0x1c>
    return ERR_ARG;
 800498a:	f06f 030f 	mvn.w	r3, #15
 800498e:	e028      	b.n	80049e2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004990:	4b16      	ldr	r3, [pc, #88]	; (80049ec <fs_open+0x78>)
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e020      	b.n	80049d8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4619      	mov	r1, r3
 800499c:	6838      	ldr	r0, [r7, #0]
 800499e:	f7fb fc4f 	bl	8000240 <strcmp>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d114      	bne.n	80049d2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	7c1a      	ldrb	r2, [r3, #16]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e007      	b.n	80049e2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1db      	bne.n	8004996 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80049de:	f06f 0305 	mvn.w	r3, #5
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	08041ce8 	.word	0x08041ce8

080049f0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	1ad3      	subs	r3, r2, r3
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004a28:	20e0      	movs	r0, #224	; 0xe0
 8004a2a:	f001 ff69 	bl	8006900 <mem_malloc>
 8004a2e:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004a36:	22e0      	movs	r2, #224	; 0xe0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f00e fe00 	bl	8013640 <memset>
  }
  return ret;
 8004a40:	687b      	ldr	r3, [r7, #4]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 fdb1 	bl	80065c0 <mem_free>
  }
}
 8004a5e:	bf00      	nop
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004a6e:	2230      	movs	r2, #48	; 0x30
 8004a70:	2100      	movs	r1, #0
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f00e fde4 	bl	8013640 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004a86:	2030      	movs	r0, #48	; 0x30
 8004a88:	f001 ff3a 	bl	8006900 <mem_malloc>
 8004a8c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <http_state_alloc+0x1a>
    http_state_init(ret);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ffe6 	bl	8004a66 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8004a9a:	687b      	ldr	r3, [r7, #4]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff99 	bl	80049f0 <fs_close>
    hs->handle = NULL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ffba 	bl	8004a4a <http_ssi_state_free>
    hs->ssi = NULL;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f002 fec9 	bl	8007880 <pbuf_free>
    hs->req = NULL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <http_state_free+0x1a>
    http_state_eof(hs);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff ffca 	bl	8004aa4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f001 fd55 	bl	80065c0 <mem_free>
  }
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <http_write+0x22>
 8004b34:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <http_write+0xc8>)
 8004b36:	f240 2219 	movw	r2, #537	; 0x219
 8004b3a:	492c      	ldr	r1, [pc, #176]	; (8004bec <http_write+0xcc>)
 8004b3c:	482c      	ldr	r0, [pc, #176]	; (8004bf0 <http_write+0xd0>)
 8004b3e:	f00e fd87 	bl	8013650 <iprintf>
  len = *length;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004b48:	8afb      	ldrh	r3, [r7, #22]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <http_write+0x32>
    return ERR_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e045      	b.n	8004bde <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004b58:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004b5a:	8aba      	ldrh	r2, [r7, #20]
 8004b5c:	8afb      	ldrh	r3, [r7, #22]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d201      	bcs.n	8004b66 <http_write+0x46>
    len = max_len;
 8004b62:	8abb      	ldrh	r3, [r7, #20]
 8004b64:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004b6e:	8afa      	ldrh	r2, [r7, #22]
 8004b70:	8abb      	ldrh	r3, [r7, #20]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d901      	bls.n	8004b7a <http_write+0x5a>
    len = max_len;
 8004b76:	8abb      	ldrh	r3, [r7, #20]
 8004b78:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	8afa      	ldrh	r2, [r7, #22]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f007 fce1 	bl	800c548 <tcp_write>
 8004b86:	4603      	mov	r3, r0
 8004b88:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004b8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d10f      	bne.n	8004bb4 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004ba4:	2b07      	cmp	r3, #7
 8004ba6:	d902      	bls.n	8004bae <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	82fb      	strh	r3, [r7, #22]
 8004bac:	e002      	b.n	8004bb4 <http_write+0x94>
      } else {
        len /= 2;
 8004bae:	8afb      	ldrh	r3, [r7, #22]
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004bb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d102      	bne.n	8004bc4 <http_write+0xa4>
 8004bbe:	8afb      	ldrh	r3, [r7, #22]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d8da      	bhi.n	8004b7a <http_write+0x5a>

  if (err == ERR_OK) {
 8004bc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d103      	bne.n	8004bd4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8afa      	ldrh	r2, [r7, #22]
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	e002      	b.n	8004bda <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004bda:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	08014b20 	.word	0x08014b20
 8004bec:	08014b58 	.word	0x08014b58
 8004bf0:	08014b68 	.word	0x08014b68

08004bf4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004c02:	2100      	movs	r1, #0
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f004 fcc3 	bl	8009590 <tcp_arg>
  altcp_recv(pcb, NULL);
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f004 fcd1 	bl	80095b4 <tcp_recv>
  altcp_err(pcb, NULL);
 8004c12:	2100      	movs	r1, #0
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f004 fd11 	bl	800963c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f004 fd46 	bl	80096b0 <tcp_poll>
  altcp_sent(pcb, NULL);
 8004c24:	2100      	movs	r1, #0
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f004 fce6 	bl	80095f8 <tcp_sent>
  if (hs != NULL) {
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8004c32:	68b8      	ldr	r0, [r7, #8]
 8004c34:	f7ff ff62 	bl	8004afc <http_state_free>
  }

  if (abort_conn) {
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f003 fbbe 	bl	80083c0 <tcp_abort>
    return ERR_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e00f      	b.n	8004c68 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f003 facf 	bl	80081ec <tcp_close>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8004c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	4904      	ldr	r1, [pc, #16]	; (8004c70 <http_close_or_abort_conn+0x7c>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f004 fd26 	bl	80096b0 <tcp_poll>
  }
  return err;
 8004c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	08005b9b 	.word	0x08005b9b

08004c74 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ffb6 	bl	8004bf4 <http_close_or_abort_conn>
 8004c88:	4603      	mov	r3, r0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ffe8 	bl	8004c74 <http_close_conn>
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <get_tag_insert+0x1c>
 8004cba:	4b51      	ldr	r3, [pc, #324]	; (8004e00 <get_tag_insert+0x154>)
 8004cbc:	f44f 7241 	mov.w	r2, #772	; 0x304
 8004cc0:	4950      	ldr	r1, [pc, #320]	; (8004e04 <get_tag_insert+0x158>)
 8004cc2:	4851      	ldr	r0, [pc, #324]	; (8004e08 <get_tag_insert+0x15c>)
 8004cc4:	f00e fcc4 	bl	8013650 <iprintf>
  ssi = hs->ssi;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <get_tag_insert+0x36>
 8004cd4:	4b4a      	ldr	r3, [pc, #296]	; (8004e00 <get_tag_insert+0x154>)
 8004cd6:	f240 3206 	movw	r2, #774	; 0x306
 8004cda:	494c      	ldr	r1, [pc, #304]	; (8004e0c <get_tag_insert+0x160>)
 8004cdc:	484a      	ldr	r0, [pc, #296]	; (8004e08 <get_tag_insert+0x15c>)
 8004cde:	f00e fcb7 	bl	8013650 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8004ce2:	4b4b      	ldr	r3, [pc, #300]	; (8004e10 <get_tag_insert+0x164>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d02e      	beq.n	8004d48 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8004cea:	4b4a      	ldr	r3, [pc, #296]	; (8004e14 <get_tag_insert+0x168>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d02a      	beq.n	8004d48 <get_tag_insert+0x9c>
 8004cf2:	4b49      	ldr	r3, [pc, #292]	; (8004e18 <get_tag_insert+0x16c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d026      	beq.n	8004d48 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	e01e      	b.n	8004d3e <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f103 0012 	add.w	r0, r3, #18
 8004d06:	4b43      	ldr	r3, [pc, #268]	; (8004e14 <get_tag_insert+0x168>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7fb fa94 	bl	8000240 <strcmp>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10c      	bne.n	8004d38 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8004d1e:	4b3c      	ldr	r3, [pc, #240]	; (8004e10 <get_tag_insert+0x164>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	f102 011b 	add.w	r1, r2, #27
 8004d28:	22c0      	movs	r2, #192	; 0xc0
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	4798      	blx	r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8004d36:	e060      	b.n	8004dfa <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <get_tag_insert+0x16c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	dbdb      	blt.n	8004d00 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	3312      	adds	r3, #18
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fb fa81 	bl	8000254 <strlen>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2ba6      	cmp	r3, #166	; 0xa6
 8004d56:	d818      	bhi.n	8004d8a <get_tag_insert+0xde>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	3312      	adds	r3, #18
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fb fa79 	bl	8000254 <strlen>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b09      	cmp	r3, #9
 8004d66:	d810      	bhi.n	8004d8a <get_tag_insert+0xde>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	3312      	adds	r3, #18
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fb fa71 	bl	8000254 <strlen>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2ba6      	cmp	r3, #166	; 0xa6
 8004d76:	d806      	bhi.n	8004d86 <get_tag_insert+0xda>
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	3312      	adds	r3, #18
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fb fa69 	bl	8000254 <strlen>
 8004d82:	4603      	mov	r3, r0
 8004d84:	e002      	b.n	8004d8c <get_tag_insert+0xe0>
 8004d86:	23a7      	movs	r3, #167	; 0xa7
 8004d88:	e000      	b.n	8004d8c <get_tag_insert+0xe0>
 8004d8a:	2309      	movs	r3, #9
 8004d8c:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	331b      	adds	r3, #27
 8004d92:	2212      	movs	r2, #18
 8004d94:	4921      	ldr	r1, [pc, #132]	; (8004e1c <get_tag_insert+0x170>)
 8004d96:	4618      	mov	r0, r3
 8004d98:	f00e fc2a 	bl	80135f0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3312      	adds	r3, #18
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4619      	mov	r1, r3
 8004daa:	f00e fc21 	bl	80135f0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3312      	adds	r3, #18
 8004db2:	3318      	adds	r3, #24
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	3303      	adds	r3, #3
 8004dba:	2207      	movs	r2, #7
 8004dbc:	4918      	ldr	r1, [pc, #96]	; (8004e20 <get_tag_insert+0x174>)
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f00e fc16 	bl	80135f0 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3319      	adds	r3, #25
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	2200      	movs	r2, #0
 8004dce:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	331b      	adds	r3, #27
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fb fa3d 	bl	8000254 <strlen>
 8004dda:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de2:	d306      	bcc.n	8004df2 <get_tag_insert+0x146>
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <get_tag_insert+0x154>)
 8004de6:	f240 323f 	movw	r2, #831	; 0x33f
 8004dea:	490e      	ldr	r1, [pc, #56]	; (8004e24 <get_tag_insert+0x178>)
 8004dec:	4806      	ldr	r0, [pc, #24]	; (8004e08 <get_tag_insert+0x15c>)
 8004dee:	f00e fc2f 	bl	8013650 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	81da      	strh	r2, [r3, #14]
}
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	08014b20 	.word	0x08014b20
 8004e04:	08014b90 	.word	0x08014b90
 8004e08:	08014b68 	.word	0x08014b68
 8004e0c:	08014b9c 	.word	0x08014b9c
 8004e10:	200004ec 	.word	0x200004ec
 8004e14:	200004f4 	.word	0x200004f4
 8004e18:	200004f0 	.word	0x200004f0
 8004e1c:	08014ba8 	.word	0x08014ba8
 8004e20:	08014bbc 	.word	0x08014bbc
 8004e24:	08014bc4 	.word	0x08014bc4

08004e28 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ff28 	bl	8004c92 <http_eof>
    return 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e016      	b.n	8004e74 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fdda 	bl	8004a04 <fs_bytes_left>
 8004e50:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	dc05      	bgt.n	8004e64 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff ff19 	bl	8004c92 <http_eof>
    return 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e007      	b.n	8004e74 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <http_check_eof+0x54>)
 8004e66:	f240 429d 	movw	r2, #1181	; 0x49d
 8004e6a:	4905      	ldr	r1, [pc, #20]	; (8004e80 <http_check_eof+0x58>)
 8004e6c:	4805      	ldr	r0, [pc, #20]	; (8004e84 <http_check_eof+0x5c>)
 8004e6e:	f00e fbef 	bl	8013650 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8004e72:	2301      	movs	r3, #1
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	08014b20 	.word	0x08014b20
 8004e80:	08014bd4 	.word	0x08014bd4
 8004e84:	08014b68 	.word	0x08014b68

08004e88 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d803      	bhi.n	8004eaa <http_send_data_nonssi+0x22>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	e001      	b.n	8004eae <http_send_data_nonssi+0x26>
 8004eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eae:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	6999      	ldr	r1, [r3, #24]
 8004eb4:	f107 020c 	add.w	r2, r7, #12
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fe30 	bl	8004b20 <http_write>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8004ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10d      	bne.n	8004ee8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	89ba      	ldrh	r2, [r7, #12]
 8004ed6:	441a      	add	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	89ba      	ldrh	r2, [r7, #12]
 8004ee2:	1a9a      	subs	r2, r3, r2
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <http_send_data_ssi+0x2c>
 8004f12:	4b9d      	ldr	r3, [pc, #628]	; (8005188 <http_send_data_ssi+0x294>)
 8004f14:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8004f18:	499c      	ldr	r1, [pc, #624]	; (800518c <http_send_data_ssi+0x298>)
 8004f1a:	489d      	ldr	r0, [pc, #628]	; (8005190 <http_send_data_ssi+0x29c>)
 8004f1c:	f00e fb98 	bl	8013650 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004f26:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	f240 826a 	bls.w	800540a <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004f44:	4293      	cmp	r3, r2
 8004f46:	dc06      	bgt.n	8004f56 <http_send_data_ssi+0x62>
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	e001      	b.n	8004f5a <http_send_data_ssi+0x66>
 8004f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f5a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	6999      	ldr	r1, [r3, #24]
 8004f60:	f107 020e 	add.w	r2, r7, #14
 8004f64:	2300      	movs	r3, #0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff fdda 	bl	8004b20 <http_write>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10d      	bne.n	8004f94 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	89fa      	ldrh	r2, [r7, #14]
 8004f82:	441a      	add	r2, r3
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	89fa      	ldrh	r2, [r7, #14]
 8004f8e:	1a9a      	subs	r2, r3, r2
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 8235 	bne.w	800540a <http_send_data_ssi+0x516>
      return data_to_send;
 8004fa0:	7dbb      	ldrb	r3, [r7, #22]
 8004fa2:	e27b      	b.n	800549c <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8004fa4:	89fb      	ldrh	r3, [r7, #14]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <http_send_data_ssi+0xba>
      return data_to_send;
 8004faa:	7dbb      	ldrb	r3, [r7, #22]
 8004fac:	e276      	b.n	800549c <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	f200 8227 	bhi.w	8005408 <http_send_data_ssi+0x514>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <http_send_data_ssi+0xcc>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd5 	.word	0x08004fd5
 8004fc4:	08005027 	.word	0x08005027
 8004fc8:	08005099 	.word	0x08005099
 8004fcc:	080051e7 	.word	0x080051e7
 8004fd0:	0800532f 	.word	0x0800532f
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	757b      	strb	r3, [r7, #21]
 8004fd8:	e017      	b.n	800500a <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	781a      	ldrb	r2, [r3, #0]
 8004fe0:	7d7b      	ldrb	r3, [r7, #21]
 8004fe2:	496c      	ldr	r1, [pc, #432]	; (8005194 <http_send_data_ssi+0x2a0>)
 8004fe4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d10a      	bne.n	8005004 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	7d7a      	ldrb	r2, [r7, #21]
 8004ff2:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	2201      	movs	r2, #1
 8005000:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8005002:	e005      	b.n	8005010 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005004:	7d7b      	ldrb	r3, [r7, #21]
 8005006:	3301      	adds	r3, #1
 8005008:	757b      	strb	r3, [r7, #21]
 800500a:	7d7b      	ldrb	r3, [r7, #21]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d9e4      	bls.n	8004fda <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	1e5a      	subs	r2, r3, #1
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	601a      	str	r2, [r3, #0]
        break;
 8005024:	e1f1      	b.n	800540a <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	7c1b      	ldrb	r3, [r3, #16]
 800502a:	461a      	mov	r2, r3
 800502c:	4b59      	ldr	r3, [pc, #356]	; (8005194 <http_send_data_ssi+0x2a0>)
 800502e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	8992      	ldrh	r2, [r2, #12]
 8005036:	4413      	add	r3, r2
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d107      	bne.n	800504e <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2200      	movs	r2, #0
 8005042:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800504c:	e1dd      	b.n	800540a <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	7c1b      	ldrb	r3, [r3, #16]
 8005058:	4619      	mov	r1, r3
 800505a:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <http_send_data_ssi+0x2a0>)
 800505c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8005060:	6939      	ldr	r1, [r7, #16]
 8005062:	8989      	ldrh	r1, [r1, #12]
 8005064:	440b      	add	r3, r1
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d106      	bne.n	800507a <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	899b      	ldrh	r3, [r3, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	819a      	strh	r2, [r3, #12]
 8005078:	e003      	b.n	8005082 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	1e5a      	subs	r2, r3, #1
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	601a      	str	r2, [r3, #0]
        }
        break;
 8005096:	e1b8      	b.n	800540a <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	899b      	ldrh	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d11e      	bne.n	80050de <http_send_data_ssi+0x1ea>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d00e      	beq.n	80050c8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80050b0:	2b09      	cmp	r3, #9
 80050b2:	d009      	beq.n	80050c8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b0a      	cmp	r3, #10
 80050bc:	d004      	beq.n	80050c8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80050c4:	2b0d      	cmp	r3, #13
 80050c6:	d10a      	bne.n	80050de <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	601a      	str	r2, [r3, #0]
          break;
 80050dc:	e195      	b.n	800540a <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	7c1b      	ldrb	r3, [r3, #16]
 80050e8:	492a      	ldr	r1, [pc, #168]	; (8005194 <http_send_data_ssi+0x2a0>)
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	440b      	add	r3, r1
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d013      	beq.n	800511e <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d00e      	beq.n	800511e <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b09      	cmp	r3, #9
 8005108:	d009      	beq.n	800511e <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005110:	2b0a      	cmp	r3, #10
 8005112:	d004      	beq.n	800511e <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b0d      	cmp	r3, #13
 800511c:	d142      	bne.n	80051a4 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	899b      	ldrh	r3, [r3, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d104      	bne.n	8005130 <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800512e:	e04f      	b.n	80051d0 <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2203      	movs	r2, #3
 8005134:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	899b      	ldrh	r3, [r3, #12]
 800513c:	2bff      	cmp	r3, #255	; 0xff
 800513e:	d906      	bls.n	800514e <http_send_data_ssi+0x25a>
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <http_send_data_ssi+0x294>)
 8005142:	f240 523a 	movw	r2, #1338	; 0x53a
 8005146:	4914      	ldr	r1, [pc, #80]	; (8005198 <http_send_data_ssi+0x2a4>)
 8005148:	4811      	ldr	r0, [pc, #68]	; (8005190 <http_send_data_ssi+0x29c>)
 800514a:	f00e fa81 	bl	8013650 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	899b      	ldrh	r3, [r3, #12]
 8005152:	b2da      	uxtb	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	899b      	ldrh	r3, [r3, #12]
 800515c:	461a      	mov	r2, r3
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4413      	add	r3, r2
 8005162:	2200      	movs	r2, #0
 8005164:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	781a      	ldrb	r2, [r3, #0]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	7c1b      	ldrb	r3, [r3, #16]
 8005170:	4908      	ldr	r1, [pc, #32]	; (8005194 <http_send_data_ssi+0x2a0>)
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	440b      	add	r3, r1
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d10e      	bne.n	800519c <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2201      	movs	r2, #1
 8005182:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8005184:	e024      	b.n	80051d0 <http_send_data_ssi+0x2dc>
 8005186:	bf00      	nop
 8005188:	08014b20 	.word	0x08014b20
 800518c:	08014b9c 	.word	0x08014b9c
 8005190:	08014b68 	.word	0x08014b68
 8005194:	08041d38 	.word	0x08041d38
 8005198:	08014c0c 	.word	0x08014c0c
            } else {
              ssi->tag_index = 0;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2200      	movs	r2, #0
 80051a0:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80051a2:	e015      	b.n	80051d0 <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	899b      	ldrh	r3, [r3, #12]
 80051a8:	2b07      	cmp	r3, #7
 80051aa:	d80d      	bhi.n	80051c8 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	899b      	ldrh	r3, [r3, #12]
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	b288      	uxth	r0, r1
 80051b8:	6939      	ldr	r1, [r7, #16]
 80051ba:	8188      	strh	r0, [r1, #12]
 80051bc:	4619      	mov	r1, r3
 80051be:	7812      	ldrb	r2, [r2, #0]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	440b      	add	r3, r1
 80051c4:	749a      	strb	r2, [r3, #18]
 80051c6:	e003      	b.n	80051d0 <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	1e5a      	subs	r2, r3, #1
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	601a      	str	r2, [r3, #0]

        break;
 80051e4:	e111      	b.n	800540a <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	899b      	ldrh	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d11e      	bne.n	800522c <http_send_data_ssi+0x338>
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d00e      	beq.n	8005216 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80051fe:	2b09      	cmp	r3, #9
 8005200:	d009      	beq.n	8005216 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b0a      	cmp	r3, #10
 800520a:	d004      	beq.n	8005216 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005212:	2b0d      	cmp	r3, #13
 8005214:	d10a      	bne.n	800522c <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	1e5a      	subs	r2, r3, #1
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	601a      	str	r2, [r3, #0]
          break;
 800522a:	e0ee      	b.n	800540a <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	781a      	ldrb	r2, [r3, #0]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	7c1b      	ldrb	r3, [r3, #16]
 8005236:	499b      	ldr	r1, [pc, #620]	; (80054a4 <http_send_data_ssi+0x5b0>)
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	440b      	add	r3, r1
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	6939      	ldr	r1, [r7, #16]
 8005240:	8989      	ldrh	r1, [r1, #12]
 8005242:	440b      	add	r3, r1
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d162      	bne.n	8005310 <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	1e5a      	subs	r2, r3, #1
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	899b      	ldrh	r3, [r3, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	7c1b      	ldrb	r3, [r3, #16]
 800526e:	4a8d      	ldr	r2, [pc, #564]	; (80054a4 <http_send_data_ssi+0x5b0>)
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	4413      	add	r3, r2
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	8992      	ldrh	r2, [r2, #12]
 800527a:	4413      	add	r3, r2
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 80c3 	bne.w	800540a <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8005284:	6838      	ldr	r0, [r7, #0]
 8005286:	f7ff fd11 	bl	8004cac <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2200      	movs	r2, #0
 800528e:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2204      	movs	r2, #4
 8005294:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	f240 80ae 	bls.w	800540a <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052bc:	4293      	cmp	r3, r2
 80052be:	dc06      	bgt.n	80052ce <http_send_data_ssi+0x3da>
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	e001      	b.n	80052d2 <http_send_data_ssi+0x3de>
 80052ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052d2:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6999      	ldr	r1, [r3, #24]
 80052d8:	f107 020e 	add.w	r2, r7, #14
 80052dc:	2300      	movs	r3, #0
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fc1e 	bl	8004b20 <http_write>
 80052e4:	4603      	mov	r3, r0
 80052e6:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 80052e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 808c 	bne.w	800540a <http_send_data_ssi+0x516>
                data_to_send = 1;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	89fa      	ldrh	r2, [r7, #14]
 80052fc:	441a      	add	r2, r3
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	89fa      	ldrh	r2, [r7, #14]
 8005308:	1a9a      	subs	r2, r3, r2
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	625a      	str	r2, [r3, #36]	; 0x24
 800530e:	e07c      	b.n	800540a <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	1e5a      	subs	r2, r3, #1
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 800532c:	e06d      	b.n	800540a <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	429a      	cmp	r2, r3
 8005338:	d935      	bls.n	80053a6 <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005348:	4293      	cmp	r3, r2
 800534a:	dc06      	bgt.n	800535a <http_send_data_ssi+0x466>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	b29b      	uxth	r3, r3
 8005358:	e001      	b.n	800535e <http_send_data_ssi+0x46a>
 800535a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800535e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8005360:	89fb      	ldrh	r3, [r7, #14]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6999      	ldr	r1, [r3, #24]
 800536a:	f107 020e 	add.w	r2, r7, #14
 800536e:	2300      	movs	r3, #0
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fbd5 	bl	8004b20 <http_write>
 8005376:	4603      	mov	r3, r0
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	e001      	b.n	8005380 <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 800537c:	2300      	movs	r3, #0
 800537e:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8005380:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d140      	bne.n	800540a <http_send_data_ssi+0x516>
            data_to_send = 1;
 8005388:	2301      	movs	r3, #1
 800538a:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	89fa      	ldrh	r2, [r7, #14]
 8005392:	441a      	add	r2, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	89fa      	ldrh	r2, [r7, #14]
 800539e:	1a9a      	subs	r2, r3, r2
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24
 80053a4:	e031      	b.n	800540a <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	899a      	ldrh	r2, [r3, #12]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	89db      	ldrh	r3, [r3, #14]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d222      	bcs.n	80053f8 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	89da      	ldrh	r2, [r3, #14]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	899b      	ldrh	r3, [r3, #12]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	b29b      	uxth	r3, r3
 80053be:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	899b      	ldrh	r3, [r3, #12]
 80053c4:	3318      	adds	r3, #24
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4413      	add	r3, r2
 80053ca:	1cd9      	adds	r1, r3, #3
 80053cc:	f107 020e 	add.w	r2, r7, #14
 80053d0:	2301      	movs	r3, #1
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff fba4 	bl	8004b20 <http_write>
 80053d8:	4603      	mov	r3, r0
 80053da:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 80053dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d112      	bne.n	800540a <http_send_data_ssi+0x516>
              data_to_send = 1;
 80053e4:	2301      	movs	r3, #1
 80053e6:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	899a      	ldrh	r2, [r3, #12]
 80053ec:	89fb      	ldrh	r3, [r7, #14]
 80053ee:	4413      	add	r3, r2
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	819a      	strh	r2, [r3, #12]
 80053f6:	e008      	b.n	800540a <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2200      	movs	r2, #0
 80053fc:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005406:	e000      	b.n	800540a <http_send_data_ssi+0x516>
        default:
          break;
 8005408:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005410:	2b04      	cmp	r3, #4
 8005412:	d003      	beq.n	800541c <http_send_data_ssi+0x528>
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <http_send_data_ssi+0x532>
 800541c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005420:	2b00      	cmp	r3, #0
 8005422:	f43f adbf 	beq.w	8004fa4 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800542c:	2b04      	cmp	r3, #4
 800542e:	d034      	beq.n	800549a <http_send_data_ssi+0x5a6>
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	429a      	cmp	r2, r3
 800543a:	d92e      	bls.n	800549a <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800544a:	4293      	cmp	r3, r2
 800544c:	dc06      	bgt.n	800545c <http_send_data_ssi+0x568>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	b29b      	uxth	r3, r3
 800545a:	e001      	b.n	8005460 <http_send_data_ssi+0x56c>
 800545c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005460:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6999      	ldr	r1, [r3, #24]
 8005466:	f107 020e 	add.w	r2, r7, #14
 800546a:	2300      	movs	r3, #0
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fb57 	bl	8004b20 <http_write>
 8005472:	4603      	mov	r3, r0
 8005474:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005476:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10d      	bne.n	800549a <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	89fa      	ldrh	r2, [r7, #14]
 8005488:	441a      	add	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	89fa      	ldrh	r2, [r7, #14]
 8005494:	1a9a      	subs	r2, r3, r2
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800549a:	7dbb      	ldrb	r3, [r7, #22]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	08041d38 	.word	0x08041d38

080054a8 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <http_send+0x18>
    return 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	e030      	b.n	8005522 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d108      	bne.n	80054da <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fcac 	bl	8004e28 <http_check_eof>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <http_send+0x32>
      return 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e023      	b.n	8005522 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fd05 	bl	8004ef4 <http_send_data_ssi>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
 80054ee:	e005      	b.n	80054fc <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fcc8 	bl	8004e88 <http_send_data_nonssi>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10d      	bne.n	8005520 <http_send+0x78>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fa7b 	bl	8004a04 <fs_bytes_left>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	dc05      	bgt.n	8005520 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff fbbb 	bl	8004c92 <http_eof>
    return 0;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <http_get_404_file+0x80>)
 800553a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	4610      	mov	r0, r2
 8005546:	f7ff fa15 	bl	8004974 <fs_open>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800554e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d024      	beq.n	80055a0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <http_get_404_file+0x84>)
 800555a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4619      	mov	r1, r3
 8005564:	4610      	mov	r0, r2
 8005566:	f7ff fa05 	bl	8004974 <fs_open>
 800556a:	4603      	mov	r3, r0
 800556c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800556e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d014      	beq.n	80055a0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	4a0e      	ldr	r2, [pc, #56]	; (80055b4 <http_get_404_file+0x88>)
 800557a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f7ff f9f5 	bl	8004974 <fs_open>
 800558a:	4603      	mov	r3, r0
 800558c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800558e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
        return NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80055a0:	687b      	ldr	r3, [r7, #4]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	08014c24 	.word	0x08014c24
 80055b0:	08014c30 	.word	0x08014c30
 80055b4:	08014c3c 	.word	0x08014c3c

080055b8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08e      	sub	sp, #56	; 0x38
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <http_parse_request+0x24>
 80055ce:	4b65      	ldr	r3, [pc, #404]	; (8005764 <http_parse_request+0x1ac>)
 80055d0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80055d4:	4964      	ldr	r1, [pc, #400]	; (8005768 <http_parse_request+0x1b0>)
 80055d6:	4865      	ldr	r0, [pc, #404]	; (800576c <http_parse_request+0x1b4>)
 80055d8:	f00e f83a 	bl	8013650 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <http_parse_request+0x38>
 80055e2:	4b60      	ldr	r3, [pc, #384]	; (8005764 <http_parse_request+0x1ac>)
 80055e4:	f240 72af 	movw	r2, #1967	; 0x7af
 80055e8:	4961      	ldr	r1, [pc, #388]	; (8005770 <http_parse_request+0x1b8>)
 80055ea:	4860      	ldr	r0, [pc, #384]	; (800576c <http_parse_request+0x1b4>)
 80055ec:	f00e f830 	bl	8013650 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <http_parse_request+0x48>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005600:	f06f 0307 	mvn.w	r3, #7
 8005604:	e0a9      	b.n	800575a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005612:	621a      	str	r2, [r3, #32]
 8005614:	e005      	b.n	8005622 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800561c:	4618      	mov	r0, r3
 800561e:	f002 f9f1 	bl	8007a04 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8005622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005624:	f002 f9cc 	bl	80079c0 <pbuf_ref>

  if (hs->req->next != NULL) {
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d012      	beq.n	8005658 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	891b      	ldrh	r3, [r3, #8]
 8005638:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800563c:	4293      	cmp	r3, r2
 800563e:	bf28      	it	cs
 8005640:	4613      	movcs	r3, r2
 8005642:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6a18      	ldr	r0, [r3, #32]
 8005648:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800564a:	2300      	movs	r3, #0
 800564c:	4949      	ldr	r1, [pc, #292]	; (8005774 <http_parse_request+0x1bc>)
 800564e:	f002 fb11 	bl	8007c74 <pbuf_copy_partial>
    data = httpd_req_buf;
 8005652:	4b48      	ldr	r3, [pc, #288]	; (8005774 <http_parse_request+0x1bc>)
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
 8005656:	e005      	b.n	8005664 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	895b      	ldrh	r3, [r3, #10]
 8005662:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005664:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005666:	2b06      	cmp	r3, #6
 8005668:	d962      	bls.n	8005730 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800566a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800566c:	461a      	mov	r2, r3
 800566e:	4942      	ldr	r1, [pc, #264]	; (8005778 <http_parse_request+0x1c0>)
 8005670:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005672:	f000 fc69 	bl	8005f48 <lwip_strnstr>
 8005676:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d058      	beq.n	8005730 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005682:	2204      	movs	r2, #4
 8005684:	493d      	ldr	r1, [pc, #244]	; (800577c <http_parse_request+0x1c4>)
 8005686:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005688:	f00e f867 	bl	801375a <strncmp>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d116      	bne.n	80056c0 <http_parse_request+0x108>
        sp1 = data + 3;
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	3303      	adds	r3, #3
 8005696:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3301      	adds	r3, #1
 80056ac:	8b7a      	ldrh	r2, [r7, #26]
 80056ae:	4934      	ldr	r1, [pc, #208]	; (8005780 <http_parse_request+0x1c8>)
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fc49 	bl	8005f48 <lwip_strnstr>
 80056b6:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d111      	bne.n	80056e2 <http_parse_request+0x12a>
 80056be:	e006      	b.n	80056ce <http_parse_request+0x116>
        data[4] = 0;
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	3304      	adds	r3, #4
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80056c8:	f06f 030f 	mvn.w	r3, #15
 80056cc:	e045      	b.n	800575a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3301      	adds	r3, #1
 80056d2:	8b7a      	ldrh	r2, [r7, #26]
 80056d4:	4928      	ldr	r1, [pc, #160]	; (8005778 <http_parse_request+0x1c0>)
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fc36 	bl	8005f48 <lwip_strnstr>
 80056dc:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80056de:	2301      	movs	r3, #1
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	3301      	adds	r3, #1
 80056e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01e      	beq.n	8005730 <http_parse_request+0x178>
 80056f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d91a      	bls.n	8005730 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80056fa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80056fc:	461a      	mov	r2, r3
 80056fe:	4921      	ldr	r1, [pc, #132]	; (8005784 <http_parse_request+0x1cc>)
 8005700:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005702:	f000 fc21 	bl	8005f48 <lwip_strnstr>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d011      	beq.n	8005730 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	3301      	adds	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005718:	8b3b      	ldrh	r3, [r7, #24]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4413      	add	r3, r2
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8005722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005724:	6979      	ldr	r1, [r7, #20]
 8005726:	68b8      	ldr	r0, [r7, #8]
 8005728:	f000 f880 	bl	800582c <http_find_file>
 800572c:	4603      	mov	r3, r0
 800572e:	e014      	b.n	800575a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	4618      	mov	r0, r3
 8005736:	f002 f92b 	bl	8007990 <pbuf_clen>
 800573a:	4603      	mov	r3, r0
 800573c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	891b      	ldrh	r3, [r3, #8]
 8005744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005748:	d205      	bcs.n	8005756 <http_parse_request+0x19e>
 800574a:	8a7b      	ldrh	r3, [r7, #18]
 800574c:	2b05      	cmp	r3, #5
 800574e:	d802      	bhi.n	8005756 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8005750:	f06f 0304 	mvn.w	r3, #4
 8005754:	e001      	b.n	800575a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005756:	f06f 030f 	mvn.w	r3, #15
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3738      	adds	r7, #56	; 0x38
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08014b20 	.word	0x08014b20
 8005768:	08014c48 	.word	0x08014c48
 800576c:	08014b68 	.word	0x08014b68
 8005770:	08014b90 	.word	0x08014b90
 8005774:	200000ac 	.word	0x200000ac
 8005778:	08014c54 	.word	0x08014c54
 800577c:	08014c58 	.word	0x08014c58
 8005780:	08014c60 	.word	0x08014c60
 8005784:	08014c64 	.word	0x08014c64

08005788 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d040      	beq.n	800581e <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80057a0:	213f      	movs	r1, #63	; 0x3f
 80057a2:	6838      	ldr	r0, [r7, #0]
 80057a4:	f00d ffcc 	bl	8013740 <strchr>
 80057a8:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	613b      	str	r3, [r7, #16]
    ext = uri;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80057be:	212e      	movs	r1, #46	; 0x2e
 80057c0:	6938      	ldr	r0, [r7, #16]
 80057c2:	f00d ffbd 	bl	8013740 <strchr>
 80057c6:	6138      	str	r0, [r7, #16]
 80057c8:	e009      	b.n	80057de <http_uri_is_ssi+0x56>
      ext = sub;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	617b      	str	r3, [r7, #20]
      sub++;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	3301      	adds	r3, #1
 80057d2:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80057d4:	212e      	movs	r1, #46	; 0x2e
 80057d6:	6938      	ldr	r0, [r7, #16]
 80057d8:	f00d ffb2 	bl	8013740 <strchr>
 80057dc:	6138      	str	r0, [r7, #16]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f2      	bne.n	80057ca <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e010      	b.n	800580c <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80057ea:	4a0f      	ldr	r2, [pc, #60]	; (8005828 <http_uri_is_ssi+0xa0>)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f2:	4619      	mov	r1, r3
 80057f4:	6978      	ldr	r0, [r7, #20]
 80057f6:	f000 fbdd 	bl	8005fb4 <lwip_stricmp>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8005800:	2301      	movs	r3, #1
 8005802:	76fb      	strb	r3, [r7, #27]
        break;
 8005804:	e005      	b.n	8005812 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d9eb      	bls.n	80057ea <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <http_uri_is_ssi+0x96>
      *param = '?';
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	223f      	movs	r2, #63	; 0x3f
 800581c:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800581e:	7efb      	ldrb	r3, [r7, #27]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	08041cfc 	.word	0x08041cfc

0800582c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b092      	sub	sp, #72	; 0x48
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005838:	2300      	movs	r3, #0
 800583a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4618      	mov	r0, r3
 800584a:	f7fa fd03 	bl	8000254 <strlen>
 800584e:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d072      	beq.n	800593c <http_find_file+0x110>
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	3b01      	subs	r3, #1
 800585c:	4413      	add	r3, r2
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b2f      	cmp	r3, #47	; 0x2f
 8005862:	d16b      	bne.n	800593c <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005864:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005866:	4a61      	ldr	r2, [pc, #388]	; (80059ec <http_find_file+0x1c0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d102      	bne.n	8005872 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	2b01      	cmp	r3, #1
 8005870:	d164      	bne.n	800593c <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	3b01      	subs	r3, #1
 8005876:	2b3f      	cmp	r3, #63	; 0x3f
 8005878:	bf28      	it	cs
 800587a:	233f      	movcs	r3, #63	; 0x3f
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005888:	4619      	mov	r1, r3
 800588a:	4858      	ldr	r0, [pc, #352]	; (80059ec <http_find_file+0x1c0>)
 800588c:	f00d feb0 	bl	80135f0 <memcpy>
      http_uri_buf[copy_len] = 0;
 8005890:	4a56      	ldr	r2, [pc, #344]	; (80059ec <http_find_file+0x1c0>)
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	4413      	add	r3, r2
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800589a:	2300      	movs	r3, #0
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800589e:	e04a      	b.n	8005936 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d028      	beq.n	80058f8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80058ac:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01e      	beq.n	80058f2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80058b4:	4a4e      	ldr	r2, [pc, #312]	; (80059f0 <http_find_file+0x1c4>)
 80058b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fa fcc9 	bl	8000254 <strlen>
 80058c2:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	4293      	cmp	r3, r2
 80058ca:	bf28      	it	cs
 80058cc:	4613      	movcs	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	4a46      	ldr	r2, [pc, #280]	; (80059ec <http_find_file+0x1c0>)
 80058d4:	1898      	adds	r0, r3, r2
 80058d6:	4a46      	ldr	r2, [pc, #280]	; (80059f0 <http_find_file+0x1c4>)
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f00d fe85 	bl	80135f0 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80058e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	4413      	add	r3, r2
 80058ec:	4a3f      	ldr	r2, [pc, #252]	; (80059ec <http_find_file+0x1c0>)
 80058ee:	2100      	movs	r1, #0
 80058f0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80058f2:	4b3e      	ldr	r3, [pc, #248]	; (80059ec <http_find_file+0x1c0>)
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058f6:	e004      	b.n	8005902 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80058f8:	4a3d      	ldr	r2, [pc, #244]	; (80059f0 <http_find_file+0x1c4>)
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff f834 	bl	8004974 <fs_open>
 800590c:	4603      	mov	r3, r0
 800590e:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8005910:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10b      	bne.n	8005930 <http_find_file+0x104>
        uri = file_name;
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8005920:	4a33      	ldr	r2, [pc, #204]	; (80059f0 <http_find_file+0x1c4>)
 8005922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	791b      	ldrb	r3, [r3, #4]
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI */
        break;
 800592e:	e005      	b.n	800593c <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005932:	3301      	adds	r3, #1
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005938:	2b04      	cmp	r3, #4
 800593a:	d9b1      	bls.n	80058a0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	2b00      	cmp	r3, #0
 8005940:	d139      	bne.n	80059b6 <http_find_file+0x18a>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	213f      	movs	r1, #63	; 0x3f
 8005946:	4618      	mov	r0, r3
 8005948:	f00d fefa 	bl	8013740 <strchr>
 800594c:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
      params++;
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	3301      	adds	r3, #1
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff f804 	bl	8004974 <fs_open>
 800596c:	4603      	mov	r3, r0
 800596e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <http_find_file+0x152>
      file = &hs->file_handle;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
 800597c:	e006      	b.n	800598c <http_find_file+0x160>
    } else {
      file = http_get_404_file(hs, &uri);
 800597e:	f107 0308 	add.w	r3, r7, #8
 8005982:	4619      	mov	r1, r3
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff fdd1 	bl	800552c <http_get_404_file>
 800598a:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	2b00      	cmp	r3, #0
 8005990:	d011      	beq.n	80059b6 <http_find_file+0x18a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	7c1b      	ldrb	r3, [r3, #16]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <http_find_file+0x17a>
        tag_check = 1;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a4:	e007      	b.n	80059b6 <http_find_file+0x18a>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4619      	mov	r1, r3
 80059aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059ac:	f7ff feec 	bl	8005788 <http_uri_is_ssi>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <http_find_file+0x19e>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	4619      	mov	r1, r3
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7ff fdb2 	bl	800552c <http_get_404_file>
 80059c8:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	4613      	mov	r3, r2
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f809 	bl	80059f4 <http_init_file>
 80059e2:	4603      	mov	r3, r0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3740      	adds	r7, #64	; 0x40
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	200004ac 	.word	0x200004ac
 80059f0:	08041d10 	.word	0x08041d10

080059f4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d07d      	beq.n	8005b04 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <http_init_file+0x2a>
 8005a10:	4b45      	ldr	r3, [pc, #276]	; (8005b28 <http_init_file+0x134>)
 8005a12:	f640 120b 	movw	r2, #2315	; 0x90b
 8005a16:	4945      	ldr	r1, [pc, #276]	; (8005b2c <http_init_file+0x138>)
 8005a18:	4845      	ldr	r0, [pc, #276]	; (8005b30 <http_init_file+0x13c>)
 8005a1a:	f00d fe19 	bl	8013650 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8005a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01c      	beq.n	8005a60 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8005a26:	f7fe fffc 	bl	8004a22 <http_ssi_state_alloc>
 8005a2a:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d016      	beq.n	8005a60 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2200      	movs	r2, #0
 8005a36:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da06      	bge.n	8005a84 <http_init_file+0x90>
 8005a76:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <http_init_file+0x134>)
 8005a78:	f640 1234 	movw	r2, #2356	; 0x934
 8005a7c:	492d      	ldr	r1, [pc, #180]	; (8005b34 <http_init_file+0x140>)
 8005a7e:	482c      	ldr	r0, [pc, #176]	; (8005b30 <http_init_file+0x13c>)
 8005a80:	f00d fde6 	bl	8013650 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	7c1b      	ldrb	r3, [r3, #16]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <http_init_file+0xbe>
 8005aa4:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <http_init_file+0x134>)
 8005aa6:	f640 1243 	movw	r2, #2371	; 0x943
 8005aaa:	4923      	ldr	r1, [pc, #140]	; (8005b38 <http_init_file+0x144>)
 8005aac:	4820      	ldr	r0, [pc, #128]	; (8005b30 <http_init_file+0x13c>)
 8005aae:	f00d fdcf 	bl	8013650 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d032      	beq.n	8005b1e <http_init_file+0x12a>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	7c1b      	ldrb	r3, [r3, #16]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d02b      	beq.n	8005b1e <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6998      	ldr	r0, [r3, #24]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	461a      	mov	r2, r3
 8005ad0:	491a      	ldr	r1, [pc, #104]	; (8005b3c <http_init_file+0x148>)
 8005ad2:	f000 fa39 	bl	8005f48 <lwip_strnstr>
 8005ad6:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01f      	beq.n	8005b1e <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	1d1a      	adds	r2, r3, #4
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	441a      	add	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad2      	subs	r2, r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
 8005b02:	e00c      	b.n	8005b1e <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08014b20 	.word	0x08014b20
 8005b2c:	08014c6c 	.word	0x08014c6c
 8005b30:	08014b68 	.word	0x08014b68
 8005b34:	08014c80 	.word	0x08014c80
 8005b38:	08014ca0 	.word	0x08014ca0
 8005b3c:	08014c64 	.word	0x08014c64

08005b40 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <http_err+0x1c>
    http_state_free(hs);
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7fe ffd0 	bl	8004afc <http_state_free>
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <http_sent+0x1c>
    return ERR_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e008      	b.n	8005b92 <http_sent+0x2e>
  }

  hs->retries = 0;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8005b88:	6979      	ldr	r1, [r7, #20]
 8005b8a:	68b8      	ldr	r0, [r7, #8]
 8005b8c:	f7ff fc8c 	bl	80054a8 <http_send>

  return ERR_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d107      	bne.n	8005bbe <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8005bae:	2100      	movs	r1, #0
 8005bb0:	6838      	ldr	r0, [r7, #0]
 8005bb2:	f7ff f85f 	bl	8004c74 <http_close_conn>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e021      	b.n	8005c02 <http_poll+0x68>
  } else {
    hs->retries++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bd4:	2b04      	cmp	r3, #4
 8005bd6:	d105      	bne.n	8005be4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8005bd8:	68f9      	ldr	r1, [r7, #12]
 8005bda:	6838      	ldr	r0, [r7, #0]
 8005bdc:	f7ff f84a 	bl	8004c74 <http_close_conn>
      return ERR_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e00e      	b.n	8005c02 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8005bec:	68f9      	ldr	r1, [r7, #12]
 8005bee:	6838      	ldr	r0, [r7, #0]
 8005bf0:	f7ff fc5a 	bl	80054a8 <http_send>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8005bfa:	6838      	ldr	r0, [r7, #0]
 8005bfc:	f007 faa4 	bl	800d148 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d105      	bne.n	8005c32 <http_recv+0x26>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <http_recv+0x26>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d111      	bne.n	8005c56 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	891b      	ldrh	r3, [r3, #8]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	68b8      	ldr	r0, [r7, #8]
 8005c40:	f002 fd98 	bl	8008774 <tcp_recved>
      pbuf_free(p);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 fe1b 	bl	8007880 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	68b8      	ldr	r0, [r7, #8]
 8005c4e:	f7ff f811 	bl	8004c74 <http_close_conn>
    return ERR_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e055      	b.n	8005d02 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	891b      	ldrh	r3, [r3, #8]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	68b8      	ldr	r0, [r7, #8]
 8005c5e:	f002 fd89 	bl	8008774 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d147      	bne.n	8005cfa <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	6979      	ldr	r1, [r7, #20]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fca2 	bl	80055b8 <http_parse_request>
 8005c74:	4603      	mov	r3, r0
 8005c76:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8005c78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d015      	beq.n	8005cac <http_recv+0xa0>
 8005c80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c84:	f113 0f05 	cmn.w	r3, #5
 8005c88:	d010      	beq.n	8005cac <http_recv+0xa0>
 8005c8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c8e:	f113 0f10 	cmn.w	r3, #16
 8005c92:	d00b      	beq.n	8005cac <http_recv+0xa0>
 8005c94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c98:	f113 0f08 	cmn.w	r3, #8
 8005c9c:	d006      	beq.n	8005cac <http_recv+0xa0>
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <http_recv+0x100>)
 8005ca0:	f640 2204 	movw	r2, #2564	; 0xa04
 8005ca4:	491a      	ldr	r1, [pc, #104]	; (8005d10 <http_recv+0x104>)
 8005ca6:	481b      	ldr	r0, [pc, #108]	; (8005d14 <http_recv+0x108>)
 8005ca8:	f00d fcd2 	bl	8013650 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8005cac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005cb0:	f113 0f05 	cmn.w	r3, #5
 8005cb4:	d00b      	beq.n	8005cce <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <http_recv+0xc2>
          pbuf_free(hs->req);
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fddc 	bl	8007880 <pbuf_free>
          hs->req = NULL;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 fdd6 	bl	8007880 <pbuf_free>
      if (parsed == ERR_OK) {
 8005cd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8005cdc:	6979      	ldr	r1, [r7, #20]
 8005cde:	68b8      	ldr	r0, [r7, #8]
 8005ce0:	f7ff fbe2 	bl	80054a8 <http_send>
 8005ce4:	e00c      	b.n	8005d00 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8005ce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005cea:	f113 0f10 	cmn.w	r3, #16
 8005cee:	d107      	bne.n	8005d00 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8005cf0:	6979      	ldr	r1, [r7, #20]
 8005cf2:	68b8      	ldr	r0, [r7, #8]
 8005cf4:	f7fe ffbe 	bl	8004c74 <http_close_conn>
 8005cf8:	e002      	b.n	8005d00 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 fdc0 	bl	8007880 <pbuf_free>
    }
  }
  return ERR_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	08014b20 	.word	0x08014b20
 8005d10:	08014ccc 	.word	0x08014ccc
 8005d14:	08014b68 	.word	0x08014b68

08005d18 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	4613      	mov	r3, r2
 8005d24:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8005d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <http_accept+0x1c>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <http_accept+0x22>
    return ERR_VAL;
 8005d34:	f06f 0305 	mvn.w	r3, #5
 8005d38:	e025      	b.n	8005d86 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	68b8      	ldr	r0, [r7, #8]
 8005d3e:	f003 f9fd 	bl	800913c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8005d42:	f7fe fe9d 	bl	8004a80 <http_state_alloc>
 8005d46:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	e018      	b.n	8005d86 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8005d5a:	6979      	ldr	r1, [r7, #20]
 8005d5c:	68b8      	ldr	r0, [r7, #8]
 8005d5e:	f003 fc17 	bl	8009590 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8005d62:	490b      	ldr	r1, [pc, #44]	; (8005d90 <http_accept+0x78>)
 8005d64:	68b8      	ldr	r0, [r7, #8]
 8005d66:	f003 fc25 	bl	80095b4 <tcp_recv>
  altcp_err(pcb, http_err);
 8005d6a:	490a      	ldr	r1, [pc, #40]	; (8005d94 <http_accept+0x7c>)
 8005d6c:	68b8      	ldr	r0, [r7, #8]
 8005d6e:	f003 fc65 	bl	800963c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005d72:	2204      	movs	r2, #4
 8005d74:	4908      	ldr	r1, [pc, #32]	; (8005d98 <http_accept+0x80>)
 8005d76:	68b8      	ldr	r0, [r7, #8]
 8005d78:	f003 fc9a 	bl	80096b0 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8005d7c:	4907      	ldr	r1, [pc, #28]	; (8005d9c <http_accept+0x84>)
 8005d7e:	68b8      	ldr	r0, [r7, #8]
 8005d80:	f003 fc3a 	bl	80095f8 <tcp_sent>

  return ERR_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	08005c0d 	.word	0x08005c0d
 8005d94:	08005b41 	.word	0x08005b41
 8005d98:	08005b9b 	.word	0x08005b9b
 8005d9c:	08005b65 	.word	0x08005b65

08005da0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d029      	beq.n	8005e06 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005db2:	2101      	movs	r1, #1
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f003 f9c1 	bl	800913c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8005dba:	887b      	ldrh	r3, [r7, #2]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4914      	ldr	r1, [pc, #80]	; (8005e10 <httpd_init_pcb+0x70>)
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f002 fb09 	bl	80083d8 <tcp_bind>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8005dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d006      	beq.n	8005de0 <httpd_init_pcb+0x40>
 8005dd2:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <httpd_init_pcb+0x74>)
 8005dd4:	f640 2257 	movw	r2, #2647	; 0xa57
 8005dd8:	490f      	ldr	r1, [pc, #60]	; (8005e18 <httpd_init_pcb+0x78>)
 8005dda:	4810      	ldr	r0, [pc, #64]	; (8005e1c <httpd_init_pcb+0x7c>)
 8005ddc:	f00d fc38 	bl	8013650 <iprintf>
    pcb = altcp_listen(pcb);
 8005de0:	21ff      	movs	r1, #255	; 0xff
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f002 fbb0 	bl	8008548 <tcp_listen_with_backlog>
 8005de8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d106      	bne.n	8005dfe <httpd_init_pcb+0x5e>
 8005df0:	4b08      	ldr	r3, [pc, #32]	; (8005e14 <httpd_init_pcb+0x74>)
 8005df2:	f640 2259 	movw	r2, #2649	; 0xa59
 8005df6:	490a      	ldr	r1, [pc, #40]	; (8005e20 <httpd_init_pcb+0x80>)
 8005df8:	4808      	ldr	r0, [pc, #32]	; (8005e1c <httpd_init_pcb+0x7c>)
 8005dfa:	f00d fc29 	bl	8013650 <iprintf>
    altcp_accept(pcb, http_accept);
 8005dfe:	4909      	ldr	r1, [pc, #36]	; (8005e24 <httpd_init_pcb+0x84>)
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f003 fc3d 	bl	8009680 <tcp_accept>
  }
}
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	08041e4c 	.word	0x08041e4c
 8005e14:	08014b20 	.word	0x08014b20
 8005e18:	08014cf8 	.word	0x08014cf8
 8005e1c:	08014b68 	.word	0x08014b68
 8005e20:	08014d14 	.word	0x08014d14
 8005e24:	08005d19 	.word	0x08005d19

08005e28 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005e2e:	202e      	movs	r0, #46	; 0x2e
 8005e30:	f003 fba0 	bl	8009574 <tcp_new_ip_type>
 8005e34:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <httpd_init+0x22>
 8005e3c:	4b07      	ldr	r3, [pc, #28]	; (8005e5c <httpd_init+0x34>)
 8005e3e:	f640 2272 	movw	r2, #2674	; 0xa72
 8005e42:	4907      	ldr	r1, [pc, #28]	; (8005e60 <httpd_init+0x38>)
 8005e44:	4807      	ldr	r0, [pc, #28]	; (8005e64 <httpd_init+0x3c>)
 8005e46:	f00d fc03 	bl	8013650 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8005e4a:	2150      	movs	r1, #80	; 0x50
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ffa7 	bl	8005da0 <httpd_init_pcb>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08014b20 	.word	0x08014b20
 8005e60:	08014d34 	.word	0x08014d34
 8005e64:	08014b68 	.word	0x08014b68

08005e68 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <http_set_ssi_handler+0x20>
 8005e7a:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <http_set_ssi_handler+0x64>)
 8005e7c:	f640 2297 	movw	r2, #2711	; 0xa97
 8005e80:	4913      	ldr	r1, [pc, #76]	; (8005ed0 <http_set_ssi_handler+0x68>)
 8005e82:	4814      	ldr	r0, [pc, #80]	; (8005ed4 <http_set_ssi_handler+0x6c>)
 8005e84:	f00d fbe4 	bl	8013650 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8005e88:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <http_set_ssi_handler+0x70>)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <http_set_ssi_handler+0x3a>
 8005e94:	4b0d      	ldr	r3, [pc, #52]	; (8005ecc <http_set_ssi_handler+0x64>)
 8005e96:	f640 229e 	movw	r2, #2718	; 0xa9e
 8005e9a:	4910      	ldr	r1, [pc, #64]	; (8005edc <http_set_ssi_handler+0x74>)
 8005e9c:	480d      	ldr	r0, [pc, #52]	; (8005ed4 <http_set_ssi_handler+0x6c>)
 8005e9e:	f00d fbd7 	bl	8013650 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	dc06      	bgt.n	8005eb6 <http_set_ssi_handler+0x4e>
 8005ea8:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <http_set_ssi_handler+0x64>)
 8005eaa:	f640 229f 	movw	r2, #2719	; 0xa9f
 8005eae:	490c      	ldr	r1, [pc, #48]	; (8005ee0 <http_set_ssi_handler+0x78>)
 8005eb0:	4808      	ldr	r0, [pc, #32]	; (8005ed4 <http_set_ssi_handler+0x6c>)
 8005eb2:	f00d fbcd 	bl	8013650 <iprintf>

  httpd_tags = tags;
 8005eb6:	4a0b      	ldr	r2, [pc, #44]	; (8005ee4 <http_set_ssi_handler+0x7c>)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8005ebc:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <http_set_ssi_handler+0x80>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	08014b20 	.word	0x08014b20
 8005ed0:	08014d50 	.word	0x08014d50
 8005ed4:	08014b68 	.word	0x08014b68
 8005ed8:	200004ec 	.word	0x200004ec
 8005edc:	08014d68 	.word	0x08014d68
 8005ee0:	08014d78 	.word	0x08014d78
 8005ee4:	200004f4 	.word	0x200004f4
 8005ee8:	200004f0 	.word	0x200004f0

08005eec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	b21a      	sxth	r2, r3
 8005efc:	88fb      	ldrh	r3, [r7, #6]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	b21b      	sxth	r3, r3
 8005f04:	4313      	orrs	r3, r2
 8005f06:	b21b      	sxth	r3, r3
 8005f08:	b29b      	uxth	r3, r3
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	061a      	lsls	r2, r3, #24
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	0e1b      	lsrs	r3, r3, #24
 8005f3a:	4313      	orrs	r3, r2
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005f54:	68b8      	ldr	r0, [r7, #8]
 8005f56:	f7fa f97d 	bl	8000254 <strlen>
 8005f5a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	e022      	b.n	8005fac <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e012      	b.n	8005f92 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	781a      	ldrb	r2, [r3, #0]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d109      	bne.n	8005f8c <lwip_strnstr+0x44>
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	6978      	ldr	r0, [r7, #20]
 8005f7e:	f00d fbec 	bl	801375a <strncmp>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	e00f      	b.n	8005fac <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <lwip_strnstr+0x62>
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	441a      	add	r2, r3
 8005fa0:	68f9      	ldr	r1, [r7, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	440b      	add	r3, r1
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d9e0      	bls.n	8005f6c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	603a      	str	r2, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8005fd2:	7bfa      	ldrb	r2, [r7, #15]
 8005fd4:	7bbb      	ldrb	r3, [r7, #14]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d016      	beq.n	8006008 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	f043 0320 	orr.w	r3, r3, #32
 8005fe0:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005fe2:	7b7b      	ldrb	r3, [r7, #13]
 8005fe4:	2b60      	cmp	r3, #96	; 0x60
 8005fe6:	d90c      	bls.n	8006002 <lwip_stricmp+0x4e>
 8005fe8:	7b7b      	ldrb	r3, [r7, #13]
 8005fea:	2b7a      	cmp	r3, #122	; 0x7a
 8005fec:	d809      	bhi.n	8006002 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	f043 0320 	orr.w	r3, r3, #32
 8005ff4:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8005ff6:	7b7a      	ldrb	r2, [r7, #13]
 8005ff8:	7b3b      	ldrb	r3, [r7, #12]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d003      	beq.n	8006006 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e006      	b.n	8006010 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8006002:	2301      	movs	r3, #1
 8006004:	e004      	b.n	8006010 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006006:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1d7      	bne.n	8005fbe <lwip_stricmp+0xa>
  return 0;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800601c:	b480      	push	{r7}
 800601e:	b089      	sub	sp, #36	; 0x24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00d      	beq.n	800605c <lwip_standard_chksum+0x40>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	dd0a      	ble.n	800605c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	1c53      	adds	r3, r2, #1
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	f107 030e 	add.w	r3, r7, #14
 8006050:	3301      	adds	r3, #1
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	701a      	strb	r2, [r3, #0]
    len--;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	3b01      	subs	r3, #1
 800605a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8006060:	e00a      	b.n	8006078 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	1c9a      	adds	r2, r3, #2
 8006066:	61ba      	str	r2, [r7, #24]
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4413      	add	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
    len -= 2;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	3b02      	subs	r3, #2
 8006076:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b01      	cmp	r3, #1
 800607c:	dcf1      	bgt.n	8006062 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	dd04      	ble.n	800608e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006084:	f107 030e 	add.w	r3, r7, #14
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	7812      	ldrb	r2, [r2, #0]
 800608c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800608e:	89fb      	ldrh	r3, [r7, #14]
 8006090:	461a      	mov	r2, r3
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	4413      	add	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	0c1a      	lsrs	r2, r3, #16
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	4413      	add	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	0c1a      	lsrs	r2, r3, #16
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	021b      	lsls	r3, r3, #8
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	b29b      	uxth	r3, r3
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b086      	sub	sp, #24
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	607b      	str	r3, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	72fb      	strb	r3, [r7, #11]
 80060e4:	4613      	mov	r3, r2
 80060e6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e02b      	b.n	800614a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	895b      	ldrh	r3, [r3, #10]
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7ff ff8d 	bl	800601c <lwip_standard_chksum>
 8006102:	4603      	mov	r3, r0
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	0c1a      	lsrs	r2, r3, #16
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	b29b      	uxth	r3, r3
 8006114:	4413      	add	r3, r2
 8006116:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	895b      	ldrh	r3, [r3, #10]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	b2db      	uxtb	r3, r3
 8006140:	4313      	orrs	r3, r2
 8006142:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1d0      	bne.n	80060f2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	b2db      	uxtb	r3, r3
 8006162:	4313      	orrs	r3, r2
 8006164:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	b29b      	uxth	r3, r3
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff febe 	bl	8005eec <lwip_htons>
 8006170:	4603      	mov	r3, r0
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800617a:	893b      	ldrh	r3, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff feb5 	bl	8005eec <lwip_htons>
 8006182:	4603      	mov	r3, r0
 8006184:	461a      	mov	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4413      	add	r3, r2
 800618a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	0c1a      	lsrs	r2, r3, #16
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	b29b      	uxth	r3, r3
 8006194:	4413      	add	r3, r2
 8006196:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0c1a      	lsrs	r2, r3, #16
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4413      	add	r3, r2
 80061a2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	b29b      	uxth	r3, r3
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	607b      	str	r3, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	72fb      	strb	r3, [r7, #11]
 80061c2:	4613      	mov	r3, r2
 80061c4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4413      	add	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	0c1b      	lsrs	r3, r3, #16
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	0c1a      	lsrs	r2, r3, #16
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	4413      	add	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	0c1a      	lsrs	r2, r3, #16
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	b29b      	uxth	r3, r3
 800620a:	4413      	add	r3, r2
 800620c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800620e:	893a      	ldrh	r2, [r7, #8]
 8006210:	7af9      	ldrb	r1, [r7, #11]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7ff ff5e 	bl	80060d6 <inet_cksum_pseudo_base>
 800621a:	4603      	mov	r3, r0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	72fb      	strb	r3, [r7, #11]
 8006232:	4613      	mov	r3, r2
 8006234:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8006236:	893a      	ldrh	r2, [r7, #8]
 8006238:	7af9      	ldrb	r1, [r7, #11]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff ffb7 	bl	80061b4 <inet_chksum_pseudo>
 8006246:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800625c:	887b      	ldrh	r3, [r7, #2]
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff fedb 	bl	800601c <lwip_standard_chksum>
 8006266:	4603      	mov	r3, r0
 8006268:	43db      	mvns	r3, r3
 800626a:	b29b      	uxth	r3, r3
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	e02b      	b.n	80062e2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	895b      	ldrh	r3, [r3, #10]
 8006292:	4619      	mov	r1, r3
 8006294:	4610      	mov	r0, r2
 8006296:	f7ff fec1 	bl	800601c <lwip_standard_chksum>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	4413      	add	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	0c1a      	lsrs	r2, r3, #16
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4413      	add	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	895b      	ldrh	r3, [r3, #10]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf0c      	ite	eq
 80062c4:	2301      	moveq	r3, #1
 80062c6:	2300      	movne	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	0a1b      	lsrs	r3, r3, #8
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1d0      	bne.n	800628a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	b29b      	uxth	r3, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	b29b      	uxth	r3, r3
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8006318:	f001 fd50 	bl	8007dbc <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800631c:	f000 f8d4 	bl	80064c8 <mem_init>
  memp_init();
 8006320:	f000 fc3a 	bl	8006b98 <memp_init>
  pbuf_init();
  netif_init();
 8006324:	f000 fd00 	bl	8006d28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006328:	f008 f804 	bl	800e334 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800632c:	f001 fd4e 	bl	8007dcc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006330:	f007 ff76 	bl	800e220 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <ptr_to_mem+0x20>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	88fb      	ldrh	r3, [r7, #6]
 800634c:	4413      	add	r3, r2
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	200004f8 	.word	0x200004f8

08006360 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006368:	4b05      	ldr	r3, [pc, #20]	; (8006380 <mem_to_ptr+0x20>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	b29b      	uxth	r3, r3
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	200004f8 	.word	0x200004f8

08006384 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006384:	b590      	push	{r4, r7, lr}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800638c:	4b45      	ldr	r3, [pc, #276]	; (80064a4 <plug_holes+0x120>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	429a      	cmp	r2, r3
 8006394:	d206      	bcs.n	80063a4 <plug_holes+0x20>
 8006396:	4b44      	ldr	r3, [pc, #272]	; (80064a8 <plug_holes+0x124>)
 8006398:	f240 12df 	movw	r2, #479	; 0x1df
 800639c:	4943      	ldr	r1, [pc, #268]	; (80064ac <plug_holes+0x128>)
 800639e:	4844      	ldr	r0, [pc, #272]	; (80064b0 <plug_holes+0x12c>)
 80063a0:	f00d f956 	bl	8013650 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80063a4:	4b43      	ldr	r3, [pc, #268]	; (80064b4 <plug_holes+0x130>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d306      	bcc.n	80063bc <plug_holes+0x38>
 80063ae:	4b3e      	ldr	r3, [pc, #248]	; (80064a8 <plug_holes+0x124>)
 80063b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80063b4:	4940      	ldr	r1, [pc, #256]	; (80064b8 <plug_holes+0x134>)
 80063b6:	483e      	ldr	r0, [pc, #248]	; (80064b0 <plug_holes+0x12c>)
 80063b8:	f00d f94a 	bl	8013650 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	791b      	ldrb	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d006      	beq.n	80063d2 <plug_holes+0x4e>
 80063c4:	4b38      	ldr	r3, [pc, #224]	; (80064a8 <plug_holes+0x124>)
 80063c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80063ca:	493c      	ldr	r1, [pc, #240]	; (80064bc <plug_holes+0x138>)
 80063cc:	4838      	ldr	r0, [pc, #224]	; (80064b0 <plug_holes+0x12c>)
 80063ce:	f00d f93f 	bl	8013650 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80063da:	d906      	bls.n	80063ea <plug_holes+0x66>
 80063dc:	4b32      	ldr	r3, [pc, #200]	; (80064a8 <plug_holes+0x124>)
 80063de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80063e2:	4937      	ldr	r1, [pc, #220]	; (80064c0 <plug_holes+0x13c>)
 80063e4:	4832      	ldr	r0, [pc, #200]	; (80064b0 <plug_holes+0x12c>)
 80063e6:	f00d f933 	bl	8013650 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff ffa4 	bl	800633c <ptr_to_mem>
 80063f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d024      	beq.n	8006448 <plug_holes+0xc4>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	791b      	ldrb	r3, [r3, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d120      	bne.n	8006448 <plug_holes+0xc4>
 8006406:	4b2b      	ldr	r3, [pc, #172]	; (80064b4 <plug_holes+0x130>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	429a      	cmp	r2, r3
 800640e:	d01b      	beq.n	8006448 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006410:	4b2c      	ldr	r3, [pc, #176]	; (80064c4 <plug_holes+0x140>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	429a      	cmp	r2, r3
 8006418:	d102      	bne.n	8006420 <plug_holes+0x9c>
      lfree = mem;
 800641a:	4a2a      	ldr	r2, [pc, #168]	; (80064c4 <plug_holes+0x140>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	881a      	ldrh	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006430:	d00a      	beq.n	8006448 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff ff80 	bl	800633c <ptr_to_mem>
 800643c:	4604      	mov	r4, r0
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff ff8e 	bl	8006360 <mem_to_ptr>
 8006444:	4603      	mov	r3, r0
 8006446:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	885b      	ldrh	r3, [r3, #2]
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff ff75 	bl	800633c <ptr_to_mem>
 8006452:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	d01f      	beq.n	800649c <plug_holes+0x118>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	791b      	ldrb	r3, [r3, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d11b      	bne.n	800649c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006464:	4b17      	ldr	r3, [pc, #92]	; (80064c4 <plug_holes+0x140>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	429a      	cmp	r2, r3
 800646c:	d102      	bne.n	8006474 <plug_holes+0xf0>
      lfree = pmem;
 800646e:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <plug_holes+0x140>)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	881a      	ldrh	r2, [r3, #0]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006484:	d00a      	beq.n	800649c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff ff56 	bl	800633c <ptr_to_mem>
 8006490:	4604      	mov	r4, r0
 8006492:	68b8      	ldr	r0, [r7, #8]
 8006494:	f7ff ff64 	bl	8006360 <mem_to_ptr>
 8006498:	4603      	mov	r3, r0
 800649a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd90      	pop	{r4, r7, pc}
 80064a4:	200004f8 	.word	0x200004f8
 80064a8:	08014d90 	.word	0x08014d90
 80064ac:	08014dc0 	.word	0x08014dc0
 80064b0:	08014dd8 	.word	0x08014dd8
 80064b4:	200004fc 	.word	0x200004fc
 80064b8:	08014e00 	.word	0x08014e00
 80064bc:	08014e1c 	.word	0x08014e1c
 80064c0:	08014e38 	.word	0x08014e38
 80064c4:	20000500 	.word	0x20000500

080064c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80064ce:	4b19      	ldr	r3, [pc, #100]	; (8006534 <mem_init+0x6c>)
 80064d0:	4a19      	ldr	r2, [pc, #100]	; (8006538 <mem_init+0x70>)
 80064d2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80064d4:	4b17      	ldr	r3, [pc, #92]	; (8006534 <mem_init+0x6c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80064e0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80064ee:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80064f2:	f7ff ff23 	bl	800633c <ptr_to_mem>
 80064f6:	4603      	mov	r3, r0
 80064f8:	4a10      	ldr	r2, [pc, #64]	; (800653c <mem_init+0x74>)
 80064fa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <mem_init+0x74>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2201      	movs	r2, #1
 8006502:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006504:	4b0d      	ldr	r3, [pc, #52]	; (800653c <mem_init+0x74>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800650c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <mem_init+0x74>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006516:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <mem_init+0x6c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a08      	ldr	r2, [pc, #32]	; (8006540 <mem_init+0x78>)
 800651e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8006520:	4b08      	ldr	r3, [pc, #32]	; (8006544 <mem_init+0x7c>)
 8006522:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006526:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800652a:	bf00      	nop
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	200004f8 	.word	0x200004f8
 8006538:	20004550 	.word	0x20004550
 800653c:	200004fc 	.word	0x200004fc
 8006540:	20000500 	.word	0x20000500
 8006544:	20007a4c 	.word	0x20007a4c

08006548 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff05 	bl	8006360 <mem_to_ptr>
 8006556:	4603      	mov	r3, r0
 8006558:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff feec 	bl	800633c <ptr_to_mem>
 8006564:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	885b      	ldrh	r3, [r3, #2]
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff fee6 	bl	800633c <ptr_to_mem>
 8006570:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800657a:	d818      	bhi.n	80065ae <mem_link_valid+0x66>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	885b      	ldrh	r3, [r3, #2]
 8006580:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006584:	d813      	bhi.n	80065ae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800658a:	8afa      	ldrh	r2, [r7, #22]
 800658c:	429a      	cmp	r2, r3
 800658e:	d004      	beq.n	800659a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	8afa      	ldrh	r2, [r7, #22]
 8006596:	429a      	cmp	r2, r3
 8006598:	d109      	bne.n	80065ae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800659a:	4b08      	ldr	r3, [pc, #32]	; (80065bc <mem_link_valid+0x74>)
 800659c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d006      	beq.n	80065b2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	885b      	ldrh	r3, [r3, #2]
 80065a8:	8afa      	ldrh	r2, [r7, #22]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d001      	beq.n	80065b2 <mem_link_valid+0x6a>
    return 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	e000      	b.n	80065b4 <mem_link_valid+0x6c>
  }
  return 1;
 80065b2:	2301      	movs	r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	200004fc 	.word	0x200004fc

080065c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d068      	beq.n	80066a0 <mem_free+0xe0>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3b06      	subs	r3, #6
 80065d2:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80065d4:	4b34      	ldr	r3, [pc, #208]	; (80066a8 <mem_free+0xe8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d306      	bcc.n	80065ec <mem_free+0x2c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f103 020c 	add.w	r2, r3, #12
 80065e4:	4b31      	ldr	r3, [pc, #196]	; (80066ac <mem_free+0xec>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d90f      	bls.n	800660c <mem_free+0x4c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80065ec:	4b30      	ldr	r3, [pc, #192]	; (80066b0 <mem_free+0xf0>)
 80065ee:	f240 227f 	movw	r2, #639	; 0x27f
 80065f2:	4930      	ldr	r1, [pc, #192]	; (80066b4 <mem_free+0xf4>)
 80065f4:	4830      	ldr	r0, [pc, #192]	; (80066b8 <mem_free+0xf8>)
 80065f6:	f00d f82b 	bl	8013650 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80065fa:	4b30      	ldr	r3, [pc, #192]	; (80066bc <mem_free+0xfc>)
 80065fc:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006600:	3301      	adds	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	4b2d      	ldr	r3, [pc, #180]	; (80066bc <mem_free+0xfc>)
 8006606:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 800660a:	e04a      	b.n	80066a2 <mem_free+0xe2>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	791b      	ldrb	r3, [r3, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10f      	bne.n	8006634 <mem_free+0x74>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006614:	4b26      	ldr	r3, [pc, #152]	; (80066b0 <mem_free+0xf0>)
 8006616:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800661a:	4929      	ldr	r1, [pc, #164]	; (80066c0 <mem_free+0x100>)
 800661c:	4826      	ldr	r0, [pc, #152]	; (80066b8 <mem_free+0xf8>)
 800661e:	f00d f817 	bl	8013650 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006622:	4b26      	ldr	r3, [pc, #152]	; (80066bc <mem_free+0xfc>)
 8006624:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006628:	3301      	adds	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	4b23      	ldr	r3, [pc, #140]	; (80066bc <mem_free+0xfc>)
 800662e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 8006632:	e036      	b.n	80066a2 <mem_free+0xe2>
  }

  if (!mem_link_valid(mem)) {
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff ff87 	bl	8006548 <mem_link_valid>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10f      	bne.n	8006660 <mem_free+0xa0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <mem_free+0xf0>)
 8006642:	f240 2295 	movw	r2, #661	; 0x295
 8006646:	491f      	ldr	r1, [pc, #124]	; (80066c4 <mem_free+0x104>)
 8006648:	481b      	ldr	r0, [pc, #108]	; (80066b8 <mem_free+0xf8>)
 800664a:	f00d f801 	bl	8013650 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800664e:	4b1b      	ldr	r3, [pc, #108]	; (80066bc <mem_free+0xfc>)
 8006650:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006654:	3301      	adds	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	4b18      	ldr	r3, [pc, #96]	; (80066bc <mem_free+0xfc>)
 800665a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 800665e:	e020      	b.n	80066a2 <mem_free+0xe2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006666:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <mem_free+0x108>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	429a      	cmp	r2, r3
 800666e:	d202      	bcs.n	8006676 <mem_free+0xb6>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006670:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <mem_free+0x108>)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8006676:	4b11      	ldr	r3, [pc, #68]	; (80066bc <mem_free+0xfc>)
 8006678:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <mem_free+0xe8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68f9      	ldr	r1, [r7, #12]
 8006682:	1acb      	subs	r3, r1, r3
 8006684:	b299      	uxth	r1, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	1acb      	subs	r3, r1, r3
 800668c:	b29b      	uxth	r3, r3
 800668e:	4413      	add	r3, r2
 8006690:	b29a      	uxth	r2, r3
 8006692:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <mem_free+0xfc>)
 8006694:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff fe73 	bl	8006384 <plug_holes>
 800669e:	e000      	b.n	80066a2 <mem_free+0xe2>
    return;
 80066a0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	200004f8 	.word	0x200004f8
 80066ac:	200004fc 	.word	0x200004fc
 80066b0:	08014d90 	.word	0x08014d90
 80066b4:	08014e64 	.word	0x08014e64
 80066b8:	08014dd8 	.word	0x08014dd8
 80066bc:	20007a4c 	.word	0x20007a4c
 80066c0:	08014e80 	.word	0x08014e80
 80066c4:	08014ea8 	.word	0x08014ea8
 80066c8:	20000500 	.word	0x20000500

080066cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80066d8:	887b      	ldrh	r3, [r7, #2]
 80066da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80066dc:	8bfb      	ldrh	r3, [r7, #30]
 80066de:	2b0b      	cmp	r3, #11
 80066e0:	d801      	bhi.n	80066e6 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80066e2:	230c      	movs	r3, #12
 80066e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80066e6:	8bfb      	ldrh	r3, [r7, #30]
 80066e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80066ec:	d803      	bhi.n	80066f6 <mem_trim+0x2a>
 80066ee:	8bfa      	ldrh	r2, [r7, #30]
 80066f0:	887b      	ldrh	r3, [r7, #2]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d201      	bcs.n	80066fa <mem_trim+0x2e>
    return NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e0ec      	b.n	80068d4 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80066fa:	4b78      	ldr	r3, [pc, #480]	; (80068dc <mem_trim+0x210>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d304      	bcc.n	800670e <mem_trim+0x42>
 8006704:	4b76      	ldr	r3, [pc, #472]	; (80068e0 <mem_trim+0x214>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d306      	bcc.n	800671c <mem_trim+0x50>
 800670e:	4b75      	ldr	r3, [pc, #468]	; (80068e4 <mem_trim+0x218>)
 8006710:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006714:	4974      	ldr	r1, [pc, #464]	; (80068e8 <mem_trim+0x21c>)
 8006716:	4875      	ldr	r0, [pc, #468]	; (80068ec <mem_trim+0x220>)
 8006718:	f00c ff9a 	bl	8013650 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800671c:	4b6f      	ldr	r3, [pc, #444]	; (80068dc <mem_trim+0x210>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d304      	bcc.n	8006730 <mem_trim+0x64>
 8006726:	4b6e      	ldr	r3, [pc, #440]	; (80068e0 <mem_trim+0x214>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d309      	bcc.n	8006744 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006730:	4b6f      	ldr	r3, [pc, #444]	; (80068f0 <mem_trim+0x224>)
 8006732:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006736:	3301      	adds	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	4b6d      	ldr	r3, [pc, #436]	; (80068f0 <mem_trim+0x224>)
 800673c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return rmem;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	e0c7      	b.n	80068d4 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3b06      	subs	r3, #6
 8006748:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800674a:	69b8      	ldr	r0, [r7, #24]
 800674c:	f7ff fe08 	bl	8006360 <mem_to_ptr>
 8006750:	4603      	mov	r3, r0
 8006752:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	881a      	ldrh	r2, [r3, #0]
 8006758:	8afb      	ldrh	r3, [r7, #22]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b06      	subs	r3, #6
 8006760:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006762:	8bfa      	ldrh	r2, [r7, #30]
 8006764:	8abb      	ldrh	r3, [r7, #20]
 8006766:	429a      	cmp	r2, r3
 8006768:	d906      	bls.n	8006778 <mem_trim+0xac>
 800676a:	4b5e      	ldr	r3, [pc, #376]	; (80068e4 <mem_trim+0x218>)
 800676c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006770:	4960      	ldr	r1, [pc, #384]	; (80068f4 <mem_trim+0x228>)
 8006772:	485e      	ldr	r0, [pc, #376]	; (80068ec <mem_trim+0x220>)
 8006774:	f00c ff6c 	bl	8013650 <iprintf>
  if (newsize > size) {
 8006778:	8bfa      	ldrh	r2, [r7, #30]
 800677a:	8abb      	ldrh	r3, [r7, #20]
 800677c:	429a      	cmp	r2, r3
 800677e:	d901      	bls.n	8006784 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	e0a7      	b.n	80068d4 <mem_trim+0x208>
  }
  if (newsize == size) {
 8006784:	8bfa      	ldrh	r2, [r7, #30]
 8006786:	8abb      	ldrh	r3, [r7, #20]
 8006788:	429a      	cmp	r2, r3
 800678a:	d101      	bne.n	8006790 <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	e0a1      	b.n	80068d4 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fdd1 	bl	800633c <ptr_to_mem>
 800679a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	791b      	ldrb	r3, [r3, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d14b      	bne.n	800683c <mem_trim+0x170>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067ac:	d106      	bne.n	80067bc <mem_trim+0xf0>
 80067ae:	4b4d      	ldr	r3, [pc, #308]	; (80068e4 <mem_trim+0x218>)
 80067b0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80067b4:	4950      	ldr	r1, [pc, #320]	; (80068f8 <mem_trim+0x22c>)
 80067b6:	484d      	ldr	r0, [pc, #308]	; (80068ec <mem_trim+0x220>)
 80067b8:	f00c ff4a 	bl	8013650 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80067c2:	8afa      	ldrh	r2, [r7, #22]
 80067c4:	8bfb      	ldrh	r3, [r7, #30]
 80067c6:	4413      	add	r3, r2
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3306      	adds	r3, #6
 80067cc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80067ce:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <mem_trim+0x230>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d106      	bne.n	80067e6 <mem_trim+0x11a>
      lfree = ptr_to_mem(ptr2);
 80067d8:	89fb      	ldrh	r3, [r7, #14]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fdae 	bl	800633c <ptr_to_mem>
 80067e0:	4603      	mov	r3, r0
 80067e2:	4a46      	ldr	r2, [pc, #280]	; (80068fc <mem_trim+0x230>)
 80067e4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80067e6:	89fb      	ldrh	r3, [r7, #14]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fda7 	bl	800633c <ptr_to_mem>
 80067ee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2200      	movs	r2, #0
 80067f4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	89ba      	ldrh	r2, [r7, #12]
 80067fa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	8afa      	ldrh	r2, [r7, #22]
 8006800:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	89fa      	ldrh	r2, [r7, #14]
 8006806:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006810:	d007      	beq.n	8006822 <mem_trim+0x156>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fd90 	bl	800633c <ptr_to_mem>
 800681c:	4602      	mov	r2, r0
 800681e:	89fb      	ldrh	r3, [r7, #14]
 8006820:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8006822:	4b33      	ldr	r3, [pc, #204]	; (80068f0 <mem_trim+0x224>)
 8006824:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006828:	8bf9      	ldrh	r1, [r7, #30]
 800682a:	8abb      	ldrh	r3, [r7, #20]
 800682c:	1acb      	subs	r3, r1, r3
 800682e:	b29b      	uxth	r3, r3
 8006830:	4413      	add	r3, r2
 8006832:	b29a      	uxth	r2, r3
 8006834:	4b2e      	ldr	r3, [pc, #184]	; (80068f0 <mem_trim+0x224>)
 8006836:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800683a:	e04a      	b.n	80068d2 <mem_trim+0x206>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800683c:	8bfb      	ldrh	r3, [r7, #30]
 800683e:	f103 0212 	add.w	r2, r3, #18
 8006842:	8abb      	ldrh	r3, [r7, #20]
 8006844:	429a      	cmp	r2, r3
 8006846:	d844      	bhi.n	80068d2 <mem_trim+0x206>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006848:	8afa      	ldrh	r2, [r7, #22]
 800684a:	8bfb      	ldrh	r3, [r7, #30]
 800684c:	4413      	add	r3, r2
 800684e:	b29b      	uxth	r3, r3
 8006850:	3306      	adds	r3, #6
 8006852:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800685c:	d106      	bne.n	800686c <mem_trim+0x1a0>
 800685e:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <mem_trim+0x218>)
 8006860:	f240 3216 	movw	r2, #790	; 0x316
 8006864:	4924      	ldr	r1, [pc, #144]	; (80068f8 <mem_trim+0x22c>)
 8006866:	4821      	ldr	r0, [pc, #132]	; (80068ec <mem_trim+0x220>)
 8006868:	f00c fef2 	bl	8013650 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800686c:	89fb      	ldrh	r3, [r7, #14]
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fd64 	bl	800633c <ptr_to_mem>
 8006874:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006876:	4b21      	ldr	r3, [pc, #132]	; (80068fc <mem_trim+0x230>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d202      	bcs.n	8006886 <mem_trim+0x1ba>
      lfree = mem2;
 8006880:	4a1e      	ldr	r2, [pc, #120]	; (80068fc <mem_trim+0x230>)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2200      	movs	r2, #0
 800688a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	881a      	ldrh	r2, [r3, #0]
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	8afa      	ldrh	r2, [r7, #22]
 8006898:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	89fa      	ldrh	r2, [r7, #14]
 800689e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068a8:	d007      	beq.n	80068ba <mem_trim+0x1ee>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff fd44 	bl	800633c <ptr_to_mem>
 80068b4:	4602      	mov	r2, r0
 80068b6:	89fb      	ldrh	r3, [r7, #14]
 80068b8:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80068ba:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <mem_trim+0x224>)
 80068bc:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80068c0:	8bf9      	ldrh	r1, [r7, #30]
 80068c2:	8abb      	ldrh	r3, [r7, #20]
 80068c4:	1acb      	subs	r3, r1, r3
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	4413      	add	r3, r2
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	4b08      	ldr	r3, [pc, #32]	; (80068f0 <mem_trim+0x224>)
 80068ce:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80068d2:	687b      	ldr	r3, [r7, #4]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	200004f8 	.word	0x200004f8
 80068e0:	200004fc 	.word	0x200004fc
 80068e4:	08014d90 	.word	0x08014d90
 80068e8:	08014edc 	.word	0x08014edc
 80068ec:	08014dd8 	.word	0x08014dd8
 80068f0:	20007a4c 	.word	0x20007a4c
 80068f4:	08014ef4 	.word	0x08014ef4
 80068f8:	08014f14 	.word	0x08014f14
 80068fc:	20000500 	.word	0x20000500

08006900 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006900:	b590      	push	{r4, r7, lr}
 8006902:	b089      	sub	sp, #36	; 0x24
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800690a:	88fb      	ldrh	r3, [r7, #6]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <mem_malloc+0x14>
    return NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	e0fa      	b.n	8006b0a <mem_malloc+0x20a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006918:	8bbb      	ldrh	r3, [r7, #28]
 800691a:	2b0b      	cmp	r3, #11
 800691c:	d801      	bhi.n	8006922 <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800691e:	230c      	movs	r3, #12
 8006920:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006922:	8bbb      	ldrh	r3, [r7, #28]
 8006924:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006928:	d803      	bhi.n	8006932 <mem_malloc+0x32>
 800692a:	8bba      	ldrh	r2, [r7, #28]
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	429a      	cmp	r2, r3
 8006930:	d201      	bcs.n	8006936 <mem_malloc+0x36>
    return NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	e0e9      	b.n	8006b0a <mem_malloc+0x20a>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006936:	4b77      	ldr	r3, [pc, #476]	; (8006b14 <mem_malloc+0x214>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff fd10 	bl	8006360 <mem_to_ptr>
 8006940:	4603      	mov	r3, r0
 8006942:	83fb      	strh	r3, [r7, #30]
 8006944:	e0d1      	b.n	8006aea <mem_malloc+0x1ea>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006946:	8bfb      	ldrh	r3, [r7, #30]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fcf7 	bl	800633c <ptr_to_mem>
 800694e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	791b      	ldrb	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 80c1 	bne.w	8006adc <mem_malloc+0x1dc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	8bfb      	ldrh	r3, [r7, #30]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	1f9a      	subs	r2, r3, #6
 8006966:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006968:	429a      	cmp	r2, r3
 800696a:	f0c0 80b7 	bcc.w	8006adc <mem_malloc+0x1dc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	8bfb      	ldrh	r3, [r7, #30]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	1f9a      	subs	r2, r3, #6
 800697a:	8bbb      	ldrh	r3, [r7, #28]
 800697c:	3312      	adds	r3, #18
 800697e:	429a      	cmp	r2, r3
 8006980:	d34c      	bcc.n	8006a1c <mem_malloc+0x11c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006982:	8bfa      	ldrh	r2, [r7, #30]
 8006984:	8bbb      	ldrh	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	b29b      	uxth	r3, r3
 800698a:	3306      	adds	r3, #6
 800698c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800698e:	8a7b      	ldrh	r3, [r7, #18]
 8006990:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006994:	d106      	bne.n	80069a4 <mem_malloc+0xa4>
 8006996:	4b60      	ldr	r3, [pc, #384]	; (8006b18 <mem_malloc+0x218>)
 8006998:	f240 3287 	movw	r2, #903	; 0x387
 800699c:	495f      	ldr	r1, [pc, #380]	; (8006b1c <mem_malloc+0x21c>)
 800699e:	4860      	ldr	r0, [pc, #384]	; (8006b20 <mem_malloc+0x220>)
 80069a0:	f00c fe56 	bl	8013650 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80069a4:	8a7b      	ldrh	r3, [r7, #18]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fcc8 	bl	800633c <ptr_to_mem>
 80069ac:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	881a      	ldrh	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8bfa      	ldrh	r2, [r7, #30]
 80069c0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	8a7a      	ldrh	r2, [r7, #18]
 80069c6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2201      	movs	r2, #1
 80069cc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069d6:	d007      	beq.n	80069e8 <mem_malloc+0xe8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff fcad 	bl	800633c <ptr_to_mem>
 80069e2:	4602      	mov	r2, r0
 80069e4:	8a7b      	ldrh	r3, [r7, #18]
 80069e6:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80069e8:	4b4e      	ldr	r3, [pc, #312]	; (8006b24 <mem_malloc+0x224>)
 80069ea:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80069ee:	8bbb      	ldrh	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3306      	adds	r3, #6
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	4b4a      	ldr	r3, [pc, #296]	; (8006b24 <mem_malloc+0x224>)
 80069fa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80069fe:	4b49      	ldr	r3, [pc, #292]	; (8006b24 <mem_malloc+0x224>)
 8006a00:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8006a04:	4b47      	ldr	r3, [pc, #284]	; (8006b24 <mem_malloc+0x224>)
 8006a06:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d227      	bcs.n	8006a5e <mem_malloc+0x15e>
 8006a0e:	4b45      	ldr	r3, [pc, #276]	; (8006b24 <mem_malloc+0x224>)
 8006a10:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006a14:	4b43      	ldr	r3, [pc, #268]	; (8006b24 <mem_malloc+0x224>)
 8006a16:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006a1a:	e020      	b.n	8006a5e <mem_malloc+0x15e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8006a22:	4b40      	ldr	r3, [pc, #256]	; (8006b24 <mem_malloc+0x224>)
 8006a24:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	b29c      	uxth	r4, r3
 8006a30:	6978      	ldr	r0, [r7, #20]
 8006a32:	f7ff fc95 	bl	8006360 <mem_to_ptr>
 8006a36:	4603      	mov	r3, r0
 8006a38:	1ae3      	subs	r3, r4, r3
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	4b39      	ldr	r3, [pc, #228]	; (8006b24 <mem_malloc+0x224>)
 8006a3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8006a42:	4b38      	ldr	r3, [pc, #224]	; (8006b24 <mem_malloc+0x224>)
 8006a44:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8006a48:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <mem_malloc+0x224>)
 8006a4a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d205      	bcs.n	8006a5e <mem_malloc+0x15e>
 8006a52:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <mem_malloc+0x224>)
 8006a54:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006a58:	4b32      	ldr	r3, [pc, #200]	; (8006b24 <mem_malloc+0x224>)
 8006a5a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006a5e:	4b2d      	ldr	r3, [pc, #180]	; (8006b14 <mem_malloc+0x214>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d127      	bne.n	8006ab8 <mem_malloc+0x1b8>
          struct mem *cur = lfree;
 8006a68:	4b2a      	ldr	r3, [pc, #168]	; (8006b14 <mem_malloc+0x214>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006a6e:	e005      	b.n	8006a7c <mem_malloc+0x17c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fc61 	bl	800633c <ptr_to_mem>
 8006a7a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	791b      	ldrb	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <mem_malloc+0x18e>
 8006a84:	4b28      	ldr	r3, [pc, #160]	; (8006b28 <mem_malloc+0x228>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d1f0      	bne.n	8006a70 <mem_malloc+0x170>
          }
          lfree = cur;
 8006a8e:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <mem_malloc+0x214>)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006a94:	4b1f      	ldr	r3, [pc, #124]	; (8006b14 <mem_malloc+0x214>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	4b23      	ldr	r3, [pc, #140]	; (8006b28 <mem_malloc+0x228>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d00b      	beq.n	8006ab8 <mem_malloc+0x1b8>
 8006aa0:	4b1c      	ldr	r3, [pc, #112]	; (8006b14 <mem_malloc+0x214>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d006      	beq.n	8006ab8 <mem_malloc+0x1b8>
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <mem_malloc+0x218>)
 8006aac:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006ab0:	491e      	ldr	r1, [pc, #120]	; (8006b2c <mem_malloc+0x22c>)
 8006ab2:	481b      	ldr	r0, [pc, #108]	; (8006b20 <mem_malloc+0x220>)
 8006ab4:	f00c fdcc 	bl	8013650 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006ab8:	8bba      	ldrh	r2, [r7, #28]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	3306      	adds	r3, #6
 8006ac0:	4a19      	ldr	r2, [pc, #100]	; (8006b28 <mem_malloc+0x228>)
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d906      	bls.n	8006ad6 <mem_malloc+0x1d6>
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <mem_malloc+0x218>)
 8006aca:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006ace:	4918      	ldr	r1, [pc, #96]	; (8006b30 <mem_malloc+0x230>)
 8006ad0:	4813      	ldr	r0, [pc, #76]	; (8006b20 <mem_malloc+0x220>)
 8006ad2:	f00c fdbd 	bl	8013650 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	3306      	adds	r3, #6
 8006ada:	e016      	b.n	8006b0a <mem_malloc+0x20a>
         ptr = ptr_to_mem(ptr)->next) {
 8006adc:	8bfb      	ldrh	r3, [r7, #30]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fc2c 	bl	800633c <ptr_to_mem>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006aea:	8bfa      	ldrh	r2, [r7, #30]
 8006aec:	8bbb      	ldrh	r3, [r7, #28]
 8006aee:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006af2:	429a      	cmp	r2, r3
 8006af4:	f4ff af27 	bcc.w	8006946 <mem_malloc+0x46>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <mem_malloc+0x224>)
 8006afa:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8006afe:	3301      	adds	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	4b08      	ldr	r3, [pc, #32]	; (8006b24 <mem_malloc+0x224>)
 8006b04:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3724      	adds	r7, #36	; 0x24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd90      	pop	{r4, r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000500 	.word	0x20000500
 8006b18:	08014d90 	.word	0x08014d90
 8006b1c:	08014f14 	.word	0x08014f14
 8006b20:	08014dd8 	.word	0x08014dd8
 8006b24:	20007a4c 	.word	0x20007a4c
 8006b28:	200004fc 	.word	0x200004fc
 8006b2c:	08014f28 	.word	0x08014f28
 8006b30:	08014f44 	.word	0x08014f44

08006b34 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	e011      	b.n	8006b74 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	889b      	ldrh	r3, [r3, #4]
 8006b66:	461a      	mov	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3301      	adds	r3, #1
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	88db      	ldrh	r3, [r3, #6]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	dbe7      	blt.n	8006b50 <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	88d2      	ldrh	r2, [r2, #6]
 8006b88:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	80fb      	strh	r3, [r7, #6]
 8006ba2:	e014      	b.n	8006bce <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8006ba4:	88fb      	ldrh	r3, [r7, #6]
 8006ba6:	4a0e      	ldr	r2, [pc, #56]	; (8006be0 <memp_init+0x48>)
 8006ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff ffc1 	bl	8006b34 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <memp_init+0x48>)
 8006bb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	4909      	ldr	r1, [pc, #36]	; (8006be4 <memp_init+0x4c>)
 8006bc0:	332c      	adds	r3, #44	; 0x2c
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	80fb      	strh	r3, [r7, #6]
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d9e7      	bls.n	8006ba4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	08041dd8 	.word	0x08041dd8
 8006be4:	20007a4c 	.word	0x20007a4c

08006be8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01a      	beq.n	8006c34 <do_memp_malloc_pool+0x4c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	889a      	ldrh	r2, [r3, #4]
 8006c0e:	3201      	adds	r2, #1
 8006c10:	b292      	uxth	r2, r2
 8006c12:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	889a      	ldrh	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	88db      	ldrh	r3, [r3, #6]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d905      	bls.n	8006c30 <do_memp_malloc_pool+0x48>
      desc->stats->max = desc->stats->used;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	8892      	ldrh	r2, [r2, #4]
 8006c2e:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	e006      	b.n	8006c42 <do_memp_malloc_pool+0x5a>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	881a      	ldrh	r2, [r3, #0]
 8006c3a:	3201      	adds	r2, #1
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d908      	bls.n	8006c72 <memp_malloc+0x22>
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <memp_malloc+0x3c>)
 8006c62:	f240 1257 	movw	r2, #343	; 0x157
 8006c66:	490a      	ldr	r1, [pc, #40]	; (8006c90 <memp_malloc+0x40>)
 8006c68:	480a      	ldr	r0, [pc, #40]	; (8006c94 <memp_malloc+0x44>)
 8006c6a:	f00c fcf1 	bl	8013650 <iprintf>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e008      	b.n	8006c84 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	4a08      	ldr	r2, [pc, #32]	; (8006c98 <memp_malloc+0x48>)
 8006c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff ffb4 	bl	8006be8 <do_memp_malloc_pool>
 8006c80:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006c82:	68fb      	ldr	r3, [r7, #12]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	08014f74 	.word	0x08014f74
 8006c90:	08014fe0 	.word	0x08014fe0
 8006c94:	08014fb8 	.word	0x08014fb8
 8006c98:	08041dd8 	.word	0x08041dd8

08006c9c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	889a      	ldrh	r2, [r3, #4]
 8006cb0:	3a01      	subs	r2, #1
 8006cb2:	b292      	uxth	r2, r2
 8006cb4:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4603      	mov	r3, r0
 8006cdc:	6039      	str	r1, [r7, #0]
 8006cde:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d907      	bls.n	8006cf6 <memp_free+0x22>
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <memp_free+0x44>)
 8006ce8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006cec:	490b      	ldr	r1, [pc, #44]	; (8006d1c <memp_free+0x48>)
 8006cee:	480c      	ldr	r0, [pc, #48]	; (8006d20 <memp_free+0x4c>)
 8006cf0:	f00c fcae 	bl	8013650 <iprintf>
 8006cf4:	e00c      	b.n	8006d10 <memp_free+0x3c>

  if (mem == NULL) {
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <memp_free+0x50>)
 8006d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff ffc8 	bl	8006c9c <do_memp_free_pool>
 8006d0c:	e000      	b.n	8006d10 <memp_free+0x3c>
    return;
 8006d0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	08014f74 	.word	0x08014f74
 8006d1c:	08015000 	.word	0x08015000
 8006d20:	08014fb8 	.word	0x08014fb8
 8006d24:	08041dd8 	.word	0x08041dd8

08006d28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006d2c:	bf00      	nop
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <netif_add+0x26>
 8006d4c:	4b5b      	ldr	r3, [pc, #364]	; (8006ebc <netif_add+0x184>)
 8006d4e:	f240 1227 	movw	r2, #295	; 0x127
 8006d52:	495b      	ldr	r1, [pc, #364]	; (8006ec0 <netif_add+0x188>)
 8006d54:	485b      	ldr	r0, [pc, #364]	; (8006ec4 <netif_add+0x18c>)
 8006d56:	f00c fc7b 	bl	8013650 <iprintf>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e0a9      	b.n	8006eb2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d108      	bne.n	8006d76 <netif_add+0x3e>
 8006d64:	4b55      	ldr	r3, [pc, #340]	; (8006ebc <netif_add+0x184>)
 8006d66:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006d6a:	4957      	ldr	r1, [pc, #348]	; (8006ec8 <netif_add+0x190>)
 8006d6c:	4855      	ldr	r0, [pc, #340]	; (8006ec4 <netif_add+0x18c>)
 8006d6e:	f00c fc6f 	bl	8013650 <iprintf>
 8006d72:	2300      	movs	r3, #0
 8006d74:	e09d      	b.n	8006eb2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006d7c:	4b53      	ldr	r3, [pc, #332]	; (8006ecc <netif_add+0x194>)
 8006d7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006d86:	4b51      	ldr	r3, [pc, #324]	; (8006ecc <netif_add+0x194>)
 8006d88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006d90:	4b4e      	ldr	r3, [pc, #312]	; (8006ecc <netif_add+0x194>)
 8006d92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4a49      	ldr	r2, [pc, #292]	; (8006ed0 <netif_add+0x198>)
 8006daa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3324      	adds	r3, #36	; 0x24
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f00c fc3c 	bl	8013640 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a3a      	ldr	r2, [r7, #32]
 8006dd2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006dd4:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <netif_add+0x19c>)
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	68b9      	ldr	r1, [r7, #8]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f914 	bl	8007018 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	4798      	blx	r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <netif_add+0xc8>
    return NULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e058      	b.n	8006eb2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e06:	2bff      	cmp	r3, #255	; 0xff
 8006e08:	d103      	bne.n	8006e12 <netif_add+0xda>
        netif->num = 0;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006e16:	4b30      	ldr	r3, [pc, #192]	; (8006ed8 <netif_add+0x1a0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	e02b      	b.n	8006e76 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d106      	bne.n	8006e34 <netif_add+0xfc>
 8006e26:	4b25      	ldr	r3, [pc, #148]	; (8006ebc <netif_add+0x184>)
 8006e28:	f240 128b 	movw	r2, #395	; 0x18b
 8006e2c:	492b      	ldr	r1, [pc, #172]	; (8006edc <netif_add+0x1a4>)
 8006e2e:	4825      	ldr	r0, [pc, #148]	; (8006ec4 <netif_add+0x18c>)
 8006e30:	f00c fc0e 	bl	8013650 <iprintf>
        num_netifs++;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3301      	adds	r3, #1
 8006e38:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2bff      	cmp	r3, #255	; 0xff
 8006e3e:	dd06      	ble.n	8006e4e <netif_add+0x116>
 8006e40:	4b1e      	ldr	r3, [pc, #120]	; (8006ebc <netif_add+0x184>)
 8006e42:	f240 128d 	movw	r2, #397	; 0x18d
 8006e46:	4926      	ldr	r1, [pc, #152]	; (8006ee0 <netif_add+0x1a8>)
 8006e48:	481e      	ldr	r0, [pc, #120]	; (8006ec4 <netif_add+0x18c>)
 8006e4a:	f00c fc01 	bl	8013650 <iprintf>
        if (netif2->num == netif->num) {
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d108      	bne.n	8006e70 <netif_add+0x138>
          netif->num++;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e64:	3301      	adds	r3, #1
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8006e6e:	e005      	b.n	8006e7c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1d0      	bne.n	8006e1e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1be      	bne.n	8006e00 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e88:	2bfe      	cmp	r3, #254	; 0xfe
 8006e8a:	d103      	bne.n	8006e94 <netif_add+0x15c>
    netif_num = 0;
 8006e8c:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <netif_add+0x19c>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	e006      	b.n	8006ea2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <netif_add+0x19c>)
 8006ea0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <netif_add+0x1a0>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006eaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <netif_add+0x1a0>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	0801501c 	.word	0x0801501c
 8006ec0:	080150b0 	.word	0x080150b0
 8006ec4:	0801506c 	.word	0x0801506c
 8006ec8:	080150cc 	.word	0x080150cc
 8006ecc:	08041e4c 	.word	0x08041e4c
 8006ed0:	0800722b 	.word	0x0800722b
 8006ed4:	20000594 	.word	0x20000594
 8006ed8:	20007a40 	.word	0x20007a40
 8006edc:	080150f0 	.word	0x080150f0
 8006ee0:	08015104 	.word	0x08015104

08006ee4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f002 fd83 	bl	80099fc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f007 ff2f 	bl	800ed5c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <netif_do_set_ipaddr+0x20>
 8006f1a:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <netif_do_set_ipaddr+0x88>)
 8006f1c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006f20:	491c      	ldr	r1, [pc, #112]	; (8006f94 <netif_do_set_ipaddr+0x8c>)
 8006f22:	481d      	ldr	r0, [pc, #116]	; (8006f98 <netif_do_set_ipaddr+0x90>)
 8006f24:	f00c fb94 	bl	8013650 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <netif_do_set_ipaddr+0x34>
 8006f2e:	4b18      	ldr	r3, [pc, #96]	; (8006f90 <netif_do_set_ipaddr+0x88>)
 8006f30:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006f34:	4917      	ldr	r1, [pc, #92]	; (8006f94 <netif_do_set_ipaddr+0x8c>)
 8006f36:	4818      	ldr	r0, [pc, #96]	; (8006f98 <netif_do_set_ipaddr+0x90>)
 8006f38:	f00c fb8a 	bl	8013650 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3304      	adds	r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d01c      	beq.n	8006f84 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3304      	adds	r3, #4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006f5a:	f107 0314 	add.w	r3, r7, #20
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff ffbf 	bl	8006ee4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <netif_do_set_ipaddr+0x6a>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	e000      	b.n	8006f74 <netif_do_set_ipaddr+0x6c>
 8006f72:	2300      	movs	r3, #0
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006f78:	2101      	movs	r1, #1
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f8d2 	bl	8007124 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	0801501c 	.word	0x0801501c
 8006f94:	08015134 	.word	0x08015134
 8006f98:	0801506c 	.word	0x0801506c

08006f9c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d00a      	beq.n	8006fcc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <netif_do_set_netmask+0x26>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	e000      	b.n	8006fc4 <netif_do_set_netmask+0x28>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	330c      	adds	r3, #12
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d00a      	beq.n	800700a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <netif_do_set_gw+0x26>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	e000      	b.n	8007002 <netif_do_set_gw+0x28>
 8007000:	2300      	movs	r3, #0
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007034:	4b1c      	ldr	r3, [pc, #112]	; (80070a8 <netif_set_addr+0x90>)
 8007036:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800703e:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <netif_set_addr+0x90>)
 8007040:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007048:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <netif_set_addr+0x90>)
 800704a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <netif_set_addr+0x42>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <netif_set_addr+0x46>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <netif_set_addr+0x48>
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d006      	beq.n	8007076 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007068:	f107 0310 	add.w	r3, r7, #16
 800706c:	461a      	mov	r2, r3
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f7ff ff49 	bl	8006f08 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007076:	69fa      	ldr	r2, [r7, #28]
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f7ff ff8e 	bl	8006f9c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f7ff ffa8 	bl	8006fda <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	461a      	mov	r2, r3
 8007096:	68b9      	ldr	r1, [r7, #8]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7ff ff35 	bl	8006f08 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800709e:	bf00      	nop
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	08041e4c 	.word	0x08041e4c

080070ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80070b4:	4a04      	ldr	r2, [pc, #16]	; (80070c8 <netif_set_default+0x1c>)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20007a44 	.word	0x20007a44

080070cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d107      	bne.n	80070ea <netif_set_up+0x1e>
 80070da:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <netif_set_up+0x4c>)
 80070dc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80070e0:	490e      	ldr	r1, [pc, #56]	; (800711c <netif_set_up+0x50>)
 80070e2:	480f      	ldr	r0, [pc, #60]	; (8007120 <netif_set_up+0x54>)
 80070e4:	f00c fab4 	bl	8013650 <iprintf>
 80070e8:	e013      	b.n	8007112 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10c      	bne.n	8007112 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	b2da      	uxtb	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800710a:	2103      	movs	r1, #3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f809 	bl	8007124 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	0801501c 	.word	0x0801501c
 800711c:	080151a4 	.word	0x080151a4
 8007120:	0801506c 	.word	0x0801506c

08007124 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <netif_issue_reports+0x20>
 8007136:	4b18      	ldr	r3, [pc, #96]	; (8007198 <netif_issue_reports+0x74>)
 8007138:	f240 326d 	movw	r2, #877	; 0x36d
 800713c:	4917      	ldr	r1, [pc, #92]	; (800719c <netif_issue_reports+0x78>)
 800713e:	4818      	ldr	r0, [pc, #96]	; (80071a0 <netif_issue_reports+0x7c>)
 8007140:	f00c fa86 	bl	8013650 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01e      	beq.n	8007190 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007158:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800715c:	2b00      	cmp	r3, #0
 800715e:	d017      	beq.n	8007190 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d013      	beq.n	8007192 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3304      	adds	r3, #4
 800716e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00e      	beq.n	8007192 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d007      	beq.n	8007192 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3304      	adds	r3, #4
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f00a fbef 	bl	801196c <etharp_request>
 800718e:	e000      	b.n	8007192 <netif_issue_reports+0x6e>
    return;
 8007190:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	0801501c 	.word	0x0801501c
 800719c:	080151c0 	.word	0x080151c0
 80071a0:	0801506c 	.word	0x0801506c

080071a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <netif_set_down+0x1e>
 80071b2:	4b12      	ldr	r3, [pc, #72]	; (80071fc <netif_set_down+0x58>)
 80071b4:	f240 329b 	movw	r2, #923	; 0x39b
 80071b8:	4911      	ldr	r1, [pc, #68]	; (8007200 <netif_set_down+0x5c>)
 80071ba:	4812      	ldr	r0, [pc, #72]	; (8007204 <netif_set_down+0x60>)
 80071bc:	f00c fa48 	bl	8013650 <iprintf>
 80071c0:	e019      	b.n	80071f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d012      	beq.n	80071f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80071e8:	f003 0308 	and.w	r3, r3, #8
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f009 ff33 	bl	801105c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	0801501c 	.word	0x0801501c
 8007200:	080151e4 	.word	0x080151e4
 8007204:	0801506c 	.word	0x0801506c

08007208 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	61da      	str	r2, [r3, #28]
  }
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007236:	f06f 030b 	mvn.w	r3, #11
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
	...

08007248 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d013      	beq.n	8007280 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007258:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <netif_get_by_index+0x48>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e00c      	b.n	800727a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007266:	3301      	adds	r3, #1
 8007268:	b2db      	uxtb	r3, r3
 800726a:	79fa      	ldrb	r2, [r7, #7]
 800726c:	429a      	cmp	r2, r3
 800726e:	d101      	bne.n	8007274 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	e006      	b.n	8007282 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ef      	bne.n	8007260 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20007a40 	.word	0x20007a40

08007294 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800729a:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <pbuf_free_ooseq+0x38>)
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <pbuf_free_ooseq+0x3c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	e00a      	b.n	80072be <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d003      	beq.n	80072b8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f002 fbe1 	bl	8009a78 <tcp_free_ooseq>
      return;
 80072b6:	e005      	b.n	80072c4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f1      	bne.n	80072a8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20007a48 	.word	0x20007a48
 80072d0:	20007b28 	.word	0x20007b28

080072d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80072d8:	4b03      	ldr	r3, [pc, #12]	; (80072e8 <pbuf_pool_is_empty+0x14>)
 80072da:	2201      	movs	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80072de:	bf00      	nop
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20007a48 	.word	0x20007a48

080072ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	4611      	mov	r1, r2
 80072f8:	461a      	mov	r2, r3
 80072fa:	460b      	mov	r3, r1
 80072fc:	80fb      	strh	r3, [r7, #6]
 80072fe:	4613      	mov	r3, r2
 8007300:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	88fa      	ldrh	r2, [r7, #6]
 8007312:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	88ba      	ldrh	r2, [r7, #4]
 8007318:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800731a:	8b3b      	ldrh	r3, [r7, #24]
 800731c:	b2da      	uxtb	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	7f3a      	ldrb	r2, [r7, #28]
 8007326:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2201      	movs	r2, #1
 800732c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	73da      	strb	r2, [r3, #15]
}
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08c      	sub	sp, #48	; 0x30
 8007344:	af02      	add	r7, sp, #8
 8007346:	4603      	mov	r3, r0
 8007348:	71fb      	strb	r3, [r7, #7]
 800734a:	460b      	mov	r3, r1
 800734c:	80bb      	strh	r3, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007356:	887b      	ldrh	r3, [r7, #2]
 8007358:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800735c:	d067      	beq.n	800742e <pbuf_alloc+0xee>
 800735e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007362:	f300 808e 	bgt.w	8007482 <pbuf_alloc+0x142>
 8007366:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800736a:	d010      	beq.n	800738e <pbuf_alloc+0x4e>
 800736c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007370:	f300 8087 	bgt.w	8007482 <pbuf_alloc+0x142>
 8007374:	2b01      	cmp	r3, #1
 8007376:	d002      	beq.n	800737e <pbuf_alloc+0x3e>
 8007378:	2b41      	cmp	r3, #65	; 0x41
 800737a:	f040 8082 	bne.w	8007482 <pbuf_alloc+0x142>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800737e:	887a      	ldrh	r2, [r7, #2]
 8007380:	88bb      	ldrh	r3, [r7, #4]
 8007382:	4619      	mov	r1, r3
 8007384:	2000      	movs	r0, #0
 8007386:	f000 f893 	bl	80074b0 <pbuf_alloc_reference>
 800738a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800738c:	e082      	b.n	8007494 <pbuf_alloc+0x154>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007396:	88bb      	ldrh	r3, [r7, #4]
 8007398:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800739a:	2008      	movs	r0, #8
 800739c:	f7ff fc58 	bl	8006c50 <memp_malloc>
 80073a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d109      	bne.n	80073bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80073a8:	f7ff ff94 	bl	80072d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80073b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073b4:	f000 fa64 	bl	8007880 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	e06c      	b.n	8007496 <pbuf_alloc+0x156>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80073bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073be:	f5c3 7313 	rsb	r3, r3, #588	; 0x24c
 80073c2:	3302      	adds	r3, #2
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8b7a      	ldrh	r2, [r7, #26]
 80073c8:	4293      	cmp	r3, r2
 80073ca:	bf28      	it	cs
 80073cc:	4613      	movcs	r3, r2
 80073ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80073d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073d2:	3310      	adds	r3, #16
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	18d1      	adds	r1, r2, r3
 80073d8:	89f8      	ldrh	r0, [r7, #14]
 80073da:	8b7a      	ldrh	r2, [r7, #26]
 80073dc:	2300      	movs	r3, #0
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	887b      	ldrh	r3, [r7, #2]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4603      	mov	r3, r0
 80073e6:	6938      	ldr	r0, [r7, #16]
 80073e8:	f7ff ff80 	bl	80072ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80073ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073ee:	f240 224e 	movw	r2, #590	; 0x24e
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d106      	bne.n	8007404 <pbuf_alloc+0xc4>
 80073f6:	4b2a      	ldr	r3, [pc, #168]	; (80074a0 <pbuf_alloc+0x160>)
 80073f8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80073fc:	4929      	ldr	r1, [pc, #164]	; (80074a4 <pbuf_alloc+0x164>)
 80073fe:	482a      	ldr	r0, [pc, #168]	; (80074a8 <pbuf_alloc+0x168>)
 8007400:	f00c f926 	bl	8013650 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	2b00      	cmp	r3, #0
 8007408:	d102      	bne.n	8007410 <pbuf_alloc+0xd0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
 800740e:	e002      	b.n	8007416 <pbuf_alloc+0xd6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800741a:	8b7a      	ldrh	r2, [r7, #26]
 800741c:	89fb      	ldrh	r3, [r7, #14]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007426:	8b7b      	ldrh	r3, [r7, #26]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1b6      	bne.n	800739a <pbuf_alloc+0x5a>
      break;
 800742c:	e032      	b.n	8007494 <pbuf_alloc+0x154>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800742e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007430:	88bb      	ldrh	r3, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007436:	8b3b      	ldrh	r3, [r7, #24]
 8007438:	3310      	adds	r3, #16
 800743a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800743c:	8b3a      	ldrh	r2, [r7, #24]
 800743e:	88bb      	ldrh	r3, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d303      	bcc.n	800744c <pbuf_alloc+0x10c>
 8007444:	8afa      	ldrh	r2, [r7, #22]
 8007446:	88bb      	ldrh	r3, [r7, #4]
 8007448:	429a      	cmp	r2, r3
 800744a:	d201      	bcs.n	8007450 <pbuf_alloc+0x110>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 800744c:	2300      	movs	r3, #0
 800744e:	e022      	b.n	8007496 <pbuf_alloc+0x156>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007450:	8afb      	ldrh	r3, [r7, #22]
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fa54 	bl	8006900 <mem_malloc>
 8007458:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <pbuf_alloc+0x124>
        return NULL;
 8007460:	2300      	movs	r3, #0
 8007462:	e018      	b.n	8007496 <pbuf_alloc+0x156>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007466:	3310      	adds	r3, #16
 8007468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746a:	18d1      	adds	r1, r2, r3
 800746c:	88b8      	ldrh	r0, [r7, #4]
 800746e:	88ba      	ldrh	r2, [r7, #4]
 8007470:	2300      	movs	r3, #0
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	887b      	ldrh	r3, [r7, #2]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	4603      	mov	r3, r0
 800747a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800747c:	f7ff ff36 	bl	80072ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007480:	e008      	b.n	8007494 <pbuf_alloc+0x154>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007482:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <pbuf_alloc+0x160>)
 8007484:	f240 1227 	movw	r2, #295	; 0x127
 8007488:	4908      	ldr	r1, [pc, #32]	; (80074ac <pbuf_alloc+0x16c>)
 800748a:	4807      	ldr	r0, [pc, #28]	; (80074a8 <pbuf_alloc+0x168>)
 800748c:	f00c f8e0 	bl	8013650 <iprintf>
      return NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	e000      	b.n	8007496 <pbuf_alloc+0x156>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007496:	4618      	mov	r0, r3
 8007498:	3728      	adds	r7, #40	; 0x28
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	0801524c 	.word	0x0801524c
 80074a4:	0801527c 	.word	0x0801527c
 80074a8:	080152b0 	.word	0x080152b0
 80074ac:	080152d8 	.word	0x080152d8

080074b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	807b      	strh	r3, [r7, #2]
 80074bc:	4613      	mov	r3, r2
 80074be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80074c0:	883b      	ldrh	r3, [r7, #0]
 80074c2:	2b41      	cmp	r3, #65	; 0x41
 80074c4:	d009      	beq.n	80074da <pbuf_alloc_reference+0x2a>
 80074c6:	883b      	ldrh	r3, [r7, #0]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d006      	beq.n	80074da <pbuf_alloc_reference+0x2a>
 80074cc:	4b0f      	ldr	r3, [pc, #60]	; (800750c <pbuf_alloc_reference+0x5c>)
 80074ce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80074d2:	490f      	ldr	r1, [pc, #60]	; (8007510 <pbuf_alloc_reference+0x60>)
 80074d4:	480f      	ldr	r0, [pc, #60]	; (8007514 <pbuf_alloc_reference+0x64>)
 80074d6:	f00c f8bb 	bl	8013650 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80074da:	2007      	movs	r0, #7
 80074dc:	f7ff fbb8 	bl	8006c50 <memp_malloc>
 80074e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e00b      	b.n	8007504 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80074ec:	8879      	ldrh	r1, [r7, #2]
 80074ee:	887a      	ldrh	r2, [r7, #2]
 80074f0:	2300      	movs	r3, #0
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	883b      	ldrh	r3, [r7, #0]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	460b      	mov	r3, r1
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fef5 	bl	80072ec <pbuf_init_alloced_pbuf>
  return p;
 8007502:	68fb      	ldr	r3, [r7, #12]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	0801524c 	.word	0x0801524c
 8007510:	080152f4 	.word	0x080152f4
 8007514:	080152b0 	.word	0x080152b0

08007518 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af02      	add	r7, sp, #8
 800751e:	607b      	str	r3, [r7, #4]
 8007520:	4603      	mov	r3, r0
 8007522:	73fb      	strb	r3, [r7, #15]
 8007524:	460b      	mov	r3, r1
 8007526:	81bb      	strh	r3, [r7, #12]
 8007528:	4613      	mov	r3, r2
 800752a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007530:	8a7a      	ldrh	r2, [r7, #18]
 8007532:	89bb      	ldrh	r3, [r7, #12]
 8007534:	441a      	add	r2, r3
 8007536:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007538:	429a      	cmp	r2, r3
 800753a:	d901      	bls.n	8007540 <pbuf_alloced_custom+0x28>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800753c:	2300      	movs	r3, #0
 800753e:	e015      	b.n	800756c <pbuf_alloced_custom+0x54>
  }

  if (payload_mem != NULL) {
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d004      	beq.n	8007550 <pbuf_alloced_custom+0x38>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007546:	8a7b      	ldrh	r3, [r7, #18]
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	4413      	add	r3, r2
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e001      	b.n	8007554 <pbuf_alloced_custom+0x3c>
  } else {
    payload = NULL;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	89b9      	ldrh	r1, [r7, #12]
 8007558:	89ba      	ldrh	r2, [r7, #12]
 800755a:	2302      	movs	r3, #2
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	897b      	ldrh	r3, [r7, #10]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	460b      	mov	r3, r1
 8007564:	6979      	ldr	r1, [r7, #20]
 8007566:	f7ff fec1 	bl	80072ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800756a:	687b      	ldr	r3, [r7, #4]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d106      	bne.n	8007594 <pbuf_realloc+0x20>
 8007586:	4b3a      	ldr	r3, [pc, #232]	; (8007670 <pbuf_realloc+0xfc>)
 8007588:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800758c:	4939      	ldr	r1, [pc, #228]	; (8007674 <pbuf_realloc+0x100>)
 800758e:	483a      	ldr	r0, [pc, #232]	; (8007678 <pbuf_realloc+0x104>)
 8007590:	f00c f85e 	bl	8013650 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	891b      	ldrh	r3, [r3, #8]
 8007598:	887a      	ldrh	r2, [r7, #2]
 800759a:	429a      	cmp	r2, r3
 800759c:	d263      	bcs.n	8007666 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	891a      	ldrh	r2, [r3, #8]
 80075a2:	887b      	ldrh	r3, [r7, #2]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80075a8:	887b      	ldrh	r3, [r7, #2]
 80075aa:	817b      	strh	r3, [r7, #10]
  q = p;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80075b0:	e018      	b.n	80075e4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	895b      	ldrh	r3, [r3, #10]
 80075b6:	897a      	ldrh	r2, [r7, #10]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	891a      	ldrh	r2, [r3, #8]
 80075c0:	893b      	ldrh	r3, [r7, #8]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <pbuf_realloc+0x70>
 80075d6:	4b26      	ldr	r3, [pc, #152]	; (8007670 <pbuf_realloc+0xfc>)
 80075d8:	f240 12af 	movw	r2, #431	; 0x1af
 80075dc:	4927      	ldr	r1, [pc, #156]	; (800767c <pbuf_realloc+0x108>)
 80075de:	4826      	ldr	r0, [pc, #152]	; (8007678 <pbuf_realloc+0x104>)
 80075e0:	f00c f836 	bl	8013650 <iprintf>
  while (rem_len > q->len) {
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	895b      	ldrh	r3, [r3, #10]
 80075e8:	897a      	ldrh	r2, [r7, #10]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d8e1      	bhi.n	80075b2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	7b1b      	ldrb	r3, [r3, #12]
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d121      	bne.n	800763e <pbuf_realloc+0xca>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	895b      	ldrh	r3, [r3, #10]
 80075fe:	897a      	ldrh	r2, [r7, #10]
 8007600:	429a      	cmp	r2, r3
 8007602:	d01c      	beq.n	800763e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	7b5b      	ldrb	r3, [r3, #13]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d116      	bne.n	800763e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	b29a      	uxth	r2, r3
 800761a:	897b      	ldrh	r3, [r7, #10]
 800761c:	4413      	add	r3, r2
 800761e:	b29b      	uxth	r3, r3
 8007620:	4619      	mov	r1, r3
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7ff f852 	bl	80066cc <mem_trim>
 8007628:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <pbuf_realloc+0xca>
 8007630:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <pbuf_realloc+0xfc>)
 8007632:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007636:	4912      	ldr	r1, [pc, #72]	; (8007680 <pbuf_realloc+0x10c>)
 8007638:	480f      	ldr	r0, [pc, #60]	; (8007678 <pbuf_realloc+0x104>)
 800763a:	f00c f809 	bl	8013650 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	897a      	ldrh	r2, [r7, #10]
 8007642:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	895a      	ldrh	r2, [r3, #10]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d004      	beq.n	800765e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f000 f911 	bl	8007880 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e000      	b.n	8007668 <pbuf_realloc+0xf4>
    return;
 8007666:	bf00      	nop

}
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	0801524c 	.word	0x0801524c
 8007674:	08015308 	.word	0x08015308
 8007678:	080152b0 	.word	0x080152b0
 800767c:	08015320 	.word	0x08015320
 8007680:	08015338 	.word	0x08015338

08007684 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <pbuf_add_header_impl+0x22>
 8007698:	4b2b      	ldr	r3, [pc, #172]	; (8007748 <pbuf_add_header_impl+0xc4>)
 800769a:	f240 12df 	movw	r2, #479	; 0x1df
 800769e:	492b      	ldr	r1, [pc, #172]	; (800774c <pbuf_add_header_impl+0xc8>)
 80076a0:	482b      	ldr	r0, [pc, #172]	; (8007750 <pbuf_add_header_impl+0xcc>)
 80076a2:	f00b ffd5 	bl	8013650 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <pbuf_add_header_impl+0x30>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b2:	d301      	bcc.n	80076b8 <pbuf_add_header_impl+0x34>
    return 1;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e043      	b.n	8007740 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <pbuf_add_header_impl+0x3e>
    return 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	e03e      	b.n	8007740 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	891a      	ldrh	r2, [r3, #8]
 80076ca:	8a7b      	ldrh	r3, [r7, #18]
 80076cc:	4413      	add	r3, r2
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	8a7a      	ldrh	r2, [r7, #18]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d901      	bls.n	80076da <pbuf_add_header_impl+0x56>
    return 1;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e032      	b.n	8007740 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7b1b      	ldrb	r3, [r3, #12]
 80076de:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80076e0:	8a3b      	ldrh	r3, [r7, #16]
 80076e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00c      	beq.n	8007704 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	425b      	negs	r3, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3310      	adds	r3, #16
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d20d      	bcs.n	800771c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007700:	2301      	movs	r3, #1
 8007702:	e01d      	b.n	8007740 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d006      	beq.n	8007718 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	425b      	negs	r3, r3
 8007712:	4413      	add	r3, r2
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	e001      	b.n	800771c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007718:	2301      	movs	r3, #1
 800771a:	e011      	b.n	8007740 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	895a      	ldrh	r2, [r3, #10]
 8007726:	8a7b      	ldrh	r3, [r7, #18]
 8007728:	4413      	add	r3, r2
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	891a      	ldrh	r2, [r3, #8]
 8007734:	8a7b      	ldrh	r3, [r7, #18]
 8007736:	4413      	add	r3, r2
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	811a      	strh	r2, [r3, #8]


  return 0;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	0801524c 	.word	0x0801524c
 800774c:	08015354 	.word	0x08015354
 8007750:	080152b0 	.word	0x080152b0

08007754 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800775e:	2200      	movs	r2, #0
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff ff8e 	bl	8007684 <pbuf_add_header_impl>
 8007768:	4603      	mov	r3, r0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <pbuf_remove_header+0x1e>
 8007784:	4b20      	ldr	r3, [pc, #128]	; (8007808 <pbuf_remove_header+0x94>)
 8007786:	f240 224b 	movw	r2, #587	; 0x24b
 800778a:	4920      	ldr	r1, [pc, #128]	; (800780c <pbuf_remove_header+0x98>)
 800778c:	4820      	ldr	r0, [pc, #128]	; (8007810 <pbuf_remove_header+0x9c>)
 800778e:	f00b ff5f 	bl	8013650 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <pbuf_remove_header+0x2c>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779e:	d301      	bcc.n	80077a4 <pbuf_remove_header+0x30>
    return 1;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e02c      	b.n	80077fe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <pbuf_remove_header+0x3a>
    return 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e027      	b.n	80077fe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	895b      	ldrh	r3, [r3, #10]
 80077b6:	89fa      	ldrh	r2, [r7, #14]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d908      	bls.n	80077ce <pbuf_remove_header+0x5a>
 80077bc:	4b12      	ldr	r3, [pc, #72]	; (8007808 <pbuf_remove_header+0x94>)
 80077be:	f240 2255 	movw	r2, #597	; 0x255
 80077c2:	4914      	ldr	r1, [pc, #80]	; (8007814 <pbuf_remove_header+0xa0>)
 80077c4:	4812      	ldr	r0, [pc, #72]	; (8007810 <pbuf_remove_header+0x9c>)
 80077c6:	f00b ff43 	bl	8013650 <iprintf>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e017      	b.n	80077fe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	441a      	add	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	895a      	ldrh	r2, [r3, #10]
 80077e4:	89fb      	ldrh	r3, [r7, #14]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	891a      	ldrh	r2, [r3, #8]
 80077f2:	89fb      	ldrh	r3, [r7, #14]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	0801524c 	.word	0x0801524c
 800780c:	08015354 	.word	0x08015354
 8007810:	080152b0 	.word	0x080152b0
 8007814:	08015360 	.word	0x08015360

08007818 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	807b      	strh	r3, [r7, #2]
 8007824:	4613      	mov	r3, r2
 8007826:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800782c:	2b00      	cmp	r3, #0
 800782e:	da08      	bge.n	8007842 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007830:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007834:	425b      	negs	r3, r3
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff ff9b 	bl	8007774 <pbuf_remove_header>
 800783e:	4603      	mov	r3, r0
 8007840:	e007      	b.n	8007852 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007842:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007846:	787a      	ldrb	r2, [r7, #1]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff ff1a 	bl	8007684 <pbuf_add_header_impl>
 8007850:	4603      	mov	r3, r0
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007866:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800786a:	2201      	movs	r2, #1
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff ffd2 	bl	8007818 <pbuf_header_impl>
 8007874:	4603      	mov	r3, r0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <pbuf_free+0x22>
 8007894:	4b38      	ldr	r3, [pc, #224]	; (8007978 <pbuf_free+0xf8>)
 8007896:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800789a:	4938      	ldr	r1, [pc, #224]	; (800797c <pbuf_free+0xfc>)
 800789c:	4838      	ldr	r0, [pc, #224]	; (8007980 <pbuf_free+0x100>)
 800789e:	f00b fed7 	bl	8013650 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e063      	b.n	800796e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80078aa:	e05c      	b.n	8007966 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	7b9b      	ldrb	r3, [r3, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <pbuf_free+0x42>
 80078b4:	4b30      	ldr	r3, [pc, #192]	; (8007978 <pbuf_free+0xf8>)
 80078b6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80078ba:	4932      	ldr	r1, [pc, #200]	; (8007984 <pbuf_free+0x104>)
 80078bc:	4830      	ldr	r0, [pc, #192]	; (8007980 <pbuf_free+0x100>)
 80078be:	f00b fec7 	bl	8013650 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7b9b      	ldrb	r3, [r3, #14]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	739a      	strb	r2, [r3, #14]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7b9b      	ldrb	r3, [r3, #14]
 80078d2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80078d4:	7dbb      	ldrb	r3, [r7, #22]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d143      	bne.n	8007962 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7b1b      	ldrb	r3, [r3, #12]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7b5b      	ldrb	r3, [r3, #13]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d011      	beq.n	800791a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <pbuf_free+0x90>
 8007902:	4b1d      	ldr	r3, [pc, #116]	; (8007978 <pbuf_free+0xf8>)
 8007904:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007908:	491f      	ldr	r1, [pc, #124]	; (8007988 <pbuf_free+0x108>)
 800790a:	481d      	ldr	r0, [pc, #116]	; (8007980 <pbuf_free+0x100>)
 800790c:	f00b fea0 	bl	8013650 <iprintf>
        pc->custom_free_function(p);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
 8007918:	e01d      	b.n	8007956 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d104      	bne.n	800792a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	2008      	movs	r0, #8
 8007924:	f7ff f9d6 	bl	8006cd4 <memp_free>
 8007928:	e015      	b.n	8007956 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800792a:	7bfb      	ldrb	r3, [r7, #15]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d104      	bne.n	800793a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	2007      	movs	r0, #7
 8007934:	f7ff f9ce 	bl	8006cd4 <memp_free>
 8007938:	e00d      	b.n	8007956 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d103      	bne.n	8007948 <pbuf_free+0xc8>
          mem_free(p);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7fe fe3d 	bl	80065c0 <mem_free>
 8007946:	e006      	b.n	8007956 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007948:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <pbuf_free+0xf8>)
 800794a:	f240 320f 	movw	r2, #783	; 0x30f
 800794e:	490f      	ldr	r1, [pc, #60]	; (800798c <pbuf_free+0x10c>)
 8007950:	480b      	ldr	r0, [pc, #44]	; (8007980 <pbuf_free+0x100>)
 8007952:	f00b fe7d 	bl	8013650 <iprintf>
        }
      }
      count++;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	3301      	adds	r3, #1
 800795a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	607b      	str	r3, [r7, #4]
 8007960:	e001      	b.n	8007966 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d19f      	bne.n	80078ac <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	0801524c 	.word	0x0801524c
 800797c:	08015354 	.word	0x08015354
 8007980:	080152b0 	.word	0x080152b0
 8007984:	08015380 	.word	0x08015380
 8007988:	08015398 	.word	0x08015398
 800798c:	080153bc 	.word	0x080153bc

08007990 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800799c:	e005      	b.n	80079aa <pbuf_clen+0x1a>
    ++len;
 800799e:	89fb      	ldrh	r3, [r7, #14]
 80079a0:	3301      	adds	r3, #1
 80079a2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f6      	bne.n	800799e <pbuf_clen+0xe>
  }
  return len;
 80079b0:	89fb      	ldrh	r3, [r7, #14]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
	...

080079c0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d010      	beq.n	80079f0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7b9b      	ldrb	r3, [r3, #14]
 80079d2:	3301      	adds	r3, #1
 80079d4:	b2da      	uxtb	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7b9b      	ldrb	r3, [r3, #14]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <pbuf_ref+0x30>
 80079e2:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <pbuf_ref+0x38>)
 80079e4:	f240 3242 	movw	r2, #834	; 0x342
 80079e8:	4904      	ldr	r1, [pc, #16]	; (80079fc <pbuf_ref+0x3c>)
 80079ea:	4805      	ldr	r0, [pc, #20]	; (8007a00 <pbuf_ref+0x40>)
 80079ec:	f00b fe30 	bl	8013650 <iprintf>
  }
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	0801524c 	.word	0x0801524c
 80079fc:	080153d0 	.word	0x080153d0
 8007a00:	080152b0 	.word	0x080152b0

08007a04 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <pbuf_cat+0x16>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <pbuf_cat+0x26>
 8007a1a:	4b20      	ldr	r3, [pc, #128]	; (8007a9c <pbuf_cat+0x98>)
 8007a1c:	f240 3259 	movw	r2, #857	; 0x359
 8007a20:	491f      	ldr	r1, [pc, #124]	; (8007aa0 <pbuf_cat+0x9c>)
 8007a22:	4820      	ldr	r0, [pc, #128]	; (8007aa4 <pbuf_cat+0xa0>)
 8007a24:	f00b fe14 	bl	8013650 <iprintf>
 8007a28:	e034      	b.n	8007a94 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	e00a      	b.n	8007a46 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	891a      	ldrh	r2, [r3, #8]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	891b      	ldrh	r3, [r3, #8]
 8007a38:	4413      	add	r3, r2
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f0      	bne.n	8007a30 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	891a      	ldrh	r2, [r3, #8]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	895b      	ldrh	r3, [r3, #10]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d006      	beq.n	8007a68 <pbuf_cat+0x64>
 8007a5a:	4b10      	ldr	r3, [pc, #64]	; (8007a9c <pbuf_cat+0x98>)
 8007a5c:	f240 3262 	movw	r2, #866	; 0x362
 8007a60:	4911      	ldr	r1, [pc, #68]	; (8007aa8 <pbuf_cat+0xa4>)
 8007a62:	4810      	ldr	r0, [pc, #64]	; (8007aa4 <pbuf_cat+0xa0>)
 8007a64:	f00b fdf4 	bl	8013650 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d006      	beq.n	8007a7e <pbuf_cat+0x7a>
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <pbuf_cat+0x98>)
 8007a72:	f240 3263 	movw	r2, #867	; 0x363
 8007a76:	490d      	ldr	r1, [pc, #52]	; (8007aac <pbuf_cat+0xa8>)
 8007a78:	480a      	ldr	r0, [pc, #40]	; (8007aa4 <pbuf_cat+0xa0>)
 8007a7a:	f00b fde9 	bl	8013650 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	891a      	ldrh	r2, [r3, #8]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	891b      	ldrh	r3, [r3, #8]
 8007a86:	4413      	add	r3, r2
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	0801524c 	.word	0x0801524c
 8007aa0:	080153e4 	.word	0x080153e4
 8007aa4:	080152b0 	.word	0x080152b0
 8007aa8:	0801541c 	.word	0x0801541c
 8007aac:	0801544c 	.word	0x0801544c

08007ab0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff ffa1 	bl	8007a04 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007ac2:	6838      	ldr	r0, [r7, #0]
 8007ac4:	f7ff ff7c 	bl	80079c0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d008      	beq.n	8007afa <pbuf_copy+0x2a>
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <pbuf_copy+0x2a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	891a      	ldrh	r2, [r3, #8]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	891b      	ldrh	r3, [r3, #8]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d209      	bcs.n	8007b0e <pbuf_copy+0x3e>
 8007afa:	4b57      	ldr	r3, [pc, #348]	; (8007c58 <pbuf_copy+0x188>)
 8007afc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007b00:	4956      	ldr	r1, [pc, #344]	; (8007c5c <pbuf_copy+0x18c>)
 8007b02:	4857      	ldr	r0, [pc, #348]	; (8007c60 <pbuf_copy+0x190>)
 8007b04:	f00b fda4 	bl	8013650 <iprintf>
 8007b08:	f06f 030f 	mvn.w	r3, #15
 8007b0c:	e09f      	b.n	8007c4e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	895b      	ldrh	r3, [r3, #10]
 8007b12:	461a      	mov	r2, r3
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	895b      	ldrh	r3, [r3, #10]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	1acb      	subs	r3, r1, r3
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d306      	bcc.n	8007b34 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	895b      	ldrh	r3, [r3, #10]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e005      	b.n	8007b40 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	895b      	ldrh	r3, [r3, #10]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	18d0      	adds	r0, r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	4413      	add	r3, r2
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4619      	mov	r1, r3
 8007b54:	f00b fd4c 	bl	80135f0 <memcpy>
    offset_to += len;
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	895b      	ldrh	r3, [r3, #10]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d906      	bls.n	8007b82 <pbuf_copy+0xb2>
 8007b74:	4b38      	ldr	r3, [pc, #224]	; (8007c58 <pbuf_copy+0x188>)
 8007b76:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007b7a:	493a      	ldr	r1, [pc, #232]	; (8007c64 <pbuf_copy+0x194>)
 8007b7c:	4838      	ldr	r0, [pc, #224]	; (8007c60 <pbuf_copy+0x190>)
 8007b7e:	f00b fd67 	bl	8013650 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	895b      	ldrh	r3, [r3, #10]
 8007b86:	461a      	mov	r2, r3
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d906      	bls.n	8007b9c <pbuf_copy+0xcc>
 8007b8e:	4b32      	ldr	r3, [pc, #200]	; (8007c58 <pbuf_copy+0x188>)
 8007b90:	f240 32da 	movw	r2, #986	; 0x3da
 8007b94:	4934      	ldr	r1, [pc, #208]	; (8007c68 <pbuf_copy+0x198>)
 8007b96:	4832      	ldr	r0, [pc, #200]	; (8007c60 <pbuf_copy+0x190>)
 8007b98:	f00b fd5a 	bl	8013650 <iprintf>
    if (offset_from >= p_from->len) {
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	895b      	ldrh	r3, [r3, #10]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d304      	bcc.n	8007bb2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	895b      	ldrh	r3, [r3, #10]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d114      	bne.n	8007be8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10c      	bne.n	8007be8 <pbuf_copy+0x118>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d009      	beq.n	8007be8 <pbuf_copy+0x118>
 8007bd4:	4b20      	ldr	r3, [pc, #128]	; (8007c58 <pbuf_copy+0x188>)
 8007bd6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007bda:	4924      	ldr	r1, [pc, #144]	; (8007c6c <pbuf_copy+0x19c>)
 8007bdc:	4820      	ldr	r0, [pc, #128]	; (8007c60 <pbuf_copy+0x190>)
 8007bde:	f00b fd37 	bl	8013650 <iprintf>
 8007be2:	f06f 030f 	mvn.w	r3, #15
 8007be6:	e032      	b.n	8007c4e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d013      	beq.n	8007c16 <pbuf_copy+0x146>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	895a      	ldrh	r2, [r3, #10]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	891b      	ldrh	r3, [r3, #8]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d10d      	bne.n	8007c16 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <pbuf_copy+0x146>
 8007c02:	4b15      	ldr	r3, [pc, #84]	; (8007c58 <pbuf_copy+0x188>)
 8007c04:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007c08:	4919      	ldr	r1, [pc, #100]	; (8007c70 <pbuf_copy+0x1a0>)
 8007c0a:	4815      	ldr	r0, [pc, #84]	; (8007c60 <pbuf_copy+0x190>)
 8007c0c:	f00b fd20 	bl	8013650 <iprintf>
 8007c10:	f06f 0305 	mvn.w	r3, #5
 8007c14:	e01b      	b.n	8007c4e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d013      	beq.n	8007c44 <pbuf_copy+0x174>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	895a      	ldrh	r2, [r3, #10]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	891b      	ldrh	r3, [r3, #8]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d10d      	bne.n	8007c44 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d009      	beq.n	8007c44 <pbuf_copy+0x174>
 8007c30:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <pbuf_copy+0x188>)
 8007c32:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007c36:	490e      	ldr	r1, [pc, #56]	; (8007c70 <pbuf_copy+0x1a0>)
 8007c38:	4809      	ldr	r0, [pc, #36]	; (8007c60 <pbuf_copy+0x190>)
 8007c3a:	f00b fd09 	bl	8013650 <iprintf>
 8007c3e:	f06f 0305 	mvn.w	r3, #5
 8007c42:	e004      	b.n	8007c4e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f47f af61 	bne.w	8007b0e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	0801524c 	.word	0x0801524c
 8007c5c:	08015498 	.word	0x08015498
 8007c60:	080152b0 	.word	0x080152b0
 8007c64:	080154c8 	.word	0x080154c8
 8007c68:	080154e0 	.word	0x080154e0
 8007c6c:	080154fc 	.word	0x080154fc
 8007c70:	0801550c 	.word	0x0801550c

08007c74 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	461a      	mov	r2, r3
 8007c82:	460b      	mov	r3, r1
 8007c84:	80fb      	strh	r3, [r7, #6]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d108      	bne.n	8007caa <pbuf_copy_partial+0x36>
 8007c98:	4b2b      	ldr	r3, [pc, #172]	; (8007d48 <pbuf_copy_partial+0xd4>)
 8007c9a:	f240 420a 	movw	r2, #1034	; 0x40a
 8007c9e:	492b      	ldr	r1, [pc, #172]	; (8007d4c <pbuf_copy_partial+0xd8>)
 8007ca0:	482b      	ldr	r0, [pc, #172]	; (8007d50 <pbuf_copy_partial+0xdc>)
 8007ca2:	f00b fcd5 	bl	8013650 <iprintf>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e04a      	b.n	8007d40 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d108      	bne.n	8007cc2 <pbuf_copy_partial+0x4e>
 8007cb0:	4b25      	ldr	r3, [pc, #148]	; (8007d48 <pbuf_copy_partial+0xd4>)
 8007cb2:	f240 420b 	movw	r2, #1035	; 0x40b
 8007cb6:	4927      	ldr	r1, [pc, #156]	; (8007d54 <pbuf_copy_partial+0xe0>)
 8007cb8:	4825      	ldr	r0, [pc, #148]	; (8007d50 <pbuf_copy_partial+0xdc>)
 8007cba:	f00b fcc9 	bl	8013650 <iprintf>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e03e      	b.n	8007d40 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	61fb      	str	r3, [r7, #28]
 8007cc6:	e034      	b.n	8007d32 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007cc8:	88bb      	ldrh	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <pbuf_copy_partial+0x70>
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	895b      	ldrh	r3, [r3, #10]
 8007cd2:	88ba      	ldrh	r2, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d305      	bcc.n	8007ce4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	895b      	ldrh	r3, [r3, #10]
 8007cdc:	88ba      	ldrh	r2, [r7, #4]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	80bb      	strh	r3, [r7, #4]
 8007ce2:	e023      	b.n	8007d2c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	895a      	ldrh	r2, [r3, #10]
 8007ce8:	88bb      	ldrh	r3, [r7, #4]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007cee:	8b3a      	ldrh	r2, [r7, #24]
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d901      	bls.n	8007cfa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cfa:	8b7b      	ldrh	r3, [r7, #26]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	18d0      	adds	r0, r2, r3
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	88bb      	ldrh	r3, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	8b3a      	ldrh	r2, [r7, #24]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f00b fc70 	bl	80135f0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007d10:	8afa      	ldrh	r2, [r7, #22]
 8007d12:	8b3b      	ldrh	r3, [r7, #24]
 8007d14:	4413      	add	r3, r2
 8007d16:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007d18:	8b7a      	ldrh	r2, [r7, #26]
 8007d1a:	8b3b      	ldrh	r3, [r7, #24]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	8b3b      	ldrh	r3, [r7, #24]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	61fb      	str	r3, [r7, #28]
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <pbuf_copy_partial+0xca>
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1c4      	bne.n	8007cc8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007d3e:	8afb      	ldrh	r3, [r7, #22]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3720      	adds	r7, #32
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	0801524c 	.word	0x0801524c
 8007d4c:	08015538 	.word	0x08015538
 8007d50:	080152b0 	.word	0x080152b0
 8007d54:	08015558 	.word	0x08015558

08007d58 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	603a      	str	r2, [r7, #0]
 8007d62:	71fb      	strb	r3, [r7, #7]
 8007d64:	460b      	mov	r3, r1
 8007d66:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	8919      	ldrh	r1, [r3, #8]
 8007d6c:	88ba      	ldrh	r2, [r7, #4]
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff fae5 	bl	8007340 <pbuf_alloc>
 8007d76:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <pbuf_clone+0x2a>
    return NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e011      	b.n	8007da6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007d82:	6839      	ldr	r1, [r7, #0]
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff fea3 	bl	8007ad0 <pbuf_copy>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007d8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d006      	beq.n	8007da4 <pbuf_clone+0x4c>
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <pbuf_clone+0x58>)
 8007d98:	f240 5224 	movw	r2, #1316	; 0x524
 8007d9c:	4905      	ldr	r1, [pc, #20]	; (8007db4 <pbuf_clone+0x5c>)
 8007d9e:	4806      	ldr	r0, [pc, #24]	; (8007db8 <pbuf_clone+0x60>)
 8007da0:	f00b fc56 	bl	8013650 <iprintf>
  return q;
 8007da4:	68fb      	ldr	r3, [r7, #12]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	0801524c 	.word	0x0801524c
 8007db4:	08015664 	.word	0x08015664
 8007db8:	080152b0 	.word	0x080152b0

08007dbc <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8007dc0:	bf00      	nop
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007dd0:	f00b fc56 	bl	8013680 <rand>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	4b01      	ldr	r3, [pc, #4]	; (8007dec <tcp_init+0x20>)
 8007de6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007de8:	bf00      	nop
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000001a 	.word	0x2000001a

08007df0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	7d1b      	ldrb	r3, [r3, #20]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d105      	bne.n	8007e0c <tcp_free+0x1c>
 8007e00:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <tcp_free+0x2c>)
 8007e02:	22d4      	movs	r2, #212	; 0xd4
 8007e04:	4906      	ldr	r1, [pc, #24]	; (8007e20 <tcp_free+0x30>)
 8007e06:	4807      	ldr	r0, [pc, #28]	; (8007e24 <tcp_free+0x34>)
 8007e08:	f00b fc22 	bl	8013650 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	2001      	movs	r0, #1
 8007e10:	f7fe ff60 	bl	8006cd4 <memp_free>
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	080156f0 	.word	0x080156f0
 8007e20:	08015720 	.word	0x08015720
 8007e24:	08015734 	.word	0x08015734

08007e28 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	7d1b      	ldrb	r3, [r3, #20]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d105      	bne.n	8007e44 <tcp_free_listen+0x1c>
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <tcp_free_listen+0x2c>)
 8007e3a:	22df      	movs	r2, #223	; 0xdf
 8007e3c:	4906      	ldr	r1, [pc, #24]	; (8007e58 <tcp_free_listen+0x30>)
 8007e3e:	4807      	ldr	r0, [pc, #28]	; (8007e5c <tcp_free_listen+0x34>)
 8007e40:	f00b fc06 	bl	8013650 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	2002      	movs	r0, #2
 8007e48:	f7fe ff44 	bl	8006cd4 <memp_free>
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	080156f0 	.word	0x080156f0
 8007e58:	0801575c 	.word	0x0801575c
 8007e5c:	08015734 	.word	0x08015734

08007e60 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007e64:	f001 f85c 	bl	8008f20 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007e68:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <tcp_tmr+0x28>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <tcp_tmr+0x28>)
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <tcp_tmr+0x28>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007e80:	f000 fd0e 	bl	80088a0 <tcp_slowtmr>
  }
}
 8007e84:	bf00      	nop
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000595 	.word	0x20000595

08007e8c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <tcp_remove_listener+0x1c>
 8007e9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <tcp_remove_listener+0x48>)
 8007e9e:	22ff      	movs	r2, #255	; 0xff
 8007ea0:	490d      	ldr	r1, [pc, #52]	; (8007ed8 <tcp_remove_listener+0x4c>)
 8007ea2:	480e      	ldr	r0, [pc, #56]	; (8007edc <tcp_remove_listener+0x50>)
 8007ea4:	f00b fbd4 	bl	8013650 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	e00a      	b.n	8007ec4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d102      	bne.n	8007ebe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f1      	bne.n	8007eae <tcp_remove_listener+0x22>
    }
  }
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	080156f0 	.word	0x080156f0
 8007ed8:	08015778 	.word	0x08015778
 8007edc:	08015734 	.word	0x08015734

08007ee0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <tcp_listen_closed+0x1c>
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <tcp_listen_closed+0x60>)
 8007ef0:	f240 1211 	movw	r2, #273	; 0x111
 8007ef4:	4913      	ldr	r1, [pc, #76]	; (8007f44 <tcp_listen_closed+0x64>)
 8007ef6:	4814      	ldr	r0, [pc, #80]	; (8007f48 <tcp_listen_closed+0x68>)
 8007ef8:	f00b fbaa 	bl	8013650 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	7d1b      	ldrb	r3, [r3, #20]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d006      	beq.n	8007f12 <tcp_listen_closed+0x32>
 8007f04:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <tcp_listen_closed+0x60>)
 8007f06:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007f0a:	4910      	ldr	r1, [pc, #64]	; (8007f4c <tcp_listen_closed+0x6c>)
 8007f0c:	480e      	ldr	r0, [pc, #56]	; (8007f48 <tcp_listen_closed+0x68>)
 8007f0e:	f00b fb9f 	bl	8013650 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007f12:	2301      	movs	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	e00b      	b.n	8007f30 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007f18:	4a0d      	ldr	r2, [pc, #52]	; (8007f50 <tcp_listen_closed+0x70>)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff ffb1 	bl	8007e8c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d9f0      	bls.n	8007f18 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007f36:	bf00      	nop
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	080156f0 	.word	0x080156f0
 8007f44:	080157a0 	.word	0x080157a0
 8007f48:	08015734 	.word	0x08015734
 8007f4c:	080157ac 	.word	0x080157ac
 8007f50:	08041e14 	.word	0x08041e14

08007f54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007f54:	b5b0      	push	{r4, r5, r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af04      	add	r7, sp, #16
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <tcp_close_shutdown+0x20>
 8007f66:	4b63      	ldr	r3, [pc, #396]	; (80080f4 <tcp_close_shutdown+0x1a0>)
 8007f68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007f6c:	4962      	ldr	r1, [pc, #392]	; (80080f8 <tcp_close_shutdown+0x1a4>)
 8007f6e:	4863      	ldr	r0, [pc, #396]	; (80080fc <tcp_close_shutdown+0x1a8>)
 8007f70:	f00b fb6e 	bl	8013650 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d066      	beq.n	8008048 <tcp_close_shutdown+0xf4>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7d1b      	ldrb	r3, [r3, #20]
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d003      	beq.n	8007f8a <tcp_close_shutdown+0x36>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	7d1b      	ldrb	r3, [r3, #20]
 8007f86:	2b07      	cmp	r3, #7
 8007f88:	d15e      	bne.n	8008048 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d104      	bne.n	8007f9c <tcp_close_shutdown+0x48>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f9a:	d055      	beq.n	8008048 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	8b5b      	ldrh	r3, [r3, #26]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d106      	bne.n	8007fb6 <tcp_close_shutdown+0x62>
 8007fa8:	4b52      	ldr	r3, [pc, #328]	; (80080f4 <tcp_close_shutdown+0x1a0>)
 8007faa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007fae:	4954      	ldr	r1, [pc, #336]	; (8008100 <tcp_close_shutdown+0x1ac>)
 8007fb0:	4852      	ldr	r0, [pc, #328]	; (80080fc <tcp_close_shutdown+0x1a8>)
 8007fb2:	f00b fb4d 	bl	8013650 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007fbe:	687d      	ldr	r5, [r7, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	8ad2      	ldrh	r2, [r2, #22]
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	8b09      	ldrh	r1, [r1, #24]
 8007fcc:	9102      	str	r1, [sp, #8]
 8007fce:	9201      	str	r2, [sp, #4]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	462b      	mov	r3, r5
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	4601      	mov	r1, r0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f005 fe9f 	bl	800dd1c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fb96 	bl	8009710 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007fe4:	4b47      	ldr	r3, [pc, #284]	; (8008104 <tcp_close_shutdown+0x1b0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d105      	bne.n	8007ffa <tcp_close_shutdown+0xa6>
 8007fee:	4b45      	ldr	r3, [pc, #276]	; (8008104 <tcp_close_shutdown+0x1b0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	4a43      	ldr	r2, [pc, #268]	; (8008104 <tcp_close_shutdown+0x1b0>)
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	e013      	b.n	8008022 <tcp_close_shutdown+0xce>
 8007ffa:	4b42      	ldr	r3, [pc, #264]	; (8008104 <tcp_close_shutdown+0x1b0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e00c      	b.n	800801c <tcp_close_shutdown+0xc8>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	429a      	cmp	r2, r3
 800800a:	d104      	bne.n	8008016 <tcp_close_shutdown+0xc2>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	60da      	str	r2, [r3, #12]
 8008014:	e005      	b.n	8008022 <tcp_close_shutdown+0xce>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1ef      	bne.n	8008002 <tcp_close_shutdown+0xae>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	4b37      	ldr	r3, [pc, #220]	; (8008108 <tcp_close_shutdown+0x1b4>)
 800802a:	2201      	movs	r2, #1
 800802c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800802e:	4b37      	ldr	r3, [pc, #220]	; (800810c <tcp_close_shutdown+0x1b8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	429a      	cmp	r2, r3
 8008036:	d102      	bne.n	800803e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008038:	f004 f8b6 	bl	800c1a8 <tcp_trigger_input_pcb_close>
 800803c:	e002      	b.n	8008044 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fed6 	bl	8007df0 <tcp_free>
      }
      return ERR_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e050      	b.n	80080ea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7d1b      	ldrb	r3, [r3, #20]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d03b      	beq.n	80080c8 <tcp_close_shutdown+0x174>
 8008050:	2b02      	cmp	r3, #2
 8008052:	dc44      	bgt.n	80080de <tcp_close_shutdown+0x18a>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <tcp_close_shutdown+0x10a>
 8008058:	2b01      	cmp	r3, #1
 800805a:	d02a      	beq.n	80080b2 <tcp_close_shutdown+0x15e>
 800805c:	e03f      	b.n	80080de <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	8adb      	ldrh	r3, [r3, #22]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d021      	beq.n	80080aa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008066:	4b2a      	ldr	r3, [pc, #168]	; (8008110 <tcp_close_shutdown+0x1bc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d105      	bne.n	800807c <tcp_close_shutdown+0x128>
 8008070:	4b27      	ldr	r3, [pc, #156]	; (8008110 <tcp_close_shutdown+0x1bc>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	4a26      	ldr	r2, [pc, #152]	; (8008110 <tcp_close_shutdown+0x1bc>)
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	e013      	b.n	80080a4 <tcp_close_shutdown+0x150>
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <tcp_close_shutdown+0x1bc>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60bb      	str	r3, [r7, #8]
 8008082:	e00c      	b.n	800809e <tcp_close_shutdown+0x14a>
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	429a      	cmp	r2, r3
 800808c:	d104      	bne.n	8008098 <tcp_close_shutdown+0x144>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	e005      	b.n	80080a4 <tcp_close_shutdown+0x150>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	60bb      	str	r3, [r7, #8]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1ef      	bne.n	8008084 <tcp_close_shutdown+0x130>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff fea0 	bl	8007df0 <tcp_free>
      break;
 80080b0:	e01a      	b.n	80080e8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff ff14 	bl	8007ee0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	4816      	ldr	r0, [pc, #88]	; (8008114 <tcp_close_shutdown+0x1c0>)
 80080bc:	f001 fb78 	bl	80097b0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff feb1 	bl	8007e28 <tcp_free_listen>
      break;
 80080c6:	e00f      	b.n	80080e8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	480e      	ldr	r0, [pc, #56]	; (8008104 <tcp_close_shutdown+0x1b0>)
 80080cc:	f001 fb70 	bl	80097b0 <tcp_pcb_remove>
 80080d0:	4b0d      	ldr	r3, [pc, #52]	; (8008108 <tcp_close_shutdown+0x1b4>)
 80080d2:	2201      	movs	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff fe8a 	bl	8007df0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80080dc:	e004      	b.n	80080e8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f81a 	bl	8008118 <tcp_close_shutdown_fin>
 80080e4:	4603      	mov	r3, r0
 80080e6:	e000      	b.n	80080ea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bdb0      	pop	{r4, r5, r7, pc}
 80080f2:	bf00      	nop
 80080f4:	080156f0 	.word	0x080156f0
 80080f8:	080157c4 	.word	0x080157c4
 80080fc:	08015734 	.word	0x08015734
 8008100:	080157e4 	.word	0x080157e4
 8008104:	20007b28 	.word	0x20007b28
 8008108:	20007b24 	.word	0x20007b24
 800810c:	20007b3c 	.word	0x20007b3c
 8008110:	20007b34 	.word	0x20007b34
 8008114:	20007b30 	.word	0x20007b30

08008118 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <tcp_close_shutdown_fin+0x1c>
 8008126:	4b2e      	ldr	r3, [pc, #184]	; (80081e0 <tcp_close_shutdown_fin+0xc8>)
 8008128:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800812c:	492d      	ldr	r1, [pc, #180]	; (80081e4 <tcp_close_shutdown_fin+0xcc>)
 800812e:	482e      	ldr	r0, [pc, #184]	; (80081e8 <tcp_close_shutdown_fin+0xd0>)
 8008130:	f00b fa8e 	bl	8013650 <iprintf>

  switch (pcb->state) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	7d1b      	ldrb	r3, [r3, #20]
 8008138:	2b07      	cmp	r3, #7
 800813a:	d020      	beq.n	800817e <tcp_close_shutdown_fin+0x66>
 800813c:	2b07      	cmp	r3, #7
 800813e:	dc2b      	bgt.n	8008198 <tcp_close_shutdown_fin+0x80>
 8008140:	2b03      	cmp	r3, #3
 8008142:	d002      	beq.n	800814a <tcp_close_shutdown_fin+0x32>
 8008144:	2b04      	cmp	r3, #4
 8008146:	d00d      	beq.n	8008164 <tcp_close_shutdown_fin+0x4c>
 8008148:	e026      	b.n	8008198 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f004 febc 	bl	800cec8 <tcp_send_fin>
 8008150:	4603      	mov	r3, r0
 8008152:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d11f      	bne.n	800819c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2205      	movs	r2, #5
 8008160:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008162:	e01b      	b.n	800819c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f004 feaf 	bl	800cec8 <tcp_send_fin>
 800816a:	4603      	mov	r3, r0
 800816c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d114      	bne.n	80081a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2205      	movs	r2, #5
 800817a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800817c:	e010      	b.n	80081a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f004 fea2 	bl	800cec8 <tcp_send_fin>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2209      	movs	r2, #9
 8008194:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008196:	e005      	b.n	80081a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	e01c      	b.n	80081d6 <tcp_close_shutdown_fin+0xbe>
      break;
 800819c:	bf00      	nop
 800819e:	e002      	b.n	80081a6 <tcp_close_shutdown_fin+0x8e>
      break;
 80081a0:	bf00      	nop
 80081a2:	e000      	b.n	80081a6 <tcp_close_shutdown_fin+0x8e>
      break;
 80081a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80081a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d103      	bne.n	80081b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f004 ffca 	bl	800d148 <tcp_output>
 80081b4:	e00d      	b.n	80081d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80081b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d108      	bne.n	80081d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	8b5b      	ldrh	r3, [r3, #26]
 80081c4:	f043 0308 	orr.w	r3, r3, #8
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	e001      	b.n	80081d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80081d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	080156f0 	.word	0x080156f0
 80081e4:	080157a0 	.word	0x080157a0
 80081e8:	08015734 	.word	0x08015734

080081ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d109      	bne.n	800820e <tcp_close+0x22>
 80081fa:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <tcp_close+0x4c>)
 80081fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008200:	490e      	ldr	r1, [pc, #56]	; (800823c <tcp_close+0x50>)
 8008202:	480f      	ldr	r0, [pc, #60]	; (8008240 <tcp_close+0x54>)
 8008204:	f00b fa24 	bl	8013650 <iprintf>
 8008208:	f06f 030f 	mvn.w	r3, #15
 800820c:	e00f      	b.n	800822e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7d1b      	ldrb	r3, [r3, #20]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d006      	beq.n	8008224 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	8b5b      	ldrh	r3, [r3, #26]
 800821a:	f043 0310 	orr.w	r3, r3, #16
 800821e:	b29a      	uxth	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008224:	2101      	movs	r1, #1
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff fe94 	bl	8007f54 <tcp_close_shutdown>
 800822c:	4603      	mov	r3, r0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	080156f0 	.word	0x080156f0
 800823c:	08015800 	.word	0x08015800
 8008240:	08015734 	.word	0x08015734

08008244 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08e      	sub	sp, #56	; 0x38
 8008248:	af04      	add	r7, sp, #16
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d107      	bne.n	8008264 <tcp_abandon+0x20>
 8008254:	4b52      	ldr	r3, [pc, #328]	; (80083a0 <tcp_abandon+0x15c>)
 8008256:	f240 223d 	movw	r2, #573	; 0x23d
 800825a:	4952      	ldr	r1, [pc, #328]	; (80083a4 <tcp_abandon+0x160>)
 800825c:	4852      	ldr	r0, [pc, #328]	; (80083a8 <tcp_abandon+0x164>)
 800825e:	f00b f9f7 	bl	8013650 <iprintf>
 8008262:	e099      	b.n	8008398 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	7d1b      	ldrb	r3, [r3, #20]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d106      	bne.n	800827a <tcp_abandon+0x36>
 800826c:	4b4c      	ldr	r3, [pc, #304]	; (80083a0 <tcp_abandon+0x15c>)
 800826e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008272:	494e      	ldr	r1, [pc, #312]	; (80083ac <tcp_abandon+0x168>)
 8008274:	484c      	ldr	r0, [pc, #304]	; (80083a8 <tcp_abandon+0x164>)
 8008276:	f00b f9eb 	bl	8013650 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7d1b      	ldrb	r3, [r3, #20]
 800827e:	2b0a      	cmp	r3, #10
 8008280:	d107      	bne.n	8008292 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	484a      	ldr	r0, [pc, #296]	; (80083b0 <tcp_abandon+0x16c>)
 8008286:	f001 fa93 	bl	80097b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff fdb0 	bl	8007df0 <tcp_free>
 8008290:	e082      	b.n	8008398 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800829e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	7d1b      	ldrb	r3, [r3, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d126      	bne.n	800830a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	8adb      	ldrh	r3, [r3, #22]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d02e      	beq.n	8008322 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80082c4:	4b3b      	ldr	r3, [pc, #236]	; (80083b4 <tcp_abandon+0x170>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d105      	bne.n	80082da <tcp_abandon+0x96>
 80082ce:	4b39      	ldr	r3, [pc, #228]	; (80083b4 <tcp_abandon+0x170>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	4a37      	ldr	r2, [pc, #220]	; (80083b4 <tcp_abandon+0x170>)
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	e013      	b.n	8008302 <tcp_abandon+0xbe>
 80082da:	4b36      	ldr	r3, [pc, #216]	; (80083b4 <tcp_abandon+0x170>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	e00c      	b.n	80082fc <tcp_abandon+0xb8>
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d104      	bne.n	80082f6 <tcp_abandon+0xb2>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	60da      	str	r2, [r3, #12]
 80082f4:	e005      	b.n	8008302 <tcp_abandon+0xbe>
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	61fb      	str	r3, [r7, #28]
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1ef      	bne.n	80082e2 <tcp_abandon+0x9e>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	60da      	str	r2, [r3, #12]
 8008308:	e00b      	b.n	8008322 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8adb      	ldrh	r3, [r3, #22]
 8008312:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	4828      	ldr	r0, [pc, #160]	; (80083b8 <tcp_abandon+0x174>)
 8008318:	f001 fa4a 	bl	80097b0 <tcp_pcb_remove>
 800831c:	4b27      	ldr	r3, [pc, #156]	; (80083bc <tcp_abandon+0x178>)
 800831e:	2201      	movs	r2, #1
 8008320:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fed6 	bl	80090e0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d004      	beq.n	8008346 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fecd 	bl	80090e0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800834a:	2b00      	cmp	r3, #0
 800834c:	d004      	beq.n	8008358 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fec4 	bl	80090e0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00e      	beq.n	800837c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800835e:	6879      	ldr	r1, [r7, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3304      	adds	r3, #4
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	8b12      	ldrh	r2, [r2, #24]
 8008368:	9202      	str	r2, [sp, #8]
 800836a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800836c:	9201      	str	r2, [sp, #4]
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	460b      	mov	r3, r1
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	69b9      	ldr	r1, [r7, #24]
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f005 fcd0 	bl	800dd1c <tcp_rst>
    }
    last_state = pcb->state;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7d1b      	ldrb	r3, [r3, #20]
 8008380:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f7ff fd34 	bl	8007df0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <tcp_abandon+0x154>
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f06f 010c 	mvn.w	r1, #12
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	4798      	blx	r3
  }
}
 8008398:	3728      	adds	r7, #40	; 0x28
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	080156f0 	.word	0x080156f0
 80083a4:	08015834 	.word	0x08015834
 80083a8:	08015734 	.word	0x08015734
 80083ac:	08015850 	.word	0x08015850
 80083b0:	20007b38 	.word	0x20007b38
 80083b4:	20007b34 	.word	0x20007b34
 80083b8:	20007b28 	.word	0x20007b28
 80083bc:	20007b24 	.word	0x20007b24

080083c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80083c8:	2101      	movs	r1, #1
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff ff3a 	bl	8008244 <tcp_abandon>
}
 80083d0:	bf00      	nop
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b088      	sub	sp, #32
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80083e6:	2304      	movs	r3, #4
 80083e8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80083f0:	4b3e      	ldr	r3, [pc, #248]	; (80084ec <tcp_bind+0x114>)
 80083f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <tcp_bind+0x36>
 80083fa:	4b3d      	ldr	r3, [pc, #244]	; (80084f0 <tcp_bind+0x118>)
 80083fc:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008400:	493c      	ldr	r1, [pc, #240]	; (80084f4 <tcp_bind+0x11c>)
 8008402:	483d      	ldr	r0, [pc, #244]	; (80084f8 <tcp_bind+0x120>)
 8008404:	f00b f924 	bl	8013650 <iprintf>
 8008408:	f06f 030f 	mvn.w	r3, #15
 800840c:	e06a      	b.n	80084e4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	7d1b      	ldrb	r3, [r3, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d009      	beq.n	800842a <tcp_bind+0x52>
 8008416:	4b36      	ldr	r3, [pc, #216]	; (80084f0 <tcp_bind+0x118>)
 8008418:	f240 22ab 	movw	r2, #683	; 0x2ab
 800841c:	4937      	ldr	r1, [pc, #220]	; (80084fc <tcp_bind+0x124>)
 800841e:	4836      	ldr	r0, [pc, #216]	; (80084f8 <tcp_bind+0x120>)
 8008420:	f00b f916 	bl	8013650 <iprintf>
 8008424:	f06f 0305 	mvn.w	r3, #5
 8008428:	e05c      	b.n	80084e4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d109      	bne.n	8008444 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008430:	f000 f9f0 	bl	8008814 <tcp_new_port>
 8008434:	4603      	mov	r3, r0
 8008436:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008438:	88fb      	ldrh	r3, [r7, #6]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d135      	bne.n	80084aa <tcp_bind+0xd2>
      return ERR_BUF;
 800843e:	f06f 0301 	mvn.w	r3, #1
 8008442:	e04f      	b.n	80084e4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008444:	2300      	movs	r3, #0
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e02b      	b.n	80084a2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800844a:	4a2d      	ldr	r2, [pc, #180]	; (8008500 <tcp_bind+0x128>)
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	61bb      	str	r3, [r7, #24]
 8008456:	e01e      	b.n	8008496 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	8adb      	ldrh	r3, [r3, #22]
 800845c:	88fa      	ldrh	r2, [r7, #6]
 800845e:	429a      	cmp	r2, r3
 8008460:	d116      	bne.n	8008490 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008462:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008464:	2b00      	cmp	r3, #0
 8008466:	d010      	beq.n	800848a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00c      	beq.n	800848a <tcp_bind+0xb2>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d009      	beq.n	800848a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008486:	429a      	cmp	r2, r3
 8008488:	d102      	bne.n	8008490 <tcp_bind+0xb8>
              return ERR_USE;
 800848a:	f06f 0307 	mvn.w	r3, #7
 800848e:	e029      	b.n	80084e4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	61bb      	str	r3, [r7, #24]
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1dd      	bne.n	8008458 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	3301      	adds	r3, #1
 80084a0:	61fb      	str	r3, [r7, #28]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	dbcf      	blt.n	800844a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00c      	beq.n	80084ca <tcp_bind+0xf2>
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d008      	beq.n	80084ca <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d002      	beq.n	80084c4 <tcp_bind+0xec>
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	e000      	b.n	80084c6 <tcp_bind+0xee>
 80084c4:	2300      	movs	r3, #0
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	88fa      	ldrh	r2, [r7, #6]
 80084ce:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80084d0:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <tcp_bind+0x12c>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	60da      	str	r2, [r3, #12]
 80084d8:	4a0a      	ldr	r2, [pc, #40]	; (8008504 <tcp_bind+0x12c>)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	f005 fddf 	bl	800e0a0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3720      	adds	r7, #32
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	08041e4c 	.word	0x08041e4c
 80084f0:	080156f0 	.word	0x080156f0
 80084f4:	08015884 	.word	0x08015884
 80084f8:	08015734 	.word	0x08015734
 80084fc:	0801589c 	.word	0x0801589c
 8008500:	08041e14 	.word	0x08041e14
 8008504:	20007b34 	.word	0x20007b34

08008508 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	4613      	mov	r3, r2
 8008514:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d106      	bne.n	800852a <tcp_accept_null+0x22>
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <tcp_accept_null+0x34>)
 800851e:	f240 320f 	movw	r2, #783	; 0x30f
 8008522:	4907      	ldr	r1, [pc, #28]	; (8008540 <tcp_accept_null+0x38>)
 8008524:	4807      	ldr	r0, [pc, #28]	; (8008544 <tcp_accept_null+0x3c>)
 8008526:	f00b f893 	bl	8013650 <iprintf>

  tcp_abort(pcb);
 800852a:	68b8      	ldr	r0, [r7, #8]
 800852c:	f7ff ff48 	bl	80083c0 <tcp_abort>

  return ERR_ABRT;
 8008530:	f06f 030c 	mvn.w	r3, #12
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	080156f0 	.word	0x080156f0
 8008540:	080158c4 	.word	0x080158c4
 8008544:	08015734 	.word	0x08015734

08008548 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	2200      	movs	r2, #0
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f806 	bl	800856c <tcp_listen_with_backlog_and_err>
 8008560:	4603      	mov	r3, r0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	460b      	mov	r3, r1
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d109      	bne.n	8008598 <tcp_listen_with_backlog_and_err+0x2c>
 8008584:	4b47      	ldr	r3, [pc, #284]	; (80086a4 <tcp_listen_with_backlog_and_err+0x138>)
 8008586:	f240 3259 	movw	r2, #857	; 0x359
 800858a:	4947      	ldr	r1, [pc, #284]	; (80086a8 <tcp_listen_with_backlog_and_err+0x13c>)
 800858c:	4847      	ldr	r0, [pc, #284]	; (80086ac <tcp_listen_with_backlog_and_err+0x140>)
 800858e:	f00b f85f 	bl	8013650 <iprintf>
 8008592:	23f0      	movs	r3, #240	; 0xf0
 8008594:	76fb      	strb	r3, [r7, #27]
 8008596:	e079      	b.n	800868c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	7d1b      	ldrb	r3, [r3, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d009      	beq.n	80085b4 <tcp_listen_with_backlog_and_err+0x48>
 80085a0:	4b40      	ldr	r3, [pc, #256]	; (80086a4 <tcp_listen_with_backlog_and_err+0x138>)
 80085a2:	f240 325a 	movw	r2, #858	; 0x35a
 80085a6:	4942      	ldr	r1, [pc, #264]	; (80086b0 <tcp_listen_with_backlog_and_err+0x144>)
 80085a8:	4840      	ldr	r0, [pc, #256]	; (80086ac <tcp_listen_with_backlog_and_err+0x140>)
 80085aa:	f00b f851 	bl	8013650 <iprintf>
 80085ae:	23f1      	movs	r3, #241	; 0xf1
 80085b0:	76fb      	strb	r3, [r7, #27]
 80085b2:	e06b      	b.n	800868c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	7d1b      	ldrb	r3, [r3, #20]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d104      	bne.n	80085c6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80085c0:	23f7      	movs	r3, #247	; 0xf7
 80085c2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80085c4:	e062      	b.n	800868c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80085c6:	2002      	movs	r0, #2
 80085c8:	f7fe fb42 	bl	8006c50 <memp_malloc>
 80085cc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d102      	bne.n	80085da <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80085d4:	23ff      	movs	r3, #255	; 0xff
 80085d6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80085d8:	e058      	b.n	800868c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	691a      	ldr	r2, [r3, #16]
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8ada      	ldrh	r2, [r3, #22]
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	2201      	movs	r2, #1
 80085ee:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	7d5a      	ldrb	r2, [r3, #21]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	7a5a      	ldrb	r2, [r3, #9]
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2200      	movs	r2, #0
 8008604:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	7ada      	ldrb	r2, [r3, #11]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	7a9a      	ldrb	r2, [r3, #10]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8adb      	ldrh	r3, [r3, #22]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d021      	beq.n	800866a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008626:	4b23      	ldr	r3, [pc, #140]	; (80086b4 <tcp_listen_with_backlog_and_err+0x148>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	429a      	cmp	r2, r3
 800862e:	d105      	bne.n	800863c <tcp_listen_with_backlog_and_err+0xd0>
 8008630:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <tcp_listen_with_backlog_and_err+0x148>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	4a1f      	ldr	r2, [pc, #124]	; (80086b4 <tcp_listen_with_backlog_and_err+0x148>)
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	e013      	b.n	8008664 <tcp_listen_with_backlog_and_err+0xf8>
 800863c:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <tcp_listen_with_backlog_and_err+0x148>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	617b      	str	r3, [r7, #20]
 8008642:	e00c      	b.n	800865e <tcp_listen_with_backlog_and_err+0xf2>
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	429a      	cmp	r2, r3
 800864c:	d104      	bne.n	8008658 <tcp_listen_with_backlog_and_err+0xec>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	60da      	str	r2, [r3, #12]
 8008656:	e005      	b.n	8008664 <tcp_listen_with_backlog_and_err+0xf8>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1ef      	bne.n	8008644 <tcp_listen_with_backlog_and_err+0xd8>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7ff fbc0 	bl	8007df0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4a11      	ldr	r2, [pc, #68]	; (80086b8 <tcp_listen_with_backlog_and_err+0x14c>)
 8008674:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008676:	4b11      	ldr	r3, [pc, #68]	; (80086bc <tcp_listen_with_backlog_and_err+0x150>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	60da      	str	r2, [r3, #12]
 800867e:	4a0f      	ldr	r2, [pc, #60]	; (80086bc <tcp_listen_with_backlog_and_err+0x150>)
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	f005 fd0c 	bl	800e0a0 <tcp_timer_needed>
  res = ERR_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7efa      	ldrb	r2, [r7, #27]
 8008696:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008698:	69fb      	ldr	r3, [r7, #28]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	080156f0 	.word	0x080156f0
 80086a8:	080158e4 	.word	0x080158e4
 80086ac:	08015734 	.word	0x08015734
 80086b0:	08015914 	.word	0x08015914
 80086b4:	20007b34 	.word	0x20007b34
 80086b8:	08008509 	.word	0x08008509
 80086bc:	20007b30 	.word	0x20007b30

080086c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <tcp_update_rcv_ann_wnd+0x1c>
 80086ce:	4b25      	ldr	r3, [pc, #148]	; (8008764 <tcp_update_rcv_ann_wnd+0xa4>)
 80086d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80086d4:	4924      	ldr	r1, [pc, #144]	; (8008768 <tcp_update_rcv_ann_wnd+0xa8>)
 80086d6:	4825      	ldr	r0, [pc, #148]	; (800876c <tcp_update_rcv_ann_wnd+0xac>)
 80086d8:	f00a ffba 	bl	8013650 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80086e4:	4413      	add	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80086f0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80086f4:	bf28      	it	cs
 80086f6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80086fa:	b292      	uxth	r2, r2
 80086fc:	4413      	add	r3, r2
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	db08      	blt.n	8008718 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	e020      	b.n	800875a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	dd03      	ble.n	800872e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800872c:	e014      	b.n	8008758 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008740:	d306      	bcc.n	8008750 <tcp_update_rcv_ann_wnd+0x90>
 8008742:	4b08      	ldr	r3, [pc, #32]	; (8008764 <tcp_update_rcv_ann_wnd+0xa4>)
 8008744:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008748:	4909      	ldr	r1, [pc, #36]	; (8008770 <tcp_update_rcv_ann_wnd+0xb0>)
 800874a:	4808      	ldr	r0, [pc, #32]	; (800876c <tcp_update_rcv_ann_wnd+0xac>)
 800874c:	f00a ff80 	bl	8013650 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008758:	2300      	movs	r3, #0
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	080156f0 	.word	0x080156f0
 8008768:	0801594c 	.word	0x0801594c
 800876c:	08015734 	.word	0x08015734
 8008770:	08015970 	.word	0x08015970

08008774 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d107      	bne.n	8008796 <tcp_recved+0x22>
 8008786:	4b1f      	ldr	r3, [pc, #124]	; (8008804 <tcp_recved+0x90>)
 8008788:	f240 32cf 	movw	r2, #975	; 0x3cf
 800878c:	491e      	ldr	r1, [pc, #120]	; (8008808 <tcp_recved+0x94>)
 800878e:	481f      	ldr	r0, [pc, #124]	; (800880c <tcp_recved+0x98>)
 8008790:	f00a ff5e 	bl	8013650 <iprintf>
 8008794:	e032      	b.n	80087fc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	7d1b      	ldrb	r3, [r3, #20]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d106      	bne.n	80087ac <tcp_recved+0x38>
 800879e:	4b19      	ldr	r3, [pc, #100]	; (8008804 <tcp_recved+0x90>)
 80087a0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80087a4:	491a      	ldr	r1, [pc, #104]	; (8008810 <tcp_recved+0x9c>)
 80087a6:	4819      	ldr	r0, [pc, #100]	; (800880c <tcp_recved+0x98>)
 80087a8:	f00a ff52 	bl	8013650 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80087b0:	887b      	ldrh	r3, [r7, #2]
 80087b2:	4413      	add	r3, r2
 80087b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80087b6:	89fb      	ldrh	r3, [r7, #14]
 80087b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80087bc:	d804      	bhi.n	80087c8 <tcp_recved+0x54>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087c2:	89fa      	ldrh	r2, [r7, #14]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d204      	bcs.n	80087d2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80087ce:	851a      	strh	r2, [r3, #40]	; 0x28
 80087d0:	e002      	b.n	80087d8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	89fa      	ldrh	r2, [r7, #14]
 80087d6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff71 	bl	80086c0 <tcp_update_rcv_ann_wnd>
 80087de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80087e6:	d309      	bcc.n	80087fc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	8b5b      	ldrh	r3, [r3, #26]
 80087ec:	f043 0302 	orr.w	r3, r3, #2
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f004 fca6 	bl	800d148 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	080156f0 	.word	0x080156f0
 8008808:	0801598c 	.word	0x0801598c
 800880c:	08015734 	.word	0x08015734
 8008810:	080159a4 	.word	0x080159a4

08008814 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800881e:	4b1e      	ldr	r3, [pc, #120]	; (8008898 <tcp_new_port+0x84>)
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	3301      	adds	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	4b1c      	ldr	r3, [pc, #112]	; (8008898 <tcp_new_port+0x84>)
 8008828:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800882a:	4b1b      	ldr	r3, [pc, #108]	; (8008898 <tcp_new_port+0x84>)
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008832:	4293      	cmp	r3, r2
 8008834:	d103      	bne.n	800883e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008836:	4b18      	ldr	r3, [pc, #96]	; (8008898 <tcp_new_port+0x84>)
 8008838:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800883c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800883e:	2300      	movs	r3, #0
 8008840:	71fb      	strb	r3, [r7, #7]
 8008842:	e01e      	b.n	8008882 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	4a15      	ldr	r2, [pc, #84]	; (800889c <tcp_new_port+0x88>)
 8008848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	e011      	b.n	8008876 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	8ada      	ldrh	r2, [r3, #22]
 8008856:	4b10      	ldr	r3, [pc, #64]	; (8008898 <tcp_new_port+0x84>)
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d108      	bne.n	8008870 <tcp_new_port+0x5c>
        n++;
 800885e:	88bb      	ldrh	r3, [r7, #4]
 8008860:	3301      	adds	r3, #1
 8008862:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008864:	88bb      	ldrh	r3, [r7, #4]
 8008866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800886a:	d3d8      	bcc.n	800881e <tcp_new_port+0xa>
          return 0;
 800886c:	2300      	movs	r3, #0
 800886e:	e00d      	b.n	800888c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1ea      	bne.n	8008852 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	3301      	adds	r3, #1
 8008880:	71fb      	strb	r3, [r7, #7]
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d9dd      	bls.n	8008844 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008888:	4b03      	ldr	r3, [pc, #12]	; (8008898 <tcp_new_port+0x84>)
 800888a:	881b      	ldrh	r3, [r3, #0]
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	2000001a 	.word	0x2000001a
 800889c:	08041e14 	.word	0x08041e14

080088a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80088a0:	b5b0      	push	{r4, r5, r7, lr}
 80088a2:	b090      	sub	sp, #64	; 0x40
 80088a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80088ac:	4b94      	ldr	r3, [pc, #592]	; (8008b00 <tcp_slowtmr+0x260>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	4a93      	ldr	r2, [pc, #588]	; (8008b00 <tcp_slowtmr+0x260>)
 80088b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80088b6:	4b93      	ldr	r3, [pc, #588]	; (8008b04 <tcp_slowtmr+0x264>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	3301      	adds	r3, #1
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	4b91      	ldr	r3, [pc, #580]	; (8008b04 <tcp_slowtmr+0x264>)
 80088c0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80088c6:	4b90      	ldr	r3, [pc, #576]	; (8008b08 <tcp_slowtmr+0x268>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80088cc:	e29d      	b.n	8008e0a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	7d1b      	ldrb	r3, [r3, #20]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d106      	bne.n	80088e4 <tcp_slowtmr+0x44>
 80088d6:	4b8d      	ldr	r3, [pc, #564]	; (8008b0c <tcp_slowtmr+0x26c>)
 80088d8:	f240 42be 	movw	r2, #1214	; 0x4be
 80088dc:	498c      	ldr	r1, [pc, #560]	; (8008b10 <tcp_slowtmr+0x270>)
 80088de:	488d      	ldr	r0, [pc, #564]	; (8008b14 <tcp_slowtmr+0x274>)
 80088e0:	f00a feb6 	bl	8013650 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	7d1b      	ldrb	r3, [r3, #20]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d106      	bne.n	80088fa <tcp_slowtmr+0x5a>
 80088ec:	4b87      	ldr	r3, [pc, #540]	; (8008b0c <tcp_slowtmr+0x26c>)
 80088ee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80088f2:	4989      	ldr	r1, [pc, #548]	; (8008b18 <tcp_slowtmr+0x278>)
 80088f4:	4887      	ldr	r0, [pc, #540]	; (8008b14 <tcp_slowtmr+0x274>)
 80088f6:	f00a feab 	bl	8013650 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	7d1b      	ldrb	r3, [r3, #20]
 80088fe:	2b0a      	cmp	r3, #10
 8008900:	d106      	bne.n	8008910 <tcp_slowtmr+0x70>
 8008902:	4b82      	ldr	r3, [pc, #520]	; (8008b0c <tcp_slowtmr+0x26c>)
 8008904:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008908:	4984      	ldr	r1, [pc, #528]	; (8008b1c <tcp_slowtmr+0x27c>)
 800890a:	4882      	ldr	r0, [pc, #520]	; (8008b14 <tcp_slowtmr+0x274>)
 800890c:	f00a fea0 	bl	8013650 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	7f9a      	ldrb	r2, [r3, #30]
 8008914:	4b7b      	ldr	r3, [pc, #492]	; (8008b04 <tcp_slowtmr+0x264>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d105      	bne.n	8008928 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008926:	e270      	b.n	8008e0a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008928:	4b76      	ldr	r3, [pc, #472]	; (8008b04 <tcp_slowtmr+0x264>)
 800892a:	781a      	ldrb	r2, [r3, #0]
 800892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	7d1b      	ldrb	r3, [r3, #20]
 8008940:	2b02      	cmp	r3, #2
 8008942:	d10a      	bne.n	800895a <tcp_slowtmr+0xba>
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800894a:	2b05      	cmp	r3, #5
 800894c:	d905      	bls.n	800895a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800894e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008952:	3301      	adds	r3, #1
 8008954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008958:	e11e      	b.n	8008b98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008960:	2b0b      	cmp	r3, #11
 8008962:	d905      	bls.n	8008970 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008968:	3301      	adds	r3, #1
 800896a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800896e:	e113      	b.n	8008b98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008976:	2b00      	cmp	r3, #0
 8008978:	d075      	beq.n	8008a66 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800897e:	2b00      	cmp	r3, #0
 8008980:	d006      	beq.n	8008990 <tcp_slowtmr+0xf0>
 8008982:	4b62      	ldr	r3, [pc, #392]	; (8008b0c <tcp_slowtmr+0x26c>)
 8008984:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008988:	4965      	ldr	r1, [pc, #404]	; (8008b20 <tcp_slowtmr+0x280>)
 800898a:	4862      	ldr	r0, [pc, #392]	; (8008b14 <tcp_slowtmr+0x274>)
 800898c:	f00a fe60 	bl	8013650 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <tcp_slowtmr+0x106>
 8008998:	4b5c      	ldr	r3, [pc, #368]	; (8008b0c <tcp_slowtmr+0x26c>)
 800899a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800899e:	4961      	ldr	r1, [pc, #388]	; (8008b24 <tcp_slowtmr+0x284>)
 80089a0:	485c      	ldr	r0, [pc, #368]	; (8008b14 <tcp_slowtmr+0x274>)
 80089a2:	f00a fe55 	bl	8013650 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80089a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80089ac:	2b0b      	cmp	r3, #11
 80089ae:	d905      	bls.n	80089bc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80089b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089b4:	3301      	adds	r3, #1
 80089b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80089ba:	e0ed      	b.n	8008b98 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089c2:	3b01      	subs	r3, #1
 80089c4:	4a58      	ldr	r2, [pc, #352]	; (8008b28 <tcp_slowtmr+0x288>)
 80089c6:	5cd3      	ldrb	r3, [r2, r3]
 80089c8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80089ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80089d0:	7c7a      	ldrb	r2, [r7, #17]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d907      	bls.n	80089e6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80089dc:	3301      	adds	r3, #1
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80089ec:	7c7a      	ldrb	r2, [r7, #17]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	f200 80d2 	bhi.w	8008b98 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80089f4:	2301      	movs	r3, #1
 80089f6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d108      	bne.n	8008a14 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a04:	f005 fa7e 	bl	800df04 <tcp_zero_window_probe>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d014      	beq.n	8008a38 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008a0e:	2300      	movs	r3, #0
 8008a10:	623b      	str	r3, [r7, #32]
 8008a12:	e011      	b.n	8008a38 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a1e:	f004 f901 	bl	800cc24 <tcp_split_unsent_seg>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d107      	bne.n	8008a38 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a2a:	f004 fb8d 	bl	800d148 <tcp_output>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80ac 	beq.w	8008b98 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008a4e:	2b06      	cmp	r3, #6
 8008a50:	f200 80a2 	bhi.w	8008b98 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008a64:	e098      	b.n	8008b98 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	db0f      	blt.n	8008a90 <tcp_slowtmr+0x1f0>
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a76:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d008      	beq.n	8008a90 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	3301      	adds	r3, #1
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	b21a      	sxth	r2, r3
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a92:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	db7b      	blt.n	8008b98 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008aa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aa2:	f004 fe5f 	bl	800d764 <tcp_rexmit_rto_prepare>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d007      	beq.n	8008abc <tcp_slowtmr+0x21c>
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d171      	bne.n	8008b98 <tcp_slowtmr+0x2f8>
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d06d      	beq.n	8008b98 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	7d1b      	ldrb	r3, [r3, #20]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d03a      	beq.n	8008b3a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008aca:	2b0c      	cmp	r3, #12
 8008acc:	bf28      	it	cs
 8008ace:	230c      	movcs	r3, #12
 8008ad0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008ad8:	10db      	asrs	r3, r3, #3
 8008ada:	b21b      	sxth	r3, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008ae4:	4413      	add	r3, r2
 8008ae6:	7efa      	ldrb	r2, [r7, #27]
 8008ae8:	4910      	ldr	r1, [pc, #64]	; (8008b2c <tcp_slowtmr+0x28c>)
 8008aea:	5c8a      	ldrb	r2, [r1, r2]
 8008aec:	4093      	lsls	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008af6:	4293      	cmp	r3, r2
 8008af8:	dc1a      	bgt.n	8008b30 <tcp_slowtmr+0x290>
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	b21a      	sxth	r2, r3
 8008afe:	e019      	b.n	8008b34 <tcp_slowtmr+0x294>
 8008b00:	20007b2c 	.word	0x20007b2c
 8008b04:	20000596 	.word	0x20000596
 8008b08:	20007b28 	.word	0x20007b28
 8008b0c:	080156f0 	.word	0x080156f0
 8008b10:	08015a34 	.word	0x08015a34
 8008b14:	08015734 	.word	0x08015734
 8008b18:	08015a60 	.word	0x08015a60
 8008b1c:	08015a8c 	.word	0x08015a8c
 8008b20:	08015abc 	.word	0x08015abc
 8008b24:	08015af0 	.word	0x08015af0
 8008b28:	08041e0c 	.word	0x08041e0c
 8008b2c:	08041dfc 	.word	0x08041dfc
 8008b30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	bf28      	it	cs
 8008b50:	4613      	movcs	r3, r2
 8008b52:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008b54:	8a7b      	ldrh	r3, [r7, #18]
 8008b56:	085b      	lsrs	r3, r3, #1
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d206      	bcs.n	8008b80 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b94:	f004 fe56 	bl	800d844 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	7d1b      	ldrb	r3, [r3, #20]
 8008b9c:	2b06      	cmp	r3, #6
 8008b9e:	d111      	bne.n	8008bc4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	8b5b      	ldrh	r3, [r3, #26]
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bac:	4b9c      	ldr	r3, [pc, #624]	; (8008e20 <tcp_slowtmr+0x580>)
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b28      	cmp	r3, #40	; 0x28
 8008bb8:	d904      	bls.n	8008bc4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	7a5b      	ldrb	r3, [r3, #9]
 8008bc8:	f003 0308 	and.w	r3, r3, #8
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d04a      	beq.n	8008c66 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d003      	beq.n	8008be0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008bdc:	2b07      	cmp	r3, #7
 8008bde:	d142      	bne.n	8008c66 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008be0:	4b8f      	ldr	r3, [pc, #572]	; (8008e20 <tcp_slowtmr+0x580>)
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008bf0:	4b8c      	ldr	r3, [pc, #560]	; (8008e24 <tcp_slowtmr+0x584>)
 8008bf2:	440b      	add	r3, r1
 8008bf4:	498c      	ldr	r1, [pc, #560]	; (8008e28 <tcp_slowtmr+0x588>)
 8008bf6:	fba1 1303 	umull	r1, r3, r1, r3
 8008bfa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d90a      	bls.n	8008c16 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c04:	3301      	adds	r3, #1
 8008c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008c0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c0e:	3301      	adds	r3, #1
 8008c10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008c14:	e027      	b.n	8008c66 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c16:	4b82      	ldr	r3, [pc, #520]	; (8008e20 <tcp_slowtmr+0x580>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c28:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4b7f      	ldr	r3, [pc, #508]	; (8008e2c <tcp_slowtmr+0x58c>)
 8008c30:	fb03 f300 	mul.w	r3, r3, r0
 8008c34:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008c36:	497c      	ldr	r1, [pc, #496]	; (8008e28 <tcp_slowtmr+0x588>)
 8008c38:	fba1 1303 	umull	r1, r3, r1, r3
 8008c3c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d911      	bls.n	8008c66 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c44:	f005 f91e 	bl	800de84 <tcp_keepalive>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008c4e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d107      	bne.n	8008c66 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d011      	beq.n	8008c92 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008c6e:	4b6c      	ldr	r3, [pc, #432]	; (8008e20 <tcp_slowtmr+0x580>)
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	1ad2      	subs	r2, r2, r3
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008c7e:	4619      	mov	r1, r3
 8008c80:	460b      	mov	r3, r1
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	440b      	add	r3, r1
 8008c86:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d302      	bcc.n	8008c92 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c8e:	f000 fef3 	bl	8009a78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	7d1b      	ldrb	r3, [r3, #20]
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d10b      	bne.n	8008cb2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c9a:	4b61      	ldr	r3, [pc, #388]	; (8008e20 <tcp_slowtmr+0x580>)
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	2b28      	cmp	r3, #40	; 0x28
 8008ca6:	d904      	bls.n	8008cb2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cac:	3301      	adds	r3, #1
 8008cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	7d1b      	ldrb	r3, [r3, #20]
 8008cb6:	2b09      	cmp	r3, #9
 8008cb8:	d10b      	bne.n	8008cd2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008cba:	4b59      	ldr	r3, [pc, #356]	; (8008e20 <tcp_slowtmr+0x580>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2bf0      	cmp	r3, #240	; 0xf0
 8008cc6:	d904      	bls.n	8008cd2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ccc:	3301      	adds	r3, #1
 8008cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d060      	beq.n	8008d9c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ce4:	f000 fd14 	bl	8009710 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d010      	beq.n	8008d10 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008cee:	4b50      	ldr	r3, [pc, #320]	; (8008e30 <tcp_slowtmr+0x590>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d106      	bne.n	8008d06 <tcp_slowtmr+0x466>
 8008cf8:	4b4e      	ldr	r3, [pc, #312]	; (8008e34 <tcp_slowtmr+0x594>)
 8008cfa:	f240 526d 	movw	r2, #1389	; 0x56d
 8008cfe:	494e      	ldr	r1, [pc, #312]	; (8008e38 <tcp_slowtmr+0x598>)
 8008d00:	484e      	ldr	r0, [pc, #312]	; (8008e3c <tcp_slowtmr+0x59c>)
 8008d02:	f00a fca5 	bl	8013650 <iprintf>
        prev->next = pcb->next;
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	60da      	str	r2, [r3, #12]
 8008d0e:	e00f      	b.n	8008d30 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008d10:	4b47      	ldr	r3, [pc, #284]	; (8008e30 <tcp_slowtmr+0x590>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d006      	beq.n	8008d28 <tcp_slowtmr+0x488>
 8008d1a:	4b46      	ldr	r3, [pc, #280]	; (8008e34 <tcp_slowtmr+0x594>)
 8008d1c:	f240 5271 	movw	r2, #1393	; 0x571
 8008d20:	4947      	ldr	r1, [pc, #284]	; (8008e40 <tcp_slowtmr+0x5a0>)
 8008d22:	4846      	ldr	r0, [pc, #280]	; (8008e3c <tcp_slowtmr+0x59c>)
 8008d24:	f00a fc94 	bl	8013650 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	4a40      	ldr	r2, [pc, #256]	; (8008e30 <tcp_slowtmr+0x590>)
 8008d2e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008d30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d013      	beq.n	8008d60 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008d40:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	3304      	adds	r3, #4
 8008d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d48:	8ad2      	ldrh	r2, [r2, #22]
 8008d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d4c:	8b09      	ldrh	r1, [r1, #24]
 8008d4e:	9102      	str	r1, [sp, #8]
 8008d50:	9201      	str	r2, [sp, #4]
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	462b      	mov	r3, r5
 8008d56:	4622      	mov	r2, r4
 8008d58:	4601      	mov	r1, r0
 8008d5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d5c:	f004 ffde 	bl	800dd1c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	7d1b      	ldrb	r3, [r3, #20]
 8008d6a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008d76:	6838      	ldr	r0, [r7, #0]
 8008d78:	f7ff f83a 	bl	8007df0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008d7c:	4b31      	ldr	r3, [pc, #196]	; (8008e44 <tcp_slowtmr+0x5a4>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d004      	beq.n	8008d92 <tcp_slowtmr+0x4f2>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f06f 010c 	mvn.w	r1, #12
 8008d8e:	68b8      	ldr	r0, [r7, #8]
 8008d90:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d92:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <tcp_slowtmr+0x5a4>)
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d037      	beq.n	8008e0a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008d9a:	e592      	b.n	80088c2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	7f1b      	ldrb	r3, [r3, #28]
 8008daa:	3301      	adds	r3, #1
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	7f1a      	ldrb	r2, [r3, #28]
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	7f5b      	ldrb	r3, [r3, #29]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d325      	bcc.n	8008e0a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008dc4:	4b1f      	ldr	r3, [pc, #124]	; (8008e44 <tcp_slowtmr+0x5a4>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00b      	beq.n	8008dec <tcp_slowtmr+0x54c>
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ddc:	6912      	ldr	r2, [r2, #16]
 8008dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008de0:	4610      	mov	r0, r2
 8008de2:	4798      	blx	r3
 8008de4:	4603      	mov	r3, r0
 8008de6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008dea:	e002      	b.n	8008df2 <tcp_slowtmr+0x552>
 8008dec:	2300      	movs	r3, #0
 8008dee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008df2:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <tcp_slowtmr+0x5a4>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d000      	beq.n	8008dfc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008dfa:	e562      	b.n	80088c2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008dfc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e06:	f004 f99f 	bl	800d148 <tcp_output>
  while (pcb != NULL) {
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f47f ad5e 	bne.w	80088ce <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008e16:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <tcp_slowtmr+0x5a8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008e1c:	e069      	b.n	8008ef2 <tcp_slowtmr+0x652>
 8008e1e:	bf00      	nop
 8008e20:	20007b2c 	.word	0x20007b2c
 8008e24:	000a4cb8 	.word	0x000a4cb8
 8008e28:	10624dd3 	.word	0x10624dd3
 8008e2c:	000124f8 	.word	0x000124f8
 8008e30:	20007b28 	.word	0x20007b28
 8008e34:	080156f0 	.word	0x080156f0
 8008e38:	08015b28 	.word	0x08015b28
 8008e3c:	08015734 	.word	0x08015734
 8008e40:	08015b54 	.word	0x08015b54
 8008e44:	20007b24 	.word	0x20007b24
 8008e48:	20007b38 	.word	0x20007b38
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	7d1b      	ldrb	r3, [r3, #20]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	d006      	beq.n	8008e62 <tcp_slowtmr+0x5c2>
 8008e54:	4b2b      	ldr	r3, [pc, #172]	; (8008f04 <tcp_slowtmr+0x664>)
 8008e56:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008e5a:	492b      	ldr	r1, [pc, #172]	; (8008f08 <tcp_slowtmr+0x668>)
 8008e5c:	482b      	ldr	r0, [pc, #172]	; (8008f0c <tcp_slowtmr+0x66c>)
 8008e5e:	f00a fbf7 	bl	8013650 <iprintf>
    pcb_remove = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e68:	4b29      	ldr	r3, [pc, #164]	; (8008f10 <tcp_slowtmr+0x670>)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2bf0      	cmp	r3, #240	; 0xf0
 8008e74:	d904      	bls.n	8008e80 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d02f      	beq.n	8008ee8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e8a:	f000 fc41 	bl	8009710 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d010      	beq.n	8008eb6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e94:	4b1f      	ldr	r3, [pc, #124]	; (8008f14 <tcp_slowtmr+0x674>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d106      	bne.n	8008eac <tcp_slowtmr+0x60c>
 8008e9e:	4b19      	ldr	r3, [pc, #100]	; (8008f04 <tcp_slowtmr+0x664>)
 8008ea0:	f240 52af 	movw	r2, #1455	; 0x5af
 8008ea4:	491c      	ldr	r1, [pc, #112]	; (8008f18 <tcp_slowtmr+0x678>)
 8008ea6:	4819      	ldr	r0, [pc, #100]	; (8008f0c <tcp_slowtmr+0x66c>)
 8008ea8:	f00a fbd2 	bl	8013650 <iprintf>
        prev->next = pcb->next;
 8008eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	60da      	str	r2, [r3, #12]
 8008eb4:	e00f      	b.n	8008ed6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008eb6:	4b17      	ldr	r3, [pc, #92]	; (8008f14 <tcp_slowtmr+0x674>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d006      	beq.n	8008ece <tcp_slowtmr+0x62e>
 8008ec0:	4b10      	ldr	r3, [pc, #64]	; (8008f04 <tcp_slowtmr+0x664>)
 8008ec2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008ec6:	4915      	ldr	r1, [pc, #84]	; (8008f1c <tcp_slowtmr+0x67c>)
 8008ec8:	4810      	ldr	r0, [pc, #64]	; (8008f0c <tcp_slowtmr+0x66c>)
 8008eca:	f00a fbc1 	bl	8013650 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	4a10      	ldr	r2, [pc, #64]	; (8008f14 <tcp_slowtmr+0x674>)
 8008ed4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008ee0:	69f8      	ldr	r0, [r7, #28]
 8008ee2:	f7fe ff85 	bl	8007df0 <tcp_free>
 8008ee6:	e004      	b.n	8008ef2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1a9      	bne.n	8008e4c <tcp_slowtmr+0x5ac>
    }
  }
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	3730      	adds	r7, #48	; 0x30
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bdb0      	pop	{r4, r5, r7, pc}
 8008f02:	bf00      	nop
 8008f04:	080156f0 	.word	0x080156f0
 8008f08:	08015b80 	.word	0x08015b80
 8008f0c:	08015734 	.word	0x08015734
 8008f10:	20007b2c 	.word	0x20007b2c
 8008f14:	20007b38 	.word	0x20007b38
 8008f18:	08015bb0 	.word	0x08015bb0
 8008f1c:	08015bd8 	.word	0x08015bd8

08008f20 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008f26:	4b2d      	ldr	r3, [pc, #180]	; (8008fdc <tcp_fasttmr+0xbc>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	4b2b      	ldr	r3, [pc, #172]	; (8008fdc <tcp_fasttmr+0xbc>)
 8008f30:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008f32:	4b2b      	ldr	r3, [pc, #172]	; (8008fe0 <tcp_fasttmr+0xc0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008f38:	e048      	b.n	8008fcc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	7f9a      	ldrb	r2, [r3, #30]
 8008f3e:	4b27      	ldr	r3, [pc, #156]	; (8008fdc <tcp_fasttmr+0xbc>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d03f      	beq.n	8008fc6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008f46:	4b25      	ldr	r3, [pc, #148]	; (8008fdc <tcp_fasttmr+0xbc>)
 8008f48:	781a      	ldrb	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	8b5b      	ldrh	r3, [r3, #26]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d010      	beq.n	8008f7c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	8b5b      	ldrh	r3, [r3, #26]
 8008f5e:	f043 0302 	orr.w	r3, r3, #2
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f004 f8ed 	bl	800d148 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	8b5b      	ldrh	r3, [r3, #26]
 8008f72:	f023 0303 	bic.w	r3, r3, #3
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8b5b      	ldrh	r3, [r3, #26]
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d009      	beq.n	8008f9c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	8b5b      	ldrh	r3, [r3, #26]
 8008f8c:	f023 0308 	bic.w	r3, r3, #8
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff f8be 	bl	8008118 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008faa:	4b0e      	ldr	r3, [pc, #56]	; (8008fe4 <tcp_fasttmr+0xc4>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f819 	bl	8008fe8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008fb6:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <tcp_fasttmr+0xc4>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d000      	beq.n	8008fc0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008fbe:	e7b8      	b.n	8008f32 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	607b      	str	r3, [r7, #4]
 8008fc4:	e002      	b.n	8008fcc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1b3      	bne.n	8008f3a <tcp_fasttmr+0x1a>
    }
  }
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20000596 	.word	0x20000596
 8008fe0:	20007b28 	.word	0x20007b28
 8008fe4:	20007b24 	.word	0x20007b24

08008fe8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d109      	bne.n	800900a <tcp_process_refused_data+0x22>
 8008ff6:	4b37      	ldr	r3, [pc, #220]	; (80090d4 <tcp_process_refused_data+0xec>)
 8008ff8:	f240 6209 	movw	r2, #1545	; 0x609
 8008ffc:	4936      	ldr	r1, [pc, #216]	; (80090d8 <tcp_process_refused_data+0xf0>)
 8008ffe:	4837      	ldr	r0, [pc, #220]	; (80090dc <tcp_process_refused_data+0xf4>)
 8009000:	f00a fb26 	bl	8013650 <iprintf>
 8009004:	f06f 030f 	mvn.w	r3, #15
 8009008:	e060      	b.n	80090cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800900e:	7b5b      	ldrb	r3, [r3, #13]
 8009010:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009016:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <tcp_process_refused_data+0x58>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6918      	ldr	r0, [r3, #16]
 8009032:	2300      	movs	r3, #0
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	6879      	ldr	r1, [r7, #4]
 8009038:	47a0      	blx	r4
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
 800903e:	e007      	b.n	8009050 <tcp_process_refused_data+0x68>
 8009040:	2300      	movs	r3, #0
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	2000      	movs	r0, #0
 8009048:	f000 f8c2 	bl	80091d0 <tcp_recv_null>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d12a      	bne.n	80090ae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	d033      	beq.n	80090ca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009066:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800906a:	d005      	beq.n	8009078 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009070:	3301      	adds	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <tcp_process_refused_data+0xb2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6918      	ldr	r0, [r3, #16]
 800908c:	2300      	movs	r3, #0
 800908e:	2200      	movs	r2, #0
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	47a0      	blx	r4
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
 8009098:	e001      	b.n	800909e <tcp_process_refused_data+0xb6>
 800909a:	2300      	movs	r3, #0
 800909c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800909e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090a2:	f113 0f0d 	cmn.w	r3, #13
 80090a6:	d110      	bne.n	80090ca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80090a8:	f06f 030c 	mvn.w	r3, #12
 80090ac:	e00e      	b.n	80090cc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80090ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090b2:	f113 0f0d 	cmn.w	r3, #13
 80090b6:	d102      	bne.n	80090be <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80090b8:	f06f 030c 	mvn.w	r3, #12
 80090bc:	e006      	b.n	80090cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80090c4:	f06f 0304 	mvn.w	r3, #4
 80090c8:	e000      	b.n	80090cc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd90      	pop	{r4, r7, pc}
 80090d4:	080156f0 	.word	0x080156f0
 80090d8:	08015c00 	.word	0x08015c00
 80090dc:	08015734 	.word	0x08015734

080090e0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80090e8:	e007      	b.n	80090fa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f80a 	bl	800910a <tcp_seg_free>
    seg = next;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1f4      	bne.n	80090ea <tcp_segs_free+0xa>
  }
}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00c      	beq.n	8009132 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fbab 	bl	8007880 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	2003      	movs	r0, #3
 800912e:	f7fd fdd1 	bl	8006cd4 <memp_free>
  }
}
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d107      	bne.n	800915e <tcp_setprio+0x22>
 800914e:	4b07      	ldr	r3, [pc, #28]	; (800916c <tcp_setprio+0x30>)
 8009150:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8009154:	4906      	ldr	r1, [pc, #24]	; (8009170 <tcp_setprio+0x34>)
 8009156:	4807      	ldr	r0, [pc, #28]	; (8009174 <tcp_setprio+0x38>)
 8009158:	f00a fa7a 	bl	8013650 <iprintf>
 800915c:	e002      	b.n	8009164 <tcp_setprio+0x28>

  pcb->prio = prio;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	755a      	strb	r2, [r3, #21]
}
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	080156f0 	.word	0x080156f0
 8009170:	08015c28 	.word	0x08015c28
 8009174:	08015734 	.word	0x08015734

08009178 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <tcp_seg_copy+0x1c>
 8009186:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <tcp_seg_copy+0x4c>)
 8009188:	f240 6282 	movw	r2, #1666	; 0x682
 800918c:	490e      	ldr	r1, [pc, #56]	; (80091c8 <tcp_seg_copy+0x50>)
 800918e:	480f      	ldr	r0, [pc, #60]	; (80091cc <tcp_seg_copy+0x54>)
 8009190:	f00a fa5e 	bl	8013650 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009194:	2003      	movs	r0, #3
 8009196:	f7fd fd5b 	bl	8006c50 <memp_malloc>
 800919a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <tcp_seg_copy+0x2e>
    return NULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e00a      	b.n	80091bc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80091a6:	2210      	movs	r2, #16
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f00a fa20 	bl	80135f0 <memcpy>
  pbuf_ref(cseg->p);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe fc03 	bl	80079c0 <pbuf_ref>
  return cseg;
 80091ba:	68fb      	ldr	r3, [r7, #12]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	080156f0 	.word	0x080156f0
 80091c8:	08015c44 	.word	0x08015c44
 80091cc:	08015734 	.word	0x08015734

080091d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d109      	bne.n	80091f8 <tcp_recv_null+0x28>
 80091e4:	4b12      	ldr	r3, [pc, #72]	; (8009230 <tcp_recv_null+0x60>)
 80091e6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80091ea:	4912      	ldr	r1, [pc, #72]	; (8009234 <tcp_recv_null+0x64>)
 80091ec:	4812      	ldr	r0, [pc, #72]	; (8009238 <tcp_recv_null+0x68>)
 80091ee:	f00a fa2f 	bl	8013650 <iprintf>
 80091f2:	f06f 030f 	mvn.w	r3, #15
 80091f6:	e016      	b.n	8009226 <tcp_recv_null+0x56>

  if (p != NULL) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	891b      	ldrh	r3, [r3, #8]
 8009202:	4619      	mov	r1, r3
 8009204:	68b8      	ldr	r0, [r7, #8]
 8009206:	f7ff fab5 	bl	8008774 <tcp_recved>
    pbuf_free(p);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fe fb38 	bl	8007880 <pbuf_free>
 8009210:	e008      	b.n	8009224 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d104      	bne.n	8009224 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800921a:	68b8      	ldr	r0, [r7, #8]
 800921c:	f7fe ffe6 	bl	80081ec <tcp_close>
 8009220:	4603      	mov	r3, r0
 8009222:	e000      	b.n	8009226 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	080156f0 	.word	0x080156f0
 8009234:	08015c60 	.word	0x08015c60
 8009238:	08015734 	.word	0x08015734

0800923c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800924a:	2b00      	cmp	r3, #0
 800924c:	db01      	blt.n	8009252 <tcp_kill_prio+0x16>
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	e000      	b.n	8009254 <tcp_kill_prio+0x18>
 8009252:	237f      	movs	r3, #127	; 0x7f
 8009254:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009256:	7afb      	ldrb	r3, [r7, #11]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d034      	beq.n	80092c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	3b01      	subs	r3, #1
 8009260:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800926a:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <tcp_kill_prio+0x94>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e01f      	b.n	80092b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	7d5b      	ldrb	r3, [r3, #21]
 8009276:	7afa      	ldrb	r2, [r7, #11]
 8009278:	429a      	cmp	r2, r3
 800927a:	d80c      	bhi.n	8009296 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009280:	7afa      	ldrb	r2, [r7, #11]
 8009282:	429a      	cmp	r2, r3
 8009284:	d112      	bne.n	80092ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009286:	4b13      	ldr	r3, [pc, #76]	; (80092d4 <tcp_kill_prio+0x98>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	429a      	cmp	r2, r3
 8009294:	d80a      	bhi.n	80092ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <tcp_kill_prio+0x98>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	7d5b      	ldrb	r3, [r3, #21]
 80092aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1dc      	bne.n	8009272 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d004      	beq.n	80092c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80092be:	6938      	ldr	r0, [r7, #16]
 80092c0:	f7ff f87e 	bl	80083c0 <tcp_abort>
 80092c4:	e000      	b.n	80092c8 <tcp_kill_prio+0x8c>
    return;
 80092c6:	bf00      	nop
  }
}
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20007b28 	.word	0x20007b28
 80092d4:	20007b2c 	.word	0x20007b2c

080092d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	4603      	mov	r3, r0
 80092e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d009      	beq.n	80092fc <tcp_kill_state+0x24>
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d006      	beq.n	80092fc <tcp_kill_state+0x24>
 80092ee:	4b1a      	ldr	r3, [pc, #104]	; (8009358 <tcp_kill_state+0x80>)
 80092f0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80092f4:	4919      	ldr	r1, [pc, #100]	; (800935c <tcp_kill_state+0x84>)
 80092f6:	481a      	ldr	r0, [pc, #104]	; (8009360 <tcp_kill_state+0x88>)
 80092f8:	f00a f9aa 	bl	8013650 <iprintf>

  inactivity = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009300:	2300      	movs	r3, #0
 8009302:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009304:	4b17      	ldr	r3, [pc, #92]	; (8009364 <tcp_kill_state+0x8c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	617b      	str	r3, [r7, #20]
 800930a:	e017      	b.n	800933c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	7d1b      	ldrb	r3, [r3, #20]
 8009310:	79fa      	ldrb	r2, [r7, #7]
 8009312:	429a      	cmp	r2, r3
 8009314:	d10f      	bne.n	8009336 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009316:	4b14      	ldr	r3, [pc, #80]	; (8009368 <tcp_kill_state+0x90>)
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	429a      	cmp	r2, r3
 8009324:	d807      	bhi.n	8009336 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009326:	4b10      	ldr	r3, [pc, #64]	; (8009368 <tcp_kill_state+0x90>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	617b      	str	r3, [r7, #20]
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e4      	bne.n	800930c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009348:	2100      	movs	r1, #0
 800934a:	6938      	ldr	r0, [r7, #16]
 800934c:	f7fe ff7a 	bl	8008244 <tcp_abandon>
  }
}
 8009350:	bf00      	nop
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	080156f0 	.word	0x080156f0
 800935c:	08015c7c 	.word	0x08015c7c
 8009360:	08015734 	.word	0x08015734
 8009364:	20007b28 	.word	0x20007b28
 8009368:	20007b2c 	.word	0x20007b2c

0800936c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009376:	2300      	movs	r3, #0
 8009378:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800937a:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <tcp_kill_timewait+0x58>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	e012      	b.n	80093a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009382:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <tcp_kill_timewait+0x5c>)
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	429a      	cmp	r2, r3
 8009390:	d807      	bhi.n	80093a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009392:	4b0d      	ldr	r3, [pc, #52]	; (80093c8 <tcp_kill_timewait+0x5c>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1e9      	bne.n	8009382 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80093b4:	68b8      	ldr	r0, [r7, #8]
 80093b6:	f7ff f803 	bl	80083c0 <tcp_abort>
  }
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20007b38 	.word	0x20007b38
 80093c8:	20007b2c 	.word	0x20007b2c

080093cc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <tcp_handle_closepend+0x48>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80093d8:	e014      	b.n	8009404 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	8b5b      	ldrh	r3, [r3, #26]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d009      	beq.n	8009400 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	8b5b      	ldrh	r3, [r3, #26]
 80093f0:	f023 0308 	bic.w	r3, r3, #8
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7fe fe8c 	bl	8008118 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e7      	bne.n	80093da <tcp_handle_closepend+0xe>
  }
}
 800940a:	bf00      	nop
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	20007b28 	.word	0x20007b28

08009418 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009422:	2001      	movs	r0, #1
 8009424:	f7fd fc14 	bl	8006c50 <memp_malloc>
 8009428:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d14e      	bne.n	80094ce <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009430:	f7ff ffcc 	bl	80093cc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009434:	f7ff ff9a 	bl	800936c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009438:	2001      	movs	r0, #1
 800943a:	f7fd fc09 	bl	8006c50 <memp_malloc>
 800943e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d139      	bne.n	80094ba <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009446:	2009      	movs	r0, #9
 8009448:	f7ff ff46 	bl	80092d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800944c:	2001      	movs	r0, #1
 800944e:	f7fd fbff 	bl	8006c50 <memp_malloc>
 8009452:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d125      	bne.n	80094a6 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800945a:	2008      	movs	r0, #8
 800945c:	f7ff ff3c 	bl	80092d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009460:	2001      	movs	r0, #1
 8009462:	f7fd fbf5 	bl	8006c50 <memp_malloc>
 8009466:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d111      	bne.n	8009492 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff fee3 	bl	800923c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009476:	2001      	movs	r0, #1
 8009478:	f7fd fbea 	bl	8006c50 <memp_malloc>
 800947c:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d006      	beq.n	8009492 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009484:	4b36      	ldr	r3, [pc, #216]	; (8009560 <tcp_alloc+0x148>)
 8009486:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800948a:	881a      	ldrh	r2, [r3, #0]
 800948c:	3a01      	subs	r2, #1
 800948e:	b292      	uxth	r2, r2
 8009490:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8009498:	4b31      	ldr	r3, [pc, #196]	; (8009560 <tcp_alloc+0x148>)
 800949a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800949e:	881a      	ldrh	r2, [r3, #0]
 80094a0:	3a01      	subs	r2, #1
 80094a2:	b292      	uxth	r2, r2
 80094a4:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d006      	beq.n	80094ba <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80094ac:	4b2c      	ldr	r3, [pc, #176]	; (8009560 <tcp_alloc+0x148>)
 80094ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094b2:	881a      	ldrh	r2, [r3, #0]
 80094b4:	3a01      	subs	r2, #1
 80094b6:	b292      	uxth	r2, r2
 80094b8:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d006      	beq.n	80094ce <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <tcp_alloc+0x148>)
 80094c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80094c6:	881a      	ldrh	r2, [r3, #0]
 80094c8:	3a01      	subs	r2, #1
 80094ca:	b292      	uxth	r2, r2
 80094cc:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d03f      	beq.n	8009554 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80094d4:	229c      	movs	r2, #156	; 0x9c
 80094d6:	2100      	movs	r1, #0
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f00a f8b1 	bl	8013640 <memset>
    pcb->prio = prio;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	79fa      	ldrb	r2, [r7, #7]
 80094e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80094ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80094f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	22ff      	movs	r2, #255	; 0xff
 8009502:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f44f 7206 	mov.w	r2, #536	; 0x218
 800950a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2206      	movs	r2, #6
 8009510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2206      	movs	r2, #6
 8009518:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009520:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2201      	movs	r2, #1
 8009526:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800952a:	4b0e      	ldr	r3, [pc, #56]	; (8009564 <tcp_alloc+0x14c>)
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009532:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <tcp_alloc+0x150>)
 8009534:	781a      	ldrb	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009540:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4a09      	ldr	r2, [pc, #36]	; (800956c <tcp_alloc+0x154>)
 8009548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	4a08      	ldr	r2, [pc, #32]	; (8009570 <tcp_alloc+0x158>)
 8009550:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009554:	68fb      	ldr	r3, [r7, #12]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20007a4c 	.word	0x20007a4c
 8009564:	20007b2c 	.word	0x20007b2c
 8009568:	20000596 	.word	0x20000596
 800956c:	080091d1 	.word	0x080091d1
 8009570:	006ddd00 	.word	0x006ddd00

08009574 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	4603      	mov	r3, r0
 800957c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800957e:	2040      	movs	r0, #64	; 0x40
 8009580:	f7ff ff4a 	bl	8009418 <tcp_alloc>
 8009584:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8009586:	68fb      	ldr	r3, [r7, #12]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	611a      	str	r2, [r3, #16]
  }
}
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
	...

080095b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00e      	beq.n	80095e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	7d1b      	ldrb	r3, [r3, #20]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d106      	bne.n	80095da <tcp_recv+0x26>
 80095cc:	4b07      	ldr	r3, [pc, #28]	; (80095ec <tcp_recv+0x38>)
 80095ce:	f240 72df 	movw	r2, #2015	; 0x7df
 80095d2:	4907      	ldr	r1, [pc, #28]	; (80095f0 <tcp_recv+0x3c>)
 80095d4:	4807      	ldr	r0, [pc, #28]	; (80095f4 <tcp_recv+0x40>)
 80095d6:	f00a f83b 	bl	8013650 <iprintf>
    pcb->recv = recv;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80095e2:	bf00      	nop
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	080156f0 	.word	0x080156f0
 80095f0:	08015c8c 	.word	0x08015c8c
 80095f4:	08015734 	.word	0x08015734

080095f8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00e      	beq.n	8009626 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	7d1b      	ldrb	r3, [r3, #20]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d106      	bne.n	800961e <tcp_sent+0x26>
 8009610:	4b07      	ldr	r3, [pc, #28]	; (8009630 <tcp_sent+0x38>)
 8009612:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009616:	4907      	ldr	r1, [pc, #28]	; (8009634 <tcp_sent+0x3c>)
 8009618:	4807      	ldr	r0, [pc, #28]	; (8009638 <tcp_sent+0x40>)
 800961a:	f00a f819 	bl	8013650 <iprintf>
    pcb->sent = sent;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009626:	bf00      	nop
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	080156f0 	.word	0x080156f0
 8009634:	08015cb4 	.word	0x08015cb4
 8009638:	08015734 	.word	0x08015734

0800963c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00e      	beq.n	800966a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	7d1b      	ldrb	r3, [r3, #20]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d106      	bne.n	8009662 <tcp_err+0x26>
 8009654:	4b07      	ldr	r3, [pc, #28]	; (8009674 <tcp_err+0x38>)
 8009656:	f640 020d 	movw	r2, #2061	; 0x80d
 800965a:	4907      	ldr	r1, [pc, #28]	; (8009678 <tcp_err+0x3c>)
 800965c:	4807      	ldr	r0, [pc, #28]	; (800967c <tcp_err+0x40>)
 800965e:	f009 fff7 	bl	8013650 <iprintf>
    pcb->errf = err;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	080156f0 	.word	0x080156f0
 8009678:	08015cdc 	.word	0x08015cdc
 800967c:	08015734 	.word	0x08015734

08009680 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d008      	beq.n	80096a2 <tcp_accept+0x22>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7d1b      	ldrb	r3, [r3, #20]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d104      	bne.n	80096a2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	619a      	str	r2, [r3, #24]
  }
}
 80096a2:	bf00      	nop
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
	...

080096b0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	4613      	mov	r3, r2
 80096bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d107      	bne.n	80096d4 <tcp_poll+0x24>
 80096c4:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <tcp_poll+0x50>)
 80096c6:	f640 023d 	movw	r2, #2109	; 0x83d
 80096ca:	490e      	ldr	r1, [pc, #56]	; (8009704 <tcp_poll+0x54>)
 80096cc:	480e      	ldr	r0, [pc, #56]	; (8009708 <tcp_poll+0x58>)
 80096ce:	f009 ffbf 	bl	8013650 <iprintf>
 80096d2:	e011      	b.n	80096f8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	7d1b      	ldrb	r3, [r3, #20]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d106      	bne.n	80096ea <tcp_poll+0x3a>
 80096dc:	4b08      	ldr	r3, [pc, #32]	; (8009700 <tcp_poll+0x50>)
 80096de:	f640 023e 	movw	r2, #2110	; 0x83e
 80096e2:	490a      	ldr	r1, [pc, #40]	; (800970c <tcp_poll+0x5c>)
 80096e4:	4808      	ldr	r0, [pc, #32]	; (8009708 <tcp_poll+0x58>)
 80096e6:	f009 ffb3 	bl	8013650 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	79fa      	ldrb	r2, [r7, #7]
 80096f6:	775a      	strb	r2, [r3, #29]
}
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	080156f0 	.word	0x080156f0
 8009704:	08015d04 	.word	0x08015d04
 8009708:	08015734 	.word	0x08015734
 800970c:	08015d1c 	.word	0x08015d1c

08009710 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d107      	bne.n	800972e <tcp_pcb_purge+0x1e>
 800971e:	4b21      	ldr	r3, [pc, #132]	; (80097a4 <tcp_pcb_purge+0x94>)
 8009720:	f640 0251 	movw	r2, #2129	; 0x851
 8009724:	4920      	ldr	r1, [pc, #128]	; (80097a8 <tcp_pcb_purge+0x98>)
 8009726:	4821      	ldr	r0, [pc, #132]	; (80097ac <tcp_pcb_purge+0x9c>)
 8009728:	f009 ff92 	bl	8013650 <iprintf>
 800972c:	e037      	b.n	800979e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	7d1b      	ldrb	r3, [r3, #20]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d033      	beq.n	800979e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800973a:	2b0a      	cmp	r3, #10
 800973c:	d02f      	beq.n	800979e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009742:	2b01      	cmp	r3, #1
 8009744:	d02b      	beq.n	800979e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe f894 	bl	8007880 <pbuf_free>
      pcb->refused_data = NULL;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f986 	bl	8009a78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009772:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fcb1 	bl	80090e0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff fcac 	bl	80090e0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	66da      	str	r2, [r3, #108]	; 0x6c
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	080156f0 	.word	0x080156f0
 80097a8:	08015d3c 	.word	0x08015d3c
 80097ac:	08015734 	.word	0x08015734

080097b0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <tcp_pcb_remove+0x1e>
 80097c0:	4b3e      	ldr	r3, [pc, #248]	; (80098bc <tcp_pcb_remove+0x10c>)
 80097c2:	f640 0283 	movw	r2, #2179	; 0x883
 80097c6:	493e      	ldr	r1, [pc, #248]	; (80098c0 <tcp_pcb_remove+0x110>)
 80097c8:	483e      	ldr	r0, [pc, #248]	; (80098c4 <tcp_pcb_remove+0x114>)
 80097ca:	f009 ff41 	bl	8013650 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d106      	bne.n	80097e2 <tcp_pcb_remove+0x32>
 80097d4:	4b39      	ldr	r3, [pc, #228]	; (80098bc <tcp_pcb_remove+0x10c>)
 80097d6:	f640 0284 	movw	r2, #2180	; 0x884
 80097da:	493b      	ldr	r1, [pc, #236]	; (80098c8 <tcp_pcb_remove+0x118>)
 80097dc:	4839      	ldr	r0, [pc, #228]	; (80098c4 <tcp_pcb_remove+0x114>)
 80097de:	f009 ff37 	bl	8013650 <iprintf>

  TCP_RMV(pcblist, pcb);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d105      	bne.n	80097f8 <tcp_pcb_remove+0x48>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e013      	b.n	8009820 <tcp_pcb_remove+0x70>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e00c      	b.n	800981a <tcp_pcb_remove+0x6a>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d104      	bne.n	8009814 <tcp_pcb_remove+0x64>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	68da      	ldr	r2, [r3, #12]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	60da      	str	r2, [r3, #12]
 8009812:	e005      	b.n	8009820 <tcp_pcb_remove+0x70>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1ef      	bne.n	8009800 <tcp_pcb_remove+0x50>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009826:	6838      	ldr	r0, [r7, #0]
 8009828:	f7ff ff72 	bl	8009710 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	7d1b      	ldrb	r3, [r3, #20]
 8009830:	2b0a      	cmp	r3, #10
 8009832:	d013      	beq.n	800985c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009838:	2b01      	cmp	r3, #1
 800983a:	d00f      	beq.n	800985c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	8b5b      	ldrh	r3, [r3, #26]
 8009840:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009844:	2b00      	cmp	r3, #0
 8009846:	d009      	beq.n	800985c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	8b5b      	ldrh	r3, [r3, #26]
 800984c:	f043 0302 	orr.w	r3, r3, #2
 8009850:	b29a      	uxth	r2, r3
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009856:	6838      	ldr	r0, [r7, #0]
 8009858:	f003 fc76 	bl	800d148 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	7d1b      	ldrb	r3, [r3, #20]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d020      	beq.n	80098a6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d006      	beq.n	800987a <tcp_pcb_remove+0xca>
 800986c:	4b13      	ldr	r3, [pc, #76]	; (80098bc <tcp_pcb_remove+0x10c>)
 800986e:	f640 0293 	movw	r2, #2195	; 0x893
 8009872:	4916      	ldr	r1, [pc, #88]	; (80098cc <tcp_pcb_remove+0x11c>)
 8009874:	4813      	ldr	r0, [pc, #76]	; (80098c4 <tcp_pcb_remove+0x114>)
 8009876:	f009 feeb 	bl	8013650 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987e:	2b00      	cmp	r3, #0
 8009880:	d006      	beq.n	8009890 <tcp_pcb_remove+0xe0>
 8009882:	4b0e      	ldr	r3, [pc, #56]	; (80098bc <tcp_pcb_remove+0x10c>)
 8009884:	f640 0294 	movw	r2, #2196	; 0x894
 8009888:	4911      	ldr	r1, [pc, #68]	; (80098d0 <tcp_pcb_remove+0x120>)
 800988a:	480e      	ldr	r0, [pc, #56]	; (80098c4 <tcp_pcb_remove+0x114>)
 800988c:	f009 fee0 	bl	8013650 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009894:	2b00      	cmp	r3, #0
 8009896:	d006      	beq.n	80098a6 <tcp_pcb_remove+0xf6>
 8009898:	4b08      	ldr	r3, [pc, #32]	; (80098bc <tcp_pcb_remove+0x10c>)
 800989a:	f640 0296 	movw	r2, #2198	; 0x896
 800989e:	490d      	ldr	r1, [pc, #52]	; (80098d4 <tcp_pcb_remove+0x124>)
 80098a0:	4808      	ldr	r0, [pc, #32]	; (80098c4 <tcp_pcb_remove+0x114>)
 80098a2:	f009 fed5 	bl	8013650 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2200      	movs	r2, #0
 80098aa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2200      	movs	r2, #0
 80098b0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	080156f0 	.word	0x080156f0
 80098c0:	08015d58 	.word	0x08015d58
 80098c4:	08015734 	.word	0x08015734
 80098c8:	08015d74 	.word	0x08015d74
 80098cc:	08015d94 	.word	0x08015d94
 80098d0:	08015dac 	.word	0x08015dac
 80098d4:	08015dc8 	.word	0x08015dc8

080098d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d106      	bne.n	80098f4 <tcp_next_iss+0x1c>
 80098e6:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <tcp_next_iss+0x38>)
 80098e8:	f640 02af 	movw	r2, #2223	; 0x8af
 80098ec:	4909      	ldr	r1, [pc, #36]	; (8009914 <tcp_next_iss+0x3c>)
 80098ee:	480a      	ldr	r0, [pc, #40]	; (8009918 <tcp_next_iss+0x40>)
 80098f0:	f009 feae 	bl	8013650 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80098f4:	4b09      	ldr	r3, [pc, #36]	; (800991c <tcp_next_iss+0x44>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	4b09      	ldr	r3, [pc, #36]	; (8009920 <tcp_next_iss+0x48>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4413      	add	r3, r2
 80098fe:	4a07      	ldr	r2, [pc, #28]	; (800991c <tcp_next_iss+0x44>)
 8009900:	6013      	str	r3, [r2, #0]
  return iss;
 8009902:	4b06      	ldr	r3, [pc, #24]	; (800991c <tcp_next_iss+0x44>)
 8009904:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	080156f0 	.word	0x080156f0
 8009914:	08015de0 	.word	0x08015de0
 8009918:	08015734 	.word	0x08015734
 800991c:	2000001c 	.word	0x2000001c
 8009920:	20007b2c 	.word	0x20007b2c

08009924 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d106      	bne.n	8009946 <tcp_eff_send_mss_netif+0x22>
 8009938:	4b14      	ldr	r3, [pc, #80]	; (800998c <tcp_eff_send_mss_netif+0x68>)
 800993a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800993e:	4914      	ldr	r1, [pc, #80]	; (8009990 <tcp_eff_send_mss_netif+0x6c>)
 8009940:	4814      	ldr	r0, [pc, #80]	; (8009994 <tcp_eff_send_mss_netif+0x70>)
 8009942:	f009 fe85 	bl	8013650 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800994c:	89fb      	ldrh	r3, [r7, #14]
 800994e:	e019      	b.n	8009984 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009954:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009956:	8afb      	ldrh	r3, [r7, #22]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d012      	beq.n	8009982 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800995c:	2328      	movs	r3, #40	; 0x28
 800995e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009960:	8afa      	ldrh	r2, [r7, #22]
 8009962:	8abb      	ldrh	r3, [r7, #20]
 8009964:	429a      	cmp	r2, r3
 8009966:	d904      	bls.n	8009972 <tcp_eff_send_mss_netif+0x4e>
 8009968:	8afa      	ldrh	r2, [r7, #22]
 800996a:	8abb      	ldrh	r3, [r7, #20]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	b29b      	uxth	r3, r3
 8009970:	e000      	b.n	8009974 <tcp_eff_send_mss_netif+0x50>
 8009972:	2300      	movs	r3, #0
 8009974:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009976:	8a7a      	ldrh	r2, [r7, #18]
 8009978:	89fb      	ldrh	r3, [r7, #14]
 800997a:	4293      	cmp	r3, r2
 800997c:	bf28      	it	cs
 800997e:	4613      	movcs	r3, r2
 8009980:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009982:	89fb      	ldrh	r3, [r7, #14]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	080156f0 	.word	0x080156f0
 8009990:	08015dfc 	.word	0x08015dfc
 8009994:	08015734 	.word	0x08015734

08009998 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d119      	bne.n	80099e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80099ac:	4b10      	ldr	r3, [pc, #64]	; (80099f0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80099ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80099b2:	4910      	ldr	r1, [pc, #64]	; (80099f4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80099b4:	4810      	ldr	r0, [pc, #64]	; (80099f8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80099b6:	f009 fe4b 	bl	8013650 <iprintf>

  while (pcb != NULL) {
 80099ba:	e011      	b.n	80099e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d108      	bne.n	80099da <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7fe fcf6 	bl	80083c0 <tcp_abort>
      pcb = next;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	e002      	b.n	80099e0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1ea      	bne.n	80099bc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	080156f0 	.word	0x080156f0
 80099f4:	08015e24 	.word	0x08015e24
 80099f8:	08015734 	.word	0x08015734

080099fc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d02a      	beq.n	8009a62 <tcp_netif_ip_addr_changed+0x66>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d026      	beq.n	8009a62 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009a14:	4b15      	ldr	r3, [pc, #84]	; (8009a6c <tcp_netif_ip_addr_changed+0x70>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff ffbc 	bl	8009998 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009a20:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <tcp_netif_ip_addr_changed+0x74>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff ffb6 	bl	8009998 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d017      	beq.n	8009a62 <tcp_netif_ip_addr_changed+0x66>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d013      	beq.n	8009a62 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009a3a:	4b0e      	ldr	r3, [pc, #56]	; (8009a74 <tcp_netif_ip_addr_changed+0x78>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e00c      	b.n	8009a5c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d103      	bne.n	8009a56 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1ef      	bne.n	8009a42 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009a62:	bf00      	nop
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	20007b28 	.word	0x20007b28
 8009a70:	20007b34 	.word	0x20007b34
 8009a74:	20007b30 	.word	0x20007b30

08009a78 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d007      	beq.n	8009a98 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fb27 	bl	80090e0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009aa0:	b590      	push	{r4, r7, lr}
 8009aa2:	b08d      	sub	sp, #52	; 0x34
 8009aa4:	af04      	add	r7, sp, #16
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d105      	bne.n	8009abc <tcp_input+0x1c>
 8009ab0:	4b5b      	ldr	r3, [pc, #364]	; (8009c20 <tcp_input+0x180>)
 8009ab2:	2283      	movs	r2, #131	; 0x83
 8009ab4:	495b      	ldr	r1, [pc, #364]	; (8009c24 <tcp_input+0x184>)
 8009ab6:	485c      	ldr	r0, [pc, #368]	; (8009c28 <tcp_input+0x188>)
 8009ab8:	f009 fdca 	bl	8013650 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8009abc:	4b5b      	ldr	r3, [pc, #364]	; (8009c2c <tcp_input+0x18c>)
 8009abe:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	4b59      	ldr	r3, [pc, #356]	; (8009c2c <tcp_input+0x18c>)
 8009ac8:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	4a57      	ldr	r2, [pc, #348]	; (8009c30 <tcp_input+0x190>)
 8009ad2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	895b      	ldrh	r3, [r3, #10]
 8009ad8:	2b13      	cmp	r3, #19
 8009ada:	d809      	bhi.n	8009af0 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8009adc:	4b53      	ldr	r3, [pc, #332]	; (8009c2c <tcp_input+0x18c>)
 8009ade:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	4b51      	ldr	r3, [pc, #324]	; (8009c2c <tcp_input+0x18c>)
 8009ae8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8009aec:	f000 bc36 	b.w	800a35c <tcp_input+0x8bc>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009af0:	4b50      	ldr	r3, [pc, #320]	; (8009c34 <tcp_input+0x194>)
 8009af2:	695b      	ldr	r3, [r3, #20]
 8009af4:	4a4f      	ldr	r2, [pc, #316]	; (8009c34 <tcp_input+0x194>)
 8009af6:	6812      	ldr	r2, [r2, #0]
 8009af8:	4611      	mov	r1, r2
 8009afa:	4618      	mov	r0, r3
 8009afc:	f008 fcf4 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d105      	bne.n	8009b12 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009b06:	4b4b      	ldr	r3, [pc, #300]	; (8009c34 <tcp_input+0x194>)
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009b0e:	2be0      	cmp	r3, #224	; 0xe0
 8009b10:	d109      	bne.n	8009b26 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8009b12:	4b46      	ldr	r3, [pc, #280]	; (8009c2c <tcp_input+0x18c>)
 8009b14:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8009b18:	3301      	adds	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	4b43      	ldr	r3, [pc, #268]	; (8009c2c <tcp_input+0x18c>)
 8009b1e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 8009b22:	f000 bc1b 	b.w	800a35c <tcp_input+0x8bc>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	891a      	ldrh	r2, [r3, #8]
 8009b2a:	4b43      	ldr	r3, [pc, #268]	; (8009c38 <tcp_input+0x198>)
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	4b43      	ldr	r3, [pc, #268]	; (8009c3c <tcp_input+0x19c>)
 8009b30:	2106      	movs	r1, #6
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7fc fb76 	bl	8006224 <ip_chksum_pseudo>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8009b3c:	8a3b      	ldrh	r3, [r7, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d009      	beq.n	8009b56 <tcp_input+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 8009b42:	4b3a      	ldr	r3, [pc, #232]	; (8009c2c <tcp_input+0x18c>)
 8009b44:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009b48:	3301      	adds	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	4b37      	ldr	r3, [pc, #220]	; (8009c2c <tcp_input+0x18c>)
 8009b4e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      goto dropped;
 8009b52:	f000 bc03 	b.w	800a35c <tcp_input+0x8bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009b56:	4b36      	ldr	r3, [pc, #216]	; (8009c30 <tcp_input+0x190>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	899b      	ldrh	r3, [r3, #12]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fc f9c4 	bl	8005eec <lwip_htons>
 8009b64:	4603      	mov	r3, r0
 8009b66:	0b1b      	lsrs	r3, r3, #12
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	2b13      	cmp	r3, #19
 8009b74:	d905      	bls.n	8009b82 <tcp_input+0xe2>
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	891b      	ldrh	r3, [r3, #8]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d908      	bls.n	8009b94 <tcp_input+0xf4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8009b82:	4b2a      	ldr	r3, [pc, #168]	; (8009c2c <tcp_input+0x18c>)
 8009b84:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009b88:	3301      	adds	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	4b27      	ldr	r3, [pc, #156]	; (8009c2c <tcp_input+0x18c>)
 8009b8e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8009b92:	e3e3      	b.n	800a35c <tcp_input+0x8bc>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	3b14      	subs	r3, #20
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	4b28      	ldr	r3, [pc, #160]	; (8009c40 <tcp_input+0x1a0>)
 8009b9e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009ba0:	4b28      	ldr	r3, [pc, #160]	; (8009c44 <tcp_input+0x1a4>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	895a      	ldrh	r2, [r3, #10]
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d309      	bcc.n	8009bc6 <tcp_input+0x126>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009bb2:	4b23      	ldr	r3, [pc, #140]	; (8009c40 <tcp_input+0x1a0>)
 8009bb4:	881a      	ldrh	r2, [r3, #0]
 8009bb6:	4b24      	ldr	r3, [pc, #144]	; (8009c48 <tcp_input+0x1a8>)
 8009bb8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7fd fdd8 	bl	8007774 <pbuf_remove_header>
 8009bc4:	e06e      	b.n	8009ca4 <tcp_input+0x204>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d105      	bne.n	8009bda <tcp_input+0x13a>
 8009bce:	4b14      	ldr	r3, [pc, #80]	; (8009c20 <tcp_input+0x180>)
 8009bd0:	22c2      	movs	r2, #194	; 0xc2
 8009bd2:	491e      	ldr	r1, [pc, #120]	; (8009c4c <tcp_input+0x1ac>)
 8009bd4:	4814      	ldr	r0, [pc, #80]	; (8009c28 <tcp_input+0x188>)
 8009bd6:	f009 fd3b 	bl	8013650 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009bda:	2114      	movs	r1, #20
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7fd fdc9 	bl	8007774 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	895a      	ldrh	r2, [r3, #10]
 8009be6:	4b18      	ldr	r3, [pc, #96]	; (8009c48 <tcp_input+0x1a8>)
 8009be8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009bea:	4b15      	ldr	r3, [pc, #84]	; (8009c40 <tcp_input+0x1a0>)
 8009bec:	881a      	ldrh	r2, [r3, #0]
 8009bee:	4b16      	ldr	r3, [pc, #88]	; (8009c48 <tcp_input+0x1a8>)
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009bf6:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <tcp_input+0x1a8>)
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7fd fdb9 	bl	8007774 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	895b      	ldrh	r3, [r3, #10]
 8009c08:	89ba      	ldrh	r2, [r7, #12]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d920      	bls.n	8009c50 <tcp_input+0x1b0>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8009c0e:	4b07      	ldr	r3, [pc, #28]	; (8009c2c <tcp_input+0x18c>)
 8009c10:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009c14:	3301      	adds	r3, #1
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <tcp_input+0x18c>)
 8009c1a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8009c1e:	e39d      	b.n	800a35c <tcp_input+0x8bc>
 8009c20:	08015e58 	.word	0x08015e58
 8009c24:	08015e8c 	.word	0x08015e8c
 8009c28:	08015ea4 	.word	0x08015ea4
 8009c2c:	20007a4c 	.word	0x20007a4c
 8009c30:	200005a8 	.word	0x200005a8
 8009c34:	20004538 	.word	0x20004538
 8009c38:	2000454c 	.word	0x2000454c
 8009c3c:	20004548 	.word	0x20004548
 8009c40:	200005ac 	.word	0x200005ac
 8009c44:	200005b0 	.word	0x200005b0
 8009c48:	200005ae 	.word	0x200005ae
 8009c4c:	08015ecc 	.word	0x08015ecc
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	4a91      	ldr	r2, [pc, #580]	; (8009e9c <tcp_input+0x3fc>)
 8009c58:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	89ba      	ldrh	r2, [r7, #12]
 8009c60:	4611      	mov	r1, r2
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fd fd86 	bl	8007774 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	891a      	ldrh	r2, [r3, #8]
 8009c6c:	89bb      	ldrh	r3, [r7, #12]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	895b      	ldrh	r3, [r3, #10]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d005      	beq.n	8009c8a <tcp_input+0x1ea>
 8009c7e:	4b88      	ldr	r3, [pc, #544]	; (8009ea0 <tcp_input+0x400>)
 8009c80:	22df      	movs	r2, #223	; 0xdf
 8009c82:	4988      	ldr	r1, [pc, #544]	; (8009ea4 <tcp_input+0x404>)
 8009c84:	4888      	ldr	r0, [pc, #544]	; (8009ea8 <tcp_input+0x408>)
 8009c86:	f009 fce3 	bl	8013650 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	891a      	ldrh	r2, [r3, #8]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	891b      	ldrh	r3, [r3, #8]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d005      	beq.n	8009ca4 <tcp_input+0x204>
 8009c98:	4b81      	ldr	r3, [pc, #516]	; (8009ea0 <tcp_input+0x400>)
 8009c9a:	22e0      	movs	r2, #224	; 0xe0
 8009c9c:	4983      	ldr	r1, [pc, #524]	; (8009eac <tcp_input+0x40c>)
 8009c9e:	4882      	ldr	r0, [pc, #520]	; (8009ea8 <tcp_input+0x408>)
 8009ca0:	f009 fcd6 	bl	8013650 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009ca4:	4b82      	ldr	r3, [pc, #520]	; (8009eb0 <tcp_input+0x410>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	4a80      	ldr	r2, [pc, #512]	; (8009eb0 <tcp_input+0x410>)
 8009cae:	6814      	ldr	r4, [r2, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fc f91b 	bl	8005eec <lwip_htons>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009cba:	4b7d      	ldr	r3, [pc, #500]	; (8009eb0 <tcp_input+0x410>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	885b      	ldrh	r3, [r3, #2]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	4a7b      	ldr	r2, [pc, #492]	; (8009eb0 <tcp_input+0x410>)
 8009cc4:	6814      	ldr	r4, [r2, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fc f910 	bl	8005eec <lwip_htons>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009cd0:	4b77      	ldr	r3, [pc, #476]	; (8009eb0 <tcp_input+0x410>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	4a76      	ldr	r2, [pc, #472]	; (8009eb0 <tcp_input+0x410>)
 8009cd8:	6814      	ldr	r4, [r2, #0]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fc f91b 	bl	8005f16 <lwip_htonl>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	6063      	str	r3, [r4, #4]
 8009ce4:	6863      	ldr	r3, [r4, #4]
 8009ce6:	4a73      	ldr	r2, [pc, #460]	; (8009eb4 <tcp_input+0x414>)
 8009ce8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009cea:	4b71      	ldr	r3, [pc, #452]	; (8009eb0 <tcp_input+0x410>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	4a6f      	ldr	r2, [pc, #444]	; (8009eb0 <tcp_input+0x410>)
 8009cf2:	6814      	ldr	r4, [r2, #0]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fc f90e 	bl	8005f16 <lwip_htonl>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	60a3      	str	r3, [r4, #8]
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	4a6d      	ldr	r2, [pc, #436]	; (8009eb8 <tcp_input+0x418>)
 8009d02:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009d04:	4b6a      	ldr	r3, [pc, #424]	; (8009eb0 <tcp_input+0x410>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	89db      	ldrh	r3, [r3, #14]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4a68      	ldr	r2, [pc, #416]	; (8009eb0 <tcp_input+0x410>)
 8009d0e:	6814      	ldr	r4, [r2, #0]
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fc f8eb 	bl	8005eec <lwip_htons>
 8009d16:	4603      	mov	r3, r0
 8009d18:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009d1a:	4b65      	ldr	r3, [pc, #404]	; (8009eb0 <tcp_input+0x410>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	899b      	ldrh	r3, [r3, #12]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fc f8e2 	bl	8005eec <lwip_htons>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d30:	b2da      	uxtb	r2, r3
 8009d32:	4b62      	ldr	r3, [pc, #392]	; (8009ebc <tcp_input+0x41c>)
 8009d34:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	891a      	ldrh	r2, [r3, #8]
 8009d3a:	4b61      	ldr	r3, [pc, #388]	; (8009ec0 <tcp_input+0x420>)
 8009d3c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009d3e:	4b5f      	ldr	r3, [pc, #380]	; (8009ebc <tcp_input+0x41c>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	f003 0303 	and.w	r3, r3, #3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d014      	beq.n	8009d74 <tcp_input+0x2d4>
    tcplen++;
 8009d4a:	4b5d      	ldr	r3, [pc, #372]	; (8009ec0 <tcp_input+0x420>)
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	4b5b      	ldr	r3, [pc, #364]	; (8009ec0 <tcp_input+0x420>)
 8009d54:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	891a      	ldrh	r2, [r3, #8]
 8009d5a:	4b59      	ldr	r3, [pc, #356]	; (8009ec0 <tcp_input+0x420>)
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d908      	bls.n	8009d74 <tcp_input+0x2d4>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8009d62:	4b58      	ldr	r3, [pc, #352]	; (8009ec4 <tcp_input+0x424>)
 8009d64:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009d68:	3301      	adds	r3, #1
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	4b55      	ldr	r3, [pc, #340]	; (8009ec4 <tcp_input+0x424>)
 8009d6e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8009d72:	e2f3      	b.n	800a35c <tcp_input+0x8bc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009d74:	2300      	movs	r3, #0
 8009d76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d78:	4b53      	ldr	r3, [pc, #332]	; (8009ec8 <tcp_input+0x428>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	61fb      	str	r3, [r7, #28]
 8009d7e:	e07f      	b.n	8009e80 <tcp_input+0x3e0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	7d1b      	ldrb	r3, [r3, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d105      	bne.n	8009d94 <tcp_input+0x2f4>
 8009d88:	4b45      	ldr	r3, [pc, #276]	; (8009ea0 <tcp_input+0x400>)
 8009d8a:	22fb      	movs	r2, #251	; 0xfb
 8009d8c:	494f      	ldr	r1, [pc, #316]	; (8009ecc <tcp_input+0x42c>)
 8009d8e:	4846      	ldr	r0, [pc, #280]	; (8009ea8 <tcp_input+0x408>)
 8009d90:	f009 fc5e 	bl	8013650 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	7d1b      	ldrb	r3, [r3, #20]
 8009d98:	2b0a      	cmp	r3, #10
 8009d9a:	d105      	bne.n	8009da8 <tcp_input+0x308>
 8009d9c:	4b40      	ldr	r3, [pc, #256]	; (8009ea0 <tcp_input+0x400>)
 8009d9e:	22fc      	movs	r2, #252	; 0xfc
 8009da0:	494b      	ldr	r1, [pc, #300]	; (8009ed0 <tcp_input+0x430>)
 8009da2:	4841      	ldr	r0, [pc, #260]	; (8009ea8 <tcp_input+0x408>)
 8009da4:	f009 fc54 	bl	8013650 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	7d1b      	ldrb	r3, [r3, #20]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d105      	bne.n	8009dbc <tcp_input+0x31c>
 8009db0:	4b3b      	ldr	r3, [pc, #236]	; (8009ea0 <tcp_input+0x400>)
 8009db2:	22fd      	movs	r2, #253	; 0xfd
 8009db4:	4947      	ldr	r1, [pc, #284]	; (8009ed4 <tcp_input+0x434>)
 8009db6:	483c      	ldr	r0, [pc, #240]	; (8009ea8 <tcp_input+0x408>)
 8009db8:	f009 fc4a 	bl	8013650 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	7a1b      	ldrb	r3, [r3, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00c      	beq.n	8009dde <tcp_input+0x33e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	7a1a      	ldrb	r2, [r3, #8]
 8009dc8:	4b43      	ldr	r3, [pc, #268]	; (8009ed8 <tcp_input+0x438>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d002      	beq.n	8009dde <tcp_input+0x33e>
      prev = pcb;
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	61bb      	str	r3, [r7, #24]
      continue;
 8009ddc:	e04d      	b.n	8009e7a <tcp_input+0x3da>
    }

    if (pcb->remote_port == tcphdr->src &&
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	8b1a      	ldrh	r2, [r3, #24]
 8009de2:	4b33      	ldr	r3, [pc, #204]	; (8009eb0 <tcp_input+0x410>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d143      	bne.n	8009e76 <tcp_input+0x3d6>
        pcb->local_port == tcphdr->dest &&
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	8ada      	ldrh	r2, [r3, #22]
 8009df2:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <tcp_input+0x410>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	885b      	ldrh	r3, [r3, #2]
 8009df8:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d13b      	bne.n	8009e76 <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	4b35      	ldr	r3, [pc, #212]	; (8009ed8 <tcp_input+0x438>)
 8009e04:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d135      	bne.n	8009e76 <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b32      	ldr	r3, [pc, #200]	; (8009ed8 <tcp_input+0x438>)
 8009e10:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d12f      	bne.n	8009e76 <tcp_input+0x3d6>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	69fa      	ldr	r2, [r7, #28]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d106      	bne.n	8009e2e <tcp_input+0x38e>
 8009e20:	4b1f      	ldr	r3, [pc, #124]	; (8009ea0 <tcp_input+0x400>)
 8009e22:	f240 120d 	movw	r2, #269	; 0x10d
 8009e26:	492d      	ldr	r1, [pc, #180]	; (8009edc <tcp_input+0x43c>)
 8009e28:	481f      	ldr	r0, [pc, #124]	; (8009ea8 <tcp_input+0x408>)
 8009e2a:	f009 fc11 	bl	8013650 <iprintf>
      if (prev != NULL) {
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00b      	beq.n	8009e4c <tcp_input+0x3ac>
        prev->next = pcb->next;
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	68da      	ldr	r2, [r3, #12]
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009e3c:	4b22      	ldr	r3, [pc, #136]	; (8009ec8 <tcp_input+0x428>)
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009e44:	4a20      	ldr	r2, [pc, #128]	; (8009ec8 <tcp_input+0x428>)
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	e007      	b.n	8009e5c <tcp_input+0x3bc>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8009e4c:	4b1d      	ldr	r3, [pc, #116]	; (8009ec4 <tcp_input+0x424>)
 8009e4e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8009e52:	3301      	adds	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	4b1b      	ldr	r3, [pc, #108]	; (8009ec4 <tcp_input+0x424>)
 8009e58:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d111      	bne.n	8009e8a <tcp_input+0x3ea>
 8009e66:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <tcp_input+0x400>)
 8009e68:	f240 1215 	movw	r2, #277	; 0x115
 8009e6c:	491c      	ldr	r1, [pc, #112]	; (8009ee0 <tcp_input+0x440>)
 8009e6e:	480e      	ldr	r0, [pc, #56]	; (8009ea8 <tcp_input+0x408>)
 8009e70:	f009 fbee 	bl	8013650 <iprintf>
      break;
 8009e74:	e009      	b.n	8009e8a <tcp_input+0x3ea>
    }
    prev = pcb;
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f47f af7c 	bne.w	8009d80 <tcp_input+0x2e0>
 8009e88:	e000      	b.n	8009e8c <tcp_input+0x3ec>
      break;
 8009e8a:	bf00      	nop
  }

  if (pcb == NULL) {
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f040 80c4 	bne.w	800a01c <tcp_input+0x57c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e94:	4b13      	ldr	r3, [pc, #76]	; (8009ee4 <tcp_input+0x444>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	61fb      	str	r3, [r7, #28]
 8009e9a:	e065      	b.n	8009f68 <tcp_input+0x4c8>
 8009e9c:	200005b0 	.word	0x200005b0
 8009ea0:	08015e58 	.word	0x08015e58
 8009ea4:	08015edc 	.word	0x08015edc
 8009ea8:	08015ea4 	.word	0x08015ea4
 8009eac:	08015ee8 	.word	0x08015ee8
 8009eb0:	200005a8 	.word	0x200005a8
 8009eb4:	200005b8 	.word	0x200005b8
 8009eb8:	200005bc 	.word	0x200005bc
 8009ebc:	200005c4 	.word	0x200005c4
 8009ec0:	200005c2 	.word	0x200005c2
 8009ec4:	20007a4c 	.word	0x20007a4c
 8009ec8:	20007b28 	.word	0x20007b28
 8009ecc:	08015f08 	.word	0x08015f08
 8009ed0:	08015f30 	.word	0x08015f30
 8009ed4:	08015f5c 	.word	0x08015f5c
 8009ed8:	20004538 	.word	0x20004538
 8009edc:	08015f84 	.word	0x08015f84
 8009ee0:	08015fb0 	.word	0x08015fb0
 8009ee4:	20007b38 	.word	0x20007b38
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	7d1b      	ldrb	r3, [r3, #20]
 8009eec:	2b0a      	cmp	r3, #10
 8009eee:	d006      	beq.n	8009efe <tcp_input+0x45e>
 8009ef0:	4b91      	ldr	r3, [pc, #580]	; (800a138 <tcp_input+0x698>)
 8009ef2:	f240 121f 	movw	r2, #287	; 0x11f
 8009ef6:	4991      	ldr	r1, [pc, #580]	; (800a13c <tcp_input+0x69c>)
 8009ef8:	4891      	ldr	r0, [pc, #580]	; (800a140 <tcp_input+0x6a0>)
 8009efa:	f009 fba9 	bl	8013650 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	7a1b      	ldrb	r3, [r3, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d009      	beq.n	8009f1a <tcp_input+0x47a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	7a1a      	ldrb	r2, [r3, #8]
 8009f0a:	4b8e      	ldr	r3, [pc, #568]	; (800a144 <tcp_input+0x6a4>)
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f12:	3301      	adds	r3, #1
 8009f14:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d122      	bne.n	8009f60 <tcp_input+0x4c0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	8b1a      	ldrh	r2, [r3, #24]
 8009f1e:	4b8a      	ldr	r3, [pc, #552]	; (800a148 <tcp_input+0x6a8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d11b      	bne.n	8009f62 <tcp_input+0x4c2>
          pcb->local_port == tcphdr->dest &&
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	8ada      	ldrh	r2, [r3, #22]
 8009f2e:	4b86      	ldr	r3, [pc, #536]	; (800a148 <tcp_input+0x6a8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	885b      	ldrh	r3, [r3, #2]
 8009f34:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d113      	bne.n	8009f62 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	4b81      	ldr	r3, [pc, #516]	; (800a144 <tcp_input+0x6a4>)
 8009f40:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d10d      	bne.n	8009f62 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	4b7e      	ldr	r3, [pc, #504]	; (800a144 <tcp_input+0x6a4>)
 8009f4c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d107      	bne.n	8009f62 <tcp_input+0x4c2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009f52:	69f8      	ldr	r0, [r7, #28]
 8009f54:	f000 fb78 	bl	800a648 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fd fc91 	bl	8007880 <pbuf_free>
        return;
 8009f5e:	e20a      	b.n	800a376 <tcp_input+0x8d6>
        continue;
 8009f60:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	61fb      	str	r3, [r7, #28]
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1bc      	bne.n	8009ee8 <tcp_input+0x448>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f72:	4b76      	ldr	r3, [pc, #472]	; (800a14c <tcp_input+0x6ac>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	617b      	str	r3, [r7, #20]
 8009f78:	e02a      	b.n	8009fd0 <tcp_input+0x530>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	7a1b      	ldrb	r3, [r3, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00c      	beq.n	8009f9c <tcp_input+0x4fc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	7a1a      	ldrb	r2, [r3, #8]
 8009f86:	4b6f      	ldr	r3, [pc, #444]	; (800a144 <tcp_input+0x6a4>)
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f8e:	3301      	adds	r3, #1
 8009f90:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d002      	beq.n	8009f9c <tcp_input+0x4fc>
        prev = (struct tcp_pcb *)lpcb;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	61bb      	str	r3, [r7, #24]
        continue;
 8009f9a:	e016      	b.n	8009fca <tcp_input+0x52a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	8ada      	ldrh	r2, [r3, #22]
 8009fa0:	4b69      	ldr	r3, [pc, #420]	; (800a148 <tcp_input+0x6a8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	885b      	ldrh	r3, [r3, #2]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d10c      	bne.n	8009fc6 <tcp_input+0x526>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	4b64      	ldr	r3, [pc, #400]	; (800a144 <tcp_input+0x6a4>)
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d00f      	beq.n	8009fd8 <tcp_input+0x538>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00d      	beq.n	8009fda <tcp_input+0x53a>
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <tcp_input+0x53a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1d1      	bne.n	8009f7a <tcp_input+0x4da>
 8009fd6:	e000      	b.n	8009fda <tcp_input+0x53a>
            break;
 8009fd8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d01d      	beq.n	800a01c <tcp_input+0x57c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <tcp_input+0x55e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	68da      	ldr	r2, [r3, #12]
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009fee:	4b57      	ldr	r3, [pc, #348]	; (800a14c <tcp_input+0x6ac>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009ff6:	4a55      	ldr	r2, [pc, #340]	; (800a14c <tcp_input+0x6ac>)
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	e007      	b.n	800a00e <tcp_input+0x56e>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8009ffe:	4b54      	ldr	r3, [pc, #336]	; (800a150 <tcp_input+0x6b0>)
 800a000:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800a004:	3301      	adds	r3, #1
 800a006:	b29a      	uxth	r2, r3
 800a008:	4b51      	ldr	r3, [pc, #324]	; (800a150 <tcp_input+0x6b0>)
 800a00a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a00e:	6978      	ldr	r0, [r7, #20]
 800a010:	f000 fa12 	bl	800a438 <tcp_listen_input>
      }
      pbuf_free(p);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7fd fc33 	bl	8007880 <pbuf_free>
      return;
 800a01a:	e1ac      	b.n	800a376 <tcp_input+0x8d6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 8162 	beq.w	800a2e8 <tcp_input+0x848>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a024:	4b4b      	ldr	r3, [pc, #300]	; (800a154 <tcp_input+0x6b4>)
 800a026:	2200      	movs	r2, #0
 800a028:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	891a      	ldrh	r2, [r3, #8]
 800a02e:	4b49      	ldr	r3, [pc, #292]	; (800a154 <tcp_input+0x6b4>)
 800a030:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a032:	4a48      	ldr	r2, [pc, #288]	; (800a154 <tcp_input+0x6b4>)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a038:	4b43      	ldr	r3, [pc, #268]	; (800a148 <tcp_input+0x6a8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a45      	ldr	r2, [pc, #276]	; (800a154 <tcp_input+0x6b4>)
 800a03e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a040:	4b45      	ldr	r3, [pc, #276]	; (800a158 <tcp_input+0x6b8>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a046:	4b45      	ldr	r3, [pc, #276]	; (800a15c <tcp_input+0x6bc>)
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a04c:	4b44      	ldr	r3, [pc, #272]	; (800a160 <tcp_input+0x6c0>)
 800a04e:	2200      	movs	r2, #0
 800a050:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a052:	4b44      	ldr	r3, [pc, #272]	; (800a164 <tcp_input+0x6c4>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d006      	beq.n	800a06c <tcp_input+0x5cc>
      p->flags |= PBUF_FLAG_PUSH;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	7b5b      	ldrb	r3, [r3, #13]
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	b2da      	uxtb	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01e      	beq.n	800a0b2 <tcp_input+0x612>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a074:	69f8      	ldr	r0, [r7, #28]
 800a076:	f7fe ffb7 	bl	8008fe8 <tcp_process_refused_data>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f113 0f0d 	cmn.w	r3, #13
 800a080:	d007      	beq.n	800a092 <tcp_input+0x5f2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a086:	2b00      	cmp	r3, #0
 800a088:	d013      	beq.n	800a0b2 <tcp_input+0x612>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a08a:	4b37      	ldr	r3, [pc, #220]	; (800a168 <tcp_input+0x6c8>)
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00f      	beq.n	800a0b2 <tcp_input+0x612>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <tcp_input+0x600>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a09a:	69f8      	ldr	r0, [r7, #28]
 800a09c:	f003 fe90 	bl	800ddc0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 800a0a0:	4b2b      	ldr	r3, [pc, #172]	; (800a150 <tcp_input+0x6b0>)
 800a0a2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	b29a      	uxth	r2, r3
 800a0aa:	4b29      	ldr	r3, [pc, #164]	; (800a150 <tcp_input+0x6b0>)
 800a0ac:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a0b0:	e107      	b.n	800a2c2 <tcp_input+0x822>
      }
    }
    tcp_input_pcb = pcb;
 800a0b2:	4a2e      	ldr	r2, [pc, #184]	; (800a16c <tcp_input+0x6cc>)
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a0b8:	69f8      	ldr	r0, [r7, #28]
 800a0ba:	f000 fb3f 	bl	800a73c <tcp_process>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a0c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0c6:	f113 0f0d 	cmn.w	r3, #13
 800a0ca:	f000 80ef 	beq.w	800a2ac <tcp_input+0x80c>
      if (recv_flags & TF_RESET) {
 800a0ce:	4b23      	ldr	r3, [pc, #140]	; (800a15c <tcp_input+0x6bc>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	f003 0308 	and.w	r3, r3, #8
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d015      	beq.n	800a106 <tcp_input+0x666>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d008      	beq.n	800a0f6 <tcp_input+0x656>
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	6912      	ldr	r2, [r2, #16]
 800a0ee:	f06f 010d 	mvn.w	r1, #13
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a0f6:	69f9      	ldr	r1, [r7, #28]
 800a0f8:	481d      	ldr	r0, [pc, #116]	; (800a170 <tcp_input+0x6d0>)
 800a0fa:	f7ff fb59 	bl	80097b0 <tcp_pcb_remove>
        tcp_free(pcb);
 800a0fe:	69f8      	ldr	r0, [r7, #28]
 800a100:	f7fd fe76 	bl	8007df0 <tcp_free>
 800a104:	e0dd      	b.n	800a2c2 <tcp_input+0x822>
      } else {
        err = ERR_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a10a:	4b15      	ldr	r3, [pc, #84]	; (800a160 <tcp_input+0x6c0>)
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d03b      	beq.n	800a18a <tcp_input+0x6ea>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a112:	4b13      	ldr	r3, [pc, #76]	; (800a160 <tcp_input+0x6c0>)
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d028      	beq.n	800a174 <tcp_input+0x6d4>
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a128:	69fa      	ldr	r2, [r7, #28]
 800a12a:	6910      	ldr	r0, [r2, #16]
 800a12c:	897a      	ldrh	r2, [r7, #10]
 800a12e:	69f9      	ldr	r1, [r7, #28]
 800a130:	4798      	blx	r3
 800a132:	4603      	mov	r3, r0
 800a134:	74fb      	strb	r3, [r7, #19]
 800a136:	e01f      	b.n	800a178 <tcp_input+0x6d8>
 800a138:	08015e58 	.word	0x08015e58
 800a13c:	08015fdc 	.word	0x08015fdc
 800a140:	08015ea4 	.word	0x08015ea4
 800a144:	20004538 	.word	0x20004538
 800a148:	200005a8 	.word	0x200005a8
 800a14c:	20007b30 	.word	0x20007b30
 800a150:	20007a4c 	.word	0x20007a4c
 800a154:	20000598 	.word	0x20000598
 800a158:	200005c8 	.word	0x200005c8
 800a15c:	200005c5 	.word	0x200005c5
 800a160:	200005c0 	.word	0x200005c0
 800a164:	200005c4 	.word	0x200005c4
 800a168:	200005c2 	.word	0x200005c2
 800a16c:	20007b3c 	.word	0x20007b3c
 800a170:	20007b28 	.word	0x20007b28
 800a174:	2300      	movs	r3, #0
 800a176:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a178:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a17c:	f113 0f0d 	cmn.w	r3, #13
 800a180:	f000 8096 	beq.w	800a2b0 <tcp_input+0x810>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a184:	4b7d      	ldr	r3, [pc, #500]	; (800a37c <tcp_input+0x8dc>)
 800a186:	2200      	movs	r2, #0
 800a188:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a18a:	69f8      	ldr	r0, [r7, #28]
 800a18c:	f000 f914 	bl	800a3b8 <tcp_input_delayed_close>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	f040 808e 	bne.w	800a2b4 <tcp_input+0x814>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a198:	4b79      	ldr	r3, [pc, #484]	; (800a380 <tcp_input+0x8e0>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d041      	beq.n	800a224 <tcp_input+0x784>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d006      	beq.n	800a1b6 <tcp_input+0x716>
 800a1a8:	4b76      	ldr	r3, [pc, #472]	; (800a384 <tcp_input+0x8e4>)
 800a1aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a1ae:	4976      	ldr	r1, [pc, #472]	; (800a388 <tcp_input+0x8e8>)
 800a1b0:	4876      	ldr	r0, [pc, #472]	; (800a38c <tcp_input+0x8ec>)
 800a1b2:	f009 fa4d 	bl	8013650 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	8b5b      	ldrh	r3, [r3, #26]
 800a1ba:	f003 0310 	and.w	r3, r3, #16
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d008      	beq.n	800a1d4 <tcp_input+0x734>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a1c2:	4b6f      	ldr	r3, [pc, #444]	; (800a380 <tcp_input+0x8e0>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7fd fb5a 	bl	8007880 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a1cc:	69f8      	ldr	r0, [r7, #28]
 800a1ce:	f7fe f8f7 	bl	80083c0 <tcp_abort>
            goto aborted;
 800a1d2:	e076      	b.n	800a2c2 <tcp_input+0x822>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00c      	beq.n	800a1f8 <tcp_input+0x758>
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	6918      	ldr	r0, [r3, #16]
 800a1e8:	4b65      	ldr	r3, [pc, #404]	; (800a380 <tcp_input+0x8e0>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	69f9      	ldr	r1, [r7, #28]
 800a1f0:	47a0      	blx	r4
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	74fb      	strb	r3, [r7, #19]
 800a1f6:	e008      	b.n	800a20a <tcp_input+0x76a>
 800a1f8:	4b61      	ldr	r3, [pc, #388]	; (800a380 <tcp_input+0x8e0>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	69f9      	ldr	r1, [r7, #28]
 800a200:	2000      	movs	r0, #0
 800a202:	f7fe ffe5 	bl	80091d0 <tcp_recv_null>
 800a206:	4603      	mov	r3, r0
 800a208:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a20a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a20e:	f113 0f0d 	cmn.w	r3, #13
 800a212:	d051      	beq.n	800a2b8 <tcp_input+0x818>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a214:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <tcp_input+0x784>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a21c:	4b58      	ldr	r3, [pc, #352]	; (800a380 <tcp_input+0x8e0>)
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a224:	4b5a      	ldr	r3, [pc, #360]	; (800a390 <tcp_input+0x8f0>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f003 0320 	and.w	r3, r3, #32
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d030      	beq.n	800a292 <tcp_input+0x7f2>
          if (pcb->refused_data != NULL) {
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a234:	2b00      	cmp	r3, #0
 800a236:	d009      	beq.n	800a24c <tcp_input+0x7ac>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a23c:	7b5a      	ldrb	r2, [r3, #13]
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a242:	f042 0220 	orr.w	r2, r2, #32
 800a246:	b2d2      	uxtb	r2, r2
 800a248:	735a      	strb	r2, [r3, #13]
 800a24a:	e022      	b.n	800a292 <tcp_input+0x7f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a250:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a254:	d005      	beq.n	800a262 <tcp_input+0x7c2>
              pcb->rcv_wnd++;
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a25a:	3301      	adds	r3, #1
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <tcp_input+0x7e4>
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	6918      	ldr	r0, [r3, #16]
 800a276:	2300      	movs	r3, #0
 800a278:	2200      	movs	r2, #0
 800a27a:	69f9      	ldr	r1, [r7, #28]
 800a27c:	47a0      	blx	r4
 800a27e:	4603      	mov	r3, r0
 800a280:	74fb      	strb	r3, [r7, #19]
 800a282:	e001      	b.n	800a288 <tcp_input+0x7e8>
 800a284:	2300      	movs	r3, #0
 800a286:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a288:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a28c:	f113 0f0d 	cmn.w	r3, #13
 800a290:	d014      	beq.n	800a2bc <tcp_input+0x81c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a292:	4b40      	ldr	r3, [pc, #256]	; (800a394 <tcp_input+0x8f4>)
 800a294:	2200      	movs	r2, #0
 800a296:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a298:	69f8      	ldr	r0, [r7, #28]
 800a29a:	f000 f88d 	bl	800a3b8 <tcp_input_delayed_close>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d10d      	bne.n	800a2c0 <tcp_input+0x820>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a2a4:	69f8      	ldr	r0, [r7, #28]
 800a2a6:	f002 ff4f 	bl	800d148 <tcp_output>
 800a2aa:	e00a      	b.n	800a2c2 <tcp_input+0x822>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a2ac:	bf00      	nop
 800a2ae:	e008      	b.n	800a2c2 <tcp_input+0x822>
              goto aborted;
 800a2b0:	bf00      	nop
 800a2b2:	e006      	b.n	800a2c2 <tcp_input+0x822>
          goto aborted;
 800a2b4:	bf00      	nop
 800a2b6:	e004      	b.n	800a2c2 <tcp_input+0x822>
            goto aborted;
 800a2b8:	bf00      	nop
 800a2ba:	e002      	b.n	800a2c2 <tcp_input+0x822>
              goto aborted;
 800a2bc:	bf00      	nop
 800a2be:	e000      	b.n	800a2c2 <tcp_input+0x822>
          goto aborted;
 800a2c0:	bf00      	nop
    tcp_input_pcb = NULL;
 800a2c2:	4b34      	ldr	r3, [pc, #208]	; (800a394 <tcp_input+0x8f4>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a2c8:	4b2d      	ldr	r3, [pc, #180]	; (800a380 <tcp_input+0x8e0>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a2ce:	4b32      	ldr	r3, [pc, #200]	; (800a398 <tcp_input+0x8f8>)
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d04e      	beq.n	800a374 <tcp_input+0x8d4>
      pbuf_free(inseg.p);
 800a2d6:	4b30      	ldr	r3, [pc, #192]	; (800a398 <tcp_input+0x8f8>)
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fd fad0 	bl	8007880 <pbuf_free>
      inseg.p = NULL;
 800a2e0:	4b2d      	ldr	r3, [pc, #180]	; (800a398 <tcp_input+0x8f8>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a2e6:	e045      	b.n	800a374 <tcp_input+0x8d4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a2e8:	4b2c      	ldr	r3, [pc, #176]	; (800a39c <tcp_input+0x8fc>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	899b      	ldrh	r3, [r3, #12]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fb fdfb 	bl	8005eec <lwip_htons>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d128      	bne.n	800a354 <tcp_input+0x8b4>
      TCP_STATS_INC(tcp.proterr);
 800a302:	4b27      	ldr	r3, [pc, #156]	; (800a3a0 <tcp_input+0x900>)
 800a304:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800a308:	3301      	adds	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <tcp_input+0x900>)
 800a30e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 800a312:	4b23      	ldr	r3, [pc, #140]	; (800a3a0 <tcp_input+0x900>)
 800a314:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a318:	3301      	adds	r3, #1
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	4b20      	ldr	r3, [pc, #128]	; (800a3a0 <tcp_input+0x900>)
 800a31e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a322:	4b20      	ldr	r3, [pc, #128]	; (800a3a4 <tcp_input+0x904>)
 800a324:	6819      	ldr	r1, [r3, #0]
 800a326:	4b20      	ldr	r3, [pc, #128]	; (800a3a8 <tcp_input+0x908>)
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	4b1f      	ldr	r3, [pc, #124]	; (800a3ac <tcp_input+0x90c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a332:	4b1a      	ldr	r3, [pc, #104]	; (800a39c <tcp_input+0x8fc>)
 800a334:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a336:	885b      	ldrh	r3, [r3, #2]
 800a338:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a33a:	4a18      	ldr	r2, [pc, #96]	; (800a39c <tcp_input+0x8fc>)
 800a33c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a33e:	8812      	ldrh	r2, [r2, #0]
 800a340:	b292      	uxth	r2, r2
 800a342:	9202      	str	r2, [sp, #8]
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	4b1a      	ldr	r3, [pc, #104]	; (800a3b0 <tcp_input+0x910>)
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	4b1a      	ldr	r3, [pc, #104]	; (800a3b4 <tcp_input+0x914>)
 800a34c:	4602      	mov	r2, r0
 800a34e:	2000      	movs	r0, #0
 800a350:	f003 fce4 	bl	800dd1c <tcp_rst>
    pbuf_free(p);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7fd fa93 	bl	8007880 <pbuf_free>
  return;
 800a35a:	e00b      	b.n	800a374 <tcp_input+0x8d4>
dropped:
  TCP_STATS_INC(tcp.drop);
 800a35c:	4b10      	ldr	r3, [pc, #64]	; (800a3a0 <tcp_input+0x900>)
 800a35e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a362:	3301      	adds	r3, #1
 800a364:	b29a      	uxth	r2, r3
 800a366:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <tcp_input+0x900>)
 800a368:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7fd fa87 	bl	8007880 <pbuf_free>
 800a372:	e000      	b.n	800a376 <tcp_input+0x8d6>
  return;
 800a374:	bf00      	nop
}
 800a376:	3724      	adds	r7, #36	; 0x24
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd90      	pop	{r4, r7, pc}
 800a37c:	200005c0 	.word	0x200005c0
 800a380:	200005c8 	.word	0x200005c8
 800a384:	08015e58 	.word	0x08015e58
 800a388:	0801600c 	.word	0x0801600c
 800a38c:	08015ea4 	.word	0x08015ea4
 800a390:	200005c5 	.word	0x200005c5
 800a394:	20007b3c 	.word	0x20007b3c
 800a398:	20000598 	.word	0x20000598
 800a39c:	200005a8 	.word	0x200005a8
 800a3a0:	20007a4c 	.word	0x20007a4c
 800a3a4:	200005bc 	.word	0x200005bc
 800a3a8:	200005c2 	.word	0x200005c2
 800a3ac:	200005b8 	.word	0x200005b8
 800a3b0:	20004548 	.word	0x20004548
 800a3b4:	2000454c 	.word	0x2000454c

0800a3b8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d106      	bne.n	800a3d4 <tcp_input_delayed_close+0x1c>
 800a3c6:	4b17      	ldr	r3, [pc, #92]	; (800a424 <tcp_input_delayed_close+0x6c>)
 800a3c8:	f240 225a 	movw	r2, #602	; 0x25a
 800a3cc:	4916      	ldr	r1, [pc, #88]	; (800a428 <tcp_input_delayed_close+0x70>)
 800a3ce:	4817      	ldr	r0, [pc, #92]	; (800a42c <tcp_input_delayed_close+0x74>)
 800a3d0:	f009 f93e 	bl	8013650 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a3d4:	4b16      	ldr	r3, [pc, #88]	; (800a430 <tcp_input_delayed_close+0x78>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	f003 0310 	and.w	r3, r3, #16
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d01c      	beq.n	800a41a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	8b5b      	ldrh	r3, [r3, #26]
 800a3e4:	f003 0310 	and.w	r3, r3, #16
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10d      	bne.n	800a408 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d008      	beq.n	800a408 <tcp_input_delayed_close+0x50>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6912      	ldr	r2, [r2, #16]
 800a400:	f06f 010e 	mvn.w	r1, #14
 800a404:	4610      	mov	r0, r2
 800a406:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a408:	6879      	ldr	r1, [r7, #4]
 800a40a:	480a      	ldr	r0, [pc, #40]	; (800a434 <tcp_input_delayed_close+0x7c>)
 800a40c:	f7ff f9d0 	bl	80097b0 <tcp_pcb_remove>
    tcp_free(pcb);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7fd fced 	bl	8007df0 <tcp_free>
    return 1;
 800a416:	2301      	movs	r3, #1
 800a418:	e000      	b.n	800a41c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	08015e58 	.word	0x08015e58
 800a428:	08016028 	.word	0x08016028
 800a42c:	08015ea4 	.word	0x08015ea4
 800a430:	200005c5 	.word	0x200005c5
 800a434:	20007b28 	.word	0x20007b28

0800a438 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a438:	b590      	push	{r4, r7, lr}
 800a43a:	b08b      	sub	sp, #44	; 0x2c
 800a43c:	af04      	add	r7, sp, #16
 800a43e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a440:	4b73      	ldr	r3, [pc, #460]	; (800a610 <tcp_listen_input+0x1d8>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f040 80da 	bne.w	800a602 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d106      	bne.n	800a462 <tcp_listen_input+0x2a>
 800a454:	4b6f      	ldr	r3, [pc, #444]	; (800a614 <tcp_listen_input+0x1dc>)
 800a456:	f240 2281 	movw	r2, #641	; 0x281
 800a45a:	496f      	ldr	r1, [pc, #444]	; (800a618 <tcp_listen_input+0x1e0>)
 800a45c:	486f      	ldr	r0, [pc, #444]	; (800a61c <tcp_listen_input+0x1e4>)
 800a45e:	f009 f8f7 	bl	8013650 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a462:	4b6b      	ldr	r3, [pc, #428]	; (800a610 <tcp_listen_input+0x1d8>)
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	f003 0310 	and.w	r3, r3, #16
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d019      	beq.n	800a4a2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a46e:	4b6c      	ldr	r3, [pc, #432]	; (800a620 <tcp_listen_input+0x1e8>)
 800a470:	6819      	ldr	r1, [r3, #0]
 800a472:	4b6c      	ldr	r3, [pc, #432]	; (800a624 <tcp_listen_input+0x1ec>)
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	4b6b      	ldr	r3, [pc, #428]	; (800a628 <tcp_listen_input+0x1f0>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a47e:	4b6b      	ldr	r3, [pc, #428]	; (800a62c <tcp_listen_input+0x1f4>)
 800a480:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a482:	885b      	ldrh	r3, [r3, #2]
 800a484:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a486:	4a69      	ldr	r2, [pc, #420]	; (800a62c <tcp_listen_input+0x1f4>)
 800a488:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a48a:	8812      	ldrh	r2, [r2, #0]
 800a48c:	b292      	uxth	r2, r2
 800a48e:	9202      	str	r2, [sp, #8]
 800a490:	9301      	str	r3, [sp, #4]
 800a492:	4b67      	ldr	r3, [pc, #412]	; (800a630 <tcp_listen_input+0x1f8>)
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	4b67      	ldr	r3, [pc, #412]	; (800a634 <tcp_listen_input+0x1fc>)
 800a498:	4602      	mov	r2, r0
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f003 fc3e 	bl	800dd1c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a4a0:	e0b1      	b.n	800a606 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 800a4a2:	4b5b      	ldr	r3, [pc, #364]	; (800a610 <tcp_listen_input+0x1d8>)
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80ab 	beq.w	800a606 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7d5b      	ldrb	r3, [r3, #21]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fe ffaf 	bl	8009418 <tcp_alloc>
 800a4ba:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d119      	bne.n	800a4f6 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 800a4c2:	4b5d      	ldr	r3, [pc, #372]	; (800a638 <tcp_listen_input+0x200>)
 800a4c4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	4b5a      	ldr	r3, [pc, #360]	; (800a638 <tcp_listen_input+0x200>)
 800a4ce:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00a      	beq.n	800a4f0 <tcp_listen_input+0xb8>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6910      	ldr	r0, [r2, #16]
 800a4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	4798      	blx	r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73bb      	strb	r3, [r7, #14]
      return;
 800a4ee:	e08b      	b.n	800a608 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a4f0:	23f0      	movs	r3, #240	; 0xf0
 800a4f2:	73bb      	strb	r3, [r7, #14]
      return;
 800a4f4:	e088      	b.n	800a608 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a4f6:	4b51      	ldr	r3, [pc, #324]	; (800a63c <tcp_listen_input+0x204>)
 800a4f8:	695a      	ldr	r2, [r3, #20]
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a4fe:	4b4f      	ldr	r3, [pc, #316]	; (800a63c <tcp_listen_input+0x204>)
 800a500:	691a      	ldr	r2, [r3, #16]
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	8ada      	ldrh	r2, [r3, #22]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a50e:	4b47      	ldr	r3, [pc, #284]	; (800a62c <tcp_listen_input+0x1f4>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29a      	uxth	r2, r3
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2203      	movs	r2, #3
 800a51e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a520:	4b41      	ldr	r3, [pc, #260]	; (800a628 <tcp_listen_input+0x1f0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a532:	6978      	ldr	r0, [r7, #20]
 800a534:	f7ff f9d0 	bl	80098d8 <tcp_next_iss>
 800a538:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	693a      	ldr	r2, [r7, #16]
 800a54a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a552:	4b35      	ldr	r3, [pc, #212]	; (800a628 <tcp_listen_input+0x1f0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	1e5a      	subs	r2, r3, #1
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	691a      	ldr	r2, [r3, #16]
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	7a5b      	ldrb	r3, [r3, #9]
 800a56e:	f003 030c 	and.w	r3, r3, #12
 800a572:	b2da      	uxtb	r2, r3
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	7a1a      	ldrb	r2, [r3, #8]
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a580:	4b2f      	ldr	r3, [pc, #188]	; (800a640 <tcp_listen_input+0x208>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	60da      	str	r2, [r3, #12]
 800a588:	4a2d      	ldr	r2, [pc, #180]	; (800a640 <tcp_listen_input+0x208>)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	6013      	str	r3, [r2, #0]
 800a58e:	f003 fd87 	bl	800e0a0 <tcp_timer_needed>
 800a592:	4b2c      	ldr	r3, [pc, #176]	; (800a644 <tcp_listen_input+0x20c>)
 800a594:	2201      	movs	r2, #1
 800a596:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a598:	6978      	ldr	r0, [r7, #20]
 800a59a:	f001 fd8f 	bl	800c0bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a59e:	4b23      	ldr	r3, [pc, #140]	; (800a62c <tcp_listen_input+0x1f4>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	89db      	ldrh	r3, [r3, #14]
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f007 fbe7 	bl	8011d94 <ip4_route>
 800a5c6:	4601      	mov	r1, r0
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7ff f9a8 	bl	8009924 <tcp_eff_send_mss_netif>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a5dc:	2112      	movs	r1, #18
 800a5de:	6978      	ldr	r0, [r7, #20]
 800a5e0:	f002 fcc2 	bl	800cf68 <tcp_enqueue_flags>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a5e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d004      	beq.n	800a5fa <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	6978      	ldr	r0, [r7, #20]
 800a5f4:	f7fd fe26 	bl	8008244 <tcp_abandon>
      return;
 800a5f8:	e006      	b.n	800a608 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 800a5fa:	6978      	ldr	r0, [r7, #20]
 800a5fc:	f002 fda4 	bl	800d148 <tcp_output>
  return;
 800a600:	e001      	b.n	800a606 <tcp_listen_input+0x1ce>
    return;
 800a602:	bf00      	nop
 800a604:	e000      	b.n	800a608 <tcp_listen_input+0x1d0>
  return;
 800a606:	bf00      	nop
}
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd90      	pop	{r4, r7, pc}
 800a60e:	bf00      	nop
 800a610:	200005c4 	.word	0x200005c4
 800a614:	08015e58 	.word	0x08015e58
 800a618:	08016050 	.word	0x08016050
 800a61c:	08015ea4 	.word	0x08015ea4
 800a620:	200005bc 	.word	0x200005bc
 800a624:	200005c2 	.word	0x200005c2
 800a628:	200005b8 	.word	0x200005b8
 800a62c:	200005a8 	.word	0x200005a8
 800a630:	20004548 	.word	0x20004548
 800a634:	2000454c 	.word	0x2000454c
 800a638:	20007a4c 	.word	0x20007a4c
 800a63c:	20004538 	.word	0x20004538
 800a640:	20007b28 	.word	0x20007b28
 800a644:	20007b24 	.word	0x20007b24

0800a648 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b086      	sub	sp, #24
 800a64c:	af04      	add	r7, sp, #16
 800a64e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a650:	4b2f      	ldr	r3, [pc, #188]	; (800a710 <tcp_timewait_input+0xc8>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d153      	bne.n	800a704 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d106      	bne.n	800a670 <tcp_timewait_input+0x28>
 800a662:	4b2c      	ldr	r3, [pc, #176]	; (800a714 <tcp_timewait_input+0xcc>)
 800a664:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a668:	492b      	ldr	r1, [pc, #172]	; (800a718 <tcp_timewait_input+0xd0>)
 800a66a:	482c      	ldr	r0, [pc, #176]	; (800a71c <tcp_timewait_input+0xd4>)
 800a66c:	f008 fff0 	bl	8013650 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a670:	4b27      	ldr	r3, [pc, #156]	; (800a710 <tcp_timewait_input+0xc8>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	f003 0302 	and.w	r3, r3, #2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d02a      	beq.n	800a6d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a67c:	4b28      	ldr	r3, [pc, #160]	; (800a720 <tcp_timewait_input+0xd8>)
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	db2d      	blt.n	800a6e6 <tcp_timewait_input+0x9e>
 800a68a:	4b25      	ldr	r3, [pc, #148]	; (800a720 <tcp_timewait_input+0xd8>)
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a696:	440b      	add	r3, r1
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	dc23      	bgt.n	800a6e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a69e:	4b21      	ldr	r3, [pc, #132]	; (800a724 <tcp_timewait_input+0xdc>)
 800a6a0:	6819      	ldr	r1, [r3, #0]
 800a6a2:	4b21      	ldr	r3, [pc, #132]	; (800a728 <tcp_timewait_input+0xe0>)
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <tcp_timewait_input+0xd8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6ae:	4b1f      	ldr	r3, [pc, #124]	; (800a72c <tcp_timewait_input+0xe4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6b2:	885b      	ldrh	r3, [r3, #2]
 800a6b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6b6:	4a1d      	ldr	r2, [pc, #116]	; (800a72c <tcp_timewait_input+0xe4>)
 800a6b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6ba:	8812      	ldrh	r2, [r2, #0]
 800a6bc:	b292      	uxth	r2, r2
 800a6be:	9202      	str	r2, [sp, #8]
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	4b1b      	ldr	r3, [pc, #108]	; (800a730 <tcp_timewait_input+0xe8>)
 800a6c4:	9300      	str	r3, [sp, #0]
 800a6c6:	4b1b      	ldr	r3, [pc, #108]	; (800a734 <tcp_timewait_input+0xec>)
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f003 fb26 	bl	800dd1c <tcp_rst>
      return;
 800a6d0:	e01b      	b.n	800a70a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a6d2:	4b0f      	ldr	r3, [pc, #60]	; (800a710 <tcp_timewait_input+0xc8>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a6de:	4b16      	ldr	r3, [pc, #88]	; (800a738 <tcp_timewait_input+0xf0>)
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a6e6:	4b10      	ldr	r3, [pc, #64]	; (800a728 <tcp_timewait_input+0xe0>)
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00c      	beq.n	800a708 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	8b5b      	ldrh	r3, [r3, #26]
 800a6f2:	f043 0302 	orr.w	r3, r3, #2
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 fd23 	bl	800d148 <tcp_output>
  }
  return;
 800a702:	e001      	b.n	800a708 <tcp_timewait_input+0xc0>
    return;
 800a704:	bf00      	nop
 800a706:	e000      	b.n	800a70a <tcp_timewait_input+0xc2>
  return;
 800a708:	bf00      	nop
}
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	200005c4 	.word	0x200005c4
 800a714:	08015e58 	.word	0x08015e58
 800a718:	08016070 	.word	0x08016070
 800a71c:	08015ea4 	.word	0x08015ea4
 800a720:	200005b8 	.word	0x200005b8
 800a724:	200005bc 	.word	0x200005bc
 800a728:	200005c2 	.word	0x200005c2
 800a72c:	200005a8 	.word	0x200005a8
 800a730:	20004548 	.word	0x20004548
 800a734:	2000454c 	.word	0x2000454c
 800a738:	20007b2c 	.word	0x20007b2c

0800a73c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a73c:	b590      	push	{r4, r7, lr}
 800a73e:	b08d      	sub	sp, #52	; 0x34
 800a740:	af04      	add	r7, sp, #16
 800a742:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <tcp_process+0x24>
 800a752:	4ba5      	ldr	r3, [pc, #660]	; (800a9e8 <tcp_process+0x2ac>)
 800a754:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a758:	49a4      	ldr	r1, [pc, #656]	; (800a9ec <tcp_process+0x2b0>)
 800a75a:	48a5      	ldr	r0, [pc, #660]	; (800a9f0 <tcp_process+0x2b4>)
 800a75c:	f008 ff78 	bl	8013650 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a760:	4ba4      	ldr	r3, [pc, #656]	; (800a9f4 <tcp_process+0x2b8>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	f003 0304 	and.w	r3, r3, #4
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d04e      	beq.n	800a80a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	7d1b      	ldrb	r3, [r3, #20]
 800a770:	2b02      	cmp	r3, #2
 800a772:	d108      	bne.n	800a786 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a778:	4b9f      	ldr	r3, [pc, #636]	; (800a9f8 <tcp_process+0x2bc>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d123      	bne.n	800a7c8 <tcp_process+0x8c>
        acceptable = 1;
 800a780:	2301      	movs	r3, #1
 800a782:	76fb      	strb	r3, [r7, #27]
 800a784:	e020      	b.n	800a7c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a78a:	4b9c      	ldr	r3, [pc, #624]	; (800a9fc <tcp_process+0x2c0>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d102      	bne.n	800a798 <tcp_process+0x5c>
        acceptable = 1;
 800a792:	2301      	movs	r3, #1
 800a794:	76fb      	strb	r3, [r7, #27]
 800a796:	e017      	b.n	800a7c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a798:	4b98      	ldr	r3, [pc, #608]	; (800a9fc <tcp_process+0x2c0>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	db10      	blt.n	800a7c8 <tcp_process+0x8c>
 800a7a6:	4b95      	ldr	r3, [pc, #596]	; (800a9fc <tcp_process+0x2c0>)
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	6879      	ldr	r1, [r7, #4]
 800a7b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a7b2:	440b      	add	r3, r1
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dc06      	bgt.n	800a7c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	8b5b      	ldrh	r3, [r3, #26]
 800a7be:	f043 0302 	orr.w	r3, r3, #2
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a7c8:	7efb      	ldrb	r3, [r7, #27]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01b      	beq.n	800a806 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	7d1b      	ldrb	r3, [r3, #20]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <tcp_process+0xa8>
 800a7d6:	4b84      	ldr	r3, [pc, #528]	; (800a9e8 <tcp_process+0x2ac>)
 800a7d8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a7dc:	4988      	ldr	r1, [pc, #544]	; (800aa00 <tcp_process+0x2c4>)
 800a7de:	4884      	ldr	r0, [pc, #528]	; (800a9f0 <tcp_process+0x2b4>)
 800a7e0:	f008 ff36 	bl	8013650 <iprintf>
      recv_flags |= TF_RESET;
 800a7e4:	4b87      	ldr	r3, [pc, #540]	; (800aa04 <tcp_process+0x2c8>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	f043 0308 	orr.w	r3, r3, #8
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	4b85      	ldr	r3, [pc, #532]	; (800aa04 <tcp_process+0x2c8>)
 800a7f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	8b5b      	ldrh	r3, [r3, #26]
 800a7f6:	f023 0301 	bic.w	r3, r3, #1
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a800:	f06f 030d 	mvn.w	r3, #13
 800a804:	e37a      	b.n	800aefc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	e378      	b.n	800aefc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a80a:	4b7a      	ldr	r3, [pc, #488]	; (800a9f4 <tcp_process+0x2b8>)
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	f003 0302 	and.w	r3, r3, #2
 800a812:	2b00      	cmp	r3, #0
 800a814:	d010      	beq.n	800a838 <tcp_process+0xfc>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7d1b      	ldrb	r3, [r3, #20]
 800a81a:	2b02      	cmp	r3, #2
 800a81c:	d00c      	beq.n	800a838 <tcp_process+0xfc>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	7d1b      	ldrb	r3, [r3, #20]
 800a822:	2b03      	cmp	r3, #3
 800a824:	d008      	beq.n	800a838 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	8b5b      	ldrh	r3, [r3, #26]
 800a82a:	f043 0302 	orr.w	r3, r3, #2
 800a82e:	b29a      	uxth	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	e361      	b.n	800aefc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	8b5b      	ldrh	r3, [r3, #26]
 800a83c:	f003 0310 	and.w	r3, r3, #16
 800a840:	2b00      	cmp	r3, #0
 800a842:	d103      	bne.n	800a84c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a844:	4b70      	ldr	r3, [pc, #448]	; (800aa08 <tcp_process+0x2cc>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 fc2d 	bl	800c0bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	7d1b      	ldrb	r3, [r3, #20]
 800a866:	3b02      	subs	r3, #2
 800a868:	2b07      	cmp	r3, #7
 800a86a:	f200 8337 	bhi.w	800aedc <tcp_process+0x7a0>
 800a86e:	a201      	add	r2, pc, #4	; (adr r2, 800a874 <tcp_process+0x138>)
 800a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a874:	0800a895 	.word	0x0800a895
 800a878:	0800aac5 	.word	0x0800aac5
 800a87c:	0800ac3d 	.word	0x0800ac3d
 800a880:	0800ac67 	.word	0x0800ac67
 800a884:	0800ad8b 	.word	0x0800ad8b
 800a888:	0800ac3d 	.word	0x0800ac3d
 800a88c:	0800ae17 	.word	0x0800ae17
 800a890:	0800aea7 	.word	0x0800aea7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a894:	4b57      	ldr	r3, [pc, #348]	; (800a9f4 <tcp_process+0x2b8>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	f003 0310 	and.w	r3, r3, #16
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 80e4 	beq.w	800aa6a <tcp_process+0x32e>
 800a8a2:	4b54      	ldr	r3, [pc, #336]	; (800a9f4 <tcp_process+0x2b8>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	f003 0302 	and.w	r3, r3, #2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f000 80dd 	beq.w	800aa6a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	4b50      	ldr	r3, [pc, #320]	; (800a9f8 <tcp_process+0x2bc>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	f040 80d5 	bne.w	800aa6a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a8c0:	4b4e      	ldr	r3, [pc, #312]	; (800a9fc <tcp_process+0x2c0>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a8d2:	4b49      	ldr	r3, [pc, #292]	; (800a9f8 <tcp_process+0x2bc>)
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a8da:	4b4c      	ldr	r3, [pc, #304]	; (800aa0c <tcp_process+0x2d0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	89db      	ldrh	r3, [r3, #14]
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a8f4:	4b41      	ldr	r3, [pc, #260]	; (800a9fc <tcp_process+0x2c0>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	1e5a      	subs	r2, r3, #1
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2204      	movs	r2, #4
 800a902:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3304      	adds	r3, #4
 800a90c:	4618      	mov	r0, r3
 800a90e:	f007 fa41 	bl	8011d94 <ip4_route>
 800a912:	4601      	mov	r1, r0
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3304      	adds	r3, #4
 800a918:	461a      	mov	r2, r3
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7ff f802 	bl	8009924 <tcp_eff_send_mss_netif>
 800a920:	4603      	mov	r3, r0
 800a922:	461a      	mov	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a92c:	009a      	lsls	r2, r3, #2
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	f241 111c 	movw	r1, #4380	; 0x111c
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf38      	it	cc
 800a93c:	460b      	movcc	r3, r1
 800a93e:	429a      	cmp	r2, r3
 800a940:	d204      	bcs.n	800a94c <tcp_process+0x210>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	b29b      	uxth	r3, r3
 800a94a:	e00d      	b.n	800a968 <tcp_process+0x22c>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	f241 121c 	movw	r2, #4380	; 0x111c
 800a956:	4293      	cmp	r3, r2
 800a958:	d904      	bls.n	800a964 <tcp_process+0x228>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	b29b      	uxth	r3, r3
 800a962:	e001      	b.n	800a968 <tcp_process+0x22c>
 800a964:	f241 131c 	movw	r3, #4380	; 0x111c
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <tcp_process+0x24a>
 800a978:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <tcp_process+0x2ac>)
 800a97a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a97e:	4924      	ldr	r1, [pc, #144]	; (800aa10 <tcp_process+0x2d4>)
 800a980:	481b      	ldr	r0, [pc, #108]	; (800a9f0 <tcp_process+0x2b4>)
 800a982:	f008 fe65 	bl	8013650 <iprintf>
        --pcb->snd_queuelen;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a98c:	3b01      	subs	r3, #1
 800a98e:	b29a      	uxth	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a99a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d111      	bne.n	800a9c6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <tcp_process+0x280>
 800a9ae:	4b0e      	ldr	r3, [pc, #56]	; (800a9e8 <tcp_process+0x2ac>)
 800a9b0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a9b4:	4917      	ldr	r1, [pc, #92]	; (800aa14 <tcp_process+0x2d8>)
 800a9b6:	480e      	ldr	r0, [pc, #56]	; (800a9f0 <tcp_process+0x2b4>)
 800a9b8:	f008 fe4a 	bl	8013650 <iprintf>
          pcb->unsent = rseg->next;
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	66da      	str	r2, [r3, #108]	; 0x6c
 800a9c4:	e003      	b.n	800a9ce <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a9ce:	69f8      	ldr	r0, [r7, #28]
 800a9d0:	f7fe fb9b 	bl	800910a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d11d      	bne.n	800aa18 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9e2:	861a      	strh	r2, [r3, #48]	; 0x30
 800a9e4:	e01f      	b.n	800aa26 <tcp_process+0x2ea>
 800a9e6:	bf00      	nop
 800a9e8:	08015e58 	.word	0x08015e58
 800a9ec:	08016090 	.word	0x08016090
 800a9f0:	08015ea4 	.word	0x08015ea4
 800a9f4:	200005c4 	.word	0x200005c4
 800a9f8:	200005bc 	.word	0x200005bc
 800a9fc:	200005b8 	.word	0x200005b8
 800aa00:	080160ac 	.word	0x080160ac
 800aa04:	200005c5 	.word	0x200005c5
 800aa08:	20007b2c 	.word	0x20007b2c
 800aa0c:	200005a8 	.word	0x200005a8
 800aa10:	080160cc 	.word	0x080160cc
 800aa14:	080160e4 	.word	0x080160e4
        } else {
          pcb->rtime = 0;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00a      	beq.n	800aa46 <tcp_process+0x30a>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	6910      	ldr	r0, [r2, #16]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	6879      	ldr	r1, [r7, #4]
 800aa3e:	4798      	blx	r3
 800aa40:	4603      	mov	r3, r0
 800aa42:	76bb      	strb	r3, [r7, #26]
 800aa44:	e001      	b.n	800aa4a <tcp_process+0x30e>
 800aa46:	2300      	movs	r3, #0
 800aa48:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800aa4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aa4e:	f113 0f0d 	cmn.w	r3, #13
 800aa52:	d102      	bne.n	800aa5a <tcp_process+0x31e>
          return ERR_ABRT;
 800aa54:	f06f 030c 	mvn.w	r3, #12
 800aa58:	e250      	b.n	800aefc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	8b5b      	ldrh	r3, [r3, #26]
 800aa5e:	f043 0302 	orr.w	r3, r3, #2
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800aa68:	e23a      	b.n	800aee0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800aa6a:	4b9d      	ldr	r3, [pc, #628]	; (800ace0 <tcp_process+0x5a4>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	f003 0310 	and.w	r3, r3, #16
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 8234 	beq.w	800aee0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa78:	4b9a      	ldr	r3, [pc, #616]	; (800ace4 <tcp_process+0x5a8>)
 800aa7a:	6819      	ldr	r1, [r3, #0]
 800aa7c:	4b9a      	ldr	r3, [pc, #616]	; (800ace8 <tcp_process+0x5ac>)
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	461a      	mov	r2, r3
 800aa82:	4b9a      	ldr	r3, [pc, #616]	; (800acec <tcp_process+0x5b0>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa88:	4b99      	ldr	r3, [pc, #612]	; (800acf0 <tcp_process+0x5b4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa8c:	885b      	ldrh	r3, [r3, #2]
 800aa8e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa90:	4a97      	ldr	r2, [pc, #604]	; (800acf0 <tcp_process+0x5b4>)
 800aa92:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa94:	8812      	ldrh	r2, [r2, #0]
 800aa96:	b292      	uxth	r2, r2
 800aa98:	9202      	str	r2, [sp, #8]
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	4b95      	ldr	r3, [pc, #596]	; (800acf4 <tcp_process+0x5b8>)
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4b95      	ldr	r3, [pc, #596]	; (800acf8 <tcp_process+0x5bc>)
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f003 f939 	bl	800dd1c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aab0:	2b05      	cmp	r3, #5
 800aab2:	f200 8215 	bhi.w	800aee0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f002 fee9 	bl	800d894 <tcp_rexmit_rto>
      break;
 800aac2:	e20d      	b.n	800aee0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800aac4:	4b86      	ldr	r3, [pc, #536]	; (800ace0 <tcp_process+0x5a4>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	f003 0310 	and.w	r3, r3, #16
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 80a1 	beq.w	800ac14 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aad2:	4b84      	ldr	r3, [pc, #528]	; (800ace4 <tcp_process+0x5a8>)
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	3b01      	subs	r3, #1
 800aade:	2b00      	cmp	r3, #0
 800aae0:	db7e      	blt.n	800abe0 <tcp_process+0x4a4>
 800aae2:	4b80      	ldr	r3, [pc, #512]	; (800ace4 <tcp_process+0x5a8>)
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaea:	1ad3      	subs	r3, r2, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	dc77      	bgt.n	800abe0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2204      	movs	r2, #4
 800aaf4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800aafe:	23fa      	movs	r3, #250	; 0xfa
 800ab00:	76bb      	strb	r3, [r7, #26]
 800ab02:	e01d      	b.n	800ab40 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d106      	bne.n	800ab1c <tcp_process+0x3e0>
 800ab0e:	4b7b      	ldr	r3, [pc, #492]	; (800acfc <tcp_process+0x5c0>)
 800ab10:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ab14:	497a      	ldr	r1, [pc, #488]	; (800ad00 <tcp_process+0x5c4>)
 800ab16:	487b      	ldr	r0, [pc, #492]	; (800ad04 <tcp_process+0x5c8>)
 800ab18:	f008 fd9a 	bl	8013650 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00a      	beq.n	800ab3c <tcp_process+0x400>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6910      	ldr	r0, [r2, #16]
 800ab30:	2200      	movs	r2, #0
 800ab32:	6879      	ldr	r1, [r7, #4]
 800ab34:	4798      	blx	r3
 800ab36:	4603      	mov	r3, r0
 800ab38:	76bb      	strb	r3, [r7, #26]
 800ab3a:	e001      	b.n	800ab40 <tcp_process+0x404>
 800ab3c:	23f0      	movs	r3, #240	; 0xf0
 800ab3e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ab40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00a      	beq.n	800ab5e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ab48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ab4c:	f113 0f0d 	cmn.w	r3, #13
 800ab50:	d002      	beq.n	800ab58 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7fd fc34 	bl	80083c0 <tcp_abort>
            }
            return ERR_ABRT;
 800ab58:	f06f 030c 	mvn.w	r3, #12
 800ab5c:	e1ce      	b.n	800aefc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fae0 	bl	800b124 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ab64:	4b68      	ldr	r3, [pc, #416]	; (800ad08 <tcp_process+0x5cc>)
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d005      	beq.n	800ab78 <tcp_process+0x43c>
            recv_acked--;
 800ab6c:	4b66      	ldr	r3, [pc, #408]	; (800ad08 <tcp_process+0x5cc>)
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	4b64      	ldr	r3, [pc, #400]	; (800ad08 <tcp_process+0x5cc>)
 800ab76:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab7c:	009a      	lsls	r2, r3, #2
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	f241 111c 	movw	r1, #4380	; 0x111c
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf38      	it	cc
 800ab8c:	460b      	movcc	r3, r1
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d204      	bcs.n	800ab9c <tcp_process+0x460>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	e00d      	b.n	800abb8 <tcp_process+0x47c>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	f241 121c 	movw	r2, #4380	; 0x111c
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d904      	bls.n	800abb4 <tcp_process+0x478>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	e001      	b.n	800abb8 <tcp_process+0x47c>
 800abb4:	f241 131c 	movw	r3, #4380	; 0x111c
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800abbe:	4b53      	ldr	r3, [pc, #332]	; (800ad0c <tcp_process+0x5d0>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	f003 0320 	and.w	r3, r3, #32
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d037      	beq.n	800ac3a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	8b5b      	ldrh	r3, [r3, #26]
 800abce:	f043 0302 	orr.w	r3, r3, #2
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2207      	movs	r2, #7
 800abdc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800abde:	e02c      	b.n	800ac3a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abe0:	4b40      	ldr	r3, [pc, #256]	; (800ace4 <tcp_process+0x5a8>)
 800abe2:	6819      	ldr	r1, [r3, #0]
 800abe4:	4b40      	ldr	r3, [pc, #256]	; (800ace8 <tcp_process+0x5ac>)
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	461a      	mov	r2, r3
 800abea:	4b40      	ldr	r3, [pc, #256]	; (800acec <tcp_process+0x5b0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abf0:	4b3f      	ldr	r3, [pc, #252]	; (800acf0 <tcp_process+0x5b4>)
 800abf2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abf4:	885b      	ldrh	r3, [r3, #2]
 800abf6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abf8:	4a3d      	ldr	r2, [pc, #244]	; (800acf0 <tcp_process+0x5b4>)
 800abfa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abfc:	8812      	ldrh	r2, [r2, #0]
 800abfe:	b292      	uxth	r2, r2
 800ac00:	9202      	str	r2, [sp, #8]
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	4b3b      	ldr	r3, [pc, #236]	; (800acf4 <tcp_process+0x5b8>)
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	4b3b      	ldr	r3, [pc, #236]	; (800acf8 <tcp_process+0x5bc>)
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f003 f885 	bl	800dd1c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ac12:	e167      	b.n	800aee4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ac14:	4b32      	ldr	r3, [pc, #200]	; (800ace0 <tcp_process+0x5a4>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8161 	beq.w	800aee4 <tcp_process+0x7a8>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	1e5a      	subs	r2, r3, #1
 800ac28:	4b30      	ldr	r3, [pc, #192]	; (800acec <tcp_process+0x5b0>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	f040 8159 	bne.w	800aee4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f002 fe50 	bl	800d8d8 <tcp_rexmit>
      break;
 800ac38:	e154      	b.n	800aee4 <tcp_process+0x7a8>
 800ac3a:	e153      	b.n	800aee4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fa71 	bl	800b124 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ac42:	4b32      	ldr	r3, [pc, #200]	; (800ad0c <tcp_process+0x5d0>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	f003 0320 	and.w	r3, r3, #32
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 814c 	beq.w	800aee8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	8b5b      	ldrh	r3, [r3, #26]
 800ac54:	f043 0302 	orr.w	r3, r3, #2
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2207      	movs	r2, #7
 800ac62:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ac64:	e140      	b.n	800aee8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fa5c 	bl	800b124 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ac6c:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <tcp_process+0x5d0>)
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d071      	beq.n	800ad5c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ac78:	4b19      	ldr	r3, [pc, #100]	; (800ace0 <tcp_process+0x5a4>)
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	f003 0310 	and.w	r3, r3, #16
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d060      	beq.n	800ad46 <tcp_process+0x60a>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac88:	4b16      	ldr	r3, [pc, #88]	; (800ace4 <tcp_process+0x5a8>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d15a      	bne.n	800ad46 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d156      	bne.n	800ad46 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	8b5b      	ldrh	r3, [r3, #26]
 800ac9c:	f043 0302 	orr.w	r3, r3, #2
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7fe fd32 	bl	8009710 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800acac:	4b18      	ldr	r3, [pc, #96]	; (800ad10 <tcp_process+0x5d4>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d105      	bne.n	800acc2 <tcp_process+0x586>
 800acb6:	4b16      	ldr	r3, [pc, #88]	; (800ad10 <tcp_process+0x5d4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	4a14      	ldr	r2, [pc, #80]	; (800ad10 <tcp_process+0x5d4>)
 800acbe:	6013      	str	r3, [r2, #0]
 800acc0:	e02e      	b.n	800ad20 <tcp_process+0x5e4>
 800acc2:	4b13      	ldr	r3, [pc, #76]	; (800ad10 <tcp_process+0x5d4>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	e027      	b.n	800ad1a <tcp_process+0x5de>
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d11f      	bne.n	800ad14 <tcp_process+0x5d8>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	60da      	str	r2, [r3, #12]
 800acdc:	e020      	b.n	800ad20 <tcp_process+0x5e4>
 800acde:	bf00      	nop
 800ace0:	200005c4 	.word	0x200005c4
 800ace4:	200005bc 	.word	0x200005bc
 800ace8:	200005c2 	.word	0x200005c2
 800acec:	200005b8 	.word	0x200005b8
 800acf0:	200005a8 	.word	0x200005a8
 800acf4:	20004548 	.word	0x20004548
 800acf8:	2000454c 	.word	0x2000454c
 800acfc:	08015e58 	.word	0x08015e58
 800ad00:	080160f8 	.word	0x080160f8
 800ad04:	08015ea4 	.word	0x08015ea4
 800ad08:	200005c0 	.word	0x200005c0
 800ad0c:	200005c5 	.word	0x200005c5
 800ad10:	20007b28 	.word	0x20007b28
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	617b      	str	r3, [r7, #20]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1d4      	bne.n	800acca <tcp_process+0x58e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	60da      	str	r2, [r3, #12]
 800ad26:	4b77      	ldr	r3, [pc, #476]	; (800af04 <tcp_process+0x7c8>)
 800ad28:	2201      	movs	r2, #1
 800ad2a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	220a      	movs	r2, #10
 800ad30:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ad32:	4b75      	ldr	r3, [pc, #468]	; (800af08 <tcp_process+0x7cc>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	60da      	str	r2, [r3, #12]
 800ad3a:	4a73      	ldr	r2, [pc, #460]	; (800af08 <tcp_process+0x7cc>)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	f003 f9ae 	bl	800e0a0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ad44:	e0d2      	b.n	800aeec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	8b5b      	ldrh	r3, [r3, #26]
 800ad4a:	f043 0302 	orr.w	r3, r3, #2
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2208      	movs	r2, #8
 800ad58:	751a      	strb	r2, [r3, #20]
      break;
 800ad5a:	e0c7      	b.n	800aeec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad5c:	4b6b      	ldr	r3, [pc, #428]	; (800af0c <tcp_process+0x7d0>)
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 80c1 	beq.w	800aeec <tcp_process+0x7b0>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad6e:	4b68      	ldr	r3, [pc, #416]	; (800af10 <tcp_process+0x7d4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	f040 80ba 	bne.w	800aeec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f040 80b5 	bne.w	800aeec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2206      	movs	r2, #6
 800ad86:	751a      	strb	r2, [r3, #20]
      break;
 800ad88:	e0b0      	b.n	800aeec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f9ca 	bl	800b124 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ad90:	4b60      	ldr	r3, [pc, #384]	; (800af14 <tcp_process+0x7d8>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	f003 0320 	and.w	r3, r3, #32
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 80a9 	beq.w	800aef0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	8b5b      	ldrh	r3, [r3, #26]
 800ada2:	f043 0302 	orr.w	r3, r3, #2
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7fe fcaf 	bl	8009710 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800adb2:	4b59      	ldr	r3, [pc, #356]	; (800af18 <tcp_process+0x7dc>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d105      	bne.n	800adc8 <tcp_process+0x68c>
 800adbc:	4b56      	ldr	r3, [pc, #344]	; (800af18 <tcp_process+0x7dc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	4a55      	ldr	r2, [pc, #340]	; (800af18 <tcp_process+0x7dc>)
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	e013      	b.n	800adf0 <tcp_process+0x6b4>
 800adc8:	4b53      	ldr	r3, [pc, #332]	; (800af18 <tcp_process+0x7dc>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	613b      	str	r3, [r7, #16]
 800adce:	e00c      	b.n	800adea <tcp_process+0x6ae>
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	429a      	cmp	r2, r3
 800add8:	d104      	bne.n	800ade4 <tcp_process+0x6a8>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	60da      	str	r2, [r3, #12]
 800ade2:	e005      	b.n	800adf0 <tcp_process+0x6b4>
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	613b      	str	r3, [r7, #16]
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1ef      	bne.n	800add0 <tcp_process+0x694>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	4b43      	ldr	r3, [pc, #268]	; (800af04 <tcp_process+0x7c8>)
 800adf8:	2201      	movs	r2, #1
 800adfa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	220a      	movs	r2, #10
 800ae00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae02:	4b41      	ldr	r3, [pc, #260]	; (800af08 <tcp_process+0x7cc>)
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	60da      	str	r2, [r3, #12]
 800ae0a:	4a3f      	ldr	r2, [pc, #252]	; (800af08 <tcp_process+0x7cc>)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	f003 f946 	bl	800e0a0 <tcp_timer_needed>
      }
      break;
 800ae14:	e06c      	b.n	800aef0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f984 	bl	800b124 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ae1c:	4b3b      	ldr	r3, [pc, #236]	; (800af0c <tcp_process+0x7d0>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	f003 0310 	and.w	r3, r3, #16
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d065      	beq.n	800aef4 <tcp_process+0x7b8>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae2c:	4b38      	ldr	r3, [pc, #224]	; (800af10 <tcp_process+0x7d4>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d15f      	bne.n	800aef4 <tcp_process+0x7b8>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d15b      	bne.n	800aef4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7fe fc67 	bl	8009710 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ae42:	4b35      	ldr	r3, [pc, #212]	; (800af18 <tcp_process+0x7dc>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d105      	bne.n	800ae58 <tcp_process+0x71c>
 800ae4c:	4b32      	ldr	r3, [pc, #200]	; (800af18 <tcp_process+0x7dc>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	4a31      	ldr	r2, [pc, #196]	; (800af18 <tcp_process+0x7dc>)
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	e013      	b.n	800ae80 <tcp_process+0x744>
 800ae58:	4b2f      	ldr	r3, [pc, #188]	; (800af18 <tcp_process+0x7dc>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	e00c      	b.n	800ae7a <tcp_process+0x73e>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d104      	bne.n	800ae74 <tcp_process+0x738>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	60da      	str	r2, [r3, #12]
 800ae72:	e005      	b.n	800ae80 <tcp_process+0x744>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1ef      	bne.n	800ae60 <tcp_process+0x724>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	60da      	str	r2, [r3, #12]
 800ae86:	4b1f      	ldr	r3, [pc, #124]	; (800af04 <tcp_process+0x7c8>)
 800ae88:	2201      	movs	r2, #1
 800ae8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	220a      	movs	r2, #10
 800ae90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae92:	4b1d      	ldr	r3, [pc, #116]	; (800af08 <tcp_process+0x7cc>)
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	60da      	str	r2, [r3, #12]
 800ae9a:	4a1b      	ldr	r2, [pc, #108]	; (800af08 <tcp_process+0x7cc>)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6013      	str	r3, [r2, #0]
 800aea0:	f003 f8fe 	bl	800e0a0 <tcp_timer_needed>
      }
      break;
 800aea4:	e026      	b.n	800aef4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f93c 	bl	800b124 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aeac:	4b17      	ldr	r3, [pc, #92]	; (800af0c <tcp_process+0x7d0>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	f003 0310 	and.w	r3, r3, #16
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d01f      	beq.n	800aef8 <tcp_process+0x7bc>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aebc:	4b14      	ldr	r3, [pc, #80]	; (800af10 <tcp_process+0x7d4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d119      	bne.n	800aef8 <tcp_process+0x7bc>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d115      	bne.n	800aef8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800aecc:	4b11      	ldr	r3, [pc, #68]	; (800af14 <tcp_process+0x7d8>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	f043 0310 	orr.w	r3, r3, #16
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <tcp_process+0x7d8>)
 800aed8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800aeda:	e00d      	b.n	800aef8 <tcp_process+0x7bc>
    default:
      break;
 800aedc:	bf00      	nop
 800aede:	e00c      	b.n	800aefa <tcp_process+0x7be>
      break;
 800aee0:	bf00      	nop
 800aee2:	e00a      	b.n	800aefa <tcp_process+0x7be>
      break;
 800aee4:	bf00      	nop
 800aee6:	e008      	b.n	800aefa <tcp_process+0x7be>
      break;
 800aee8:	bf00      	nop
 800aeea:	e006      	b.n	800aefa <tcp_process+0x7be>
      break;
 800aeec:	bf00      	nop
 800aeee:	e004      	b.n	800aefa <tcp_process+0x7be>
      break;
 800aef0:	bf00      	nop
 800aef2:	e002      	b.n	800aefa <tcp_process+0x7be>
      break;
 800aef4:	bf00      	nop
 800aef6:	e000      	b.n	800aefa <tcp_process+0x7be>
      break;
 800aef8:	bf00      	nop
  }
  return ERR_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3724      	adds	r7, #36	; 0x24
 800af00:	46bd      	mov	sp, r7
 800af02:	bd90      	pop	{r4, r7, pc}
 800af04:	20007b24 	.word	0x20007b24
 800af08:	20007b38 	.word	0x20007b38
 800af0c:	200005c4 	.word	0x200005c4
 800af10:	200005bc 	.word	0x200005bc
 800af14:	200005c5 	.word	0x200005c5
 800af18:	20007b28 	.word	0x20007b28

0800af1c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800af1c:	b590      	push	{r4, r7, lr}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d106      	bne.n	800af3a <tcp_oos_insert_segment+0x1e>
 800af2c:	4b3b      	ldr	r3, [pc, #236]	; (800b01c <tcp_oos_insert_segment+0x100>)
 800af2e:	f240 421f 	movw	r2, #1055	; 0x41f
 800af32:	493b      	ldr	r1, [pc, #236]	; (800b020 <tcp_oos_insert_segment+0x104>)
 800af34:	483b      	ldr	r0, [pc, #236]	; (800b024 <tcp_oos_insert_segment+0x108>)
 800af36:	f008 fb8b 	bl	8013650 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	899b      	ldrh	r3, [r3, #12]
 800af40:	b29b      	uxth	r3, r3
 800af42:	4618      	mov	r0, r3
 800af44:	f7fa ffd2 	bl	8005eec <lwip_htons>
 800af48:	4603      	mov	r3, r0
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	2b00      	cmp	r3, #0
 800af52:	d028      	beq.n	800afa6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800af54:	6838      	ldr	r0, [r7, #0]
 800af56:	f7fe f8c3 	bl	80090e0 <tcp_segs_free>
    next = NULL;
 800af5a:	2300      	movs	r3, #0
 800af5c:	603b      	str	r3, [r7, #0]
 800af5e:	e056      	b.n	800b00e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	899b      	ldrh	r3, [r3, #12]
 800af66:	b29b      	uxth	r3, r3
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fa ffbf 	bl	8005eec <lwip_htons>
 800af6e:	4603      	mov	r3, r0
 800af70:	b2db      	uxtb	r3, r3
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00d      	beq.n	800af96 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	899b      	ldrh	r3, [r3, #12]
 800af80:	b29c      	uxth	r4, r3
 800af82:	2001      	movs	r0, #1
 800af84:	f7fa ffb2 	bl	8005eec <lwip_htons>
 800af88:	4603      	mov	r3, r0
 800af8a:	461a      	mov	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	68db      	ldr	r3, [r3, #12]
 800af90:	4322      	orrs	r2, r4
 800af92:	b292      	uxth	r2, r2
 800af94:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f7fe f8b2 	bl	800910a <tcp_seg_free>
    while (next &&
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00e      	beq.n	800afca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	891b      	ldrh	r3, [r3, #8]
 800afb0:	461a      	mov	r2, r3
 800afb2:	4b1d      	ldr	r3, [pc, #116]	; (800b028 <tcp_oos_insert_segment+0x10c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	441a      	add	r2, r3
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	8909      	ldrh	r1, [r1, #8]
 800afc2:	440b      	add	r3, r1
 800afc4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	daca      	bge.n	800af60 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d01e      	beq.n	800b00e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	891b      	ldrh	r3, [r3, #8]
 800afd4:	461a      	mov	r2, r3
 800afd6:	4b14      	ldr	r3, [pc, #80]	; (800b028 <tcp_oos_insert_segment+0x10c>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	441a      	add	r2, r3
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dd12      	ble.n	800b00e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	b29a      	uxth	r2, r3
 800aff0:	4b0d      	ldr	r3, [pc, #52]	; (800b028 <tcp_oos_insert_segment+0x10c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	b29a      	uxth	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	891b      	ldrh	r3, [r3, #8]
 800b006:	4619      	mov	r1, r3
 800b008:	4610      	mov	r0, r2
 800b00a:	f7fc fab3 	bl	8007574 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	601a      	str	r2, [r3, #0]
}
 800b014:	bf00      	nop
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd90      	pop	{r4, r7, pc}
 800b01c:	08015e58 	.word	0x08015e58
 800b020:	08016118 	.word	0x08016118
 800b024:	08015ea4 	.word	0x08015ea4
 800b028:	200005b8 	.word	0x200005b8

0800b02c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b02c:	b5b0      	push	{r4, r5, r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b03a:	e03e      	b.n	800b0ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fc fca0 	bl	8007990 <pbuf_clen>
 800b050:	4603      	mov	r3, r0
 800b052:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b05a:	8a7a      	ldrh	r2, [r7, #18]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d906      	bls.n	800b06e <tcp_free_acked_segments+0x42>
 800b060:	4b2a      	ldr	r3, [pc, #168]	; (800b10c <tcp_free_acked_segments+0xe0>)
 800b062:	f240 4257 	movw	r2, #1111	; 0x457
 800b066:	492a      	ldr	r1, [pc, #168]	; (800b110 <tcp_free_acked_segments+0xe4>)
 800b068:	482a      	ldr	r0, [pc, #168]	; (800b114 <tcp_free_acked_segments+0xe8>)
 800b06a:	f008 faf1 	bl	8013650 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b074:	8a7b      	ldrh	r3, [r7, #18]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	b29a      	uxth	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	891a      	ldrh	r2, [r3, #8]
 800b084:	4b24      	ldr	r3, [pc, #144]	; (800b118 <tcp_free_acked_segments+0xec>)
 800b086:	881b      	ldrh	r3, [r3, #0]
 800b088:	4413      	add	r3, r2
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	4b22      	ldr	r3, [pc, #136]	; (800b118 <tcp_free_acked_segments+0xec>)
 800b08e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b090:	6978      	ldr	r0, [r7, #20]
 800b092:	f7fe f83a 	bl	800910a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00c      	beq.n	800b0ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d109      	bne.n	800b0ba <tcp_free_acked_segments+0x8e>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d106      	bne.n	800b0ba <tcp_free_acked_segments+0x8e>
 800b0ac:	4b17      	ldr	r3, [pc, #92]	; (800b10c <tcp_free_acked_segments+0xe0>)
 800b0ae:	f240 4261 	movw	r2, #1121	; 0x461
 800b0b2:	491a      	ldr	r1, [pc, #104]	; (800b11c <tcp_free_acked_segments+0xf0>)
 800b0b4:	4817      	ldr	r0, [pc, #92]	; (800b114 <tcp_free_acked_segments+0xe8>)
 800b0b6:	f008 facb 	bl	8013650 <iprintf>
  while (seg_list != NULL &&
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d020      	beq.n	800b102 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fa ff25 	bl	8005f16 <lwip_htonl>
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	891b      	ldrh	r3, [r3, #8]
 800b0d2:	461d      	mov	r5, r3
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	899b      	ldrh	r3, [r3, #12]
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fa ff05 	bl	8005eec <lwip_htons>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <tcp_free_acked_segments+0xc6>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e000      	b.n	800b0f4 <tcp_free_acked_segments+0xc8>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	442b      	add	r3, r5
 800b0f6:	18e2      	adds	r2, r4, r3
 800b0f8:	4b09      	ldr	r3, [pc, #36]	; (800b120 <tcp_free_acked_segments+0xf4>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dd9c      	ble.n	800b03c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b102:	68bb      	ldr	r3, [r7, #8]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bdb0      	pop	{r4, r5, r7, pc}
 800b10c:	08015e58 	.word	0x08015e58
 800b110:	08016140 	.word	0x08016140
 800b114:	08015ea4 	.word	0x08015ea4
 800b118:	200005c0 	.word	0x200005c0
 800b11c:	08016168 	.word	0x08016168
 800b120:	200005bc 	.word	0x200005bc

0800b124 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b124:	b5b0      	push	{r4, r5, r7, lr}
 800b126:	b094      	sub	sp, #80	; 0x50
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d106      	bne.n	800b144 <tcp_receive+0x20>
 800b136:	4ba6      	ldr	r3, [pc, #664]	; (800b3d0 <tcp_receive+0x2ac>)
 800b138:	f240 427b 	movw	r2, #1147	; 0x47b
 800b13c:	49a5      	ldr	r1, [pc, #660]	; (800b3d4 <tcp_receive+0x2b0>)
 800b13e:	48a6      	ldr	r0, [pc, #664]	; (800b3d8 <tcp_receive+0x2b4>)
 800b140:	f008 fa86 	bl	8013650 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	7d1b      	ldrb	r3, [r3, #20]
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d806      	bhi.n	800b15a <tcp_receive+0x36>
 800b14c:	4ba0      	ldr	r3, [pc, #640]	; (800b3d0 <tcp_receive+0x2ac>)
 800b14e:	f240 427c 	movw	r2, #1148	; 0x47c
 800b152:	49a2      	ldr	r1, [pc, #648]	; (800b3dc <tcp_receive+0x2b8>)
 800b154:	48a0      	ldr	r0, [pc, #640]	; (800b3d8 <tcp_receive+0x2b4>)
 800b156:	f008 fa7b 	bl	8013650 <iprintf>

  if (flags & TCP_ACK) {
 800b15a:	4ba1      	ldr	r3, [pc, #644]	; (800b3e0 <tcp_receive+0x2bc>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	f003 0310 	and.w	r3, r3, #16
 800b162:	2b00      	cmp	r3, #0
 800b164:	f000 8263 	beq.w	800b62e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b16e:	461a      	mov	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b174:	4413      	add	r3, r2
 800b176:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b17c:	4b99      	ldr	r3, [pc, #612]	; (800b3e4 <tcp_receive+0x2c0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	2b00      	cmp	r3, #0
 800b184:	db1b      	blt.n	800b1be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b18a:	4b96      	ldr	r3, [pc, #600]	; (800b3e4 <tcp_receive+0x2c0>)
 800b18c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b18e:	429a      	cmp	r2, r3
 800b190:	d106      	bne.n	800b1a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b196:	4b94      	ldr	r3, [pc, #592]	; (800b3e8 <tcp_receive+0x2c4>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	db0e      	blt.n	800b1be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1a4:	4b90      	ldr	r3, [pc, #576]	; (800b3e8 <tcp_receive+0x2c4>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d125      	bne.n	800b1f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b1ac:	4b8f      	ldr	r3, [pc, #572]	; (800b3ec <tcp_receive+0x2c8>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	89db      	ldrh	r3, [r3, #14]
 800b1b2:	b29a      	uxth	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d91c      	bls.n	800b1f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b1be:	4b8b      	ldr	r3, [pc, #556]	; (800b3ec <tcp_receive+0x2c8>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	89db      	ldrh	r3, [r3, #14]
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d205      	bcs.n	800b1e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b1e8:	4b7e      	ldr	r3, [pc, #504]	; (800b3e4 <tcp_receive+0x2c0>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b1f0:	4b7d      	ldr	r3, [pc, #500]	; (800b3e8 <tcp_receive+0x2c4>)
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b1f8:	4b7b      	ldr	r3, [pc, #492]	; (800b3e8 <tcp_receive+0x2c4>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	dc58      	bgt.n	800b2b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b206:	4b7a      	ldr	r3, [pc, #488]	; (800b3f0 <tcp_receive+0x2cc>)
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d14b      	bne.n	800b2a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b218:	4413      	add	r3, r2
 800b21a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d142      	bne.n	800b2a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b226:	2b00      	cmp	r3, #0
 800b228:	db3d      	blt.n	800b2a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b22e:	4b6e      	ldr	r3, [pc, #440]	; (800b3e8 <tcp_receive+0x2c4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	d137      	bne.n	800b2a6 <tcp_receive+0x182>
              found_dupack = 1;
 800b236:	2301      	movs	r3, #1
 800b238:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b240:	2bff      	cmp	r3, #255	; 0xff
 800b242:	d007      	beq.n	800b254 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b24a:	3301      	adds	r3, #1
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d91b      	bls.n	800b296 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b268:	4413      	add	r3, r2
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b272:	429a      	cmp	r2, r3
 800b274:	d30a      	bcc.n	800b28c <tcp_receive+0x168>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b280:	4413      	add	r3, r2
 800b282:	b29a      	uxth	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b28a:	e004      	b.n	800b296 <tcp_receive+0x172>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b292:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d902      	bls.n	800b2a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f002 fb85 	bl	800d9b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b2a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f040 8160 	bne.w	800b56e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2b6:	e15a      	b.n	800b56e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b2b8:	4b4b      	ldr	r3, [pc, #300]	; (800b3e8 <tcp_receive+0x2c4>)
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	3b01      	subs	r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f2c0 814d 	blt.w	800b564 <tcp_receive+0x440>
 800b2ca:	4b47      	ldr	r3, [pc, #284]	; (800b3e8 <tcp_receive+0x2c4>)
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f300 8145 	bgt.w	800b564 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	8b5b      	ldrh	r3, [r3, #26]
 800b2de:	f003 0304 	and.w	r3, r3, #4
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d010      	beq.n	800b308 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ea:	f023 0304 	bic.w	r3, r3, #4
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b316:	10db      	asrs	r3, r3, #3
 800b318:	b21b      	sxth	r3, r3
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b322:	b29b      	uxth	r3, r3
 800b324:	4413      	add	r3, r2
 800b326:	b29b      	uxth	r3, r3
 800b328:	b21a      	sxth	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b330:	4b2d      	ldr	r3, [pc, #180]	; (800b3e8 <tcp_receive+0x2c4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	b29a      	uxth	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b348:	4b27      	ldr	r3, [pc, #156]	; (800b3e8 <tcp_receive+0x2c4>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	7d1b      	ldrb	r3, [r3, #20]
 800b354:	2b03      	cmp	r3, #3
 800b356:	f240 8096 	bls.w	800b486 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b366:	429a      	cmp	r2, r3
 800b368:	d244      	bcs.n	800b3f4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8b5b      	ldrh	r3, [r3, #26]
 800b36e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <tcp_receive+0x256>
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <tcp_receive+0x258>
 800b37a:	2302      	movs	r3, #2
 800b37c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b380:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b38a:	fb12 f303 	smulbb	r3, r2, r3
 800b38e:	b29b      	uxth	r3, r3
 800b390:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b392:	4293      	cmp	r3, r2
 800b394:	bf28      	it	cs
 800b396:	4613      	movcs	r3, r2
 800b398:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b3a2:	4413      	add	r3, r2
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d309      	bcc.n	800b3c4 <tcp_receive+0x2a0>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b3b8:	4413      	add	r3, r2
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b3c2:	e060      	b.n	800b486 <tcp_receive+0x362>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b3ce:	e05a      	b.n	800b486 <tcp_receive+0x362>
 800b3d0:	08015e58 	.word	0x08015e58
 800b3d4:	08016188 	.word	0x08016188
 800b3d8:	08015ea4 	.word	0x08015ea4
 800b3dc:	080161a4 	.word	0x080161a4
 800b3e0:	200005c4 	.word	0x200005c4
 800b3e4:	200005b8 	.word	0x200005b8
 800b3e8:	200005bc 	.word	0x200005bc
 800b3ec:	200005a8 	.word	0x200005a8
 800b3f0:	200005c2 	.word	0x200005c2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b3fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3fc:	4413      	add	r3, r2
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b406:	429a      	cmp	r2, r3
 800b408:	d309      	bcc.n	800b41e <tcp_receive+0x2fa>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b410:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b412:	4413      	add	r3, r2
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b41c:	e004      	b.n	800b428 <tcp_receive+0x304>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b434:	429a      	cmp	r2, r3
 800b436:	d326      	bcc.n	800b486 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	b29a      	uxth	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b458:	4413      	add	r3, r2
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b462:	429a      	cmp	r2, r3
 800b464:	d30a      	bcc.n	800b47c <tcp_receive+0x358>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b470:	4413      	add	r3, r2
 800b472:	b29a      	uxth	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b47a:	e004      	b.n	800b486 <tcp_receive+0x362>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b482:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b48e:	4a98      	ldr	r2, [pc, #608]	; (800b6f0 <tcp_receive+0x5cc>)
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff fdcb 	bl	800b02c <tcp_free_acked_segments>
 800b496:	4602      	mov	r2, r0
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a4:	4a93      	ldr	r2, [pc, #588]	; (800b6f4 <tcp_receive+0x5d0>)
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff fdc0 	bl	800b02c <tcp_free_acked_segments>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d104      	bne.n	800b4c4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4c0:	861a      	strh	r2, [r3, #48]	; 0x30
 800b4c2:	e002      	b.n	800b4ca <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d103      	bne.n	800b4e0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b4e6:	4b84      	ldr	r3, [pc, #528]	; (800b6f8 <tcp_receive+0x5d4>)
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	8b5b      	ldrh	r3, [r3, #26]
 800b4f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d035      	beq.n	800b56c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b504:	2b00      	cmp	r3, #0
 800b506:	d118      	bne.n	800b53a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00c      	beq.n	800b52a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f7fa fcfa 	bl	8005f16 <lwip_htonl>
 800b522:	4603      	mov	r3, r0
 800b524:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b526:	2b00      	cmp	r3, #0
 800b528:	dc20      	bgt.n	800b56c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	8b5b      	ldrh	r3, [r3, #26]
 800b52e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b532:	b29a      	uxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b538:	e018      	b.n	800b56c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	4618      	mov	r0, r3
 800b548:	f7fa fce5 	bl	8005f16 <lwip_htonl>
 800b54c:	4603      	mov	r3, r0
 800b54e:	1ae3      	subs	r3, r4, r3
 800b550:	2b00      	cmp	r3, #0
 800b552:	dc0b      	bgt.n	800b56c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	8b5b      	ldrh	r3, [r3, #26]
 800b558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b562:	e003      	b.n	800b56c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f002 fc2b 	bl	800ddc0 <tcp_send_empty_ack>
 800b56a:	e000      	b.n	800b56e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b56c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b572:	2b00      	cmp	r3, #0
 800b574:	d05b      	beq.n	800b62e <tcp_receive+0x50a>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b57a:	4b60      	ldr	r3, [pc, #384]	; (800b6fc <tcp_receive+0x5d8>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	2b00      	cmp	r3, #0
 800b582:	da54      	bge.n	800b62e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b584:	4b5e      	ldr	r3, [pc, #376]	; (800b700 <tcp_receive+0x5dc>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	b29a      	uxth	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58e:	b29b      	uxth	r3, r3
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	b29b      	uxth	r3, r3
 800b594:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b598:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b5a2:	10db      	asrs	r3, r3, #3
 800b5a4:	b21b      	sxth	r3, r3
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b5bc:	4413      	add	r3, r2
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	b21a      	sxth	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b5c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	da05      	bge.n	800b5da <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800b5ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b5d2:	425b      	negs	r3, r3
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b5da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b5e4:	109b      	asrs	r3, r3, #2
 800b5e6:	b21b      	sxth	r3, r3
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b5f8:	b29a      	uxth	r2, r3
 800b5fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b5fe:	4413      	add	r3, r2
 800b600:	b29b      	uxth	r3, r3
 800b602:	b21a      	sxth	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b60e:	10db      	asrs	r3, r3, #3
 800b610:	b21b      	sxth	r3, r3
 800b612:	b29a      	uxth	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	4413      	add	r3, r2
 800b61e:	b29b      	uxth	r3, r3
 800b620:	b21a      	sxth	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b62e:	4b35      	ldr	r3, [pc, #212]	; (800b704 <tcp_receive+0x5e0>)
 800b630:	881b      	ldrh	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 84e1 	beq.w	800bffa <tcp_receive+0xed6>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	7d1b      	ldrb	r3, [r3, #20]
 800b63c:	2b06      	cmp	r3, #6
 800b63e:	f200 84dc 	bhi.w	800bffa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b646:	4b30      	ldr	r3, [pc, #192]	; (800b708 <tcp_receive+0x5e4>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	3b01      	subs	r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f2c0 808e 	blt.w	800b770 <tcp_receive+0x64c>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b658:	4b2a      	ldr	r3, [pc, #168]	; (800b704 <tcp_receive+0x5e0>)
 800b65a:	881b      	ldrh	r3, [r3, #0]
 800b65c:	4619      	mov	r1, r3
 800b65e:	4b2a      	ldr	r3, [pc, #168]	; (800b708 <tcp_receive+0x5e4>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	440b      	add	r3, r1
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	3301      	adds	r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f300 8081 	bgt.w	800b770 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b66e:	4b27      	ldr	r3, [pc, #156]	; (800b70c <tcp_receive+0x5e8>)
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b678:	4b23      	ldr	r3, [pc, #140]	; (800b708 <tcp_receive+0x5e4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b680:	4b22      	ldr	r3, [pc, #136]	; (800b70c <tcp_receive+0x5e8>)
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d106      	bne.n	800b696 <tcp_receive+0x572>
 800b688:	4b21      	ldr	r3, [pc, #132]	; (800b710 <tcp_receive+0x5ec>)
 800b68a:	f240 5294 	movw	r2, #1428	; 0x594
 800b68e:	4921      	ldr	r1, [pc, #132]	; (800b714 <tcp_receive+0x5f0>)
 800b690:	4821      	ldr	r0, [pc, #132]	; (800b718 <tcp_receive+0x5f4>)
 800b692:	f007 ffdd 	bl	8013650 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d906      	bls.n	800b6ae <tcp_receive+0x58a>
 800b6a0:	4b1b      	ldr	r3, [pc, #108]	; (800b710 <tcp_receive+0x5ec>)
 800b6a2:	f240 5295 	movw	r2, #1429	; 0x595
 800b6a6:	491d      	ldr	r1, [pc, #116]	; (800b71c <tcp_receive+0x5f8>)
 800b6a8:	481b      	ldr	r0, [pc, #108]	; (800b718 <tcp_receive+0x5f4>)
 800b6aa:	f007 ffd1 	bl	8013650 <iprintf>
      off = (u16_t)off32;
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b6b4:	4b15      	ldr	r3, [pc, #84]	; (800b70c <tcp_receive+0x5e8>)
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	891b      	ldrh	r3, [r3, #8]
 800b6ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d906      	bls.n	800b6d0 <tcp_receive+0x5ac>
 800b6c2:	4b13      	ldr	r3, [pc, #76]	; (800b710 <tcp_receive+0x5ec>)
 800b6c4:	f240 5297 	movw	r2, #1431	; 0x597
 800b6c8:	4915      	ldr	r1, [pc, #84]	; (800b720 <tcp_receive+0x5fc>)
 800b6ca:	4813      	ldr	r0, [pc, #76]	; (800b718 <tcp_receive+0x5f4>)
 800b6cc:	f007 ffc0 	bl	8013650 <iprintf>
      inseg.len -= off;
 800b6d0:	4b0e      	ldr	r3, [pc, #56]	; (800b70c <tcp_receive+0x5e8>)
 800b6d2:	891a      	ldrh	r2, [r3, #8]
 800b6d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <tcp_receive+0x5e8>)
 800b6de:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <tcp_receive+0x5e8>)
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	891a      	ldrh	r2, [r3, #8]
 800b6e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b6ee:	e029      	b.n	800b744 <tcp_receive+0x620>
 800b6f0:	080161c0 	.word	0x080161c0
 800b6f4:	080161c8 	.word	0x080161c8
 800b6f8:	200005c0 	.word	0x200005c0
 800b6fc:	200005bc 	.word	0x200005bc
 800b700:	20007b2c 	.word	0x20007b2c
 800b704:	200005c2 	.word	0x200005c2
 800b708:	200005b8 	.word	0x200005b8
 800b70c:	20000598 	.word	0x20000598
 800b710:	08015e58 	.word	0x08015e58
 800b714:	080161d0 	.word	0x080161d0
 800b718:	08015ea4 	.word	0x08015ea4
 800b71c:	080161e0 	.word	0x080161e0
 800b720:	080161f0 	.word	0x080161f0
        off -= p->len;
 800b724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b726:	895b      	ldrh	r3, [r3, #10]
 800b728:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b734:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b736:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b73a:	2200      	movs	r2, #0
 800b73c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b746:	895b      	ldrh	r3, [r3, #10]
 800b748:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d8e9      	bhi.n	800b724 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b754:	4619      	mov	r1, r3
 800b756:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b758:	f7fc f80c 	bl	8007774 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b760:	4a91      	ldr	r2, [pc, #580]	; (800b9a8 <tcp_receive+0x884>)
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	4b91      	ldr	r3, [pc, #580]	; (800b9ac <tcp_receive+0x888>)
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	4a8f      	ldr	r2, [pc, #572]	; (800b9a8 <tcp_receive+0x884>)
 800b76a:	6812      	ldr	r2, [r2, #0]
 800b76c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b76e:	e00d      	b.n	800b78c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b770:	4b8d      	ldr	r3, [pc, #564]	; (800b9a8 <tcp_receive+0x884>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	da06      	bge.n	800b78c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	8b5b      	ldrh	r3, [r3, #26]
 800b782:	f043 0302 	orr.w	r3, r3, #2
 800b786:	b29a      	uxth	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b78c:	4b86      	ldr	r3, [pc, #536]	; (800b9a8 <tcp_receive+0x884>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	2b00      	cmp	r3, #0
 800b798:	f2c0 842a 	blt.w	800bff0 <tcp_receive+0xecc>
 800b79c:	4b82      	ldr	r3, [pc, #520]	; (800b9a8 <tcp_receive+0x884>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b7a8:	440b      	add	r3, r1
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f300 841e 	bgt.w	800bff0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7b8:	4b7b      	ldr	r3, [pc, #492]	; (800b9a8 <tcp_receive+0x884>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	f040 829a 	bne.w	800bcf6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b7c2:	4b7a      	ldr	r3, [pc, #488]	; (800b9ac <tcp_receive+0x888>)
 800b7c4:	891c      	ldrh	r4, [r3, #8]
 800b7c6:	4b79      	ldr	r3, [pc, #484]	; (800b9ac <tcp_receive+0x888>)
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	899b      	ldrh	r3, [r3, #12]
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fa fb8c 	bl	8005eec <lwip_htons>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	f003 0303 	and.w	r3, r3, #3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <tcp_receive+0x6c0>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e000      	b.n	800b7e6 <tcp_receive+0x6c2>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	4423      	add	r3, r4
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	4b71      	ldr	r3, [pc, #452]	; (800b9b0 <tcp_receive+0x88c>)
 800b7ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b7f2:	4b6f      	ldr	r3, [pc, #444]	; (800b9b0 <tcp_receive+0x88c>)
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d275      	bcs.n	800b8e6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b7fa:	4b6c      	ldr	r3, [pc, #432]	; (800b9ac <tcp_receive+0x888>)
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	899b      	ldrh	r3, [r3, #12]
 800b800:	b29b      	uxth	r3, r3
 800b802:	4618      	mov	r0, r3
 800b804:	f7fa fb72 	bl	8005eec <lwip_htons>
 800b808:	4603      	mov	r3, r0
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01f      	beq.n	800b854 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b814:	4b65      	ldr	r3, [pc, #404]	; (800b9ac <tcp_receive+0x888>)
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	899b      	ldrh	r3, [r3, #12]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	b21b      	sxth	r3, r3
 800b81e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b822:	b21c      	sxth	r4, r3
 800b824:	4b61      	ldr	r3, [pc, #388]	; (800b9ac <tcp_receive+0x888>)
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	899b      	ldrh	r3, [r3, #12]
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fa fb5d 	bl	8005eec <lwip_htons>
 800b832:	4603      	mov	r3, r0
 800b834:	b2db      	uxtb	r3, r3
 800b836:	b29b      	uxth	r3, r3
 800b838:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fa fb54 	bl	8005eec <lwip_htons>
 800b844:	4603      	mov	r3, r0
 800b846:	b21b      	sxth	r3, r3
 800b848:	4323      	orrs	r3, r4
 800b84a:	b21a      	sxth	r2, r3
 800b84c:	4b57      	ldr	r3, [pc, #348]	; (800b9ac <tcp_receive+0x888>)
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	b292      	uxth	r2, r2
 800b852:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b858:	4b54      	ldr	r3, [pc, #336]	; (800b9ac <tcp_receive+0x888>)
 800b85a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b85c:	4b53      	ldr	r3, [pc, #332]	; (800b9ac <tcp_receive+0x888>)
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	899b      	ldrh	r3, [r3, #12]
 800b862:	b29b      	uxth	r3, r3
 800b864:	4618      	mov	r0, r3
 800b866:	f7fa fb41 	bl	8005eec <lwip_htons>
 800b86a:	4603      	mov	r3, r0
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	f003 0302 	and.w	r3, r3, #2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <tcp_receive+0x75e>
            inseg.len -= 1;
 800b876:	4b4d      	ldr	r3, [pc, #308]	; (800b9ac <tcp_receive+0x888>)
 800b878:	891b      	ldrh	r3, [r3, #8]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	4b4b      	ldr	r3, [pc, #300]	; (800b9ac <tcp_receive+0x888>)
 800b880:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b882:	4b4a      	ldr	r3, [pc, #296]	; (800b9ac <tcp_receive+0x888>)
 800b884:	685b      	ldr	r3, [r3, #4]
 800b886:	4a49      	ldr	r2, [pc, #292]	; (800b9ac <tcp_receive+0x888>)
 800b888:	8912      	ldrh	r2, [r2, #8]
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fb fe71 	bl	8007574 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b892:	4b46      	ldr	r3, [pc, #280]	; (800b9ac <tcp_receive+0x888>)
 800b894:	891c      	ldrh	r4, [r3, #8]
 800b896:	4b45      	ldr	r3, [pc, #276]	; (800b9ac <tcp_receive+0x888>)
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	899b      	ldrh	r3, [r3, #12]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7fa fb24 	bl	8005eec <lwip_htons>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	f003 0303 	and.w	r3, r3, #3
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <tcp_receive+0x790>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e000      	b.n	800b8b6 <tcp_receive+0x792>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4423      	add	r3, r4
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	4b3d      	ldr	r3, [pc, #244]	; (800b9b0 <tcp_receive+0x88c>)
 800b8bc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b8be:	4b3c      	ldr	r3, [pc, #240]	; (800b9b0 <tcp_receive+0x88c>)
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	4b38      	ldr	r3, [pc, #224]	; (800b9a8 <tcp_receive+0x884>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	441a      	add	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b8d2:	440b      	add	r3, r1
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d006      	beq.n	800b8e6 <tcp_receive+0x7c2>
 800b8d8:	4b36      	ldr	r3, [pc, #216]	; (800b9b4 <tcp_receive+0x890>)
 800b8da:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b8de:	4936      	ldr	r1, [pc, #216]	; (800b9b8 <tcp_receive+0x894>)
 800b8e0:	4836      	ldr	r0, [pc, #216]	; (800b9bc <tcp_receive+0x898>)
 800b8e2:	f007 feb5 	bl	8013650 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 80e7 	beq.w	800babe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b8f0:	4b2e      	ldr	r3, [pc, #184]	; (800b9ac <tcp_receive+0x888>)
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	899b      	ldrh	r3, [r3, #12]
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fa faf7 	bl	8005eec <lwip_htons>
 800b8fe:	4603      	mov	r3, r0
 800b900:	b2db      	uxtb	r3, r3
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	2b00      	cmp	r3, #0
 800b908:	d010      	beq.n	800b92c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b90a:	e00a      	b.n	800b922 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b910:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f7fd fbf4 	bl	800910a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1f0      	bne.n	800b90c <tcp_receive+0x7e8>
 800b92a:	e0c8      	b.n	800babe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b930:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b932:	e052      	b.n	800b9da <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	899b      	ldrh	r3, [r3, #12]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7fa fad5 	bl	8005eec <lwip_htons>
 800b942:	4603      	mov	r3, r0
 800b944:	b2db      	uxtb	r3, r3
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d03d      	beq.n	800b9ca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b94e:	4b17      	ldr	r3, [pc, #92]	; (800b9ac <tcp_receive+0x888>)
 800b950:	68db      	ldr	r3, [r3, #12]
 800b952:	899b      	ldrh	r3, [r3, #12]
 800b954:	b29b      	uxth	r3, r3
 800b956:	4618      	mov	r0, r3
 800b958:	f7fa fac8 	bl	8005eec <lwip_htons>
 800b95c:	4603      	mov	r3, r0
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b964:	2b00      	cmp	r3, #0
 800b966:	d130      	bne.n	800b9ca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b968:	4b10      	ldr	r3, [pc, #64]	; (800b9ac <tcp_receive+0x888>)
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	899b      	ldrh	r3, [r3, #12]
 800b96e:	b29c      	uxth	r4, r3
 800b970:	2001      	movs	r0, #1
 800b972:	f7fa fabb 	bl	8005eec <lwip_htons>
 800b976:	4603      	mov	r3, r0
 800b978:	461a      	mov	r2, r3
 800b97a:	4b0c      	ldr	r3, [pc, #48]	; (800b9ac <tcp_receive+0x888>)
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	4322      	orrs	r2, r4
 800b980:	b292      	uxth	r2, r2
 800b982:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b984:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <tcp_receive+0x888>)
 800b986:	891c      	ldrh	r4, [r3, #8]
 800b988:	4b08      	ldr	r3, [pc, #32]	; (800b9ac <tcp_receive+0x888>)
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	899b      	ldrh	r3, [r3, #12]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	4618      	mov	r0, r3
 800b992:	f7fa faab 	bl	8005eec <lwip_htons>
 800b996:	4603      	mov	r3, r0
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	f003 0303 	and.w	r3, r3, #3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00e      	beq.n	800b9c0 <tcp_receive+0x89c>
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e00d      	b.n	800b9c2 <tcp_receive+0x89e>
 800b9a6:	bf00      	nop
 800b9a8:	200005b8 	.word	0x200005b8
 800b9ac:	20000598 	.word	0x20000598
 800b9b0:	200005c2 	.word	0x200005c2
 800b9b4:	08015e58 	.word	0x08015e58
 800b9b8:	08016200 	.word	0x08016200
 800b9bc:	08015ea4 	.word	0x08015ea4
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4423      	add	r3, r4
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	4b98      	ldr	r3, [pc, #608]	; (800bc28 <tcp_receive+0xb04>)
 800b9c8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9cc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b9d4:	6938      	ldr	r0, [r7, #16]
 800b9d6:	f7fd fb98 	bl	800910a <tcp_seg_free>
            while (next &&
 800b9da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00e      	beq.n	800b9fe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b9e0:	4b91      	ldr	r3, [pc, #580]	; (800bc28 <tcp_receive+0xb04>)
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	4b91      	ldr	r3, [pc, #580]	; (800bc2c <tcp_receive+0xb08>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	441a      	add	r2, r3
 800b9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9f4:	8909      	ldrh	r1, [r1, #8]
 800b9f6:	440b      	add	r3, r1
 800b9f8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	da9a      	bge.n	800b934 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d059      	beq.n	800bab8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ba04:	4b88      	ldr	r3, [pc, #544]	; (800bc28 <tcp_receive+0xb04>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4b88      	ldr	r3, [pc, #544]	; (800bc2c <tcp_receive+0xb08>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	441a      	add	r2, r3
 800ba10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	dd4d      	ble.n	800bab8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ba1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	4b81      	ldr	r3, [pc, #516]	; (800bc2c <tcp_receive+0xb08>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	4b80      	ldr	r3, [pc, #512]	; (800bc30 <tcp_receive+0xb0c>)
 800ba30:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ba32:	4b7f      	ldr	r3, [pc, #508]	; (800bc30 <tcp_receive+0xb0c>)
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	899b      	ldrh	r3, [r3, #12]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fa fa56 	bl	8005eec <lwip_htons>
 800ba40:	4603      	mov	r3, r0
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	f003 0302 	and.w	r3, r3, #2
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <tcp_receive+0x934>
                inseg.len -= 1;
 800ba4c:	4b78      	ldr	r3, [pc, #480]	; (800bc30 <tcp_receive+0xb0c>)
 800ba4e:	891b      	ldrh	r3, [r3, #8]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	4b76      	ldr	r3, [pc, #472]	; (800bc30 <tcp_receive+0xb0c>)
 800ba56:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ba58:	4b75      	ldr	r3, [pc, #468]	; (800bc30 <tcp_receive+0xb0c>)
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	4a74      	ldr	r2, [pc, #464]	; (800bc30 <tcp_receive+0xb0c>)
 800ba5e:	8912      	ldrh	r2, [r2, #8]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fb fd86 	bl	8007574 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ba68:	4b71      	ldr	r3, [pc, #452]	; (800bc30 <tcp_receive+0xb0c>)
 800ba6a:	891c      	ldrh	r4, [r3, #8]
 800ba6c:	4b70      	ldr	r3, [pc, #448]	; (800bc30 <tcp_receive+0xb0c>)
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	899b      	ldrh	r3, [r3, #12]
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fa fa39 	bl	8005eec <lwip_htons>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <tcp_receive+0x966>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e000      	b.n	800ba8c <tcp_receive+0x968>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4423      	add	r3, r4
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	4b65      	ldr	r3, [pc, #404]	; (800bc28 <tcp_receive+0xb04>)
 800ba92:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ba94:	4b64      	ldr	r3, [pc, #400]	; (800bc28 <tcp_receive+0xb04>)
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4b64      	ldr	r3, [pc, #400]	; (800bc2c <tcp_receive+0xb08>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	441a      	add	r2, r3
 800baa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d006      	beq.n	800bab8 <tcp_receive+0x994>
 800baaa:	4b62      	ldr	r3, [pc, #392]	; (800bc34 <tcp_receive+0xb10>)
 800baac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bab0:	4961      	ldr	r1, [pc, #388]	; (800bc38 <tcp_receive+0xb14>)
 800bab2:	4862      	ldr	r0, [pc, #392]	; (800bc3c <tcp_receive+0xb18>)
 800bab4:	f007 fdcc 	bl	8013650 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800babc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800babe:	4b5a      	ldr	r3, [pc, #360]	; (800bc28 <tcp_receive+0xb04>)
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	4b59      	ldr	r3, [pc, #356]	; (800bc2c <tcp_receive+0xb08>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	441a      	add	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bad2:	4b55      	ldr	r3, [pc, #340]	; (800bc28 <tcp_receive+0xb04>)
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d206      	bcs.n	800bae8 <tcp_receive+0x9c4>
 800bada:	4b56      	ldr	r3, [pc, #344]	; (800bc34 <tcp_receive+0xb10>)
 800badc:	f240 6207 	movw	r2, #1543	; 0x607
 800bae0:	4957      	ldr	r1, [pc, #348]	; (800bc40 <tcp_receive+0xb1c>)
 800bae2:	4856      	ldr	r0, [pc, #344]	; (800bc3c <tcp_receive+0xb18>)
 800bae4:	f007 fdb4 	bl	8013650 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800baec:	4b4e      	ldr	r3, [pc, #312]	; (800bc28 <tcp_receive+0xb04>)
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7fc fde1 	bl	80086c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bafe:	4b4c      	ldr	r3, [pc, #304]	; (800bc30 <tcp_receive+0xb0c>)
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	891b      	ldrh	r3, [r3, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d006      	beq.n	800bb16 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800bb08:	4b49      	ldr	r3, [pc, #292]	; (800bc30 <tcp_receive+0xb0c>)
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	4a4d      	ldr	r2, [pc, #308]	; (800bc44 <tcp_receive+0xb20>)
 800bb0e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bb10:	4b47      	ldr	r3, [pc, #284]	; (800bc30 <tcp_receive+0xb0c>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb16:	4b46      	ldr	r3, [pc, #280]	; (800bc30 <tcp_receive+0xb0c>)
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	899b      	ldrh	r3, [r3, #12]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fa f9e4 	bl	8005eec <lwip_htons>
 800bb24:	4603      	mov	r3, r0
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 0301 	and.w	r3, r3, #1
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 80b8 	beq.w	800bca2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bb32:	4b45      	ldr	r3, [pc, #276]	; (800bc48 <tcp_receive+0xb24>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	f043 0320 	orr.w	r3, r3, #32
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	4b42      	ldr	r3, [pc, #264]	; (800bc48 <tcp_receive+0xb24>)
 800bb3e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bb40:	e0af      	b.n	800bca2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb46:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	4a36      	ldr	r2, [pc, #216]	; (800bc2c <tcp_receive+0xb08>)
 800bb52:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	891b      	ldrh	r3, [r3, #8]
 800bb58:	461c      	mov	r4, r3
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	899b      	ldrh	r3, [r3, #12]
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fa f9c2 	bl	8005eec <lwip_htons>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	f003 0303 	and.w	r3, r3, #3
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <tcp_receive+0xa54>
 800bb74:	2301      	movs	r3, #1
 800bb76:	e000      	b.n	800bb7a <tcp_receive+0xa56>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	191a      	adds	r2, r3, r4
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	441a      	add	r2, r3
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb8a:	461c      	mov	r4, r3
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	891b      	ldrh	r3, [r3, #8]
 800bb90:	461d      	mov	r5, r3
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	899b      	ldrh	r3, [r3, #12]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fa f9a6 	bl	8005eec <lwip_htons>
 800bba0:	4603      	mov	r3, r0
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 0303 	and.w	r3, r3, #3
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d001      	beq.n	800bbb0 <tcp_receive+0xa8c>
 800bbac:	2301      	movs	r3, #1
 800bbae:	e000      	b.n	800bbb2 <tcp_receive+0xa8e>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	442b      	add	r3, r5
 800bbb4:	429c      	cmp	r4, r3
 800bbb6:	d206      	bcs.n	800bbc6 <tcp_receive+0xaa2>
 800bbb8:	4b1e      	ldr	r3, [pc, #120]	; (800bc34 <tcp_receive+0xb10>)
 800bbba:	f240 622b 	movw	r2, #1579	; 0x62b
 800bbbe:	4923      	ldr	r1, [pc, #140]	; (800bc4c <tcp_receive+0xb28>)
 800bbc0:	481e      	ldr	r0, [pc, #120]	; (800bc3c <tcp_receive+0xb18>)
 800bbc2:	f007 fd45 	bl	8013650 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	891b      	ldrh	r3, [r3, #8]
 800bbca:	461c      	mov	r4, r3
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	899b      	ldrh	r3, [r3, #12]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fa f989 	bl	8005eec <lwip_htons>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	f003 0303 	and.w	r3, r3, #3
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <tcp_receive+0xac6>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <tcp_receive+0xac8>
 800bbea:	2300      	movs	r3, #0
 800bbec:	1919      	adds	r1, r3, r4
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bbf2:	b28b      	uxth	r3, r1
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7fc fd5f 	bl	80086c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	891b      	ldrh	r3, [r3, #8]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d028      	beq.n	800bc5e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bc0c:	4b0d      	ldr	r3, [pc, #52]	; (800bc44 <tcp_receive+0xb20>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d01d      	beq.n	800bc50 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800bc14:	4b0b      	ldr	r3, [pc, #44]	; (800bc44 <tcp_receive+0xb20>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f7fb fef0 	bl	8007a04 <pbuf_cat>
 800bc24:	e018      	b.n	800bc58 <tcp_receive+0xb34>
 800bc26:	bf00      	nop
 800bc28:	200005c2 	.word	0x200005c2
 800bc2c:	200005b8 	.word	0x200005b8
 800bc30:	20000598 	.word	0x20000598
 800bc34:	08015e58 	.word	0x08015e58
 800bc38:	08016238 	.word	0x08016238
 800bc3c:	08015ea4 	.word	0x08015ea4
 800bc40:	08016274 	.word	0x08016274
 800bc44:	200005c8 	.word	0x200005c8
 800bc48:	200005c5 	.word	0x200005c5
 800bc4c:	08016294 	.word	0x08016294
            } else {
              recv_data = cseg->p;
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	4a70      	ldr	r2, [pc, #448]	; (800be18 <tcp_receive+0xcf4>)
 800bc56:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	899b      	ldrh	r3, [r3, #12]
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fa f940 	bl	8005eec <lwip_htons>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00d      	beq.n	800bc94 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bc78:	4b68      	ldr	r3, [pc, #416]	; (800be1c <tcp_receive+0xcf8>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	f043 0320 	orr.w	r3, r3, #32
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	4b66      	ldr	r3, [pc, #408]	; (800be1c <tcp_receive+0xcf8>)
 800bc84:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	7d1b      	ldrb	r3, [r3, #20]
 800bc8a:	2b04      	cmp	r3, #4
 800bc8c:	d102      	bne.n	800bc94 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2207      	movs	r2, #7
 800bc92:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bc9c:	68b8      	ldr	r0, [r7, #8]
 800bc9e:	f7fd fa34 	bl	800910a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d008      	beq.n	800bcbc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	f43f af43 	beq.w	800bb42 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8b5b      	ldrh	r3, [r3, #26]
 800bcc0:	f003 0301 	and.w	r3, r3, #1
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00e      	beq.n	800bce6 <tcp_receive+0xbc2>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	8b5b      	ldrh	r3, [r3, #26]
 800bccc:	f023 0301 	bic.w	r3, r3, #1
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	835a      	strh	r2, [r3, #26]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	8b5b      	ldrh	r3, [r3, #26]
 800bcda:	f043 0302 	orr.w	r3, r3, #2
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bce4:	e188      	b.n	800bff8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	8b5b      	ldrh	r3, [r3, #26]
 800bcea:	f043 0301 	orr.w	r3, r3, #1
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bcf4:	e180      	b.n	800bff8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d106      	bne.n	800bd0c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bcfe:	4848      	ldr	r0, [pc, #288]	; (800be20 <tcp_receive+0xcfc>)
 800bd00:	f7fd fa3a 	bl	8009178 <tcp_seg_copy>
 800bd04:	4602      	mov	r2, r0
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	675a      	str	r2, [r3, #116]	; 0x74
 800bd0a:	e16d      	b.n	800bfe8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd14:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd16:	e157      	b.n	800bfc8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	4b41      	ldr	r3, [pc, #260]	; (800be24 <tcp_receive+0xd00>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d11d      	bne.n	800bd62 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bd26:	4b3e      	ldr	r3, [pc, #248]	; (800be20 <tcp_receive+0xcfc>)
 800bd28:	891a      	ldrh	r2, [r3, #8]
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	891b      	ldrh	r3, [r3, #8]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	f240 814f 	bls.w	800bfd2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bd34:	483a      	ldr	r0, [pc, #232]	; (800be20 <tcp_receive+0xcfc>)
 800bd36:	f7fd fa1f 	bl	8009178 <tcp_seg_copy>
 800bd3a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 8149 	beq.w	800bfd6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800bd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800bd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	601a      	str	r2, [r3, #0]
 800bd50:	e002      	b.n	800bd58 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bd58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd5a:	6978      	ldr	r0, [r7, #20]
 800bd5c:	f7ff f8de 	bl	800af1c <tcp_oos_insert_segment>
                }
                break;
 800bd60:	e139      	b.n	800bfd6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d117      	bne.n	800bd98 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bd68:	4b2e      	ldr	r3, [pc, #184]	; (800be24 <tcp_receive+0xd00>)
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	da57      	bge.n	800be28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bd78:	4829      	ldr	r0, [pc, #164]	; (800be20 <tcp_receive+0xcfc>)
 800bd7a:	f7fd f9fd 	bl	8009178 <tcp_seg_copy>
 800bd7e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 8129 	beq.w	800bfda <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	69ba      	ldr	r2, [r7, #24]
 800bd8c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bd8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd90:	69b8      	ldr	r0, [r7, #24]
 800bd92:	f7ff f8c3 	bl	800af1c <tcp_oos_insert_segment>
                  }
                  break;
 800bd96:	e120      	b.n	800bfda <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bd98:	4b22      	ldr	r3, [pc, #136]	; (800be24 <tcp_receive+0xd00>)
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	3b01      	subs	r3, #1
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	db3e      	blt.n	800be28 <tcp_receive+0xd04>
 800bdaa:	4b1e      	ldr	r3, [pc, #120]	; (800be24 <tcp_receive+0xd00>)
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	dc35      	bgt.n	800be28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bdbc:	4818      	ldr	r0, [pc, #96]	; (800be20 <tcp_receive+0xcfc>)
 800bdbe:	f7fd f9db 	bl	8009178 <tcp_seg_copy>
 800bdc2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f000 8109 	beq.w	800bfde <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdd4:	8912      	ldrh	r2, [r2, #8]
 800bdd6:	441a      	add	r2, r3
 800bdd8:	4b12      	ldr	r3, [pc, #72]	; (800be24 <tcp_receive+0xd00>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dd12      	ble.n	800be08 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bde2:	4b10      	ldr	r3, [pc, #64]	; (800be24 <tcp_receive+0xd00>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	b29a      	uxth	r2, r3
 800bdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfe:	891b      	ldrh	r3, [r3, #8]
 800be00:	4619      	mov	r1, r3
 800be02:	4610      	mov	r0, r2
 800be04:	f7fb fbb6 	bl	8007574 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800be08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800be0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be10:	69f8      	ldr	r0, [r7, #28]
 800be12:	f7ff f883 	bl	800af1c <tcp_oos_insert_segment>
                  }
                  break;
 800be16:	e0e2      	b.n	800bfde <tcp_receive+0xeba>
 800be18:	200005c8 	.word	0x200005c8
 800be1c:	200005c5 	.word	0x200005c5
 800be20:	20000598 	.word	0x20000598
 800be24:	200005b8 	.word	0x200005b8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	f040 80c6 	bne.w	800bfc2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800be36:	4b80      	ldr	r3, [pc, #512]	; (800c038 <tcp_receive+0xf14>)
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800be42:	2b00      	cmp	r3, #0
 800be44:	f340 80bd 	ble.w	800bfc2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800be48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	899b      	ldrh	r3, [r3, #12]
 800be4e:	b29b      	uxth	r3, r3
 800be50:	4618      	mov	r0, r3
 800be52:	f7fa f84b 	bl	8005eec <lwip_htons>
 800be56:	4603      	mov	r3, r0
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f040 80bf 	bne.w	800bfe2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800be64:	4875      	ldr	r0, [pc, #468]	; (800c03c <tcp_receive+0xf18>)
 800be66:	f7fd f987 	bl	8009178 <tcp_seg_copy>
 800be6a:	4602      	mov	r2, r0
 800be6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800be70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 80b6 	beq.w	800bfe6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800be7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be82:	8912      	ldrh	r2, [r2, #8]
 800be84:	441a      	add	r2, r3
 800be86:	4b6c      	ldr	r3, [pc, #432]	; (800c038 <tcp_receive+0xf14>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dd12      	ble.n	800beb6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800be90:	4b69      	ldr	r3, [pc, #420]	; (800c038 <tcp_receive+0xf14>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	b29a      	uxth	r2, r3
 800be96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea8:	685a      	ldr	r2, [r3, #4]
 800beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beac:	891b      	ldrh	r3, [r3, #8]
 800beae:	4619      	mov	r1, r3
 800beb0:	4610      	mov	r0, r2
 800beb2:	f7fb fb5f 	bl	8007574 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800beb6:	4b62      	ldr	r3, [pc, #392]	; (800c040 <tcp_receive+0xf1c>)
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	4b5e      	ldr	r3, [pc, #376]	; (800c038 <tcp_receive+0xf14>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	441a      	add	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800beca:	440b      	add	r3, r1
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f340 8089 	ble.w	800bfe6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	899b      	ldrh	r3, [r3, #12]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fa f804 	bl	8005eec <lwip_htons>
 800bee4:	4603      	mov	r3, r0
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	f003 0301 	and.w	r3, r3, #1
 800beec:	2b00      	cmp	r3, #0
 800beee:	d022      	beq.n	800bf36 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	899b      	ldrh	r3, [r3, #12]
 800bef8:	b29b      	uxth	r3, r3
 800befa:	b21b      	sxth	r3, r3
 800befc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf00:	b21c      	sxth	r4, r3
 800bf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	899b      	ldrh	r3, [r3, #12]
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7f9 ffed 	bl	8005eec <lwip_htons>
 800bf12:	4603      	mov	r3, r0
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7f9 ffe4 	bl	8005eec <lwip_htons>
 800bf24:	4603      	mov	r3, r0
 800bf26:	b21b      	sxth	r3, r3
 800bf28:	4323      	orrs	r3, r4
 800bf2a:	b21a      	sxth	r2, r3
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	b292      	uxth	r2, r2
 800bf34:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf40:	4413      	add	r3, r2
 800bf42:	b299      	uxth	r1, r3
 800bf44:	4b3c      	ldr	r3, [pc, #240]	; (800c038 <tcp_receive+0xf14>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	1a8a      	subs	r2, r1, r2
 800bf50:	b292      	uxth	r2, r2
 800bf52:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	685a      	ldr	r2, [r3, #4]
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	891b      	ldrh	r3, [r3, #8]
 800bf60:	4619      	mov	r1, r3
 800bf62:	4610      	mov	r0, r2
 800bf64:	f7fb fb06 	bl	8007574 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	891c      	ldrh	r4, [r3, #8]
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	899b      	ldrh	r3, [r3, #12]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7f9 ffb7 	bl	8005eec <lwip_htons>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	f003 0303 	and.w	r3, r3, #3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d001      	beq.n	800bf8e <tcp_receive+0xe6a>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e000      	b.n	800bf90 <tcp_receive+0xe6c>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	4423      	add	r3, r4
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	4b2a      	ldr	r3, [pc, #168]	; (800c040 <tcp_receive+0xf1c>)
 800bf96:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf98:	4b29      	ldr	r3, [pc, #164]	; (800c040 <tcp_receive+0xf1c>)
 800bf9a:	881b      	ldrh	r3, [r3, #0]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	4b26      	ldr	r3, [pc, #152]	; (800c038 <tcp_receive+0xf14>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	441a      	add	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bfac:	440b      	add	r3, r1
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d019      	beq.n	800bfe6 <tcp_receive+0xec2>
 800bfb2:	4b24      	ldr	r3, [pc, #144]	; (800c044 <tcp_receive+0xf20>)
 800bfb4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bfb8:	4923      	ldr	r1, [pc, #140]	; (800c048 <tcp_receive+0xf24>)
 800bfba:	4824      	ldr	r0, [pc, #144]	; (800c04c <tcp_receive+0xf28>)
 800bfbc:	f007 fb48 	bl	8013650 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bfc0:	e011      	b.n	800bfe6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f47f aea4 	bne.w	800bd18 <tcp_receive+0xbf4>
 800bfd0:	e00a      	b.n	800bfe8 <tcp_receive+0xec4>
                break;
 800bfd2:	bf00      	nop
 800bfd4:	e008      	b.n	800bfe8 <tcp_receive+0xec4>
                break;
 800bfd6:	bf00      	nop
 800bfd8:	e006      	b.n	800bfe8 <tcp_receive+0xec4>
                  break;
 800bfda:	bf00      	nop
 800bfdc:	e004      	b.n	800bfe8 <tcp_receive+0xec4>
                  break;
 800bfde:	bf00      	nop
 800bfe0:	e002      	b.n	800bfe8 <tcp_receive+0xec4>
                  break;
 800bfe2:	bf00      	nop
 800bfe4:	e000      	b.n	800bfe8 <tcp_receive+0xec4>
                break;
 800bfe6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f001 fee9 	bl	800ddc0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bfee:	e003      	b.n	800bff8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f001 fee5 	bl	800ddc0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bff6:	e01a      	b.n	800c02e <tcp_receive+0xf0a>
 800bff8:	e019      	b.n	800c02e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bffa:	4b0f      	ldr	r3, [pc, #60]	; (800c038 <tcp_receive+0xf14>)
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	2b00      	cmp	r3, #0
 800c006:	db0a      	blt.n	800c01e <tcp_receive+0xefa>
 800c008:	4b0b      	ldr	r3, [pc, #44]	; (800c038 <tcp_receive+0xf14>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c014:	440b      	add	r3, r1
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	3301      	adds	r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	dd07      	ble.n	800c02e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	8b5b      	ldrh	r3, [r3, #26]
 800c022:	f043 0302 	orr.w	r3, r3, #2
 800c026:	b29a      	uxth	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c02c:	e7ff      	b.n	800c02e <tcp_receive+0xf0a>
 800c02e:	bf00      	nop
 800c030:	3750      	adds	r7, #80	; 0x50
 800c032:	46bd      	mov	sp, r7
 800c034:	bdb0      	pop	{r4, r5, r7, pc}
 800c036:	bf00      	nop
 800c038:	200005b8 	.word	0x200005b8
 800c03c:	20000598 	.word	0x20000598
 800c040:	200005c2 	.word	0x200005c2
 800c044:	08015e58 	.word	0x08015e58
 800c048:	08016200 	.word	0x08016200
 800c04c:	08015ea4 	.word	0x08015ea4

0800c050 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c056:	4b15      	ldr	r3, [pc, #84]	; (800c0ac <tcp_get_next_optbyte+0x5c>)
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	b291      	uxth	r1, r2
 800c05e:	4a13      	ldr	r2, [pc, #76]	; (800c0ac <tcp_get_next_optbyte+0x5c>)
 800c060:	8011      	strh	r1, [r2, #0]
 800c062:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c064:	4b12      	ldr	r3, [pc, #72]	; (800c0b0 <tcp_get_next_optbyte+0x60>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d004      	beq.n	800c076 <tcp_get_next_optbyte+0x26>
 800c06c:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <tcp_get_next_optbyte+0x64>)
 800c06e:	881b      	ldrh	r3, [r3, #0]
 800c070:	88fa      	ldrh	r2, [r7, #6]
 800c072:	429a      	cmp	r2, r3
 800c074:	d208      	bcs.n	800c088 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c076:	4b10      	ldr	r3, [pc, #64]	; (800c0b8 <tcp_get_next_optbyte+0x68>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3314      	adds	r3, #20
 800c07c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c07e:	88fb      	ldrh	r3, [r7, #6]
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	4413      	add	r3, r2
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	e00b      	b.n	800c0a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c088:	88fb      	ldrh	r3, [r7, #6]
 800c08a:	b2da      	uxtb	r2, r3
 800c08c:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <tcp_get_next_optbyte+0x64>)
 800c08e:	881b      	ldrh	r3, [r3, #0]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c096:	4b06      	ldr	r3, [pc, #24]	; (800c0b0 <tcp_get_next_optbyte+0x60>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	797b      	ldrb	r3, [r7, #5]
 800c09c:	4413      	add	r3, r2
 800c09e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	200005b4 	.word	0x200005b4
 800c0b0:	200005b0 	.word	0x200005b0
 800c0b4:	200005ae 	.word	0x200005ae
 800c0b8:	200005a8 	.word	0x200005a8

0800c0bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d106      	bne.n	800c0d8 <tcp_parseopt+0x1c>
 800c0ca:	4b32      	ldr	r3, [pc, #200]	; (800c194 <tcp_parseopt+0xd8>)
 800c0cc:	f240 727d 	movw	r2, #1917	; 0x77d
 800c0d0:	4931      	ldr	r1, [pc, #196]	; (800c198 <tcp_parseopt+0xdc>)
 800c0d2:	4832      	ldr	r0, [pc, #200]	; (800c19c <tcp_parseopt+0xe0>)
 800c0d4:	f007 fabc 	bl	8013650 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c0d8:	4b31      	ldr	r3, [pc, #196]	; (800c1a0 <tcp_parseopt+0xe4>)
 800c0da:	881b      	ldrh	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d055      	beq.n	800c18c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c0e0:	4b30      	ldr	r3, [pc, #192]	; (800c1a4 <tcp_parseopt+0xe8>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	801a      	strh	r2, [r3, #0]
 800c0e6:	e045      	b.n	800c174 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c0e8:	f7ff ffb2 	bl	800c050 <tcp_get_next_optbyte>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d006      	beq.n	800c104 <tcp_parseopt+0x48>
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	dc2b      	bgt.n	800c152 <tcp_parseopt+0x96>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d041      	beq.n	800c182 <tcp_parseopt+0xc6>
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d127      	bne.n	800c152 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c102:	e037      	b.n	800c174 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c104:	f7ff ffa4 	bl	800c050 <tcp_get_next_optbyte>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	d13b      	bne.n	800c186 <tcp_parseopt+0xca>
 800c10e:	4b25      	ldr	r3, [pc, #148]	; (800c1a4 <tcp_parseopt+0xe8>)
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	3301      	adds	r3, #1
 800c114:	4a22      	ldr	r2, [pc, #136]	; (800c1a0 <tcp_parseopt+0xe4>)
 800c116:	8812      	ldrh	r2, [r2, #0]
 800c118:	4293      	cmp	r3, r2
 800c11a:	da34      	bge.n	800c186 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c11c:	f7ff ff98 	bl	800c050 <tcp_get_next_optbyte>
 800c120:	4603      	mov	r3, r0
 800c122:	b29b      	uxth	r3, r3
 800c124:	021b      	lsls	r3, r3, #8
 800c126:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c128:	f7ff ff92 	bl	800c050 <tcp_get_next_optbyte>
 800c12c:	4603      	mov	r3, r0
 800c12e:	b29a      	uxth	r2, r3
 800c130:	89bb      	ldrh	r3, [r7, #12]
 800c132:	4313      	orrs	r3, r2
 800c134:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c136:	89bb      	ldrh	r3, [r7, #12]
 800c138:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c13c:	d804      	bhi.n	800c148 <tcp_parseopt+0x8c>
 800c13e:	89bb      	ldrh	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <tcp_parseopt+0x8c>
 800c144:	89ba      	ldrh	r2, [r7, #12]
 800c146:	e001      	b.n	800c14c <tcp_parseopt+0x90>
 800c148:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c150:	e010      	b.n	800c174 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c152:	f7ff ff7d 	bl	800c050 <tcp_get_next_optbyte>
 800c156:	4603      	mov	r3, r0
 800c158:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c15a:	7afb      	ldrb	r3, [r7, #11]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d914      	bls.n	800c18a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c160:	7afb      	ldrb	r3, [r7, #11]
 800c162:	b29a      	uxth	r2, r3
 800c164:	4b0f      	ldr	r3, [pc, #60]	; (800c1a4 <tcp_parseopt+0xe8>)
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	4413      	add	r3, r2
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	3b02      	subs	r3, #2
 800c16e:	b29a      	uxth	r2, r3
 800c170:	4b0c      	ldr	r3, [pc, #48]	; (800c1a4 <tcp_parseopt+0xe8>)
 800c172:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c174:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <tcp_parseopt+0xe8>)
 800c176:	881a      	ldrh	r2, [r3, #0]
 800c178:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <tcp_parseopt+0xe4>)
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d3b3      	bcc.n	800c0e8 <tcp_parseopt+0x2c>
 800c180:	e004      	b.n	800c18c <tcp_parseopt+0xd0>
          return;
 800c182:	bf00      	nop
 800c184:	e002      	b.n	800c18c <tcp_parseopt+0xd0>
            return;
 800c186:	bf00      	nop
 800c188:	e000      	b.n	800c18c <tcp_parseopt+0xd0>
            return;
 800c18a:	bf00      	nop
      }
    }
  }
}
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	08015e58 	.word	0x08015e58
 800c198:	080162bc 	.word	0x080162bc
 800c19c:	08015ea4 	.word	0x08015ea4
 800c1a0:	200005ac 	.word	0x200005ac
 800c1a4:	200005b4 	.word	0x200005b4

0800c1a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c1ac:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <tcp_trigger_input_pcb_close+0x1c>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	f043 0310 	orr.w	r3, r3, #16
 800c1b4:	b2da      	uxtb	r2, r3
 800c1b6:	4b03      	ldr	r3, [pc, #12]	; (800c1c4 <tcp_trigger_input_pcb_close+0x1c>)
 800c1b8:	701a      	strb	r2, [r3, #0]
}
 800c1ba:	bf00      	nop
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	200005c5 	.word	0x200005c5

0800c1c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00a      	beq.n	800c1f0 <tcp_route+0x28>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	7a1b      	ldrb	r3, [r3, #8]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d006      	beq.n	800c1f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	7a1b      	ldrb	r3, [r3, #8]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fb f82e 	bl	8007248 <netif_get_by_index>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	e003      	b.n	800c1f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f005 fdcf 	bl	8011d94 <ip4_route>
 800c1f6:	4603      	mov	r3, r0
  }
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c200:	b590      	push	{r4, r7, lr}
 800c202:	b087      	sub	sp, #28
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	603b      	str	r3, [r7, #0]
 800c20c:	4613      	mov	r3, r2
 800c20e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d105      	bne.n	800c222 <tcp_create_segment+0x22>
 800c216:	4b48      	ldr	r3, [pc, #288]	; (800c338 <tcp_create_segment+0x138>)
 800c218:	22a3      	movs	r2, #163	; 0xa3
 800c21a:	4948      	ldr	r1, [pc, #288]	; (800c33c <tcp_create_segment+0x13c>)
 800c21c:	4848      	ldr	r0, [pc, #288]	; (800c340 <tcp_create_segment+0x140>)
 800c21e:	f007 fa17 	bl	8013650 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d105      	bne.n	800c234 <tcp_create_segment+0x34>
 800c228:	4b43      	ldr	r3, [pc, #268]	; (800c338 <tcp_create_segment+0x138>)
 800c22a:	22a4      	movs	r2, #164	; 0xa4
 800c22c:	4945      	ldr	r1, [pc, #276]	; (800c344 <tcp_create_segment+0x144>)
 800c22e:	4844      	ldr	r0, [pc, #272]	; (800c340 <tcp_create_segment+0x140>)
 800c230:	f007 fa0e 	bl	8013650 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c234:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f003 0304 	and.w	r3, r3, #4
 800c240:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c242:	2003      	movs	r0, #3
 800c244:	f7fa fd04 	bl	8006c50 <memp_malloc>
 800c248:	6138      	str	r0, [r7, #16]
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d104      	bne.n	800c25a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c250:	68b8      	ldr	r0, [r7, #8]
 800c252:	f7fb fb15 	bl	8007880 <pbuf_free>
    return NULL;
 800c256:	2300      	movs	r3, #0
 800c258:	e069      	b.n	800c32e <tcp_create_segment+0x12e>
  }
  seg->flags = optflags;
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c260:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2200      	movs	r2, #0
 800c266:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	891a      	ldrh	r2, [r3, #8]
 800c272:	7dfb      	ldrb	r3, [r7, #23]
 800c274:	b29b      	uxth	r3, r3
 800c276:	429a      	cmp	r2, r3
 800c278:	d205      	bcs.n	800c286 <tcp_create_segment+0x86>
 800c27a:	4b2f      	ldr	r3, [pc, #188]	; (800c338 <tcp_create_segment+0x138>)
 800c27c:	22b0      	movs	r2, #176	; 0xb0
 800c27e:	4932      	ldr	r1, [pc, #200]	; (800c348 <tcp_create_segment+0x148>)
 800c280:	482f      	ldr	r0, [pc, #188]	; (800c340 <tcp_create_segment+0x140>)
 800c282:	f007 f9e5 	bl	8013650 <iprintf>
  seg->len = p->tot_len - optlen;
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	891a      	ldrh	r2, [r3, #8]
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	b29a      	uxth	r2, r3
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c296:	2114      	movs	r1, #20
 800c298:	68b8      	ldr	r0, [r7, #8]
 800c29a:	f7fb fa5b 	bl	8007754 <pbuf_add_header>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00c      	beq.n	800c2be <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800c2a4:	4b29      	ldr	r3, [pc, #164]	; (800c34c <tcp_create_segment+0x14c>)
 800c2a6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	4b27      	ldr	r3, [pc, #156]	; (800c34c <tcp_create_segment+0x14c>)
 800c2b0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800c2b4:	6938      	ldr	r0, [r7, #16]
 800c2b6:	f7fc ff28 	bl	800910a <tcp_seg_free>
    return NULL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e037      	b.n	800c32e <tcp_create_segment+0x12e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	685a      	ldr	r2, [r3, #4]
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	8ada      	ldrh	r2, [r3, #22]
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	68dc      	ldr	r4, [r3, #12]
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	f7f9 fe0b 	bl	8005eec <lwip_htons>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	8b1a      	ldrh	r2, [r3, #24]
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	68dc      	ldr	r4, [r3, #12]
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	f7f9 fe02 	bl	8005eec <lwip_htons>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	68dc      	ldr	r4, [r3, #12]
 800c2f0:	6838      	ldr	r0, [r7, #0]
 800c2f2:	f7f9 fe10 	bl	8005f16 <lwip_htonl>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	089b      	lsrs	r3, r3, #2
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	b29b      	uxth	r3, r3
 800c302:	3305      	adds	r3, #5
 800c304:	b29b      	uxth	r3, r3
 800c306:	031b      	lsls	r3, r3, #12
 800c308:	b29a      	uxth	r2, r3
 800c30a:	79fb      	ldrb	r3, [r7, #7]
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	4313      	orrs	r3, r2
 800c310:	b29a      	uxth	r2, r3
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	68dc      	ldr	r4, [r3, #12]
 800c316:	4610      	mov	r0, r2
 800c318:	f7f9 fde8 	bl	8005eec <lwip_htons>
 800c31c:	4603      	mov	r3, r0
 800c31e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	749a      	strb	r2, [r3, #18]
 800c328:	2200      	movs	r2, #0
 800c32a:	74da      	strb	r2, [r3, #19]
  return seg;
 800c32c:	693b      	ldr	r3, [r7, #16]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	bd90      	pop	{r4, r7, pc}
 800c336:	bf00      	nop
 800c338:	080162d8 	.word	0x080162d8
 800c33c:	0801630c 	.word	0x0801630c
 800c340:	0801632c 	.word	0x0801632c
 800c344:	08016354 	.word	0x08016354
 800c348:	08016378 	.word	0x08016378
 800c34c:	20007a4c 	.word	0x20007a4c

0800c350 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	607b      	str	r3, [r7, #4]
 800c358:	4603      	mov	r3, r0
 800c35a:	73fb      	strb	r3, [r7, #15]
 800c35c:	460b      	mov	r3, r1
 800c35e:	81bb      	strh	r3, [r7, #12]
 800c360:	4613      	mov	r3, r2
 800c362:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c364:	89bb      	ldrh	r3, [r7, #12]
 800c366:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d105      	bne.n	800c37a <tcp_pbuf_prealloc+0x2a>
 800c36e:	4b2f      	ldr	r3, [pc, #188]	; (800c42c <tcp_pbuf_prealloc+0xdc>)
 800c370:	22e8      	movs	r2, #232	; 0xe8
 800c372:	492f      	ldr	r1, [pc, #188]	; (800c430 <tcp_pbuf_prealloc+0xe0>)
 800c374:	482f      	ldr	r0, [pc, #188]	; (800c434 <tcp_pbuf_prealloc+0xe4>)
 800c376:	f007 f96b 	bl	8013650 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d105      	bne.n	800c38c <tcp_pbuf_prealloc+0x3c>
 800c380:	4b2a      	ldr	r3, [pc, #168]	; (800c42c <tcp_pbuf_prealloc+0xdc>)
 800c382:	22e9      	movs	r2, #233	; 0xe9
 800c384:	492c      	ldr	r1, [pc, #176]	; (800c438 <tcp_pbuf_prealloc+0xe8>)
 800c386:	482b      	ldr	r0, [pc, #172]	; (800c434 <tcp_pbuf_prealloc+0xe4>)
 800c388:	f007 f962 	bl	8013650 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c38c:	89ba      	ldrh	r2, [r7, #12]
 800c38e:	897b      	ldrh	r3, [r7, #10]
 800c390:	429a      	cmp	r2, r3
 800c392:	d21f      	bcs.n	800c3d4 <tcp_pbuf_prealloc+0x84>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c394:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c398:	f003 0302 	and.w	r3, r3, #2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d111      	bne.n	800c3c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	8b5b      	ldrh	r3, [r3, #26]
 800c3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d113      	bne.n	800c3d4 <tcp_pbuf_prealloc+0x84>
        (!(pcb->flags & TF_NODELAY) &&
 800c3ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d007      	beq.n	800c3c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d103      	bne.n	800c3c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d007      	beq.n	800c3d4 <tcp_pbuf_prealloc+0x84>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c3c4:	89bb      	ldrh	r3, [r7, #12]
 800c3c6:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c3ca:	897b      	ldrh	r3, [r7, #10]
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	bf28      	it	cs
 800c3d0:	4613      	movcs	r3, r2
 800c3d2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c3d4:	8af9      	ldrh	r1, [r7, #22]
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fa ffaf 	bl	8007340 <pbuf_alloc>
 800c3e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <tcp_pbuf_prealloc+0x9e>
    return NULL;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	e019      	b.n	800c422 <tcp_pbuf_prealloc+0xd2>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d006      	beq.n	800c404 <tcp_pbuf_prealloc+0xb4>
 800c3f6:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <tcp_pbuf_prealloc+0xdc>)
 800c3f8:	f240 120b 	movw	r2, #267	; 0x10b
 800c3fc:	490f      	ldr	r1, [pc, #60]	; (800c43c <tcp_pbuf_prealloc+0xec>)
 800c3fe:	480d      	ldr	r0, [pc, #52]	; (800c434 <tcp_pbuf_prealloc+0xe4>)
 800c400:	f007 f926 	bl	8013650 <iprintf>
  *oversize = p->len - length;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	895a      	ldrh	r2, [r3, #10]
 800c408:	89bb      	ldrh	r3, [r7, #12]
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	89ba      	ldrh	r2, [r7, #12]
 800c416:	811a      	strh	r2, [r3, #8]
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	891a      	ldrh	r2, [r3, #8]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	815a      	strh	r2, [r3, #10]
  return p;
 800c420:	693b      	ldr	r3, [r7, #16]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	080162d8 	.word	0x080162d8
 800c430:	08016390 	.word	0x08016390
 800c434:	0801632c 	.word	0x0801632c
 800c438:	080163b4 	.word	0x080163b4
 800c43c:	080163d4 	.word	0x080163d4

0800c440 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	460b      	mov	r3, r1
 800c44a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <tcp_write_checks+0x20>
 800c452:	4b37      	ldr	r3, [pc, #220]	; (800c530 <tcp_write_checks+0xf0>)
 800c454:	f240 1233 	movw	r2, #307	; 0x133
 800c458:	4936      	ldr	r1, [pc, #216]	; (800c534 <tcp_write_checks+0xf4>)
 800c45a:	4837      	ldr	r0, [pc, #220]	; (800c538 <tcp_write_checks+0xf8>)
 800c45c:	f007 f8f8 	bl	8013650 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	7d1b      	ldrb	r3, [r3, #20]
 800c464:	2b04      	cmp	r3, #4
 800c466:	d00e      	beq.n	800c486 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c46c:	2b07      	cmp	r3, #7
 800c46e:	d00a      	beq.n	800c486 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c474:	2b02      	cmp	r3, #2
 800c476:	d006      	beq.n	800c486 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c47c:	2b03      	cmp	r3, #3
 800c47e:	d002      	beq.n	800c486 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c480:	f06f 030a 	mvn.w	r3, #10
 800c484:	e050      	b.n	800c528 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 800c486:	887b      	ldrh	r3, [r7, #2]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <tcp_write_checks+0x50>
    return ERR_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	e04b      	b.n	800c528 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c496:	887a      	ldrh	r2, [r7, #2]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d909      	bls.n	800c4b0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	8b5b      	ldrh	r3, [r3, #26]
 800c4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ae:	e03b      	b.n	800c528 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4b6:	2b07      	cmp	r3, #7
 800c4b8:	d911      	bls.n	800c4de <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800c4ba:	4b20      	ldr	r3, [pc, #128]	; (800c53c <tcp_write_checks+0xfc>)
 800c4bc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	4b1d      	ldr	r3, [pc, #116]	; (800c53c <tcp_write_checks+0xfc>)
 800c4c6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8b5b      	ldrh	r3, [r3, #26]
 800c4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4dc:	e024      	b.n	800c528 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00f      	beq.n	800c508 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d11a      	bne.n	800c526 <tcp_write_checks+0xe6>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d116      	bne.n	800c526 <tcp_write_checks+0xe6>
 800c4f8:	4b0d      	ldr	r3, [pc, #52]	; (800c530 <tcp_write_checks+0xf0>)
 800c4fa:	f240 1255 	movw	r2, #341	; 0x155
 800c4fe:	4910      	ldr	r1, [pc, #64]	; (800c540 <tcp_write_checks+0x100>)
 800c500:	480d      	ldr	r0, [pc, #52]	; (800c538 <tcp_write_checks+0xf8>)
 800c502:	f007 f8a5 	bl	8013650 <iprintf>
 800c506:	e00e      	b.n	800c526 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d103      	bne.n	800c518 <tcp_write_checks+0xd8>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c514:	2b00      	cmp	r3, #0
 800c516:	d006      	beq.n	800c526 <tcp_write_checks+0xe6>
 800c518:	4b05      	ldr	r3, [pc, #20]	; (800c530 <tcp_write_checks+0xf0>)
 800c51a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c51e:	4909      	ldr	r1, [pc, #36]	; (800c544 <tcp_write_checks+0x104>)
 800c520:	4805      	ldr	r0, [pc, #20]	; (800c538 <tcp_write_checks+0xf8>)
 800c522:	f007 f895 	bl	8013650 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3708      	adds	r7, #8
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	080162d8 	.word	0x080162d8
 800c534:	080163e8 	.word	0x080163e8
 800c538:	0801632c 	.word	0x0801632c
 800c53c:	20007a4c 	.word	0x20007a4c
 800c540:	08016408 	.word	0x08016408
 800c544:	08016444 	.word	0x08016444

0800c548 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c548:	b590      	push	{r4, r7, lr}
 800c54a:	b09b      	sub	sp, #108	; 0x6c
 800c54c:	af04      	add	r7, sp, #16
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	4611      	mov	r1, r2
 800c554:	461a      	mov	r2, r3
 800c556:	460b      	mov	r3, r1
 800c558:	80fb      	strh	r3, [r7, #6]
 800c55a:	4613      	mov	r3, r2
 800c55c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c55e:	2300      	movs	r3, #0
 800c560:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c562:	2300      	movs	r3, #0
 800c564:	653b      	str	r3, [r7, #80]	; 0x50
 800c566:	2300      	movs	r3, #0
 800c568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c56a:	2300      	movs	r3, #0
 800c56c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c56e:	2300      	movs	r3, #0
 800c570:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c572:	2300      	movs	r3, #0
 800c574:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c586:	2300      	movs	r3, #0
 800c588:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d109      	bne.n	800c5a4 <tcp_write+0x5c>
 800c590:	4ba4      	ldr	r3, [pc, #656]	; (800c824 <tcp_write+0x2dc>)
 800c592:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c596:	49a4      	ldr	r1, [pc, #656]	; (800c828 <tcp_write+0x2e0>)
 800c598:	48a4      	ldr	r0, [pc, #656]	; (800c82c <tcp_write+0x2e4>)
 800c59a:	f007 f859 	bl	8013650 <iprintf>
 800c59e:	f06f 030f 	mvn.w	r3, #15
 800c5a2:	e332      	b.n	800cc0a <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	b29a      	uxth	r2, r3
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	bf28      	it	cs
 800c5b6:	4613      	movcs	r3, r2
 800c5b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c5ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d102      	bne.n	800c5c6 <tcp_write+0x7e>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5c4:	e000      	b.n	800c5c8 <tcp_write+0x80>
 800c5c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d109      	bne.n	800c5e4 <tcp_write+0x9c>
 800c5d0:	4b94      	ldr	r3, [pc, #592]	; (800c824 <tcp_write+0x2dc>)
 800c5d2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c5d6:	4996      	ldr	r1, [pc, #600]	; (800c830 <tcp_write+0x2e8>)
 800c5d8:	4894      	ldr	r0, [pc, #592]	; (800c82c <tcp_write+0x2e4>)
 800c5da:	f007 f839 	bl	8013650 <iprintf>
 800c5de:	f06f 030f 	mvn.w	r3, #15
 800c5e2:	e312      	b.n	800cc0a <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c5e4:	88fb      	ldrh	r3, [r7, #6]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f7ff ff29 	bl	800c440 <tcp_write_checks>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c5f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d002      	beq.n	800c602 <tcp_write+0xba>
    return err;
 800c5fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c600:	e303      	b.n	800cc0a <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c608:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c60c:	2300      	movs	r3, #0
 800c60e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c616:	2b00      	cmp	r3, #0
 800c618:	f000 80f6 	beq.w	800c808 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c620:	653b      	str	r3, [r7, #80]	; 0x50
 800c622:	e002      	b.n	800c62a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c62a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1f8      	bne.n	800c624 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c634:	7a9b      	ldrb	r3, [r3, #10]
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	b29b      	uxth	r3, r3
 800c63a:	f003 0304 	and.w	r3, r3, #4
 800c63e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c644:	891b      	ldrh	r3, [r3, #8]
 800c646:	4619      	mov	r1, r3
 800c648:	8c3b      	ldrh	r3, [r7, #32]
 800c64a:	440b      	add	r3, r1
 800c64c:	429a      	cmp	r2, r3
 800c64e:	da06      	bge.n	800c65e <tcp_write+0x116>
 800c650:	4b74      	ldr	r3, [pc, #464]	; (800c824 <tcp_write+0x2dc>)
 800c652:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c656:	4977      	ldr	r1, [pc, #476]	; (800c834 <tcp_write+0x2ec>)
 800c658:	4874      	ldr	r0, [pc, #464]	; (800c82c <tcp_write+0x2e4>)
 800c65a:	f006 fff9 	bl	8013650 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c660:	891a      	ldrh	r2, [r3, #8]
 800c662:	8c3b      	ldrh	r3, [r7, #32]
 800c664:	4413      	add	r3, r2
 800c666:	b29b      	uxth	r3, r3
 800c668:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c674:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c676:	8a7b      	ldrh	r3, [r7, #18]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d026      	beq.n	800c6ca <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c67c:	8a7b      	ldrh	r3, [r7, #18]
 800c67e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c680:	429a      	cmp	r2, r3
 800c682:	d206      	bcs.n	800c692 <tcp_write+0x14a>
 800c684:	4b67      	ldr	r3, [pc, #412]	; (800c824 <tcp_write+0x2dc>)
 800c686:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c68a:	496b      	ldr	r1, [pc, #428]	; (800c838 <tcp_write+0x2f0>)
 800c68c:	4867      	ldr	r0, [pc, #412]	; (800c82c <tcp_write+0x2e4>)
 800c68e:	f006 ffdf 	bl	8013650 <iprintf>
      seg = last_unsent;
 800c692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c694:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c696:	8a7b      	ldrh	r3, [r7, #18]
 800c698:	88fa      	ldrh	r2, [r7, #6]
 800c69a:	4293      	cmp	r3, r2
 800c69c:	bf28      	it	cs
 800c69e:	4613      	movcs	r3, r2
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	bf28      	it	cs
 800c6a8:	4613      	movcs	r3, r2
 800c6aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c6ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c6b8:	8a7a      	ldrh	r2, [r7, #18]
 800c6ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c6c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c6c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c6ca:	8a7b      	ldrh	r3, [r7, #18]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00b      	beq.n	800c6e8 <tcp_write+0x1a0>
 800c6d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6d4:	88fb      	ldrh	r3, [r7, #6]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d006      	beq.n	800c6e8 <tcp_write+0x1a0>
 800c6da:	4b52      	ldr	r3, [pc, #328]	; (800c824 <tcp_write+0x2dc>)
 800c6dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6e0:	4956      	ldr	r1, [pc, #344]	; (800c83c <tcp_write+0x2f4>)
 800c6e2:	4852      	ldr	r0, [pc, #328]	; (800c82c <tcp_write+0x2e4>)
 800c6e4:	f006 ffb4 	bl	8013650 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c6e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c6ec:	88fb      	ldrh	r3, [r7, #6]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	f080 8167 	bcs.w	800c9c2 <tcp_write+0x47a>
 800c6f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f000 8163 	beq.w	800c9c2 <tcp_write+0x47a>
 800c6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6fe:	891b      	ldrh	r3, [r3, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 815e 	beq.w	800c9c2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c706:	88fa      	ldrh	r2, [r7, #6]
 800c708:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c70c:	1ad2      	subs	r2, r2, r3
 800c70e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c710:	4293      	cmp	r3, r2
 800c712:	bfa8      	it	ge
 800c714:	4613      	movge	r3, r2
 800c716:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c71a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c71c:	797b      	ldrb	r3, [r7, #5]
 800c71e:	f003 0301 	and.w	r3, r3, #1
 800c722:	2b00      	cmp	r3, #0
 800c724:	d027      	beq.n	800c776 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c726:	f107 0012 	add.w	r0, r7, #18
 800c72a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c72c:	8bf9      	ldrh	r1, [r7, #30]
 800c72e:	2301      	movs	r3, #1
 800c730:	9302      	str	r3, [sp, #8]
 800c732:	797b      	ldrb	r3, [r7, #5]
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	4603      	mov	r3, r0
 800c73c:	2000      	movs	r0, #0
 800c73e:	f7ff fe07 	bl	800c350 <tcp_pbuf_prealloc>
 800c742:	6578      	str	r0, [r7, #84]	; 0x54
 800c744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 8225 	beq.w	800cb96 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c74c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c74e:	6858      	ldr	r0, [r3, #4]
 800c750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c754:	68ba      	ldr	r2, [r7, #8]
 800c756:	4413      	add	r3, r2
 800c758:	8bfa      	ldrh	r2, [r7, #30]
 800c75a:	4619      	mov	r1, r3
 800c75c:	f006 ff48 	bl	80135f0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c760:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c762:	f7fb f915 	bl	8007990 <pbuf_clen>
 800c766:	4603      	mov	r3, r0
 800c768:	461a      	mov	r2, r3
 800c76a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c76e:	4413      	add	r3, r2
 800c770:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c774:	e041      	b.n	800c7fa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	637b      	str	r3, [r7, #52]	; 0x34
 800c77c:	e002      	b.n	800c784 <tcp_write+0x23c>
 800c77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	637b      	str	r3, [r7, #52]	; 0x34
 800c784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1f8      	bne.n	800c77e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c78e:	7b1b      	ldrb	r3, [r3, #12]
 800c790:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d115      	bne.n	800c7c4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c79e:	8952      	ldrh	r2, [r2, #10]
 800c7a0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d10d      	bne.n	800c7c4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c7a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d006      	beq.n	800c7be <tcp_write+0x276>
 800c7b0:	4b1c      	ldr	r3, [pc, #112]	; (800c824 <tcp_write+0x2dc>)
 800c7b2:	f240 2231 	movw	r2, #561	; 0x231
 800c7b6:	4922      	ldr	r1, [pc, #136]	; (800c840 <tcp_write+0x2f8>)
 800c7b8:	481c      	ldr	r0, [pc, #112]	; (800c82c <tcp_write+0x2e4>)
 800c7ba:	f006 ff49 	bl	8013650 <iprintf>
          extendlen = seglen;
 800c7be:	8bfb      	ldrh	r3, [r7, #30]
 800c7c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c7c2:	e01a      	b.n	800c7fa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c7c4:	8bfb      	ldrh	r3, [r7, #30]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	f7fa fdb8 	bl	8007340 <pbuf_alloc>
 800c7d0:	6578      	str	r0, [r7, #84]	; 0x54
 800c7d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 81e0 	beq.w	800cb9a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c7da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	441a      	add	r2, r3
 800c7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7e4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c7e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c7e8:	f7fb f8d2 	bl	8007990 <pbuf_clen>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c7fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c7fe:	8bfb      	ldrh	r3, [r7, #30]
 800c800:	4413      	add	r3, r2
 800c802:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c806:	e0dc      	b.n	800c9c2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 80d7 	beq.w	800c9c2 <tcp_write+0x47a>
 800c814:	4b03      	ldr	r3, [pc, #12]	; (800c824 <tcp_write+0x2dc>)
 800c816:	f240 224a 	movw	r2, #586	; 0x24a
 800c81a:	490a      	ldr	r1, [pc, #40]	; (800c844 <tcp_write+0x2fc>)
 800c81c:	4803      	ldr	r0, [pc, #12]	; (800c82c <tcp_write+0x2e4>)
 800c81e:	f006 ff17 	bl	8013650 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c822:	e0ce      	b.n	800c9c2 <tcp_write+0x47a>
 800c824:	080162d8 	.word	0x080162d8
 800c828:	08016478 	.word	0x08016478
 800c82c:	0801632c 	.word	0x0801632c
 800c830:	08016490 	.word	0x08016490
 800c834:	080164c4 	.word	0x080164c4
 800c838:	080164dc 	.word	0x080164dc
 800c83c:	080164fc 	.word	0x080164fc
 800c840:	0801651c 	.word	0x0801651c
 800c844:	08016548 	.word	0x08016548
    struct pbuf *p;
    u16_t left = len - pos;
 800c848:	88fa      	ldrh	r2, [r7, #6]
 800c84a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c852:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c856:	b29b      	uxth	r3, r3
 800c858:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c85e:	8b7a      	ldrh	r2, [r7, #26]
 800c860:	8bbb      	ldrh	r3, [r7, #28]
 800c862:	4293      	cmp	r3, r2
 800c864:	bf28      	it	cs
 800c866:	4613      	movcs	r3, r2
 800c868:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c86a:	797b      	ldrb	r3, [r7, #5]
 800c86c:	f003 0301 	and.w	r3, r3, #1
 800c870:	2b00      	cmp	r3, #0
 800c872:	d036      	beq.n	800c8e2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c874:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c878:	b29a      	uxth	r2, r3
 800c87a:	8b3b      	ldrh	r3, [r7, #24]
 800c87c:	4413      	add	r3, r2
 800c87e:	b299      	uxth	r1, r3
 800c880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c882:	2b00      	cmp	r3, #0
 800c884:	bf0c      	ite	eq
 800c886:	2301      	moveq	r3, #1
 800c888:	2300      	movne	r3, #0
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f107 0012 	add.w	r0, r7, #18
 800c890:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	797b      	ldrb	r3, [r7, #5]
 800c896:	9301      	str	r3, [sp, #4]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	4603      	mov	r3, r0
 800c89e:	2036      	movs	r0, #54	; 0x36
 800c8a0:	f7ff fd56 	bl	800c350 <tcp_pbuf_prealloc>
 800c8a4:	6338      	str	r0, [r7, #48]	; 0x30
 800c8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f000 8178 	beq.w	800cb9e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b0:	895b      	ldrh	r3, [r3, #10]
 800c8b2:	8b3a      	ldrh	r2, [r7, #24]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d906      	bls.n	800c8c6 <tcp_write+0x37e>
 800c8b8:	4b8c      	ldr	r3, [pc, #560]	; (800caec <tcp_write+0x5a4>)
 800c8ba:	f240 2266 	movw	r2, #614	; 0x266
 800c8be:	498c      	ldr	r1, [pc, #560]	; (800caf0 <tcp_write+0x5a8>)
 800c8c0:	488c      	ldr	r0, [pc, #560]	; (800caf4 <tcp_write+0x5ac>)
 800c8c2:	f006 fec5 	bl	8013650 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	685a      	ldr	r2, [r3, #4]
 800c8ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c8ce:	18d0      	adds	r0, r2, r3
 800c8d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	4413      	add	r3, r2
 800c8d8:	8b3a      	ldrh	r2, [r7, #24]
 800c8da:	4619      	mov	r1, r3
 800c8dc:	f006 fe88 	bl	80135f0 <memcpy>
 800c8e0:	e02f      	b.n	800c942 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c8e2:	8a7b      	ldrh	r3, [r7, #18]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d006      	beq.n	800c8f6 <tcp_write+0x3ae>
 800c8e8:	4b80      	ldr	r3, [pc, #512]	; (800caec <tcp_write+0x5a4>)
 800c8ea:	f240 2271 	movw	r2, #625	; 0x271
 800c8ee:	4982      	ldr	r1, [pc, #520]	; (800caf8 <tcp_write+0x5b0>)
 800c8f0:	4880      	ldr	r0, [pc, #512]	; (800caf4 <tcp_write+0x5ac>)
 800c8f2:	f006 fead 	bl	8013650 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c8f6:	8b3b      	ldrh	r3, [r7, #24]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	2036      	movs	r0, #54	; 0x36
 800c8fe:	f7fa fd1f 	bl	8007340 <pbuf_alloc>
 800c902:	6178      	str	r0, [r7, #20]
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 814b 	beq.w	800cba2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c90c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	441a      	add	r2, r3
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c922:	4619      	mov	r1, r3
 800c924:	2036      	movs	r0, #54	; 0x36
 800c926:	f7fa fd0b 	bl	8007340 <pbuf_alloc>
 800c92a:	6338      	str	r0, [r7, #48]	; 0x30
 800c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d103      	bne.n	800c93a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c932:	6978      	ldr	r0, [r7, #20]
 800c934:	f7fa ffa4 	bl	8007880 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c938:	e136      	b.n	800cba8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c93a:	6979      	ldr	r1, [r7, #20]
 800c93c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c93e:	f7fb f861 	bl	8007a04 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c944:	f7fb f824 	bl	8007990 <pbuf_clen>
 800c948:	4603      	mov	r3, r0
 800c94a:	461a      	mov	r2, r3
 800c94c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c950:	4413      	add	r3, r2
 800c952:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c956:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c95a:	2b08      	cmp	r3, #8
 800c95c:	d903      	bls.n	800c966 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c95e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c960:	f7fa ff8e 	bl	8007880 <pbuf_free>
      goto memerr;
 800c964:	e120      	b.n	800cba8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c96a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c96e:	441a      	add	r2, r3
 800c970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	4613      	mov	r3, r2
 800c978:	2200      	movs	r2, #0
 800c97a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7ff fc3f 	bl	800c200 <tcp_create_segment>
 800c982:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 810d 	beq.w	800cba6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <tcp_write+0x450>
      queue = seg;
 800c992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c994:	647b      	str	r3, [r7, #68]	; 0x44
 800c996:	e00c      	b.n	800c9b2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d106      	bne.n	800c9ac <tcp_write+0x464>
 800c99e:	4b53      	ldr	r3, [pc, #332]	; (800caec <tcp_write+0x5a4>)
 800c9a0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c9a4:	4955      	ldr	r1, [pc, #340]	; (800cafc <tcp_write+0x5b4>)
 800c9a6:	4853      	ldr	r0, [pc, #332]	; (800caf4 <tcp_write+0x5ac>)
 800c9a8:	f006 fe52 	bl	8013650 <iprintf>
      prev_seg->next = seg;
 800c9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9b0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c9b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9b4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c9b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9ba:	8b3b      	ldrh	r3, [r7, #24]
 800c9bc:	4413      	add	r3, r2
 800c9be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c9c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c9c6:	88fb      	ldrh	r3, [r7, #6]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	f4ff af3d 	bcc.w	800c848 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c9ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d02c      	beq.n	800ca2e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9da:	e01e      	b.n	800ca1a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	891a      	ldrh	r2, [r3, #8]
 800c9e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c9e2:	4413      	add	r3, r2
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d110      	bne.n	800ca14 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9f8:	8952      	ldrh	r2, [r2, #10]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c9fe:	68b9      	ldr	r1, [r7, #8]
 800ca00:	4618      	mov	r0, r3
 800ca02:	f006 fdf5 	bl	80135f0 <memcpy>
        p->len += oversize_used;
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	895a      	ldrh	r2, [r3, #10]
 800ca0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca0c:	4413      	add	r3, r2
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca12:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1dd      	bne.n	800c9dc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800ca20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca22:	891a      	ldrh	r2, [r3, #8]
 800ca24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ca26:	4413      	add	r3, r2
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca2c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ca2e:	8a7a      	ldrh	r2, [r7, #18]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ca36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d018      	beq.n	800ca6e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ca3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d106      	bne.n	800ca50 <tcp_write+0x508>
 800ca42:	4b2a      	ldr	r3, [pc, #168]	; (800caec <tcp_write+0x5a4>)
 800ca44:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ca48:	492d      	ldr	r1, [pc, #180]	; (800cb00 <tcp_write+0x5b8>)
 800ca4a:	482a      	ldr	r0, [pc, #168]	; (800caf4 <tcp_write+0x5ac>)
 800ca4c:	f006 fe00 	bl	8013650 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ca50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fa ffd4 	bl	8007a04 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ca5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca5e:	891a      	ldrh	r2, [r3, #8]
 800ca60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca62:	891b      	ldrh	r3, [r3, #8]
 800ca64:	4413      	add	r3, r2
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca6a:	811a      	strh	r2, [r3, #8]
 800ca6c:	e037      	b.n	800cade <tcp_write+0x596>
  } else if (extendlen > 0) {
 800ca6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d034      	beq.n	800cade <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ca74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <tcp_write+0x53a>
 800ca7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d106      	bne.n	800ca90 <tcp_write+0x548>
 800ca82:	4b1a      	ldr	r3, [pc, #104]	; (800caec <tcp_write+0x5a4>)
 800ca84:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ca88:	491e      	ldr	r1, [pc, #120]	; (800cb04 <tcp_write+0x5bc>)
 800ca8a:	481a      	ldr	r0, [pc, #104]	; (800caf4 <tcp_write+0x5ac>)
 800ca8c:	f006 fde0 	bl	8013650 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ca90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca96:	e009      	b.n	800caac <tcp_write+0x564>
      p->tot_len += extendlen;
 800ca98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9a:	891a      	ldrh	r2, [r3, #8]
 800ca9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca9e:	4413      	add	r3, r2
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1f1      	bne.n	800ca98 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800cab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab6:	891a      	ldrh	r2, [r3, #8]
 800cab8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800caba:	4413      	add	r3, r2
 800cabc:	b29a      	uxth	r2, r3
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac4:	895a      	ldrh	r2, [r3, #10]
 800cac6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cac8:	4413      	add	r3, r2
 800caca:	b29a      	uxth	r2, r3
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad2:	891a      	ldrh	r2, [r3, #8]
 800cad4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cad6:	4413      	add	r3, r2
 800cad8:	b29a      	uxth	r2, r3
 800cada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cadc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800cade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d111      	bne.n	800cb08 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cae8:	66da      	str	r2, [r3, #108]	; 0x6c
 800caea:	e010      	b.n	800cb0e <tcp_write+0x5c6>
 800caec:	080162d8 	.word	0x080162d8
 800caf0:	08016578 	.word	0x08016578
 800caf4:	0801632c 	.word	0x0801632c
 800caf8:	080165b8 	.word	0x080165b8
 800cafc:	080165c8 	.word	0x080165c8
 800cb00:	080165dc 	.word	0x080165dc
 800cb04:	08016614 	.word	0x08016614
  } else {
    last_unsent->next = queue;
 800cb08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb0c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb12:	88fb      	ldrh	r3, [r7, #6]
 800cb14:	441a      	add	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cb20:	88fb      	ldrh	r3, [r7, #6]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cb32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00e      	beq.n	800cb5e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10a      	bne.n	800cb5e <tcp_write+0x616>
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d106      	bne.n	800cb5e <tcp_write+0x616>
 800cb50:	4b30      	ldr	r3, [pc, #192]	; (800cc14 <tcp_write+0x6cc>)
 800cb52:	f240 3212 	movw	r2, #786	; 0x312
 800cb56:	4930      	ldr	r1, [pc, #192]	; (800cc18 <tcp_write+0x6d0>)
 800cb58:	4830      	ldr	r0, [pc, #192]	; (800cc1c <tcp_write+0x6d4>)
 800cb5a:	f006 fd79 	bl	8013650 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800cb5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d016      	beq.n	800cb92 <tcp_write+0x64a>
 800cb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d012      	beq.n	800cb92 <tcp_write+0x64a>
 800cb6c:	797b      	ldrb	r3, [r7, #5]
 800cb6e:	f003 0302 	and.w	r3, r3, #2
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10d      	bne.n	800cb92 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800cb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	899b      	ldrh	r3, [r3, #12]
 800cb7c:	b29c      	uxth	r4, r3
 800cb7e:	2008      	movs	r0, #8
 800cb80:	f7f9 f9b4 	bl	8005eec <lwip_htons>
 800cb84:	4603      	mov	r3, r0
 800cb86:	461a      	mov	r2, r3
 800cb88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	4322      	orrs	r2, r4
 800cb8e:	b292      	uxth	r2, r2
 800cb90:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	e039      	b.n	800cc0a <tcp_write+0x6c2>
          goto memerr;
 800cb96:	bf00      	nop
 800cb98:	e006      	b.n	800cba8 <tcp_write+0x660>
            goto memerr;
 800cb9a:	bf00      	nop
 800cb9c:	e004      	b.n	800cba8 <tcp_write+0x660>
        goto memerr;
 800cb9e:	bf00      	nop
 800cba0:	e002      	b.n	800cba8 <tcp_write+0x660>
        goto memerr;
 800cba2:	bf00      	nop
 800cba4:	e000      	b.n	800cba8 <tcp_write+0x660>
      goto memerr;
 800cba6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	8b5b      	ldrh	r3, [r3, #26]
 800cbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800cbb6:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <tcp_write+0x6d8>)
 800cbb8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	4b17      	ldr	r3, [pc, #92]	; (800cc20 <tcp_write+0x6d8>)
 800cbc2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 800cbc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <tcp_write+0x68a>
    pbuf_free(concat_p);
 800cbcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cbce:	f7fa fe57 	bl	8007880 <pbuf_free>
  }
  if (queue != NULL) {
 800cbd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <tcp_write+0x696>
    tcp_segs_free(queue);
 800cbd8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbda:	f7fc fa81 	bl	80090e0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00e      	beq.n	800cc06 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10a      	bne.n	800cc06 <tcp_write+0x6be>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d106      	bne.n	800cc06 <tcp_write+0x6be>
 800cbf8:	4b06      	ldr	r3, [pc, #24]	; (800cc14 <tcp_write+0x6cc>)
 800cbfa:	f240 3227 	movw	r2, #807	; 0x327
 800cbfe:	4906      	ldr	r1, [pc, #24]	; (800cc18 <tcp_write+0x6d0>)
 800cc00:	4806      	ldr	r0, [pc, #24]	; (800cc1c <tcp_write+0x6d4>)
 800cc02:	f006 fd25 	bl	8013650 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cc06:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	375c      	adds	r7, #92	; 0x5c
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd90      	pop	{r4, r7, pc}
 800cc12:	bf00      	nop
 800cc14:	080162d8 	.word	0x080162d8
 800cc18:	0801664c 	.word	0x0801664c
 800cc1c:	0801632c 	.word	0x0801632c
 800cc20:	20007a4c 	.word	0x20007a4c

0800cc24 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b08b      	sub	sp, #44	; 0x2c
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cc30:	2300      	movs	r3, #0
 800cc32:	61fb      	str	r3, [r7, #28]
 800cc34:	2300      	movs	r3, #0
 800cc36:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d106      	bne.n	800cc50 <tcp_split_unsent_seg+0x2c>
 800cc42:	4b99      	ldr	r3, [pc, #612]	; (800cea8 <tcp_split_unsent_seg+0x284>)
 800cc44:	f240 324b 	movw	r2, #843	; 0x34b
 800cc48:	4998      	ldr	r1, [pc, #608]	; (800ceac <tcp_split_unsent_seg+0x288>)
 800cc4a:	4899      	ldr	r0, [pc, #612]	; (800ceb0 <tcp_split_unsent_seg+0x28c>)
 800cc4c:	f006 fd00 	bl	8013650 <iprintf>

  useg = pcb->unsent;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc54:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d102      	bne.n	800cc62 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc60:	e11e      	b.n	800cea0 <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 800cc62:	887b      	ldrh	r3, [r7, #2]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d109      	bne.n	800cc7c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cc68:	4b8f      	ldr	r3, [pc, #572]	; (800cea8 <tcp_split_unsent_seg+0x284>)
 800cc6a:	f240 3253 	movw	r2, #851	; 0x353
 800cc6e:	4991      	ldr	r1, [pc, #580]	; (800ceb4 <tcp_split_unsent_seg+0x290>)
 800cc70:	488f      	ldr	r0, [pc, #572]	; (800ceb0 <tcp_split_unsent_seg+0x28c>)
 800cc72:	f006 fced 	bl	8013650 <iprintf>
    return ERR_VAL;
 800cc76:	f06f 0305 	mvn.w	r3, #5
 800cc7a:	e111      	b.n	800cea0 <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	891b      	ldrh	r3, [r3, #8]
 800cc80:	887a      	ldrh	r2, [r7, #2]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d301      	bcc.n	800cc8a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e10a      	b.n	800cea0 <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc8e:	887a      	ldrh	r2, [r7, #2]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d906      	bls.n	800cca2 <tcp_split_unsent_seg+0x7e>
 800cc94:	4b84      	ldr	r3, [pc, #528]	; (800cea8 <tcp_split_unsent_seg+0x284>)
 800cc96:	f240 325b 	movw	r2, #859	; 0x35b
 800cc9a:	4987      	ldr	r1, [pc, #540]	; (800ceb8 <tcp_split_unsent_seg+0x294>)
 800cc9c:	4884      	ldr	r0, [pc, #528]	; (800ceb0 <tcp_split_unsent_seg+0x28c>)
 800cc9e:	f006 fcd7 	bl	8013650 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	891b      	ldrh	r3, [r3, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <tcp_split_unsent_seg+0x94>
 800ccaa:	4b7f      	ldr	r3, [pc, #508]	; (800cea8 <tcp_split_unsent_seg+0x284>)
 800ccac:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ccb0:	4982      	ldr	r1, [pc, #520]	; (800cebc <tcp_split_unsent_seg+0x298>)
 800ccb2:	487f      	ldr	r0, [pc, #508]	; (800ceb0 <tcp_split_unsent_seg+0x28c>)
 800ccb4:	f006 fccc 	bl	8013650 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	7a9b      	ldrb	r3, [r3, #10]
 800ccbc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	891a      	ldrh	r2, [r3, #8]
 800ccce:	887b      	ldrh	r3, [r7, #2]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ccd4:	7bbb      	ldrb	r3, [r7, #14]
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	89bb      	ldrh	r3, [r7, #12]
 800ccda:	4413      	add	r3, r2
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cce2:	4619      	mov	r1, r3
 800cce4:	2036      	movs	r0, #54	; 0x36
 800cce6:	f7fa fb2b 	bl	8007340 <pbuf_alloc>
 800ccea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 80b7 	beq.w	800ce62 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	891a      	ldrh	r2, [r3, #8]
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	891b      	ldrh	r3, [r3, #8]
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	887b      	ldrh	r3, [r7, #2]
 800cd04:	4413      	add	r3, r2
 800cd06:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	6858      	ldr	r0, [r3, #4]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	685a      	ldr	r2, [r3, #4]
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	18d1      	adds	r1, r2, r3
 800cd14:	897b      	ldrh	r3, [r7, #10]
 800cd16:	89ba      	ldrh	r2, [r7, #12]
 800cd18:	f7fa ffac 	bl	8007c74 <pbuf_copy_partial>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	461a      	mov	r2, r3
 800cd20:	89bb      	ldrh	r3, [r7, #12]
 800cd22:	4293      	cmp	r3, r2
 800cd24:	f040 809f 	bne.w	800ce66 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	899b      	ldrh	r3, [r3, #12]
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7f9 f8db 	bl	8005eec <lwip_htons>
 800cd36:	4603      	mov	r3, r0
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd3e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cd40:	2300      	movs	r3, #0
 800cd42:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cd44:	7efb      	ldrb	r3, [r7, #27]
 800cd46:	f003 0308 	and.w	r3, r3, #8
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d007      	beq.n	800cd5e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cd4e:	7efb      	ldrb	r3, [r7, #27]
 800cd50:	f023 0308 	bic.w	r3, r3, #8
 800cd54:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cd56:	7ebb      	ldrb	r3, [r7, #26]
 800cd58:	f043 0308 	orr.w	r3, r3, #8
 800cd5c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cd5e:	7efb      	ldrb	r3, [r7, #27]
 800cd60:	f003 0301 	and.w	r3, r3, #1
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d007      	beq.n	800cd78 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cd68:	7efb      	ldrb	r3, [r7, #27]
 800cd6a:	f023 0301 	bic.w	r3, r3, #1
 800cd6e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cd70:	7ebb      	ldrb	r3, [r7, #26]
 800cd72:	f043 0301 	orr.w	r3, r3, #1
 800cd76:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7f9 f8c9 	bl	8005f16 <lwip_htonl>
 800cd84:	4602      	mov	r2, r0
 800cd86:	887b      	ldrh	r3, [r7, #2]
 800cd88:	18d1      	adds	r1, r2, r3
 800cd8a:	7eba      	ldrb	r2, [r7, #26]
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	460b      	mov	r3, r1
 800cd92:	6939      	ldr	r1, [r7, #16]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7ff fa33 	bl	800c200 <tcp_create_segment>
 800cd9a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d063      	beq.n	800ce6a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fa fdf2 	bl	8007990 <pbuf_clen>
 800cdac:	4603      	mov	r3, r0
 800cdae:	461a      	mov	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdb6:	1a9b      	subs	r3, r3, r2
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	6858      	ldr	r0, [r3, #4]
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	891a      	ldrh	r2, [r3, #8]
 800cdca:	89bb      	ldrh	r3, [r7, #12]
 800cdcc:	1ad3      	subs	r3, r2, r3
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	f7fa fbcf 	bl	8007574 <pbuf_realloc>
  useg->len -= remainder;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	891a      	ldrh	r2, [r3, #8]
 800cdda:	89bb      	ldrh	r3, [r7, #12]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	899b      	ldrh	r3, [r3, #12]
 800cdea:	b29c      	uxth	r4, r3
 800cdec:	7efb      	ldrb	r3, [r7, #27]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7f9 f87b 	bl	8005eec <lwip_htons>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	4322      	orrs	r2, r4
 800ce00:	b292      	uxth	r2, r2
 800ce02:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fa fdc1 	bl	8007990 <pbuf_clen>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	461a      	mov	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce18:	4413      	add	r3, r2
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fa fdb2 	bl	8007990 <pbuf_clen>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	461a      	mov	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce36:	4413      	add	r3, r2
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	69fa      	ldr	r2, [r7, #28]
 800ce4c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d103      	bne.n	800ce5e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e01e      	b.n	800cea0 <tcp_split_unsent_seg+0x27c>
    goto memerr;
 800ce62:	bf00      	nop
 800ce64:	e002      	b.n	800ce6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ce66:	bf00      	nop
 800ce68:	e000      	b.n	800ce6c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ce6a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800ce6c:	4b14      	ldr	r3, [pc, #80]	; (800cec0 <tcp_split_unsent_seg+0x29c>)
 800ce6e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ce72:	3301      	adds	r3, #1
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	4b12      	ldr	r3, [pc, #72]	; (800cec0 <tcp_split_unsent_seg+0x29c>)
 800ce78:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d006      	beq.n	800ce90 <tcp_split_unsent_seg+0x26c>
 800ce82:	4b09      	ldr	r3, [pc, #36]	; (800cea8 <tcp_split_unsent_seg+0x284>)
 800ce84:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ce88:	490e      	ldr	r1, [pc, #56]	; (800cec4 <tcp_split_unsent_seg+0x2a0>)
 800ce8a:	4809      	ldr	r0, [pc, #36]	; (800ceb0 <tcp_split_unsent_seg+0x28c>)
 800ce8c:	f006 fbe0 	bl	8013650 <iprintf>
  if (p != NULL) {
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d002      	beq.n	800ce9c <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 800ce96:	6938      	ldr	r0, [r7, #16]
 800ce98:	f7fa fcf2 	bl	8007880 <pbuf_free>
  }

  return ERR_MEM;
 800ce9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3724      	adds	r7, #36	; 0x24
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd90      	pop	{r4, r7, pc}
 800cea8:	080162d8 	.word	0x080162d8
 800ceac:	0801666c 	.word	0x0801666c
 800ceb0:	0801632c 	.word	0x0801632c
 800ceb4:	08016690 	.word	0x08016690
 800ceb8:	080166b4 	.word	0x080166b4
 800cebc:	080166c4 	.word	0x080166c4
 800cec0:	20007a4c 	.word	0x20007a4c
 800cec4:	080166d4 	.word	0x080166d4

0800cec8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800cec8:	b590      	push	{r4, r7, lr}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <tcp_send_fin+0x1c>
 800ced6:	4b21      	ldr	r3, [pc, #132]	; (800cf5c <tcp_send_fin+0x94>)
 800ced8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cedc:	4920      	ldr	r1, [pc, #128]	; (800cf60 <tcp_send_fin+0x98>)
 800cede:	4821      	ldr	r0, [pc, #132]	; (800cf64 <tcp_send_fin+0x9c>)
 800cee0:	f006 fbb6 	bl	8013650 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d02e      	beq.n	800cf4a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef0:	60fb      	str	r3, [r7, #12]
 800cef2:	e002      	b.n	800cefa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1f8      	bne.n	800cef4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	899b      	ldrh	r3, [r3, #12]
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7f8 ffee 	bl	8005eec <lwip_htons>
 800cf10:	4603      	mov	r3, r0
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	f003 0307 	and.w	r3, r3, #7
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d116      	bne.n	800cf4a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	899b      	ldrh	r3, [r3, #12]
 800cf22:	b29c      	uxth	r4, r3
 800cf24:	2001      	movs	r0, #1
 800cf26:	f7f8 ffe1 	bl	8005eec <lwip_htons>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	4322      	orrs	r2, r4
 800cf34:	b292      	uxth	r2, r2
 800cf36:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	8b5b      	ldrh	r3, [r3, #26]
 800cf3c:	f043 0320 	orr.w	r3, r3, #32
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	e004      	b.n	800cf54 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cf4a:	2101      	movs	r1, #1
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f80b 	bl	800cf68 <tcp_enqueue_flags>
 800cf52:	4603      	mov	r3, r0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd90      	pop	{r4, r7, pc}
 800cf5c:	080162d8 	.word	0x080162d8
 800cf60:	080166e0 	.word	0x080166e0
 800cf64:	0801632c 	.word	0x0801632c

0800cf68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	460b      	mov	r3, r1
 800cf72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	f003 0303 	and.w	r3, r3, #3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d106      	bne.n	800cf94 <tcp_enqueue_flags+0x2c>
 800cf86:	4b68      	ldr	r3, [pc, #416]	; (800d128 <tcp_enqueue_flags+0x1c0>)
 800cf88:	f240 4211 	movw	r2, #1041	; 0x411
 800cf8c:	4967      	ldr	r1, [pc, #412]	; (800d12c <tcp_enqueue_flags+0x1c4>)
 800cf8e:	4868      	ldr	r0, [pc, #416]	; (800d130 <tcp_enqueue_flags+0x1c8>)
 800cf90:	f006 fb5e 	bl	8013650 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d106      	bne.n	800cfa8 <tcp_enqueue_flags+0x40>
 800cf9a:	4b63      	ldr	r3, [pc, #396]	; (800d128 <tcp_enqueue_flags+0x1c0>)
 800cf9c:	f240 4213 	movw	r2, #1043	; 0x413
 800cfa0:	4964      	ldr	r1, [pc, #400]	; (800d134 <tcp_enqueue_flags+0x1cc>)
 800cfa2:	4863      	ldr	r0, [pc, #396]	; (800d130 <tcp_enqueue_flags+0x1c8>)
 800cfa4:	f006 fb54 	bl	8013650 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cfa8:	78fb      	ldrb	r3, [r7, #3]
 800cfaa:	f003 0302 	and.w	r3, r3, #2
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cfb6:	7ffb      	ldrb	r3, [r7, #31]
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	f003 0304 	and.w	r3, r3, #4
 800cfc0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cfca:	4619      	mov	r1, r3
 800cfcc:	2036      	movs	r0, #54	; 0x36
 800cfce:	f7fa f9b7 	bl	8007340 <pbuf_alloc>
 800cfd2:	6138      	str	r0, [r7, #16]
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d111      	bne.n	800cffe <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	8b5b      	ldrh	r3, [r3, #26]
 800cfde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800cfe8:	4b53      	ldr	r3, [pc, #332]	; (800d138 <tcp_enqueue_flags+0x1d0>)
 800cfea:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cfee:	3301      	adds	r3, #1
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	4b51      	ldr	r3, [pc, #324]	; (800d138 <tcp_enqueue_flags+0x1d0>)
 800cff4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800cff8:	f04f 33ff 	mov.w	r3, #4294967295
 800cffc:	e090      	b.n	800d120 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	895a      	ldrh	r2, [r3, #10]
 800d002:	7dfb      	ldrb	r3, [r7, #23]
 800d004:	b29b      	uxth	r3, r3
 800d006:	429a      	cmp	r2, r3
 800d008:	d206      	bcs.n	800d018 <tcp_enqueue_flags+0xb0>
 800d00a:	4b47      	ldr	r3, [pc, #284]	; (800d128 <tcp_enqueue_flags+0x1c0>)
 800d00c:	f240 4239 	movw	r2, #1081	; 0x439
 800d010:	494a      	ldr	r1, [pc, #296]	; (800d13c <tcp_enqueue_flags+0x1d4>)
 800d012:	4847      	ldr	r0, [pc, #284]	; (800d130 <tcp_enqueue_flags+0x1c8>)
 800d014:	f006 fb1c 	bl	8013650 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d01c:	78fa      	ldrb	r2, [r7, #3]
 800d01e:	7ffb      	ldrb	r3, [r7, #31]
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	460b      	mov	r3, r1
 800d024:	6939      	ldr	r1, [r7, #16]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7ff f8ea 	bl	800c200 <tcp_create_segment>
 800d02c:	60f8      	str	r0, [r7, #12]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d111      	bne.n	800d058 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	8b5b      	ldrh	r3, [r3, #26]
 800d038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800d042:	4b3d      	ldr	r3, [pc, #244]	; (800d138 <tcp_enqueue_flags+0x1d0>)
 800d044:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800d048:	3301      	adds	r3, #1
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	4b3a      	ldr	r3, [pc, #232]	; (800d138 <tcp_enqueue_flags+0x1d0>)
 800d04e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800d052:	f04f 33ff 	mov.w	r3, #4294967295
 800d056:	e063      	b.n	800d120 <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	891b      	ldrh	r3, [r3, #8]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d006      	beq.n	800d06e <tcp_enqueue_flags+0x106>
 800d060:	4b31      	ldr	r3, [pc, #196]	; (800d128 <tcp_enqueue_flags+0x1c0>)
 800d062:	f240 4243 	movw	r2, #1091	; 0x443
 800d066:	4936      	ldr	r1, [pc, #216]	; (800d140 <tcp_enqueue_flags+0x1d8>)
 800d068:	4831      	ldr	r0, [pc, #196]	; (800d130 <tcp_enqueue_flags+0x1c8>)
 800d06a:	f006 faf1 	bl	8013650 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d072:	2b00      	cmp	r3, #0
 800d074:	d103      	bne.n	800d07e <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	66da      	str	r2, [r3, #108]	; 0x6c
 800d07c:	e00d      	b.n	800d09a <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d082:	61bb      	str	r3, [r7, #24]
 800d084:	e002      	b.n	800d08c <tcp_enqueue_flags+0x124>
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	61bb      	str	r3, [r7, #24]
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1f8      	bne.n	800d086 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d0a2:	78fb      	ldrb	r3, [r7, #3]
 800d0a4:	f003 0302 	and.w	r3, r3, #2
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d104      	bne.n	800d0b6 <tcp_enqueue_flags+0x14e>
 800d0ac:	78fb      	ldrb	r3, [r7, #3]
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d004      	beq.n	800d0c0 <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d0c0:	78fb      	ldrb	r3, [r7, #3]
 800d0c2:	f003 0301 	and.w	r3, r3, #1
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d006      	beq.n	800d0d8 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	8b5b      	ldrh	r3, [r3, #26]
 800d0ce:	f043 0320 	orr.w	r3, r3, #32
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fa fc57 	bl	8007990 <pbuf_clen>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0ec:	4413      	add	r3, r2
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00e      	beq.n	800d11e <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <tcp_enqueue_flags+0x1b6>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d106      	bne.n	800d11e <tcp_enqueue_flags+0x1b6>
 800d110:	4b05      	ldr	r3, [pc, #20]	; (800d128 <tcp_enqueue_flags+0x1c0>)
 800d112:	f240 4265 	movw	r2, #1125	; 0x465
 800d116:	490b      	ldr	r1, [pc, #44]	; (800d144 <tcp_enqueue_flags+0x1dc>)
 800d118:	4805      	ldr	r0, [pc, #20]	; (800d130 <tcp_enqueue_flags+0x1c8>)
 800d11a:	f006 fa99 	bl	8013650 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3720      	adds	r7, #32
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	080162d8 	.word	0x080162d8
 800d12c:	080166fc 	.word	0x080166fc
 800d130:	0801632c 	.word	0x0801632c
 800d134:	08016754 	.word	0x08016754
 800d138:	20007a4c 	.word	0x20007a4c
 800d13c:	08016774 	.word	0x08016774
 800d140:	080167b0 	.word	0x080167b0
 800d144:	080167dc 	.word	0x080167dc

0800d148 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d148:	b5b0      	push	{r4, r5, r7, lr}
 800d14a:	b08a      	sub	sp, #40	; 0x28
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <tcp_output+0x1c>
 800d156:	4b9e      	ldr	r3, [pc, #632]	; (800d3d0 <tcp_output+0x288>)
 800d158:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d15c:	499d      	ldr	r1, [pc, #628]	; (800d3d4 <tcp_output+0x28c>)
 800d15e:	489e      	ldr	r0, [pc, #632]	; (800d3d8 <tcp_output+0x290>)
 800d160:	f006 fa76 	bl	8013650 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	7d1b      	ldrb	r3, [r3, #20]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d106      	bne.n	800d17a <tcp_output+0x32>
 800d16c:	4b98      	ldr	r3, [pc, #608]	; (800d3d0 <tcp_output+0x288>)
 800d16e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d172:	499a      	ldr	r1, [pc, #616]	; (800d3dc <tcp_output+0x294>)
 800d174:	4898      	ldr	r0, [pc, #608]	; (800d3d8 <tcp_output+0x290>)
 800d176:	f006 fa6b 	bl	8013650 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d17a:	4b99      	ldr	r3, [pc, #612]	; (800d3e0 <tcp_output+0x298>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	429a      	cmp	r2, r3
 800d182:	d101      	bne.n	800d188 <tcp_output+0x40>
    return ERR_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	e1ce      	b.n	800d526 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d194:	4293      	cmp	r3, r2
 800d196:	bf28      	it	cs
 800d198:	4613      	movcs	r3, r2
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10b      	bne.n	800d1c2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	8b5b      	ldrh	r3, [r3, #26]
 800d1ae:	f003 0302 	and.w	r3, r3, #2
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f000 81aa 	beq.w	800d50c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fe01 	bl	800ddc0 <tcp_send_empty_ack>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	e1b1      	b.n	800d526 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7fe fffc 	bl	800c1c8 <tcp_route>
 800d1d0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d102      	bne.n	800d1de <tcp_output+0x96>
    return ERR_RTE;
 800d1d8:	f06f 0303 	mvn.w	r3, #3
 800d1dc:	e1a3      	b.n	800d526 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d003      	beq.n	800d1ec <tcp_output+0xa4>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d111      	bne.n	800d210 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d002      	beq.n	800d1f8 <tcp_output+0xb0>
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	e000      	b.n	800d1fa <tcp_output+0xb2>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d102      	bne.n	800d208 <tcp_output+0xc0>
      return ERR_RTE;
 800d202:	f06f 0303 	mvn.w	r3, #3
 800d206:	e18e      	b.n	800d526 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	4618      	mov	r0, r3
 800d218:	f7f8 fe7d 	bl	8005f16 <lwip_htonl>
 800d21c:	4602      	mov	r2, r0
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d226:	8912      	ldrh	r2, [r2, #8]
 800d228:	4413      	add	r3, r2
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d227      	bcs.n	800d280 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d236:	461a      	mov	r2, r3
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d114      	bne.n	800d268 <tcp_output+0x120>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d242:	2b00      	cmp	r3, #0
 800d244:	d110      	bne.n	800d268 <tcp_output+0x120>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d10b      	bne.n	800d268 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	8b5b      	ldrh	r3, [r3, #26]
 800d26c:	f003 0302 	and.w	r3, r3, #2
 800d270:	2b00      	cmp	r3, #0
 800d272:	f000 814d 	beq.w	800d510 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fda2 	bl	800ddc0 <tcp_send_empty_ack>
 800d27c:	4603      	mov	r3, r0
 800d27e:	e152      	b.n	800d526 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d28c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d28e:	6a3b      	ldr	r3, [r7, #32]
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 811c 	beq.w	800d4ce <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d296:	e002      	b.n	800d29e <tcp_output+0x156>
 800d298:	6a3b      	ldr	r3, [r7, #32]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	623b      	str	r3, [r7, #32]
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1f8      	bne.n	800d298 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d2a6:	e112      	b.n	800d4ce <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	899b      	ldrh	r3, [r3, #12]
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7f8 fe1b 	bl	8005eec <lwip_htons>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	f003 0304 	and.w	r3, r3, #4
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d006      	beq.n	800d2d0 <tcp_output+0x188>
 800d2c2:	4b43      	ldr	r3, [pc, #268]	; (800d3d0 <tcp_output+0x288>)
 800d2c4:	f240 5236 	movw	r2, #1334	; 0x536
 800d2c8:	4946      	ldr	r1, [pc, #280]	; (800d3e4 <tcp_output+0x29c>)
 800d2ca:	4843      	ldr	r0, [pc, #268]	; (800d3d8 <tcp_output+0x290>)
 800d2cc:	f006 f9c0 	bl	8013650 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d01f      	beq.n	800d318 <tcp_output+0x1d0>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	8b5b      	ldrh	r3, [r3, #26]
 800d2dc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d119      	bne.n	800d318 <tcp_output+0x1d0>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00b      	beq.n	800d304 <tcp_output+0x1bc>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d110      	bne.n	800d318 <tcp_output+0x1d0>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2fa:	891a      	ldrh	r2, [r3, #8]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d300:	429a      	cmp	r2, r3
 800d302:	d209      	bcs.n	800d318 <tcp_output+0x1d0>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d004      	beq.n	800d318 <tcp_output+0x1d0>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d314:	2b07      	cmp	r3, #7
 800d316:	d901      	bls.n	800d31c <tcp_output+0x1d4>
 800d318:	2301      	movs	r3, #1
 800d31a:	e000      	b.n	800d31e <tcp_output+0x1d6>
 800d31c:	2300      	movs	r3, #0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	8b5b      	ldrh	r3, [r3, #26]
 800d326:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f000 80e4 	beq.w	800d4f8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7d1b      	ldrb	r3, [r3, #20]
 800d334:	2b02      	cmp	r3, #2
 800d336:	d00d      	beq.n	800d354 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	899b      	ldrh	r3, [r3, #12]
 800d33e:	b29c      	uxth	r4, r3
 800d340:	2010      	movs	r0, #16
 800d342:	f7f8 fdd3 	bl	8005eec <lwip_htons>
 800d346:	4603      	mov	r3, r0
 800d348:	461a      	mov	r2, r3
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	4322      	orrs	r2, r4
 800d350:	b292      	uxth	r2, r2
 800d352:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d354:	697a      	ldr	r2, [r7, #20]
 800d356:	6879      	ldr	r1, [r7, #4]
 800d358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d35a:	f000 f909 	bl	800d570 <tcp_output_segment>
 800d35e:	4603      	mov	r3, r0
 800d360:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d009      	beq.n	800d37e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	8b5b      	ldrh	r3, [r3, #26]
 800d36e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d372:	b29a      	uxth	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	835a      	strh	r2, [r3, #26]
      return err;
 800d378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d37c:	e0d3      	b.n	800d526 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	7d1b      	ldrb	r3, [r3, #20]
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d006      	beq.n	800d39c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	8b5b      	ldrh	r3, [r3, #26]
 800d392:	f023 0303 	bic.w	r3, r3, #3
 800d396:	b29a      	uxth	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7f8 fdb7 	bl	8005f16 <lwip_htonl>
 800d3a8:	4604      	mov	r4, r0
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	891b      	ldrh	r3, [r3, #8]
 800d3ae:	461d      	mov	r5, r3
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	899b      	ldrh	r3, [r3, #12]
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7f8 fd97 	bl	8005eec <lwip_htons>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	f003 0303 	and.w	r3, r3, #3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00e      	beq.n	800d3e8 <tcp_output+0x2a0>
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e00d      	b.n	800d3ea <tcp_output+0x2a2>
 800d3ce:	bf00      	nop
 800d3d0:	080162d8 	.word	0x080162d8
 800d3d4:	08016804 	.word	0x08016804
 800d3d8:	0801632c 	.word	0x0801632c
 800d3dc:	0801681c 	.word	0x0801681c
 800d3e0:	20007b3c 	.word	0x20007b3c
 800d3e4:	08016844 	.word	0x08016844
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	442b      	add	r3, r5
 800d3ec:	4423      	add	r3, r4
 800d3ee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	da02      	bge.n	800d402 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d404:	891b      	ldrh	r3, [r3, #8]
 800d406:	461c      	mov	r4, r3
 800d408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	899b      	ldrh	r3, [r3, #12]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	4618      	mov	r0, r3
 800d412:	f7f8 fd6b 	bl	8005eec <lwip_htons>
 800d416:	4603      	mov	r3, r0
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	f003 0303 	and.w	r3, r3, #3
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <tcp_output+0x2de>
 800d422:	2301      	movs	r3, #1
 800d424:	e000      	b.n	800d428 <tcp_output+0x2e0>
 800d426:	2300      	movs	r3, #0
 800d428:	4423      	add	r3, r4
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d049      	beq.n	800d4c2 <tcp_output+0x37a>
      seg->next = NULL;
 800d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d105      	bne.n	800d448 <tcp_output+0x300>
        pcb->unacked = seg;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d440:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	623b      	str	r3, [r7, #32]
 800d446:	e03f      	b.n	800d4c8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	4618      	mov	r0, r3
 800d450:	f7f8 fd61 	bl	8005f16 <lwip_htonl>
 800d454:	4604      	mov	r4, r0
 800d456:	6a3b      	ldr	r3, [r7, #32]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f8 fd5a 	bl	8005f16 <lwip_htonl>
 800d462:	4603      	mov	r3, r0
 800d464:	1ae3      	subs	r3, r4, r3
 800d466:	2b00      	cmp	r3, #0
 800d468:	da24      	bge.n	800d4b4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3370      	adds	r3, #112	; 0x70
 800d46e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d470:	e002      	b.n	800d478 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d011      	beq.n	800d4a4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7f8 fd44 	bl	8005f16 <lwip_htonl>
 800d48e:	4604      	mov	r4, r0
 800d490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	4618      	mov	r0, r3
 800d498:	f7f8 fd3d 	bl	8005f16 <lwip_htonl>
 800d49c:	4603      	mov	r3, r0
 800d49e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	dbe6      	blt.n	800d472 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d4a4:	69fb      	ldr	r3, [r7, #28]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b0:	601a      	str	r2, [r3, #0]
 800d4b2:	e009      	b.n	800d4c8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d4b4:	6a3b      	ldr	r3, [r7, #32]
 800d4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d4ba:	6a3b      	ldr	r3, [r7, #32]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	623b      	str	r3, [r7, #32]
 800d4c0:	e002      	b.n	800d4c8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d4c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4c4:	f7fb fe21 	bl	800910a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d012      	beq.n	800d4fa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7f8 fd1b 	bl	8005f16 <lwip_htonl>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ea:	8912      	ldrh	r2, [r2, #8]
 800d4ec:	4413      	add	r3, r2
  while (seg != NULL &&
 800d4ee:	69ba      	ldr	r2, [r7, #24]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	f4bf aed9 	bcs.w	800d2a8 <tcp_output+0x160>
 800d4f6:	e000      	b.n	800d4fa <tcp_output+0x3b2>
      break;
 800d4f8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d108      	bne.n	800d514 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d50a:	e004      	b.n	800d516 <tcp_output+0x3ce>
    goto output_done;
 800d50c:	bf00      	nop
 800d50e:	e002      	b.n	800d516 <tcp_output+0x3ce>
    goto output_done;
 800d510:	bf00      	nop
 800d512:	e000      	b.n	800d516 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d514:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	8b5b      	ldrh	r3, [r3, #26]
 800d51a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d51e:	b29a      	uxth	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3728      	adds	r7, #40	; 0x28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bdb0      	pop	{r4, r5, r7, pc}
 800d52e:	bf00      	nop

0800d530 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <tcp_output_segment_busy+0x1c>
 800d53e:	4b09      	ldr	r3, [pc, #36]	; (800d564 <tcp_output_segment_busy+0x34>)
 800d540:	f240 529a 	movw	r2, #1434	; 0x59a
 800d544:	4908      	ldr	r1, [pc, #32]	; (800d568 <tcp_output_segment_busy+0x38>)
 800d546:	4809      	ldr	r0, [pc, #36]	; (800d56c <tcp_output_segment_busy+0x3c>)
 800d548:	f006 f882 	bl	8013650 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	7b9b      	ldrb	r3, [r3, #14]
 800d552:	2b01      	cmp	r3, #1
 800d554:	d001      	beq.n	800d55a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d556:	2301      	movs	r3, #1
 800d558:	e000      	b.n	800d55c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	080162d8 	.word	0x080162d8
 800d568:	0801685c 	.word	0x0801685c
 800d56c:	0801632c 	.word	0x0801632c

0800d570 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d570:	b5b0      	push	{r4, r5, r7, lr}
 800d572:	b08c      	sub	sp, #48	; 0x30
 800d574:	af04      	add	r7, sp, #16
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d106      	bne.n	800d590 <tcp_output_segment+0x20>
 800d582:	4b70      	ldr	r3, [pc, #448]	; (800d744 <tcp_output_segment+0x1d4>)
 800d584:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d588:	496f      	ldr	r1, [pc, #444]	; (800d748 <tcp_output_segment+0x1d8>)
 800d58a:	4870      	ldr	r0, [pc, #448]	; (800d74c <tcp_output_segment+0x1dc>)
 800d58c:	f006 f860 	bl	8013650 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <tcp_output_segment+0x34>
 800d596:	4b6b      	ldr	r3, [pc, #428]	; (800d744 <tcp_output_segment+0x1d4>)
 800d598:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d59c:	496c      	ldr	r1, [pc, #432]	; (800d750 <tcp_output_segment+0x1e0>)
 800d59e:	486b      	ldr	r0, [pc, #428]	; (800d74c <tcp_output_segment+0x1dc>)
 800d5a0:	f006 f856 	bl	8013650 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d106      	bne.n	800d5b8 <tcp_output_segment+0x48>
 800d5aa:	4b66      	ldr	r3, [pc, #408]	; (800d744 <tcp_output_segment+0x1d4>)
 800d5ac:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d5b0:	4968      	ldr	r1, [pc, #416]	; (800d754 <tcp_output_segment+0x1e4>)
 800d5b2:	4866      	ldr	r0, [pc, #408]	; (800d74c <tcp_output_segment+0x1dc>)
 800d5b4:	f006 f84c 	bl	8013650 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f7ff ffb9 	bl	800d530 <tcp_output_segment_busy>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e0b9      	b.n	800d73c <tcp_output_segment+0x1cc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	68dc      	ldr	r4, [r3, #12]
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	f7f8 fca0 	bl	8005f16 <lwip_htonl>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	68dc      	ldr	r4, [r3, #12]
 800d5e2:	4610      	mov	r0, r2
 800d5e4:	f7f8 fc82 	bl	8005eec <lwip_htons>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d5f4:	441a      	add	r2, r3
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	3314      	adds	r3, #20
 800d600:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	7a9b      	ldrb	r3, [r3, #10]
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d015      	beq.n	800d63a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	3304      	adds	r3, #4
 800d612:	461a      	mov	r2, r3
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d61a:	f7fc f983 	bl	8009924 <tcp_eff_send_mss_netif>
 800d61e:	4603      	mov	r3, r0
 800d620:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d622:	8b7b      	ldrh	r3, [r7, #26]
 800d624:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d628:	4618      	mov	r0, r3
 800d62a:	f7f8 fc74 	bl	8005f16 <lwip_htonl>
 800d62e:	4602      	mov	r2, r0
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	3304      	adds	r3, #4
 800d638:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d640:	2b00      	cmp	r3, #0
 800d642:	da02      	bge.n	800d64a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2200      	movs	r2, #0
 800d648:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10c      	bne.n	800d66c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d652:	4b41      	ldr	r3, [pc, #260]	; (800d758 <tcp_output_segment+0x1e8>)
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	4618      	mov	r0, r3
 800d662:	f7f8 fc58 	bl	8005f16 <lwip_htonl>
 800d666:	4602      	mov	r2, r0
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	68da      	ldr	r2, [r3, #12]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	1ad3      	subs	r3, r2, r3
 800d678:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	8959      	ldrh	r1, [r3, #10]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	8b3a      	ldrh	r2, [r7, #24]
 800d686:	1a8a      	subs	r2, r1, r2
 800d688:	b292      	uxth	r2, r2
 800d68a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	8919      	ldrh	r1, [r3, #8]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	8b3a      	ldrh	r2, [r7, #24]
 800d698:	1a8a      	subs	r2, r1, r2
 800d69a:	b292      	uxth	r2, r2
 800d69c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	68d2      	ldr	r2, [r2, #12]
 800d6a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	68db      	ldr	r3, [r3, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	741a      	strb	r2, [r3, #16]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	68db      	ldr	r3, [r3, #12]
 800d6b8:	f103 0214 	add.w	r2, r3, #20
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	7a9b      	ldrb	r3, [r3, #10]
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	f003 0304 	and.w	r3, r3, #4
 800d6c6:	4413      	add	r3, r2
 800d6c8:	69fa      	ldr	r2, [r7, #28]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d006      	beq.n	800d6dc <tcp_output_segment+0x16c>
 800d6ce:	4b1d      	ldr	r3, [pc, #116]	; (800d744 <tcp_output_segment+0x1d4>)
 800d6d0:	f240 621c 	movw	r2, #1564	; 0x61c
 800d6d4:	4921      	ldr	r1, [pc, #132]	; (800d75c <tcp_output_segment+0x1ec>)
 800d6d6:	481d      	ldr	r0, [pc, #116]	; (800d74c <tcp_output_segment+0x1dc>)
 800d6d8:	f005 ffba 	bl	8013650 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800d6e4:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800d6e6:	68bd      	ldr	r5, [r7, #8]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	68d4      	ldr	r4, [r2, #12]
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	462b      	mov	r3, r5
 800d6f4:	460a      	mov	r2, r1
 800d6f6:	2106      	movs	r1, #6
 800d6f8:	f7f8 fd94 	bl	8006224 <ip_chksum_pseudo>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800d700:	4b17      	ldr	r3, [pc, #92]	; (800d760 <tcp_output_segment+0x1f0>)
 800d702:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800d706:	3301      	adds	r3, #1
 800d708:	b29a      	uxth	r2, r3
 800d70a:	4b15      	ldr	r3, [pc, #84]	; (800d760 <tcp_output_segment+0x1f0>)
 800d70c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6858      	ldr	r0, [r3, #4]
 800d714:	68b9      	ldr	r1, [r7, #8]
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	1d1c      	adds	r4, r3, #4
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	7add      	ldrb	r5, [r3, #11]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	7a9b      	ldrb	r3, [r3, #10]
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	9202      	str	r2, [sp, #8]
 800d726:	2206      	movs	r2, #6
 800d728:	9201      	str	r2, [sp, #4]
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	462b      	mov	r3, r5
 800d72e:	4622      	mov	r2, r4
 800d730:	f004 fd82 	bl	8012238 <ip4_output_if>
 800d734:	4603      	mov	r3, r0
 800d736:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d738:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3720      	adds	r7, #32
 800d740:	46bd      	mov	sp, r7
 800d742:	bdb0      	pop	{r4, r5, r7, pc}
 800d744:	080162d8 	.word	0x080162d8
 800d748:	08016884 	.word	0x08016884
 800d74c:	0801632c 	.word	0x0801632c
 800d750:	080168a4 	.word	0x080168a4
 800d754:	080168c4 	.word	0x080168c4
 800d758:	20007b2c 	.word	0x20007b2c
 800d75c:	080168e8 	.word	0x080168e8
 800d760:	20007a4c 	.word	0x20007a4c

0800d764 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d764:	b5b0      	push	{r4, r5, r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d106      	bne.n	800d780 <tcp_rexmit_rto_prepare+0x1c>
 800d772:	4b31      	ldr	r3, [pc, #196]	; (800d838 <tcp_rexmit_rto_prepare+0xd4>)
 800d774:	f240 6263 	movw	r2, #1635	; 0x663
 800d778:	4930      	ldr	r1, [pc, #192]	; (800d83c <tcp_rexmit_rto_prepare+0xd8>)
 800d77a:	4831      	ldr	r0, [pc, #196]	; (800d840 <tcp_rexmit_rto_prepare+0xdc>)
 800d77c:	f005 ff68 	bl	8013650 <iprintf>

  if (pcb->unacked == NULL) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d784:	2b00      	cmp	r3, #0
 800d786:	d102      	bne.n	800d78e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d788:	f06f 0305 	mvn.w	r3, #5
 800d78c:	e050      	b.n	800d830 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	e00b      	b.n	800d7ae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f7ff feca 	bl	800d530 <tcp_output_segment_busy>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d002      	beq.n	800d7a8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d7a2:	f06f 0305 	mvn.w	r3, #5
 800d7a6:	e043      	b.n	800d830 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	60fb      	str	r3, [r7, #12]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1ef      	bne.n	800d796 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7ff feba 	bl	800d530 <tcp_output_segment_busy>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d002      	beq.n	800d7c8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d7c2:	f06f 0305 	mvn.w	r3, #5
 800d7c6:	e033      	b.n	800d830 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	8b5b      	ldrh	r3, [r3, #26]
 800d7e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7f8 fb8f 	bl	8005f16 <lwip_htonl>
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	891b      	ldrh	r3, [r3, #8]
 800d7fe:	461d      	mov	r5, r3
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	899b      	ldrh	r3, [r3, #12]
 800d806:	b29b      	uxth	r3, r3
 800d808:	4618      	mov	r0, r3
 800d80a:	f7f8 fb6f 	bl	8005eec <lwip_htons>
 800d80e:	4603      	mov	r3, r0
 800d810:	b2db      	uxtb	r3, r3
 800d812:	f003 0303 	and.w	r3, r3, #3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d001      	beq.n	800d81e <tcp_rexmit_rto_prepare+0xba>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <tcp_rexmit_rto_prepare+0xbc>
 800d81e:	2300      	movs	r3, #0
 800d820:	442b      	add	r3, r5
 800d822:	18e2      	adds	r2, r4, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bdb0      	pop	{r4, r5, r7, pc}
 800d838:	080162d8 	.word	0x080162d8
 800d83c:	080168fc 	.word	0x080168fc
 800d840:	0801632c 	.word	0x0801632c

0800d844 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <tcp_rexmit_rto_commit+0x1c>
 800d852:	4b0d      	ldr	r3, [pc, #52]	; (800d888 <tcp_rexmit_rto_commit+0x44>)
 800d854:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d858:	490c      	ldr	r1, [pc, #48]	; (800d88c <tcp_rexmit_rto_commit+0x48>)
 800d85a:	480d      	ldr	r0, [pc, #52]	; (800d890 <tcp_rexmit_rto_commit+0x4c>)
 800d85c:	f005 fef8 	bl	8013650 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d866:	2bff      	cmp	r3, #255	; 0xff
 800d868:	d007      	beq.n	800d87a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d870:	3301      	adds	r3, #1
 800d872:	b2da      	uxtb	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f7ff fc64 	bl	800d148 <tcp_output>
}
 800d880:	bf00      	nop
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	080162d8 	.word	0x080162d8
 800d88c:	08016920 	.word	0x08016920
 800d890:	0801632c 	.word	0x0801632c

0800d894 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d106      	bne.n	800d8b0 <tcp_rexmit_rto+0x1c>
 800d8a2:	4b0a      	ldr	r3, [pc, #40]	; (800d8cc <tcp_rexmit_rto+0x38>)
 800d8a4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d8a8:	4909      	ldr	r1, [pc, #36]	; (800d8d0 <tcp_rexmit_rto+0x3c>)
 800d8aa:	480a      	ldr	r0, [pc, #40]	; (800d8d4 <tcp_rexmit_rto+0x40>)
 800d8ac:	f005 fed0 	bl	8013650 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7ff ff57 	bl	800d764 <tcp_rexmit_rto_prepare>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d102      	bne.n	800d8c2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7ff ffc1 	bl	800d844 <tcp_rexmit_rto_commit>
  }
}
 800d8c2:	bf00      	nop
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	080162d8 	.word	0x080162d8
 800d8d0:	08016944 	.word	0x08016944
 800d8d4:	0801632c 	.word	0x0801632c

0800d8d8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d8d8:	b590      	push	{r4, r7, lr}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <tcp_rexmit+0x1c>
 800d8e6:	4b2f      	ldr	r3, [pc, #188]	; (800d9a4 <tcp_rexmit+0xcc>)
 800d8e8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d8ec:	492e      	ldr	r1, [pc, #184]	; (800d9a8 <tcp_rexmit+0xd0>)
 800d8ee:	482f      	ldr	r0, [pc, #188]	; (800d9ac <tcp_rexmit+0xd4>)
 800d8f0:	f005 feae 	bl	8013650 <iprintf>

  if (pcb->unacked == NULL) {
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d102      	bne.n	800d902 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d8fc:	f06f 0305 	mvn.w	r3, #5
 800d900:	e04c      	b.n	800d99c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d906:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d908:	68b8      	ldr	r0, [r7, #8]
 800d90a:	f7ff fe11 	bl	800d530 <tcp_output_segment_busy>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d914:	f06f 0305 	mvn.w	r3, #5
 800d918:	e040      	b.n	800d99c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	336c      	adds	r3, #108	; 0x6c
 800d926:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d928:	e002      	b.n	800d930 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d011      	beq.n	800d95c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	4618      	mov	r0, r3
 800d942:	f7f8 fae8 	bl	8005f16 <lwip_htonl>
 800d946:	4604      	mov	r4, r0
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	4618      	mov	r0, r3
 800d950:	f7f8 fae1 	bl	8005f16 <lwip_htonl>
 800d954:	4603      	mov	r3, r0
 800d956:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d958:	2b00      	cmp	r3, #0
 800d95a:	dbe6      	blt.n	800d92a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	68ba      	ldr	r2, [r7, #8]
 800d968:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d103      	bne.n	800d97a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d980:	2bff      	cmp	r3, #255	; 0xff
 800d982:	d007      	beq.n	800d994 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d98a:	3301      	adds	r3, #1
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd90      	pop	{r4, r7, pc}
 800d9a4:	080162d8 	.word	0x080162d8
 800d9a8:	08016960 	.word	0x08016960
 800d9ac:	0801632c 	.word	0x0801632c

0800d9b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <tcp_rexmit_fast+0x1c>
 800d9be:	4b2a      	ldr	r3, [pc, #168]	; (800da68 <tcp_rexmit_fast+0xb8>)
 800d9c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d9c4:	4929      	ldr	r1, [pc, #164]	; (800da6c <tcp_rexmit_fast+0xbc>)
 800d9c6:	482a      	ldr	r0, [pc, #168]	; (800da70 <tcp_rexmit_fast+0xc0>)
 800d9c8:	f005 fe42 	bl	8013650 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d045      	beq.n	800da60 <tcp_rexmit_fast+0xb0>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	8b5b      	ldrh	r3, [r3, #26]
 800d9d8:	f003 0304 	and.w	r3, r3, #4
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d13f      	bne.n	800da60 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7ff ff79 	bl	800d8d8 <tcp_rexmit>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d139      	bne.n	800da60 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	bf28      	it	cs
 800d9fc:	4613      	movcs	r3, r2
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	2b00      	cmp	r3, #0
 800da02:	da00      	bge.n	800da06 <tcp_rexmit_fast+0x56>
 800da04:	3301      	adds	r3, #1
 800da06:	105b      	asrs	r3, r3, #1
 800da08:	b29a      	uxth	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800da16:	461a      	mov	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	429a      	cmp	r2, r3
 800da20:	d206      	bcs.n	800da30 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da26:	005b      	lsls	r3, r3, #1
 800da28:	b29a      	uxth	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da3a:	4619      	mov	r1, r3
 800da3c:	0049      	lsls	r1, r1, #1
 800da3e:	440b      	add	r3, r1
 800da40:	b29b      	uxth	r3, r3
 800da42:	4413      	add	r3, r2
 800da44:	b29a      	uxth	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	8b5b      	ldrh	r3, [r3, #26]
 800da50:	f043 0304 	orr.w	r3, r3, #4
 800da54:	b29a      	uxth	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800da60:	bf00      	nop
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	080162d8 	.word	0x080162d8
 800da6c:	08016978 	.word	0x08016978
 800da70:	0801632c 	.word	0x0801632c

0800da74 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b086      	sub	sp, #24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	607b      	str	r3, [r7, #4]
 800da7e:	460b      	mov	r3, r1
 800da80:	817b      	strh	r3, [r7, #10]
 800da82:	4613      	mov	r3, r2
 800da84:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800da86:	897a      	ldrh	r2, [r7, #10]
 800da88:	893b      	ldrh	r3, [r7, #8]
 800da8a:	4413      	add	r3, r2
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	3314      	adds	r3, #20
 800da90:	b29b      	uxth	r3, r3
 800da92:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da96:	4619      	mov	r1, r3
 800da98:	2022      	movs	r0, #34	; 0x22
 800da9a:	f7f9 fc51 	bl	8007340 <pbuf_alloc>
 800da9e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d04d      	beq.n	800db42 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800daa6:	897b      	ldrh	r3, [r7, #10]
 800daa8:	3313      	adds	r3, #19
 800daaa:	697a      	ldr	r2, [r7, #20]
 800daac:	8952      	ldrh	r2, [r2, #10]
 800daae:	4293      	cmp	r3, r2
 800dab0:	db06      	blt.n	800dac0 <tcp_output_alloc_header_common+0x4c>
 800dab2:	4b26      	ldr	r3, [pc, #152]	; (800db4c <tcp_output_alloc_header_common+0xd8>)
 800dab4:	f240 7223 	movw	r2, #1827	; 0x723
 800dab8:	4925      	ldr	r1, [pc, #148]	; (800db50 <tcp_output_alloc_header_common+0xdc>)
 800daba:	4826      	ldr	r0, [pc, #152]	; (800db54 <tcp_output_alloc_header_common+0xe0>)
 800dabc:	f005 fdc8 	bl	8013650 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dac6:	8c3b      	ldrh	r3, [r7, #32]
 800dac8:	4618      	mov	r0, r3
 800daca:	f7f8 fa0f 	bl	8005eec <lwip_htons>
 800dace:	4603      	mov	r3, r0
 800dad0:	461a      	mov	r2, r3
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dad8:	4618      	mov	r0, r3
 800dada:	f7f8 fa07 	bl	8005eec <lwip_htons>
 800dade:	4603      	mov	r3, r0
 800dae0:	461a      	mov	r2, r3
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f7f8 fa12 	bl	8005f16 <lwip_htonl>
 800daf2:	4602      	mov	r2, r0
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800daf8:	897b      	ldrh	r3, [r7, #10]
 800dafa:	089b      	lsrs	r3, r3, #2
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	3305      	adds	r3, #5
 800db00:	b29b      	uxth	r3, r3
 800db02:	031b      	lsls	r3, r3, #12
 800db04:	b29a      	uxth	r2, r3
 800db06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	4313      	orrs	r3, r2
 800db0e:	b29b      	uxth	r3, r3
 800db10:	4618      	mov	r0, r3
 800db12:	f7f8 f9eb 	bl	8005eec <lwip_htons>
 800db16:	4603      	mov	r3, r0
 800db18:	461a      	mov	r2, r3
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800db1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db20:	4618      	mov	r0, r3
 800db22:	f7f8 f9e3 	bl	8005eec <lwip_htons>
 800db26:	4603      	mov	r3, r0
 800db28:	461a      	mov	r2, r3
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	2200      	movs	r2, #0
 800db32:	741a      	strb	r2, [r3, #16]
 800db34:	2200      	movs	r2, #0
 800db36:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	2200      	movs	r2, #0
 800db3c:	749a      	strb	r2, [r3, #18]
 800db3e:	2200      	movs	r2, #0
 800db40:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800db42:	697b      	ldr	r3, [r7, #20]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3718      	adds	r7, #24
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	080162d8 	.word	0x080162d8
 800db50:	08016998 	.word	0x08016998
 800db54:	0801632c 	.word	0x0801632c

0800db58 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800db58:	b5b0      	push	{r4, r5, r7, lr}
 800db5a:	b08a      	sub	sp, #40	; 0x28
 800db5c:	af04      	add	r7, sp, #16
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	607b      	str	r3, [r7, #4]
 800db62:	460b      	mov	r3, r1
 800db64:	817b      	strh	r3, [r7, #10]
 800db66:	4613      	mov	r3, r2
 800db68:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d106      	bne.n	800db7e <tcp_output_alloc_header+0x26>
 800db70:	4b15      	ldr	r3, [pc, #84]	; (800dbc8 <tcp_output_alloc_header+0x70>)
 800db72:	f240 7242 	movw	r2, #1858	; 0x742
 800db76:	4915      	ldr	r1, [pc, #84]	; (800dbcc <tcp_output_alloc_header+0x74>)
 800db78:	4815      	ldr	r0, [pc, #84]	; (800dbd0 <tcp_output_alloc_header+0x78>)
 800db7a:	f005 fd69 	bl	8013650 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	8adb      	ldrh	r3, [r3, #22]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	8b12      	ldrh	r2, [r2, #24]
 800db8a:	68f9      	ldr	r1, [r7, #12]
 800db8c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800db8e:	893d      	ldrh	r5, [r7, #8]
 800db90:	897c      	ldrh	r4, [r7, #10]
 800db92:	9103      	str	r1, [sp, #12]
 800db94:	2110      	movs	r1, #16
 800db96:	9102      	str	r1, [sp, #8]
 800db98:	9201      	str	r2, [sp, #4]
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	462a      	mov	r2, r5
 800dba0:	4621      	mov	r1, r4
 800dba2:	f7ff ff67 	bl	800da74 <tcp_output_alloc_header_common>
 800dba6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d006      	beq.n	800dbbc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dbb6:	441a      	add	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dbbc:	697b      	ldr	r3, [r7, #20]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3718      	adds	r7, #24
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bdb0      	pop	{r4, r5, r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	080162d8 	.word	0x080162d8
 800dbcc:	080169c8 	.word	0x080169c8
 800dbd0:	0801632c 	.word	0x0801632c

0800dbd4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b088      	sub	sp, #32
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	4611      	mov	r1, r2
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	71fb      	strb	r3, [r7, #7]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d106      	bne.n	800dc02 <tcp_output_fill_options+0x2e>
 800dbf4:	4b13      	ldr	r3, [pc, #76]	; (800dc44 <tcp_output_fill_options+0x70>)
 800dbf6:	f240 7256 	movw	r2, #1878	; 0x756
 800dbfa:	4913      	ldr	r1, [pc, #76]	; (800dc48 <tcp_output_fill_options+0x74>)
 800dbfc:	4813      	ldr	r0, [pc, #76]	; (800dc4c <tcp_output_fill_options+0x78>)
 800dbfe:	f005 fd27 	bl	8013650 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	3314      	adds	r3, #20
 800dc0c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800dc0e:	69bb      	ldr	r3, [r7, #24]
 800dc10:	f103 0214 	add.w	r2, r3, #20
 800dc14:	8bfb      	ldrh	r3, [r7, #30]
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4619      	mov	r1, r3
 800dc1a:	79fb      	ldrb	r3, [r7, #7]
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	f003 0304 	and.w	r3, r3, #4
 800dc22:	440b      	add	r3, r1
 800dc24:	4413      	add	r3, r2
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d006      	beq.n	800dc3a <tcp_output_fill_options+0x66>
 800dc2c:	4b05      	ldr	r3, [pc, #20]	; (800dc44 <tcp_output_fill_options+0x70>)
 800dc2e:	f240 7275 	movw	r2, #1909	; 0x775
 800dc32:	4907      	ldr	r1, [pc, #28]	; (800dc50 <tcp_output_fill_options+0x7c>)
 800dc34:	4805      	ldr	r0, [pc, #20]	; (800dc4c <tcp_output_fill_options+0x78>)
 800dc36:	f005 fd0b 	bl	8013650 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800dc3a:	bf00      	nop
 800dc3c:	3720      	adds	r7, #32
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	080162d8 	.word	0x080162d8
 800dc48:	080169f0 	.word	0x080169f0
 800dc4c:	0801632c 	.word	0x0801632c
 800dc50:	080168e8 	.word	0x080168e8

0800dc54 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08c      	sub	sp, #48	; 0x30
 800dc58:	af04      	add	r7, sp, #16
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
 800dc60:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d106      	bne.n	800dc76 <tcp_output_control_segment+0x22>
 800dc68:	4b28      	ldr	r3, [pc, #160]	; (800dd0c <tcp_output_control_segment+0xb8>)
 800dc6a:	f240 7287 	movw	r2, #1927	; 0x787
 800dc6e:	4928      	ldr	r1, [pc, #160]	; (800dd10 <tcp_output_control_segment+0xbc>)
 800dc70:	4828      	ldr	r0, [pc, #160]	; (800dd14 <tcp_output_control_segment+0xc0>)
 800dc72:	f005 fced 	bl	8013650 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f7fe faa4 	bl	800c1c8 <tcp_route>
 800dc80:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d102      	bne.n	800dc8e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dc88:	23fc      	movs	r3, #252	; 0xfc
 800dc8a:	77fb      	strb	r3, [r7, #31]
 800dc8c:	e034      	b.n	800dcf8 <tcp_output_control_segment+0xa4>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	685b      	ldr	r3, [r3, #4]
 800dc92:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	891a      	ldrh	r2, [r3, #8]
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2106      	movs	r1, #6
 800dca0:	68b8      	ldr	r0, [r7, #8]
 800dca2:	f7f8 fabf 	bl	8006224 <ip_chksum_pseudo>
 800dca6:	4603      	mov	r3, r0
 800dca8:	461a      	mov	r2, r3
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d006      	beq.n	800dcc2 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	7adb      	ldrb	r3, [r3, #11]
 800dcb8:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	7a9b      	ldrb	r3, [r3, #10]
 800dcbe:	777b      	strb	r3, [r7, #29]
 800dcc0:	e003      	b.n	800dcca <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dcc2:	23ff      	movs	r3, #255	; 0xff
 800dcc4:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 800dcca:	4b13      	ldr	r3, [pc, #76]	; (800dd18 <tcp_output_control_segment+0xc4>)
 800dccc:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	b29a      	uxth	r2, r3
 800dcd4:	4b10      	ldr	r3, [pc, #64]	; (800dd18 <tcp_output_control_segment+0xc4>)
 800dcd6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dcda:	7fba      	ldrb	r2, [r7, #30]
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	9302      	str	r3, [sp, #8]
 800dce0:	2306      	movs	r3, #6
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	7f7b      	ldrb	r3, [r7, #29]
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	4613      	mov	r3, r2
 800dcea:	683a      	ldr	r2, [r7, #0]
 800dcec:	6879      	ldr	r1, [r7, #4]
 800dcee:	68b8      	ldr	r0, [r7, #8]
 800dcf0:	f004 faa2 	bl	8012238 <ip4_output_if>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dcf8:	68b8      	ldr	r0, [r7, #8]
 800dcfa:	f7f9 fdc1 	bl	8007880 <pbuf_free>
  return err;
 800dcfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3720      	adds	r7, #32
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	080162d8 	.word	0x080162d8
 800dd10:	08016a18 	.word	0x08016a18
 800dd14:	0801632c 	.word	0x0801632c
 800dd18:	20007a4c 	.word	0x20007a4c

0800dd1c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dd1c:	b590      	push	{r4, r7, lr}
 800dd1e:	b08b      	sub	sp, #44	; 0x2c
 800dd20:	af04      	add	r7, sp, #16
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
 800dd28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <tcp_rst+0x22>
 800dd30:	4b1f      	ldr	r3, [pc, #124]	; (800ddb0 <tcp_rst+0x94>)
 800dd32:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dd36:	491f      	ldr	r1, [pc, #124]	; (800ddb4 <tcp_rst+0x98>)
 800dd38:	481f      	ldr	r0, [pc, #124]	; (800ddb8 <tcp_rst+0x9c>)
 800dd3a:	f005 fc89 	bl	8013650 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d106      	bne.n	800dd52 <tcp_rst+0x36>
 800dd44:	4b1a      	ldr	r3, [pc, #104]	; (800ddb0 <tcp_rst+0x94>)
 800dd46:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dd4a:	491c      	ldr	r1, [pc, #112]	; (800ddbc <tcp_rst+0xa0>)
 800dd4c:	481a      	ldr	r0, [pc, #104]	; (800ddb8 <tcp_rst+0x9c>)
 800dd4e:	f005 fc7f 	bl	8013650 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dd52:	2300      	movs	r3, #0
 800dd54:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dd56:	f246 0308 	movw	r3, #24584	; 0x6008
 800dd5a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dd5c:	7dfb      	ldrb	r3, [r7, #23]
 800dd5e:	b29c      	uxth	r4, r3
 800dd60:	68b8      	ldr	r0, [r7, #8]
 800dd62:	f7f8 f8d8 	bl	8005f16 <lwip_htonl>
 800dd66:	4602      	mov	r2, r0
 800dd68:	8abb      	ldrh	r3, [r7, #20]
 800dd6a:	9303      	str	r3, [sp, #12]
 800dd6c:	2314      	movs	r3, #20
 800dd6e:	9302      	str	r3, [sp, #8]
 800dd70:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dd72:	9301      	str	r3, [sp, #4]
 800dd74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7ff fe78 	bl	800da74 <tcp_output_alloc_header_common>
 800dd84:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00c      	beq.n	800dda6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd8c:	7dfb      	ldrb	r3, [r7, #23]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	6939      	ldr	r1, [r7, #16]
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7ff ff1e 	bl	800dbd4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	6939      	ldr	r1, [r7, #16]
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7ff ff58 	bl	800dc54 <tcp_output_control_segment>
 800dda4:	e000      	b.n	800dda8 <tcp_rst+0x8c>
    return;
 800dda6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dda8:	371c      	adds	r7, #28
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd90      	pop	{r4, r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	080162d8 	.word	0x080162d8
 800ddb4:	08016a44 	.word	0x08016a44
 800ddb8:	0801632c 	.word	0x0801632c
 800ddbc:	08016a60 	.word	0x08016a60

0800ddc0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ddc0:	b590      	push	{r4, r7, lr}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ddc8:	2300      	movs	r3, #0
 800ddca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d106      	bne.n	800dde4 <tcp_send_empty_ack+0x24>
 800ddd6:	4b28      	ldr	r3, [pc, #160]	; (800de78 <tcp_send_empty_ack+0xb8>)
 800ddd8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dddc:	4927      	ldr	r1, [pc, #156]	; (800de7c <tcp_send_empty_ack+0xbc>)
 800ddde:	4828      	ldr	r0, [pc, #160]	; (800de80 <tcp_send_empty_ack+0xc0>)
 800dde0:	f005 fc36 	bl	8013650 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dde4:	7dfb      	ldrb	r3, [r7, #23]
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	f003 0304 	and.w	r3, r3, #4
 800ddee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ddf0:	7d7b      	ldrb	r3, [r7, #21]
 800ddf2:	b29c      	uxth	r4, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7f8 f88c 	bl	8005f16 <lwip_htonl>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2200      	movs	r2, #0
 800de02:	4621      	mov	r1, r4
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff fea7 	bl	800db58 <tcp_output_alloc_header>
 800de0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d109      	bne.n	800de26 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	8b5b      	ldrh	r3, [r3, #26]
 800de16:	f043 0303 	orr.w	r3, r3, #3
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800de20:	f06f 0301 	mvn.w	r3, #1
 800de24:	e023      	b.n	800de6e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800de26:	7dbb      	ldrb	r3, [r7, #22]
 800de28:	7dfa      	ldrb	r2, [r7, #23]
 800de2a:	6939      	ldr	r1, [r7, #16]
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7ff fed1 	bl	800dbd4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	3304      	adds	r3, #4
 800de38:	6939      	ldr	r1, [r7, #16]
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff ff0a 	bl	800dc54 <tcp_output_control_segment>
 800de40:	4603      	mov	r3, r0
 800de42:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800de44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d007      	beq.n	800de5c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	8b5b      	ldrh	r3, [r3, #26]
 800de50:	f043 0303 	orr.w	r3, r3, #3
 800de54:	b29a      	uxth	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	835a      	strh	r2, [r3, #26]
 800de5a:	e006      	b.n	800de6a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	8b5b      	ldrh	r3, [r3, #26]
 800de60:	f023 0303 	bic.w	r3, r3, #3
 800de64:	b29a      	uxth	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800de6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	bd90      	pop	{r4, r7, pc}
 800de76:	bf00      	nop
 800de78:	080162d8 	.word	0x080162d8
 800de7c:	08016a7c 	.word	0x08016a7c
 800de80:	0801632c 	.word	0x0801632c

0800de84 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800de84:	b590      	push	{r4, r7, lr}
 800de86:	b087      	sub	sp, #28
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de8c:	2300      	movs	r3, #0
 800de8e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <tcp_keepalive+0x20>
 800de96:	4b18      	ldr	r3, [pc, #96]	; (800def8 <tcp_keepalive+0x74>)
 800de98:	f640 0224 	movw	r2, #2084	; 0x824
 800de9c:	4917      	ldr	r1, [pc, #92]	; (800defc <tcp_keepalive+0x78>)
 800de9e:	4818      	ldr	r0, [pc, #96]	; (800df00 <tcp_keepalive+0x7c>)
 800dea0:	f005 fbd6 	bl	8013650 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dea4:	7dfb      	ldrb	r3, [r7, #23]
 800dea6:	b29c      	uxth	r4, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deac:	3b01      	subs	r3, #1
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f8 f831 	bl	8005f16 <lwip_htonl>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2200      	movs	r2, #0
 800deb8:	4621      	mov	r1, r4
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff fe4c 	bl	800db58 <tcp_output_alloc_header>
 800dec0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d102      	bne.n	800dece <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800dec8:	f04f 33ff 	mov.w	r3, #4294967295
 800decc:	e010      	b.n	800def0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	2200      	movs	r2, #0
 800ded2:	6939      	ldr	r1, [r7, #16]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f7ff fe7d 	bl	800dbd4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3304      	adds	r3, #4
 800dee0:	6939      	ldr	r1, [r7, #16]
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7ff feb6 	bl	800dc54 <tcp_output_control_segment>
 800dee8:	4603      	mov	r3, r0
 800deea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800deec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800def0:	4618      	mov	r0, r3
 800def2:	371c      	adds	r7, #28
 800def4:	46bd      	mov	sp, r7
 800def6:	bd90      	pop	{r4, r7, pc}
 800def8:	080162d8 	.word	0x080162d8
 800defc:	08016a9c 	.word	0x08016a9c
 800df00:	0801632c 	.word	0x0801632c

0800df04 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800df04:	b590      	push	{r4, r7, lr}
 800df06:	b08b      	sub	sp, #44	; 0x2c
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800df0c:	2300      	movs	r3, #0
 800df0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d106      	bne.n	800df26 <tcp_zero_window_probe+0x22>
 800df18:	4b4c      	ldr	r3, [pc, #304]	; (800e04c <tcp_zero_window_probe+0x148>)
 800df1a:	f640 024f 	movw	r2, #2127	; 0x84f
 800df1e:	494c      	ldr	r1, [pc, #304]	; (800e050 <tcp_zero_window_probe+0x14c>)
 800df20:	484c      	ldr	r0, [pc, #304]	; (800e054 <tcp_zero_window_probe+0x150>)
 800df22:	f005 fb95 	bl	8013650 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df2a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d101      	bne.n	800df36 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	e086      	b.n	800e044 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df3c:	2bff      	cmp	r3, #255	; 0xff
 800df3e:	d007      	beq.n	800df50 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800df46:	3301      	adds	r3, #1
 800df48:	b2da      	uxtb	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800df50:	6a3b      	ldr	r3, [r7, #32]
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	899b      	ldrh	r3, [r3, #12]
 800df56:	b29b      	uxth	r3, r3
 800df58:	4618      	mov	r0, r3
 800df5a:	f7f7 ffc7 	bl	8005eec <lwip_htons>
 800df5e:	4603      	mov	r3, r0
 800df60:	b2db      	uxtb	r3, r3
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	2b00      	cmp	r3, #0
 800df68:	d005      	beq.n	800df76 <tcp_zero_window_probe+0x72>
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	891b      	ldrh	r3, [r3, #8]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d101      	bne.n	800df76 <tcp_zero_window_probe+0x72>
 800df72:	2301      	movs	r3, #1
 800df74:	e000      	b.n	800df78 <tcp_zero_window_probe+0x74>
 800df76:	2300      	movs	r3, #0
 800df78:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800df7a:	7ffb      	ldrb	r3, [r7, #31]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bf0c      	ite	eq
 800df80:	2301      	moveq	r3, #1
 800df82:	2300      	movne	r3, #0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800df88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df8c:	b299      	uxth	r1, r3
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	8bba      	ldrh	r2, [r7, #28]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f7ff fdde 	bl	800db58 <tcp_output_alloc_header>
 800df9c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d102      	bne.n	800dfaa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dfa4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa8:	e04c      	b.n	800e044 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800dfb0:	7ffb      	ldrb	r3, [r7, #31]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d011      	beq.n	800dfda <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	899b      	ldrh	r3, [r3, #12]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	b21b      	sxth	r3, r3
 800dfbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dfc2:	b21c      	sxth	r4, r3
 800dfc4:	2011      	movs	r0, #17
 800dfc6:	f7f7 ff91 	bl	8005eec <lwip_htons>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	b21b      	sxth	r3, r3
 800dfce:	4323      	orrs	r3, r4
 800dfd0:	b21b      	sxth	r3, r3
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	819a      	strh	r2, [r3, #12]
 800dfd8:	e010      	b.n	800dffc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	3314      	adds	r3, #20
 800dfe0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800dfe2:	6a3b      	ldr	r3, [r7, #32]
 800dfe4:	6858      	ldr	r0, [r3, #4]
 800dfe6:	6a3b      	ldr	r3, [r7, #32]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	891a      	ldrh	r2, [r3, #8]
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	891b      	ldrh	r3, [r3, #8]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	2201      	movs	r2, #1
 800dff6:	6939      	ldr	r1, [r7, #16]
 800dff8:	f7f9 fe3c 	bl	8007c74 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800dffc:	6a3b      	ldr	r3, [r7, #32]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	4618      	mov	r0, r3
 800e004:	f7f7 ff87 	bl	8005f16 <lwip_htonl>
 800e008:	4603      	mov	r3, r0
 800e00a:	3301      	adds	r3, #1
 800e00c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	2b00      	cmp	r3, #0
 800e018:	da02      	bge.n	800e020 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e024:	2200      	movs	r2, #0
 800e026:	69b9      	ldr	r1, [r7, #24]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7ff fdd3 	bl	800dbd4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3304      	adds	r3, #4
 800e034:	69b9      	ldr	r1, [r7, #24]
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff fe0c 	bl	800dc54 <tcp_output_control_segment>
 800e03c:	4603      	mov	r3, r0
 800e03e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e040:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e044:	4618      	mov	r0, r3
 800e046:	372c      	adds	r7, #44	; 0x2c
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd90      	pop	{r4, r7, pc}
 800e04c:	080162d8 	.word	0x080162d8
 800e050:	08016ab8 	.word	0x08016ab8
 800e054:	0801632c 	.word	0x0801632c

0800e058 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e060:	f7f9 fefe 	bl	8007e60 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e064:	4b0a      	ldr	r3, [pc, #40]	; (800e090 <tcpip_tcp_timer+0x38>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d103      	bne.n	800e074 <tcpip_tcp_timer+0x1c>
 800e06c:	4b09      	ldr	r3, [pc, #36]	; (800e094 <tcpip_tcp_timer+0x3c>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d005      	beq.n	800e080 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e074:	2200      	movs	r2, #0
 800e076:	4908      	ldr	r1, [pc, #32]	; (800e098 <tcpip_tcp_timer+0x40>)
 800e078:	20fa      	movs	r0, #250	; 0xfa
 800e07a:	f000 f8f3 	bl	800e264 <sys_timeout>
 800e07e:	e003      	b.n	800e088 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e080:	4b06      	ldr	r3, [pc, #24]	; (800e09c <tcpip_tcp_timer+0x44>)
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]
  }
}
 800e086:	bf00      	nop
 800e088:	bf00      	nop
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	20007b28 	.word	0x20007b28
 800e094:	20007b38 	.word	0x20007b38
 800e098:	0800e059 	.word	0x0800e059
 800e09c:	200005d4 	.word	0x200005d4

0800e0a0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e0a4:	4b0a      	ldr	r3, [pc, #40]	; (800e0d0 <tcp_timer_needed+0x30>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10f      	bne.n	800e0cc <tcp_timer_needed+0x2c>
 800e0ac:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <tcp_timer_needed+0x34>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d103      	bne.n	800e0bc <tcp_timer_needed+0x1c>
 800e0b4:	4b08      	ldr	r3, [pc, #32]	; (800e0d8 <tcp_timer_needed+0x38>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d007      	beq.n	800e0cc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e0bc:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <tcp_timer_needed+0x30>)
 800e0be:	2201      	movs	r2, #1
 800e0c0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	4905      	ldr	r1, [pc, #20]	; (800e0dc <tcp_timer_needed+0x3c>)
 800e0c6:	20fa      	movs	r0, #250	; 0xfa
 800e0c8:	f000 f8cc 	bl	800e264 <sys_timeout>
  }
}
 800e0cc:	bf00      	nop
 800e0ce:	bd80      	pop	{r7, pc}
 800e0d0:	200005d4 	.word	0x200005d4
 800e0d4:	20007b28 	.word	0x20007b28
 800e0d8:	20007b38 	.word	0x20007b38
 800e0dc:	0800e059 	.word	0x0800e059

0800e0e0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e0ec:	2006      	movs	r0, #6
 800e0ee:	f7f8 fdaf 	bl	8006c50 <memp_malloc>
 800e0f2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d109      	bne.n	800e10e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d151      	bne.n	800e1a4 <sys_timeout_abs+0xc4>
 800e100:	4b2a      	ldr	r3, [pc, #168]	; (800e1ac <sys_timeout_abs+0xcc>)
 800e102:	22be      	movs	r2, #190	; 0xbe
 800e104:	492a      	ldr	r1, [pc, #168]	; (800e1b0 <sys_timeout_abs+0xd0>)
 800e106:	482b      	ldr	r0, [pc, #172]	; (800e1b4 <sys_timeout_abs+0xd4>)
 800e108:	f005 faa2 	bl	8013650 <iprintf>
    return;
 800e10c:	e04a      	b.n	800e1a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2200      	movs	r2, #0
 800e112:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e126:	4b24      	ldr	r3, [pc, #144]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d103      	bne.n	800e136 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e12e:	4a22      	ldr	r2, [pc, #136]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	6013      	str	r3, [r2, #0]
    return;
 800e134:	e037      	b.n	800e1a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	685a      	ldr	r2, [r3, #4]
 800e13a:	4b1f      	ldr	r3, [pc, #124]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	0fdb      	lsrs	r3, r3, #31
 800e144:	f003 0301 	and.w	r3, r3, #1
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d007      	beq.n	800e15e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e14e:	4b1a      	ldr	r3, [pc, #104]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e156:	4a18      	ldr	r2, [pc, #96]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	e023      	b.n	800e1a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e15e:	4b16      	ldr	r3, [pc, #88]	; (800e1b8 <sys_timeout_abs+0xd8>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	617b      	str	r3, [r7, #20]
 800e164:	e01a      	b.n	800e19c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00b      	beq.n	800e186 <sys_timeout_abs+0xa6>
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	685a      	ldr	r2, [r3, #4]
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	0fdb      	lsrs	r3, r3, #31
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b00      	cmp	r3, #0
 800e184:	d007      	beq.n	800e196 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	601a      	str	r2, [r3, #0]
        break;
 800e194:	e007      	b.n	800e1a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	617b      	str	r3, [r7, #20]
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1e1      	bne.n	800e166 <sys_timeout_abs+0x86>
 800e1a2:	e000      	b.n	800e1a6 <sys_timeout_abs+0xc6>
    return;
 800e1a4:	bf00      	nop
      }
    }
  }
}
 800e1a6:	3718      	adds	r7, #24
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	08016adc 	.word	0x08016adc
 800e1b0:	08016b10 	.word	0x08016b10
 800e1b4:	08016b50 	.word	0x08016b50
 800e1b8:	200005cc 	.word	0x200005cc

0800e1bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	4798      	blx	r3

  now = sys_now();
 800e1ce:	f7f6 fb2b 	bl	8004828 <sys_now>
 800e1d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	4b0f      	ldr	r3, [pc, #60]	; (800e218 <lwip_cyclic_timer+0x5c>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4413      	add	r3, r2
 800e1de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	0fdb      	lsrs	r3, r3, #31
 800e1e8:	f003 0301 	and.w	r3, r3, #1
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d009      	beq.n	800e206 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4907      	ldr	r1, [pc, #28]	; (800e21c <lwip_cyclic_timer+0x60>)
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7ff ff6e 	bl	800e0e0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e204:	e004      	b.n	800e210 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	4904      	ldr	r1, [pc, #16]	; (800e21c <lwip_cyclic_timer+0x60>)
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f7ff ff68 	bl	800e0e0 <sys_timeout_abs>
}
 800e210:	bf00      	nop
 800e212:	3718      	adds	r7, #24
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}
 800e218:	200005d0 	.word	0x200005d0
 800e21c:	0800e1bd 	.word	0x0800e1bd

0800e220 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e226:	2301      	movs	r3, #1
 800e228:	607b      	str	r3, [r7, #4]
 800e22a:	e00e      	b.n	800e24a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e22c:	4a0b      	ldr	r2, [pc, #44]	; (800e25c <sys_timeouts_init+0x3c>)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	00db      	lsls	r3, r3, #3
 800e238:	4a08      	ldr	r2, [pc, #32]	; (800e25c <sys_timeouts_init+0x3c>)
 800e23a:	4413      	add	r3, r2
 800e23c:	461a      	mov	r2, r3
 800e23e:	4908      	ldr	r1, [pc, #32]	; (800e260 <sys_timeouts_init+0x40>)
 800e240:	f000 f810 	bl	800e264 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	3301      	adds	r3, #1
 800e248:	607b      	str	r3, [r7, #4]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b04      	cmp	r3, #4
 800e24e:	d9ed      	bls.n	800e22c <sys_timeouts_init+0xc>
  }
}
 800e250:	bf00      	nop
 800e252:	bf00      	nop
 800e254:	3708      	adds	r7, #8
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	08041e24 	.word	0x08041e24
 800e260:	0800e1bd 	.word	0x0800e1bd

0800e264 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e276:	d306      	bcc.n	800e286 <sys_timeout+0x22>
 800e278:	4b0a      	ldr	r3, [pc, #40]	; (800e2a4 <sys_timeout+0x40>)
 800e27a:	f240 1229 	movw	r2, #297	; 0x129
 800e27e:	490a      	ldr	r1, [pc, #40]	; (800e2a8 <sys_timeout+0x44>)
 800e280:	480a      	ldr	r0, [pc, #40]	; (800e2ac <sys_timeout+0x48>)
 800e282:	f005 f9e5 	bl	8013650 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e286:	f7f6 facf 	bl	8004828 <sys_now>
 800e28a:	4602      	mov	r2, r0
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	4413      	add	r3, r2
 800e290:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	68b9      	ldr	r1, [r7, #8]
 800e296:	6978      	ldr	r0, [r7, #20]
 800e298:	f7ff ff22 	bl	800e0e0 <sys_timeout_abs>
#endif
}
 800e29c:	bf00      	nop
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	08016adc 	.word	0x08016adc
 800e2a8:	08016b78 	.word	0x08016b78
 800e2ac:	08016b50 	.word	0x08016b50

0800e2b0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e2b6:	f7f6 fab7 	bl	8004828 <sys_now>
 800e2ba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e2bc:	4b1a      	ldr	r3, [pc, #104]	; (800e328 <sys_check_timeouts+0x78>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <sys_check_timeouts+0x1a>
 800e2c6:	f7f8 ffe5 	bl	8007294 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e2ca:	4b18      	ldr	r3, [pc, #96]	; (800e32c <sys_check_timeouts+0x7c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d022      	beq.n	800e31c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	0fdb      	lsrs	r3, r3, #31
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d11a      	bne.n	800e320 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4a0f      	ldr	r2, [pc, #60]	; (800e32c <sys_check_timeouts+0x7c>)
 800e2f0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	4a0b      	ldr	r2, [pc, #44]	; (800e330 <sys_check_timeouts+0x80>)
 800e304:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e306:	68b9      	ldr	r1, [r7, #8]
 800e308:	2006      	movs	r0, #6
 800e30a:	f7f8 fce3 	bl	8006cd4 <memp_free>
    if (handler != NULL) {
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d0d3      	beq.n	800e2bc <sys_check_timeouts+0xc>
      handler(arg);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6838      	ldr	r0, [r7, #0]
 800e318:	4798      	blx	r3
  do {
 800e31a:	e7cf      	b.n	800e2bc <sys_check_timeouts+0xc>
      return;
 800e31c:	bf00      	nop
 800e31e:	e000      	b.n	800e322 <sys_check_timeouts+0x72>
      return;
 800e320:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	20007a48 	.word	0x20007a48
 800e32c:	200005cc 	.word	0x200005cc
 800e330:	200005d0 	.word	0x200005d0

0800e334 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e338:	f005 f9a2 	bl	8013680 <rand>
 800e33c:	4603      	mov	r3, r0
 800e33e:	b29b      	uxth	r3, r3
 800e340:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e344:	b29b      	uxth	r3, r3
 800e346:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	4b01      	ldr	r3, [pc, #4]	; (800e354 <udp_init+0x20>)
 800e34e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e350:	bf00      	nop
 800e352:	bd80      	pop	{r7, pc}
 800e354:	20000020 	.word	0x20000020

0800e358 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e35e:	2300      	movs	r3, #0
 800e360:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e362:	4b17      	ldr	r3, [pc, #92]	; (800e3c0 <udp_new_port+0x68>)
 800e364:	881b      	ldrh	r3, [r3, #0]
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	b291      	uxth	r1, r2
 800e36a:	4a15      	ldr	r2, [pc, #84]	; (800e3c0 <udp_new_port+0x68>)
 800e36c:	8011      	strh	r1, [r2, #0]
 800e36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e372:	4293      	cmp	r3, r2
 800e374:	d103      	bne.n	800e37e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e376:	4b12      	ldr	r3, [pc, #72]	; (800e3c0 <udp_new_port+0x68>)
 800e378:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e37c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e37e:	4b11      	ldr	r3, [pc, #68]	; (800e3c4 <udp_new_port+0x6c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	603b      	str	r3, [r7, #0]
 800e384:	e011      	b.n	800e3aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	8a5a      	ldrh	r2, [r3, #18]
 800e38a:	4b0d      	ldr	r3, [pc, #52]	; (800e3c0 <udp_new_port+0x68>)
 800e38c:	881b      	ldrh	r3, [r3, #0]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d108      	bne.n	800e3a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e392:	88fb      	ldrh	r3, [r7, #6]
 800e394:	3301      	adds	r3, #1
 800e396:	80fb      	strh	r3, [r7, #6]
 800e398:	88fb      	ldrh	r3, [r7, #6]
 800e39a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e39e:	d3e0      	bcc.n	800e362 <udp_new_port+0xa>
        return 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	e007      	b.n	800e3b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	603b      	str	r3, [r7, #0]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1ea      	bne.n	800e386 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e3b0:	4b03      	ldr	r3, [pc, #12]	; (800e3c0 <udp_new_port+0x68>)
 800e3b2:	881b      	ldrh	r3, [r3, #0]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr
 800e3c0:	20000020 	.word	0x20000020
 800e3c4:	20007b40 	.word	0x20007b40

0800e3c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d105      	bne.n	800e3e8 <udp_input_local_match+0x20>
 800e3dc:	4b27      	ldr	r3, [pc, #156]	; (800e47c <udp_input_local_match+0xb4>)
 800e3de:	2287      	movs	r2, #135	; 0x87
 800e3e0:	4927      	ldr	r1, [pc, #156]	; (800e480 <udp_input_local_match+0xb8>)
 800e3e2:	4828      	ldr	r0, [pc, #160]	; (800e484 <udp_input_local_match+0xbc>)
 800e3e4:	f005 f934 	bl	8013650 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d105      	bne.n	800e3fa <udp_input_local_match+0x32>
 800e3ee:	4b23      	ldr	r3, [pc, #140]	; (800e47c <udp_input_local_match+0xb4>)
 800e3f0:	2288      	movs	r2, #136	; 0x88
 800e3f2:	4925      	ldr	r1, [pc, #148]	; (800e488 <udp_input_local_match+0xc0>)
 800e3f4:	4823      	ldr	r0, [pc, #140]	; (800e484 <udp_input_local_match+0xbc>)
 800e3f6:	f005 f92b 	bl	8013650 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	7a1b      	ldrb	r3, [r3, #8]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00b      	beq.n	800e41a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	7a1a      	ldrb	r2, [r3, #8]
 800e406:	4b21      	ldr	r3, [pc, #132]	; (800e48c <udp_input_local_match+0xc4>)
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e40e:	3301      	adds	r3, #1
 800e410:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e412:	429a      	cmp	r2, r3
 800e414:	d001      	beq.n	800e41a <udp_input_local_match+0x52>
    return 0;
 800e416:	2300      	movs	r3, #0
 800e418:	e02b      	b.n	800e472 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d018      	beq.n	800e452 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d013      	beq.n	800e44e <udp_input_local_match+0x86>
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00f      	beq.n	800e44e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e42e:	4b17      	ldr	r3, [pc, #92]	; (800e48c <udp_input_local_match+0xc4>)
 800e430:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e436:	d00a      	beq.n	800e44e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	4b13      	ldr	r3, [pc, #76]	; (800e48c <udp_input_local_match+0xc4>)
 800e43e:	695b      	ldr	r3, [r3, #20]
 800e440:	405a      	eors	r2, r3
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	3308      	adds	r3, #8
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d110      	bne.n	800e470 <udp_input_local_match+0xa8>
          return 1;
 800e44e:	2301      	movs	r3, #1
 800e450:	e00f      	b.n	800e472 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d009      	beq.n	800e46c <udp_input_local_match+0xa4>
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <udp_input_local_match+0xa4>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681a      	ldr	r2, [r3, #0]
 800e464:	4b09      	ldr	r3, [pc, #36]	; (800e48c <udp_input_local_match+0xc4>)
 800e466:	695b      	ldr	r3, [r3, #20]
 800e468:	429a      	cmp	r2, r3
 800e46a:	d101      	bne.n	800e470 <udp_input_local_match+0xa8>
        return 1;
 800e46c:	2301      	movs	r3, #1
 800e46e:	e000      	b.n	800e472 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	08016bc4 	.word	0x08016bc4
 800e480:	08016bf4 	.word	0x08016bf4
 800e484:	08016c18 	.word	0x08016c18
 800e488:	08016c40 	.word	0x08016c40
 800e48c:	20004538 	.word	0x20004538

0800e490 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b08d      	sub	sp, #52	; 0x34
 800e494:	af02      	add	r7, sp, #8
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d105      	bne.n	800e4b0 <udp_input+0x20>
 800e4a4:	4b9f      	ldr	r3, [pc, #636]	; (800e724 <udp_input+0x294>)
 800e4a6:	22cf      	movs	r2, #207	; 0xcf
 800e4a8:	499f      	ldr	r1, [pc, #636]	; (800e728 <udp_input+0x298>)
 800e4aa:	48a0      	ldr	r0, [pc, #640]	; (800e72c <udp_input+0x29c>)
 800e4ac:	f005 f8d0 	bl	8013650 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d105      	bne.n	800e4c2 <udp_input+0x32>
 800e4b6:	4b9b      	ldr	r3, [pc, #620]	; (800e724 <udp_input+0x294>)
 800e4b8:	22d0      	movs	r2, #208	; 0xd0
 800e4ba:	499d      	ldr	r1, [pc, #628]	; (800e730 <udp_input+0x2a0>)
 800e4bc:	489b      	ldr	r0, [pc, #620]	; (800e72c <udp_input+0x29c>)
 800e4be:	f005 f8c7 	bl	8013650 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800e4c2:	4b9c      	ldr	r3, [pc, #624]	; (800e734 <udp_input+0x2a4>)
 800e4c4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	4b99      	ldr	r3, [pc, #612]	; (800e734 <udp_input+0x2a4>)
 800e4ce:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	895b      	ldrh	r3, [r3, #10]
 800e4d6:	2b07      	cmp	r3, #7
 800e4d8:	d813      	bhi.n	800e502 <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800e4da:	4b96      	ldr	r3, [pc, #600]	; (800e734 <udp_input+0x2a4>)
 800e4dc:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	4b93      	ldr	r3, [pc, #588]	; (800e734 <udp_input+0x2a4>)
 800e4e6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800e4ea:	4b92      	ldr	r3, [pc, #584]	; (800e734 <udp_input+0x2a4>)
 800e4ec:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	4b8f      	ldr	r3, [pc, #572]	; (800e734 <udp_input+0x2a4>)
 800e4f6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7f9 f9c0 	bl	8007880 <pbuf_free>
    goto end;
 800e500:	e124      	b.n	800e74c <udp_input+0x2bc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e508:	4b8b      	ldr	r3, [pc, #556]	; (800e738 <udp_input+0x2a8>)
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	4a8a      	ldr	r2, [pc, #552]	; (800e738 <udp_input+0x2a8>)
 800e50e:	6812      	ldr	r2, [r2, #0]
 800e510:	4611      	mov	r1, r2
 800e512:	4618      	mov	r0, r3
 800e514:	f003 ffe8 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 800e518:	4603      	mov	r3, r0
 800e51a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	b29b      	uxth	r3, r3
 800e522:	4618      	mov	r0, r3
 800e524:	f7f7 fce2 	bl	8005eec <lwip_htons>
 800e528:	4603      	mov	r3, r0
 800e52a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	885b      	ldrh	r3, [r3, #2]
 800e530:	b29b      	uxth	r3, r3
 800e532:	4618      	mov	r0, r3
 800e534:	f7f7 fcda 	bl	8005eec <lwip_htons>
 800e538:	4603      	mov	r3, r0
 800e53a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e53c:	2300      	movs	r3, #0
 800e53e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e540:	2300      	movs	r3, #0
 800e542:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e544:	2300      	movs	r3, #0
 800e546:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e548:	4b7c      	ldr	r3, [pc, #496]	; (800e73c <udp_input+0x2ac>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	627b      	str	r3, [r7, #36]	; 0x24
 800e54e:	e05d      	b.n	800e60c <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	8a5b      	ldrh	r3, [r3, #18]
 800e554:	89fa      	ldrh	r2, [r7, #14]
 800e556:	429a      	cmp	r2, r3
 800e558:	d153      	bne.n	800e602 <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e55a:	7cfb      	ldrb	r3, [r7, #19]
 800e55c:	461a      	mov	r2, r3
 800e55e:	6839      	ldr	r1, [r7, #0]
 800e560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e562:	f7ff ff31 	bl	800e3c8 <udp_input_local_match>
 800e566:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d04a      	beq.n	800e602 <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	7c1b      	ldrb	r3, [r3, #16]
 800e570:	f003 0304 	and.w	r3, r3, #4
 800e574:	2b00      	cmp	r3, #0
 800e576:	d11d      	bne.n	800e5b4 <udp_input+0x124>
        if (uncon_pcb == NULL) {
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d102      	bne.n	800e584 <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e580:	61fb      	str	r3, [r7, #28]
 800e582:	e017      	b.n	800e5b4 <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e584:	7cfb      	ldrb	r3, [r7, #19]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d014      	beq.n	800e5b4 <udp_input+0x124>
 800e58a:	4b6b      	ldr	r3, [pc, #428]	; (800e738 <udp_input+0x2a8>)
 800e58c:	695b      	ldr	r3, [r3, #20]
 800e58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e592:	d10f      	bne.n	800e5b4 <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	3304      	adds	r3, #4
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d008      	beq.n	800e5b4 <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d101      	bne.n	800e5b4 <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b6:	8a9b      	ldrh	r3, [r3, #20]
 800e5b8:	8a3a      	ldrh	r2, [r7, #16]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d121      	bne.n	800e602 <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d005      	beq.n	800e5d2 <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	685a      	ldr	r2, [r3, #4]
 800e5ca:	4b5b      	ldr	r3, [pc, #364]	; (800e738 <udp_input+0x2a8>)
 800e5cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d117      	bne.n	800e602 <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e5d2:	6a3b      	ldr	r3, [r7, #32]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00b      	beq.n	800e5f0 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	68da      	ldr	r2, [r3, #12]
 800e5dc:	6a3b      	ldr	r3, [r7, #32]
 800e5de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e5e0:	4b56      	ldr	r3, [pc, #344]	; (800e73c <udp_input+0x2ac>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e5e8:	4a54      	ldr	r2, [pc, #336]	; (800e73c <udp_input+0x2ac>)
 800e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e5ee:	e010      	b.n	800e612 <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 800e5f0:	4b50      	ldr	r3, [pc, #320]	; (800e734 <udp_input+0x2a4>)
 800e5f2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	4b4e      	ldr	r3, [pc, #312]	; (800e734 <udp_input+0x2a4>)
 800e5fc:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800e600:	e007      	b.n	800e612 <udp_input+0x182>
      }
    }

    prev = pcb;
 800e602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e604:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	627b      	str	r3, [r7, #36]	; 0x24
 800e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d19e      	bne.n	800e550 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	2b00      	cmp	r3, #0
 800e616:	d101      	bne.n	800e61c <udp_input+0x18c>
    pcb = uncon_pcb;
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d002      	beq.n	800e628 <udp_input+0x198>
    for_us = 1;
 800e622:	2301      	movs	r3, #1
 800e624:	76fb      	strb	r3, [r7, #27]
 800e626:	e00a      	b.n	800e63e <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	3304      	adds	r3, #4
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	4b42      	ldr	r3, [pc, #264]	; (800e738 <udp_input+0x2a8>)
 800e630:	695b      	ldr	r3, [r3, #20]
 800e632:	429a      	cmp	r2, r3
 800e634:	bf0c      	ite	eq
 800e636:	2301      	moveq	r3, #1
 800e638:	2300      	movne	r3, #0
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e63e:	7efb      	ldrb	r3, [r7, #27]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d06a      	beq.n	800e71a <udp_input+0x28a>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	88db      	ldrh	r3, [r3, #6]
 800e648:	b29b      	uxth	r3, r3
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00b      	beq.n	800e666 <udp_input+0x1d6>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	891a      	ldrh	r2, [r3, #8]
 800e652:	4b3b      	ldr	r3, [pc, #236]	; (800e740 <udp_input+0x2b0>)
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	4b3b      	ldr	r3, [pc, #236]	; (800e744 <udp_input+0x2b4>)
 800e658:	2111      	movs	r1, #17
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f7f7 fde2 	bl	8006224 <ip_chksum_pseudo>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d173      	bne.n	800e74e <udp_input+0x2be>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e666:	2108      	movs	r1, #8
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7f9 f883 	bl	8007774 <pbuf_remove_header>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d012      	beq.n	800e69a <udp_input+0x20a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e674:	4b2b      	ldr	r3, [pc, #172]	; (800e724 <udp_input+0x294>)
 800e676:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e67a:	4933      	ldr	r1, [pc, #204]	; (800e748 <udp_input+0x2b8>)
 800e67c:	482b      	ldr	r0, [pc, #172]	; (800e72c <udp_input+0x29c>)
 800e67e:	f004 ffe7 	bl	8013650 <iprintf>
      UDP_STATS_INC(udp.drop);
 800e682:	4b2c      	ldr	r3, [pc, #176]	; (800e734 <udp_input+0x2a4>)
 800e684:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e688:	3301      	adds	r3, #1
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	4b29      	ldr	r3, [pc, #164]	; (800e734 <udp_input+0x2a4>)
 800e68e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7f9 f8f4 	bl	8007880 <pbuf_free>
      goto end;
 800e698:	e058      	b.n	800e74c <udp_input+0x2bc>
    }

    if (pcb != NULL) {
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d012      	beq.n	800e6c6 <udp_input+0x236>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	699b      	ldr	r3, [r3, #24]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00a      	beq.n	800e6be <udp_input+0x22e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	699c      	ldr	r4, [r3, #24]
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ae:	69d8      	ldr	r0, [r3, #28]
 800e6b0:	8a3b      	ldrh	r3, [r7, #16]
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	4b23      	ldr	r3, [pc, #140]	; (800e744 <udp_input+0x2b4>)
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e6bc:	e05b      	b.n	800e776 <udp_input+0x2e6>
        pbuf_free(p);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f7f9 f8de 	bl	8007880 <pbuf_free>
        goto end;
 800e6c4:	e042      	b.n	800e74c <udp_input+0x2bc>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e6c6:	7cfb      	ldrb	r3, [r7, #19]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d112      	bne.n	800e6f2 <udp_input+0x262>
 800e6cc:	4b1a      	ldr	r3, [pc, #104]	; (800e738 <udp_input+0x2a8>)
 800e6ce:	695b      	ldr	r3, [r3, #20]
 800e6d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6d4:	2be0      	cmp	r3, #224	; 0xe0
 800e6d6:	d00c      	beq.n	800e6f2 <udp_input+0x262>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e6d8:	4b17      	ldr	r3, [pc, #92]	; (800e738 <udp_input+0x2a8>)
 800e6da:	899b      	ldrh	r3, [r3, #12]
 800e6dc:	3308      	adds	r3, #8
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	b21b      	sxth	r3, r3
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7f9 f8b8 	bl	800785a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e6ea:	2103      	movs	r1, #3
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f003 fab3 	bl	8011c58 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800e6f2:	4b10      	ldr	r3, [pc, #64]	; (800e734 <udp_input+0x2a4>)
 800e6f4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	4b0d      	ldr	r3, [pc, #52]	; (800e734 <udp_input+0x2a4>)
 800e6fe:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800e702:	4b0c      	ldr	r3, [pc, #48]	; (800e734 <udp_input+0x2a4>)
 800e704:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e708:	3301      	adds	r3, #1
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	4b09      	ldr	r3, [pc, #36]	; (800e734 <udp_input+0x2a4>)
 800e70e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7f9 f8b4 	bl	8007880 <pbuf_free>
  return;
 800e718:	e02d      	b.n	800e776 <udp_input+0x2e6>
    pbuf_free(p);
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7f9 f8b0 	bl	8007880 <pbuf_free>
  return;
 800e720:	e029      	b.n	800e776 <udp_input+0x2e6>
 800e722:	bf00      	nop
 800e724:	08016bc4 	.word	0x08016bc4
 800e728:	08016c68 	.word	0x08016c68
 800e72c:	08016c18 	.word	0x08016c18
 800e730:	08016c80 	.word	0x08016c80
 800e734:	20007a4c 	.word	0x20007a4c
 800e738:	20004538 	.word	0x20004538
 800e73c:	20007b40 	.word	0x20007b40
 800e740:	2000454c 	.word	0x2000454c
 800e744:	20004548 	.word	0x20004548
 800e748:	08016c9c 	.word	0x08016c9c
 800e74c:	e013      	b.n	800e776 <udp_input+0x2e6>
            goto chkerr;
 800e74e:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 800e750:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <udp_input+0x2ec>)
 800e752:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800e756:	3301      	adds	r3, #1
 800e758:	b29a      	uxth	r2, r3
 800e75a:	4b08      	ldr	r3, [pc, #32]	; (800e77c <udp_input+0x2ec>)
 800e75c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
  UDP_STATS_INC(udp.drop);
 800e760:	4b06      	ldr	r3, [pc, #24]	; (800e77c <udp_input+0x2ec>)
 800e762:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e766:	3301      	adds	r3, #1
 800e768:	b29a      	uxth	r2, r3
 800e76a:	4b04      	ldr	r3, [pc, #16]	; (800e77c <udp_input+0x2ec>)
 800e76c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7f9 f885 	bl	8007880 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e776:	372c      	adds	r7, #44	; 0x2c
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd90      	pop	{r4, r7, pc}
 800e77c:	20007a4c 	.word	0x20007a4c

0800e780 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b088      	sub	sp, #32
 800e784:	af02      	add	r7, sp, #8
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
 800e78c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d109      	bne.n	800e7a8 <udp_sendto_if+0x28>
 800e794:	4b2e      	ldr	r3, [pc, #184]	; (800e850 <udp_sendto_if+0xd0>)
 800e796:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e79a:	492e      	ldr	r1, [pc, #184]	; (800e854 <udp_sendto_if+0xd4>)
 800e79c:	482e      	ldr	r0, [pc, #184]	; (800e858 <udp_sendto_if+0xd8>)
 800e79e:	f004 ff57 	bl	8013650 <iprintf>
 800e7a2:	f06f 030f 	mvn.w	r3, #15
 800e7a6:	e04f      	b.n	800e848 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d109      	bne.n	800e7c2 <udp_sendto_if+0x42>
 800e7ae:	4b28      	ldr	r3, [pc, #160]	; (800e850 <udp_sendto_if+0xd0>)
 800e7b0:	f240 2281 	movw	r2, #641	; 0x281
 800e7b4:	4929      	ldr	r1, [pc, #164]	; (800e85c <udp_sendto_if+0xdc>)
 800e7b6:	4828      	ldr	r0, [pc, #160]	; (800e858 <udp_sendto_if+0xd8>)
 800e7b8:	f004 ff4a 	bl	8013650 <iprintf>
 800e7bc:	f06f 030f 	mvn.w	r3, #15
 800e7c0:	e042      	b.n	800e848 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d109      	bne.n	800e7dc <udp_sendto_if+0x5c>
 800e7c8:	4b21      	ldr	r3, [pc, #132]	; (800e850 <udp_sendto_if+0xd0>)
 800e7ca:	f240 2282 	movw	r2, #642	; 0x282
 800e7ce:	4924      	ldr	r1, [pc, #144]	; (800e860 <udp_sendto_if+0xe0>)
 800e7d0:	4821      	ldr	r0, [pc, #132]	; (800e858 <udp_sendto_if+0xd8>)
 800e7d2:	f004 ff3d 	bl	8013650 <iprintf>
 800e7d6:	f06f 030f 	mvn.w	r3, #15
 800e7da:	e035      	b.n	800e848 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d109      	bne.n	800e7f6 <udp_sendto_if+0x76>
 800e7e2:	4b1b      	ldr	r3, [pc, #108]	; (800e850 <udp_sendto_if+0xd0>)
 800e7e4:	f240 2283 	movw	r2, #643	; 0x283
 800e7e8:	491e      	ldr	r1, [pc, #120]	; (800e864 <udp_sendto_if+0xe4>)
 800e7ea:	481b      	ldr	r0, [pc, #108]	; (800e858 <udp_sendto_if+0xd8>)
 800e7ec:	f004 ff30 	bl	8013650 <iprintf>
 800e7f0:	f06f 030f 	mvn.w	r3, #15
 800e7f4:	e028      	b.n	800e848 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d009      	beq.n	800e810 <udp_sendto_if+0x90>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d005      	beq.n	800e810 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e80c:	2be0      	cmp	r3, #224	; 0xe0
 800e80e:	d103      	bne.n	800e818 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	3304      	adds	r3, #4
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	e00b      	b.n	800e830 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	3304      	adds	r3, #4
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	429a      	cmp	r2, r3
 800e824:	d002      	beq.n	800e82c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e826:	f06f 0303 	mvn.w	r3, #3
 800e82a:	e00d      	b.n	800e848 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e830:	887a      	ldrh	r2, [r7, #2]
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	9301      	str	r3, [sp, #4]
 800e836:	6a3b      	ldr	r3, [r7, #32]
 800e838:	9300      	str	r3, [sp, #0]
 800e83a:	4613      	mov	r3, r2
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	68b9      	ldr	r1, [r7, #8]
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 f811 	bl	800e868 <udp_sendto_if_src>
 800e846:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3718      	adds	r7, #24
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	08016bc4 	.word	0x08016bc4
 800e854:	08016d38 	.word	0x08016d38
 800e858:	08016c18 	.word	0x08016c18
 800e85c:	08016d54 	.word	0x08016d54
 800e860:	08016d70 	.word	0x08016d70
 800e864:	08016d90 	.word	0x08016d90

0800e868 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08c      	sub	sp, #48	; 0x30
 800e86c:	af04      	add	r7, sp, #16
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d109      	bne.n	800e890 <udp_sendto_if_src+0x28>
 800e87c:	4b76      	ldr	r3, [pc, #472]	; (800ea58 <udp_sendto_if_src+0x1f0>)
 800e87e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e882:	4976      	ldr	r1, [pc, #472]	; (800ea5c <udp_sendto_if_src+0x1f4>)
 800e884:	4876      	ldr	r0, [pc, #472]	; (800ea60 <udp_sendto_if_src+0x1f8>)
 800e886:	f004 fee3 	bl	8013650 <iprintf>
 800e88a:	f06f 030f 	mvn.w	r3, #15
 800e88e:	e0de      	b.n	800ea4e <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d109      	bne.n	800e8aa <udp_sendto_if_src+0x42>
 800e896:	4b70      	ldr	r3, [pc, #448]	; (800ea58 <udp_sendto_if_src+0x1f0>)
 800e898:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e89c:	4971      	ldr	r1, [pc, #452]	; (800ea64 <udp_sendto_if_src+0x1fc>)
 800e89e:	4870      	ldr	r0, [pc, #448]	; (800ea60 <udp_sendto_if_src+0x1f8>)
 800e8a0:	f004 fed6 	bl	8013650 <iprintf>
 800e8a4:	f06f 030f 	mvn.w	r3, #15
 800e8a8:	e0d1      	b.n	800ea4e <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d109      	bne.n	800e8c4 <udp_sendto_if_src+0x5c>
 800e8b0:	4b69      	ldr	r3, [pc, #420]	; (800ea58 <udp_sendto_if_src+0x1f0>)
 800e8b2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e8b6:	496c      	ldr	r1, [pc, #432]	; (800ea68 <udp_sendto_if_src+0x200>)
 800e8b8:	4869      	ldr	r0, [pc, #420]	; (800ea60 <udp_sendto_if_src+0x1f8>)
 800e8ba:	f004 fec9 	bl	8013650 <iprintf>
 800e8be:	f06f 030f 	mvn.w	r3, #15
 800e8c2:	e0c4      	b.n	800ea4e <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d109      	bne.n	800e8de <udp_sendto_if_src+0x76>
 800e8ca:	4b63      	ldr	r3, [pc, #396]	; (800ea58 <udp_sendto_if_src+0x1f0>)
 800e8cc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e8d0:	4966      	ldr	r1, [pc, #408]	; (800ea6c <udp_sendto_if_src+0x204>)
 800e8d2:	4863      	ldr	r0, [pc, #396]	; (800ea60 <udp_sendto_if_src+0x1f8>)
 800e8d4:	f004 febc 	bl	8013650 <iprintf>
 800e8d8:	f06f 030f 	mvn.w	r3, #15
 800e8dc:	e0b7      	b.n	800ea4e <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d109      	bne.n	800e8f8 <udp_sendto_if_src+0x90>
 800e8e4:	4b5c      	ldr	r3, [pc, #368]	; (800ea58 <udp_sendto_if_src+0x1f0>)
 800e8e6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e8ea:	4961      	ldr	r1, [pc, #388]	; (800ea70 <udp_sendto_if_src+0x208>)
 800e8ec:	485c      	ldr	r0, [pc, #368]	; (800ea60 <udp_sendto_if_src+0x1f8>)
 800e8ee:	f004 feaf 	bl	8013650 <iprintf>
 800e8f2:	f06f 030f 	mvn.w	r3, #15
 800e8f6:	e0aa      	b.n	800ea4e <udp_sendto_if_src+0x1e6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	8a5b      	ldrh	r3, [r3, #18]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10f      	bne.n	800e920 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e900:	68f9      	ldr	r1, [r7, #12]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	8a5b      	ldrh	r3, [r3, #18]
 800e906:	461a      	mov	r2, r3
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f000 f8b7 	bl	800ea7c <udp_bind>
 800e90e:	4603      	mov	r3, r0
 800e910:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800e912:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e91a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800e91e:	e096      	b.n	800ea4e <udp_sendto_if_src+0x1e6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	891b      	ldrh	r3, [r3, #8]
 800e924:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e928:	4293      	cmp	r3, r2
 800e92a:	d902      	bls.n	800e932 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e92c:	f04f 33ff 	mov.w	r3, #4294967295
 800e930:	e08d      	b.n	800ea4e <udp_sendto_if_src+0x1e6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e932:	2108      	movs	r1, #8
 800e934:	68b8      	ldr	r0, [r7, #8]
 800e936:	f7f8 ff0d 	bl	8007754 <pbuf_add_header>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d015      	beq.n	800e96c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e940:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e944:	2108      	movs	r1, #8
 800e946:	2022      	movs	r0, #34	; 0x22
 800e948:	f7f8 fcfa 	bl	8007340 <pbuf_alloc>
 800e94c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d102      	bne.n	800e95a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e954:	f04f 33ff 	mov.w	r3, #4294967295
 800e958:	e079      	b.n	800ea4e <udp_sendto_if_src+0x1e6>
    }
    if (p->tot_len != 0) {
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	891b      	ldrh	r3, [r3, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d006      	beq.n	800e970 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e962:	68b9      	ldr	r1, [r7, #8]
 800e964:	69f8      	ldr	r0, [r7, #28]
 800e966:	f7f9 f8a3 	bl	8007ab0 <pbuf_chain>
 800e96a:	e001      	b.n	800e970 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	895b      	ldrh	r3, [r3, #10]
 800e974:	2b07      	cmp	r3, #7
 800e976:	d806      	bhi.n	800e986 <udp_sendto_if_src+0x11e>
 800e978:	4b37      	ldr	r3, [pc, #220]	; (800ea58 <udp_sendto_if_src+0x1f0>)
 800e97a:	f240 320d 	movw	r2, #781	; 0x30d
 800e97e:	493d      	ldr	r1, [pc, #244]	; (800ea74 <udp_sendto_if_src+0x20c>)
 800e980:	4837      	ldr	r0, [pc, #220]	; (800ea60 <udp_sendto_if_src+0x1f8>)
 800e982:	f004 fe65 	bl	8013650 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	8a5b      	ldrh	r3, [r3, #18]
 800e990:	4618      	mov	r0, r3
 800e992:	f7f7 faab 	bl	8005eec <lwip_htons>
 800e996:	4603      	mov	r3, r0
 800e998:	461a      	mov	r2, r3
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e99e:	887b      	ldrh	r3, [r7, #2]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7f7 faa3 	bl	8005eec <lwip_htons>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	719a      	strb	r2, [r3, #6]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	891b      	ldrh	r3, [r3, #8]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7f7 fa95 	bl	8005eec <lwip_htons>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	7c1b      	ldrb	r3, [r3, #16]
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d113      	bne.n	800e9fe <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	891a      	ldrh	r2, [r3, #8]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e0:	2111      	movs	r1, #17
 800e9e2:	69f8      	ldr	r0, [r7, #28]
 800e9e4:	f7f7 fc1e 	bl	8006224 <ip_chksum_pseudo>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800e9ec:	8b7b      	ldrh	r3, [r7, #26]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d102      	bne.n	800e9f8 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800e9f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9f6:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	8b7a      	ldrh	r2, [r7, #26]
 800e9fc:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e9fe:	2311      	movs	r3, #17
 800ea00:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	7adb      	ldrb	r3, [r3, #11]
 800ea06:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	7a9b      	ldrb	r3, [r3, #10]
 800ea0c:	7cb9      	ldrb	r1, [r7, #18]
 800ea0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea10:	9202      	str	r2, [sp, #8]
 800ea12:	7cfa      	ldrb	r2, [r7, #19]
 800ea14:	9201      	str	r2, [sp, #4]
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	460b      	mov	r3, r1
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea1e:	69f8      	ldr	r0, [r7, #28]
 800ea20:	f003 fc34 	bl	801228c <ip4_output_if_src>
 800ea24:	4603      	mov	r3, r0
 800ea26:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ea28:	69fa      	ldr	r2, [r7, #28]
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d004      	beq.n	800ea3a <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800ea30:	69f8      	ldr	r0, [r7, #28]
 800ea32:	f7f8 ff25 	bl	8007880 <pbuf_free>
    q = NULL;
 800ea36:	2300      	movs	r3, #0
 800ea38:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800ea3a:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <udp_sendto_if_src+0x210>)
 800ea3c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800ea40:	3301      	adds	r3, #1
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	4b0c      	ldr	r3, [pc, #48]	; (800ea78 <udp_sendto_if_src+0x210>)
 800ea46:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 800ea4a:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3720      	adds	r7, #32
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	08016bc4 	.word	0x08016bc4
 800ea5c:	08016db0 	.word	0x08016db0
 800ea60:	08016c18 	.word	0x08016c18
 800ea64:	08016dd0 	.word	0x08016dd0
 800ea68:	08016df0 	.word	0x08016df0
 800ea6c:	08016e14 	.word	0x08016e14
 800ea70:	08016e38 	.word	0x08016e38
 800ea74:	08016e5c 	.word	0x08016e5c
 800ea78:	20007a4c 	.word	0x20007a4c

0800ea7c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	4613      	mov	r3, r2
 800ea88:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ea90:	4b39      	ldr	r3, [pc, #228]	; (800eb78 <udp_bind+0xfc>)
 800ea92:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d109      	bne.n	800eaae <udp_bind+0x32>
 800ea9a:	4b38      	ldr	r3, [pc, #224]	; (800eb7c <udp_bind+0x100>)
 800ea9c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800eaa0:	4937      	ldr	r1, [pc, #220]	; (800eb80 <udp_bind+0x104>)
 800eaa2:	4838      	ldr	r0, [pc, #224]	; (800eb84 <udp_bind+0x108>)
 800eaa4:	f004 fdd4 	bl	8013650 <iprintf>
 800eaa8:	f06f 030f 	mvn.w	r3, #15
 800eaac:	e060      	b.n	800eb70 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eab2:	4b35      	ldr	r3, [pc, #212]	; (800eb88 <udp_bind+0x10c>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	617b      	str	r3, [r7, #20]
 800eab8:	e009      	b.n	800eace <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d102      	bne.n	800eac8 <udp_bind+0x4c>
      rebind = 1;
 800eac2:	2301      	movs	r3, #1
 800eac4:	74fb      	strb	r3, [r7, #19]
      break;
 800eac6:	e005      	b.n	800ead4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	617b      	str	r3, [r7, #20]
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1f2      	bne.n	800eaba <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ead4:	88fb      	ldrh	r3, [r7, #6]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d109      	bne.n	800eaee <udp_bind+0x72>
    port = udp_new_port();
 800eada:	f7ff fc3d 	bl	800e358 <udp_new_port>
 800eade:	4603      	mov	r3, r0
 800eae0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800eae2:	88fb      	ldrh	r3, [r7, #6]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d12c      	bne.n	800eb42 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800eae8:	f06f 0307 	mvn.w	r3, #7
 800eaec:	e040      	b.n	800eb70 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eaee:	4b26      	ldr	r3, [pc, #152]	; (800eb88 <udp_bind+0x10c>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	617b      	str	r3, [r7, #20]
 800eaf4:	e022      	b.n	800eb3c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d01b      	beq.n	800eb36 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	8a5b      	ldrh	r3, [r3, #18]
 800eb02:	88fa      	ldrh	r2, [r7, #6]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d116      	bne.n	800eb36 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d00d      	beq.n	800eb30 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00a      	beq.n	800eb30 <udp_bind+0xb4>
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d006      	beq.n	800eb30 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800eb22:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d003      	beq.n	800eb30 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800eb30:	f06f 0307 	mvn.w	r3, #7
 800eb34:	e01c      	b.n	800eb70 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	617b      	str	r3, [r7, #20]
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d1d9      	bne.n	800eaf6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <udp_bind+0xd2>
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	e000      	b.n	800eb50 <udp_bind+0xd4>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	88fa      	ldrh	r2, [r7, #6]
 800eb58:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800eb5a:	7cfb      	ldrb	r3, [r7, #19]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d106      	bne.n	800eb6e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800eb60:	4b09      	ldr	r3, [pc, #36]	; (800eb88 <udp_bind+0x10c>)
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800eb68:	4a07      	ldr	r2, [pc, #28]	; (800eb88 <udp_bind+0x10c>)
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3718      	adds	r7, #24
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	08041e4c 	.word	0x08041e4c
 800eb7c:	08016bc4 	.word	0x08016bc4
 800eb80:	08016e8c 	.word	0x08016e8c
 800eb84:	08016c18 	.word	0x08016c18
 800eb88:	20007b40 	.word	0x20007b40

0800eb8c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	4613      	mov	r3, r2
 800eb98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d109      	bne.n	800ebb4 <udp_connect+0x28>
 800eba0:	4b2c      	ldr	r3, [pc, #176]	; (800ec54 <udp_connect+0xc8>)
 800eba2:	f240 4235 	movw	r2, #1077	; 0x435
 800eba6:	492c      	ldr	r1, [pc, #176]	; (800ec58 <udp_connect+0xcc>)
 800eba8:	482c      	ldr	r0, [pc, #176]	; (800ec5c <udp_connect+0xd0>)
 800ebaa:	f004 fd51 	bl	8013650 <iprintf>
 800ebae:	f06f 030f 	mvn.w	r3, #15
 800ebb2:	e04b      	b.n	800ec4c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d109      	bne.n	800ebce <udp_connect+0x42>
 800ebba:	4b26      	ldr	r3, [pc, #152]	; (800ec54 <udp_connect+0xc8>)
 800ebbc:	f240 4236 	movw	r2, #1078	; 0x436
 800ebc0:	4927      	ldr	r1, [pc, #156]	; (800ec60 <udp_connect+0xd4>)
 800ebc2:	4826      	ldr	r0, [pc, #152]	; (800ec5c <udp_connect+0xd0>)
 800ebc4:	f004 fd44 	bl	8013650 <iprintf>
 800ebc8:	f06f 030f 	mvn.w	r3, #15
 800ebcc:	e03e      	b.n	800ec4c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	8a5b      	ldrh	r3, [r3, #18]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10f      	bne.n	800ebf6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ebd6:	68f9      	ldr	r1, [r7, #12]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	8a5b      	ldrh	r3, [r3, #18]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f7ff ff4c 	bl	800ea7c <udp_bind>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ebe8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d002      	beq.n	800ebf6 <udp_connect+0x6a>
      return err;
 800ebf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebf4:	e02a      	b.n	800ec4c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d002      	beq.n	800ec02 <udp_connect+0x76>
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	e000      	b.n	800ec04 <udp_connect+0x78>
 800ec02:	2300      	movs	r3, #0
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	88fa      	ldrh	r2, [r7, #6]
 800ec0c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	7c1b      	ldrb	r3, [r3, #16]
 800ec12:	f043 0304 	orr.w	r3, r3, #4
 800ec16:	b2da      	uxtb	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ec1c:	4b11      	ldr	r3, [pc, #68]	; (800ec64 <udp_connect+0xd8>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	617b      	str	r3, [r7, #20]
 800ec22:	e008      	b.n	800ec36 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d101      	bne.n	800ec30 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e00d      	b.n	800ec4c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	617b      	str	r3, [r7, #20]
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1f3      	bne.n	800ec24 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800ec3c:	4b09      	ldr	r3, [pc, #36]	; (800ec64 <udp_connect+0xd8>)
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800ec44:	4a07      	ldr	r2, [pc, #28]	; (800ec64 <udp_connect+0xd8>)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800ec4a:	2300      	movs	r3, #0
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3718      	adds	r7, #24
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	08016bc4 	.word	0x08016bc4
 800ec58:	08016ea4 	.word	0x08016ea4
 800ec5c:	08016c18 	.word	0x08016c18
 800ec60:	08016ec0 	.word	0x08016ec0
 800ec64:	20007b40 	.word	0x20007b40

0800ec68 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d107      	bne.n	800ec8a <udp_recv+0x22>
 800ec7a:	4b08      	ldr	r3, [pc, #32]	; (800ec9c <udp_recv+0x34>)
 800ec7c:	f240 428a 	movw	r2, #1162	; 0x48a
 800ec80:	4907      	ldr	r1, [pc, #28]	; (800eca0 <udp_recv+0x38>)
 800ec82:	4808      	ldr	r0, [pc, #32]	; (800eca4 <udp_recv+0x3c>)
 800ec84:	f004 fce4 	bl	8013650 <iprintf>
 800ec88:	e005      	b.n	800ec96 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	68ba      	ldr	r2, [r7, #8]
 800ec8e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	61da      	str	r2, [r3, #28]
}
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	08016bc4 	.word	0x08016bc4
 800eca0:	08016ef8 	.word	0x08016ef8
 800eca4:	08016c18 	.word	0x08016c18

0800eca8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d107      	bne.n	800ecc6 <udp_remove+0x1e>
 800ecb6:	4b19      	ldr	r3, [pc, #100]	; (800ed1c <udp_remove+0x74>)
 800ecb8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ecbc:	4918      	ldr	r1, [pc, #96]	; (800ed20 <udp_remove+0x78>)
 800ecbe:	4819      	ldr	r0, [pc, #100]	; (800ed24 <udp_remove+0x7c>)
 800ecc0:	f004 fcc6 	bl	8013650 <iprintf>
 800ecc4:	e026      	b.n	800ed14 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ecc6:	4b18      	ldr	r3, [pc, #96]	; (800ed28 <udp_remove+0x80>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d105      	bne.n	800ecdc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ecd0:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <udp_remove+0x80>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	4a14      	ldr	r2, [pc, #80]	; (800ed28 <udp_remove+0x80>)
 800ecd8:	6013      	str	r3, [r2, #0]
 800ecda:	e017      	b.n	800ed0c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ecdc:	4b12      	ldr	r3, [pc, #72]	; (800ed28 <udp_remove+0x80>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	60fb      	str	r3, [r7, #12]
 800ece2:	e010      	b.n	800ed06 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d009      	beq.n	800ed00 <udp_remove+0x58>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d104      	bne.n	800ed00 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	68da      	ldr	r2, [r3, #12]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	60da      	str	r2, [r3, #12]
        break;
 800ecfe:	e005      	b.n	800ed0c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	60fb      	str	r3, [r7, #12]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1eb      	bne.n	800ece4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ed0c:	6879      	ldr	r1, [r7, #4]
 800ed0e:	2000      	movs	r0, #0
 800ed10:	f7f7 ffe0 	bl	8006cd4 <memp_free>
}
 800ed14:	3710      	adds	r7, #16
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	08016bc4 	.word	0x08016bc4
 800ed20:	08016f10 	.word	0x08016f10
 800ed24:	08016c18 	.word	0x08016c18
 800ed28:	20007b40 	.word	0x20007b40

0800ed2c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ed32:	2000      	movs	r0, #0
 800ed34:	f7f7 ff8c 	bl	8006c50 <memp_malloc>
 800ed38:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d007      	beq.n	800ed50 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ed40:	2220      	movs	r2, #32
 800ed42:	2100      	movs	r1, #0
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f004 fc7b 	bl	8013640 <memset>
    pcb->ttl = UDP_TTL;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	22ff      	movs	r2, #255	; 0xff
 800ed4e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ed50:	687b      	ldr	r3, [r7, #4]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
	...

0800ed5c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d01e      	beq.n	800edaa <udp_netif_ip_addr_changed+0x4e>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d01a      	beq.n	800edaa <udp_netif_ip_addr_changed+0x4e>
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d017      	beq.n	800edaa <udp_netif_ip_addr_changed+0x4e>
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d013      	beq.n	800edaa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed82:	4b0d      	ldr	r3, [pc, #52]	; (800edb8 <udp_netif_ip_addr_changed+0x5c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	60fb      	str	r3, [r7, #12]
 800ed88:	e00c      	b.n	800eda4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d103      	bne.n	800ed9e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	60fb      	str	r3, [r7, #12]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d1ef      	bne.n	800ed8a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800edaa:	bf00      	nop
 800edac:	3714      	adds	r7, #20
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20007b40 	.word	0x20007b40

0800edbc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800edc0:	4b20      	ldr	r3, [pc, #128]	; (800ee44 <dhcp_inc_pcb_refcount+0x88>)
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d133      	bne.n	800ee30 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800edc8:	4b1f      	ldr	r3, [pc, #124]	; (800ee48 <dhcp_inc_pcb_refcount+0x8c>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d005      	beq.n	800eddc <dhcp_inc_pcb_refcount+0x20>
 800edd0:	4b1e      	ldr	r3, [pc, #120]	; (800ee4c <dhcp_inc_pcb_refcount+0x90>)
 800edd2:	22e5      	movs	r2, #229	; 0xe5
 800edd4:	491e      	ldr	r1, [pc, #120]	; (800ee50 <dhcp_inc_pcb_refcount+0x94>)
 800edd6:	481f      	ldr	r0, [pc, #124]	; (800ee54 <dhcp_inc_pcb_refcount+0x98>)
 800edd8:	f004 fc3a 	bl	8013650 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800eddc:	f7ff ffa6 	bl	800ed2c <udp_new>
 800ede0:	4603      	mov	r3, r0
 800ede2:	4a19      	ldr	r2, [pc, #100]	; (800ee48 <dhcp_inc_pcb_refcount+0x8c>)
 800ede4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800ede6:	4b18      	ldr	r3, [pc, #96]	; (800ee48 <dhcp_inc_pcb_refcount+0x8c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d102      	bne.n	800edf4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800edee:	f04f 33ff 	mov.w	r3, #4294967295
 800edf2:	e024      	b.n	800ee3e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800edf4:	4b14      	ldr	r3, [pc, #80]	; (800ee48 <dhcp_inc_pcb_refcount+0x8c>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	7a5a      	ldrb	r2, [r3, #9]
 800edfa:	4b13      	ldr	r3, [pc, #76]	; (800ee48 <dhcp_inc_pcb_refcount+0x8c>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f042 0220 	orr.w	r2, r2, #32
 800ee02:	b2d2      	uxtb	r2, r2
 800ee04:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800ee06:	4b10      	ldr	r3, [pc, #64]	; (800ee48 <dhcp_inc_pcb_refcount+0x8c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2244      	movs	r2, #68	; 0x44
 800ee0c:	4912      	ldr	r1, [pc, #72]	; (800ee58 <dhcp_inc_pcb_refcount+0x9c>)
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7ff fe34 	bl	800ea7c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800ee14:	4b0c      	ldr	r3, [pc, #48]	; (800ee48 <dhcp_inc_pcb_refcount+0x8c>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2243      	movs	r2, #67	; 0x43
 800ee1a:	490f      	ldr	r1, [pc, #60]	; (800ee58 <dhcp_inc_pcb_refcount+0x9c>)
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7ff feb5 	bl	800eb8c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800ee22:	4b09      	ldr	r3, [pc, #36]	; (800ee48 <dhcp_inc_pcb_refcount+0x8c>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2200      	movs	r2, #0
 800ee28:	490c      	ldr	r1, [pc, #48]	; (800ee5c <dhcp_inc_pcb_refcount+0xa0>)
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7ff ff1c 	bl	800ec68 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800ee30:	4b04      	ldr	r3, [pc, #16]	; (800ee44 <dhcp_inc_pcb_refcount+0x88>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	3301      	adds	r3, #1
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	4b02      	ldr	r3, [pc, #8]	; (800ee44 <dhcp_inc_pcb_refcount+0x88>)
 800ee3a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	200005dc 	.word	0x200005dc
 800ee48:	200005d8 	.word	0x200005d8
 800ee4c:	08016f28 	.word	0x08016f28
 800ee50:	08016f60 	.word	0x08016f60
 800ee54:	08016f88 	.word	0x08016f88
 800ee58:	08041e4c 	.word	0x08041e4c
 800ee5c:	0801067d 	.word	0x0801067d

0800ee60 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800ee64:	4b0e      	ldr	r3, [pc, #56]	; (800eea0 <dhcp_dec_pcb_refcount+0x40>)
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d105      	bne.n	800ee78 <dhcp_dec_pcb_refcount+0x18>
 800ee6c:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <dhcp_dec_pcb_refcount+0x44>)
 800ee6e:	22ff      	movs	r2, #255	; 0xff
 800ee70:	490d      	ldr	r1, [pc, #52]	; (800eea8 <dhcp_dec_pcb_refcount+0x48>)
 800ee72:	480e      	ldr	r0, [pc, #56]	; (800eeac <dhcp_dec_pcb_refcount+0x4c>)
 800ee74:	f004 fbec 	bl	8013650 <iprintf>
  dhcp_pcb_refcount--;
 800ee78:	4b09      	ldr	r3, [pc, #36]	; (800eea0 <dhcp_dec_pcb_refcount+0x40>)
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	b2da      	uxtb	r2, r3
 800ee80:	4b07      	ldr	r3, [pc, #28]	; (800eea0 <dhcp_dec_pcb_refcount+0x40>)
 800ee82:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800ee84:	4b06      	ldr	r3, [pc, #24]	; (800eea0 <dhcp_dec_pcb_refcount+0x40>)
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d107      	bne.n	800ee9c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800ee8c:	4b08      	ldr	r3, [pc, #32]	; (800eeb0 <dhcp_dec_pcb_refcount+0x50>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff ff09 	bl	800eca8 <udp_remove>
    dhcp_pcb = NULL;
 800ee96:	4b06      	ldr	r3, [pc, #24]	; (800eeb0 <dhcp_dec_pcb_refcount+0x50>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]
  }
}
 800ee9c:	bf00      	nop
 800ee9e:	bd80      	pop	{r7, pc}
 800eea0:	200005dc 	.word	0x200005dc
 800eea4:	08016f28 	.word	0x08016f28
 800eea8:	08016fb0 	.word	0x08016fb0
 800eeac:	08016f88 	.word	0x08016f88
 800eeb0:	200005d8 	.word	0x200005d8

0800eeb4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800eec2:	210c      	movs	r1, #12
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f001 f81b 	bl	800ff00 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800eeca:	4b06      	ldr	r3, [pc, #24]	; (800eee4 <dhcp_handle_nak+0x30>)
 800eecc:	4a05      	ldr	r2, [pc, #20]	; (800eee4 <dhcp_handle_nak+0x30>)
 800eece:	4905      	ldr	r1, [pc, #20]	; (800eee4 <dhcp_handle_nak+0x30>)
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7f8 f8a1 	bl	8007018 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 fc0e 	bl	800f6f8 <dhcp_discover>
}
 800eedc:	bf00      	nop
 800eede:	3710      	adds	r7, #16
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	08041e4c 	.word	0x08041e4c

0800eee8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800eef6:	2108      	movs	r1, #8
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f001 f801 	bl	800ff00 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	331c      	adds	r3, #28
 800ef02:	2200      	movs	r2, #0
 800ef04:	4619      	mov	r1, r3
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f002 fb26 	bl	8011558 <etharp_query>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	799b      	ldrb	r3, [r3, #6]
 800ef14:	2bff      	cmp	r3, #255	; 0xff
 800ef16:	d005      	beq.n	800ef24 <dhcp_check+0x3c>
    dhcp->tries++;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	799b      	ldrb	r3, [r3, #6]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800ef24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ef28:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ef2a:	893b      	ldrh	r3, [r7, #8]
 800ef2c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ef30:	4a06      	ldr	r2, [pc, #24]	; (800ef4c <dhcp_check+0x64>)
 800ef32:	fb82 1203 	smull	r1, r2, r2, r3
 800ef36:	1152      	asrs	r2, r2, #5
 800ef38:	17db      	asrs	r3, r3, #31
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800ef42:	bf00      	nop
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	10624dd3 	.word	0x10624dd3

0800ef50 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800ef60:	4b0c      	ldr	r3, [pc, #48]	; (800ef94 <dhcp_handle_offer+0x44>)
 800ef62:	789b      	ldrb	r3, [r3, #2]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d011      	beq.n	800ef8c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	; (800ef98 <dhcp_handle_offer+0x48>)
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7f6 ffcf 	bl	8005f16 <lwip_htonl>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	691a      	ldr	r2, [r3, #16]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f000 f808 	bl	800ef9c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800ef8c:	bf00      	nop
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	20007b44 	.word	0x20007b44
 800ef98:	20007b4c 	.word	0x20007b4c

0800ef9c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800ef9c:	b5b0      	push	{r4, r5, r7, lr}
 800ef9e:	b08a      	sub	sp, #40	; 0x28
 800efa0:	af02      	add	r7, sp, #8
 800efa2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d109      	bne.n	800efbe <dhcp_select+0x22>
 800efaa:	4b71      	ldr	r3, [pc, #452]	; (800f170 <dhcp_select+0x1d4>)
 800efac:	f240 1277 	movw	r2, #375	; 0x177
 800efb0:	4970      	ldr	r1, [pc, #448]	; (800f174 <dhcp_select+0x1d8>)
 800efb2:	4871      	ldr	r0, [pc, #452]	; (800f178 <dhcp_select+0x1dc>)
 800efb4:	f004 fb4c 	bl	8013650 <iprintf>
 800efb8:	f06f 030f 	mvn.w	r3, #15
 800efbc:	e0d3      	b.n	800f166 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d109      	bne.n	800efde <dhcp_select+0x42>
 800efca:	4b69      	ldr	r3, [pc, #420]	; (800f170 <dhcp_select+0x1d4>)
 800efcc:	f240 1279 	movw	r2, #377	; 0x179
 800efd0:	496a      	ldr	r1, [pc, #424]	; (800f17c <dhcp_select+0x1e0>)
 800efd2:	4869      	ldr	r0, [pc, #420]	; (800f178 <dhcp_select+0x1dc>)
 800efd4:	f004 fb3c 	bl	8013650 <iprintf>
 800efd8:	f06f 0305 	mvn.w	r3, #5
 800efdc:	e0c3      	b.n	800f166 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800efde:	2101      	movs	r1, #1
 800efe0:	69b8      	ldr	r0, [r7, #24]
 800efe2:	f000 ff8d 	bl	800ff00 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800efe6:	f107 030c 	add.w	r3, r7, #12
 800efea:	2203      	movs	r2, #3
 800efec:	69b9      	ldr	r1, [r7, #24]
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f001 fc12 	bl	8010818 <dhcp_create_msg>
 800eff4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 8085 	beq.w	800f108 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f004:	89b8      	ldrh	r0, [r7, #12]
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f00c:	2302      	movs	r3, #2
 800f00e:	2239      	movs	r2, #57	; 0x39
 800f010:	f000 ff90 	bl	800ff34 <dhcp_option>
 800f014:	4603      	mov	r3, r0
 800f016:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f018:	89b8      	ldrh	r0, [r7, #12]
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f024:	461a      	mov	r2, r3
 800f026:	f000 ffdf 	bl	800ffe8 <dhcp_option_short>
 800f02a:	4603      	mov	r3, r0
 800f02c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f02e:	89b8      	ldrh	r0, [r7, #12]
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f036:	2304      	movs	r3, #4
 800f038:	2232      	movs	r2, #50	; 0x32
 800f03a:	f000 ff7b 	bl	800ff34 <dhcp_option>
 800f03e:	4603      	mov	r3, r0
 800f040:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f042:	89bc      	ldrh	r4, [r7, #12]
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	4618      	mov	r0, r3
 800f050:	f7f6 ff61 	bl	8005f16 <lwip_htonl>
 800f054:	4603      	mov	r3, r0
 800f056:	461a      	mov	r2, r3
 800f058:	4629      	mov	r1, r5
 800f05a:	4620      	mov	r0, r4
 800f05c:	f000 fff6 	bl	801004c <dhcp_option_long>
 800f060:	4603      	mov	r3, r0
 800f062:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f064:	89b8      	ldrh	r0, [r7, #12]
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f06c:	2304      	movs	r3, #4
 800f06e:	2236      	movs	r2, #54	; 0x36
 800f070:	f000 ff60 	bl	800ff34 <dhcp_option>
 800f074:	4603      	mov	r3, r0
 800f076:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f078:	89bc      	ldrh	r4, [r7, #12]
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	699b      	ldr	r3, [r3, #24]
 800f084:	4618      	mov	r0, r3
 800f086:	f7f6 ff46 	bl	8005f16 <lwip_htonl>
 800f08a:	4603      	mov	r3, r0
 800f08c:	461a      	mov	r2, r3
 800f08e:	4629      	mov	r1, r5
 800f090:	4620      	mov	r0, r4
 800f092:	f000 ffdb 	bl	801004c <dhcp_option_long>
 800f096:	4603      	mov	r3, r0
 800f098:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f09a:	89b8      	ldrh	r0, [r7, #12]
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f0a2:	2303      	movs	r3, #3
 800f0a4:	2237      	movs	r2, #55	; 0x37
 800f0a6:	f000 ff45 	bl	800ff34 <dhcp_option>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	77bb      	strb	r3, [r7, #30]
 800f0b2:	e00e      	b.n	800f0d2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f0b4:	89b8      	ldrh	r0, [r7, #12]
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f0bc:	7fbb      	ldrb	r3, [r7, #30]
 800f0be:	4a30      	ldr	r2, [pc, #192]	; (800f180 <dhcp_select+0x1e4>)
 800f0c0:	5cd3      	ldrb	r3, [r2, r3]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	f000 ff6a 	bl	800ff9c <dhcp_option_byte>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f0cc:	7fbb      	ldrb	r3, [r7, #30]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	77bb      	strb	r3, [r7, #30]
 800f0d2:	7fbb      	ldrb	r3, [r7, #30]
 800f0d4:	2b02      	cmp	r3, #2
 800f0d6:	d9ed      	bls.n	800f0b4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f0d8:	89b8      	ldrh	r0, [r7, #12]
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	33f0      	adds	r3, #240	; 0xf0
 800f0de:	697a      	ldr	r2, [r7, #20]
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	f001 fc6f 	bl	80109c4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f0e6:	4b27      	ldr	r3, [pc, #156]	; (800f184 <dhcp_select+0x1e8>)
 800f0e8:	6818      	ldr	r0, [r3, #0]
 800f0ea:	4b27      	ldr	r3, [pc, #156]	; (800f188 <dhcp_select+0x1ec>)
 800f0ec:	9301      	str	r3, [sp, #4]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	9300      	str	r3, [sp, #0]
 800f0f2:	2343      	movs	r3, #67	; 0x43
 800f0f4:	4a25      	ldr	r2, [pc, #148]	; (800f18c <dhcp_select+0x1f0>)
 800f0f6:	6979      	ldr	r1, [r7, #20]
 800f0f8:	f7ff fbb6 	bl	800e868 <udp_sendto_if_src>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f100:	6978      	ldr	r0, [r7, #20]
 800f102:	f7f8 fbbd 	bl	8007880 <pbuf_free>
 800f106:	e001      	b.n	800f10c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f108:	23ff      	movs	r3, #255	; 0xff
 800f10a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	799b      	ldrb	r3, [r3, #6]
 800f110:	2bff      	cmp	r3, #255	; 0xff
 800f112:	d005      	beq.n	800f120 <dhcp_select+0x184>
    dhcp->tries++;
 800f114:	69bb      	ldr	r3, [r7, #24]
 800f116:	799b      	ldrb	r3, [r3, #6]
 800f118:	3301      	adds	r3, #1
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	799b      	ldrb	r3, [r3, #6]
 800f124:	2b05      	cmp	r3, #5
 800f126:	d80d      	bhi.n	800f144 <dhcp_select+0x1a8>
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	799b      	ldrb	r3, [r3, #6]
 800f12c:	461a      	mov	r2, r3
 800f12e:	2301      	movs	r3, #1
 800f130:	4093      	lsls	r3, r2
 800f132:	b29b      	uxth	r3, r3
 800f134:	461a      	mov	r2, r3
 800f136:	0152      	lsls	r2, r2, #5
 800f138:	1ad2      	subs	r2, r2, r3
 800f13a:	0092      	lsls	r2, r2, #2
 800f13c:	4413      	add	r3, r2
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	b29b      	uxth	r3, r3
 800f142:	e001      	b.n	800f148 <dhcp_select+0x1ac>
 800f144:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f148:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f14a:	89fb      	ldrh	r3, [r7, #14]
 800f14c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f150:	4a0f      	ldr	r2, [pc, #60]	; (800f190 <dhcp_select+0x1f4>)
 800f152:	fb82 1203 	smull	r1, r2, r2, r3
 800f156:	1152      	asrs	r2, r2, #5
 800f158:	17db      	asrs	r3, r3, #31
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f162:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3720      	adds	r7, #32
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bdb0      	pop	{r4, r5, r7, pc}
 800f16e:	bf00      	nop
 800f170:	08016f28 	.word	0x08016f28
 800f174:	08016fd4 	.word	0x08016fd4
 800f178:	08016f88 	.word	0x08016f88
 800f17c:	08016ff0 	.word	0x08016ff0
 800f180:	20000024 	.word	0x20000024
 800f184:	200005d8 	.word	0x200005d8
 800f188:	08041e4c 	.word	0x08041e4c
 800f18c:	08041e50 	.word	0x08041e50
 800f190:	10624dd3 	.word	0x10624dd3

0800f194 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800f19a:	4b27      	ldr	r3, [pc, #156]	; (800f238 <dhcp_coarse_tmr+0xa4>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	607b      	str	r3, [r7, #4]
 800f1a0:	e042      	b.n	800f228 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d039      	beq.n	800f222 <dhcp_coarse_tmr+0x8e>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	795b      	ldrb	r3, [r3, #5]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d035      	beq.n	800f222 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	8a9b      	ldrh	r3, [r3, #20]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d012      	beq.n	800f1e4 <dhcp_coarse_tmr+0x50>
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	8a5b      	ldrh	r3, [r3, #18]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	825a      	strh	r2, [r3, #18]
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	8a5a      	ldrh	r2, [r3, #18]
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	8a9b      	ldrh	r3, [r3, #20]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d106      	bne.n	800f1e4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 fdf8 	bl	800fdcc <dhcp_release_and_stop>
        dhcp_start(netif);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f96b 	bl	800f4b8 <dhcp_start>
 800f1e2:	e01e      	b.n	800f222 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	8a1b      	ldrh	r3, [r3, #16]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d00b      	beq.n	800f204 <dhcp_coarse_tmr+0x70>
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	8a1b      	ldrh	r3, [r3, #16]
 800f1f0:	1e5a      	subs	r2, r3, #1
 800f1f2:	b291      	uxth	r1, r2
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	8211      	strh	r1, [r2, #16]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d103      	bne.n	800f204 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f8c7 	bl	800f390 <dhcp_t2_timeout>
 800f202:	e00e      	b.n	800f222 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	89db      	ldrh	r3, [r3, #14]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00a      	beq.n	800f222 <dhcp_coarse_tmr+0x8e>
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	89db      	ldrh	r3, [r3, #14]
 800f210:	1e5a      	subs	r2, r3, #1
 800f212:	b291      	uxth	r1, r2
 800f214:	683a      	ldr	r2, [r7, #0]
 800f216:	81d1      	strh	r1, [r2, #14]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d102      	bne.n	800f222 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 f888 	bl	800f332 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	607b      	str	r3, [r7, #4]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d1b9      	bne.n	800f1a2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800f22e:	bf00      	nop
 800f230:	bf00      	nop
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	20007a40 	.word	0x20007a40

0800f23c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800f242:	4b16      	ldr	r3, [pc, #88]	; (800f29c <dhcp_fine_tmr+0x60>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	607b      	str	r3, [r7, #4]
 800f248:	e020      	b.n	800f28c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f24e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d017      	beq.n	800f286 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	891b      	ldrh	r3, [r3, #8]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d906      	bls.n	800f26c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	891b      	ldrh	r3, [r3, #8]
 800f262:	3b01      	subs	r3, #1
 800f264:	b29a      	uxth	r2, r3
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	811a      	strh	r2, [r3, #8]
 800f26a:	e00c      	b.n	800f286 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	891b      	ldrh	r3, [r3, #8]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d108      	bne.n	800f286 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	891b      	ldrh	r3, [r3, #8]
 800f278:	3b01      	subs	r3, #1
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 f80d 	bl	800f2a0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	607b      	str	r3, [r7, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1db      	bne.n	800f24a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800f292:	bf00      	nop
 800f294:	bf00      	nop
 800f296:	3708      	adds	r7, #8
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	20007a40 	.word	0x20007a40

0800f2a0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ac:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	795b      	ldrb	r3, [r3, #5]
 800f2b2:	2b0c      	cmp	r3, #12
 800f2b4:	d003      	beq.n	800f2be <dhcp_timeout+0x1e>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	795b      	ldrb	r3, [r3, #5]
 800f2ba:	2b06      	cmp	r3, #6
 800f2bc:	d103      	bne.n	800f2c6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 fa1a 	bl	800f6f8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f2c4:	e031      	b.n	800f32a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	795b      	ldrb	r3, [r3, #5]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d10e      	bne.n	800f2ec <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	799b      	ldrb	r3, [r3, #6]
 800f2d2:	2b05      	cmp	r3, #5
 800f2d4:	d803      	bhi.n	800f2de <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7ff fe60 	bl	800ef9c <dhcp_select>
}
 800f2dc:	e025      	b.n	800f32a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 fd74 	bl	800fdcc <dhcp_release_and_stop>
      dhcp_start(netif);
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f8e7 	bl	800f4b8 <dhcp_start>
}
 800f2ea:	e01e      	b.n	800f32a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	795b      	ldrb	r3, [r3, #5]
 800f2f0:	2b08      	cmp	r3, #8
 800f2f2:	d10b      	bne.n	800f30c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	799b      	ldrb	r3, [r3, #6]
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d803      	bhi.n	800f304 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff fdf3 	bl	800eee8 <dhcp_check>
}
 800f302:	e012      	b.n	800f32a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 fa99 	bl	800f83c <dhcp_bind>
}
 800f30a:	e00e      	b.n	800f32a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	795b      	ldrb	r3, [r3, #5]
 800f310:	2b03      	cmp	r3, #3
 800f312:	d10a      	bne.n	800f32a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	799b      	ldrb	r3, [r3, #6]
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d803      	bhi.n	800f324 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fc9f 	bl	800fc60 <dhcp_reboot>
}
 800f322:	e002      	b.n	800f32a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 f9e7 	bl	800f6f8 <dhcp_discover>
}
 800f32a:	bf00      	nop
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f332:	b580      	push	{r7, lr}
 800f334:	b084      	sub	sp, #16
 800f336:	af00      	add	r7, sp, #0
 800f338:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	795b      	ldrb	r3, [r3, #5]
 800f344:	2b01      	cmp	r3, #1
 800f346:	d007      	beq.n	800f358 <dhcp_t1_timeout+0x26>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	795b      	ldrb	r3, [r3, #5]
 800f34c:	2b0a      	cmp	r3, #10
 800f34e:	d003      	beq.n	800f358 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f354:	2b05      	cmp	r3, #5
 800f356:	d117      	bne.n	800f388 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 fb49 	bl	800f9f0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	899b      	ldrh	r3, [r3, #12]
 800f362:	461a      	mov	r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	8a5b      	ldrh	r3, [r3, #18]
 800f368:	1ad3      	subs	r3, r2, r3
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	dd0c      	ble.n	800f388 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	899b      	ldrh	r3, [r3, #12]
 800f372:	461a      	mov	r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	8a5b      	ldrh	r3, [r3, #18]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	da00      	bge.n	800f380 <dhcp_t1_timeout+0x4e>
 800f37e:	3301      	adds	r3, #1
 800f380:	105b      	asrs	r3, r3, #1
 800f382:	b29a      	uxth	r2, r3
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800f388:	bf00      	nop
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	795b      	ldrb	r3, [r3, #5]
 800f3a2:	2b01      	cmp	r3, #1
 800f3a4:	d00b      	beq.n	800f3be <dhcp_t2_timeout+0x2e>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	795b      	ldrb	r3, [r3, #5]
 800f3aa:	2b0a      	cmp	r3, #10
 800f3ac:	d007      	beq.n	800f3be <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f3b2:	2b05      	cmp	r3, #5
 800f3b4:	d003      	beq.n	800f3be <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	795b      	ldrb	r3, [r3, #5]
 800f3ba:	2b04      	cmp	r3, #4
 800f3bc:	d117      	bne.n	800f3ee <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 fbb2 	bl	800fb28 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	8a9b      	ldrh	r3, [r3, #20]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	8a5b      	ldrh	r3, [r3, #18]
 800f3ce:	1ad3      	subs	r3, r2, r3
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	dd0c      	ble.n	800f3ee <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	8a9b      	ldrh	r3, [r3, #20]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	8a5b      	ldrh	r3, [r3, #18]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	da00      	bge.n	800f3e6 <dhcp_t2_timeout+0x56>
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	105b      	asrs	r3, r3, #1
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800f3ee:	bf00      	nop
 800f3f0:	3710      	adds	r7, #16
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
	...

0800f3f8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f406:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2200      	movs	r2, #0
 800f412:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f414:	4b26      	ldr	r3, [pc, #152]	; (800f4b0 <dhcp_handle_ack+0xb8>)
 800f416:	78db      	ldrb	r3, [r3, #3]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d003      	beq.n	800f424 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f41c:	4b25      	ldr	r3, [pc, #148]	; (800f4b4 <dhcp_handle_ack+0xbc>)
 800f41e:	68da      	ldr	r2, [r3, #12]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f424:	4b22      	ldr	r3, [pc, #136]	; (800f4b0 <dhcp_handle_ack+0xb8>)
 800f426:	791b      	ldrb	r3, [r3, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d004      	beq.n	800f436 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f42c:	4b21      	ldr	r3, [pc, #132]	; (800f4b4 <dhcp_handle_ack+0xbc>)
 800f42e:	691a      	ldr	r2, [r3, #16]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	62da      	str	r2, [r3, #44]	; 0x2c
 800f434:	e004      	b.n	800f440 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f43a:	085a      	lsrs	r2, r3, #1
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f440:	4b1b      	ldr	r3, [pc, #108]	; (800f4b0 <dhcp_handle_ack+0xb8>)
 800f442:	795b      	ldrb	r3, [r3, #5]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d004      	beq.n	800f452 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f448:	4b1a      	ldr	r3, [pc, #104]	; (800f4b4 <dhcp_handle_ack+0xbc>)
 800f44a:	695a      	ldr	r2, [r3, #20]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	631a      	str	r2, [r3, #48]	; 0x30
 800f450:	e007      	b.n	800f462 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f456:	4613      	mov	r3, r2
 800f458:	00db      	lsls	r3, r3, #3
 800f45a:	1a9b      	subs	r3, r3, r2
 800f45c:	08da      	lsrs	r2, r3, #3
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	691a      	ldr	r2, [r3, #16]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f46a:	4b11      	ldr	r3, [pc, #68]	; (800f4b0 <dhcp_handle_ack+0xb8>)
 800f46c:	799b      	ldrb	r3, [r3, #6]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00b      	beq.n	800f48a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f472:	4b10      	ldr	r3, [pc, #64]	; (800f4b4 <dhcp_handle_ack+0xbc>)
 800f474:	699b      	ldr	r3, [r3, #24]
 800f476:	4618      	mov	r0, r3
 800f478:	f7f6 fd4d 	bl	8005f16 <lwip_htonl>
 800f47c:	4602      	mov	r2, r0
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2201      	movs	r2, #1
 800f486:	71da      	strb	r2, [r3, #7]
 800f488:	e002      	b.n	800f490 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2200      	movs	r2, #0
 800f48e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f490:	4b07      	ldr	r3, [pc, #28]	; (800f4b0 <dhcp_handle_ack+0xb8>)
 800f492:	79db      	ldrb	r3, [r3, #7]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d007      	beq.n	800f4a8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f498:	4b06      	ldr	r3, [pc, #24]	; (800f4b4 <dhcp_handle_ack+0xbc>)
 800f49a:	69db      	ldr	r3, [r3, #28]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f6 fd3a 	bl	8005f16 <lwip_htonl>
 800f4a2:	4602      	mov	r2, r0
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f4a8:	bf00      	nop
 800f4aa:	3710      	adds	r7, #16
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	20007b44 	.word	0x20007b44
 800f4b4:	20007b4c 	.word	0x20007b4c

0800f4b8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d109      	bne.n	800f4da <dhcp_start+0x22>
 800f4c6:	4b37      	ldr	r3, [pc, #220]	; (800f5a4 <dhcp_start+0xec>)
 800f4c8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f4cc:	4936      	ldr	r1, [pc, #216]	; (800f5a8 <dhcp_start+0xf0>)
 800f4ce:	4837      	ldr	r0, [pc, #220]	; (800f5ac <dhcp_start+0xf4>)
 800f4d0:	f004 f8be 	bl	8013650 <iprintf>
 800f4d4:	f06f 030f 	mvn.w	r3, #15
 800f4d8:	e060      	b.n	800f59c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f4e0:	f003 0301 	and.w	r3, r3, #1
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d109      	bne.n	800f4fc <dhcp_start+0x44>
 800f4e8:	4b2e      	ldr	r3, [pc, #184]	; (800f5a4 <dhcp_start+0xec>)
 800f4ea:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f4ee:	4930      	ldr	r1, [pc, #192]	; (800f5b0 <dhcp_start+0xf8>)
 800f4f0:	482e      	ldr	r0, [pc, #184]	; (800f5ac <dhcp_start+0xf4>)
 800f4f2:	f004 f8ad 	bl	8013650 <iprintf>
 800f4f6:	f06f 030f 	mvn.w	r3, #15
 800f4fa:	e04f      	b.n	800f59c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f500:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f506:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f50a:	d202      	bcs.n	800f512 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295
 800f510:	e044      	b.n	800f59c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10d      	bne.n	800f534 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f518:	2034      	movs	r0, #52	; 0x34
 800f51a:	f7f7 f9f1 	bl	8006900 <mem_malloc>
 800f51e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d102      	bne.n	800f52c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f526:	f04f 33ff 	mov.w	r3, #4294967295
 800f52a:	e037      	b.n	800f59c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	68fa      	ldr	r2, [r7, #12]
 800f530:	625a      	str	r2, [r3, #36]	; 0x24
 800f532:	e005      	b.n	800f540 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	791b      	ldrb	r3, [r3, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f53c:	f7ff fc90 	bl	800ee60 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f540:	2234      	movs	r2, #52	; 0x34
 800f542:	2100      	movs	r1, #0
 800f544:	68f8      	ldr	r0, [r7, #12]
 800f546:	f004 f87b 	bl	8013640 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f54a:	f7ff fc37 	bl	800edbc <dhcp_inc_pcb_refcount>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d002      	beq.n	800f55a <dhcp_start+0xa2>
    return ERR_MEM;
 800f554:	f04f 33ff 	mov.w	r3, #4294967295
 800f558:	e020      	b.n	800f59c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2201      	movs	r2, #1
 800f55e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f566:	f003 0304 	and.w	r3, r3, #4
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d105      	bne.n	800f57a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f56e:	2102      	movs	r1, #2
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	f000 fcc5 	bl	800ff00 <dhcp_set_state>
    return ERR_OK;
 800f576:	2300      	movs	r3, #0
 800f578:	e010      	b.n	800f59c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 f8bc 	bl	800f6f8 <dhcp_discover>
 800f580:	4603      	mov	r3, r0
 800f582:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f584:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d005      	beq.n	800f598 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fc1d 	bl	800fdcc <dhcp_release_and_stop>
    return ERR_MEM;
 800f592:	f04f 33ff 	mov.w	r3, #4294967295
 800f596:	e001      	b.n	800f59c <dhcp_start+0xe4>
  }
  return result;
 800f598:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3710      	adds	r7, #16
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	08016f28 	.word	0x08016f28
 800f5a8:	0801700c 	.word	0x0801700c
 800f5ac:	08016f88 	.word	0x08016f88
 800f5b0:	08017050 	.word	0x08017050

0800f5b4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d107      	bne.n	800f5d4 <dhcp_arp_reply+0x20>
 800f5c4:	4b0e      	ldr	r3, [pc, #56]	; (800f600 <dhcp_arp_reply+0x4c>)
 800f5c6:	f240 328b 	movw	r2, #907	; 0x38b
 800f5ca:	490e      	ldr	r1, [pc, #56]	; (800f604 <dhcp_arp_reply+0x50>)
 800f5cc:	480e      	ldr	r0, [pc, #56]	; (800f608 <dhcp_arp_reply+0x54>)
 800f5ce:	f004 f83f 	bl	8013650 <iprintf>
 800f5d2:	e012      	b.n	800f5fa <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00c      	beq.n	800f5fa <dhcp_arp_reply+0x46>
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	795b      	ldrb	r3, [r3, #5]
 800f5e4:	2b08      	cmp	r3, #8
 800f5e6:	d108      	bne.n	800f5fa <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	69db      	ldr	r3, [r3, #28]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d102      	bne.n	800f5fa <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 f809 	bl	800f60c <dhcp_decline>
    }
  }
}
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	08016f28 	.word	0x08016f28
 800f604:	0801700c 	.word	0x0801700c
 800f608:	08016f88 	.word	0x08016f88

0800f60c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f60c:	b5b0      	push	{r4, r5, r7, lr}
 800f60e:	b08a      	sub	sp, #40	; 0x28
 800f610:	af02      	add	r7, sp, #8
 800f612:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f61a:	210c      	movs	r1, #12
 800f61c:	69b8      	ldr	r0, [r7, #24]
 800f61e:	f000 fc6f 	bl	800ff00 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f622:	f107 030c 	add.w	r3, r7, #12
 800f626:	2204      	movs	r2, #4
 800f628:	69b9      	ldr	r1, [r7, #24]
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f001 f8f4 	bl	8010818 <dhcp_create_msg>
 800f630:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d035      	beq.n	800f6a4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f63e:	89b8      	ldrh	r0, [r7, #12]
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f646:	2304      	movs	r3, #4
 800f648:	2232      	movs	r2, #50	; 0x32
 800f64a:	f000 fc73 	bl	800ff34 <dhcp_option>
 800f64e:	4603      	mov	r3, r0
 800f650:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f652:	89bc      	ldrh	r4, [r7, #12]
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	69db      	ldr	r3, [r3, #28]
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f6 fc59 	bl	8005f16 <lwip_htonl>
 800f664:	4603      	mov	r3, r0
 800f666:	461a      	mov	r2, r3
 800f668:	4629      	mov	r1, r5
 800f66a:	4620      	mov	r0, r4
 800f66c:	f000 fcee 	bl	801004c <dhcp_option_long>
 800f670:	4603      	mov	r3, r0
 800f672:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f674:	89b8      	ldrh	r0, [r7, #12]
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	33f0      	adds	r3, #240	; 0xf0
 800f67a:	697a      	ldr	r2, [r7, #20]
 800f67c:	4619      	mov	r1, r3
 800f67e:	f001 f9a1 	bl	80109c4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f682:	4b19      	ldr	r3, [pc, #100]	; (800f6e8 <dhcp_decline+0xdc>)
 800f684:	6818      	ldr	r0, [r3, #0]
 800f686:	4b19      	ldr	r3, [pc, #100]	; (800f6ec <dhcp_decline+0xe0>)
 800f688:	9301      	str	r3, [sp, #4]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	9300      	str	r3, [sp, #0]
 800f68e:	2343      	movs	r3, #67	; 0x43
 800f690:	4a17      	ldr	r2, [pc, #92]	; (800f6f0 <dhcp_decline+0xe4>)
 800f692:	6979      	ldr	r1, [r7, #20]
 800f694:	f7ff f8e8 	bl	800e868 <udp_sendto_if_src>
 800f698:	4603      	mov	r3, r0
 800f69a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f69c:	6978      	ldr	r0, [r7, #20]
 800f69e:	f7f8 f8ef 	bl	8007880 <pbuf_free>
 800f6a2:	e001      	b.n	800f6a8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f6a4:	23ff      	movs	r3, #255	; 0xff
 800f6a6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	799b      	ldrb	r3, [r3, #6]
 800f6ac:	2bff      	cmp	r3, #255	; 0xff
 800f6ae:	d005      	beq.n	800f6bc <dhcp_decline+0xb0>
    dhcp->tries++;
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	799b      	ldrb	r3, [r3, #6]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	b2da      	uxtb	r2, r3
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f6bc:	f242 7310 	movw	r3, #10000	; 0x2710
 800f6c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f6c2:	89fb      	ldrh	r3, [r7, #14]
 800f6c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f6c8:	4a0a      	ldr	r2, [pc, #40]	; (800f6f4 <dhcp_decline+0xe8>)
 800f6ca:	fb82 1203 	smull	r1, r2, r2, r3
 800f6ce:	1152      	asrs	r2, r2, #5
 800f6d0:	17db      	asrs	r3, r3, #31
 800f6d2:	1ad3      	subs	r3, r2, r3
 800f6d4:	b29a      	uxth	r2, r3
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f6da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3720      	adds	r7, #32
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	200005d8 	.word	0x200005d8
 800f6ec:	08041e4c 	.word	0x08041e4c
 800f6f0:	08041e50 	.word	0x08041e50
 800f6f4:	10624dd3 	.word	0x10624dd3

0800f6f8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b08a      	sub	sp, #40	; 0x28
 800f6fc:	af02      	add	r7, sp, #8
 800f6fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f704:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f706:	2300      	movs	r3, #0
 800f708:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	2200      	movs	r2, #0
 800f70e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f710:	2106      	movs	r1, #6
 800f712:	69b8      	ldr	r0, [r7, #24]
 800f714:	f000 fbf4 	bl	800ff00 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f718:	f107 0308 	add.w	r3, r7, #8
 800f71c:	2201      	movs	r2, #1
 800f71e:	69b9      	ldr	r1, [r7, #24]
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f001 f879 	bl	8010818 <dhcp_create_msg>
 800f726:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d04b      	beq.n	800f7c6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f734:	8938      	ldrh	r0, [r7, #8]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f73c:	2302      	movs	r3, #2
 800f73e:	2239      	movs	r2, #57	; 0x39
 800f740:	f000 fbf8 	bl	800ff34 <dhcp_option>
 800f744:	4603      	mov	r3, r0
 800f746:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f748:	8938      	ldrh	r0, [r7, #8]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f754:	461a      	mov	r2, r3
 800f756:	f000 fc47 	bl	800ffe8 <dhcp_option_short>
 800f75a:	4603      	mov	r3, r0
 800f75c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f75e:	8938      	ldrh	r0, [r7, #8]
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f766:	2303      	movs	r3, #3
 800f768:	2237      	movs	r2, #55	; 0x37
 800f76a:	f000 fbe3 	bl	800ff34 <dhcp_option>
 800f76e:	4603      	mov	r3, r0
 800f770:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f772:	2300      	movs	r3, #0
 800f774:	77fb      	strb	r3, [r7, #31]
 800f776:	e00e      	b.n	800f796 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f778:	8938      	ldrh	r0, [r7, #8]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f780:	7ffb      	ldrb	r3, [r7, #31]
 800f782:	4a29      	ldr	r2, [pc, #164]	; (800f828 <dhcp_discover+0x130>)
 800f784:	5cd3      	ldrb	r3, [r2, r3]
 800f786:	461a      	mov	r2, r3
 800f788:	f000 fc08 	bl	800ff9c <dhcp_option_byte>
 800f78c:	4603      	mov	r3, r0
 800f78e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f790:	7ffb      	ldrb	r3, [r7, #31]
 800f792:	3301      	adds	r3, #1
 800f794:	77fb      	strb	r3, [r7, #31]
 800f796:	7ffb      	ldrb	r3, [r7, #31]
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d9ed      	bls.n	800f778 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f79c:	8938      	ldrh	r0, [r7, #8]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	33f0      	adds	r3, #240	; 0xf0
 800f7a2:	693a      	ldr	r2, [r7, #16]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	f001 f90d 	bl	80109c4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f7aa:	4b20      	ldr	r3, [pc, #128]	; (800f82c <dhcp_discover+0x134>)
 800f7ac:	6818      	ldr	r0, [r3, #0]
 800f7ae:	4b20      	ldr	r3, [pc, #128]	; (800f830 <dhcp_discover+0x138>)
 800f7b0:	9301      	str	r3, [sp, #4]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	9300      	str	r3, [sp, #0]
 800f7b6:	2343      	movs	r3, #67	; 0x43
 800f7b8:	4a1e      	ldr	r2, [pc, #120]	; (800f834 <dhcp_discover+0x13c>)
 800f7ba:	6939      	ldr	r1, [r7, #16]
 800f7bc:	f7ff f854 	bl	800e868 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f7c0:	6938      	ldr	r0, [r7, #16]
 800f7c2:	f7f8 f85d 	bl	8007880 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f7c6:	69bb      	ldr	r3, [r7, #24]
 800f7c8:	799b      	ldrb	r3, [r3, #6]
 800f7ca:	2bff      	cmp	r3, #255	; 0xff
 800f7cc:	d005      	beq.n	800f7da <dhcp_discover+0xe2>
    dhcp->tries++;
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	799b      	ldrb	r3, [r3, #6]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	b2da      	uxtb	r2, r3
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	799b      	ldrb	r3, [r3, #6]
 800f7de:	2b05      	cmp	r3, #5
 800f7e0:	d80d      	bhi.n	800f7fe <dhcp_discover+0x106>
 800f7e2:	69bb      	ldr	r3, [r7, #24]
 800f7e4:	799b      	ldrb	r3, [r3, #6]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	4093      	lsls	r3, r2
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	0152      	lsls	r2, r2, #5
 800f7f2:	1ad2      	subs	r2, r2, r3
 800f7f4:	0092      	lsls	r2, r2, #2
 800f7f6:	4413      	add	r3, r2
 800f7f8:	00db      	lsls	r3, r3, #3
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	e001      	b.n	800f802 <dhcp_discover+0x10a>
 800f7fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f802:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f804:	897b      	ldrh	r3, [r7, #10]
 800f806:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f80a:	4a0b      	ldr	r2, [pc, #44]	; (800f838 <dhcp_discover+0x140>)
 800f80c:	fb82 1203 	smull	r1, r2, r2, r3
 800f810:	1152      	asrs	r2, r2, #5
 800f812:	17db      	asrs	r3, r3, #31
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	b29a      	uxth	r2, r3
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f81c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f820:	4618      	mov	r0, r3
 800f822:	3720      	adds	r7, #32
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	20000024 	.word	0x20000024
 800f82c:	200005d8 	.word	0x200005d8
 800f830:	08041e4c 	.word	0x08041e4c
 800f834:	08041e50 	.word	0x08041e50
 800f838:	10624dd3 	.word	0x10624dd3

0800f83c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b088      	sub	sp, #32
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d107      	bne.n	800f85a <dhcp_bind+0x1e>
 800f84a:	4b64      	ldr	r3, [pc, #400]	; (800f9dc <dhcp_bind+0x1a0>)
 800f84c:	f240 4215 	movw	r2, #1045	; 0x415
 800f850:	4963      	ldr	r1, [pc, #396]	; (800f9e0 <dhcp_bind+0x1a4>)
 800f852:	4864      	ldr	r0, [pc, #400]	; (800f9e4 <dhcp_bind+0x1a8>)
 800f854:	f003 fefc 	bl	8013650 <iprintf>
 800f858:	e0bc      	b.n	800f9d4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f860:	69bb      	ldr	r3, [r7, #24]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d107      	bne.n	800f876 <dhcp_bind+0x3a>
 800f866:	4b5d      	ldr	r3, [pc, #372]	; (800f9dc <dhcp_bind+0x1a0>)
 800f868:	f240 4217 	movw	r2, #1047	; 0x417
 800f86c:	495e      	ldr	r1, [pc, #376]	; (800f9e8 <dhcp_bind+0x1ac>)
 800f86e:	485d      	ldr	r0, [pc, #372]	; (800f9e4 <dhcp_bind+0x1a8>)
 800f870:	f003 feee 	bl	8013650 <iprintf>
 800f874:	e0ae      	b.n	800f9d4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	2200      	movs	r2, #0
 800f87a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f884:	d019      	beq.n	800f8ba <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f88a:	331e      	adds	r3, #30
 800f88c:	4a57      	ldr	r2, [pc, #348]	; (800f9ec <dhcp_bind+0x1b0>)
 800f88e:	fba2 2303 	umull	r2, r3, r2, r3
 800f892:	095b      	lsrs	r3, r3, #5
 800f894:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f89c:	d302      	bcc.n	800f8a4 <dhcp_bind+0x68>
      timeout = 0xffff;
 800f89e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8a2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	8a9b      	ldrh	r3, [r3, #20]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d102      	bne.n	800f8ba <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c2:	d01d      	beq.n	800f900 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c8:	331e      	adds	r3, #30
 800f8ca:	4a48      	ldr	r2, [pc, #288]	; (800f9ec <dhcp_bind+0x1b0>)
 800f8cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f8d0:	095b      	lsrs	r3, r3, #5
 800f8d2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8da:	d302      	bcc.n	800f8e2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f8dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8e0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	69bb      	ldr	r3, [r7, #24]
 800f8e8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f8ea:	69bb      	ldr	r3, [r7, #24]
 800f8ec:	895b      	ldrh	r3, [r3, #10]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d102      	bne.n	800f8f8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	895a      	ldrh	r2, [r3, #10]
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f908:	d01d      	beq.n	800f946 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f90e:	331e      	adds	r3, #30
 800f910:	4a36      	ldr	r2, [pc, #216]	; (800f9ec <dhcp_bind+0x1b0>)
 800f912:	fba2 2303 	umull	r2, r3, r2, r3
 800f916:	095b      	lsrs	r3, r3, #5
 800f918:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f91a:	69fb      	ldr	r3, [r7, #28]
 800f91c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f920:	d302      	bcc.n	800f928 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f926:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	899b      	ldrh	r3, [r3, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d102      	bne.n	800f93e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	2201      	movs	r2, #1
 800f93c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f93e:	69bb      	ldr	r3, [r7, #24]
 800f940:	899a      	ldrh	r2, [r3, #12]
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	895a      	ldrh	r2, [r3, #10]
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	899b      	ldrh	r3, [r3, #12]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d306      	bcc.n	800f960 <dhcp_bind+0x124>
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	899b      	ldrh	r3, [r3, #12]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d002      	beq.n	800f960 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	2200      	movs	r2, #0
 800f95e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	79db      	ldrb	r3, [r3, #7]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d003      	beq.n	800f970 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f968:	69bb      	ldr	r3, [r7, #24]
 800f96a:	6a1b      	ldr	r3, [r3, #32]
 800f96c:	613b      	str	r3, [r7, #16]
 800f96e:	e014      	b.n	800f99a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	331c      	adds	r3, #28
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	db02      	blt.n	800f986 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f980:	23ff      	movs	r3, #255	; 0xff
 800f982:	613b      	str	r3, [r7, #16]
 800f984:	e009      	b.n	800f99a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f986:	7dfb      	ldrb	r3, [r7, #23]
 800f988:	2bbf      	cmp	r3, #191	; 0xbf
 800f98a:	d903      	bls.n	800f994 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f98c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f990:	613b      	str	r3, [r7, #16]
 800f992:	e002      	b.n	800f99a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f998:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d108      	bne.n	800f9b8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	69da      	ldr	r2, [r3, #28]
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f9b8:	210a      	movs	r1, #10
 800f9ba:	69b8      	ldr	r0, [r7, #24]
 800f9bc:	f000 faa0 	bl	800ff00 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f9c0:	69bb      	ldr	r3, [r7, #24]
 800f9c2:	f103 011c 	add.w	r1, r3, #28
 800f9c6:	f107 030c 	add.w	r3, r7, #12
 800f9ca:	f107 0210 	add.w	r2, r7, #16
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7f7 fb22 	bl	8007018 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f9d4:	3720      	adds	r7, #32
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	08016f28 	.word	0x08016f28
 800f9e0:	08017088 	.word	0x08017088
 800f9e4:	08016f88 	.word	0x08016f88
 800f9e8:	080170a4 	.word	0x080170a4
 800f9ec:	88888889 	.word	0x88888889

0800f9f0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b08a      	sub	sp, #40	; 0x28
 800f9f4:	af02      	add	r7, sp, #8
 800f9f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f9fe:	2105      	movs	r1, #5
 800fa00:	69b8      	ldr	r0, [r7, #24]
 800fa02:	f000 fa7d 	bl	800ff00 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fa06:	f107 030c 	add.w	r3, r7, #12
 800fa0a:	2203      	movs	r2, #3
 800fa0c:	69b9      	ldr	r1, [r7, #24]
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 ff02 	bl	8010818 <dhcp_create_msg>
 800fa14:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d04e      	beq.n	800faba <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fa22:	89b8      	ldrh	r0, [r7, #12]
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa2a:	2302      	movs	r3, #2
 800fa2c:	2239      	movs	r2, #57	; 0x39
 800fa2e:	f000 fa81 	bl	800ff34 <dhcp_option>
 800fa32:	4603      	mov	r3, r0
 800fa34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fa36:	89b8      	ldrh	r0, [r7, #12]
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa42:	461a      	mov	r2, r3
 800fa44:	f000 fad0 	bl	800ffe8 <dhcp_option_short>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fa4c:	89b8      	ldrh	r0, [r7, #12]
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa54:	2303      	movs	r3, #3
 800fa56:	2237      	movs	r2, #55	; 0x37
 800fa58:	f000 fa6c 	bl	800ff34 <dhcp_option>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fa60:	2300      	movs	r3, #0
 800fa62:	77bb      	strb	r3, [r7, #30]
 800fa64:	e00e      	b.n	800fa84 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fa66:	89b8      	ldrh	r0, [r7, #12]
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa6e:	7fbb      	ldrb	r3, [r7, #30]
 800fa70:	4a2a      	ldr	r2, [pc, #168]	; (800fb1c <dhcp_renew+0x12c>)
 800fa72:	5cd3      	ldrb	r3, [r2, r3]
 800fa74:	461a      	mov	r2, r3
 800fa76:	f000 fa91 	bl	800ff9c <dhcp_option_byte>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fa7e:	7fbb      	ldrb	r3, [r7, #30]
 800fa80:	3301      	adds	r3, #1
 800fa82:	77bb      	strb	r3, [r7, #30]
 800fa84:	7fbb      	ldrb	r3, [r7, #30]
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d9ed      	bls.n	800fa66 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fa8a:	89b8      	ldrh	r0, [r7, #12]
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	33f0      	adds	r3, #240	; 0xf0
 800fa90:	697a      	ldr	r2, [r7, #20]
 800fa92:	4619      	mov	r1, r3
 800fa94:	f000 ff96 	bl	80109c4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fa98:	4b21      	ldr	r3, [pc, #132]	; (800fb20 <dhcp_renew+0x130>)
 800fa9a:	6818      	ldr	r0, [r3, #0]
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	f103 0218 	add.w	r2, r3, #24
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	2343      	movs	r3, #67	; 0x43
 800faa8:	6979      	ldr	r1, [r7, #20]
 800faaa:	f7fe fe69 	bl	800e780 <udp_sendto_if>
 800faae:	4603      	mov	r3, r0
 800fab0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fab2:	6978      	ldr	r0, [r7, #20]
 800fab4:	f7f7 fee4 	bl	8007880 <pbuf_free>
 800fab8:	e001      	b.n	800fabe <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800faba:	23ff      	movs	r3, #255	; 0xff
 800fabc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fabe:	69bb      	ldr	r3, [r7, #24]
 800fac0:	799b      	ldrb	r3, [r3, #6]
 800fac2:	2bff      	cmp	r3, #255	; 0xff
 800fac4:	d005      	beq.n	800fad2 <dhcp_renew+0xe2>
    dhcp->tries++;
 800fac6:	69bb      	ldr	r3, [r7, #24]
 800fac8:	799b      	ldrb	r3, [r3, #6]
 800faca:	3301      	adds	r3, #1
 800facc:	b2da      	uxtb	r2, r3
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	799b      	ldrb	r3, [r3, #6]
 800fad6:	2b09      	cmp	r3, #9
 800fad8:	d80a      	bhi.n	800faf0 <dhcp_renew+0x100>
 800fada:	69bb      	ldr	r3, [r7, #24]
 800fadc:	799b      	ldrb	r3, [r3, #6]
 800fade:	b29b      	uxth	r3, r3
 800fae0:	461a      	mov	r2, r3
 800fae2:	0152      	lsls	r2, r2, #5
 800fae4:	1ad2      	subs	r2, r2, r3
 800fae6:	0092      	lsls	r2, r2, #2
 800fae8:	4413      	add	r3, r2
 800faea:	011b      	lsls	r3, r3, #4
 800faec:	b29b      	uxth	r3, r3
 800faee:	e001      	b.n	800faf4 <dhcp_renew+0x104>
 800faf0:	f644 6320 	movw	r3, #20000	; 0x4e20
 800faf4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800faf6:	89fb      	ldrh	r3, [r7, #14]
 800faf8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fafc:	4a09      	ldr	r2, [pc, #36]	; (800fb24 <dhcp_renew+0x134>)
 800fafe:	fb82 1203 	smull	r1, r2, r2, r3
 800fb02:	1152      	asrs	r2, r2, #5
 800fb04:	17db      	asrs	r3, r3, #31
 800fb06:	1ad3      	subs	r3, r2, r3
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fb0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3720      	adds	r7, #32
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20000024 	.word	0x20000024
 800fb20:	200005d8 	.word	0x200005d8
 800fb24:	10624dd3 	.word	0x10624dd3

0800fb28 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08a      	sub	sp, #40	; 0x28
 800fb2c:	af02      	add	r7, sp, #8
 800fb2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb34:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800fb36:	2104      	movs	r1, #4
 800fb38:	69b8      	ldr	r0, [r7, #24]
 800fb3a:	f000 f9e1 	bl	800ff00 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fb3e:	f107 030c 	add.w	r3, r7, #12
 800fb42:	2203      	movs	r2, #3
 800fb44:	69b9      	ldr	r1, [r7, #24]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 fe66 	bl	8010818 <dhcp_create_msg>
 800fb4c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d04c      	beq.n	800fbee <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fb5a:	89b8      	ldrh	r0, [r7, #12]
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb62:	2302      	movs	r3, #2
 800fb64:	2239      	movs	r2, #57	; 0x39
 800fb66:	f000 f9e5 	bl	800ff34 <dhcp_option>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fb6e:	89b8      	ldrh	r0, [r7, #12]
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	f000 fa34 	bl	800ffe8 <dhcp_option_short>
 800fb80:	4603      	mov	r3, r0
 800fb82:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fb84:	89b8      	ldrh	r0, [r7, #12]
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb8c:	2303      	movs	r3, #3
 800fb8e:	2237      	movs	r2, #55	; 0x37
 800fb90:	f000 f9d0 	bl	800ff34 <dhcp_option>
 800fb94:	4603      	mov	r3, r0
 800fb96:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb98:	2300      	movs	r3, #0
 800fb9a:	77bb      	strb	r3, [r7, #30]
 800fb9c:	e00e      	b.n	800fbbc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fb9e:	89b8      	ldrh	r0, [r7, #12]
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fba6:	7fbb      	ldrb	r3, [r7, #30]
 800fba8:	4a29      	ldr	r2, [pc, #164]	; (800fc50 <dhcp_rebind+0x128>)
 800fbaa:	5cd3      	ldrb	r3, [r2, r3]
 800fbac:	461a      	mov	r2, r3
 800fbae:	f000 f9f5 	bl	800ff9c <dhcp_option_byte>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fbb6:	7fbb      	ldrb	r3, [r7, #30]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	77bb      	strb	r3, [r7, #30]
 800fbbc:	7fbb      	ldrb	r3, [r7, #30]
 800fbbe:	2b02      	cmp	r3, #2
 800fbc0:	d9ed      	bls.n	800fb9e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fbc2:	89b8      	ldrh	r0, [r7, #12]
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	33f0      	adds	r3, #240	; 0xf0
 800fbc8:	697a      	ldr	r2, [r7, #20]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	f000 fefa 	bl	80109c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fbd0:	4b20      	ldr	r3, [pc, #128]	; (800fc54 <dhcp_rebind+0x12c>)
 800fbd2:	6818      	ldr	r0, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	9300      	str	r3, [sp, #0]
 800fbd8:	2343      	movs	r3, #67	; 0x43
 800fbda:	4a1f      	ldr	r2, [pc, #124]	; (800fc58 <dhcp_rebind+0x130>)
 800fbdc:	6979      	ldr	r1, [r7, #20]
 800fbde:	f7fe fdcf 	bl	800e780 <udp_sendto_if>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fbe6:	6978      	ldr	r0, [r7, #20]
 800fbe8:	f7f7 fe4a 	bl	8007880 <pbuf_free>
 800fbec:	e001      	b.n	800fbf2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fbee:	23ff      	movs	r3, #255	; 0xff
 800fbf0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fbf2:	69bb      	ldr	r3, [r7, #24]
 800fbf4:	799b      	ldrb	r3, [r3, #6]
 800fbf6:	2bff      	cmp	r3, #255	; 0xff
 800fbf8:	d005      	beq.n	800fc06 <dhcp_rebind+0xde>
    dhcp->tries++;
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	799b      	ldrb	r3, [r3, #6]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	b2da      	uxtb	r2, r3
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	799b      	ldrb	r3, [r3, #6]
 800fc0a:	2b09      	cmp	r3, #9
 800fc0c:	d80a      	bhi.n	800fc24 <dhcp_rebind+0xfc>
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	799b      	ldrb	r3, [r3, #6]
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	461a      	mov	r2, r3
 800fc16:	0152      	lsls	r2, r2, #5
 800fc18:	1ad2      	subs	r2, r2, r3
 800fc1a:	0092      	lsls	r2, r2, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	00db      	lsls	r3, r3, #3
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	e001      	b.n	800fc28 <dhcp_rebind+0x100>
 800fc24:	f242 7310 	movw	r3, #10000	; 0x2710
 800fc28:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fc2a:	89fb      	ldrh	r3, [r7, #14]
 800fc2c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fc30:	4a0a      	ldr	r2, [pc, #40]	; (800fc5c <dhcp_rebind+0x134>)
 800fc32:	fb82 1203 	smull	r1, r2, r2, r3
 800fc36:	1152      	asrs	r2, r2, #5
 800fc38:	17db      	asrs	r3, r3, #31
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fc42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3720      	adds	r7, #32
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	20000024 	.word	0x20000024
 800fc54:	200005d8 	.word	0x200005d8
 800fc58:	08041e50 	.word	0x08041e50
 800fc5c:	10624dd3 	.word	0x10624dd3

0800fc60 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800fc60:	b5b0      	push	{r4, r5, r7, lr}
 800fc62:	b08a      	sub	sp, #40	; 0x28
 800fc64:	af02      	add	r7, sp, #8
 800fc66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc6c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800fc6e:	2103      	movs	r1, #3
 800fc70:	69b8      	ldr	r0, [r7, #24]
 800fc72:	f000 f945 	bl	800ff00 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fc76:	f107 030c 	add.w	r3, r7, #12
 800fc7a:	2203      	movs	r2, #3
 800fc7c:	69b9      	ldr	r1, [r7, #24]
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 fdca 	bl	8010818 <dhcp_create_msg>
 800fc84:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d066      	beq.n	800fd5a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fc92:	89b8      	ldrh	r0, [r7, #12]
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc9a:	2302      	movs	r3, #2
 800fc9c:	2239      	movs	r2, #57	; 0x39
 800fc9e:	f000 f949 	bl	800ff34 <dhcp_option>
 800fca2:	4603      	mov	r3, r0
 800fca4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800fca6:	89b8      	ldrh	r0, [r7, #12]
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	33f0      	adds	r3, #240	; 0xf0
 800fcac:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	f000 f999 	bl	800ffe8 <dhcp_option_short>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fcba:	89b8      	ldrh	r0, [r7, #12]
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcc2:	2304      	movs	r3, #4
 800fcc4:	2232      	movs	r2, #50	; 0x32
 800fcc6:	f000 f935 	bl	800ff34 <dhcp_option>
 800fcca:	4603      	mov	r3, r0
 800fccc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fcce:	89bc      	ldrh	r4, [r7, #12]
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	69db      	ldr	r3, [r3, #28]
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7f6 f91b 	bl	8005f16 <lwip_htonl>
 800fce0:	4603      	mov	r3, r0
 800fce2:	461a      	mov	r2, r3
 800fce4:	4629      	mov	r1, r5
 800fce6:	4620      	mov	r0, r4
 800fce8:	f000 f9b0 	bl	801004c <dhcp_option_long>
 800fcec:	4603      	mov	r3, r0
 800fcee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fcf0:	89b8      	ldrh	r0, [r7, #12]
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fcf8:	2303      	movs	r3, #3
 800fcfa:	2237      	movs	r2, #55	; 0x37
 800fcfc:	f000 f91a 	bl	800ff34 <dhcp_option>
 800fd00:	4603      	mov	r3, r0
 800fd02:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd04:	2300      	movs	r3, #0
 800fd06:	77bb      	strb	r3, [r7, #30]
 800fd08:	e00e      	b.n	800fd28 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fd0a:	89b8      	ldrh	r0, [r7, #12]
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fd12:	7fbb      	ldrb	r3, [r7, #30]
 800fd14:	4a29      	ldr	r2, [pc, #164]	; (800fdbc <dhcp_reboot+0x15c>)
 800fd16:	5cd3      	ldrb	r3, [r2, r3]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	f000 f93f 	bl	800ff9c <dhcp_option_byte>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd22:	7fbb      	ldrb	r3, [r7, #30]
 800fd24:	3301      	adds	r3, #1
 800fd26:	77bb      	strb	r3, [r7, #30]
 800fd28:	7fbb      	ldrb	r3, [r7, #30]
 800fd2a:	2b02      	cmp	r3, #2
 800fd2c:	d9ed      	bls.n	800fd0a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fd2e:	89b8      	ldrh	r0, [r7, #12]
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	33f0      	adds	r3, #240	; 0xf0
 800fd34:	697a      	ldr	r2, [r7, #20]
 800fd36:	4619      	mov	r1, r3
 800fd38:	f000 fe44 	bl	80109c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fd3c:	4b20      	ldr	r3, [pc, #128]	; (800fdc0 <dhcp_reboot+0x160>)
 800fd3e:	6818      	ldr	r0, [r3, #0]
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	2343      	movs	r3, #67	; 0x43
 800fd46:	4a1f      	ldr	r2, [pc, #124]	; (800fdc4 <dhcp_reboot+0x164>)
 800fd48:	6979      	ldr	r1, [r7, #20]
 800fd4a:	f7fe fd19 	bl	800e780 <udp_sendto_if>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fd52:	6978      	ldr	r0, [r7, #20]
 800fd54:	f7f7 fd94 	bl	8007880 <pbuf_free>
 800fd58:	e001      	b.n	800fd5e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fd5a:	23ff      	movs	r3, #255	; 0xff
 800fd5c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fd5e:	69bb      	ldr	r3, [r7, #24]
 800fd60:	799b      	ldrb	r3, [r3, #6]
 800fd62:	2bff      	cmp	r3, #255	; 0xff
 800fd64:	d005      	beq.n	800fd72 <dhcp_reboot+0x112>
    dhcp->tries++;
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	799b      	ldrb	r3, [r3, #6]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	b2da      	uxtb	r2, r3
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800fd72:	69bb      	ldr	r3, [r7, #24]
 800fd74:	799b      	ldrb	r3, [r3, #6]
 800fd76:	2b09      	cmp	r3, #9
 800fd78:	d80a      	bhi.n	800fd90 <dhcp_reboot+0x130>
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	799b      	ldrb	r3, [r3, #6]
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	461a      	mov	r2, r3
 800fd82:	0152      	lsls	r2, r2, #5
 800fd84:	1ad2      	subs	r2, r2, r3
 800fd86:	0092      	lsls	r2, r2, #2
 800fd88:	4413      	add	r3, r2
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	e001      	b.n	800fd94 <dhcp_reboot+0x134>
 800fd90:	f242 7310 	movw	r3, #10000	; 0x2710
 800fd94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fd96:	89fb      	ldrh	r3, [r7, #14]
 800fd98:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fd9c:	4a0a      	ldr	r2, [pc, #40]	; (800fdc8 <dhcp_reboot+0x168>)
 800fd9e:	fb82 1203 	smull	r1, r2, r2, r3
 800fda2:	1152      	asrs	r2, r2, #5
 800fda4:	17db      	asrs	r3, r3, #31
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fdae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3720      	adds	r7, #32
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bdb0      	pop	{r4, r5, r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	20000024 	.word	0x20000024
 800fdc0:	200005d8 	.word	0x200005d8
 800fdc4:	08041e50 	.word	0x08041e50
 800fdc8:	10624dd3 	.word	0x10624dd3

0800fdcc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800fdcc:	b5b0      	push	{r4, r5, r7, lr}
 800fdce:	b08a      	sub	sp, #40	; 0x28
 800fdd0:	af02      	add	r7, sp, #8
 800fdd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 8084 	beq.w	800feea <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	795b      	ldrb	r3, [r3, #5]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f000 8081 	beq.w	800feee <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	699b      	ldr	r3, [r3, #24]
 800fdf0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	2200      	movs	r2, #0
 800fe02:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	2200      	movs	r2, #0
 800fe08:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	631a      	str	r2, [r3, #48]	; 0x30
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	62da      	str	r2, [r3, #44]	; 0x2c
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe1c:	69fb      	ldr	r3, [r7, #28]
 800fe1e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	2200      	movs	r2, #0
 800fe24:	829a      	strh	r2, [r3, #20]
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	8a9a      	ldrh	r2, [r3, #20]
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	825a      	strh	r2, [r3, #18]
 800fe2e:	69fb      	ldr	r3, [r7, #28]
 800fe30:	8a5a      	ldrh	r2, [r3, #18]
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	821a      	strh	r2, [r3, #16]
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	8a1a      	ldrh	r2, [r3, #16]
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 fdee 	bl	8010a20 <dhcp_supplied_address>
 800fe44:	4603      	mov	r3, r0
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d03b      	beq.n	800fec2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800fe4a:	f107 030e 	add.w	r3, r7, #14
 800fe4e:	2207      	movs	r2, #7
 800fe50:	69f9      	ldr	r1, [r7, #28]
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 fce0 	bl	8010818 <dhcp_create_msg>
 800fe58:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d030      	beq.n	800fec2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fe66:	89f8      	ldrh	r0, [r7, #14]
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe6e:	2304      	movs	r3, #4
 800fe70:	2236      	movs	r2, #54	; 0x36
 800fe72:	f000 f85f 	bl	800ff34 <dhcp_option>
 800fe76:	4603      	mov	r3, r0
 800fe78:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800fe7a:	89fc      	ldrh	r4, [r7, #14]
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7f6 f846 	bl	8005f16 <lwip_htonl>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	4629      	mov	r1, r5
 800fe90:	4620      	mov	r0, r4
 800fe92:	f000 f8db 	bl	801004c <dhcp_option_long>
 800fe96:	4603      	mov	r3, r0
 800fe98:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fe9a:	89f8      	ldrh	r0, [r7, #14]
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	33f0      	adds	r3, #240	; 0xf0
 800fea0:	69ba      	ldr	r2, [r7, #24]
 800fea2:	4619      	mov	r1, r3
 800fea4:	f000 fd8e 	bl	80109c4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fea8:	4b13      	ldr	r3, [pc, #76]	; (800fef8 <dhcp_release_and_stop+0x12c>)
 800feaa:	6818      	ldr	r0, [r3, #0]
 800feac:	f107 0210 	add.w	r2, r7, #16
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	2343      	movs	r3, #67	; 0x43
 800feb6:	69b9      	ldr	r1, [r7, #24]
 800feb8:	f7fe fc62 	bl	800e780 <udp_sendto_if>
      pbuf_free(p_out);
 800febc:	69b8      	ldr	r0, [r7, #24]
 800febe:	f7f7 fcdf 	bl	8007880 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fec2:	4b0e      	ldr	r3, [pc, #56]	; (800fefc <dhcp_release_and_stop+0x130>)
 800fec4:	4a0d      	ldr	r2, [pc, #52]	; (800fefc <dhcp_release_and_stop+0x130>)
 800fec6:	490d      	ldr	r1, [pc, #52]	; (800fefc <dhcp_release_and_stop+0x130>)
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7f7 f8a5 	bl	8007018 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fece:	2100      	movs	r1, #0
 800fed0:	69f8      	ldr	r0, [r7, #28]
 800fed2:	f000 f815 	bl	800ff00 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	791b      	ldrb	r3, [r3, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d008      	beq.n	800fef0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fede:	f7fe ffbf 	bl	800ee60 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	2200      	movs	r2, #0
 800fee6:	711a      	strb	r2, [r3, #4]
 800fee8:	e002      	b.n	800fef0 <dhcp_release_and_stop+0x124>
    return;
 800feea:	bf00      	nop
 800feec:	e000      	b.n	800fef0 <dhcp_release_and_stop+0x124>
    return;
 800feee:	bf00      	nop
  }
}
 800fef0:	3720      	adds	r7, #32
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bdb0      	pop	{r4, r5, r7, pc}
 800fef6:	bf00      	nop
 800fef8:	200005d8 	.word	0x200005d8
 800fefc:	08041e4c 	.word	0x08041e4c

0800ff00 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	795b      	ldrb	r3, [r3, #5]
 800ff10:	78fa      	ldrb	r2, [r7, #3]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d008      	beq.n	800ff28 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	78fa      	ldrb	r2, [r7, #3]
 800ff1a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	811a      	strh	r2, [r3, #8]
  }
}
 800ff28:	bf00      	nop
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6039      	str	r1, [r7, #0]
 800ff3c:	4611      	mov	r1, r2
 800ff3e:	461a      	mov	r2, r3
 800ff40:	4603      	mov	r3, r0
 800ff42:	80fb      	strh	r3, [r7, #6]
 800ff44:	460b      	mov	r3, r1
 800ff46:	717b      	strb	r3, [r7, #5]
 800ff48:	4613      	mov	r3, r2
 800ff4a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800ff4c:	88fa      	ldrh	r2, [r7, #6]
 800ff4e:	793b      	ldrb	r3, [r7, #4]
 800ff50:	4413      	add	r3, r2
 800ff52:	3302      	adds	r3, #2
 800ff54:	2b44      	cmp	r3, #68	; 0x44
 800ff56:	d906      	bls.n	800ff66 <dhcp_option+0x32>
 800ff58:	4b0d      	ldr	r3, [pc, #52]	; (800ff90 <dhcp_option+0x5c>)
 800ff5a:	f240 529a 	movw	r2, #1434	; 0x59a
 800ff5e:	490d      	ldr	r1, [pc, #52]	; (800ff94 <dhcp_option+0x60>)
 800ff60:	480d      	ldr	r0, [pc, #52]	; (800ff98 <dhcp_option+0x64>)
 800ff62:	f003 fb75 	bl	8013650 <iprintf>
  options[options_out_len++] = option_type;
 800ff66:	88fb      	ldrh	r3, [r7, #6]
 800ff68:	1c5a      	adds	r2, r3, #1
 800ff6a:	80fa      	strh	r2, [r7, #6]
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	4413      	add	r3, r2
 800ff72:	797a      	ldrb	r2, [r7, #5]
 800ff74:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800ff76:	88fb      	ldrh	r3, [r7, #6]
 800ff78:	1c5a      	adds	r2, r3, #1
 800ff7a:	80fa      	strh	r2, [r7, #6]
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	4413      	add	r3, r2
 800ff82:	793a      	ldrb	r2, [r7, #4]
 800ff84:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ff86:	88fb      	ldrh	r3, [r7, #6]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	3708      	adds	r7, #8
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	bd80      	pop	{r7, pc}
 800ff90:	08016f28 	.word	0x08016f28
 800ff94:	080170bc 	.word	0x080170bc
 800ff98:	08016f88 	.word	0x08016f88

0800ff9c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	6039      	str	r1, [r7, #0]
 800ffa6:	80fb      	strh	r3, [r7, #6]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800ffac:	88fb      	ldrh	r3, [r7, #6]
 800ffae:	2b43      	cmp	r3, #67	; 0x43
 800ffb0:	d906      	bls.n	800ffc0 <dhcp_option_byte+0x24>
 800ffb2:	4b0a      	ldr	r3, [pc, #40]	; (800ffdc <dhcp_option_byte+0x40>)
 800ffb4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800ffb8:	4909      	ldr	r1, [pc, #36]	; (800ffe0 <dhcp_option_byte+0x44>)
 800ffba:	480a      	ldr	r0, [pc, #40]	; (800ffe4 <dhcp_option_byte+0x48>)
 800ffbc:	f003 fb48 	bl	8013650 <iprintf>
  options[options_out_len++] = value;
 800ffc0:	88fb      	ldrh	r3, [r7, #6]
 800ffc2:	1c5a      	adds	r2, r3, #1
 800ffc4:	80fa      	strh	r2, [r7, #6]
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	4413      	add	r3, r2
 800ffcc:	797a      	ldrb	r2, [r7, #5]
 800ffce:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ffd0:	88fb      	ldrh	r3, [r7, #6]
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3708      	adds	r7, #8
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	08016f28 	.word	0x08016f28
 800ffe0:	08017100 	.word	0x08017100
 800ffe4:	08016f88 	.word	0x08016f88

0800ffe8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	4603      	mov	r3, r0
 800fff0:	6039      	str	r1, [r7, #0]
 800fff2:	80fb      	strh	r3, [r7, #6]
 800fff4:	4613      	mov	r3, r2
 800fff6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800fff8:	88fb      	ldrh	r3, [r7, #6]
 800fffa:	3302      	adds	r3, #2
 800fffc:	2b44      	cmp	r3, #68	; 0x44
 800fffe:	d906      	bls.n	801000e <dhcp_option_short+0x26>
 8010000:	4b0f      	ldr	r3, [pc, #60]	; (8010040 <dhcp_option_short+0x58>)
 8010002:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010006:	490f      	ldr	r1, [pc, #60]	; (8010044 <dhcp_option_short+0x5c>)
 8010008:	480f      	ldr	r0, [pc, #60]	; (8010048 <dhcp_option_short+0x60>)
 801000a:	f003 fb21 	bl	8013650 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801000e:	88bb      	ldrh	r3, [r7, #4]
 8010010:	0a1b      	lsrs	r3, r3, #8
 8010012:	b29a      	uxth	r2, r3
 8010014:	88fb      	ldrh	r3, [r7, #6]
 8010016:	1c59      	adds	r1, r3, #1
 8010018:	80f9      	strh	r1, [r7, #6]
 801001a:	4619      	mov	r1, r3
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	440b      	add	r3, r1
 8010020:	b2d2      	uxtb	r2, r2
 8010022:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010024:	88fb      	ldrh	r3, [r7, #6]
 8010026:	1c5a      	adds	r2, r3, #1
 8010028:	80fa      	strh	r2, [r7, #6]
 801002a:	461a      	mov	r2, r3
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	4413      	add	r3, r2
 8010030:	88ba      	ldrh	r2, [r7, #4]
 8010032:	b2d2      	uxtb	r2, r2
 8010034:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010036:	88fb      	ldrh	r3, [r7, #6]
}
 8010038:	4618      	mov	r0, r3
 801003a:	3708      	adds	r7, #8
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	08016f28 	.word	0x08016f28
 8010044:	08017138 	.word	0x08017138
 8010048:	08016f88 	.word	0x08016f88

0801004c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	4603      	mov	r3, r0
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
 8010058:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801005a:	89fb      	ldrh	r3, [r7, #14]
 801005c:	3304      	adds	r3, #4
 801005e:	2b44      	cmp	r3, #68	; 0x44
 8010060:	d906      	bls.n	8010070 <dhcp_option_long+0x24>
 8010062:	4b19      	ldr	r3, [pc, #100]	; (80100c8 <dhcp_option_long+0x7c>)
 8010064:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010068:	4918      	ldr	r1, [pc, #96]	; (80100cc <dhcp_option_long+0x80>)
 801006a:	4819      	ldr	r0, [pc, #100]	; (80100d0 <dhcp_option_long+0x84>)
 801006c:	f003 faf0 	bl	8013650 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	0e1a      	lsrs	r2, r3, #24
 8010074:	89fb      	ldrh	r3, [r7, #14]
 8010076:	1c59      	adds	r1, r3, #1
 8010078:	81f9      	strh	r1, [r7, #14]
 801007a:	4619      	mov	r1, r3
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	440b      	add	r3, r1
 8010080:	b2d2      	uxtb	r2, r2
 8010082:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	0c1a      	lsrs	r2, r3, #16
 8010088:	89fb      	ldrh	r3, [r7, #14]
 801008a:	1c59      	adds	r1, r3, #1
 801008c:	81f9      	strh	r1, [r7, #14]
 801008e:	4619      	mov	r1, r3
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	440b      	add	r3, r1
 8010094:	b2d2      	uxtb	r2, r2
 8010096:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	0a1a      	lsrs	r2, r3, #8
 801009c:	89fb      	ldrh	r3, [r7, #14]
 801009e:	1c59      	adds	r1, r3, #1
 80100a0:	81f9      	strh	r1, [r7, #14]
 80100a2:	4619      	mov	r1, r3
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	440b      	add	r3, r1
 80100a8:	b2d2      	uxtb	r2, r2
 80100aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80100ac:	89fb      	ldrh	r3, [r7, #14]
 80100ae:	1c5a      	adds	r2, r3, #1
 80100b0:	81fa      	strh	r2, [r7, #14]
 80100b2:	461a      	mov	r2, r3
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	4413      	add	r3, r2
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	b2d2      	uxtb	r2, r2
 80100bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80100be:	89fb      	ldrh	r3, [r7, #14]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	08016f28 	.word	0x08016f28
 80100cc:	08017174 	.word	0x08017174
 80100d0:	08016f88 	.word	0x08016f88

080100d4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b090      	sub	sp, #64	; 0x40
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80100e2:	2300      	movs	r3, #0
 80100e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80100e6:	2208      	movs	r2, #8
 80100e8:	2100      	movs	r1, #0
 80100ea:	48be      	ldr	r0, [pc, #760]	; (80103e4 <dhcp_parse_reply+0x310>)
 80100ec:	f003 faa8 	bl	8013640 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	895b      	ldrh	r3, [r3, #10]
 80100f4:	2b2b      	cmp	r3, #43	; 0x2b
 80100f6:	d802      	bhi.n	80100fe <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80100f8:	f06f 0301 	mvn.w	r3, #1
 80100fc:	e2a8      	b.n	8010650 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010104:	23f0      	movs	r3, #240	; 0xf0
 8010106:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	891b      	ldrh	r3, [r3, #8]
 801010c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010112:	e00c      	b.n	801012e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010116:	895b      	ldrh	r3, [r3, #10]
 8010118:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801011e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010120:	895b      	ldrh	r3, [r3, #10]
 8010122:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801012e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010130:	2b00      	cmp	r3, #0
 8010132:	d004      	beq.n	801013e <dhcp_parse_reply+0x6a>
 8010134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010136:	895b      	ldrh	r3, [r3, #10]
 8010138:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801013a:	429a      	cmp	r2, r3
 801013c:	d2ea      	bcs.n	8010114 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801013e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010140:	2b00      	cmp	r3, #0
 8010142:	d102      	bne.n	801014a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010144:	f06f 0301 	mvn.w	r3, #1
 8010148:	e282      	b.n	8010650 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801014a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801014c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801014e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010150:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010158:	e23a      	b.n	80105d0 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801015a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801015c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801015e:	4413      	add	r3, r2
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010164:	2300      	movs	r3, #0
 8010166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801016a:	f04f 33ff 	mov.w	r3, #4294967295
 801016e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010170:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010172:	3302      	adds	r3, #2
 8010174:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010176:	8bfa      	ldrh	r2, [r7, #30]
 8010178:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801017a:	429a      	cmp	r2, r3
 801017c:	d202      	bcs.n	8010184 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801017e:	f06f 0301 	mvn.w	r3, #1
 8010182:	e265      	b.n	8010650 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010184:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010186:	3301      	adds	r3, #1
 8010188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801018a:	8952      	ldrh	r2, [r2, #10]
 801018c:	4293      	cmp	r3, r2
 801018e:	da07      	bge.n	80101a0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010190:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010192:	3301      	adds	r3, #1
 8010194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010196:	4413      	add	r3, r2
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801019e:	e00b      	b.n	80101b8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80101a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d004      	beq.n	80101b2 <dhcp_parse_reply+0xde>
 80101a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	e000      	b.n	80101b4 <dhcp_parse_reply+0xe0>
 80101b2:	2300      	movs	r3, #0
 80101b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80101b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80101c0:	7dfb      	ldrb	r3, [r7, #23]
 80101c2:	2b3b      	cmp	r3, #59	; 0x3b
 80101c4:	f200 812d 	bhi.w	8010422 <dhcp_parse_reply+0x34e>
 80101c8:	a201      	add	r2, pc, #4	; (adr r2, 80101d0 <dhcp_parse_reply+0xfc>)
 80101ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ce:	bf00      	nop
 80101d0:	080102c1 	.word	0x080102c1
 80101d4:	080102d1 	.word	0x080102d1
 80101d8:	08010423 	.word	0x08010423
 80101dc:	080102f3 	.word	0x080102f3
 80101e0:	08010423 	.word	0x08010423
 80101e4:	08010423 	.word	0x08010423
 80101e8:	08010423 	.word	0x08010423
 80101ec:	08010423 	.word	0x08010423
 80101f0:	08010423 	.word	0x08010423
 80101f4:	08010423 	.word	0x08010423
 80101f8:	08010423 	.word	0x08010423
 80101fc:	08010423 	.word	0x08010423
 8010200:	08010423 	.word	0x08010423
 8010204:	08010423 	.word	0x08010423
 8010208:	08010423 	.word	0x08010423
 801020c:	08010423 	.word	0x08010423
 8010210:	08010423 	.word	0x08010423
 8010214:	08010423 	.word	0x08010423
 8010218:	08010423 	.word	0x08010423
 801021c:	08010423 	.word	0x08010423
 8010220:	08010423 	.word	0x08010423
 8010224:	08010423 	.word	0x08010423
 8010228:	08010423 	.word	0x08010423
 801022c:	08010423 	.word	0x08010423
 8010230:	08010423 	.word	0x08010423
 8010234:	08010423 	.word	0x08010423
 8010238:	08010423 	.word	0x08010423
 801023c:	08010423 	.word	0x08010423
 8010240:	08010423 	.word	0x08010423
 8010244:	08010423 	.word	0x08010423
 8010248:	08010423 	.word	0x08010423
 801024c:	08010423 	.word	0x08010423
 8010250:	08010423 	.word	0x08010423
 8010254:	08010423 	.word	0x08010423
 8010258:	08010423 	.word	0x08010423
 801025c:	08010423 	.word	0x08010423
 8010260:	08010423 	.word	0x08010423
 8010264:	08010423 	.word	0x08010423
 8010268:	08010423 	.word	0x08010423
 801026c:	08010423 	.word	0x08010423
 8010270:	08010423 	.word	0x08010423
 8010274:	08010423 	.word	0x08010423
 8010278:	08010423 	.word	0x08010423
 801027c:	08010423 	.word	0x08010423
 8010280:	08010423 	.word	0x08010423
 8010284:	08010423 	.word	0x08010423
 8010288:	08010423 	.word	0x08010423
 801028c:	08010423 	.word	0x08010423
 8010290:	08010423 	.word	0x08010423
 8010294:	08010423 	.word	0x08010423
 8010298:	08010423 	.word	0x08010423
 801029c:	0801031f 	.word	0x0801031f
 80102a0:	08010341 	.word	0x08010341
 80102a4:	0801037d 	.word	0x0801037d
 80102a8:	0801039f 	.word	0x0801039f
 80102ac:	08010423 	.word	0x08010423
 80102b0:	08010423 	.word	0x08010423
 80102b4:	08010423 	.word	0x08010423
 80102b8:	080103c1 	.word	0x080103c1
 80102bc:	08010401 	.word	0x08010401
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80102ce:	e0ac      	b.n	801042a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80102d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102d4:	2b04      	cmp	r3, #4
 80102d6:	d009      	beq.n	80102ec <dhcp_parse_reply+0x218>
 80102d8:	4b43      	ldr	r3, [pc, #268]	; (80103e8 <dhcp_parse_reply+0x314>)
 80102da:	f240 622e 	movw	r2, #1582	; 0x62e
 80102de:	4943      	ldr	r1, [pc, #268]	; (80103ec <dhcp_parse_reply+0x318>)
 80102e0:	4843      	ldr	r0, [pc, #268]	; (80103f0 <dhcp_parse_reply+0x31c>)
 80102e2:	f003 f9b5 	bl	8013650 <iprintf>
 80102e6:	f06f 0305 	mvn.w	r3, #5
 80102ea:	e1b1      	b.n	8010650 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80102ec:	2306      	movs	r3, #6
 80102ee:	623b      	str	r3, [r7, #32]
        break;
 80102f0:	e09b      	b.n	801042a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80102f2:	2304      	movs	r3, #4
 80102f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80102f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80102fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010300:	429a      	cmp	r2, r3
 8010302:	d209      	bcs.n	8010318 <dhcp_parse_reply+0x244>
 8010304:	4b38      	ldr	r3, [pc, #224]	; (80103e8 <dhcp_parse_reply+0x314>)
 8010306:	f240 6233 	movw	r2, #1587	; 0x633
 801030a:	493a      	ldr	r1, [pc, #232]	; (80103f4 <dhcp_parse_reply+0x320>)
 801030c:	4838      	ldr	r0, [pc, #224]	; (80103f0 <dhcp_parse_reply+0x31c>)
 801030e:	f003 f99f 	bl	8013650 <iprintf>
 8010312:	f06f 0305 	mvn.w	r3, #5
 8010316:	e19b      	b.n	8010650 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010318:	2307      	movs	r3, #7
 801031a:	623b      	str	r3, [r7, #32]
        break;
 801031c:	e085      	b.n	801042a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801031e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010322:	2b04      	cmp	r3, #4
 8010324:	d009      	beq.n	801033a <dhcp_parse_reply+0x266>
 8010326:	4b30      	ldr	r3, [pc, #192]	; (80103e8 <dhcp_parse_reply+0x314>)
 8010328:	f240 6241 	movw	r2, #1601	; 0x641
 801032c:	492f      	ldr	r1, [pc, #188]	; (80103ec <dhcp_parse_reply+0x318>)
 801032e:	4830      	ldr	r0, [pc, #192]	; (80103f0 <dhcp_parse_reply+0x31c>)
 8010330:	f003 f98e 	bl	8013650 <iprintf>
 8010334:	f06f 0305 	mvn.w	r3, #5
 8010338:	e18a      	b.n	8010650 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801033a:	2303      	movs	r3, #3
 801033c:	623b      	str	r3, [r7, #32]
        break;
 801033e:	e074      	b.n	801042a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010344:	2b01      	cmp	r3, #1
 8010346:	d009      	beq.n	801035c <dhcp_parse_reply+0x288>
 8010348:	4b27      	ldr	r3, [pc, #156]	; (80103e8 <dhcp_parse_reply+0x314>)
 801034a:	f240 624f 	movw	r2, #1615	; 0x64f
 801034e:	492a      	ldr	r1, [pc, #168]	; (80103f8 <dhcp_parse_reply+0x324>)
 8010350:	4827      	ldr	r0, [pc, #156]	; (80103f0 <dhcp_parse_reply+0x31c>)
 8010352:	f003 f97d 	bl	8013650 <iprintf>
 8010356:	f06f 0305 	mvn.w	r3, #5
 801035a:	e179      	b.n	8010650 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801035c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801035e:	2bf0      	cmp	r3, #240	; 0xf0
 8010360:	d009      	beq.n	8010376 <dhcp_parse_reply+0x2a2>
 8010362:	4b21      	ldr	r3, [pc, #132]	; (80103e8 <dhcp_parse_reply+0x314>)
 8010364:	f240 6251 	movw	r2, #1617	; 0x651
 8010368:	4924      	ldr	r1, [pc, #144]	; (80103fc <dhcp_parse_reply+0x328>)
 801036a:	4821      	ldr	r0, [pc, #132]	; (80103f0 <dhcp_parse_reply+0x31c>)
 801036c:	f003 f970 	bl	8013650 <iprintf>
 8010370:	f06f 0305 	mvn.w	r3, #5
 8010374:	e16c      	b.n	8010650 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010376:	2300      	movs	r3, #0
 8010378:	623b      	str	r3, [r7, #32]
        break;
 801037a:	e056      	b.n	801042a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801037c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010380:	2b01      	cmp	r3, #1
 8010382:	d009      	beq.n	8010398 <dhcp_parse_reply+0x2c4>
 8010384:	4b18      	ldr	r3, [pc, #96]	; (80103e8 <dhcp_parse_reply+0x314>)
 8010386:	f240 6255 	movw	r2, #1621	; 0x655
 801038a:	491b      	ldr	r1, [pc, #108]	; (80103f8 <dhcp_parse_reply+0x324>)
 801038c:	4818      	ldr	r0, [pc, #96]	; (80103f0 <dhcp_parse_reply+0x31c>)
 801038e:	f003 f95f 	bl	8013650 <iprintf>
 8010392:	f06f 0305 	mvn.w	r3, #5
 8010396:	e15b      	b.n	8010650 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010398:	2301      	movs	r3, #1
 801039a:	623b      	str	r3, [r7, #32]
        break;
 801039c:	e045      	b.n	801042a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801039e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103a2:	2b04      	cmp	r3, #4
 80103a4:	d009      	beq.n	80103ba <dhcp_parse_reply+0x2e6>
 80103a6:	4b10      	ldr	r3, [pc, #64]	; (80103e8 <dhcp_parse_reply+0x314>)
 80103a8:	f240 6259 	movw	r2, #1625	; 0x659
 80103ac:	490f      	ldr	r1, [pc, #60]	; (80103ec <dhcp_parse_reply+0x318>)
 80103ae:	4810      	ldr	r0, [pc, #64]	; (80103f0 <dhcp_parse_reply+0x31c>)
 80103b0:	f003 f94e 	bl	8013650 <iprintf>
 80103b4:	f06f 0305 	mvn.w	r3, #5
 80103b8:	e14a      	b.n	8010650 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80103ba:	2302      	movs	r3, #2
 80103bc:	623b      	str	r3, [r7, #32]
        break;
 80103be:	e034      	b.n	801042a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80103c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103c4:	2b04      	cmp	r3, #4
 80103c6:	d009      	beq.n	80103dc <dhcp_parse_reply+0x308>
 80103c8:	4b07      	ldr	r3, [pc, #28]	; (80103e8 <dhcp_parse_reply+0x314>)
 80103ca:	f240 625d 	movw	r2, #1629	; 0x65d
 80103ce:	4907      	ldr	r1, [pc, #28]	; (80103ec <dhcp_parse_reply+0x318>)
 80103d0:	4807      	ldr	r0, [pc, #28]	; (80103f0 <dhcp_parse_reply+0x31c>)
 80103d2:	f003 f93d 	bl	8013650 <iprintf>
 80103d6:	f06f 0305 	mvn.w	r3, #5
 80103da:	e139      	b.n	8010650 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80103dc:	2304      	movs	r3, #4
 80103de:	623b      	str	r3, [r7, #32]
        break;
 80103e0:	e023      	b.n	801042a <dhcp_parse_reply+0x356>
 80103e2:	bf00      	nop
 80103e4:	20007b44 	.word	0x20007b44
 80103e8:	08016f28 	.word	0x08016f28
 80103ec:	080171b0 	.word	0x080171b0
 80103f0:	08016f88 	.word	0x08016f88
 80103f4:	080171bc 	.word	0x080171bc
 80103f8:	080171d0 	.word	0x080171d0
 80103fc:	080171dc 	.word	0x080171dc
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010404:	2b04      	cmp	r3, #4
 8010406:	d009      	beq.n	801041c <dhcp_parse_reply+0x348>
 8010408:	4b93      	ldr	r3, [pc, #588]	; (8010658 <dhcp_parse_reply+0x584>)
 801040a:	f240 6261 	movw	r2, #1633	; 0x661
 801040e:	4993      	ldr	r1, [pc, #588]	; (801065c <dhcp_parse_reply+0x588>)
 8010410:	4893      	ldr	r0, [pc, #588]	; (8010660 <dhcp_parse_reply+0x58c>)
 8010412:	f003 f91d 	bl	8013650 <iprintf>
 8010416:	f06f 0305 	mvn.w	r3, #5
 801041a:	e119      	b.n	8010650 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801041c:	2305      	movs	r3, #5
 801041e:	623b      	str	r3, [r7, #32]
        break;
 8010420:	e003      	b.n	801042a <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8010422:	2300      	movs	r3, #0
 8010424:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010428:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801042a:	7dfb      	ldrb	r3, [r7, #23]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d103      	bne.n	8010438 <dhcp_parse_reply+0x364>
      offset++;
 8010430:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010432:	3301      	adds	r3, #1
 8010434:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010436:	e0a1      	b.n	801057c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010438:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801043a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801043e:	4413      	add	r3, r2
 8010440:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8010444:	4293      	cmp	r3, r2
 8010446:	dd02      	ble.n	801044e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8010448:	f06f 0301 	mvn.w	r3, #1
 801044c:	e100      	b.n	8010650 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801044e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010452:	b29a      	uxth	r2, r3
 8010454:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010456:	4413      	add	r3, r2
 8010458:	b29b      	uxth	r3, r3
 801045a:	3302      	adds	r3, #2
 801045c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801045e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 808a 	beq.w	801057c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8010468:	2300      	movs	r3, #0
 801046a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	2b00      	cmp	r3, #0
 8010470:	db02      	blt.n	8010478 <dhcp_parse_reply+0x3a4>
 8010472:	6a3b      	ldr	r3, [r7, #32]
 8010474:	2b07      	cmp	r3, #7
 8010476:	dd06      	ble.n	8010486 <dhcp_parse_reply+0x3b2>
 8010478:	4b77      	ldr	r3, [pc, #476]	; (8010658 <dhcp_parse_reply+0x584>)
 801047a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801047e:	4979      	ldr	r1, [pc, #484]	; (8010664 <dhcp_parse_reply+0x590>)
 8010480:	4877      	ldr	r0, [pc, #476]	; (8010660 <dhcp_parse_reply+0x58c>)
 8010482:	f003 f8e5 	bl	8013650 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8010486:	4a78      	ldr	r2, [pc, #480]	; (8010668 <dhcp_parse_reply+0x594>)
 8010488:	6a3b      	ldr	r3, [r7, #32]
 801048a:	4413      	add	r3, r2
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d174      	bne.n	801057c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8010492:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010496:	2b04      	cmp	r3, #4
 8010498:	bf28      	it	cs
 801049a:	2304      	movcs	r3, #4
 801049c:	b2db      	uxtb	r3, r3
 801049e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80104a0:	8bfb      	ldrh	r3, [r7, #30]
 80104a2:	8aba      	ldrh	r2, [r7, #20]
 80104a4:	f107 0108 	add.w	r1, r7, #8
 80104a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104aa:	f7f7 fbe3 	bl	8007c74 <pbuf_copy_partial>
 80104ae:	4603      	mov	r3, r0
 80104b0:	461a      	mov	r2, r3
 80104b2:	8abb      	ldrh	r3, [r7, #20]
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d002      	beq.n	80104be <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80104b8:	f06f 0301 	mvn.w	r3, #1
 80104bc:	e0c8      	b.n	8010650 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80104be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80104c2:	2b04      	cmp	r3, #4
 80104c4:	d933      	bls.n	801052e <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80104c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80104ca:	f003 0303 	and.w	r3, r3, #3
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d009      	beq.n	80104e8 <dhcp_parse_reply+0x414>
 80104d4:	4b60      	ldr	r3, [pc, #384]	; (8010658 <dhcp_parse_reply+0x584>)
 80104d6:	f240 6281 	movw	r2, #1665	; 0x681
 80104da:	4964      	ldr	r1, [pc, #400]	; (801066c <dhcp_parse_reply+0x598>)
 80104dc:	4860      	ldr	r0, [pc, #384]	; (8010660 <dhcp_parse_reply+0x58c>)
 80104de:	f003 f8b7 	bl	8013650 <iprintf>
 80104e2:	f06f 0305 	mvn.w	r3, #5
 80104e6:	e0b3      	b.n	8010650 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80104e8:	4a5f      	ldr	r2, [pc, #380]	; (8010668 <dhcp_parse_reply+0x594>)
 80104ea:	6a3b      	ldr	r3, [r7, #32]
 80104ec:	4413      	add	r3, r2
 80104ee:	2201      	movs	r2, #1
 80104f0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7f5 fd0e 	bl	8005f16 <lwip_htonl>
 80104fa:	4602      	mov	r2, r0
 80104fc:	495c      	ldr	r1, [pc, #368]	; (8010670 <dhcp_parse_reply+0x59c>)
 80104fe:	6a3b      	ldr	r3, [r7, #32]
 8010500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010508:	3b04      	subs	r3, #4
 801050a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801050e:	8bfb      	ldrh	r3, [r7, #30]
 8010510:	3304      	adds	r3, #4
 8010512:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010514:	8a7a      	ldrh	r2, [r7, #18]
 8010516:	8bfb      	ldrh	r3, [r7, #30]
 8010518:	429a      	cmp	r2, r3
 801051a:	d202      	bcs.n	8010522 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801051c:	f06f 0301 	mvn.w	r3, #1
 8010520:	e096      	b.n	8010650 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8010522:	8a7b      	ldrh	r3, [r7, #18]
 8010524:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010526:	6a3b      	ldr	r3, [r7, #32]
 8010528:	3301      	adds	r3, #1
 801052a:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801052c:	e79e      	b.n	801046c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801052e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010532:	2b04      	cmp	r3, #4
 8010534:	d106      	bne.n	8010544 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	4618      	mov	r0, r3
 801053a:	f7f5 fcec 	bl	8005f16 <lwip_htonl>
 801053e:	4603      	mov	r3, r0
 8010540:	60bb      	str	r3, [r7, #8]
 8010542:	e011      	b.n	8010568 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010548:	2b01      	cmp	r3, #1
 801054a:	d009      	beq.n	8010560 <dhcp_parse_reply+0x48c>
 801054c:	4b42      	ldr	r3, [pc, #264]	; (8010658 <dhcp_parse_reply+0x584>)
 801054e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8010552:	4948      	ldr	r1, [pc, #288]	; (8010674 <dhcp_parse_reply+0x5a0>)
 8010554:	4842      	ldr	r0, [pc, #264]	; (8010660 <dhcp_parse_reply+0x58c>)
 8010556:	f003 f87b 	bl	8013650 <iprintf>
 801055a:	f06f 0305 	mvn.w	r3, #5
 801055e:	e077      	b.n	8010650 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8010560:	f107 0308 	add.w	r3, r7, #8
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8010568:	4a3f      	ldr	r2, [pc, #252]	; (8010668 <dhcp_parse_reply+0x594>)
 801056a:	6a3b      	ldr	r3, [r7, #32]
 801056c:	4413      	add	r3, r2
 801056e:	2201      	movs	r2, #1
 8010570:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	493e      	ldr	r1, [pc, #248]	; (8010670 <dhcp_parse_reply+0x59c>)
 8010576:	6a3b      	ldr	r3, [r7, #32]
 8010578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057e:	895b      	ldrh	r3, [r3, #10]
 8010580:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010582:	429a      	cmp	r2, r3
 8010584:	d324      	bcc.n	80105d0 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8010586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010588:	895b      	ldrh	r3, [r3, #10]
 801058a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8010590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010592:	895b      	ldrh	r3, [r3, #10]
 8010594:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801059a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801059c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801059e:	429a      	cmp	r2, r3
 80105a0:	d213      	bcs.n	80105ca <dhcp_parse_reply+0x4f6>
        q = q->next;
 80105a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80105a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d109      	bne.n	80105c2 <dhcp_parse_reply+0x4ee>
 80105ae:	4b2a      	ldr	r3, [pc, #168]	; (8010658 <dhcp_parse_reply+0x584>)
 80105b0:	f240 629d 	movw	r2, #1693	; 0x69d
 80105b4:	4930      	ldr	r1, [pc, #192]	; (8010678 <dhcp_parse_reply+0x5a4>)
 80105b6:	482a      	ldr	r0, [pc, #168]	; (8010660 <dhcp_parse_reply+0x58c>)
 80105b8:	f003 f84a 	bl	8013650 <iprintf>
 80105bc:	f06f 0305 	mvn.w	r3, #5
 80105c0:	e046      	b.n	8010650 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80105c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105c8:	e002      	b.n	80105d0 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80105ca:	f06f 0301 	mvn.w	r3, #1
 80105ce:	e03f      	b.n	8010650 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80105d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00a      	beq.n	80105ec <dhcp_parse_reply+0x518>
 80105d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80105d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80105da:	429a      	cmp	r2, r3
 80105dc:	d206      	bcs.n	80105ec <dhcp_parse_reply+0x518>
 80105de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105e2:	4413      	add	r3, r2
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	2bff      	cmp	r3, #255	; 0xff
 80105e8:	f47f adb7 	bne.w	801015a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80105ec:	4b1e      	ldr	r3, [pc, #120]	; (8010668 <dhcp_parse_reply+0x594>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d018      	beq.n	8010626 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80105f4:	4b1e      	ldr	r3, [pc, #120]	; (8010670 <dhcp_parse_reply+0x59c>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80105fa:	4b1b      	ldr	r3, [pc, #108]	; (8010668 <dhcp_parse_reply+0x594>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d102      	bne.n	801060c <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8010606:	2301      	movs	r3, #1
 8010608:	62fb      	str	r3, [r7, #44]	; 0x2c
 801060a:	e00c      	b.n	8010626 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2b02      	cmp	r3, #2
 8010610:	d102      	bne.n	8010618 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8010612:	2301      	movs	r3, #1
 8010614:	62bb      	str	r3, [r7, #40]	; 0x28
 8010616:	e006      	b.n	8010626 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2b03      	cmp	r3, #3
 801061c:	d103      	bne.n	8010626 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801061e:	2301      	movs	r3, #1
 8010620:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8010622:	2301      	movs	r3, #1
 8010624:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010628:	2b00      	cmp	r3, #0
 801062a:	d006      	beq.n	801063a <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8010630:	236c      	movs	r3, #108	; 0x6c
 8010632:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8010634:	23ec      	movs	r3, #236	; 0xec
 8010636:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010638:	e569      	b.n	801010e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801063a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063c:	2b00      	cmp	r3, #0
 801063e:	d006      	beq.n	801064e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8010640:	2300      	movs	r3, #0
 8010642:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8010644:	232c      	movs	r3, #44	; 0x2c
 8010646:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010648:	236c      	movs	r3, #108	; 0x6c
 801064a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801064c:	e55f      	b.n	801010e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3740      	adds	r7, #64	; 0x40
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	08016f28 	.word	0x08016f28
 801065c:	080171b0 	.word	0x080171b0
 8010660:	08016f88 	.word	0x08016f88
 8010664:	080171f4 	.word	0x080171f4
 8010668:	20007b44 	.word	0x20007b44
 801066c:	08017208 	.word	0x08017208
 8010670:	20007b4c 	.word	0x20007b4c
 8010674:	08017220 	.word	0x08017220
 8010678:	08017234 	.word	0x08017234

0801067c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b08a      	sub	sp, #40	; 0x28
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
 8010688:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801068a:	4b60      	ldr	r3, [pc, #384]	; (801080c <dhcp_recv+0x190>)
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010694:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f000 809d 	beq.w	80107de <dhcp_recv+0x162>
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	791b      	ldrb	r3, [r3, #4]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	f000 8098 	beq.w	80107de <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	895b      	ldrh	r3, [r3, #10]
 80106b2:	2b2b      	cmp	r3, #43	; 0x2b
 80106b4:	f240 8095 	bls.w	80107e2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	2b02      	cmp	r3, #2
 80106be:	f040 8092 	bne.w	80107e6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80106c2:	2300      	movs	r3, #0
 80106c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80106c8:	e012      	b.n	80106f0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80106ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ce:	6a3a      	ldr	r2, [r7, #32]
 80106d0:	4413      	add	r3, r2
 80106d2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80106d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106da:	69b9      	ldr	r1, [r7, #24]
 80106dc:	440b      	add	r3, r1
 80106de:	7f1b      	ldrb	r3, [r3, #28]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	f040 8082 	bne.w	80107ea <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80106e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ea:	3301      	adds	r3, #1
 80106ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80106f0:	6a3b      	ldr	r3, [r7, #32]
 80106f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80106f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d203      	bcs.n	8010706 <dhcp_recv+0x8a>
 80106fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010702:	2b05      	cmp	r3, #5
 8010704:	d9e1      	bls.n	80106ca <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	4618      	mov	r0, r3
 801070c:	f7f5 fc03 	bl	8005f16 <lwip_htonl>
 8010710:	4602      	mov	r2, r0
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	429a      	cmp	r2, r3
 8010718:	d169      	bne.n	80107ee <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801071a:	69f9      	ldr	r1, [r7, #28]
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7ff fcd9 	bl	80100d4 <dhcp_parse_reply>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d164      	bne.n	80107f2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8010728:	4b39      	ldr	r3, [pc, #228]	; (8010810 <dhcp_recv+0x194>)
 801072a:	785b      	ldrb	r3, [r3, #1]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d062      	beq.n	80107f6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8010736:	4b37      	ldr	r3, [pc, #220]	; (8010814 <dhcp_recv+0x198>)
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801073c:	7cfb      	ldrb	r3, [r7, #19]
 801073e:	2b05      	cmp	r3, #5
 8010740:	d12a      	bne.n	8010798 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	795b      	ldrb	r3, [r3, #5]
 8010746:	2b01      	cmp	r3, #1
 8010748:	d112      	bne.n	8010770 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801074a:	6979      	ldr	r1, [r7, #20]
 801074c:	6a38      	ldr	r0, [r7, #32]
 801074e:	f7fe fe53 	bl	800f3f8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8010752:	6a3b      	ldr	r3, [r7, #32]
 8010754:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010758:	f003 0308 	and.w	r3, r3, #8
 801075c:	2b00      	cmp	r3, #0
 801075e:	d003      	beq.n	8010768 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8010760:	6a38      	ldr	r0, [r7, #32]
 8010762:	f7fe fbc1 	bl	800eee8 <dhcp_check>
 8010766:	e049      	b.n	80107fc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8010768:	6a38      	ldr	r0, [r7, #32]
 801076a:	f7ff f867 	bl	800f83c <dhcp_bind>
 801076e:	e045      	b.n	80107fc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	795b      	ldrb	r3, [r3, #5]
 8010774:	2b03      	cmp	r3, #3
 8010776:	d007      	beq.n	8010788 <dhcp_recv+0x10c>
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	795b      	ldrb	r3, [r3, #5]
 801077c:	2b04      	cmp	r3, #4
 801077e:	d003      	beq.n	8010788 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8010780:	69fb      	ldr	r3, [r7, #28]
 8010782:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010784:	2b05      	cmp	r3, #5
 8010786:	d139      	bne.n	80107fc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8010788:	6979      	ldr	r1, [r7, #20]
 801078a:	6a38      	ldr	r0, [r7, #32]
 801078c:	f7fe fe34 	bl	800f3f8 <dhcp_handle_ack>
      dhcp_bind(netif);
 8010790:	6a38      	ldr	r0, [r7, #32]
 8010792:	f7ff f853 	bl	800f83c <dhcp_bind>
 8010796:	e031      	b.n	80107fc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8010798:	7cfb      	ldrb	r3, [r7, #19]
 801079a:	2b06      	cmp	r3, #6
 801079c:	d113      	bne.n	80107c6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80107a2:	2b03      	cmp	r3, #3
 80107a4:	d00b      	beq.n	80107be <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	795b      	ldrb	r3, [r3, #5]
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d007      	beq.n	80107be <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80107b2:	2b04      	cmp	r3, #4
 80107b4:	d003      	beq.n	80107be <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80107b6:	69fb      	ldr	r3, [r7, #28]
 80107b8:	795b      	ldrb	r3, [r3, #5]
 80107ba:	2b05      	cmp	r3, #5
 80107bc:	d103      	bne.n	80107c6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80107be:	6a38      	ldr	r0, [r7, #32]
 80107c0:	f7fe fb78 	bl	800eeb4 <dhcp_handle_nak>
 80107c4:	e01a      	b.n	80107fc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80107c6:	7cfb      	ldrb	r3, [r7, #19]
 80107c8:	2b02      	cmp	r3, #2
 80107ca:	d116      	bne.n	80107fa <dhcp_recv+0x17e>
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	795b      	ldrb	r3, [r3, #5]
 80107d0:	2b06      	cmp	r3, #6
 80107d2:	d112      	bne.n	80107fa <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80107d4:	6979      	ldr	r1, [r7, #20]
 80107d6:	6a38      	ldr	r0, [r7, #32]
 80107d8:	f7fe fbba 	bl	800ef50 <dhcp_handle_offer>
 80107dc:	e00e      	b.n	80107fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80107de:	bf00      	nop
 80107e0:	e00c      	b.n	80107fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80107e2:	bf00      	nop
 80107e4:	e00a      	b.n	80107fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80107e6:	bf00      	nop
 80107e8:	e008      	b.n	80107fc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80107ea:	bf00      	nop
 80107ec:	e006      	b.n	80107fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80107ee:	bf00      	nop
 80107f0:	e004      	b.n	80107fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80107f2:	bf00      	nop
 80107f4:	e002      	b.n	80107fc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80107f6:	bf00      	nop
 80107f8:	e000      	b.n	80107fc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80107fa:	bf00      	nop
  pbuf_free(p);
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f7f7 f83f 	bl	8007880 <pbuf_free>
}
 8010802:	bf00      	nop
 8010804:	3728      	adds	r7, #40	; 0x28
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}
 801080a:	bf00      	nop
 801080c:	20004538 	.word	0x20004538
 8010810:	20007b44 	.word	0x20007b44
 8010814:	20007b4c 	.word	0x20007b4c

08010818 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b088      	sub	sp, #32
 801081c:	af00      	add	r7, sp, #0
 801081e:	60f8      	str	r0, [r7, #12]
 8010820:	60b9      	str	r1, [r7, #8]
 8010822:	603b      	str	r3, [r7, #0]
 8010824:	4613      	mov	r3, r2
 8010826:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d108      	bne.n	8010840 <dhcp_create_msg+0x28>
 801082e:	4b5f      	ldr	r3, [pc, #380]	; (80109ac <dhcp_create_msg+0x194>)
 8010830:	f240 7269 	movw	r2, #1897	; 0x769
 8010834:	495e      	ldr	r1, [pc, #376]	; (80109b0 <dhcp_create_msg+0x198>)
 8010836:	485f      	ldr	r0, [pc, #380]	; (80109b4 <dhcp_create_msg+0x19c>)
 8010838:	f002 ff0a 	bl	8013650 <iprintf>
 801083c:	2300      	movs	r3, #0
 801083e:	e0b1      	b.n	80109a4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d108      	bne.n	8010858 <dhcp_create_msg+0x40>
 8010846:	4b59      	ldr	r3, [pc, #356]	; (80109ac <dhcp_create_msg+0x194>)
 8010848:	f240 726a 	movw	r2, #1898	; 0x76a
 801084c:	495a      	ldr	r1, [pc, #360]	; (80109b8 <dhcp_create_msg+0x1a0>)
 801084e:	4859      	ldr	r0, [pc, #356]	; (80109b4 <dhcp_create_msg+0x19c>)
 8010850:	f002 fefe 	bl	8013650 <iprintf>
 8010854:	2300      	movs	r3, #0
 8010856:	e0a5      	b.n	80109a4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010858:	f44f 7220 	mov.w	r2, #640	; 0x280
 801085c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010860:	2036      	movs	r0, #54	; 0x36
 8010862:	f7f6 fd6d 	bl	8007340 <pbuf_alloc>
 8010866:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8010868:	69bb      	ldr	r3, [r7, #24]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d101      	bne.n	8010872 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801086e:	2300      	movs	r3, #0
 8010870:	e098      	b.n	80109a4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8010872:	69bb      	ldr	r3, [r7, #24]
 8010874:	895b      	ldrh	r3, [r3, #10]
 8010876:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801087a:	d206      	bcs.n	801088a <dhcp_create_msg+0x72>
 801087c:	4b4b      	ldr	r3, [pc, #300]	; (80109ac <dhcp_create_msg+0x194>)
 801087e:	f240 7271 	movw	r2, #1905	; 0x771
 8010882:	494e      	ldr	r1, [pc, #312]	; (80109bc <dhcp_create_msg+0x1a4>)
 8010884:	484b      	ldr	r0, [pc, #300]	; (80109b4 <dhcp_create_msg+0x19c>)
 8010886:	f002 fee3 	bl	8013650 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801088a:	79fb      	ldrb	r3, [r7, #7]
 801088c:	2b03      	cmp	r3, #3
 801088e:	d103      	bne.n	8010898 <dhcp_create_msg+0x80>
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	795b      	ldrb	r3, [r3, #5]
 8010894:	2b03      	cmp	r3, #3
 8010896:	d10d      	bne.n	80108b4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	799b      	ldrb	r3, [r3, #6]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d105      	bne.n	80108ac <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80108a0:	f002 feee 	bl	8013680 <rand>
 80108a4:	4603      	mov	r3, r0
 80108a6:	461a      	mov	r2, r3
 80108a8:	4b45      	ldr	r3, [pc, #276]	; (80109c0 <dhcp_create_msg+0x1a8>)
 80108aa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80108ac:	4b44      	ldr	r3, [pc, #272]	; (80109c0 <dhcp_create_msg+0x1a8>)
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80108ba:	f44f 729a 	mov.w	r2, #308	; 0x134
 80108be:	2100      	movs	r1, #0
 80108c0:	6978      	ldr	r0, [r7, #20]
 80108c2:	f002 febd 	bl	8013640 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	2201      	movs	r2, #1
 80108ca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	2201      	movs	r2, #1
 80108d0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7f5 fb18 	bl	8005f16 <lwip_htonl>
 80108e6:	4602      	mov	r2, r0
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80108ec:	79fb      	ldrb	r3, [r7, #7]
 80108ee:	2b08      	cmp	r3, #8
 80108f0:	d010      	beq.n	8010914 <dhcp_create_msg+0xfc>
 80108f2:	79fb      	ldrb	r3, [r7, #7]
 80108f4:	2b04      	cmp	r3, #4
 80108f6:	d00d      	beq.n	8010914 <dhcp_create_msg+0xfc>
 80108f8:	79fb      	ldrb	r3, [r7, #7]
 80108fa:	2b07      	cmp	r3, #7
 80108fc:	d00a      	beq.n	8010914 <dhcp_create_msg+0xfc>
 80108fe:	79fb      	ldrb	r3, [r7, #7]
 8010900:	2b03      	cmp	r3, #3
 8010902:	d10c      	bne.n	801091e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010908:	2b05      	cmp	r3, #5
 801090a:	d003      	beq.n	8010914 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	795b      	ldrb	r3, [r3, #5]
 8010910:	2b04      	cmp	r3, #4
 8010912:	d104      	bne.n	801091e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	3304      	adds	r3, #4
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801091e:	2300      	movs	r3, #0
 8010920:	83fb      	strh	r3, [r7, #30]
 8010922:	e00c      	b.n	801093e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010924:	8bfa      	ldrh	r2, [r7, #30]
 8010926:	8bfb      	ldrh	r3, [r7, #30]
 8010928:	68f9      	ldr	r1, [r7, #12]
 801092a:	440a      	add	r2, r1
 801092c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8010930:	697a      	ldr	r2, [r7, #20]
 8010932:	4413      	add	r3, r2
 8010934:	460a      	mov	r2, r1
 8010936:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010938:	8bfb      	ldrh	r3, [r7, #30]
 801093a:	3301      	adds	r3, #1
 801093c:	83fb      	strh	r3, [r7, #30]
 801093e:	8bfb      	ldrh	r3, [r7, #30]
 8010940:	2b05      	cmp	r3, #5
 8010942:	d9ef      	bls.n	8010924 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	2200      	movs	r2, #0
 8010948:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801094c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010950:	2200      	movs	r2, #0
 8010952:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010956:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801095a:	2200      	movs	r2, #0
 801095c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010960:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010964:	2200      	movs	r2, #0
 8010966:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801096a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010974:	2301      	movs	r3, #1
 8010976:	2235      	movs	r2, #53	; 0x35
 8010978:	2000      	movs	r0, #0
 801097a:	f7ff fadb 	bl	800ff34 <dhcp_option>
 801097e:	4603      	mov	r3, r0
 8010980:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010988:	79fa      	ldrb	r2, [r7, #7]
 801098a:	8a7b      	ldrh	r3, [r7, #18]
 801098c:	4618      	mov	r0, r3
 801098e:	f7ff fb05 	bl	800ff9c <dhcp_option_byte>
 8010992:	4603      	mov	r3, r0
 8010994:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	8a7a      	ldrh	r2, [r7, #18]
 80109a0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80109a2:	69bb      	ldr	r3, [r7, #24]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3720      	adds	r7, #32
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	08016f28 	.word	0x08016f28
 80109b0:	08017248 	.word	0x08017248
 80109b4:	08016f88 	.word	0x08016f88
 80109b8:	08017268 	.word	0x08017268
 80109bc:	08017288 	.word	0x08017288
 80109c0:	200005e0 	.word	0x200005e0

080109c4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	4603      	mov	r3, r0
 80109cc:	60b9      	str	r1, [r7, #8]
 80109ce:	607a      	str	r2, [r7, #4]
 80109d0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80109d2:	89fb      	ldrh	r3, [r7, #14]
 80109d4:	1c5a      	adds	r2, r3, #1
 80109d6:	81fa      	strh	r2, [r7, #14]
 80109d8:	461a      	mov	r2, r3
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	4413      	add	r3, r2
 80109de:	22ff      	movs	r2, #255	; 0xff
 80109e0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80109e2:	e007      	b.n	80109f4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80109e4:	89fb      	ldrh	r3, [r7, #14]
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	81fa      	strh	r2, [r7, #14]
 80109ea:	461a      	mov	r2, r3
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	4413      	add	r3, r2
 80109f0:	2200      	movs	r2, #0
 80109f2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80109f4:	89fb      	ldrh	r3, [r7, #14]
 80109f6:	2b43      	cmp	r3, #67	; 0x43
 80109f8:	d904      	bls.n	8010a04 <dhcp_option_trailer+0x40>
 80109fa:	89fb      	ldrh	r3, [r7, #14]
 80109fc:	f003 0303 	and.w	r3, r3, #3
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d002      	beq.n	8010a0a <dhcp_option_trailer+0x46>
 8010a04:	89fb      	ldrh	r3, [r7, #14]
 8010a06:	2b43      	cmp	r3, #67	; 0x43
 8010a08:	d9ec      	bls.n	80109e4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010a0a:	89fb      	ldrh	r3, [r7, #14]
 8010a0c:	33f0      	adds	r3, #240	; 0xf0
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7f6 fdae 	bl	8007574 <pbuf_realloc>
}
 8010a18:	bf00      	nop
 8010a1a:	3710      	adds	r7, #16
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b085      	sub	sp, #20
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d017      	beq.n	8010a5e <dhcp_supplied_address+0x3e>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d013      	beq.n	8010a5e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a3a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	795b      	ldrb	r3, [r3, #5]
 8010a40:	2b0a      	cmp	r3, #10
 8010a42:	d007      	beq.n	8010a54 <dhcp_supplied_address+0x34>
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	795b      	ldrb	r3, [r3, #5]
 8010a48:	2b05      	cmp	r3, #5
 8010a4a:	d003      	beq.n	8010a54 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010a50:	2b04      	cmp	r3, #4
 8010a52:	d101      	bne.n	8010a58 <dhcp_supplied_address+0x38>
 8010a54:	2301      	movs	r3, #1
 8010a56:	e000      	b.n	8010a5a <dhcp_supplied_address+0x3a>
 8010a58:	2300      	movs	r3, #0
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	e000      	b.n	8010a60 <dhcp_supplied_address+0x40>
  }
  return 0;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3714      	adds	r7, #20
 8010a64:	46bd      	mov	sp, r7
 8010a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6a:	4770      	bx	lr

08010a6c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010a74:	4915      	ldr	r1, [pc, #84]	; (8010acc <etharp_free_entry+0x60>)
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	4613      	mov	r3, r2
 8010a7a:	005b      	lsls	r3, r3, #1
 8010a7c:	4413      	add	r3, r2
 8010a7e:	00db      	lsls	r3, r3, #3
 8010a80:	440b      	add	r3, r1
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d013      	beq.n	8010ab0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010a88:	4910      	ldr	r1, [pc, #64]	; (8010acc <etharp_free_entry+0x60>)
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	4413      	add	r3, r2
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	440b      	add	r3, r1
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7f6 fef1 	bl	8007880 <pbuf_free>
    arp_table[i].q = NULL;
 8010a9e:	490b      	ldr	r1, [pc, #44]	; (8010acc <etharp_free_entry+0x60>)
 8010aa0:	687a      	ldr	r2, [r7, #4]
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	005b      	lsls	r3, r3, #1
 8010aa6:	4413      	add	r3, r2
 8010aa8:	00db      	lsls	r3, r3, #3
 8010aaa:	440b      	add	r3, r1
 8010aac:	2200      	movs	r2, #0
 8010aae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010ab0:	4906      	ldr	r1, [pc, #24]	; (8010acc <etharp_free_entry+0x60>)
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	005b      	lsls	r3, r3, #1
 8010ab8:	4413      	add	r3, r2
 8010aba:	00db      	lsls	r3, r3, #3
 8010abc:	440b      	add	r3, r1
 8010abe:	3314      	adds	r3, #20
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010ac4:	bf00      	nop
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	200005e4 	.word	0x200005e4

08010ad0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	607b      	str	r3, [r7, #4]
 8010ada:	e096      	b.n	8010c0a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010adc:	494f      	ldr	r1, [pc, #316]	; (8010c1c <etharp_tmr+0x14c>)
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	4613      	mov	r3, r2
 8010ae2:	005b      	lsls	r3, r3, #1
 8010ae4:	4413      	add	r3, r2
 8010ae6:	00db      	lsls	r3, r3, #3
 8010ae8:	440b      	add	r3, r1
 8010aea:	3314      	adds	r3, #20
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010af0:	78fb      	ldrb	r3, [r7, #3]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f000 8086 	beq.w	8010c04 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010af8:	4948      	ldr	r1, [pc, #288]	; (8010c1c <etharp_tmr+0x14c>)
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	4613      	mov	r3, r2
 8010afe:	005b      	lsls	r3, r3, #1
 8010b00:	4413      	add	r3, r2
 8010b02:	00db      	lsls	r3, r3, #3
 8010b04:	440b      	add	r3, r1
 8010b06:	3312      	adds	r3, #18
 8010b08:	881b      	ldrh	r3, [r3, #0]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	b298      	uxth	r0, r3
 8010b0e:	4943      	ldr	r1, [pc, #268]	; (8010c1c <etharp_tmr+0x14c>)
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	4613      	mov	r3, r2
 8010b14:	005b      	lsls	r3, r3, #1
 8010b16:	4413      	add	r3, r2
 8010b18:	00db      	lsls	r3, r3, #3
 8010b1a:	440b      	add	r3, r1
 8010b1c:	3312      	adds	r3, #18
 8010b1e:	4602      	mov	r2, r0
 8010b20:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b22:	493e      	ldr	r1, [pc, #248]	; (8010c1c <etharp_tmr+0x14c>)
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	4613      	mov	r3, r2
 8010b28:	005b      	lsls	r3, r3, #1
 8010b2a:	4413      	add	r3, r2
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	440b      	add	r3, r1
 8010b30:	3312      	adds	r3, #18
 8010b32:	881b      	ldrh	r3, [r3, #0]
 8010b34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010b38:	d215      	bcs.n	8010b66 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010b3a:	4938      	ldr	r1, [pc, #224]	; (8010c1c <etharp_tmr+0x14c>)
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	005b      	lsls	r3, r3, #1
 8010b42:	4413      	add	r3, r2
 8010b44:	00db      	lsls	r3, r3, #3
 8010b46:	440b      	add	r3, r1
 8010b48:	3314      	adds	r3, #20
 8010b4a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d10e      	bne.n	8010b6e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010b50:	4932      	ldr	r1, [pc, #200]	; (8010c1c <etharp_tmr+0x14c>)
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	4613      	mov	r3, r2
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	4413      	add	r3, r2
 8010b5a:	00db      	lsls	r3, r3, #3
 8010b5c:	440b      	add	r3, r1
 8010b5e:	3312      	adds	r3, #18
 8010b60:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010b62:	2b04      	cmp	r3, #4
 8010b64:	d903      	bls.n	8010b6e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7ff ff80 	bl	8010a6c <etharp_free_entry>
 8010b6c:	e04a      	b.n	8010c04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010b6e:	492b      	ldr	r1, [pc, #172]	; (8010c1c <etharp_tmr+0x14c>)
 8010b70:	687a      	ldr	r2, [r7, #4]
 8010b72:	4613      	mov	r3, r2
 8010b74:	005b      	lsls	r3, r3, #1
 8010b76:	4413      	add	r3, r2
 8010b78:	00db      	lsls	r3, r3, #3
 8010b7a:	440b      	add	r3, r1
 8010b7c:	3314      	adds	r3, #20
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	2b03      	cmp	r3, #3
 8010b82:	d10a      	bne.n	8010b9a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010b84:	4925      	ldr	r1, [pc, #148]	; (8010c1c <etharp_tmr+0x14c>)
 8010b86:	687a      	ldr	r2, [r7, #4]
 8010b88:	4613      	mov	r3, r2
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	4413      	add	r3, r2
 8010b8e:	00db      	lsls	r3, r3, #3
 8010b90:	440b      	add	r3, r1
 8010b92:	3314      	adds	r3, #20
 8010b94:	2204      	movs	r2, #4
 8010b96:	701a      	strb	r2, [r3, #0]
 8010b98:	e034      	b.n	8010c04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010b9a:	4920      	ldr	r1, [pc, #128]	; (8010c1c <etharp_tmr+0x14c>)
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	4613      	mov	r3, r2
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	4413      	add	r3, r2
 8010ba4:	00db      	lsls	r3, r3, #3
 8010ba6:	440b      	add	r3, r1
 8010ba8:	3314      	adds	r3, #20
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	2b04      	cmp	r3, #4
 8010bae:	d10a      	bne.n	8010bc6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010bb0:	491a      	ldr	r1, [pc, #104]	; (8010c1c <etharp_tmr+0x14c>)
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	005b      	lsls	r3, r3, #1
 8010bb8:	4413      	add	r3, r2
 8010bba:	00db      	lsls	r3, r3, #3
 8010bbc:	440b      	add	r3, r1
 8010bbe:	3314      	adds	r3, #20
 8010bc0:	2202      	movs	r2, #2
 8010bc2:	701a      	strb	r2, [r3, #0]
 8010bc4:	e01e      	b.n	8010c04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010bc6:	4915      	ldr	r1, [pc, #84]	; (8010c1c <etharp_tmr+0x14c>)
 8010bc8:	687a      	ldr	r2, [r7, #4]
 8010bca:	4613      	mov	r3, r2
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	4413      	add	r3, r2
 8010bd0:	00db      	lsls	r3, r3, #3
 8010bd2:	440b      	add	r3, r1
 8010bd4:	3314      	adds	r3, #20
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d113      	bne.n	8010c04 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010bdc:	490f      	ldr	r1, [pc, #60]	; (8010c1c <etharp_tmr+0x14c>)
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	4613      	mov	r3, r2
 8010be2:	005b      	lsls	r3, r3, #1
 8010be4:	4413      	add	r3, r2
 8010be6:	00db      	lsls	r3, r3, #3
 8010be8:	440b      	add	r3, r1
 8010bea:	3308      	adds	r3, #8
 8010bec:	6818      	ldr	r0, [r3, #0]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	005b      	lsls	r3, r3, #1
 8010bf4:	4413      	add	r3, r2
 8010bf6:	00db      	lsls	r3, r3, #3
 8010bf8:	4a08      	ldr	r2, [pc, #32]	; (8010c1c <etharp_tmr+0x14c>)
 8010bfa:	4413      	add	r3, r2
 8010bfc:	3304      	adds	r3, #4
 8010bfe:	4619      	mov	r1, r3
 8010c00:	f000 feb4 	bl	801196c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	3301      	adds	r3, #1
 8010c08:	607b      	str	r3, [r7, #4]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2b09      	cmp	r3, #9
 8010c0e:	f77f af65 	ble.w	8010adc <etharp_tmr+0xc>
      }
    }
  }
}
 8010c12:	bf00      	nop
 8010c14:	bf00      	nop
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	200005e4 	.word	0x200005e4

08010c20 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b08a      	sub	sp, #40	; 0x28
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	460b      	mov	r3, r1
 8010c2a:	607a      	str	r2, [r7, #4]
 8010c2c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010c2e:	230a      	movs	r3, #10
 8010c30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010c32:	230a      	movs	r3, #10
 8010c34:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010c36:	230a      	movs	r3, #10
 8010c38:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010c3e:	230a      	movs	r3, #10
 8010c40:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	83bb      	strh	r3, [r7, #28]
 8010c46:	2300      	movs	r3, #0
 8010c48:	837b      	strh	r3, [r7, #26]
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c4e:	2300      	movs	r3, #0
 8010c50:	843b      	strh	r3, [r7, #32]
 8010c52:	e0ae      	b.n	8010db2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c58:	49a6      	ldr	r1, [pc, #664]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	005b      	lsls	r3, r3, #1
 8010c5e:	4413      	add	r3, r2
 8010c60:	00db      	lsls	r3, r3, #3
 8010c62:	440b      	add	r3, r1
 8010c64:	3314      	adds	r3, #20
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010c6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010c6e:	2b0a      	cmp	r3, #10
 8010c70:	d105      	bne.n	8010c7e <etharp_find_entry+0x5e>
 8010c72:	7dfb      	ldrb	r3, [r7, #23]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d102      	bne.n	8010c7e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010c78:	8c3b      	ldrh	r3, [r7, #32]
 8010c7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8010c7c:	e095      	b.n	8010daa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010c7e:	7dfb      	ldrb	r3, [r7, #23]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	f000 8092 	beq.w	8010daa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010c86:	7dfb      	ldrb	r3, [r7, #23]
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d009      	beq.n	8010ca0 <etharp_find_entry+0x80>
 8010c8c:	7dfb      	ldrb	r3, [r7, #23]
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d806      	bhi.n	8010ca0 <etharp_find_entry+0x80>
 8010c92:	4b99      	ldr	r3, [pc, #612]	; (8010ef8 <etharp_find_entry+0x2d8>)
 8010c94:	f240 1223 	movw	r2, #291	; 0x123
 8010c98:	4998      	ldr	r1, [pc, #608]	; (8010efc <etharp_find_entry+0x2dc>)
 8010c9a:	4899      	ldr	r0, [pc, #612]	; (8010f00 <etharp_find_entry+0x2e0>)
 8010c9c:	f002 fcd8 	bl	8013650 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d020      	beq.n	8010ce8 <etharp_find_entry+0xc8>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	6819      	ldr	r1, [r3, #0]
 8010caa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cae:	4891      	ldr	r0, [pc, #580]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	005b      	lsls	r3, r3, #1
 8010cb4:	4413      	add	r3, r2
 8010cb6:	00db      	lsls	r3, r3, #3
 8010cb8:	4403      	add	r3, r0
 8010cba:	3304      	adds	r3, #4
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4299      	cmp	r1, r3
 8010cc0:	d112      	bne.n	8010ce8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00c      	beq.n	8010ce2 <etharp_find_entry+0xc2>
 8010cc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ccc:	4989      	ldr	r1, [pc, #548]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010cce:	4613      	mov	r3, r2
 8010cd0:	005b      	lsls	r3, r3, #1
 8010cd2:	4413      	add	r3, r2
 8010cd4:	00db      	lsls	r3, r3, #3
 8010cd6:	440b      	add	r3, r1
 8010cd8:	3308      	adds	r3, #8
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	687a      	ldr	r2, [r7, #4]
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d102      	bne.n	8010ce8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010ce2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ce6:	e100      	b.n	8010eea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010ce8:	7dfb      	ldrb	r3, [r7, #23]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d140      	bne.n	8010d70 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010cee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cf2:	4980      	ldr	r1, [pc, #512]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	005b      	lsls	r3, r3, #1
 8010cf8:	4413      	add	r3, r2
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	440b      	add	r3, r1
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d01a      	beq.n	8010d3a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010d04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d08:	497a      	ldr	r1, [pc, #488]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	005b      	lsls	r3, r3, #1
 8010d0e:	4413      	add	r3, r2
 8010d10:	00db      	lsls	r3, r3, #3
 8010d12:	440b      	add	r3, r1
 8010d14:	3312      	adds	r3, #18
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	8bba      	ldrh	r2, [r7, #28]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d845      	bhi.n	8010daa <etharp_find_entry+0x18a>
            old_queue = i;
 8010d1e:	8c3b      	ldrh	r3, [r7, #32]
 8010d20:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010d22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d26:	4973      	ldr	r1, [pc, #460]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010d28:	4613      	mov	r3, r2
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	4413      	add	r3, r2
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	440b      	add	r3, r1
 8010d32:	3312      	adds	r3, #18
 8010d34:	881b      	ldrh	r3, [r3, #0]
 8010d36:	83bb      	strh	r3, [r7, #28]
 8010d38:	e037      	b.n	8010daa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010d3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d3e:	496d      	ldr	r1, [pc, #436]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010d40:	4613      	mov	r3, r2
 8010d42:	005b      	lsls	r3, r3, #1
 8010d44:	4413      	add	r3, r2
 8010d46:	00db      	lsls	r3, r3, #3
 8010d48:	440b      	add	r3, r1
 8010d4a:	3312      	adds	r3, #18
 8010d4c:	881b      	ldrh	r3, [r3, #0]
 8010d4e:	8b7a      	ldrh	r2, [r7, #26]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	d82a      	bhi.n	8010daa <etharp_find_entry+0x18a>
            old_pending = i;
 8010d54:	8c3b      	ldrh	r3, [r7, #32]
 8010d56:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010d58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d5c:	4965      	ldr	r1, [pc, #404]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010d5e:	4613      	mov	r3, r2
 8010d60:	005b      	lsls	r3, r3, #1
 8010d62:	4413      	add	r3, r2
 8010d64:	00db      	lsls	r3, r3, #3
 8010d66:	440b      	add	r3, r1
 8010d68:	3312      	adds	r3, #18
 8010d6a:	881b      	ldrh	r3, [r3, #0]
 8010d6c:	837b      	strh	r3, [r7, #26]
 8010d6e:	e01c      	b.n	8010daa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d919      	bls.n	8010daa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010d76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d7a:	495e      	ldr	r1, [pc, #376]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010d7c:	4613      	mov	r3, r2
 8010d7e:	005b      	lsls	r3, r3, #1
 8010d80:	4413      	add	r3, r2
 8010d82:	00db      	lsls	r3, r3, #3
 8010d84:	440b      	add	r3, r1
 8010d86:	3312      	adds	r3, #18
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	8b3a      	ldrh	r2, [r7, #24]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d80c      	bhi.n	8010daa <etharp_find_entry+0x18a>
            old_stable = i;
 8010d90:	8c3b      	ldrh	r3, [r7, #32]
 8010d92:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010d94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d98:	4956      	ldr	r1, [pc, #344]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	005b      	lsls	r3, r3, #1
 8010d9e:	4413      	add	r3, r2
 8010da0:	00db      	lsls	r3, r3, #3
 8010da2:	440b      	add	r3, r1
 8010da4:	3312      	adds	r3, #18
 8010da6:	881b      	ldrh	r3, [r3, #0]
 8010da8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010daa:	8c3b      	ldrh	r3, [r7, #32]
 8010dac:	3301      	adds	r3, #1
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	843b      	strh	r3, [r7, #32]
 8010db2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010db6:	2b09      	cmp	r3, #9
 8010db8:	f77f af4c 	ble.w	8010c54 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010dbc:	7afb      	ldrb	r3, [r7, #11]
 8010dbe:	f003 0302 	and.w	r3, r3, #2
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d108      	bne.n	8010dd8 <etharp_find_entry+0x1b8>
 8010dc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010dca:	2b0a      	cmp	r3, #10
 8010dcc:	d107      	bne.n	8010dde <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010dce:	7afb      	ldrb	r3, [r7, #11]
 8010dd0:	f003 0301 	and.w	r3, r3, #1
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d102      	bne.n	8010dde <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010ddc:	e085      	b.n	8010eea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010dde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010de2:	2b09      	cmp	r3, #9
 8010de4:	dc02      	bgt.n	8010dec <etharp_find_entry+0x1cc>
    i = empty;
 8010de6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010de8:	843b      	strh	r3, [r7, #32]
 8010dea:	e039      	b.n	8010e60 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010dec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010df0:	2b09      	cmp	r3, #9
 8010df2:	dc14      	bgt.n	8010e1e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010df6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010df8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dfc:	493d      	ldr	r1, [pc, #244]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010dfe:	4613      	mov	r3, r2
 8010e00:	005b      	lsls	r3, r3, #1
 8010e02:	4413      	add	r3, r2
 8010e04:	00db      	lsls	r3, r3, #3
 8010e06:	440b      	add	r3, r1
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d018      	beq.n	8010e40 <etharp_find_entry+0x220>
 8010e0e:	4b3a      	ldr	r3, [pc, #232]	; (8010ef8 <etharp_find_entry+0x2d8>)
 8010e10:	f240 126d 	movw	r2, #365	; 0x16d
 8010e14:	493b      	ldr	r1, [pc, #236]	; (8010f04 <etharp_find_entry+0x2e4>)
 8010e16:	483a      	ldr	r0, [pc, #232]	; (8010f00 <etharp_find_entry+0x2e0>)
 8010e18:	f002 fc1a 	bl	8013650 <iprintf>
 8010e1c:	e010      	b.n	8010e40 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010e1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010e22:	2b09      	cmp	r3, #9
 8010e24:	dc02      	bgt.n	8010e2c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010e26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e28:	843b      	strh	r3, [r7, #32]
 8010e2a:	e009      	b.n	8010e40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010e2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010e30:	2b09      	cmp	r3, #9
 8010e32:	dc02      	bgt.n	8010e3a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010e34:	8bfb      	ldrh	r3, [r7, #30]
 8010e36:	843b      	strh	r3, [r7, #32]
 8010e38:	e002      	b.n	8010e40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8010e3e:	e054      	b.n	8010eea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010e40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e44:	2b09      	cmp	r3, #9
 8010e46:	dd06      	ble.n	8010e56 <etharp_find_entry+0x236>
 8010e48:	4b2b      	ldr	r3, [pc, #172]	; (8010ef8 <etharp_find_entry+0x2d8>)
 8010e4a:	f240 127f 	movw	r2, #383	; 0x17f
 8010e4e:	492e      	ldr	r1, [pc, #184]	; (8010f08 <etharp_find_entry+0x2e8>)
 8010e50:	482b      	ldr	r0, [pc, #172]	; (8010f00 <etharp_find_entry+0x2e0>)
 8010e52:	f002 fbfd 	bl	8013650 <iprintf>
    etharp_free_entry(i);
 8010e56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7ff fe06 	bl	8010a6c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010e60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e64:	2b09      	cmp	r3, #9
 8010e66:	dd06      	ble.n	8010e76 <etharp_find_entry+0x256>
 8010e68:	4b23      	ldr	r3, [pc, #140]	; (8010ef8 <etharp_find_entry+0x2d8>)
 8010e6a:	f240 1283 	movw	r2, #387	; 0x183
 8010e6e:	4926      	ldr	r1, [pc, #152]	; (8010f08 <etharp_find_entry+0x2e8>)
 8010e70:	4823      	ldr	r0, [pc, #140]	; (8010f00 <etharp_find_entry+0x2e0>)
 8010e72:	f002 fbed 	bl	8013650 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010e76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e7a:	491e      	ldr	r1, [pc, #120]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	005b      	lsls	r3, r3, #1
 8010e80:	4413      	add	r3, r2
 8010e82:	00db      	lsls	r3, r3, #3
 8010e84:	440b      	add	r3, r1
 8010e86:	3314      	adds	r3, #20
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d006      	beq.n	8010e9c <etharp_find_entry+0x27c>
 8010e8e:	4b1a      	ldr	r3, [pc, #104]	; (8010ef8 <etharp_find_entry+0x2d8>)
 8010e90:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010e94:	491d      	ldr	r1, [pc, #116]	; (8010f0c <etharp_find_entry+0x2ec>)
 8010e96:	481a      	ldr	r0, [pc, #104]	; (8010f00 <etharp_find_entry+0x2e0>)
 8010e98:	f002 fbda 	bl	8013650 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d00b      	beq.n	8010eba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010ea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	6819      	ldr	r1, [r3, #0]
 8010eaa:	4812      	ldr	r0, [pc, #72]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010eac:	4613      	mov	r3, r2
 8010eae:	005b      	lsls	r3, r3, #1
 8010eb0:	4413      	add	r3, r2
 8010eb2:	00db      	lsls	r3, r3, #3
 8010eb4:	4403      	add	r3, r0
 8010eb6:	3304      	adds	r3, #4
 8010eb8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010eba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ebe:	490d      	ldr	r1, [pc, #52]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010ec0:	4613      	mov	r3, r2
 8010ec2:	005b      	lsls	r3, r3, #1
 8010ec4:	4413      	add	r3, r2
 8010ec6:	00db      	lsls	r3, r3, #3
 8010ec8:	440b      	add	r3, r1
 8010eca:	3312      	adds	r3, #18
 8010ecc:	2200      	movs	r2, #0
 8010ece:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010ed0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ed4:	4907      	ldr	r1, [pc, #28]	; (8010ef4 <etharp_find_entry+0x2d4>)
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	4413      	add	r3, r2
 8010edc:	00db      	lsls	r3, r3, #3
 8010ede:	440b      	add	r3, r1
 8010ee0:	3308      	adds	r3, #8
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010ee6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3728      	adds	r7, #40	; 0x28
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	200005e4 	.word	0x200005e4
 8010ef8:	080172c8 	.word	0x080172c8
 8010efc:	08017300 	.word	0x08017300
 8010f00:	08017340 	.word	0x08017340
 8010f04:	08017368 	.word	0x08017368
 8010f08:	08017380 	.word	0x08017380
 8010f0c:	08017394 	.word	0x08017394

08010f10 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b088      	sub	sp, #32
 8010f14:	af02      	add	r7, sp, #8
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
 8010f1c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f24:	2b06      	cmp	r3, #6
 8010f26:	d006      	beq.n	8010f36 <etharp_update_arp_entry+0x26>
 8010f28:	4b48      	ldr	r3, [pc, #288]	; (801104c <etharp_update_arp_entry+0x13c>)
 8010f2a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010f2e:	4948      	ldr	r1, [pc, #288]	; (8011050 <etharp_update_arp_entry+0x140>)
 8010f30:	4848      	ldr	r0, [pc, #288]	; (8011054 <etharp_update_arp_entry+0x144>)
 8010f32:	f002 fb8d 	bl	8013650 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d012      	beq.n	8010f62 <etharp_update_arp_entry+0x52>
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00e      	beq.n	8010f62 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	68f9      	ldr	r1, [r7, #12]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f001 facc 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 8010f50:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d105      	bne.n	8010f62 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f5e:	2be0      	cmp	r3, #224	; 0xe0
 8010f60:	d102      	bne.n	8010f68 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010f62:	f06f 030f 	mvn.w	r3, #15
 8010f66:	e06c      	b.n	8011042 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010f68:	78fb      	ldrb	r3, [r7, #3]
 8010f6a:	68fa      	ldr	r2, [r7, #12]
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	68b8      	ldr	r0, [r7, #8]
 8010f70:	f7ff fe56 	bl	8010c20 <etharp_find_entry>
 8010f74:	4603      	mov	r3, r0
 8010f76:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010f78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	da02      	bge.n	8010f86 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010f80:	8afb      	ldrh	r3, [r7, #22]
 8010f82:	b25b      	sxtb	r3, r3
 8010f84:	e05d      	b.n	8011042 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010f86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f8a:	4933      	ldr	r1, [pc, #204]	; (8011058 <etharp_update_arp_entry+0x148>)
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	4413      	add	r3, r2
 8010f92:	00db      	lsls	r3, r3, #3
 8010f94:	440b      	add	r3, r1
 8010f96:	3314      	adds	r3, #20
 8010f98:	2202      	movs	r2, #2
 8010f9a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010f9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fa0:	492d      	ldr	r1, [pc, #180]	; (8011058 <etharp_update_arp_entry+0x148>)
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	4413      	add	r3, r2
 8010fa8:	00db      	lsls	r3, r3, #3
 8010faa:	440b      	add	r3, r1
 8010fac:	3308      	adds	r3, #8
 8010fae:	68fa      	ldr	r2, [r7, #12]
 8010fb0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010fb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fb6:	4613      	mov	r3, r2
 8010fb8:	005b      	lsls	r3, r3, #1
 8010fba:	4413      	add	r3, r2
 8010fbc:	00db      	lsls	r3, r3, #3
 8010fbe:	3308      	adds	r3, #8
 8010fc0:	4a25      	ldr	r2, [pc, #148]	; (8011058 <etharp_update_arp_entry+0x148>)
 8010fc2:	4413      	add	r3, r2
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	2206      	movs	r2, #6
 8010fc8:	6879      	ldr	r1, [r7, #4]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f002 fb10 	bl	80135f0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010fd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fd4:	4920      	ldr	r1, [pc, #128]	; (8011058 <etharp_update_arp_entry+0x148>)
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	005b      	lsls	r3, r3, #1
 8010fda:	4413      	add	r3, r2
 8010fdc:	00db      	lsls	r3, r3, #3
 8010fde:	440b      	add	r3, r1
 8010fe0:	3312      	adds	r3, #18
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010fe6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fea:	491b      	ldr	r1, [pc, #108]	; (8011058 <etharp_update_arp_entry+0x148>)
 8010fec:	4613      	mov	r3, r2
 8010fee:	005b      	lsls	r3, r3, #1
 8010ff0:	4413      	add	r3, r2
 8010ff2:	00db      	lsls	r3, r3, #3
 8010ff4:	440b      	add	r3, r1
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d021      	beq.n	8011040 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010ffc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011000:	4915      	ldr	r1, [pc, #84]	; (8011058 <etharp_update_arp_entry+0x148>)
 8011002:	4613      	mov	r3, r2
 8011004:	005b      	lsls	r3, r3, #1
 8011006:	4413      	add	r3, r2
 8011008:	00db      	lsls	r3, r3, #3
 801100a:	440b      	add	r3, r1
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011014:	4910      	ldr	r1, [pc, #64]	; (8011058 <etharp_update_arp_entry+0x148>)
 8011016:	4613      	mov	r3, r2
 8011018:	005b      	lsls	r3, r3, #1
 801101a:	4413      	add	r3, r2
 801101c:	00db      	lsls	r3, r3, #3
 801101e:	440b      	add	r3, r1
 8011020:	2200      	movs	r2, #0
 8011022:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801102a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6939      	ldr	r1, [r7, #16]
 8011034:	68f8      	ldr	r0, [r7, #12]
 8011036:	f002 fa59 	bl	80134ec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801103a:	6938      	ldr	r0, [r7, #16]
 801103c:	f7f6 fc20 	bl	8007880 <pbuf_free>
  }
  return ERR_OK;
 8011040:	2300      	movs	r3, #0
}
 8011042:	4618      	mov	r0, r3
 8011044:	3718      	adds	r7, #24
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	080172c8 	.word	0x080172c8
 8011050:	080173c0 	.word	0x080173c0
 8011054:	08017340 	.word	0x08017340
 8011058:	200005e4 	.word	0x200005e4

0801105c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011064:	2300      	movs	r3, #0
 8011066:	60fb      	str	r3, [r7, #12]
 8011068:	e01e      	b.n	80110a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801106a:	4913      	ldr	r1, [pc, #76]	; (80110b8 <etharp_cleanup_netif+0x5c>)
 801106c:	68fa      	ldr	r2, [r7, #12]
 801106e:	4613      	mov	r3, r2
 8011070:	005b      	lsls	r3, r3, #1
 8011072:	4413      	add	r3, r2
 8011074:	00db      	lsls	r3, r3, #3
 8011076:	440b      	add	r3, r1
 8011078:	3314      	adds	r3, #20
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801107e:	7afb      	ldrb	r3, [r7, #11]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00e      	beq.n	80110a2 <etharp_cleanup_netif+0x46>
 8011084:	490c      	ldr	r1, [pc, #48]	; (80110b8 <etharp_cleanup_netif+0x5c>)
 8011086:	68fa      	ldr	r2, [r7, #12]
 8011088:	4613      	mov	r3, r2
 801108a:	005b      	lsls	r3, r3, #1
 801108c:	4413      	add	r3, r2
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	440b      	add	r3, r1
 8011092:	3308      	adds	r3, #8
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	429a      	cmp	r2, r3
 801109a:	d102      	bne.n	80110a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801109c:	68f8      	ldr	r0, [r7, #12]
 801109e:	f7ff fce5 	bl	8010a6c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	3301      	adds	r3, #1
 80110a6:	60fb      	str	r3, [r7, #12]
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2b09      	cmp	r3, #9
 80110ac:	dddd      	ble.n	801106a <etharp_cleanup_netif+0xe>
    }
  }
}
 80110ae:	bf00      	nop
 80110b0:	bf00      	nop
 80110b2:	3710      	adds	r7, #16
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	200005e4 	.word	0x200005e4

080110bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80110bc:	b5b0      	push	{r4, r5, r7, lr}
 80110be:	b08a      	sub	sp, #40	; 0x28
 80110c0:	af04      	add	r7, sp, #16
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d107      	bne.n	80110dc <etharp_input+0x20>
 80110cc:	4b4c      	ldr	r3, [pc, #304]	; (8011200 <etharp_input+0x144>)
 80110ce:	f240 228a 	movw	r2, #650	; 0x28a
 80110d2:	494c      	ldr	r1, [pc, #304]	; (8011204 <etharp_input+0x148>)
 80110d4:	484c      	ldr	r0, [pc, #304]	; (8011208 <etharp_input+0x14c>)
 80110d6:	f002 fabb 	bl	8013650 <iprintf>
 80110da:	e08d      	b.n	80111f8 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110ec:	d10c      	bne.n	8011108 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80110f2:	2b06      	cmp	r3, #6
 80110f4:	d108      	bne.n	8011108 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80110fa:	2b04      	cmp	r3, #4
 80110fc:	d104      	bne.n	8011108 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	885b      	ldrh	r3, [r3, #2]
 8011102:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011104:	2b08      	cmp	r3, #8
 8011106:	d00f      	beq.n	8011128 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8011108:	4b40      	ldr	r3, [pc, #256]	; (801120c <etharp_input+0x150>)
 801110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801110c:	3301      	adds	r3, #1
 801110e:	b29a      	uxth	r2, r3
 8011110:	4b3e      	ldr	r3, [pc, #248]	; (801120c <etharp_input+0x150>)
 8011112:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8011114:	4b3d      	ldr	r3, [pc, #244]	; (801120c <etharp_input+0x150>)
 8011116:	8bdb      	ldrh	r3, [r3, #30]
 8011118:	3301      	adds	r3, #1
 801111a:	b29a      	uxth	r2, r3
 801111c:	4b3b      	ldr	r3, [pc, #236]	; (801120c <etharp_input+0x150>)
 801111e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f7f6 fbad 	bl	8007880 <pbuf_free>
    return;
 8011126:	e067      	b.n	80111f8 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 8011128:	4b38      	ldr	r3, [pc, #224]	; (801120c <etharp_input+0x150>)
 801112a:	8b5b      	ldrh	r3, [r3, #26]
 801112c:	3301      	adds	r3, #1
 801112e:	b29a      	uxth	r2, r3
 8011130:	4b36      	ldr	r3, [pc, #216]	; (801120c <etharp_input+0x150>)
 8011132:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	330e      	adds	r3, #14
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	3318      	adds	r3, #24
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	3304      	adds	r3, #4
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d102      	bne.n	8011154 <etharp_input+0x98>
    for_us = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	75fb      	strb	r3, [r7, #23]
 8011152:	e009      	b.n	8011168 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011154:	68ba      	ldr	r2, [r7, #8]
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	3304      	adds	r3, #4
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	429a      	cmp	r2, r3
 801115e:	bf0c      	ite	eq
 8011160:	2301      	moveq	r3, #1
 8011162:	2300      	movne	r3, #0
 8011164:	b2db      	uxtb	r3, r3
 8011166:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	f103 0208 	add.w	r2, r3, #8
 801116e:	7dfb      	ldrb	r3, [r7, #23]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d001      	beq.n	8011178 <etharp_input+0xbc>
 8011174:	2301      	movs	r3, #1
 8011176:	e000      	b.n	801117a <etharp_input+0xbe>
 8011178:	2302      	movs	r3, #2
 801117a:	f107 010c 	add.w	r1, r7, #12
 801117e:	6838      	ldr	r0, [r7, #0]
 8011180:	f7ff fec6 	bl	8010f10 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	88db      	ldrh	r3, [r3, #6]
 8011188:	b29b      	uxth	r3, r3
 801118a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801118e:	d003      	beq.n	8011198 <etharp_input+0xdc>
 8011190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011194:	d01e      	beq.n	80111d4 <etharp_input+0x118>
 8011196:	e024      	b.n	80111e2 <etharp_input+0x126>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 8011198:	7dfb      	ldrb	r3, [r7, #23]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d028      	beq.n	80111f0 <etharp_input+0x134>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80111b4:	693a      	ldr	r2, [r7, #16]
 80111b6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80111b8:	2102      	movs	r1, #2
 80111ba:	9103      	str	r1, [sp, #12]
 80111bc:	f107 010c 	add.w	r1, r7, #12
 80111c0:	9102      	str	r1, [sp, #8]
 80111c2:	9201      	str	r2, [sp, #4]
 80111c4:	9300      	str	r3, [sp, #0]
 80111c6:	462b      	mov	r3, r5
 80111c8:	4622      	mov	r2, r4
 80111ca:	4601      	mov	r1, r0
 80111cc:	6838      	ldr	r0, [r7, #0]
 80111ce:	f000 fb11 	bl	80117f4 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 80111d2:	e00d      	b.n	80111f0 <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 80111d4:	f107 030c 	add.w	r3, r7, #12
 80111d8:	4619      	mov	r1, r3
 80111da:	6838      	ldr	r0, [r7, #0]
 80111dc:	f7fe f9ea 	bl	800f5b4 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 80111e0:	e007      	b.n	80111f2 <etharp_input+0x136>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 80111e2:	4b0a      	ldr	r3, [pc, #40]	; (801120c <etharp_input+0x150>)
 80111e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80111e6:	3301      	adds	r3, #1
 80111e8:	b29a      	uxth	r2, r3
 80111ea:	4b08      	ldr	r3, [pc, #32]	; (801120c <etharp_input+0x150>)
 80111ec:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 80111ee:	e000      	b.n	80111f2 <etharp_input+0x136>
      break;
 80111f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f7f6 fb44 	bl	8007880 <pbuf_free>
}
 80111f8:	3718      	adds	r7, #24
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bdb0      	pop	{r4, r5, r7, pc}
 80111fe:	bf00      	nop
 8011200:	080172c8 	.word	0x080172c8
 8011204:	08017418 	.word	0x08017418
 8011208:	08017340 	.word	0x08017340
 801120c:	20007a4c 	.word	0x20007a4c

08011210 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b086      	sub	sp, #24
 8011214:	af02      	add	r7, sp, #8
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	4613      	mov	r3, r2
 801121c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801121e:	79fa      	ldrb	r2, [r7, #7]
 8011220:	4944      	ldr	r1, [pc, #272]	; (8011334 <etharp_output_to_arp_index+0x124>)
 8011222:	4613      	mov	r3, r2
 8011224:	005b      	lsls	r3, r3, #1
 8011226:	4413      	add	r3, r2
 8011228:	00db      	lsls	r3, r3, #3
 801122a:	440b      	add	r3, r1
 801122c:	3314      	adds	r3, #20
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	2b01      	cmp	r3, #1
 8011232:	d806      	bhi.n	8011242 <etharp_output_to_arp_index+0x32>
 8011234:	4b40      	ldr	r3, [pc, #256]	; (8011338 <etharp_output_to_arp_index+0x128>)
 8011236:	f240 22ee 	movw	r2, #750	; 0x2ee
 801123a:	4940      	ldr	r1, [pc, #256]	; (801133c <etharp_output_to_arp_index+0x12c>)
 801123c:	4840      	ldr	r0, [pc, #256]	; (8011340 <etharp_output_to_arp_index+0x130>)
 801123e:	f002 fa07 	bl	8013650 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011242:	79fa      	ldrb	r2, [r7, #7]
 8011244:	493b      	ldr	r1, [pc, #236]	; (8011334 <etharp_output_to_arp_index+0x124>)
 8011246:	4613      	mov	r3, r2
 8011248:	005b      	lsls	r3, r3, #1
 801124a:	4413      	add	r3, r2
 801124c:	00db      	lsls	r3, r3, #3
 801124e:	440b      	add	r3, r1
 8011250:	3314      	adds	r3, #20
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	2b02      	cmp	r3, #2
 8011256:	d153      	bne.n	8011300 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011258:	79fa      	ldrb	r2, [r7, #7]
 801125a:	4936      	ldr	r1, [pc, #216]	; (8011334 <etharp_output_to_arp_index+0x124>)
 801125c:	4613      	mov	r3, r2
 801125e:	005b      	lsls	r3, r3, #1
 8011260:	4413      	add	r3, r2
 8011262:	00db      	lsls	r3, r3, #3
 8011264:	440b      	add	r3, r1
 8011266:	3312      	adds	r3, #18
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801126e:	d919      	bls.n	80112a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011270:	79fa      	ldrb	r2, [r7, #7]
 8011272:	4613      	mov	r3, r2
 8011274:	005b      	lsls	r3, r3, #1
 8011276:	4413      	add	r3, r2
 8011278:	00db      	lsls	r3, r3, #3
 801127a:	4a2e      	ldr	r2, [pc, #184]	; (8011334 <etharp_output_to_arp_index+0x124>)
 801127c:	4413      	add	r3, r2
 801127e:	3304      	adds	r3, #4
 8011280:	4619      	mov	r1, r3
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f000 fb72 	bl	801196c <etharp_request>
 8011288:	4603      	mov	r3, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d138      	bne.n	8011300 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801128e:	79fa      	ldrb	r2, [r7, #7]
 8011290:	4928      	ldr	r1, [pc, #160]	; (8011334 <etharp_output_to_arp_index+0x124>)
 8011292:	4613      	mov	r3, r2
 8011294:	005b      	lsls	r3, r3, #1
 8011296:	4413      	add	r3, r2
 8011298:	00db      	lsls	r3, r3, #3
 801129a:	440b      	add	r3, r1
 801129c:	3314      	adds	r3, #20
 801129e:	2203      	movs	r2, #3
 80112a0:	701a      	strb	r2, [r3, #0]
 80112a2:	e02d      	b.n	8011300 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80112a4:	79fa      	ldrb	r2, [r7, #7]
 80112a6:	4923      	ldr	r1, [pc, #140]	; (8011334 <etharp_output_to_arp_index+0x124>)
 80112a8:	4613      	mov	r3, r2
 80112aa:	005b      	lsls	r3, r3, #1
 80112ac:	4413      	add	r3, r2
 80112ae:	00db      	lsls	r3, r3, #3
 80112b0:	440b      	add	r3, r1
 80112b2:	3312      	adds	r3, #18
 80112b4:	881b      	ldrh	r3, [r3, #0]
 80112b6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80112ba:	d321      	bcc.n	8011300 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80112bc:	79fa      	ldrb	r2, [r7, #7]
 80112be:	4613      	mov	r3, r2
 80112c0:	005b      	lsls	r3, r3, #1
 80112c2:	4413      	add	r3, r2
 80112c4:	00db      	lsls	r3, r3, #3
 80112c6:	4a1b      	ldr	r2, [pc, #108]	; (8011334 <etharp_output_to_arp_index+0x124>)
 80112c8:	4413      	add	r3, r2
 80112ca:	1d19      	adds	r1, r3, #4
 80112cc:	79fa      	ldrb	r2, [r7, #7]
 80112ce:	4613      	mov	r3, r2
 80112d0:	005b      	lsls	r3, r3, #1
 80112d2:	4413      	add	r3, r2
 80112d4:	00db      	lsls	r3, r3, #3
 80112d6:	3308      	adds	r3, #8
 80112d8:	4a16      	ldr	r2, [pc, #88]	; (8011334 <etharp_output_to_arp_index+0x124>)
 80112da:	4413      	add	r3, r2
 80112dc:	3304      	adds	r3, #4
 80112de:	461a      	mov	r2, r3
 80112e0:	68f8      	ldr	r0, [r7, #12]
 80112e2:	f000 fb21 	bl	8011928 <etharp_request_dst>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d109      	bne.n	8011300 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80112ec:	79fa      	ldrb	r2, [r7, #7]
 80112ee:	4911      	ldr	r1, [pc, #68]	; (8011334 <etharp_output_to_arp_index+0x124>)
 80112f0:	4613      	mov	r3, r2
 80112f2:	005b      	lsls	r3, r3, #1
 80112f4:	4413      	add	r3, r2
 80112f6:	00db      	lsls	r3, r3, #3
 80112f8:	440b      	add	r3, r1
 80112fa:	3314      	adds	r3, #20
 80112fc:	2203      	movs	r2, #3
 80112fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011306:	79fa      	ldrb	r2, [r7, #7]
 8011308:	4613      	mov	r3, r2
 801130a:	005b      	lsls	r3, r3, #1
 801130c:	4413      	add	r3, r2
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	3308      	adds	r3, #8
 8011312:	4a08      	ldr	r2, [pc, #32]	; (8011334 <etharp_output_to_arp_index+0x124>)
 8011314:	4413      	add	r3, r2
 8011316:	3304      	adds	r3, #4
 8011318:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801131c:	9200      	str	r2, [sp, #0]
 801131e:	460a      	mov	r2, r1
 8011320:	68b9      	ldr	r1, [r7, #8]
 8011322:	68f8      	ldr	r0, [r7, #12]
 8011324:	f002 f8e2 	bl	80134ec <ethernet_output>
 8011328:	4603      	mov	r3, r0
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	200005e4 	.word	0x200005e4
 8011338:	080172c8 	.word	0x080172c8
 801133c:	08017438 	.word	0x08017438
 8011340:	08017340 	.word	0x08017340

08011344 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b08a      	sub	sp, #40	; 0x28
 8011348:	af02      	add	r7, sp, #8
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d106      	bne.n	8011368 <etharp_output+0x24>
 801135a:	4b76      	ldr	r3, [pc, #472]	; (8011534 <etharp_output+0x1f0>)
 801135c:	f240 321e 	movw	r2, #798	; 0x31e
 8011360:	4975      	ldr	r1, [pc, #468]	; (8011538 <etharp_output+0x1f4>)
 8011362:	4876      	ldr	r0, [pc, #472]	; (801153c <etharp_output+0x1f8>)
 8011364:	f002 f974 	bl	8013650 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d106      	bne.n	801137c <etharp_output+0x38>
 801136e:	4b71      	ldr	r3, [pc, #452]	; (8011534 <etharp_output+0x1f0>)
 8011370:	f240 321f 	movw	r2, #799	; 0x31f
 8011374:	4972      	ldr	r1, [pc, #456]	; (8011540 <etharp_output+0x1fc>)
 8011376:	4871      	ldr	r0, [pc, #452]	; (801153c <etharp_output+0x1f8>)
 8011378:	f002 f96a 	bl	8013650 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d106      	bne.n	8011390 <etharp_output+0x4c>
 8011382:	4b6c      	ldr	r3, [pc, #432]	; (8011534 <etharp_output+0x1f0>)
 8011384:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011388:	496e      	ldr	r1, [pc, #440]	; (8011544 <etharp_output+0x200>)
 801138a:	486c      	ldr	r0, [pc, #432]	; (801153c <etharp_output+0x1f8>)
 801138c:	f002 f960 	bl	8013650 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	68f9      	ldr	r1, [r7, #12]
 8011396:	4618      	mov	r0, r3
 8011398:	f001 f8a6 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d002      	beq.n	80113a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80113a2:	4b69      	ldr	r3, [pc, #420]	; (8011548 <etharp_output+0x204>)
 80113a4:	61fb      	str	r3, [r7, #28]
 80113a6:	e0b5      	b.n	8011514 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113b0:	2be0      	cmp	r3, #224	; 0xe0
 80113b2:	d118      	bne.n	80113e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80113b4:	2301      	movs	r3, #1
 80113b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80113b8:	2300      	movs	r3, #0
 80113ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80113bc:	235e      	movs	r3, #94	; 0x5e
 80113be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	3301      	adds	r3, #1
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	3302      	adds	r3, #2
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	3303      	adds	r3, #3
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80113de:	f107 0310 	add.w	r3, r7, #16
 80113e2:	61fb      	str	r3, [r7, #28]
 80113e4:	e096      	b.n	8011514 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	3304      	adds	r3, #4
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	405a      	eors	r2, r3
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	3308      	adds	r3, #8
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4013      	ands	r3, r2
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d012      	beq.n	8011424 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011404:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011408:	4293      	cmp	r3, r2
 801140a:	d00b      	beq.n	8011424 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	330c      	adds	r3, #12
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d003      	beq.n	801141e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	330c      	adds	r3, #12
 801141a:	61bb      	str	r3, [r7, #24]
 801141c:	e002      	b.n	8011424 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801141e:	f06f 0303 	mvn.w	r3, #3
 8011422:	e083      	b.n	801152c <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011424:	4b49      	ldr	r3, [pc, #292]	; (801154c <etharp_output+0x208>)
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	4619      	mov	r1, r3
 801142a:	4a49      	ldr	r2, [pc, #292]	; (8011550 <etharp_output+0x20c>)
 801142c:	460b      	mov	r3, r1
 801142e:	005b      	lsls	r3, r3, #1
 8011430:	440b      	add	r3, r1
 8011432:	00db      	lsls	r3, r3, #3
 8011434:	4413      	add	r3, r2
 8011436:	3314      	adds	r3, #20
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	2b01      	cmp	r3, #1
 801143c:	d92b      	bls.n	8011496 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801143e:	4b43      	ldr	r3, [pc, #268]	; (801154c <etharp_output+0x208>)
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	4619      	mov	r1, r3
 8011444:	4a42      	ldr	r2, [pc, #264]	; (8011550 <etharp_output+0x20c>)
 8011446:	460b      	mov	r3, r1
 8011448:	005b      	lsls	r3, r3, #1
 801144a:	440b      	add	r3, r1
 801144c:	00db      	lsls	r3, r3, #3
 801144e:	4413      	add	r3, r2
 8011450:	3308      	adds	r3, #8
 8011452:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011454:	68fa      	ldr	r2, [r7, #12]
 8011456:	429a      	cmp	r2, r3
 8011458:	d11d      	bne.n	8011496 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	4b3b      	ldr	r3, [pc, #236]	; (801154c <etharp_output+0x208>)
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	4618      	mov	r0, r3
 8011464:	493a      	ldr	r1, [pc, #232]	; (8011550 <etharp_output+0x20c>)
 8011466:	4603      	mov	r3, r0
 8011468:	005b      	lsls	r3, r3, #1
 801146a:	4403      	add	r3, r0
 801146c:	00db      	lsls	r3, r3, #3
 801146e:	440b      	add	r3, r1
 8011470:	3304      	adds	r3, #4
 8011472:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011474:	429a      	cmp	r2, r3
 8011476:	d10e      	bne.n	8011496 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8011478:	4b36      	ldr	r3, [pc, #216]	; (8011554 <etharp_output+0x210>)
 801147a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801147c:	3301      	adds	r3, #1
 801147e:	b29a      	uxth	r2, r3
 8011480:	4b34      	ldr	r3, [pc, #208]	; (8011554 <etharp_output+0x210>)
 8011482:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011484:	4b31      	ldr	r3, [pc, #196]	; (801154c <etharp_output+0x208>)
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	461a      	mov	r2, r3
 801148a:	68b9      	ldr	r1, [r7, #8]
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f7ff febf 	bl	8011210 <etharp_output_to_arp_index>
 8011492:	4603      	mov	r3, r0
 8011494:	e04a      	b.n	801152c <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011496:	2300      	movs	r3, #0
 8011498:	75fb      	strb	r3, [r7, #23]
 801149a:	e031      	b.n	8011500 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801149c:	7dfa      	ldrb	r2, [r7, #23]
 801149e:	492c      	ldr	r1, [pc, #176]	; (8011550 <etharp_output+0x20c>)
 80114a0:	4613      	mov	r3, r2
 80114a2:	005b      	lsls	r3, r3, #1
 80114a4:	4413      	add	r3, r2
 80114a6:	00db      	lsls	r3, r3, #3
 80114a8:	440b      	add	r3, r1
 80114aa:	3314      	adds	r3, #20
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	d923      	bls.n	80114fa <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80114b2:	7dfa      	ldrb	r2, [r7, #23]
 80114b4:	4926      	ldr	r1, [pc, #152]	; (8011550 <etharp_output+0x20c>)
 80114b6:	4613      	mov	r3, r2
 80114b8:	005b      	lsls	r3, r3, #1
 80114ba:	4413      	add	r3, r2
 80114bc:	00db      	lsls	r3, r3, #3
 80114be:	440b      	add	r3, r1
 80114c0:	3308      	adds	r3, #8
 80114c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d117      	bne.n	80114fa <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	6819      	ldr	r1, [r3, #0]
 80114ce:	7dfa      	ldrb	r2, [r7, #23]
 80114d0:	481f      	ldr	r0, [pc, #124]	; (8011550 <etharp_output+0x20c>)
 80114d2:	4613      	mov	r3, r2
 80114d4:	005b      	lsls	r3, r3, #1
 80114d6:	4413      	add	r3, r2
 80114d8:	00db      	lsls	r3, r3, #3
 80114da:	4403      	add	r3, r0
 80114dc:	3304      	adds	r3, #4
 80114de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80114e0:	4299      	cmp	r1, r3
 80114e2:	d10a      	bne.n	80114fa <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80114e4:	4a19      	ldr	r2, [pc, #100]	; (801154c <etharp_output+0x208>)
 80114e6:	7dfb      	ldrb	r3, [r7, #23]
 80114e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80114ea:	7dfb      	ldrb	r3, [r7, #23]
 80114ec:	461a      	mov	r2, r3
 80114ee:	68b9      	ldr	r1, [r7, #8]
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f7ff fe8d 	bl	8011210 <etharp_output_to_arp_index>
 80114f6:	4603      	mov	r3, r0
 80114f8:	e018      	b.n	801152c <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80114fa:	7dfb      	ldrb	r3, [r7, #23]
 80114fc:	3301      	adds	r3, #1
 80114fe:	75fb      	strb	r3, [r7, #23]
 8011500:	7dfb      	ldrb	r3, [r7, #23]
 8011502:	2b09      	cmp	r3, #9
 8011504:	d9ca      	bls.n	801149c <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011506:	68ba      	ldr	r2, [r7, #8]
 8011508:	69b9      	ldr	r1, [r7, #24]
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f000 f824 	bl	8011558 <etharp_query>
 8011510:	4603      	mov	r3, r0
 8011512:	e00b      	b.n	801152c <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801151a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	68b9      	ldr	r1, [r7, #8]
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f001 ffe1 	bl	80134ec <ethernet_output>
 801152a:	4603      	mov	r3, r0
}
 801152c:	4618      	mov	r0, r3
 801152e:	3720      	adds	r7, #32
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	080172c8 	.word	0x080172c8
 8011538:	08017418 	.word	0x08017418
 801153c:	08017340 	.word	0x08017340
 8011540:	08017468 	.word	0x08017468
 8011544:	08017408 	.word	0x08017408
 8011548:	08041e54 	.word	0x08041e54
 801154c:	200006d4 	.word	0x200006d4
 8011550:	200005e4 	.word	0x200005e4
 8011554:	20007a4c 	.word	0x20007a4c

08011558 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b08c      	sub	sp, #48	; 0x30
 801155c:	af02      	add	r7, sp, #8
 801155e:	60f8      	str	r0, [r7, #12]
 8011560:	60b9      	str	r1, [r7, #8]
 8011562:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	332a      	adds	r3, #42	; 0x2a
 8011568:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801156a:	23ff      	movs	r3, #255	; 0xff
 801156c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011570:	2300      	movs	r3, #0
 8011572:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	68f9      	ldr	r1, [r7, #12]
 801157a:	4618      	mov	r0, r3
 801157c:	f000 ffb4 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d10c      	bne.n	80115a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801158e:	2be0      	cmp	r3, #224	; 0xe0
 8011590:	d006      	beq.n	80115a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d003      	beq.n	80115a0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d102      	bne.n	80115a6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80115a0:	f06f 030f 	mvn.w	r3, #15
 80115a4:	e110      	b.n	80117c8 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80115a6:	68fa      	ldr	r2, [r7, #12]
 80115a8:	2101      	movs	r1, #1
 80115aa:	68b8      	ldr	r0, [r7, #8]
 80115ac:	f7ff fb38 	bl	8010c20 <etharp_find_entry>
 80115b0:	4603      	mov	r3, r0
 80115b2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80115b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	da0b      	bge.n	80115d4 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d005      	beq.n	80115ce <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 80115c2:	4b83      	ldr	r3, [pc, #524]	; (80117d0 <etharp_query+0x278>)
 80115c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80115c6:	3301      	adds	r3, #1
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	4b81      	ldr	r3, [pc, #516]	; (80117d0 <etharp_query+0x278>)
 80115cc:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 80115ce:	8a7b      	ldrh	r3, [r7, #18]
 80115d0:	b25b      	sxtb	r3, r3
 80115d2:	e0f9      	b.n	80117c8 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80115d4:	8a7b      	ldrh	r3, [r7, #18]
 80115d6:	2b7e      	cmp	r3, #126	; 0x7e
 80115d8:	d906      	bls.n	80115e8 <etharp_query+0x90>
 80115da:	4b7e      	ldr	r3, [pc, #504]	; (80117d4 <etharp_query+0x27c>)
 80115dc:	f240 32c1 	movw	r2, #961	; 0x3c1
 80115e0:	497d      	ldr	r1, [pc, #500]	; (80117d8 <etharp_query+0x280>)
 80115e2:	487e      	ldr	r0, [pc, #504]	; (80117dc <etharp_query+0x284>)
 80115e4:	f002 f834 	bl	8013650 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80115e8:	8a7b      	ldrh	r3, [r7, #18]
 80115ea:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80115ec:	7c7a      	ldrb	r2, [r7, #17]
 80115ee:	497c      	ldr	r1, [pc, #496]	; (80117e0 <etharp_query+0x288>)
 80115f0:	4613      	mov	r3, r2
 80115f2:	005b      	lsls	r3, r3, #1
 80115f4:	4413      	add	r3, r2
 80115f6:	00db      	lsls	r3, r3, #3
 80115f8:	440b      	add	r3, r1
 80115fa:	3314      	adds	r3, #20
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d115      	bne.n	801162e <etharp_query+0xd6>
    is_new_entry = 1;
 8011602:	2301      	movs	r3, #1
 8011604:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011606:	7c7a      	ldrb	r2, [r7, #17]
 8011608:	4975      	ldr	r1, [pc, #468]	; (80117e0 <etharp_query+0x288>)
 801160a:	4613      	mov	r3, r2
 801160c:	005b      	lsls	r3, r3, #1
 801160e:	4413      	add	r3, r2
 8011610:	00db      	lsls	r3, r3, #3
 8011612:	440b      	add	r3, r1
 8011614:	3314      	adds	r3, #20
 8011616:	2201      	movs	r2, #1
 8011618:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801161a:	7c7a      	ldrb	r2, [r7, #17]
 801161c:	4970      	ldr	r1, [pc, #448]	; (80117e0 <etharp_query+0x288>)
 801161e:	4613      	mov	r3, r2
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	4413      	add	r3, r2
 8011624:	00db      	lsls	r3, r3, #3
 8011626:	440b      	add	r3, r1
 8011628:	3308      	adds	r3, #8
 801162a:	68fa      	ldr	r2, [r7, #12]
 801162c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801162e:	7c7a      	ldrb	r2, [r7, #17]
 8011630:	496b      	ldr	r1, [pc, #428]	; (80117e0 <etharp_query+0x288>)
 8011632:	4613      	mov	r3, r2
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	4413      	add	r3, r2
 8011638:	00db      	lsls	r3, r3, #3
 801163a:	440b      	add	r3, r1
 801163c:	3314      	adds	r3, #20
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	2b01      	cmp	r3, #1
 8011642:	d011      	beq.n	8011668 <etharp_query+0x110>
 8011644:	7c7a      	ldrb	r2, [r7, #17]
 8011646:	4966      	ldr	r1, [pc, #408]	; (80117e0 <etharp_query+0x288>)
 8011648:	4613      	mov	r3, r2
 801164a:	005b      	lsls	r3, r3, #1
 801164c:	4413      	add	r3, r2
 801164e:	00db      	lsls	r3, r3, #3
 8011650:	440b      	add	r3, r1
 8011652:	3314      	adds	r3, #20
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	2b01      	cmp	r3, #1
 8011658:	d806      	bhi.n	8011668 <etharp_query+0x110>
 801165a:	4b5e      	ldr	r3, [pc, #376]	; (80117d4 <etharp_query+0x27c>)
 801165c:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011660:	4960      	ldr	r1, [pc, #384]	; (80117e4 <etharp_query+0x28c>)
 8011662:	485e      	ldr	r0, [pc, #376]	; (80117dc <etharp_query+0x284>)
 8011664:	f001 fff4 	bl	8013650 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011668:	6a3b      	ldr	r3, [r7, #32]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d102      	bne.n	8011674 <etharp_query+0x11c>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10c      	bne.n	801168e <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011674:	68b9      	ldr	r1, [r7, #8]
 8011676:	68f8      	ldr	r0, [r7, #12]
 8011678:	f000 f978 	bl	801196c <etharp_request>
 801167c:	4603      	mov	r3, r0
 801167e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d102      	bne.n	801168e <etharp_query+0x136>
      return result;
 8011688:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801168c:	e09c      	b.n	80117c8 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d106      	bne.n	80116a2 <etharp_query+0x14a>
 8011694:	4b4f      	ldr	r3, [pc, #316]	; (80117d4 <etharp_query+0x27c>)
 8011696:	f240 32e1 	movw	r2, #993	; 0x3e1
 801169a:	4953      	ldr	r1, [pc, #332]	; (80117e8 <etharp_query+0x290>)
 801169c:	484f      	ldr	r0, [pc, #316]	; (80117dc <etharp_query+0x284>)
 801169e:	f001 ffd7 	bl	8013650 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80116a2:	7c7a      	ldrb	r2, [r7, #17]
 80116a4:	494e      	ldr	r1, [pc, #312]	; (80117e0 <etharp_query+0x288>)
 80116a6:	4613      	mov	r3, r2
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	4413      	add	r3, r2
 80116ac:	00db      	lsls	r3, r3, #3
 80116ae:	440b      	add	r3, r1
 80116b0:	3314      	adds	r3, #20
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d917      	bls.n	80116e8 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80116b8:	4a4c      	ldr	r2, [pc, #304]	; (80117ec <etharp_query+0x294>)
 80116ba:	7c7b      	ldrb	r3, [r7, #17]
 80116bc:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80116be:	7c7a      	ldrb	r2, [r7, #17]
 80116c0:	4613      	mov	r3, r2
 80116c2:	005b      	lsls	r3, r3, #1
 80116c4:	4413      	add	r3, r2
 80116c6:	00db      	lsls	r3, r3, #3
 80116c8:	3308      	adds	r3, #8
 80116ca:	4a45      	ldr	r2, [pc, #276]	; (80117e0 <etharp_query+0x288>)
 80116cc:	4413      	add	r3, r2
 80116ce:	3304      	adds	r3, #4
 80116d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116d4:	9200      	str	r2, [sp, #0]
 80116d6:	697a      	ldr	r2, [r7, #20]
 80116d8:	6879      	ldr	r1, [r7, #4]
 80116da:	68f8      	ldr	r0, [r7, #12]
 80116dc:	f001 ff06 	bl	80134ec <ethernet_output>
 80116e0:	4603      	mov	r3, r0
 80116e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116e6:	e06d      	b.n	80117c4 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80116e8:	7c7a      	ldrb	r2, [r7, #17]
 80116ea:	493d      	ldr	r1, [pc, #244]	; (80117e0 <etharp_query+0x288>)
 80116ec:	4613      	mov	r3, r2
 80116ee:	005b      	lsls	r3, r3, #1
 80116f0:	4413      	add	r3, r2
 80116f2:	00db      	lsls	r3, r3, #3
 80116f4:	440b      	add	r3, r1
 80116f6:	3314      	adds	r3, #20
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d162      	bne.n	80117c4 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80116fe:	2300      	movs	r3, #0
 8011700:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011706:	e01c      	b.n	8011742 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	895a      	ldrh	r2, [r3, #10]
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	891b      	ldrh	r3, [r3, #8]
 8011710:	429a      	cmp	r2, r3
 8011712:	d10a      	bne.n	801172a <etharp_query+0x1d2>
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d006      	beq.n	801172a <etharp_query+0x1d2>
 801171c:	4b2d      	ldr	r3, [pc, #180]	; (80117d4 <etharp_query+0x27c>)
 801171e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011722:	4933      	ldr	r1, [pc, #204]	; (80117f0 <etharp_query+0x298>)
 8011724:	482d      	ldr	r0, [pc, #180]	; (80117dc <etharp_query+0x284>)
 8011726:	f001 ff93 	bl	8013650 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801172a:	69fb      	ldr	r3, [r7, #28]
 801172c:	7b1b      	ldrb	r3, [r3, #12]
 801172e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011732:	2b00      	cmp	r3, #0
 8011734:	d002      	beq.n	801173c <etharp_query+0x1e4>
        copy_needed = 1;
 8011736:	2301      	movs	r3, #1
 8011738:	61bb      	str	r3, [r7, #24]
        break;
 801173a:	e005      	b.n	8011748 <etharp_query+0x1f0>
      }
      p = p->next;
 801173c:	69fb      	ldr	r3, [r7, #28]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d1df      	bne.n	8011708 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 8011748:	69bb      	ldr	r3, [r7, #24]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d007      	beq.n	801175e <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011754:	200e      	movs	r0, #14
 8011756:	f7f6 faff 	bl	8007d58 <pbuf_clone>
 801175a:	61f8      	str	r0, [r7, #28]
 801175c:	e004      	b.n	8011768 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011762:	69f8      	ldr	r0, [r7, #28]
 8011764:	f7f6 f92c 	bl	80079c0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d021      	beq.n	80117b2 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801176e:	7c7a      	ldrb	r2, [r7, #17]
 8011770:	491b      	ldr	r1, [pc, #108]	; (80117e0 <etharp_query+0x288>)
 8011772:	4613      	mov	r3, r2
 8011774:	005b      	lsls	r3, r3, #1
 8011776:	4413      	add	r3, r2
 8011778:	00db      	lsls	r3, r3, #3
 801177a:	440b      	add	r3, r1
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00a      	beq.n	8011798 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011782:	7c7a      	ldrb	r2, [r7, #17]
 8011784:	4916      	ldr	r1, [pc, #88]	; (80117e0 <etharp_query+0x288>)
 8011786:	4613      	mov	r3, r2
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	4413      	add	r3, r2
 801178c:	00db      	lsls	r3, r3, #3
 801178e:	440b      	add	r3, r1
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	4618      	mov	r0, r3
 8011794:	f7f6 f874 	bl	8007880 <pbuf_free>
      }
      arp_table[i].q = p;
 8011798:	7c7a      	ldrb	r2, [r7, #17]
 801179a:	4911      	ldr	r1, [pc, #68]	; (80117e0 <etharp_query+0x288>)
 801179c:	4613      	mov	r3, r2
 801179e:	005b      	lsls	r3, r3, #1
 80117a0:	4413      	add	r3, r2
 80117a2:	00db      	lsls	r3, r3, #3
 80117a4:	440b      	add	r3, r1
 80117a6:	69fa      	ldr	r2, [r7, #28]
 80117a8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80117aa:	2300      	movs	r3, #0
 80117ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117b0:	e008      	b.n	80117c4 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 80117b2:	4b07      	ldr	r3, [pc, #28]	; (80117d0 <etharp_query+0x278>)
 80117b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80117b6:	3301      	adds	r3, #1
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <etharp_query+0x278>)
 80117bc:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80117be:	23ff      	movs	r3, #255	; 0xff
 80117c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80117c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3728      	adds	r7, #40	; 0x28
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	20007a4c 	.word	0x20007a4c
 80117d4:	080172c8 	.word	0x080172c8
 80117d8:	08017474 	.word	0x08017474
 80117dc:	08017340 	.word	0x08017340
 80117e0:	200005e4 	.word	0x200005e4
 80117e4:	08017484 	.word	0x08017484
 80117e8:	08017468 	.word	0x08017468
 80117ec:	200006d4 	.word	0x200006d4
 80117f0:	080174ac 	.word	0x080174ac

080117f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b08a      	sub	sp, #40	; 0x28
 80117f8:	af02      	add	r7, sp, #8
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]
 8011800:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011802:	2300      	movs	r3, #0
 8011804:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d106      	bne.n	801181a <etharp_raw+0x26>
 801180c:	4b40      	ldr	r3, [pc, #256]	; (8011910 <etharp_raw+0x11c>)
 801180e:	f240 4257 	movw	r2, #1111	; 0x457
 8011812:	4940      	ldr	r1, [pc, #256]	; (8011914 <etharp_raw+0x120>)
 8011814:	4840      	ldr	r0, [pc, #256]	; (8011918 <etharp_raw+0x124>)
 8011816:	f001 ff1b 	bl	8013650 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801181a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801181e:	211c      	movs	r1, #28
 8011820:	200e      	movs	r0, #14
 8011822:	f7f5 fd8d 	bl	8007340 <pbuf_alloc>
 8011826:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011828:	69bb      	ldr	r3, [r7, #24]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d108      	bne.n	8011840 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801182e:	4b3b      	ldr	r3, [pc, #236]	; (801191c <etharp_raw+0x128>)
 8011830:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011832:	3301      	adds	r3, #1
 8011834:	b29a      	uxth	r2, r3
 8011836:	4b39      	ldr	r3, [pc, #228]	; (801191c <etharp_raw+0x128>)
 8011838:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 801183a:	f04f 33ff 	mov.w	r3, #4294967295
 801183e:	e063      	b.n	8011908 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	895b      	ldrh	r3, [r3, #10]
 8011844:	2b1b      	cmp	r3, #27
 8011846:	d806      	bhi.n	8011856 <etharp_raw+0x62>
 8011848:	4b31      	ldr	r3, [pc, #196]	; (8011910 <etharp_raw+0x11c>)
 801184a:	f240 4262 	movw	r2, #1122	; 0x462
 801184e:	4934      	ldr	r1, [pc, #208]	; (8011920 <etharp_raw+0x12c>)
 8011850:	4831      	ldr	r0, [pc, #196]	; (8011918 <etharp_raw+0x124>)
 8011852:	f001 fefd 	bl	8013650 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801185c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801185e:	4618      	mov	r0, r3
 8011860:	f7f4 fb44 	bl	8005eec <lwip_htons>
 8011864:	4603      	mov	r3, r0
 8011866:	461a      	mov	r2, r3
 8011868:	697b      	ldr	r3, [r7, #20]
 801186a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011872:	2b06      	cmp	r3, #6
 8011874:	d006      	beq.n	8011884 <etharp_raw+0x90>
 8011876:	4b26      	ldr	r3, [pc, #152]	; (8011910 <etharp_raw+0x11c>)
 8011878:	f240 4269 	movw	r2, #1129	; 0x469
 801187c:	4929      	ldr	r1, [pc, #164]	; (8011924 <etharp_raw+0x130>)
 801187e:	4826      	ldr	r0, [pc, #152]	; (8011918 <etharp_raw+0x124>)
 8011880:	f001 fee6 	bl	8013650 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	3308      	adds	r3, #8
 8011888:	2206      	movs	r2, #6
 801188a:	6839      	ldr	r1, [r7, #0]
 801188c:	4618      	mov	r0, r3
 801188e:	f001 feaf 	bl	80135f0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	3312      	adds	r3, #18
 8011896:	2206      	movs	r2, #6
 8011898:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801189a:	4618      	mov	r0, r3
 801189c:	f001 fea8 	bl	80135f0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	330e      	adds	r3, #14
 80118a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118a6:	6812      	ldr	r2, [r2, #0]
 80118a8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	3318      	adds	r3, #24
 80118ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118b0:	6812      	ldr	r2, [r2, #0]
 80118b2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	2200      	movs	r2, #0
 80118b8:	701a      	strb	r2, [r3, #0]
 80118ba:	2200      	movs	r2, #0
 80118bc:	f042 0201 	orr.w	r2, r2, #1
 80118c0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	2200      	movs	r2, #0
 80118c6:	f042 0208 	orr.w	r2, r2, #8
 80118ca:	709a      	strb	r2, [r3, #2]
 80118cc:	2200      	movs	r2, #0
 80118ce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80118d0:	697b      	ldr	r3, [r7, #20]
 80118d2:	2206      	movs	r2, #6
 80118d4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2204      	movs	r2, #4
 80118da:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80118dc:	f640 0306 	movw	r3, #2054	; 0x806
 80118e0:	9300      	str	r3, [sp, #0]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	68ba      	ldr	r2, [r7, #8]
 80118e6:	69b9      	ldr	r1, [r7, #24]
 80118e8:	68f8      	ldr	r0, [r7, #12]
 80118ea:	f001 fdff 	bl	80134ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 80118ee:	4b0b      	ldr	r3, [pc, #44]	; (801191c <etharp_raw+0x128>)
 80118f0:	8b1b      	ldrh	r3, [r3, #24]
 80118f2:	3301      	adds	r3, #1
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	4b09      	ldr	r3, [pc, #36]	; (801191c <etharp_raw+0x128>)
 80118f8:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 80118fa:	69b8      	ldr	r0, [r7, #24]
 80118fc:	f7f5 ffc0 	bl	8007880 <pbuf_free>
  p = NULL;
 8011900:	2300      	movs	r3, #0
 8011902:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011904:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011908:	4618      	mov	r0, r3
 801190a:	3720      	adds	r7, #32
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	080172c8 	.word	0x080172c8
 8011914:	08017418 	.word	0x08017418
 8011918:	08017340 	.word	0x08017340
 801191c:	20007a4c 	.word	0x20007a4c
 8011920:	080174c8 	.word	0x080174c8
 8011924:	080174fc 	.word	0x080174fc

08011928 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b088      	sub	sp, #32
 801192c:	af04      	add	r7, sp, #16
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011944:	2201      	movs	r2, #1
 8011946:	9203      	str	r2, [sp, #12]
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	9202      	str	r2, [sp, #8]
 801194c:	4a06      	ldr	r2, [pc, #24]	; (8011968 <etharp_request_dst+0x40>)
 801194e:	9201      	str	r2, [sp, #4]
 8011950:	9300      	str	r3, [sp, #0]
 8011952:	4603      	mov	r3, r0
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	68f8      	ldr	r0, [r7, #12]
 8011958:	f7ff ff4c 	bl	80117f4 <etharp_raw>
 801195c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801195e:	4618      	mov	r0, r3
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}
 8011966:	bf00      	nop
 8011968:	08041e5c 	.word	0x08041e5c

0801196c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011976:	4a05      	ldr	r2, [pc, #20]	; (801198c <etharp_request+0x20>)
 8011978:	6839      	ldr	r1, [r7, #0]
 801197a:	6878      	ldr	r0, [r7, #4]
 801197c:	f7ff ffd4 	bl	8011928 <etharp_request_dst>
 8011980:	4603      	mov	r3, r0
}
 8011982:	4618      	mov	r0, r3
 8011984:	3708      	adds	r7, #8
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	08041e54 	.word	0x08041e54

08011990 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b08e      	sub	sp, #56	; 0x38
 8011994:	af04      	add	r7, sp, #16
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801199a:	4ba8      	ldr	r3, [pc, #672]	; (8011c3c <icmp_input+0x2ac>)
 801199c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119a0:	3301      	adds	r3, #1
 80119a2:	b29a      	uxth	r2, r3
 80119a4:	4ba5      	ldr	r3, [pc, #660]	; (8011c3c <icmp_input+0x2ac>)
 80119a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80119aa:	4ba5      	ldr	r3, [pc, #660]	; (8011c40 <icmp_input+0x2b0>)
 80119ac:	689b      	ldr	r3, [r3, #8]
 80119ae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	f003 030f 	and.w	r3, r3, #15
 80119b8:	b2db      	uxtb	r3, r3
 80119ba:	009b      	lsls	r3, r3, #2
 80119bc:	b2db      	uxtb	r3, r3
 80119be:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80119c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119c2:	2b13      	cmp	r3, #19
 80119c4:	f240 8112 	bls.w	8011bec <icmp_input+0x25c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	895b      	ldrh	r3, [r3, #10]
 80119cc:	2b03      	cmp	r3, #3
 80119ce:	f240 810f 	bls.w	8011bf0 <icmp_input+0x260>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80119dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	f000 80fc 	beq.w	8011bde <icmp_input+0x24e>
 80119e6:	2b08      	cmp	r3, #8
 80119e8:	f040 80e8 	bne.w	8011bbc <icmp_input+0x22c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80119ec:	4b95      	ldr	r3, [pc, #596]	; (8011c44 <icmp_input+0x2b4>)
 80119ee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80119f0:	4b93      	ldr	r3, [pc, #588]	; (8011c40 <icmp_input+0x2b0>)
 80119f2:	695b      	ldr	r3, [r3, #20]
 80119f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80119f8:	2be0      	cmp	r3, #224	; 0xe0
 80119fa:	f000 8108 	beq.w	8011c0e <icmp_input+0x27e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80119fe:	4b90      	ldr	r3, [pc, #576]	; (8011c40 <icmp_input+0x2b0>)
 8011a00:	695b      	ldr	r3, [r3, #20]
 8011a02:	4a8f      	ldr	r2, [pc, #572]	; (8011c40 <icmp_input+0x2b0>)
 8011a04:	6812      	ldr	r2, [r2, #0]
 8011a06:	4611      	mov	r1, r2
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f000 fd6d 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	f040 80fe 	bne.w	8011c12 <icmp_input+0x282>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	891b      	ldrh	r3, [r3, #8]
 8011a1a:	2b07      	cmp	r3, #7
 8011a1c:	f240 80ea 	bls.w	8011bf4 <icmp_input+0x264>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7f4 fc27 	bl	8006274 <inet_chksum_pbuf>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d00b      	beq.n	8011a44 <icmp_input+0xb4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f7f5 ff27 	bl	8007880 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 8011a32:	4b82      	ldr	r3, [pc, #520]	; (8011c3c <icmp_input+0x2ac>)
 8011a34:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011a38:	3301      	adds	r3, #1
 8011a3a:	b29a      	uxth	r2, r3
 8011a3c:	4b7f      	ldr	r3, [pc, #508]	; (8011c3c <icmp_input+0x2ac>)
 8011a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011a42:	e0f7      	b.n	8011c34 <icmp_input+0x2a4>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011a44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a46:	330e      	adds	r3, #14
 8011a48:	4619      	mov	r1, r3
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f7f5 fe82 	bl	8007754 <pbuf_add_header>
 8011a50:	4603      	mov	r3, r0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d04b      	beq.n	8011aee <icmp_input+0x15e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	891a      	ldrh	r2, [r3, #8]
 8011a5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a5c:	4413      	add	r3, r2
 8011a5e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	891b      	ldrh	r3, [r3, #8]
 8011a64:	8b7a      	ldrh	r2, [r7, #26]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	f0c0 80d5 	bcc.w	8011c16 <icmp_input+0x286>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011a6c:	8b7b      	ldrh	r3, [r7, #26]
 8011a6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a72:	4619      	mov	r1, r3
 8011a74:	200e      	movs	r0, #14
 8011a76:	f7f5 fc63 	bl	8007340 <pbuf_alloc>
 8011a7a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f000 80cb 	beq.w	8011c1a <icmp_input+0x28a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	895b      	ldrh	r3, [r3, #10]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a8c:	3308      	adds	r3, #8
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d203      	bcs.n	8011a9a <icmp_input+0x10a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011a92:	6978      	ldr	r0, [r7, #20]
 8011a94:	f7f5 fef4 	bl	8007880 <pbuf_free>
          goto icmperr;
 8011a98:	e0c0      	b.n	8011c1c <icmp_input+0x28c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011a9a:	697b      	ldr	r3, [r7, #20]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f001 fda4 	bl	80135f0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011aa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aaa:	4619      	mov	r1, r3
 8011aac:	6978      	ldr	r0, [r7, #20]
 8011aae:	f7f5 fe61 	bl	8007774 <pbuf_remove_header>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d009      	beq.n	8011acc <icmp_input+0x13c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011ab8:	4b63      	ldr	r3, [pc, #396]	; (8011c48 <icmp_input+0x2b8>)
 8011aba:	22b6      	movs	r2, #182	; 0xb6
 8011abc:	4963      	ldr	r1, [pc, #396]	; (8011c4c <icmp_input+0x2bc>)
 8011abe:	4864      	ldr	r0, [pc, #400]	; (8011c50 <icmp_input+0x2c0>)
 8011ac0:	f001 fdc6 	bl	8013650 <iprintf>
          pbuf_free(r);
 8011ac4:	6978      	ldr	r0, [r7, #20]
 8011ac6:	f7f5 fedb 	bl	8007880 <pbuf_free>
          goto icmperr;
 8011aca:	e0a7      	b.n	8011c1c <icmp_input+0x28c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011acc:	6879      	ldr	r1, [r7, #4]
 8011ace:	6978      	ldr	r0, [r7, #20]
 8011ad0:	f7f5 fffe 	bl	8007ad0 <pbuf_copy>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d003      	beq.n	8011ae2 <icmp_input+0x152>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011ada:	6978      	ldr	r0, [r7, #20]
 8011adc:	f7f5 fed0 	bl	8007880 <pbuf_free>
          goto icmperr;
 8011ae0:	e09c      	b.n	8011c1c <icmp_input+0x28c>
        }
        /* free the original p */
        pbuf_free(p);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7f5 fecc 	bl	8007880 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011ae8:	697b      	ldr	r3, [r7, #20]
 8011aea:	607b      	str	r3, [r7, #4]
 8011aec:	e00f      	b.n	8011b0e <icmp_input+0x17e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011aee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011af0:	330e      	adds	r3, #14
 8011af2:	4619      	mov	r1, r3
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f7f5 fe3d 	bl	8007774 <pbuf_remove_header>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d006      	beq.n	8011b0e <icmp_input+0x17e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011b00:	4b51      	ldr	r3, [pc, #324]	; (8011c48 <icmp_input+0x2b8>)
 8011b02:	22c7      	movs	r2, #199	; 0xc7
 8011b04:	4953      	ldr	r1, [pc, #332]	; (8011c54 <icmp_input+0x2c4>)
 8011b06:	4852      	ldr	r0, [pc, #328]	; (8011c50 <icmp_input+0x2c0>)
 8011b08:	f001 fda2 	bl	8013650 <iprintf>
          goto icmperr;
 8011b0c:	e086      	b.n	8011c1c <icmp_input+0x28c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011b14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b16:	4619      	mov	r1, r3
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f7f5 fe1b 	bl	8007754 <pbuf_add_header>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d15e      	bne.n	8011be2 <icmp_input+0x252>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011b32:	4b43      	ldr	r3, [pc, #268]	; (8011c40 <icmp_input+0x2b0>)
 8011b34:	691a      	ldr	r2, [r3, #16]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	885b      	ldrh	r3, [r3, #2]
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d907      	bls.n	8011b5e <icmp_input+0x1ce>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	885b      	ldrh	r3, [r3, #2]
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	3309      	adds	r3, #9
 8011b56:	b29a      	uxth	r2, r3
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	805a      	strh	r2, [r3, #2]
 8011b5c:	e006      	b.n	8011b6c <icmp_input+0x1dc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	885b      	ldrh	r3, [r3, #2]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	3308      	adds	r3, #8
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	693b      	ldr	r3, [r7, #16]
 8011b6a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	22ff      	movs	r2, #255	; 0xff
 8011b70:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2200      	movs	r2, #0
 8011b76:	729a      	strb	r2, [r3, #10]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8011b7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b7e:	4619      	mov	r1, r3
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	f7f4 fb65 	bl	8006250 <inet_chksum>
 8011b86:	4603      	mov	r3, r0
 8011b88:	461a      	mov	r2, r3
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8011b8e:	4b2b      	ldr	r3, [pc, #172]	; (8011c3c <icmp_input+0x2ac>)
 8011b90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b94:	3301      	adds	r3, #1
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	4b28      	ldr	r3, [pc, #160]	; (8011c3c <icmp_input+0x2ac>)
 8011b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	9302      	str	r3, [sp, #8]
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	23ff      	movs	r3, #255	; 0xff
 8011bac:	2200      	movs	r2, #0
 8011bae:	69f9      	ldr	r1, [r7, #28]
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f000 fb41 	bl	8012238 <ip4_output_if>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011bba:	e012      	b.n	8011be2 <icmp_input+0x252>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8011bbc:	4b1f      	ldr	r3, [pc, #124]	; (8011c3c <icmp_input+0x2ac>)
 8011bbe:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	4b1d      	ldr	r3, [pc, #116]	; (8011c3c <icmp_input+0x2ac>)
 8011bc8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8011bcc:	4b1b      	ldr	r3, [pc, #108]	; (8011c3c <icmp_input+0x2ac>)
 8011bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	b29a      	uxth	r2, r3
 8011bd6:	4b19      	ldr	r3, [pc, #100]	; (8011c3c <icmp_input+0x2ac>)
 8011bd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8011bdc:	e002      	b.n	8011be4 <icmp_input+0x254>
      break;
 8011bde:	bf00      	nop
 8011be0:	e000      	b.n	8011be4 <icmp_input+0x254>
      break;
 8011be2:	bf00      	nop
  }
  pbuf_free(p);
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f7f5 fe4b 	bl	8007880 <pbuf_free>
  return;
 8011bea:	e023      	b.n	8011c34 <icmp_input+0x2a4>
    goto lenerr;
 8011bec:	bf00      	nop
 8011bee:	e002      	b.n	8011bf6 <icmp_input+0x266>
    goto lenerr;
 8011bf0:	bf00      	nop
 8011bf2:	e000      	b.n	8011bf6 <icmp_input+0x266>
        goto lenerr;
 8011bf4:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f7f5 fe42 	bl	8007880 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8011bfc:	4b0f      	ldr	r3, [pc, #60]	; (8011c3c <icmp_input+0x2ac>)
 8011bfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011c02:	3301      	adds	r3, #1
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	4b0d      	ldr	r3, [pc, #52]	; (8011c3c <icmp_input+0x2ac>)
 8011c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011c0c:	e012      	b.n	8011c34 <icmp_input+0x2a4>
        goto icmperr;
 8011c0e:	bf00      	nop
 8011c10:	e004      	b.n	8011c1c <icmp_input+0x28c>
        goto icmperr;
 8011c12:	bf00      	nop
 8011c14:	e002      	b.n	8011c1c <icmp_input+0x28c>
          goto icmperr;
 8011c16:	bf00      	nop
 8011c18:	e000      	b.n	8011c1c <icmp_input+0x28c>
          goto icmperr;
 8011c1a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7f5 fe2f 	bl	8007880 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8011c22:	4b06      	ldr	r3, [pc, #24]	; (8011c3c <icmp_input+0x2ac>)
 8011c24:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8011c28:	3301      	adds	r3, #1
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	4b03      	ldr	r3, [pc, #12]	; (8011c3c <icmp_input+0x2ac>)
 8011c2e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011c32:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011c34:	3728      	adds	r7, #40	; 0x28
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	20007a4c 	.word	0x20007a4c
 8011c40:	20004538 	.word	0x20004538
 8011c44:	2000454c 	.word	0x2000454c
 8011c48:	08017540 	.word	0x08017540
 8011c4c:	08017578 	.word	0x08017578
 8011c50:	080175b0 	.word	0x080175b0
 8011c54:	080175d8 	.word	0x080175d8

08011c58 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	460b      	mov	r3, r1
 8011c62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011c64:	78fb      	ldrb	r3, [r7, #3]
 8011c66:	461a      	mov	r2, r3
 8011c68:	2103      	movs	r1, #3
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f000 f814 	bl	8011c98 <icmp_send_response>
}
 8011c70:	bf00      	nop
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	460b      	mov	r3, r1
 8011c82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011c84:	78fb      	ldrb	r3, [r7, #3]
 8011c86:	461a      	mov	r2, r3
 8011c88:	210b      	movs	r1, #11
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 f804 	bl	8011c98 <icmp_send_response>
}
 8011c90:	bf00      	nop
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}

08011c98 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b08c      	sub	sp, #48	; 0x30
 8011c9c:	af04      	add	r7, sp, #16
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	70fb      	strb	r3, [r7, #3]
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011ca8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011cac:	2124      	movs	r1, #36	; 0x24
 8011cae:	2022      	movs	r0, #34	; 0x22
 8011cb0:	f7f5 fb46 	bl	8007340 <pbuf_alloc>
 8011cb4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d05e      	beq.n	8011d7a <icmp_send_response+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	895b      	ldrh	r3, [r3, #10]
 8011cc0:	2b23      	cmp	r3, #35	; 0x23
 8011cc2:	d806      	bhi.n	8011cd2 <icmp_send_response+0x3a>
 8011cc4:	4b2f      	ldr	r3, [pc, #188]	; (8011d84 <icmp_send_response+0xec>)
 8011cc6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011cca:	492f      	ldr	r1, [pc, #188]	; (8011d88 <icmp_send_response+0xf0>)
 8011ccc:	482f      	ldr	r0, [pc, #188]	; (8011d8c <icmp_send_response+0xf4>)
 8011cce:	f001 fcbf 	bl	8013650 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	78fa      	ldrb	r2, [r7, #3]
 8011ce2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	78ba      	ldrb	r2, [r7, #2]
 8011ce8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2200      	movs	r2, #0
 8011cee:	711a      	strb	r2, [r3, #4]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	719a      	strb	r2, [r3, #6]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	f103 0008 	add.w	r0, r3, #8
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	221c      	movs	r2, #28
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	f001 fc6f 	bl	80135f0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011d12:	69bb      	ldr	r3, [r7, #24]
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011d18:	f107 030c 	add.w	r3, r7, #12
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f000 f839 	bl	8011d94 <ip4_route>
 8011d22:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d023      	beq.n	8011d72 <icmp_send_response+0xda>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	709a      	strb	r2, [r3, #2]
 8011d30:	2200      	movs	r2, #0
 8011d32:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	895b      	ldrh	r3, [r3, #10]
 8011d38:	4619      	mov	r1, r3
 8011d3a:	6978      	ldr	r0, [r7, #20]
 8011d3c:	f7f4 fa88 	bl	8006250 <inet_chksum>
 8011d40:	4603      	mov	r3, r0
 8011d42:	461a      	mov	r2, r3
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8011d48:	4b11      	ldr	r3, [pc, #68]	; (8011d90 <icmp_send_response+0xf8>)
 8011d4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d4e:	3301      	adds	r3, #1
 8011d50:	b29a      	uxth	r2, r3
 8011d52:	4b0f      	ldr	r3, [pc, #60]	; (8011d90 <icmp_send_response+0xf8>)
 8011d54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011d58:	f107 020c 	add.w	r2, r7, #12
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	9302      	str	r3, [sp, #8]
 8011d60:	2301      	movs	r3, #1
 8011d62:	9301      	str	r3, [sp, #4]
 8011d64:	2300      	movs	r3, #0
 8011d66:	9300      	str	r3, [sp, #0]
 8011d68:	23ff      	movs	r3, #255	; 0xff
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	69f8      	ldr	r0, [r7, #28]
 8011d6e:	f000 fa63 	bl	8012238 <ip4_output_if>
  }
  pbuf_free(q);
 8011d72:	69f8      	ldr	r0, [r7, #28]
 8011d74:	f7f5 fd84 	bl	8007880 <pbuf_free>
 8011d78:	e000      	b.n	8011d7c <icmp_send_response+0xe4>
    return;
 8011d7a:	bf00      	nop
}
 8011d7c:	3720      	adds	r7, #32
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	08017540 	.word	0x08017540
 8011d88:	0801760c 	.word	0x0801760c
 8011d8c:	080175b0 	.word	0x080175b0
 8011d90:	20007a4c 	.word	0x20007a4c

08011d94 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b085      	sub	sp, #20
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011d9c:	4b37      	ldr	r3, [pc, #220]	; (8011e7c <ip4_route+0xe8>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	60fb      	str	r3, [r7, #12]
 8011da2:	e036      	b.n	8011e12 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011daa:	f003 0301 	and.w	r3, r3, #1
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d02b      	beq.n	8011e0c <ip4_route+0x78>
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011dba:	089b      	lsrs	r3, r3, #2
 8011dbc:	f003 0301 	and.w	r3, r3, #1
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d022      	beq.n	8011e0c <ip4_route+0x78>
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	3304      	adds	r3, #4
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d01d      	beq.n	8011e0c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	3304      	adds	r3, #4
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	405a      	eors	r2, r3
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	3308      	adds	r3, #8
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	4013      	ands	r3, r2
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d101      	bne.n	8011dec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	e040      	b.n	8011e6e <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011df2:	f003 0302 	and.w	r3, r3, #2
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d108      	bne.n	8011e0c <ip4_route+0x78>
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	330c      	adds	r3, #12
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d101      	bne.n	8011e0c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	e030      	b.n	8011e6e <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	60fb      	str	r3, [r7, #12]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d1c5      	bne.n	8011da4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011e18:	4b19      	ldr	r3, [pc, #100]	; (8011e80 <ip4_route+0xec>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d01a      	beq.n	8011e56 <ip4_route+0xc2>
 8011e20:	4b17      	ldr	r3, [pc, #92]	; (8011e80 <ip4_route+0xec>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e28:	f003 0301 	and.w	r3, r3, #1
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d012      	beq.n	8011e56 <ip4_route+0xc2>
 8011e30:	4b13      	ldr	r3, [pc, #76]	; (8011e80 <ip4_route+0xec>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e38:	f003 0304 	and.w	r3, r3, #4
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00a      	beq.n	8011e56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011e40:	4b0f      	ldr	r3, [pc, #60]	; (8011e80 <ip4_route+0xec>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	3304      	adds	r3, #4
 8011e46:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d004      	beq.n	8011e56 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	b2db      	uxtb	r3, r3
 8011e52:	2b7f      	cmp	r3, #127	; 0x7f
 8011e54:	d109      	bne.n	8011e6a <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8011e56:	4b0b      	ldr	r3, [pc, #44]	; (8011e84 <ip4_route+0xf0>)
 8011e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	4b08      	ldr	r3, [pc, #32]	; (8011e84 <ip4_route+0xf0>)
 8011e62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011e66:	2300      	movs	r3, #0
 8011e68:	e001      	b.n	8011e6e <ip4_route+0xda>
  }

  return netif_default;
 8011e6a:	4b05      	ldr	r3, [pc, #20]	; (8011e80 <ip4_route+0xec>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr
 8011e7a:	bf00      	nop
 8011e7c:	20007a40 	.word	0x20007a40
 8011e80:	20007a44 	.word	0x20007a44
 8011e84:	20007a4c 	.word	0x20007a4c

08011e88 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e96:	f003 0301 	and.w	r3, r3, #1
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d016      	beq.n	8011ece <ip4_input_accept+0x46>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	3304      	adds	r3, #4
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d011      	beq.n	8011ece <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011eaa:	4b0b      	ldr	r3, [pc, #44]	; (8011ed8 <ip4_input_accept+0x50>)
 8011eac:	695a      	ldr	r2, [r3, #20]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	3304      	adds	r3, #4
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d008      	beq.n	8011eca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011eb8:	4b07      	ldr	r3, [pc, #28]	; (8011ed8 <ip4_input_accept+0x50>)
 8011eba:	695b      	ldr	r3, [r3, #20]
 8011ebc:	6879      	ldr	r1, [r7, #4]
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f000 fb12 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 8011ec4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d001      	beq.n	8011ece <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011eca:	2301      	movs	r3, #1
 8011ecc:	e000      	b.n	8011ed0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011ece:	2300      	movs	r3, #0
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	20004538 	.word	0x20004538

08011edc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b088      	sub	sp, #32
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8011eea:	4b91      	ldr	r3, [pc, #580]	; (8012130 <ip4_input+0x254>)
 8011eec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	4b8e      	ldr	r3, [pc, #568]	; (8012130 <ip4_input+0x254>)
 8011ef6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011f00:	69fb      	ldr	r3, [r7, #28]
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	091b      	lsrs	r3, r3, #4
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b04      	cmp	r3, #4
 8011f0a:	d014      	beq.n	8011f36 <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7f5 fcb7 	bl	8007880 <pbuf_free>
    IP_STATS_INC(ip.err);
 8011f12:	4b87      	ldr	r3, [pc, #540]	; (8012130 <ip4_input+0x254>)
 8011f14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f18:	3301      	adds	r3, #1
 8011f1a:	b29a      	uxth	r2, r3
 8011f1c:	4b84      	ldr	r3, [pc, #528]	; (8012130 <ip4_input+0x254>)
 8011f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8011f22:	4b83      	ldr	r3, [pc, #524]	; (8012130 <ip4_input+0x254>)
 8011f24:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f28:	3301      	adds	r3, #1
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	4b80      	ldr	r3, [pc, #512]	; (8012130 <ip4_input+0x254>)
 8011f2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011f32:	2300      	movs	r3, #0
 8011f34:	e177      	b.n	8012226 <ip4_input+0x34a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	f003 030f 	and.w	r3, r3, #15
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	009b      	lsls	r3, r3, #2
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011f46:	69fb      	ldr	r3, [r7, #28]
 8011f48:	885b      	ldrh	r3, [r3, #2]
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7f3 ffcd 	bl	8005eec <lwip_htons>
 8011f52:	4603      	mov	r3, r0
 8011f54:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	891b      	ldrh	r3, [r3, #8]
 8011f5a:	8a3a      	ldrh	r2, [r7, #16]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d204      	bcs.n	8011f6a <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 8011f60:	8a3b      	ldrh	r3, [r7, #16]
 8011f62:	4619      	mov	r1, r3
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f7f5 fb05 	bl	8007574 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	895b      	ldrh	r3, [r3, #10]
 8011f6e:	8a7a      	ldrh	r2, [r7, #18]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d807      	bhi.n	8011f84 <ip4_input+0xa8>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	891b      	ldrh	r3, [r3, #8]
 8011f78:	8a3a      	ldrh	r2, [r7, #16]
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d802      	bhi.n	8011f84 <ip4_input+0xa8>
 8011f7e:	8a7b      	ldrh	r3, [r7, #18]
 8011f80:	2b13      	cmp	r3, #19
 8011f82:	d814      	bhi.n	8011fae <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f7f5 fc7b 	bl	8007880 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8011f8a:	4b69      	ldr	r3, [pc, #420]	; (8012130 <ip4_input+0x254>)
 8011f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011f90:	3301      	adds	r3, #1
 8011f92:	b29a      	uxth	r2, r3
 8011f94:	4b66      	ldr	r3, [pc, #408]	; (8012130 <ip4_input+0x254>)
 8011f96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8011f9a:	4b65      	ldr	r3, [pc, #404]	; (8012130 <ip4_input+0x254>)
 8011f9c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	4b62      	ldr	r3, [pc, #392]	; (8012130 <ip4_input+0x254>)
 8011fa6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011faa:	2300      	movs	r3, #0
 8011fac:	e13b      	b.n	8012226 <ip4_input+0x34a>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8011fae:	8a7b      	ldrh	r3, [r7, #18]
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	69f8      	ldr	r0, [r7, #28]
 8011fb4:	f7f4 f94c 	bl	8006250 <inet_chksum>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d014      	beq.n	8011fe8 <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f7f5 fc5e 	bl	8007880 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 8011fc4:	4b5a      	ldr	r3, [pc, #360]	; (8012130 <ip4_input+0x254>)
 8011fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011fca:	3301      	adds	r3, #1
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	4b58      	ldr	r3, [pc, #352]	; (8012130 <ip4_input+0x254>)
 8011fd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
 8011fd4:	4b56      	ldr	r3, [pc, #344]	; (8012130 <ip4_input+0x254>)
 8011fd6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011fda:	3301      	adds	r3, #1
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	4b54      	ldr	r3, [pc, #336]	; (8012130 <ip4_input+0x254>)
 8011fe0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	e11e      	b.n	8012226 <ip4_input+0x34a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	691b      	ldr	r3, [r3, #16]
 8011fec:	4a51      	ldr	r2, [pc, #324]	; (8012134 <ip4_input+0x258>)
 8011fee:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	68db      	ldr	r3, [r3, #12]
 8011ff4:	4a4f      	ldr	r2, [pc, #316]	; (8012134 <ip4_input+0x258>)
 8011ff6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ff8:	4b4e      	ldr	r3, [pc, #312]	; (8012134 <ip4_input+0x258>)
 8011ffa:	695b      	ldr	r3, [r3, #20]
 8011ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012000:	2be0      	cmp	r3, #224	; 0xe0
 8012002:	d112      	bne.n	801202a <ip4_input+0x14e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801200a:	f003 0301 	and.w	r3, r3, #1
 801200e:	b2db      	uxtb	r3, r3
 8012010:	2b00      	cmp	r3, #0
 8012012:	d007      	beq.n	8012024 <ip4_input+0x148>
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	3304      	adds	r3, #4
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d002      	beq.n	8012024 <ip4_input+0x148>
      netif = inp;
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	61bb      	str	r3, [r7, #24]
 8012022:	e02a      	b.n	801207a <ip4_input+0x19e>
    } else {
      netif = NULL;
 8012024:	2300      	movs	r3, #0
 8012026:	61bb      	str	r3, [r7, #24]
 8012028:	e027      	b.n	801207a <ip4_input+0x19e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801202a:	6838      	ldr	r0, [r7, #0]
 801202c:	f7ff ff2c 	bl	8011e88 <ip4_input_accept>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d002      	beq.n	801203c <ip4_input+0x160>
      netif = inp;
 8012036:	683b      	ldr	r3, [r7, #0]
 8012038:	61bb      	str	r3, [r7, #24]
 801203a:	e01e      	b.n	801207a <ip4_input+0x19e>
    } else {
      netif = NULL;
 801203c:	2300      	movs	r3, #0
 801203e:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012040:	4b3c      	ldr	r3, [pc, #240]	; (8012134 <ip4_input+0x258>)
 8012042:	695b      	ldr	r3, [r3, #20]
 8012044:	b2db      	uxtb	r3, r3
 8012046:	2b7f      	cmp	r3, #127	; 0x7f
 8012048:	d017      	beq.n	801207a <ip4_input+0x19e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801204a:	4b3b      	ldr	r3, [pc, #236]	; (8012138 <ip4_input+0x25c>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	61bb      	str	r3, [r7, #24]
 8012050:	e00e      	b.n	8012070 <ip4_input+0x194>
          if (netif == inp) {
 8012052:	69ba      	ldr	r2, [r7, #24]
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	429a      	cmp	r2, r3
 8012058:	d006      	beq.n	8012068 <ip4_input+0x18c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801205a:	69b8      	ldr	r0, [r7, #24]
 801205c:	f7ff ff14 	bl	8011e88 <ip4_input_accept>
 8012060:	4603      	mov	r3, r0
 8012062:	2b00      	cmp	r3, #0
 8012064:	d108      	bne.n	8012078 <ip4_input+0x19c>
 8012066:	e000      	b.n	801206a <ip4_input+0x18e>
            continue;
 8012068:	bf00      	nop
        NETIF_FOREACH(netif) {
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	61bb      	str	r3, [r7, #24]
 8012070:	69bb      	ldr	r3, [r7, #24]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d1ed      	bne.n	8012052 <ip4_input+0x176>
 8012076:	e000      	b.n	801207a <ip4_input+0x19e>
            break;
 8012078:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d111      	bne.n	80120a4 <ip4_input+0x1c8>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	7a5b      	ldrb	r3, [r3, #9]
 8012084:	2b11      	cmp	r3, #17
 8012086:	d10d      	bne.n	80120a4 <ip4_input+0x1c8>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012088:	8a7b      	ldrh	r3, [r7, #18]
 801208a:	69fa      	ldr	r2, [r7, #28]
 801208c:	4413      	add	r3, r2
 801208e:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	885b      	ldrh	r3, [r3, #2]
 8012094:	b29b      	uxth	r3, r3
 8012096:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801209a:	d103      	bne.n	80120a4 <ip4_input+0x1c8>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80120a0:	2300      	movs	r3, #0
 80120a2:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d01f      	beq.n	80120ea <ip4_input+0x20e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80120aa:	4b22      	ldr	r3, [pc, #136]	; (8012134 <ip4_input+0x258>)
 80120ac:	691b      	ldr	r3, [r3, #16]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d01b      	beq.n	80120ea <ip4_input+0x20e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80120b2:	4b20      	ldr	r3, [pc, #128]	; (8012134 <ip4_input+0x258>)
 80120b4:	691b      	ldr	r3, [r3, #16]
 80120b6:	6839      	ldr	r1, [r7, #0]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f000 fa15 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 80120be:	4603      	mov	r3, r0
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d105      	bne.n	80120d0 <ip4_input+0x1f4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80120c4:	4b1b      	ldr	r3, [pc, #108]	; (8012134 <ip4_input+0x258>)
 80120c6:	691b      	ldr	r3, [r3, #16]
 80120c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80120cc:	2be0      	cmp	r3, #224	; 0xe0
 80120ce:	d10c      	bne.n	80120ea <ip4_input+0x20e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f7f5 fbd5 	bl	8007880 <pbuf_free>
      IP_STATS_INC(ip.drop);
 80120d6:	4b16      	ldr	r3, [pc, #88]	; (8012130 <ip4_input+0x254>)
 80120d8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80120dc:	3301      	adds	r3, #1
 80120de:	b29a      	uxth	r2, r3
 80120e0:	4b13      	ldr	r3, [pc, #76]	; (8012130 <ip4_input+0x254>)
 80120e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	e09d      	b.n	8012226 <ip4_input+0x34a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d10c      	bne.n	801210a <ip4_input+0x22e>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 80120f0:	4b0f      	ldr	r3, [pc, #60]	; (8012130 <ip4_input+0x254>)
 80120f2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80120f6:	3301      	adds	r3, #1
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	4b0d      	ldr	r3, [pc, #52]	; (8012130 <ip4_input+0x254>)
 80120fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7f5 fbbd 	bl	8007880 <pbuf_free>
    return ERR_OK;
 8012106:	2300      	movs	r3, #0
 8012108:	e08d      	b.n	8012226 <ip4_input+0x34a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801210a:	69fb      	ldr	r3, [r7, #28]
 801210c:	88db      	ldrh	r3, [r3, #6]
 801210e:	b29b      	uxth	r3, r3
 8012110:	461a      	mov	r2, r3
 8012112:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012116:	4013      	ands	r3, r2
 8012118:	2b00      	cmp	r3, #0
 801211a:	d012      	beq.n	8012142 <ip4_input+0x266>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f000 fdc3 	bl	8012ca8 <ip4_reass>
 8012122:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d108      	bne.n	801213c <ip4_input+0x260>
      return ERR_OK;
 801212a:	2300      	movs	r3, #0
 801212c:	e07b      	b.n	8012226 <ip4_input+0x34a>
 801212e:	bf00      	nop
 8012130:	20007a4c 	.word	0x20007a4c
 8012134:	20004538 	.word	0x20004538
 8012138:	20007a40 	.word	0x20007a40
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012142:	4a3b      	ldr	r2, [pc, #236]	; (8012230 <ip4_input+0x354>)
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012148:	4a39      	ldr	r2, [pc, #228]	; (8012230 <ip4_input+0x354>)
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801214e:	4a38      	ldr	r2, [pc, #224]	; (8012230 <ip4_input+0x354>)
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	f003 030f 	and.w	r3, r3, #15
 801215c:	b2db      	uxtb	r3, r3
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	b2db      	uxtb	r3, r3
 8012162:	b29a      	uxth	r2, r3
 8012164:	4b32      	ldr	r3, [pc, #200]	; (8012230 <ip4_input+0x354>)
 8012166:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012168:	8a7b      	ldrh	r3, [r7, #18]
 801216a:	4619      	mov	r1, r3
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7f5 fb01 	bl	8007774 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	7a5b      	ldrb	r3, [r3, #9]
 8012176:	2b11      	cmp	r3, #17
 8012178:	d006      	beq.n	8012188 <ip4_input+0x2ac>
 801217a:	2b11      	cmp	r3, #17
 801217c:	dc13      	bgt.n	80121a6 <ip4_input+0x2ca>
 801217e:	2b01      	cmp	r3, #1
 8012180:	d00c      	beq.n	801219c <ip4_input+0x2c0>
 8012182:	2b06      	cmp	r3, #6
 8012184:	d005      	beq.n	8012192 <ip4_input+0x2b6>
 8012186:	e00e      	b.n	80121a6 <ip4_input+0x2ca>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012188:	6839      	ldr	r1, [r7, #0]
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f7fc f980 	bl	800e490 <udp_input>
        break;
 8012190:	e036      	b.n	8012200 <ip4_input+0x324>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012192:	6839      	ldr	r1, [r7, #0]
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7f7 fc83 	bl	8009aa0 <tcp_input>
        break;
 801219a:	e031      	b.n	8012200 <ip4_input+0x324>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801219c:	6839      	ldr	r1, [r7, #0]
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7ff fbf6 	bl	8011990 <icmp_input>
        break;
 80121a4:	e02c      	b.n	8012200 <ip4_input+0x324>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80121a6:	4b22      	ldr	r3, [pc, #136]	; (8012230 <ip4_input+0x354>)
 80121a8:	695b      	ldr	r3, [r3, #20]
 80121aa:	69b9      	ldr	r1, [r7, #24]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f000 f99b 	bl	80124e8 <ip4_addr_isbroadcast_u32>
 80121b2:	4603      	mov	r3, r0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d10f      	bne.n	80121d8 <ip4_input+0x2fc>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80121b8:	4b1d      	ldr	r3, [pc, #116]	; (8012230 <ip4_input+0x354>)
 80121ba:	695b      	ldr	r3, [r3, #20]
 80121bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80121c0:	2be0      	cmp	r3, #224	; 0xe0
 80121c2:	d009      	beq.n	80121d8 <ip4_input+0x2fc>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80121c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121c8:	4619      	mov	r1, r3
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7f5 fb45 	bl	800785a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80121d0:	2102      	movs	r1, #2
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f7ff fd40 	bl	8011c58 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 80121d8:	4b16      	ldr	r3, [pc, #88]	; (8012234 <ip4_input+0x358>)
 80121da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80121de:	3301      	adds	r3, #1
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	4b14      	ldr	r3, [pc, #80]	; (8012234 <ip4_input+0x358>)
 80121e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 80121e8:	4b12      	ldr	r3, [pc, #72]	; (8012234 <ip4_input+0x358>)
 80121ea:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80121ee:	3301      	adds	r3, #1
 80121f0:	b29a      	uxth	r2, r3
 80121f2:	4b10      	ldr	r3, [pc, #64]	; (8012234 <ip4_input+0x358>)
 80121f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f7f5 fb41 	bl	8007880 <pbuf_free>
        break;
 80121fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012200:	4b0b      	ldr	r3, [pc, #44]	; (8012230 <ip4_input+0x354>)
 8012202:	2200      	movs	r2, #0
 8012204:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012206:	4b0a      	ldr	r3, [pc, #40]	; (8012230 <ip4_input+0x354>)
 8012208:	2200      	movs	r2, #0
 801220a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801220c:	4b08      	ldr	r3, [pc, #32]	; (8012230 <ip4_input+0x354>)
 801220e:	2200      	movs	r2, #0
 8012210:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012212:	4b07      	ldr	r3, [pc, #28]	; (8012230 <ip4_input+0x354>)
 8012214:	2200      	movs	r2, #0
 8012216:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012218:	4b05      	ldr	r3, [pc, #20]	; (8012230 <ip4_input+0x354>)
 801221a:	2200      	movs	r2, #0
 801221c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801221e:	4b04      	ldr	r3, [pc, #16]	; (8012230 <ip4_input+0x354>)
 8012220:	2200      	movs	r2, #0
 8012222:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012224:	2300      	movs	r3, #0
}
 8012226:	4618      	mov	r0, r3
 8012228:	3720      	adds	r7, #32
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}
 801222e:	bf00      	nop
 8012230:	20004538 	.word	0x20004538
 8012234:	20007a4c 	.word	0x20007a4c

08012238 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b08a      	sub	sp, #40	; 0x28
 801223c:	af04      	add	r7, sp, #16
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	607a      	str	r2, [r7, #4]
 8012244:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d009      	beq.n	8012264 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d003      	beq.n	801225e <ip4_output_if+0x26>
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d102      	bne.n	8012264 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012260:	3304      	adds	r3, #4
 8012262:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012264:	78fa      	ldrb	r2, [r7, #3]
 8012266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012268:	9302      	str	r3, [sp, #8]
 801226a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801226e:	9301      	str	r3, [sp, #4]
 8012270:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	4613      	mov	r3, r2
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	6979      	ldr	r1, [r7, #20]
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	f000 f805 	bl	801228c <ip4_output_if_src>
 8012282:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012284:	4618      	mov	r0, r3
 8012286:	3718      	adds	r7, #24
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}

0801228c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b088      	sub	sp, #32
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]
 8012298:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801229a:	2300      	movs	r3, #0
 801229c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	7b9b      	ldrb	r3, [r3, #14]
 80122a2:	2b01      	cmp	r3, #1
 80122a4:	d006      	beq.n	80122b4 <ip4_output_if_src+0x28>
 80122a6:	4b89      	ldr	r3, [pc, #548]	; (80124cc <ip4_output_if_src+0x240>)
 80122a8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80122ac:	4988      	ldr	r1, [pc, #544]	; (80124d0 <ip4_output_if_src+0x244>)
 80122ae:	4889      	ldr	r0, [pc, #548]	; (80124d4 <ip4_output_if_src+0x248>)
 80122b0:	f001 f9ce 	bl	8013650 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f000 80cc 	beq.w	8012454 <ip4_output_if_src+0x1c8>
    u16_t ip_hlen = IP_HLEN;
 80122bc:	2314      	movs	r3, #20
 80122be:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80122c0:	2114      	movs	r1, #20
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f7f5 fa46 	bl	8007754 <pbuf_add_header>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d00a      	beq.n	80122e4 <ip4_output_if_src+0x58>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 80122ce:	4b82      	ldr	r3, [pc, #520]	; (80124d8 <ip4_output_if_src+0x24c>)
 80122d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80122d4:	3301      	adds	r3, #1
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	4b7f      	ldr	r3, [pc, #508]	; (80124d8 <ip4_output_if_src+0x24c>)
 80122da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80122de:	f06f 0301 	mvn.w	r3, #1
 80122e2:	e0ef      	b.n	80124c4 <ip4_output_if_src+0x238>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	685b      	ldr	r3, [r3, #4]
 80122e8:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	895b      	ldrh	r3, [r3, #10]
 80122ee:	2b13      	cmp	r3, #19
 80122f0:	d806      	bhi.n	8012300 <ip4_output_if_src+0x74>
 80122f2:	4b76      	ldr	r3, [pc, #472]	; (80124cc <ip4_output_if_src+0x240>)
 80122f4:	f44f 7262 	mov.w	r2, #904	; 0x388
 80122f8:	4978      	ldr	r1, [pc, #480]	; (80124dc <ip4_output_if_src+0x250>)
 80122fa:	4876      	ldr	r0, [pc, #472]	; (80124d4 <ip4_output_if_src+0x248>)
 80122fc:	f001 f9a8 	bl	8013650 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012300:	69bb      	ldr	r3, [r7, #24]
 8012302:	78fa      	ldrb	r2, [r7, #3]
 8012304:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801230c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801230e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012312:	78fb      	ldrb	r3, [r7, #3]
 8012314:	021b      	lsls	r3, r3, #8
 8012316:	4313      	orrs	r3, r2
 8012318:	021b      	lsls	r3, r3, #8
 801231a:	b21a      	sxth	r2, r3
 801231c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8012320:	78fb      	ldrb	r3, [r7, #3]
 8012322:	021b      	lsls	r3, r3, #8
 8012324:	430b      	orrs	r3, r1
 8012326:	121b      	asrs	r3, r3, #8
 8012328:	b21b      	sxth	r3, r3
 801232a:	b2db      	uxtb	r3, r3
 801232c:	b21b      	sxth	r3, r3
 801232e:	4313      	orrs	r3, r2
 8012330:	b21b      	sxth	r3, r3
 8012332:	b29b      	uxth	r3, r3
 8012334:	461a      	mov	r2, r3
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	4413      	add	r3, r2
 801233a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681a      	ldr	r2, [r3, #0]
 8012340:	69bb      	ldr	r3, [r7, #24]
 8012342:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	691b      	ldr	r3, [r3, #16]
 8012348:	b29b      	uxth	r3, r3
 801234a:	69fa      	ldr	r2, [r7, #28]
 801234c:	4413      	add	r3, r2
 801234e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8012350:	69bb      	ldr	r3, [r7, #24]
 8012352:	691b      	ldr	r3, [r3, #16]
 8012354:	0c1b      	lsrs	r3, r3, #16
 8012356:	69fa      	ldr	r2, [r7, #28]
 8012358:	4413      	add	r3, r2
 801235a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801235c:	8afb      	ldrh	r3, [r7, #22]
 801235e:	089b      	lsrs	r3, r3, #2
 8012360:	b29b      	uxth	r3, r3
 8012362:	b2db      	uxtb	r3, r3
 8012364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012368:	b2da      	uxtb	r2, r3
 801236a:	69bb      	ldr	r3, [r7, #24]
 801236c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801236e:	69bb      	ldr	r3, [r7, #24]
 8012370:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012374:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8012376:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801237a:	69bb      	ldr	r3, [r7, #24]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	021b      	lsls	r3, r3, #8
 8012380:	4313      	orrs	r3, r2
 8012382:	021b      	lsls	r3, r3, #8
 8012384:	b21a      	sxth	r2, r3
 8012386:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	021b      	lsls	r3, r3, #8
 8012390:	430b      	orrs	r3, r1
 8012392:	121b      	asrs	r3, r3, #8
 8012394:	b21b      	sxth	r3, r3
 8012396:	b2db      	uxtb	r3, r3
 8012398:	b21b      	sxth	r3, r3
 801239a:	4313      	orrs	r3, r2
 801239c:	b21b      	sxth	r3, r3
 801239e:	b29b      	uxth	r3, r3
 80123a0:	461a      	mov	r2, r3
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	4413      	add	r3, r2
 80123a6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	891b      	ldrh	r3, [r3, #8]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7f3 fd9d 	bl	8005eec <lwip_htons>
 80123b2:	4603      	mov	r3, r0
 80123b4:	461a      	mov	r2, r3
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	885b      	ldrh	r3, [r3, #2]
 80123be:	b29b      	uxth	r3, r3
 80123c0:	461a      	mov	r2, r3
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	4413      	add	r3, r2
 80123c6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80123c8:	69bb      	ldr	r3, [r7, #24]
 80123ca:	2200      	movs	r2, #0
 80123cc:	719a      	strb	r2, [r3, #6]
 80123ce:	2200      	movs	r2, #0
 80123d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80123d2:	4b43      	ldr	r3, [pc, #268]	; (80124e0 <ip4_output_if_src+0x254>)
 80123d4:	881b      	ldrh	r3, [r3, #0]
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7f3 fd88 	bl	8005eec <lwip_htons>
 80123dc:	4603      	mov	r3, r0
 80123de:	461a      	mov	r2, r3
 80123e0:	69bb      	ldr	r3, [r7, #24]
 80123e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	889b      	ldrh	r3, [r3, #4]
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	461a      	mov	r2, r3
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	4413      	add	r3, r2
 80123f0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80123f2:	4b3b      	ldr	r3, [pc, #236]	; (80124e0 <ip4_output_if_src+0x254>)
 80123f4:	881b      	ldrh	r3, [r3, #0]
 80123f6:	3301      	adds	r3, #1
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	4b39      	ldr	r3, [pc, #228]	; (80124e0 <ip4_output_if_src+0x254>)
 80123fc:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d104      	bne.n	801240e <ip4_output_if_src+0x182>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012404:	4b37      	ldr	r3, [pc, #220]	; (80124e4 <ip4_output_if_src+0x258>)
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	69bb      	ldr	r3, [r7, #24]
 801240a:	60da      	str	r2, [r3, #12]
 801240c:	e003      	b.n	8012416 <ip4_output_if_src+0x18a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	69bb      	ldr	r3, [r7, #24]
 8012414:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	b29b      	uxth	r3, r3
 801241c:	69fa      	ldr	r2, [r7, #28]
 801241e:	4413      	add	r3, r2
 8012420:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8012422:	69bb      	ldr	r3, [r7, #24]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	0c1b      	lsrs	r3, r3, #16
 8012428:	69fa      	ldr	r2, [r7, #28]
 801242a:	4413      	add	r3, r2
 801242c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	0c1a      	lsrs	r2, r3, #16
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	b29b      	uxth	r3, r3
 8012436:	4413      	add	r3, r2
 8012438:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	0c1b      	lsrs	r3, r3, #16
 801243e:	69fa      	ldr	r2, [r7, #28]
 8012440:	4413      	add	r3, r2
 8012442:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8012444:	69fb      	ldr	r3, [r7, #28]
 8012446:	43db      	mvns	r3, r3
 8012448:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	b29a      	uxth	r2, r3
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	815a      	strh	r2, [r3, #10]
 8012452:	e017      	b.n	8012484 <ip4_output_if_src+0x1f8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	895b      	ldrh	r3, [r3, #10]
 8012458:	2b13      	cmp	r3, #19
 801245a:	d80a      	bhi.n	8012472 <ip4_output_if_src+0x1e6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801245c:	4b1e      	ldr	r3, [pc, #120]	; (80124d8 <ip4_output_if_src+0x24c>)
 801245e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012462:	3301      	adds	r3, #1
 8012464:	b29a      	uxth	r2, r3
 8012466:	4b1c      	ldr	r3, [pc, #112]	; (80124d8 <ip4_output_if_src+0x24c>)
 8012468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801246c:	f06f 0301 	mvn.w	r3, #1
 8012470:	e028      	b.n	80124c4 <ip4_output_if_src+0x238>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	691b      	ldr	r3, [r3, #16]
 801247c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801247e:	f107 0310 	add.w	r3, r7, #16
 8012482:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 8012484:	4b14      	ldr	r3, [pc, #80]	; (80124d8 <ip4_output_if_src+0x24c>)
 8012486:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801248a:	3301      	adds	r3, #1
 801248c:	b29a      	uxth	r2, r3
 801248e:	4b12      	ldr	r3, [pc, #72]	; (80124d8 <ip4_output_if_src+0x24c>)
 8012490:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00c      	beq.n	80124b6 <ip4_output_if_src+0x22a>
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	891a      	ldrh	r2, [r3, #8]
 80124a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d906      	bls.n	80124b6 <ip4_output_if_src+0x22a>
    return ip4_frag(p, netif, dest);
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f000 fe15 	bl	80130dc <ip4_frag>
 80124b2:	4603      	mov	r3, r0
 80124b4:	e006      	b.n	80124c4 <ip4_output_if_src+0x238>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80124b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b8:	695b      	ldr	r3, [r3, #20]
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	68f9      	ldr	r1, [r7, #12]
 80124be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124c0:	4798      	blx	r3
 80124c2:	4603      	mov	r3, r0
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3720      	adds	r7, #32
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}
 80124cc:	08017638 	.word	0x08017638
 80124d0:	0801766c 	.word	0x0801766c
 80124d4:	08017678 	.word	0x08017678
 80124d8:	20007a4c 	.word	0x20007a4c
 80124dc:	080176a0 	.word	0x080176a0
 80124e0:	200006d6 	.word	0x200006d6
 80124e4:	08041e4c 	.word	0x08041e4c

080124e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b085      	sub	sp, #20
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124fc:	d002      	beq.n	8012504 <ip4_addr_isbroadcast_u32+0x1c>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d101      	bne.n	8012508 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012504:	2301      	movs	r3, #1
 8012506:	e02a      	b.n	801255e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801250e:	f003 0302 	and.w	r3, r3, #2
 8012512:	2b00      	cmp	r3, #0
 8012514:	d101      	bne.n	801251a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012516:	2300      	movs	r3, #0
 8012518:	e021      	b.n	801255e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	3304      	adds	r3, #4
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	429a      	cmp	r2, r3
 8012524:	d101      	bne.n	801252a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012526:	2300      	movs	r3, #0
 8012528:	e019      	b.n	801255e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801252a:	68fa      	ldr	r2, [r7, #12]
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	3304      	adds	r3, #4
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	405a      	eors	r2, r3
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	3308      	adds	r3, #8
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4013      	ands	r3, r2
 801253c:	2b00      	cmp	r3, #0
 801253e:	d10d      	bne.n	801255c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	3308      	adds	r3, #8
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	43da      	mvns	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801254c:	683b      	ldr	r3, [r7, #0]
 801254e:	3308      	adds	r3, #8
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012554:	429a      	cmp	r2, r3
 8012556:	d101      	bne.n	801255c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012558:	2301      	movs	r3, #1
 801255a:	e000      	b.n	801255e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801255c:	2300      	movs	r3, #0
  }
}
 801255e:	4618      	mov	r0, r3
 8012560:	3714      	adds	r7, #20
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr
	...

0801256c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8012574:	2210      	movs	r2, #16
 8012576:	4904      	ldr	r1, [pc, #16]	; (8012588 <ip4addr_ntoa+0x1c>)
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 f807 	bl	801258c <ip4addr_ntoa_r>
 801257e:	4603      	mov	r3, r0
}
 8012580:	4618      	mov	r0, r3
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}
 8012588:	200006d8 	.word	0x200006d8

0801258c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801258c:	b480      	push	{r7}
 801258e:	b08d      	sub	sp, #52	; 0x34
 8012590:	af00      	add	r7, sp, #0
 8012592:	60f8      	str	r0, [r7, #12]
 8012594:	60b9      	str	r1, [r7, #8]
 8012596:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8012598:	2300      	movs	r3, #0
 801259a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80125a6:	f107 0318 	add.w	r3, r7, #24
 80125aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80125ac:	2300      	movs	r3, #0
 80125ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125b2:	e059      	b.n	8012668 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80125b4:	2300      	movs	r3, #0
 80125b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80125ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125bc:	781a      	ldrb	r2, [r3, #0]
 80125be:	4b33      	ldr	r3, [pc, #204]	; (801268c <ip4addr_ntoa_r+0x100>)
 80125c0:	fba3 1302 	umull	r1, r3, r3, r2
 80125c4:	08d9      	lsrs	r1, r3, #3
 80125c6:	460b      	mov	r3, r1
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	440b      	add	r3, r1
 80125cc:	005b      	lsls	r3, r3, #1
 80125ce:	1ad3      	subs	r3, r2, r3
 80125d0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80125d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	4a2d      	ldr	r2, [pc, #180]	; (801268c <ip4addr_ntoa_r+0x100>)
 80125d8:	fba2 2303 	umull	r2, r3, r2, r3
 80125dc:	08db      	lsrs	r3, r3, #3
 80125de:	b2da      	uxtb	r2, r3
 80125e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80125e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125e8:	1c5a      	adds	r2, r3, #1
 80125ea:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80125ee:	4619      	mov	r1, r3
 80125f0:	7ffb      	ldrb	r3, [r7, #31]
 80125f2:	3330      	adds	r3, #48	; 0x30
 80125f4:	b2da      	uxtb	r2, r3
 80125f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80125fa:	440b      	add	r3, r1
 80125fc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8012600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d1d8      	bne.n	80125ba <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8012608:	e012      	b.n	8012630 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801260a:	6a3b      	ldr	r3, [r7, #32]
 801260c:	1c5a      	adds	r2, r3, #1
 801260e:	623a      	str	r2, [r7, #32]
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	429a      	cmp	r2, r3
 8012614:	dc01      	bgt.n	801261a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8012616:	2300      	movs	r3, #0
 8012618:	e031      	b.n	801267e <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801261a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012620:	1c59      	adds	r1, r3, #1
 8012622:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012624:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012628:	440a      	add	r2, r1
 801262a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801262e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8012630:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012634:	1e5a      	subs	r2, r3, #1
 8012636:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801263a:	2b00      	cmp	r3, #0
 801263c:	d1e5      	bne.n	801260a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801263e:	6a3b      	ldr	r3, [r7, #32]
 8012640:	1c5a      	adds	r2, r3, #1
 8012642:	623a      	str	r2, [r7, #32]
 8012644:	687a      	ldr	r2, [r7, #4]
 8012646:	429a      	cmp	r2, r3
 8012648:	dc01      	bgt.n	801264e <ip4addr_ntoa_r+0xc2>
      return NULL;
 801264a:	2300      	movs	r3, #0
 801264c:	e017      	b.n	801267e <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012650:	1c5a      	adds	r2, r3, #1
 8012652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012654:	222e      	movs	r2, #46	; 0x2e
 8012656:	701a      	strb	r2, [r3, #0]
    ap++;
 8012658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265a:	3301      	adds	r3, #1
 801265c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801265e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012662:	3301      	adds	r3, #1
 8012664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801266c:	2b03      	cmp	r3, #3
 801266e:	d9a1      	bls.n	80125b4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	3b01      	subs	r3, #1
 8012674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012678:	2200      	movs	r2, #0
 801267a:	701a      	strb	r2, [r3, #0]
  return buf;
 801267c:	68bb      	ldr	r3, [r7, #8]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3734      	adds	r7, #52	; 0x34
 8012682:	46bd      	mov	sp, r7
 8012684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	cccccccd 	.word	0xcccccccd

08012690 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012696:	2300      	movs	r3, #0
 8012698:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801269a:	4b12      	ldr	r3, [pc, #72]	; (80126e4 <ip_reass_tmr+0x54>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80126a0:	e018      	b.n	80126d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	7fdb      	ldrb	r3, [r3, #31]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d00b      	beq.n	80126c2 <ip_reass_tmr+0x32>
      r->timer--;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	7fdb      	ldrb	r3, [r3, #31]
 80126ae:	3b01      	subs	r3, #1
 80126b0:	b2da      	uxtb	r2, r3
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	60fb      	str	r3, [r7, #12]
 80126c0:	e008      	b.n	80126d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80126cc:	68b9      	ldr	r1, [r7, #8]
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 f80a 	bl	80126e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d1e3      	bne.n	80126a2 <ip_reass_tmr+0x12>
    }
  }
}
 80126da:	bf00      	nop
 80126dc:	bf00      	nop
 80126de:	3710      	adds	r7, #16
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	200006e8 	.word	0x200006e8

080126e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b088      	sub	sp, #32
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80126f2:	2300      	movs	r3, #0
 80126f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80126f6:	683a      	ldr	r2, [r7, #0]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d105      	bne.n	801270a <ip_reass_free_complete_datagram+0x22>
 80126fe:	4b45      	ldr	r3, [pc, #276]	; (8012814 <ip_reass_free_complete_datagram+0x12c>)
 8012700:	22ab      	movs	r2, #171	; 0xab
 8012702:	4945      	ldr	r1, [pc, #276]	; (8012818 <ip_reass_free_complete_datagram+0x130>)
 8012704:	4845      	ldr	r0, [pc, #276]	; (801281c <ip_reass_free_complete_datagram+0x134>)
 8012706:	f000 ffa3 	bl	8013650 <iprintf>
  if (prev != NULL) {
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00a      	beq.n	8012726 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	429a      	cmp	r2, r3
 8012718:	d005      	beq.n	8012726 <ip_reass_free_complete_datagram+0x3e>
 801271a:	4b3e      	ldr	r3, [pc, #248]	; (8012814 <ip_reass_free_complete_datagram+0x12c>)
 801271c:	22ad      	movs	r2, #173	; 0xad
 801271e:	4940      	ldr	r1, [pc, #256]	; (8012820 <ip_reass_free_complete_datagram+0x138>)
 8012720:	483e      	ldr	r0, [pc, #248]	; (801281c <ip_reass_free_complete_datagram+0x134>)
 8012722:	f000 ff95 	bl	8013650 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	889b      	ldrh	r3, [r3, #4]
 8012732:	b29b      	uxth	r3, r3
 8012734:	2b00      	cmp	r3, #0
 8012736:	d12a      	bne.n	801278e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012746:	69bb      	ldr	r3, [r7, #24]
 8012748:	6858      	ldr	r0, [r3, #4]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	3308      	adds	r3, #8
 801274e:	2214      	movs	r2, #20
 8012750:	4619      	mov	r1, r3
 8012752:	f000 ff4d 	bl	80135f0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012756:	2101      	movs	r1, #1
 8012758:	69b8      	ldr	r0, [r7, #24]
 801275a:	f7ff fa8d 	bl	8011c78 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801275e:	69b8      	ldr	r0, [r7, #24]
 8012760:	f7f5 f916 	bl	8007990 <pbuf_clen>
 8012764:	4603      	mov	r3, r0
 8012766:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012768:	8bfa      	ldrh	r2, [r7, #30]
 801276a:	8a7b      	ldrh	r3, [r7, #18]
 801276c:	4413      	add	r3, r2
 801276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012772:	db05      	blt.n	8012780 <ip_reass_free_complete_datagram+0x98>
 8012774:	4b27      	ldr	r3, [pc, #156]	; (8012814 <ip_reass_free_complete_datagram+0x12c>)
 8012776:	22bc      	movs	r2, #188	; 0xbc
 8012778:	492a      	ldr	r1, [pc, #168]	; (8012824 <ip_reass_free_complete_datagram+0x13c>)
 801277a:	4828      	ldr	r0, [pc, #160]	; (801281c <ip_reass_free_complete_datagram+0x134>)
 801277c:	f000 ff68 	bl	8013650 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012780:	8bfa      	ldrh	r2, [r7, #30]
 8012782:	8a7b      	ldrh	r3, [r7, #18]
 8012784:	4413      	add	r3, r2
 8012786:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012788:	69b8      	ldr	r0, [r7, #24]
 801278a:	f7f5 f879 	bl	8007880 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	685b      	ldr	r3, [r3, #4]
 8012792:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012794:	e01f      	b.n	80127d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80127a6:	68f8      	ldr	r0, [r7, #12]
 80127a8:	f7f5 f8f2 	bl	8007990 <pbuf_clen>
 80127ac:	4603      	mov	r3, r0
 80127ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80127b0:	8bfa      	ldrh	r2, [r7, #30]
 80127b2:	8a7b      	ldrh	r3, [r7, #18]
 80127b4:	4413      	add	r3, r2
 80127b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127ba:	db05      	blt.n	80127c8 <ip_reass_free_complete_datagram+0xe0>
 80127bc:	4b15      	ldr	r3, [pc, #84]	; (8012814 <ip_reass_free_complete_datagram+0x12c>)
 80127be:	22cc      	movs	r2, #204	; 0xcc
 80127c0:	4918      	ldr	r1, [pc, #96]	; (8012824 <ip_reass_free_complete_datagram+0x13c>)
 80127c2:	4816      	ldr	r0, [pc, #88]	; (801281c <ip_reass_free_complete_datagram+0x134>)
 80127c4:	f000 ff44 	bl	8013650 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80127c8:	8bfa      	ldrh	r2, [r7, #30]
 80127ca:	8a7b      	ldrh	r3, [r7, #18]
 80127cc:	4413      	add	r3, r2
 80127ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80127d0:	68f8      	ldr	r0, [r7, #12]
 80127d2:	f7f5 f855 	bl	8007880 <pbuf_free>
  while (p != NULL) {
 80127d6:	69bb      	ldr	r3, [r7, #24]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d1dc      	bne.n	8012796 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80127dc:	6839      	ldr	r1, [r7, #0]
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f000 f8ca 	bl	8012978 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80127e4:	4b10      	ldr	r3, [pc, #64]	; (8012828 <ip_reass_free_complete_datagram+0x140>)
 80127e6:	881b      	ldrh	r3, [r3, #0]
 80127e8:	8bfa      	ldrh	r2, [r7, #30]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d905      	bls.n	80127fa <ip_reass_free_complete_datagram+0x112>
 80127ee:	4b09      	ldr	r3, [pc, #36]	; (8012814 <ip_reass_free_complete_datagram+0x12c>)
 80127f0:	22d2      	movs	r2, #210	; 0xd2
 80127f2:	490e      	ldr	r1, [pc, #56]	; (801282c <ip_reass_free_complete_datagram+0x144>)
 80127f4:	4809      	ldr	r0, [pc, #36]	; (801281c <ip_reass_free_complete_datagram+0x134>)
 80127f6:	f000 ff2b 	bl	8013650 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80127fa:	4b0b      	ldr	r3, [pc, #44]	; (8012828 <ip_reass_free_complete_datagram+0x140>)
 80127fc:	881a      	ldrh	r2, [r3, #0]
 80127fe:	8bfb      	ldrh	r3, [r7, #30]
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	b29a      	uxth	r2, r3
 8012804:	4b08      	ldr	r3, [pc, #32]	; (8012828 <ip_reass_free_complete_datagram+0x140>)
 8012806:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012808:	8bfb      	ldrh	r3, [r7, #30]
}
 801280a:	4618      	mov	r0, r3
 801280c:	3720      	adds	r7, #32
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	080176d0 	.word	0x080176d0
 8012818:	0801770c 	.word	0x0801770c
 801281c:	08017718 	.word	0x08017718
 8012820:	08017740 	.word	0x08017740
 8012824:	08017754 	.word	0x08017754
 8012828:	200006ec 	.word	0x200006ec
 801282c:	08017774 	.word	0x08017774

08012830 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b08a      	sub	sp, #40	; 0x28
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801283a:	2300      	movs	r3, #0
 801283c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801283e:	2300      	movs	r3, #0
 8012840:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012842:	2300      	movs	r3, #0
 8012844:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012846:	2300      	movs	r3, #0
 8012848:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801284a:	2300      	movs	r3, #0
 801284c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801284e:	4b28      	ldr	r3, [pc, #160]	; (80128f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012854:	e030      	b.n	80128b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012858:	695a      	ldr	r2, [r3, #20]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	68db      	ldr	r3, [r3, #12]
 801285e:	429a      	cmp	r2, r3
 8012860:	d10c      	bne.n	801287c <ip_reass_remove_oldest_datagram+0x4c>
 8012862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012864:	699a      	ldr	r2, [r3, #24]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	691b      	ldr	r3, [r3, #16]
 801286a:	429a      	cmp	r2, r3
 801286c:	d106      	bne.n	801287c <ip_reass_remove_oldest_datagram+0x4c>
 801286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012870:	899a      	ldrh	r2, [r3, #12]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	889b      	ldrh	r3, [r3, #4]
 8012876:	b29b      	uxth	r3, r3
 8012878:	429a      	cmp	r2, r3
 801287a:	d014      	beq.n	80128a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	3301      	adds	r3, #1
 8012880:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012882:	6a3b      	ldr	r3, [r7, #32]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d104      	bne.n	8012892 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801288c:	69fb      	ldr	r3, [r7, #28]
 801288e:	61bb      	str	r3, [r7, #24]
 8012890:	e009      	b.n	80128a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012894:	7fda      	ldrb	r2, [r3, #31]
 8012896:	6a3b      	ldr	r3, [r7, #32]
 8012898:	7fdb      	ldrb	r3, [r3, #31]
 801289a:	429a      	cmp	r2, r3
 801289c:	d803      	bhi.n	80128a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80128a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d001      	beq.n	80128b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80128ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80128b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80128b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d1cb      	bne.n	8012856 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80128be:	6a3b      	ldr	r3, [r7, #32]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d008      	beq.n	80128d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80128c4:	69b9      	ldr	r1, [r7, #24]
 80128c6:	6a38      	ldr	r0, [r7, #32]
 80128c8:	f7ff ff0e 	bl	80126e8 <ip_reass_free_complete_datagram>
 80128cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80128ce:	697a      	ldr	r2, [r7, #20]
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	4413      	add	r3, r2
 80128d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80128d6:	697a      	ldr	r2, [r7, #20]
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	429a      	cmp	r2, r3
 80128dc:	da02      	bge.n	80128e4 <ip_reass_remove_oldest_datagram+0xb4>
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	dcac      	bgt.n	801283e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80128e4:	697b      	ldr	r3, [r7, #20]
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3728      	adds	r7, #40	; 0x28
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	200006e8 	.word	0x200006e8

080128f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b084      	sub	sp, #16
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80128fe:	2004      	movs	r0, #4
 8012900:	f7f4 f9a6 	bl	8006c50 <memp_malloc>
 8012904:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d116      	bne.n	801293a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801290c:	6839      	ldr	r1, [r7, #0]
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f7ff ff8e 	bl	8012830 <ip_reass_remove_oldest_datagram>
 8012914:	4602      	mov	r2, r0
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	4293      	cmp	r3, r2
 801291a:	dc03      	bgt.n	8012924 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801291c:	2004      	movs	r0, #4
 801291e:	f7f4 f997 	bl	8006c50 <memp_malloc>
 8012922:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d107      	bne.n	801293a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801292a:	4b11      	ldr	r3, [pc, #68]	; (8012970 <ip_reass_enqueue_new_datagram+0x7c>)
 801292c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801292e:	3301      	adds	r3, #1
 8012930:	b29a      	uxth	r2, r3
 8012932:	4b0f      	ldr	r3, [pc, #60]	; (8012970 <ip_reass_enqueue_new_datagram+0x7c>)
 8012934:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012936:	2300      	movs	r3, #0
 8012938:	e016      	b.n	8012968 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801293a:	2220      	movs	r2, #32
 801293c:	2100      	movs	r1, #0
 801293e:	68f8      	ldr	r0, [r7, #12]
 8012940:	f000 fe7e 	bl	8013640 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	220f      	movs	r2, #15
 8012948:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801294a:	4b0a      	ldr	r3, [pc, #40]	; (8012974 <ip_reass_enqueue_new_datagram+0x80>)
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012952:	4a08      	ldr	r2, [pc, #32]	; (8012974 <ip_reass_enqueue_new_datagram+0x80>)
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	3308      	adds	r3, #8
 801295c:	2214      	movs	r2, #20
 801295e:	6879      	ldr	r1, [r7, #4]
 8012960:	4618      	mov	r0, r3
 8012962:	f000 fe45 	bl	80135f0 <memcpy>
  return ipr;
 8012966:	68fb      	ldr	r3, [r7, #12]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3710      	adds	r7, #16
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	20007a4c 	.word	0x20007a4c
 8012974:	200006e8 	.word	0x200006e8

08012978 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012982:	4b10      	ldr	r3, [pc, #64]	; (80129c4 <ip_reass_dequeue_datagram+0x4c>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	429a      	cmp	r2, r3
 801298a:	d104      	bne.n	8012996 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a0c      	ldr	r2, [pc, #48]	; (80129c4 <ip_reass_dequeue_datagram+0x4c>)
 8012992:	6013      	str	r3, [r2, #0]
 8012994:	e00d      	b.n	80129b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d106      	bne.n	80129aa <ip_reass_dequeue_datagram+0x32>
 801299c:	4b0a      	ldr	r3, [pc, #40]	; (80129c8 <ip_reass_dequeue_datagram+0x50>)
 801299e:	f240 1245 	movw	r2, #325	; 0x145
 80129a2:	490a      	ldr	r1, [pc, #40]	; (80129cc <ip_reass_dequeue_datagram+0x54>)
 80129a4:	480a      	ldr	r0, [pc, #40]	; (80129d0 <ip_reass_dequeue_datagram+0x58>)
 80129a6:	f000 fe53 	bl	8013650 <iprintf>
    prev->next = ipr->next;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80129b2:	6879      	ldr	r1, [r7, #4]
 80129b4:	2004      	movs	r0, #4
 80129b6:	f7f4 f98d 	bl	8006cd4 <memp_free>
}
 80129ba:	bf00      	nop
 80129bc:	3708      	adds	r7, #8
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
 80129c2:	bf00      	nop
 80129c4:	200006e8 	.word	0x200006e8
 80129c8:	080176d0 	.word	0x080176d0
 80129cc:	08017798 	.word	0x08017798
 80129d0:	08017718 	.word	0x08017718

080129d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b08c      	sub	sp, #48	; 0x30
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80129e0:	2300      	movs	r3, #0
 80129e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80129e4:	2301      	movs	r3, #1
 80129e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	685b      	ldr	r3, [r3, #4]
 80129ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	885b      	ldrh	r3, [r3, #2]
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7f3 fa79 	bl	8005eec <lwip_htons>
 80129fa:	4603      	mov	r3, r0
 80129fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80129fe:	69fb      	ldr	r3, [r7, #28]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	f003 030f 	and.w	r3, r3, #15
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012a0c:	7e7b      	ldrb	r3, [r7, #25]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	8b7a      	ldrh	r2, [r7, #26]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d202      	bcs.n	8012a1c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a16:	f04f 33ff 	mov.w	r3, #4294967295
 8012a1a:	e135      	b.n	8012c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012a1c:	7e7b      	ldrb	r3, [r7, #25]
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	8b7a      	ldrh	r2, [r7, #26]
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	88db      	ldrh	r3, [r3, #6]
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7f3 fa5d 	bl	8005eec <lwip_htons>
 8012a32:	4603      	mov	r3, r0
 8012a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	00db      	lsls	r3, r3, #3
 8012a3c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	2200      	movs	r2, #0
 8012a48:	701a      	strb	r2, [r3, #0]
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	705a      	strb	r2, [r3, #1]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	709a      	strb	r2, [r3, #2]
 8012a52:	2200      	movs	r2, #0
 8012a54:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a58:	8afa      	ldrh	r2, [r7, #22]
 8012a5a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012a5c:	8afa      	ldrh	r2, [r7, #22]
 8012a5e:	8b7b      	ldrh	r3, [r7, #26]
 8012a60:	4413      	add	r3, r2
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a66:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6a:	88db      	ldrh	r3, [r3, #6]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	8afa      	ldrh	r2, [r7, #22]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d902      	bls.n	8012a7a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a74:	f04f 33ff 	mov.w	r3, #4294967295
 8012a78:	e106      	b.n	8012c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8012a80:	e068      	b.n	8012b54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8a:	889b      	ldrh	r3, [r3, #4]
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	693b      	ldr	r3, [r7, #16]
 8012a90:	889b      	ldrh	r3, [r3, #4]
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d235      	bcs.n	8012b04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d020      	beq.n	8012ae6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa6:	889b      	ldrh	r3, [r3, #4]
 8012aa8:	b29a      	uxth	r2, r3
 8012aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aac:	88db      	ldrh	r3, [r3, #6]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d307      	bcc.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab6:	88db      	ldrh	r3, [r3, #6]
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	889b      	ldrh	r3, [r3, #4]
 8012abe:	b29b      	uxth	r3, r3
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d902      	bls.n	8012aca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac8:	e0de      	b.n	8012c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012acc:	68ba      	ldr	r2, [r7, #8]
 8012ace:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad2:	88db      	ldrh	r3, [r3, #6]
 8012ad4:	b29a      	uxth	r2, r3
 8012ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad8:	889b      	ldrh	r3, [r3, #4]
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d03d      	beq.n	8012b5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012ae4:	e03a      	b.n	8012b5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae8:	88db      	ldrh	r3, [r3, #6]
 8012aea:	b29a      	uxth	r2, r3
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	889b      	ldrh	r3, [r3, #4]
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d902      	bls.n	8012afc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012af6:	f04f 33ff 	mov.w	r3, #4294967295
 8012afa:	e0c5      	b.n	8012c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	68ba      	ldr	r2, [r7, #8]
 8012b00:	605a      	str	r2, [r3, #4]
      break;
 8012b02:	e02b      	b.n	8012b5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b06:	889b      	ldrh	r3, [r3, #4]
 8012b08:	b29a      	uxth	r2, r3
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	889b      	ldrh	r3, [r3, #4]
 8012b0e:	b29b      	uxth	r3, r3
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d102      	bne.n	8012b1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012b14:	f04f 33ff 	mov.w	r3, #4294967295
 8012b18:	e0b6      	b.n	8012c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1c:	889b      	ldrh	r3, [r3, #4]
 8012b1e:	b29a      	uxth	r2, r3
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	88db      	ldrh	r3, [r3, #6]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d202      	bcs.n	8012b30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b2e:	e0ab      	b.n	8012c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d009      	beq.n	8012b4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b38:	88db      	ldrh	r3, [r3, #6]
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	889b      	ldrh	r3, [r3, #4]
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d001      	beq.n	8012b4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d193      	bne.n	8012a82 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012b5a:	e000      	b.n	8012b5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012b5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d12d      	bne.n	8012bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d01c      	beq.n	8012ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6c:	88db      	ldrh	r3, [r3, #6]
 8012b6e:	b29a      	uxth	r2, r3
 8012b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b72:	889b      	ldrh	r3, [r3, #4]
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d906      	bls.n	8012b88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012b7a:	4b45      	ldr	r3, [pc, #276]	; (8012c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b7c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012b80:	4944      	ldr	r1, [pc, #272]	; (8012c94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012b82:	4845      	ldr	r0, [pc, #276]	; (8012c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b84:	f000 fd64 	bl	8013650 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b8a:	68ba      	ldr	r2, [r7, #8]
 8012b8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b90:	88db      	ldrh	r3, [r3, #6]
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b96:	889b      	ldrh	r3, [r3, #4]
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d010      	beq.n	8012bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	623b      	str	r3, [r7, #32]
 8012ba2:	e00d      	b.n	8012bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d006      	beq.n	8012bba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012bac:	4b38      	ldr	r3, [pc, #224]	; (8012c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012bae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012bb2:	493a      	ldr	r1, [pc, #232]	; (8012c9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012bb4:	4838      	ldr	r0, [pc, #224]	; (8012c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bb6:	f000 fd4b 	bl	8013650 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	68ba      	ldr	r2, [r7, #8]
 8012bbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d105      	bne.n	8012bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	7f9b      	ldrb	r3, [r3, #30]
 8012bca:	f003 0301 	and.w	r3, r3, #1
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d059      	beq.n	8012c86 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012bd2:	6a3b      	ldr	r3, [r7, #32]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d04f      	beq.n	8012c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	685b      	ldr	r3, [r3, #4]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d006      	beq.n	8012bee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	889b      	ldrh	r3, [r3, #4]
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d002      	beq.n	8012bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	623b      	str	r3, [r7, #32]
 8012bf2:	e041      	b.n	8012c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012bfe:	e012      	b.n	8012c26 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c08:	88db      	ldrh	r3, [r3, #6]
 8012c0a:	b29a      	uxth	r2, r3
 8012c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0e:	889b      	ldrh	r3, [r3, #4]
 8012c10:	b29b      	uxth	r3, r3
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d002      	beq.n	8012c1c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012c16:	2300      	movs	r3, #0
 8012c18:	623b      	str	r3, [r7, #32]
            break;
 8012c1a:	e007      	b.n	8012c2c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d1e9      	bne.n	8012c00 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012c2c:	6a3b      	ldr	r3, [r7, #32]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d022      	beq.n	8012c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d106      	bne.n	8012c48 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012c3a:	4b15      	ldr	r3, [pc, #84]	; (8012c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012c3c:	f240 12df 	movw	r2, #479	; 0x1df
 8012c40:	4917      	ldr	r1, [pc, #92]	; (8012ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012c42:	4815      	ldr	r0, [pc, #84]	; (8012c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012c44:	f000 fd04 	bl	8013650 <iprintf>
          LWIP_ASSERT("sanity check",
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d106      	bne.n	8012c62 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012c54:	4b0e      	ldr	r3, [pc, #56]	; (8012c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012c56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012c5a:	4911      	ldr	r1, [pc, #68]	; (8012ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012c5c:	480e      	ldr	r0, [pc, #56]	; (8012c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012c5e:	f000 fcf7 	bl	8013650 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d006      	beq.n	8012c78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012c6a:	4b09      	ldr	r3, [pc, #36]	; (8012c90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012c6c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012c70:	490c      	ldr	r1, [pc, #48]	; (8012ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012c72:	4809      	ldr	r0, [pc, #36]	; (8012c98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012c74:	f000 fcec 	bl	8013650 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	bf14      	ite	ne
 8012c7e:	2301      	movne	r3, #1
 8012c80:	2300      	moveq	r3, #0
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	e000      	b.n	8012c88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012c86:	2300      	movs	r3, #0
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3730      	adds	r7, #48	; 0x30
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	080176d0 	.word	0x080176d0
 8012c94:	080177b4 	.word	0x080177b4
 8012c98:	08017718 	.word	0x08017718
 8012c9c:	080177d4 	.word	0x080177d4
 8012ca0:	0801780c 	.word	0x0801780c
 8012ca4:	0801781c 	.word	0x0801781c

08012ca8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b08e      	sub	sp, #56	; 0x38
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8012cb0:	4ba3      	ldr	r3, [pc, #652]	; (8012f40 <ip4_reass+0x298>)
 8012cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	b29a      	uxth	r2, r3
 8012cb8:	4ba1      	ldr	r3, [pc, #644]	; (8012f40 <ip4_reass+0x298>)
 8012cba:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	685b      	ldr	r3, [r3, #4]
 8012cc0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	f003 030f 	and.w	r3, r3, #15
 8012cca:	b2db      	uxtb	r3, r3
 8012ccc:	009b      	lsls	r3, r3, #2
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	2b14      	cmp	r3, #20
 8012cd2:	d008      	beq.n	8012ce6 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8012cd4:	4b9a      	ldr	r3, [pc, #616]	; (8012f40 <ip4_reass+0x298>)
 8012cd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012cda:	3301      	adds	r3, #1
 8012cdc:	b29a      	uxth	r2, r3
 8012cde:	4b98      	ldr	r3, [pc, #608]	; (8012f40 <ip4_reass+0x298>)
 8012ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 8012ce4:	e184      	b.n	8012ff0 <ip4_reass+0x348>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce8:	88db      	ldrh	r3, [r3, #6]
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7f3 f8fd 	bl	8005eec <lwip_htons>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	00db      	lsls	r3, r3, #3
 8012cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d00:	885b      	ldrh	r3, [r3, #2]
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7f3 f8f1 	bl	8005eec <lwip_htons>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	f003 030f 	and.w	r3, r3, #15
 8012d16:	b2db      	uxtb	r3, r3
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012d22:	b29b      	uxth	r3, r3
 8012d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d26:	429a      	cmp	r2, r3
 8012d28:	f0c0 815f 	bcc.w	8012fea <ip4_reass+0x342>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f7f4 fe29 	bl	8007990 <pbuf_clen>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012d42:	4b80      	ldr	r3, [pc, #512]	; (8012f44 <ip4_reass+0x29c>)
 8012d44:	881b      	ldrh	r3, [r3, #0]
 8012d46:	461a      	mov	r2, r3
 8012d48:	8c3b      	ldrh	r3, [r7, #32]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	2b0a      	cmp	r3, #10
 8012d4e:	dd15      	ble.n	8012d7c <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012d50:	8c3b      	ldrh	r3, [r7, #32]
 8012d52:	4619      	mov	r1, r3
 8012d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d56:	f7ff fd6b 	bl	8012830 <ip_reass_remove_oldest_datagram>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d006      	beq.n	8012d6e <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012d60:	4b78      	ldr	r3, [pc, #480]	; (8012f44 <ip4_reass+0x29c>)
 8012d62:	881b      	ldrh	r3, [r3, #0]
 8012d64:	461a      	mov	r2, r3
 8012d66:	8c3b      	ldrh	r3, [r7, #32]
 8012d68:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012d6a:	2b0a      	cmp	r3, #10
 8012d6c:	dd06      	ble.n	8012d7c <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8012d6e:	4b74      	ldr	r3, [pc, #464]	; (8012f40 <ip4_reass+0x298>)
 8012d70:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012d72:	3301      	adds	r3, #1
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	4b72      	ldr	r3, [pc, #456]	; (8012f40 <ip4_reass+0x298>)
 8012d78:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8012d7a:	e139      	b.n	8012ff0 <ip4_reass+0x348>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012d7c:	4b72      	ldr	r3, [pc, #456]	; (8012f48 <ip4_reass+0x2a0>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	633b      	str	r3, [r7, #48]	; 0x30
 8012d82:	e01e      	b.n	8012dc2 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d86:	695a      	ldr	r2, [r3, #20]
 8012d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d115      	bne.n	8012dbc <ip4_reass+0x114>
 8012d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d92:	699a      	ldr	r2, [r3, #24]
 8012d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d96:	691b      	ldr	r3, [r3, #16]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d10f      	bne.n	8012dbc <ip4_reass+0x114>
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9e:	899a      	ldrh	r2, [r3, #12]
 8012da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da2:	889b      	ldrh	r3, [r3, #4]
 8012da4:	b29b      	uxth	r3, r3
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d108      	bne.n	8012dbc <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8012daa:	4b65      	ldr	r3, [pc, #404]	; (8012f40 <ip4_reass+0x298>)
 8012dac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012db0:	3301      	adds	r3, #1
 8012db2:	b29a      	uxth	r2, r3
 8012db4:	4b62      	ldr	r3, [pc, #392]	; (8012f40 <ip4_reass+0x298>)
 8012db6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 8012dba:	e005      	b.n	8012dc8 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8012dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d1dd      	bne.n	8012d84 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d109      	bne.n	8012de2 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012dce:	8c3b      	ldrh	r3, [r7, #32]
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012dd4:	f7ff fd8e 	bl	80128f4 <ip_reass_enqueue_new_datagram>
 8012dd8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d11c      	bne.n	8012e1a <ip4_reass+0x172>
      goto nullreturn;
 8012de0:	e106      	b.n	8012ff0 <ip4_reass+0x348>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012de4:	88db      	ldrh	r3, [r3, #6]
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7f3 f87f 	bl	8005eec <lwip_htons>
 8012dee:	4603      	mov	r3, r0
 8012df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d110      	bne.n	8012e1a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfa:	89db      	ldrh	r3, [r3, #14]
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7f3 f875 	bl	8005eec <lwip_htons>
 8012e02:	4603      	mov	r3, r0
 8012e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d006      	beq.n	8012e1a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0e:	3308      	adds	r3, #8
 8012e10:	2214      	movs	r2, #20
 8012e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012e14:	4618      	mov	r0, r3
 8012e16:	f000 fbeb 	bl	80135f0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e1c:	88db      	ldrh	r3, [r3, #6]
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	f003 0320 	and.w	r3, r3, #32
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	bf0c      	ite	eq
 8012e28:	2301      	moveq	r3, #1
 8012e2a:	2300      	movne	r3, #0
 8012e2c:	b2db      	uxtb	r3, r3
 8012e2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d00e      	beq.n	8012e54 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8012e36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e3a:	4413      	add	r3, r2
 8012e3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012e3e:	8b7a      	ldrh	r2, [r7, #26]
 8012e40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e42:	429a      	cmp	r2, r3
 8012e44:	f0c0 80af 	bcc.w	8012fa6 <ip4_reass+0x2fe>
 8012e48:	8b7b      	ldrh	r3, [r7, #26]
 8012e4a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	f200 80a9 	bhi.w	8012fa6 <ip4_reass+0x2fe>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012e54:	69fa      	ldr	r2, [r7, #28]
 8012e56:	6879      	ldr	r1, [r7, #4]
 8012e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e5a:	f7ff fdbb 	bl	80129d4 <ip_reass_chain_frag_into_datagram_and_validate>
 8012e5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e66:	f000 80a0 	beq.w	8012faa <ip4_reass+0x302>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012e6a:	4b36      	ldr	r3, [pc, #216]	; (8012f44 <ip4_reass+0x29c>)
 8012e6c:	881a      	ldrh	r2, [r3, #0]
 8012e6e:	8c3b      	ldrh	r3, [r7, #32]
 8012e70:	4413      	add	r3, r2
 8012e72:	b29a      	uxth	r2, r3
 8012e74:	4b33      	ldr	r3, [pc, #204]	; (8012f44 <ip4_reass+0x29c>)
 8012e76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d00d      	beq.n	8012e9a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 8012e7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012e80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012e82:	4413      	add	r3, r2
 8012e84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e88:	8a7a      	ldrh	r2, [r7, #18]
 8012e8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e8e:	7f9b      	ldrb	r3, [r3, #30]
 8012e90:	f043 0301 	orr.w	r3, r3, #1
 8012e94:	b2da      	uxtb	r2, r3
 8012e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012e9a:	697b      	ldr	r3, [r7, #20]
 8012e9c:	2b01      	cmp	r3, #1
 8012e9e:	f040 8080 	bne.w	8012fa2 <ip4_reass+0x2fa>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea4:	8b9b      	ldrh	r3, [r3, #28]
 8012ea6:	3314      	adds	r3, #20
 8012ea8:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ebe:	3308      	adds	r3, #8
 8012ec0:	2214      	movs	r2, #20
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ec6:	f000 fb93 	bl	80135f0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012eca:	8a3b      	ldrh	r3, [r7, #16]
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7f3 f80d 	bl	8005eec <lwip_htons>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed8:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012edc:	2200      	movs	r2, #0
 8012ede:	719a      	strb	r2, [r3, #6]
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	729a      	strb	r2, [r3, #10]
 8012eea:	2200      	movs	r2, #0
 8012eec:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8012eee:	2114      	movs	r1, #20
 8012ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ef2:	f7f3 f9ad 	bl	8006250 <inet_chksum>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	461a      	mov	r2, r3
 8012efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efc:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012f04:	e00d      	b.n	8012f22 <ip4_reass+0x27a>
      iprh = (struct ip_reass_helper *)r->payload;
 8012f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012f0c:	2114      	movs	r1, #20
 8012f0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012f10:	f7f4 fc30 	bl	8007774 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012f14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f7f4 fd74 	bl	8007a04 <pbuf_cat>
      r = iprh->next_pbuf;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d1ee      	bne.n	8012f06 <ip4_reass+0x25e>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012f28:	4b07      	ldr	r3, [pc, #28]	; (8012f48 <ip4_reass+0x2a0>)
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d102      	bne.n	8012f38 <ip4_reass+0x290>
      ipr_prev = NULL;
 8012f32:	2300      	movs	r3, #0
 8012f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f36:	e016      	b.n	8012f66 <ip4_reass+0x2be>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012f38:	4b03      	ldr	r3, [pc, #12]	; (8012f48 <ip4_reass+0x2a0>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f3e:	e00d      	b.n	8012f5c <ip4_reass+0x2b4>
 8012f40:	20007a4c 	.word	0x20007a4c
 8012f44:	200006ec 	.word	0x200006ec
 8012f48:	200006e8 	.word	0x200006e8
        if (ipr_prev->next == ipr) {
 8012f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d006      	beq.n	8012f64 <ip4_reass+0x2bc>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1f4      	bne.n	8012f4c <ip4_reass+0x2a4>
 8012f62:	e000      	b.n	8012f66 <ip4_reass+0x2be>
          break;
 8012f64:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012f66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f6a:	f7ff fd05 	bl	8012978 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f7f4 fd0e 	bl	8007990 <pbuf_clen>
 8012f74:	4603      	mov	r3, r0
 8012f76:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012f78:	4b24      	ldr	r3, [pc, #144]	; (801300c <ip4_reass+0x364>)
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	8c3a      	ldrh	r2, [r7, #32]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d906      	bls.n	8012f90 <ip4_reass+0x2e8>
 8012f82:	4b23      	ldr	r3, [pc, #140]	; (8013010 <ip4_reass+0x368>)
 8012f84:	f240 229b 	movw	r2, #667	; 0x29b
 8012f88:	4922      	ldr	r1, [pc, #136]	; (8013014 <ip4_reass+0x36c>)
 8012f8a:	4823      	ldr	r0, [pc, #140]	; (8013018 <ip4_reass+0x370>)
 8012f8c:	f000 fb60 	bl	8013650 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012f90:	4b1e      	ldr	r3, [pc, #120]	; (801300c <ip4_reass+0x364>)
 8012f92:	881a      	ldrh	r2, [r3, #0]
 8012f94:	8c3b      	ldrh	r3, [r7, #32]
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	b29a      	uxth	r2, r3
 8012f9a:	4b1c      	ldr	r3, [pc, #112]	; (801300c <ip4_reass+0x364>)
 8012f9c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	e030      	b.n	8013004 <ip4_reass+0x35c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	e02e      	b.n	8013004 <ip4_reass+0x35c>
      goto nullreturn_ipr;
 8012fa6:	bf00      	nop
 8012fa8:	e000      	b.n	8012fac <ip4_reass+0x304>
    goto nullreturn_ipr;
 8012faa:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d106      	bne.n	8012fc0 <ip4_reass+0x318>
 8012fb2:	4b17      	ldr	r3, [pc, #92]	; (8013010 <ip4_reass+0x368>)
 8012fb4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012fb8:	4918      	ldr	r1, [pc, #96]	; (801301c <ip4_reass+0x374>)
 8012fba:	4817      	ldr	r0, [pc, #92]	; (8013018 <ip4_reass+0x370>)
 8012fbc:	f000 fb48 	bl	8013650 <iprintf>
  if (ipr->p == NULL) {
 8012fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d112      	bne.n	8012fee <ip4_reass+0x346>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012fc8:	4b15      	ldr	r3, [pc, #84]	; (8013020 <ip4_reass+0x378>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d006      	beq.n	8012fe0 <ip4_reass+0x338>
 8012fd2:	4b0f      	ldr	r3, [pc, #60]	; (8013010 <ip4_reass+0x368>)
 8012fd4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012fd8:	4912      	ldr	r1, [pc, #72]	; (8013024 <ip4_reass+0x37c>)
 8012fda:	480f      	ldr	r0, [pc, #60]	; (8013018 <ip4_reass+0x370>)
 8012fdc:	f000 fb38 	bl	8013650 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fe4:	f7ff fcc8 	bl	8012978 <ip_reass_dequeue_datagram>
 8012fe8:	e002      	b.n	8012ff0 <ip4_reass+0x348>
    goto nullreturn;
 8012fea:	bf00      	nop
 8012fec:	e000      	b.n	8012ff0 <ip4_reass+0x348>
  }

nullreturn:
 8012fee:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8012ff0:	4b0d      	ldr	r3, [pc, #52]	; (8013028 <ip4_reass+0x380>)
 8012ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	b29a      	uxth	r2, r3
 8012ff8:	4b0b      	ldr	r3, [pc, #44]	; (8013028 <ip4_reass+0x380>)
 8012ffa:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f7f4 fc3f 	bl	8007880 <pbuf_free>
  return NULL;
 8013002:	2300      	movs	r3, #0
}
 8013004:	4618      	mov	r0, r3
 8013006:	3738      	adds	r7, #56	; 0x38
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	200006ec 	.word	0x200006ec
 8013010:	080176d0 	.word	0x080176d0
 8013014:	08017840 	.word	0x08017840
 8013018:	08017718 	.word	0x08017718
 801301c:	0801785c 	.word	0x0801785c
 8013020:	200006e8 	.word	0x200006e8
 8013024:	08017868 	.word	0x08017868
 8013028:	20007a4c 	.word	0x20007a4c

0801302c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013030:	2005      	movs	r0, #5
 8013032:	f7f3 fe0d 	bl	8006c50 <memp_malloc>
 8013036:	4603      	mov	r3, r0
}
 8013038:	4618      	mov	r0, r3
 801303a:	bd80      	pop	{r7, pc}

0801303c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d106      	bne.n	8013058 <ip_frag_free_pbuf_custom_ref+0x1c>
 801304a:	4b07      	ldr	r3, [pc, #28]	; (8013068 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801304c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013050:	4906      	ldr	r1, [pc, #24]	; (801306c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013052:	4807      	ldr	r0, [pc, #28]	; (8013070 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013054:	f000 fafc 	bl	8013650 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013058:	6879      	ldr	r1, [r7, #4]
 801305a:	2005      	movs	r0, #5
 801305c:	f7f3 fe3a 	bl	8006cd4 <memp_free>
}
 8013060:	bf00      	nop
 8013062:	3708      	adds	r7, #8
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	080176d0 	.word	0x080176d0
 801306c:	08017888 	.word	0x08017888
 8013070:	08017718 	.word	0x08017718

08013074 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d106      	bne.n	8013094 <ipfrag_free_pbuf_custom+0x20>
 8013086:	4b11      	ldr	r3, [pc, #68]	; (80130cc <ipfrag_free_pbuf_custom+0x58>)
 8013088:	f240 22ce 	movw	r2, #718	; 0x2ce
 801308c:	4910      	ldr	r1, [pc, #64]	; (80130d0 <ipfrag_free_pbuf_custom+0x5c>)
 801308e:	4811      	ldr	r0, [pc, #68]	; (80130d4 <ipfrag_free_pbuf_custom+0x60>)
 8013090:	f000 fade 	bl	8013650 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013094:	68fa      	ldr	r2, [r7, #12]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	429a      	cmp	r2, r3
 801309a:	d006      	beq.n	80130aa <ipfrag_free_pbuf_custom+0x36>
 801309c:	4b0b      	ldr	r3, [pc, #44]	; (80130cc <ipfrag_free_pbuf_custom+0x58>)
 801309e:	f240 22cf 	movw	r2, #719	; 0x2cf
 80130a2:	490d      	ldr	r1, [pc, #52]	; (80130d8 <ipfrag_free_pbuf_custom+0x64>)
 80130a4:	480b      	ldr	r0, [pc, #44]	; (80130d4 <ipfrag_free_pbuf_custom+0x60>)
 80130a6:	f000 fad3 	bl	8013650 <iprintf>
  if (pcr->original != NULL) {
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	695b      	ldr	r3, [r3, #20]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d004      	beq.n	80130bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	695b      	ldr	r3, [r3, #20]
 80130b6:	4618      	mov	r0, r3
 80130b8:	f7f4 fbe2 	bl	8007880 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80130bc:	68f8      	ldr	r0, [r7, #12]
 80130be:	f7ff ffbd 	bl	801303c <ip_frag_free_pbuf_custom_ref>
}
 80130c2:	bf00      	nop
 80130c4:	3710      	adds	r7, #16
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	080176d0 	.word	0x080176d0
 80130d0:	08017894 	.word	0x08017894
 80130d4:	08017718 	.word	0x08017718
 80130d8:	080178a0 	.word	0x080178a0

080130dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b094      	sub	sp, #80	; 0x50
 80130e0:	af02      	add	r7, sp, #8
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80130e8:	2300      	movs	r3, #0
 80130ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130f2:	3b14      	subs	r3, #20
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	da00      	bge.n	80130fa <ip4_frag+0x1e>
 80130f8:	3307      	adds	r3, #7
 80130fa:	10db      	asrs	r3, r3, #3
 80130fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80130fe:	2314      	movs	r3, #20
 8013100:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	685b      	ldr	r3, [r3, #4]
 8013106:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801310a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	f003 030f 	and.w	r3, r3, #15
 8013114:	b2db      	uxtb	r3, r3
 8013116:	009b      	lsls	r3, r3, #2
 8013118:	b2db      	uxtb	r3, r3
 801311a:	2b14      	cmp	r3, #20
 801311c:	d002      	beq.n	8013124 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801311e:	f06f 0305 	mvn.w	r3, #5
 8013122:	e11e      	b.n	8013362 <ip4_frag+0x286>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	895b      	ldrh	r3, [r3, #10]
 8013128:	2b13      	cmp	r3, #19
 801312a:	d809      	bhi.n	8013140 <ip4_frag+0x64>
 801312c:	4b8f      	ldr	r3, [pc, #572]	; (801336c <ip4_frag+0x290>)
 801312e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013132:	498f      	ldr	r1, [pc, #572]	; (8013370 <ip4_frag+0x294>)
 8013134:	488f      	ldr	r0, [pc, #572]	; (8013374 <ip4_frag+0x298>)
 8013136:	f000 fa8b 	bl	8013650 <iprintf>
 801313a:	f06f 0305 	mvn.w	r3, #5
 801313e:	e110      	b.n	8013362 <ip4_frag+0x286>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013142:	88db      	ldrh	r3, [r3, #6]
 8013144:	b29b      	uxth	r3, r3
 8013146:	4618      	mov	r0, r3
 8013148:	f7f2 fed0 	bl	8005eec <lwip_htons>
 801314c:	4603      	mov	r3, r0
 801314e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013150:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013156:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801315a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801315c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013160:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	891b      	ldrh	r3, [r3, #8]
 8013166:	3b14      	subs	r3, #20
 8013168:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801316c:	e0ef      	b.n	801334e <ip4_frag+0x272>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801316e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013170:	00db      	lsls	r3, r3, #3
 8013172:	b29b      	uxth	r3, r3
 8013174:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013178:	4293      	cmp	r3, r2
 801317a:	bf28      	it	cs
 801317c:	4613      	movcs	r3, r2
 801317e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013180:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013184:	2114      	movs	r1, #20
 8013186:	200e      	movs	r0, #14
 8013188:	f7f4 f8da 	bl	8007340 <pbuf_alloc>
 801318c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013190:	2b00      	cmp	r3, #0
 8013192:	f000 80e3 	beq.w	801335c <ip4_frag+0x280>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013198:	895b      	ldrh	r3, [r3, #10]
 801319a:	2b13      	cmp	r3, #19
 801319c:	d806      	bhi.n	80131ac <ip4_frag+0xd0>
 801319e:	4b73      	ldr	r3, [pc, #460]	; (801336c <ip4_frag+0x290>)
 80131a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80131a4:	4974      	ldr	r1, [pc, #464]	; (8013378 <ip4_frag+0x29c>)
 80131a6:	4873      	ldr	r0, [pc, #460]	; (8013374 <ip4_frag+0x298>)
 80131a8:	f000 fa52 	bl	8013650 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80131ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	2214      	movs	r2, #20
 80131b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131b4:	4618      	mov	r0, r3
 80131b6:	f000 fa1b 	bl	80135f0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80131ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80131c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80131c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80131c6:	e064      	b.n	8013292 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	895a      	ldrh	r2, [r3, #10]
 80131cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80131ce:	1ad3      	subs	r3, r2, r3
 80131d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	895b      	ldrh	r3, [r3, #10]
 80131d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80131d8:	429a      	cmp	r2, r3
 80131da:	d906      	bls.n	80131ea <ip4_frag+0x10e>
 80131dc:	4b63      	ldr	r3, [pc, #396]	; (801336c <ip4_frag+0x290>)
 80131de:	f240 322d 	movw	r2, #813	; 0x32d
 80131e2:	4966      	ldr	r1, [pc, #408]	; (801337c <ip4_frag+0x2a0>)
 80131e4:	4863      	ldr	r0, [pc, #396]	; (8013374 <ip4_frag+0x298>)
 80131e6:	f000 fa33 	bl	8013650 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80131ea:	8bfa      	ldrh	r2, [r7, #30]
 80131ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131f0:	4293      	cmp	r3, r2
 80131f2:	bf28      	it	cs
 80131f4:	4613      	movcs	r3, r2
 80131f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80131fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d105      	bne.n	801320e <ip4_frag+0x132>
        poff = 0;
 8013202:	2300      	movs	r3, #0
 8013204:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	60fb      	str	r3, [r7, #12]
        continue;
 801320c:	e041      	b.n	8013292 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801320e:	f7ff ff0d 	bl	801302c <ip_frag_alloc_pbuf_custom_ref>
 8013212:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d103      	bne.n	8013222 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801321a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801321c:	f7f4 fb30 	bl	8007880 <pbuf_free>
        goto memerr;
 8013220:	e09d      	b.n	801335e <ip4_frag+0x282>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013222:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801322a:	4413      	add	r3, r2
 801322c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013230:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013234:	9201      	str	r2, [sp, #4]
 8013236:	9300      	str	r3, [sp, #0]
 8013238:	4603      	mov	r3, r0
 801323a:	2241      	movs	r2, #65	; 0x41
 801323c:	2000      	movs	r0, #0
 801323e:	f7f4 f96b 	bl	8007518 <pbuf_alloced_custom>
 8013242:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d106      	bne.n	8013258 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801324a:	69b8      	ldr	r0, [r7, #24]
 801324c:	f7ff fef6 	bl	801303c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013252:	f7f4 fb15 	bl	8007880 <pbuf_free>
        goto memerr;
 8013256:	e082      	b.n	801335e <ip4_frag+0x282>
      }
      pbuf_ref(p);
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f7f4 fbb1 	bl	80079c0 <pbuf_ref>
      pcr->original = p;
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	68fa      	ldr	r2, [r7, #12]
 8013262:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013264:	69bb      	ldr	r3, [r7, #24]
 8013266:	4a46      	ldr	r2, [pc, #280]	; (8013380 <ip4_frag+0x2a4>)
 8013268:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801326a:	6979      	ldr	r1, [r7, #20]
 801326c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801326e:	f7f4 fbc9 	bl	8007a04 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013272:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801327a:	1ad3      	subs	r3, r2, r3
 801327c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013284:	2b00      	cmp	r3, #0
 8013286:	d004      	beq.n	8013292 <ip4_frag+0x1b6>
        poff = 0;
 8013288:	2300      	movs	r3, #0
 801328a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013292:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013296:	2b00      	cmp	r3, #0
 8013298:	d196      	bne.n	80131c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801329a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801329c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80132a0:	4413      	add	r3, r2
 80132a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132a8:	f1a3 0213 	sub.w	r2, r3, #19
 80132ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80132b0:	429a      	cmp	r2, r3
 80132b2:	bfcc      	ite	gt
 80132b4:	2301      	movgt	r3, #1
 80132b6:	2300      	movle	r3, #0
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80132bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80132c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80132c6:	6a3b      	ldr	r3, [r7, #32]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d002      	beq.n	80132d2 <ip4_frag+0x1f6>
 80132cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80132d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80132d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80132d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80132da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80132dc:	4618      	mov	r0, r3
 80132de:	f7f2 fe05 	bl	8005eec <lwip_htons>
 80132e2:	4603      	mov	r3, r0
 80132e4:	461a      	mov	r2, r3
 80132e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80132ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80132ec:	3314      	adds	r3, #20
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	4618      	mov	r0, r3
 80132f2:	f7f2 fdfb 	bl	8005eec <lwip_htons>
 80132f6:	4603      	mov	r3, r0
 80132f8:	461a      	mov	r2, r3
 80132fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80132fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013300:	2200      	movs	r2, #0
 8013302:	729a      	strb	r2, [r3, #10]
 8013304:	2200      	movs	r2, #0
 8013306:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8013308:	2114      	movs	r1, #20
 801330a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801330c:	f7f2 ffa0 	bl	8006250 <inet_chksum>
 8013310:	4603      	mov	r3, r0
 8013312:	461a      	mov	r2, r3
 8013314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013316:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	695b      	ldr	r3, [r3, #20]
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013320:	68b8      	ldr	r0, [r7, #8]
 8013322:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8013324:	4b17      	ldr	r3, [pc, #92]	; (8013384 <ip4_frag+0x2a8>)
 8013326:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8013328:	3301      	adds	r3, #1
 801332a:	b29a      	uxth	r2, r3
 801332c:	4b15      	ldr	r3, [pc, #84]	; (8013384 <ip4_frag+0x2a8>)
 801332e:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013332:	f7f4 faa5 	bl	8007880 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013336:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801333a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801333c:	1ad3      	subs	r3, r2, r3
 801333e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013342:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013346:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013348:	4413      	add	r3, r2
 801334a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801334e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013352:	2b00      	cmp	r3, #0
 8013354:	f47f af0b 	bne.w	801316e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013358:	2300      	movs	r3, #0
 801335a:	e002      	b.n	8013362 <ip4_frag+0x286>
      goto memerr;
 801335c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801335e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013362:	4618      	mov	r0, r3
 8013364:	3748      	adds	r7, #72	; 0x48
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop
 801336c:	080176d0 	.word	0x080176d0
 8013370:	080178ac 	.word	0x080178ac
 8013374:	08017718 	.word	0x08017718
 8013378:	080178c8 	.word	0x080178c8
 801337c:	080178e8 	.word	0x080178e8
 8013380:	08013075 	.word	0x08013075
 8013384:	20007a4c 	.word	0x20007a4c

08013388 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b086      	sub	sp, #24
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013392:	230e      	movs	r3, #14
 8013394:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	895b      	ldrh	r3, [r3, #10]
 801339a:	2b0e      	cmp	r3, #14
 801339c:	d80c      	bhi.n	80133b8 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801339e:	4b51      	ldr	r3, [pc, #324]	; (80134e4 <ethernet_input+0x15c>)
 80133a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133a2:	3301      	adds	r3, #1
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	4b4f      	ldr	r3, [pc, #316]	; (80134e4 <ethernet_input+0x15c>)
 80133a8:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80133aa:	4b4e      	ldr	r3, [pc, #312]	; (80134e4 <ethernet_input+0x15c>)
 80133ac:	8bdb      	ldrh	r3, [r3, #30]
 80133ae:	3301      	adds	r3, #1
 80133b0:	b29a      	uxth	r2, r3
 80133b2:	4b4c      	ldr	r3, [pc, #304]	; (80134e4 <ethernet_input+0x15c>)
 80133b4:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 80133b6:	e08d      	b.n	80134d4 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	7bdb      	ldrb	r3, [r3, #15]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d106      	bne.n	80133ce <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80133c6:	3301      	adds	r3, #1
 80133c8:	b2da      	uxtb	r2, r3
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	7b1a      	ldrb	r2, [r3, #12]
 80133d8:	7b5b      	ldrb	r3, [r3, #13]
 80133da:	021b      	lsls	r3, r3, #8
 80133dc:	4313      	orrs	r3, r2
 80133de:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	f003 0301 	and.w	r3, r3, #1
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d023      	beq.n	8013434 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d10f      	bne.n	8013414 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	785b      	ldrb	r3, [r3, #1]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d11b      	bne.n	8013434 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013400:	2b5e      	cmp	r3, #94	; 0x5e
 8013402:	d117      	bne.n	8013434 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	7b5b      	ldrb	r3, [r3, #13]
 8013408:	f043 0310 	orr.w	r3, r3, #16
 801340c:	b2da      	uxtb	r2, r3
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	735a      	strb	r2, [r3, #13]
 8013412:	e00f      	b.n	8013434 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	2206      	movs	r2, #6
 8013418:	4933      	ldr	r1, [pc, #204]	; (80134e8 <ethernet_input+0x160>)
 801341a:	4618      	mov	r0, r3
 801341c:	f000 f8da 	bl	80135d4 <memcmp>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	d106      	bne.n	8013434 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	7b5b      	ldrb	r3, [r3, #13]
 801342a:	f043 0308 	orr.w	r3, r3, #8
 801342e:	b2da      	uxtb	r2, r3
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013434:	89fb      	ldrh	r3, [r7, #14]
 8013436:	2b08      	cmp	r3, #8
 8013438:	d003      	beq.n	8013442 <ethernet_input+0xba>
 801343a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801343e:	d014      	beq.n	801346a <ethernet_input+0xe2>
 8013440:	e034      	b.n	80134ac <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013448:	f003 0308 	and.w	r3, r3, #8
 801344c:	2b00      	cmp	r3, #0
 801344e:	d03c      	beq.n	80134ca <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013450:	8afb      	ldrh	r3, [r7, #22]
 8013452:	4619      	mov	r1, r3
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f7f4 f98d 	bl	8007774 <pbuf_remove_header>
 801345a:	4603      	mov	r3, r0
 801345c:	2b00      	cmp	r3, #0
 801345e:	d136      	bne.n	80134ce <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8013460:	6839      	ldr	r1, [r7, #0]
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f7fe fd3a 	bl	8011edc <ip4_input>
      }
      break;
 8013468:	e02d      	b.n	80134c6 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013470:	f003 0308 	and.w	r3, r3, #8
 8013474:	2b00      	cmp	r3, #0
 8013476:	d02c      	beq.n	80134d2 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013478:	8afb      	ldrh	r3, [r7, #22]
 801347a:	4619      	mov	r1, r3
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f7f4 f979 	bl	8007774 <pbuf_remove_header>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d00c      	beq.n	80134a2 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8013488:	4b16      	ldr	r3, [pc, #88]	; (80134e4 <ethernet_input+0x15c>)
 801348a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801348c:	3301      	adds	r3, #1
 801348e:	b29a      	uxth	r2, r3
 8013490:	4b14      	ldr	r3, [pc, #80]	; (80134e4 <ethernet_input+0x15c>)
 8013492:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8013494:	4b13      	ldr	r3, [pc, #76]	; (80134e4 <ethernet_input+0x15c>)
 8013496:	8bdb      	ldrh	r3, [r3, #30]
 8013498:	3301      	adds	r3, #1
 801349a:	b29a      	uxth	r2, r3
 801349c:	4b11      	ldr	r3, [pc, #68]	; (80134e4 <ethernet_input+0x15c>)
 801349e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 80134a0:	e018      	b.n	80134d4 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 80134a2:	6839      	ldr	r1, [r7, #0]
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7fd fe09 	bl	80110bc <etharp_input>
      }
      break;
 80134aa:	e00c      	b.n	80134c6 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 80134ac:	4b0d      	ldr	r3, [pc, #52]	; (80134e4 <ethernet_input+0x15c>)
 80134ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134b0:	3301      	adds	r3, #1
 80134b2:	b29a      	uxth	r2, r3
 80134b4:	4b0b      	ldr	r3, [pc, #44]	; (80134e4 <ethernet_input+0x15c>)
 80134b6:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 80134b8:	4b0a      	ldr	r3, [pc, #40]	; (80134e4 <ethernet_input+0x15c>)
 80134ba:	8bdb      	ldrh	r3, [r3, #30]
 80134bc:	3301      	adds	r3, #1
 80134be:	b29a      	uxth	r2, r3
 80134c0:	4b08      	ldr	r3, [pc, #32]	; (80134e4 <ethernet_input+0x15c>)
 80134c2:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80134c4:	e006      	b.n	80134d4 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80134c6:	2300      	movs	r3, #0
 80134c8:	e008      	b.n	80134dc <ethernet_input+0x154>
        goto free_and_return;
 80134ca:	bf00      	nop
 80134cc:	e002      	b.n	80134d4 <ethernet_input+0x14c>
        goto free_and_return;
 80134ce:	bf00      	nop
 80134d0:	e000      	b.n	80134d4 <ethernet_input+0x14c>
        goto free_and_return;
 80134d2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f7f4 f9d3 	bl	8007880 <pbuf_free>
  return ERR_OK;
 80134da:	2300      	movs	r3, #0
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3718      	adds	r7, #24
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}
 80134e4:	20007a4c 	.word	0x20007a4c
 80134e8:	08041e54 	.word	0x08041e54

080134ec <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b086      	sub	sp, #24
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	60f8      	str	r0, [r7, #12]
 80134f4:	60b9      	str	r1, [r7, #8]
 80134f6:	607a      	str	r2, [r7, #4]
 80134f8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80134fa:	8c3b      	ldrh	r3, [r7, #32]
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f2 fcf5 	bl	8005eec <lwip_htons>
 8013502:	4603      	mov	r3, r0
 8013504:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013506:	210e      	movs	r1, #14
 8013508:	68b8      	ldr	r0, [r7, #8]
 801350a:	f7f4 f923 	bl	8007754 <pbuf_add_header>
 801350e:	4603      	mov	r3, r0
 8013510:	2b00      	cmp	r3, #0
 8013512:	d125      	bne.n	8013560 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801351a:	693b      	ldr	r3, [r7, #16]
 801351c:	8afa      	ldrh	r2, [r7, #22]
 801351e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	2206      	movs	r2, #6
 8013524:	6839      	ldr	r1, [r7, #0]
 8013526:	4618      	mov	r0, r3
 8013528:	f000 f862 	bl	80135f0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	3306      	adds	r3, #6
 8013530:	2206      	movs	r2, #6
 8013532:	6879      	ldr	r1, [r7, #4]
 8013534:	4618      	mov	r0, r3
 8013536:	f000 f85b 	bl	80135f0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013540:	2b06      	cmp	r3, #6
 8013542:	d006      	beq.n	8013552 <ethernet_output+0x66>
 8013544:	4b0d      	ldr	r3, [pc, #52]	; (801357c <ethernet_output+0x90>)
 8013546:	f44f 7299 	mov.w	r2, #306	; 0x132
 801354a:	490d      	ldr	r1, [pc, #52]	; (8013580 <ethernet_output+0x94>)
 801354c:	480d      	ldr	r0, [pc, #52]	; (8013584 <ethernet_output+0x98>)
 801354e:	f000 f87f 	bl	8013650 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	699b      	ldr	r3, [r3, #24]
 8013556:	68b9      	ldr	r1, [r7, #8]
 8013558:	68f8      	ldr	r0, [r7, #12]
 801355a:	4798      	blx	r3
 801355c:	4603      	mov	r3, r0
 801355e:	e008      	b.n	8013572 <ethernet_output+0x86>
      goto pbuf_header_failed;
 8013560:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8013562:	4b09      	ldr	r3, [pc, #36]	; (8013588 <ethernet_output+0x9c>)
 8013564:	895b      	ldrh	r3, [r3, #10]
 8013566:	3301      	adds	r3, #1
 8013568:	b29a      	uxth	r2, r3
 801356a:	4b07      	ldr	r3, [pc, #28]	; (8013588 <ethernet_output+0x9c>)
 801356c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801356e:	f06f 0301 	mvn.w	r3, #1
}
 8013572:	4618      	mov	r0, r3
 8013574:	3718      	adds	r7, #24
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	080178f8 	.word	0x080178f8
 8013580:	08017930 	.word	0x08017930
 8013584:	08017964 	.word	0x08017964
 8013588:	20007a4c 	.word	0x20007a4c

0801358c <__libc_init_array>:
 801358c:	b570      	push	{r4, r5, r6, lr}
 801358e:	4d0d      	ldr	r5, [pc, #52]	; (80135c4 <__libc_init_array+0x38>)
 8013590:	4c0d      	ldr	r4, [pc, #52]	; (80135c8 <__libc_init_array+0x3c>)
 8013592:	1b64      	subs	r4, r4, r5
 8013594:	10a4      	asrs	r4, r4, #2
 8013596:	2600      	movs	r6, #0
 8013598:	42a6      	cmp	r6, r4
 801359a:	d109      	bne.n	80135b0 <__libc_init_array+0x24>
 801359c:	4d0b      	ldr	r5, [pc, #44]	; (80135cc <__libc_init_array+0x40>)
 801359e:	4c0c      	ldr	r4, [pc, #48]	; (80135d0 <__libc_init_array+0x44>)
 80135a0:	f001 fa3a 	bl	8014a18 <_init>
 80135a4:	1b64      	subs	r4, r4, r5
 80135a6:	10a4      	asrs	r4, r4, #2
 80135a8:	2600      	movs	r6, #0
 80135aa:	42a6      	cmp	r6, r4
 80135ac:	d105      	bne.n	80135ba <__libc_init_array+0x2e>
 80135ae:	bd70      	pop	{r4, r5, r6, pc}
 80135b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80135b4:	4798      	blx	r3
 80135b6:	3601      	adds	r6, #1
 80135b8:	e7ee      	b.n	8013598 <__libc_init_array+0xc>
 80135ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80135be:	4798      	blx	r3
 80135c0:	3601      	adds	r6, #1
 80135c2:	e7f2      	b.n	80135aa <__libc_init_array+0x1e>
 80135c4:	08041fb8 	.word	0x08041fb8
 80135c8:	08041fb8 	.word	0x08041fb8
 80135cc:	08041fb8 	.word	0x08041fb8
 80135d0:	08041fbc 	.word	0x08041fbc

080135d4 <memcmp>:
 80135d4:	b530      	push	{r4, r5, lr}
 80135d6:	3901      	subs	r1, #1
 80135d8:	2400      	movs	r4, #0
 80135da:	42a2      	cmp	r2, r4
 80135dc:	d101      	bne.n	80135e2 <memcmp+0xe>
 80135de:	2000      	movs	r0, #0
 80135e0:	e005      	b.n	80135ee <memcmp+0x1a>
 80135e2:	5d03      	ldrb	r3, [r0, r4]
 80135e4:	3401      	adds	r4, #1
 80135e6:	5d0d      	ldrb	r5, [r1, r4]
 80135e8:	42ab      	cmp	r3, r5
 80135ea:	d0f6      	beq.n	80135da <memcmp+0x6>
 80135ec:	1b58      	subs	r0, r3, r5
 80135ee:	bd30      	pop	{r4, r5, pc}

080135f0 <memcpy>:
 80135f0:	440a      	add	r2, r1
 80135f2:	4291      	cmp	r1, r2
 80135f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80135f8:	d100      	bne.n	80135fc <memcpy+0xc>
 80135fa:	4770      	bx	lr
 80135fc:	b510      	push	{r4, lr}
 80135fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013606:	4291      	cmp	r1, r2
 8013608:	d1f9      	bne.n	80135fe <memcpy+0xe>
 801360a:	bd10      	pop	{r4, pc}

0801360c <memmove>:
 801360c:	4288      	cmp	r0, r1
 801360e:	b510      	push	{r4, lr}
 8013610:	eb01 0402 	add.w	r4, r1, r2
 8013614:	d902      	bls.n	801361c <memmove+0x10>
 8013616:	4284      	cmp	r4, r0
 8013618:	4623      	mov	r3, r4
 801361a:	d807      	bhi.n	801362c <memmove+0x20>
 801361c:	1e43      	subs	r3, r0, #1
 801361e:	42a1      	cmp	r1, r4
 8013620:	d008      	beq.n	8013634 <memmove+0x28>
 8013622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013626:	f803 2f01 	strb.w	r2, [r3, #1]!
 801362a:	e7f8      	b.n	801361e <memmove+0x12>
 801362c:	4402      	add	r2, r0
 801362e:	4601      	mov	r1, r0
 8013630:	428a      	cmp	r2, r1
 8013632:	d100      	bne.n	8013636 <memmove+0x2a>
 8013634:	bd10      	pop	{r4, pc}
 8013636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801363a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801363e:	e7f7      	b.n	8013630 <memmove+0x24>

08013640 <memset>:
 8013640:	4402      	add	r2, r0
 8013642:	4603      	mov	r3, r0
 8013644:	4293      	cmp	r3, r2
 8013646:	d100      	bne.n	801364a <memset+0xa>
 8013648:	4770      	bx	lr
 801364a:	f803 1b01 	strb.w	r1, [r3], #1
 801364e:	e7f9      	b.n	8013644 <memset+0x4>

08013650 <iprintf>:
 8013650:	b40f      	push	{r0, r1, r2, r3}
 8013652:	4b0a      	ldr	r3, [pc, #40]	; (801367c <iprintf+0x2c>)
 8013654:	b513      	push	{r0, r1, r4, lr}
 8013656:	681c      	ldr	r4, [r3, #0]
 8013658:	b124      	cbz	r4, 8013664 <iprintf+0x14>
 801365a:	69a3      	ldr	r3, [r4, #24]
 801365c:	b913      	cbnz	r3, 8013664 <iprintf+0x14>
 801365e:	4620      	mov	r0, r4
 8013660:	f000 f904 	bl	801386c <__sinit>
 8013664:	ab05      	add	r3, sp, #20
 8013666:	9a04      	ldr	r2, [sp, #16]
 8013668:	68a1      	ldr	r1, [r4, #8]
 801366a:	9301      	str	r3, [sp, #4]
 801366c:	4620      	mov	r0, r4
 801366e:	f000 fbe7 	bl	8013e40 <_vfiprintf_r>
 8013672:	b002      	add	sp, #8
 8013674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013678:	b004      	add	sp, #16
 801367a:	4770      	bx	lr
 801367c:	20000028 	.word	0x20000028

08013680 <rand>:
 8013680:	4b17      	ldr	r3, [pc, #92]	; (80136e0 <rand+0x60>)
 8013682:	b510      	push	{r4, lr}
 8013684:	681c      	ldr	r4, [r3, #0]
 8013686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013688:	b9b3      	cbnz	r3, 80136b8 <rand+0x38>
 801368a:	2018      	movs	r0, #24
 801368c:	f000 f9a0 	bl	80139d0 <malloc>
 8013690:	63a0      	str	r0, [r4, #56]	; 0x38
 8013692:	b928      	cbnz	r0, 80136a0 <rand+0x20>
 8013694:	4602      	mov	r2, r0
 8013696:	4b13      	ldr	r3, [pc, #76]	; (80136e4 <rand+0x64>)
 8013698:	4813      	ldr	r0, [pc, #76]	; (80136e8 <rand+0x68>)
 801369a:	214e      	movs	r1, #78	; 0x4e
 801369c:	f000 f870 	bl	8013780 <__assert_func>
 80136a0:	4a12      	ldr	r2, [pc, #72]	; (80136ec <rand+0x6c>)
 80136a2:	4b13      	ldr	r3, [pc, #76]	; (80136f0 <rand+0x70>)
 80136a4:	e9c0 2300 	strd	r2, r3, [r0]
 80136a8:	4b12      	ldr	r3, [pc, #72]	; (80136f4 <rand+0x74>)
 80136aa:	6083      	str	r3, [r0, #8]
 80136ac:	230b      	movs	r3, #11
 80136ae:	8183      	strh	r3, [r0, #12]
 80136b0:	2201      	movs	r2, #1
 80136b2:	2300      	movs	r3, #0
 80136b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80136b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80136ba:	480f      	ldr	r0, [pc, #60]	; (80136f8 <rand+0x78>)
 80136bc:	690a      	ldr	r2, [r1, #16]
 80136be:	694b      	ldr	r3, [r1, #20]
 80136c0:	4c0e      	ldr	r4, [pc, #56]	; (80136fc <rand+0x7c>)
 80136c2:	4350      	muls	r0, r2
 80136c4:	fb04 0003 	mla	r0, r4, r3, r0
 80136c8:	fba2 3404 	umull	r3, r4, r2, r4
 80136cc:	1c5a      	adds	r2, r3, #1
 80136ce:	4404      	add	r4, r0
 80136d0:	f144 0000 	adc.w	r0, r4, #0
 80136d4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80136d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80136dc:	bd10      	pop	{r4, pc}
 80136de:	bf00      	nop
 80136e0:	20000028 	.word	0x20000028
 80136e4:	08041e68 	.word	0x08041e68
 80136e8:	08041e7f 	.word	0x08041e7f
 80136ec:	abcd330e 	.word	0xabcd330e
 80136f0:	e66d1234 	.word	0xe66d1234
 80136f4:	0005deec 	.word	0x0005deec
 80136f8:	5851f42d 	.word	0x5851f42d
 80136fc:	4c957f2d 	.word	0x4c957f2d

08013700 <siprintf>:
 8013700:	b40e      	push	{r1, r2, r3}
 8013702:	b500      	push	{lr}
 8013704:	b09c      	sub	sp, #112	; 0x70
 8013706:	ab1d      	add	r3, sp, #116	; 0x74
 8013708:	9002      	str	r0, [sp, #8]
 801370a:	9006      	str	r0, [sp, #24]
 801370c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013710:	4809      	ldr	r0, [pc, #36]	; (8013738 <siprintf+0x38>)
 8013712:	9107      	str	r1, [sp, #28]
 8013714:	9104      	str	r1, [sp, #16]
 8013716:	4909      	ldr	r1, [pc, #36]	; (801373c <siprintf+0x3c>)
 8013718:	f853 2b04 	ldr.w	r2, [r3], #4
 801371c:	9105      	str	r1, [sp, #20]
 801371e:	6800      	ldr	r0, [r0, #0]
 8013720:	9301      	str	r3, [sp, #4]
 8013722:	a902      	add	r1, sp, #8
 8013724:	f000 fa62 	bl	8013bec <_svfiprintf_r>
 8013728:	9b02      	ldr	r3, [sp, #8]
 801372a:	2200      	movs	r2, #0
 801372c:	701a      	strb	r2, [r3, #0]
 801372e:	b01c      	add	sp, #112	; 0x70
 8013730:	f85d eb04 	ldr.w	lr, [sp], #4
 8013734:	b003      	add	sp, #12
 8013736:	4770      	bx	lr
 8013738:	20000028 	.word	0x20000028
 801373c:	ffff0208 	.word	0xffff0208

08013740 <strchr>:
 8013740:	b2c9      	uxtb	r1, r1
 8013742:	4603      	mov	r3, r0
 8013744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013748:	b11a      	cbz	r2, 8013752 <strchr+0x12>
 801374a:	428a      	cmp	r2, r1
 801374c:	d1f9      	bne.n	8013742 <strchr+0x2>
 801374e:	4618      	mov	r0, r3
 8013750:	4770      	bx	lr
 8013752:	2900      	cmp	r1, #0
 8013754:	bf18      	it	ne
 8013756:	2300      	movne	r3, #0
 8013758:	e7f9      	b.n	801374e <strchr+0xe>

0801375a <strncmp>:
 801375a:	b510      	push	{r4, lr}
 801375c:	b16a      	cbz	r2, 801377a <strncmp+0x20>
 801375e:	3901      	subs	r1, #1
 8013760:	1884      	adds	r4, r0, r2
 8013762:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013766:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801376a:	4293      	cmp	r3, r2
 801376c:	d103      	bne.n	8013776 <strncmp+0x1c>
 801376e:	42a0      	cmp	r0, r4
 8013770:	d001      	beq.n	8013776 <strncmp+0x1c>
 8013772:	2b00      	cmp	r3, #0
 8013774:	d1f5      	bne.n	8013762 <strncmp+0x8>
 8013776:	1a98      	subs	r0, r3, r2
 8013778:	bd10      	pop	{r4, pc}
 801377a:	4610      	mov	r0, r2
 801377c:	e7fc      	b.n	8013778 <strncmp+0x1e>
	...

08013780 <__assert_func>:
 8013780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013782:	4614      	mov	r4, r2
 8013784:	461a      	mov	r2, r3
 8013786:	4b09      	ldr	r3, [pc, #36]	; (80137ac <__assert_func+0x2c>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	4605      	mov	r5, r0
 801378c:	68d8      	ldr	r0, [r3, #12]
 801378e:	b14c      	cbz	r4, 80137a4 <__assert_func+0x24>
 8013790:	4b07      	ldr	r3, [pc, #28]	; (80137b0 <__assert_func+0x30>)
 8013792:	9100      	str	r1, [sp, #0]
 8013794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013798:	4906      	ldr	r1, [pc, #24]	; (80137b4 <__assert_func+0x34>)
 801379a:	462b      	mov	r3, r5
 801379c:	f000 f8e4 	bl	8013968 <fiprintf>
 80137a0:	f000 ff38 	bl	8014614 <abort>
 80137a4:	4b04      	ldr	r3, [pc, #16]	; (80137b8 <__assert_func+0x38>)
 80137a6:	461c      	mov	r4, r3
 80137a8:	e7f3      	b.n	8013792 <__assert_func+0x12>
 80137aa:	bf00      	nop
 80137ac:	20000028 	.word	0x20000028
 80137b0:	08041ede 	.word	0x08041ede
 80137b4:	08041eeb 	.word	0x08041eeb
 80137b8:	08041f19 	.word	0x08041f19

080137bc <std>:
 80137bc:	2300      	movs	r3, #0
 80137be:	b510      	push	{r4, lr}
 80137c0:	4604      	mov	r4, r0
 80137c2:	e9c0 3300 	strd	r3, r3, [r0]
 80137c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137ca:	6083      	str	r3, [r0, #8]
 80137cc:	8181      	strh	r1, [r0, #12]
 80137ce:	6643      	str	r3, [r0, #100]	; 0x64
 80137d0:	81c2      	strh	r2, [r0, #14]
 80137d2:	6183      	str	r3, [r0, #24]
 80137d4:	4619      	mov	r1, r3
 80137d6:	2208      	movs	r2, #8
 80137d8:	305c      	adds	r0, #92	; 0x5c
 80137da:	f7ff ff31 	bl	8013640 <memset>
 80137de:	4b05      	ldr	r3, [pc, #20]	; (80137f4 <std+0x38>)
 80137e0:	6263      	str	r3, [r4, #36]	; 0x24
 80137e2:	4b05      	ldr	r3, [pc, #20]	; (80137f8 <std+0x3c>)
 80137e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80137e6:	4b05      	ldr	r3, [pc, #20]	; (80137fc <std+0x40>)
 80137e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80137ea:	4b05      	ldr	r3, [pc, #20]	; (8013800 <std+0x44>)
 80137ec:	6224      	str	r4, [r4, #32]
 80137ee:	6323      	str	r3, [r4, #48]	; 0x30
 80137f0:	bd10      	pop	{r4, pc}
 80137f2:	bf00      	nop
 80137f4:	080143e9 	.word	0x080143e9
 80137f8:	0801440b 	.word	0x0801440b
 80137fc:	08014443 	.word	0x08014443
 8013800:	08014467 	.word	0x08014467

08013804 <_cleanup_r>:
 8013804:	4901      	ldr	r1, [pc, #4]	; (801380c <_cleanup_r+0x8>)
 8013806:	f000 b8c1 	b.w	801398c <_fwalk_reent>
 801380a:	bf00      	nop
 801380c:	08014751 	.word	0x08014751

08013810 <__sfmoreglue>:
 8013810:	b570      	push	{r4, r5, r6, lr}
 8013812:	1e4a      	subs	r2, r1, #1
 8013814:	2568      	movs	r5, #104	; 0x68
 8013816:	4355      	muls	r5, r2
 8013818:	460e      	mov	r6, r1
 801381a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801381e:	f000 f92f 	bl	8013a80 <_malloc_r>
 8013822:	4604      	mov	r4, r0
 8013824:	b140      	cbz	r0, 8013838 <__sfmoreglue+0x28>
 8013826:	2100      	movs	r1, #0
 8013828:	e9c0 1600 	strd	r1, r6, [r0]
 801382c:	300c      	adds	r0, #12
 801382e:	60a0      	str	r0, [r4, #8]
 8013830:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013834:	f7ff ff04 	bl	8013640 <memset>
 8013838:	4620      	mov	r0, r4
 801383a:	bd70      	pop	{r4, r5, r6, pc}

0801383c <__sfp_lock_acquire>:
 801383c:	4801      	ldr	r0, [pc, #4]	; (8013844 <__sfp_lock_acquire+0x8>)
 801383e:	f000 b8c5 	b.w	80139cc <__retarget_lock_acquire_recursive>
 8013842:	bf00      	nop
 8013844:	20007b78 	.word	0x20007b78

08013848 <__sfp_lock_release>:
 8013848:	4801      	ldr	r0, [pc, #4]	; (8013850 <__sfp_lock_release+0x8>)
 801384a:	f000 b8c0 	b.w	80139ce <__retarget_lock_release_recursive>
 801384e:	bf00      	nop
 8013850:	20007b78 	.word	0x20007b78

08013854 <__sinit_lock_acquire>:
 8013854:	4801      	ldr	r0, [pc, #4]	; (801385c <__sinit_lock_acquire+0x8>)
 8013856:	f000 b8b9 	b.w	80139cc <__retarget_lock_acquire_recursive>
 801385a:	bf00      	nop
 801385c:	20007b73 	.word	0x20007b73

08013860 <__sinit_lock_release>:
 8013860:	4801      	ldr	r0, [pc, #4]	; (8013868 <__sinit_lock_release+0x8>)
 8013862:	f000 b8b4 	b.w	80139ce <__retarget_lock_release_recursive>
 8013866:	bf00      	nop
 8013868:	20007b73 	.word	0x20007b73

0801386c <__sinit>:
 801386c:	b510      	push	{r4, lr}
 801386e:	4604      	mov	r4, r0
 8013870:	f7ff fff0 	bl	8013854 <__sinit_lock_acquire>
 8013874:	69a3      	ldr	r3, [r4, #24]
 8013876:	b11b      	cbz	r3, 8013880 <__sinit+0x14>
 8013878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801387c:	f7ff bff0 	b.w	8013860 <__sinit_lock_release>
 8013880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013884:	6523      	str	r3, [r4, #80]	; 0x50
 8013886:	4b13      	ldr	r3, [pc, #76]	; (80138d4 <__sinit+0x68>)
 8013888:	4a13      	ldr	r2, [pc, #76]	; (80138d8 <__sinit+0x6c>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	62a2      	str	r2, [r4, #40]	; 0x28
 801388e:	42a3      	cmp	r3, r4
 8013890:	bf04      	itt	eq
 8013892:	2301      	moveq	r3, #1
 8013894:	61a3      	streq	r3, [r4, #24]
 8013896:	4620      	mov	r0, r4
 8013898:	f000 f820 	bl	80138dc <__sfp>
 801389c:	6060      	str	r0, [r4, #4]
 801389e:	4620      	mov	r0, r4
 80138a0:	f000 f81c 	bl	80138dc <__sfp>
 80138a4:	60a0      	str	r0, [r4, #8]
 80138a6:	4620      	mov	r0, r4
 80138a8:	f000 f818 	bl	80138dc <__sfp>
 80138ac:	2200      	movs	r2, #0
 80138ae:	60e0      	str	r0, [r4, #12]
 80138b0:	2104      	movs	r1, #4
 80138b2:	6860      	ldr	r0, [r4, #4]
 80138b4:	f7ff ff82 	bl	80137bc <std>
 80138b8:	68a0      	ldr	r0, [r4, #8]
 80138ba:	2201      	movs	r2, #1
 80138bc:	2109      	movs	r1, #9
 80138be:	f7ff ff7d 	bl	80137bc <std>
 80138c2:	68e0      	ldr	r0, [r4, #12]
 80138c4:	2202      	movs	r2, #2
 80138c6:	2112      	movs	r1, #18
 80138c8:	f7ff ff78 	bl	80137bc <std>
 80138cc:	2301      	movs	r3, #1
 80138ce:	61a3      	str	r3, [r4, #24]
 80138d0:	e7d2      	b.n	8013878 <__sinit+0xc>
 80138d2:	bf00      	nop
 80138d4:	08041e64 	.word	0x08041e64
 80138d8:	08013805 	.word	0x08013805

080138dc <__sfp>:
 80138dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138de:	4607      	mov	r7, r0
 80138e0:	f7ff ffac 	bl	801383c <__sfp_lock_acquire>
 80138e4:	4b1e      	ldr	r3, [pc, #120]	; (8013960 <__sfp+0x84>)
 80138e6:	681e      	ldr	r6, [r3, #0]
 80138e8:	69b3      	ldr	r3, [r6, #24]
 80138ea:	b913      	cbnz	r3, 80138f2 <__sfp+0x16>
 80138ec:	4630      	mov	r0, r6
 80138ee:	f7ff ffbd 	bl	801386c <__sinit>
 80138f2:	3648      	adds	r6, #72	; 0x48
 80138f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80138f8:	3b01      	subs	r3, #1
 80138fa:	d503      	bpl.n	8013904 <__sfp+0x28>
 80138fc:	6833      	ldr	r3, [r6, #0]
 80138fe:	b30b      	cbz	r3, 8013944 <__sfp+0x68>
 8013900:	6836      	ldr	r6, [r6, #0]
 8013902:	e7f7      	b.n	80138f4 <__sfp+0x18>
 8013904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013908:	b9d5      	cbnz	r5, 8013940 <__sfp+0x64>
 801390a:	4b16      	ldr	r3, [pc, #88]	; (8013964 <__sfp+0x88>)
 801390c:	60e3      	str	r3, [r4, #12]
 801390e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013912:	6665      	str	r5, [r4, #100]	; 0x64
 8013914:	f000 f859 	bl	80139ca <__retarget_lock_init_recursive>
 8013918:	f7ff ff96 	bl	8013848 <__sfp_lock_release>
 801391c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013924:	6025      	str	r5, [r4, #0]
 8013926:	61a5      	str	r5, [r4, #24]
 8013928:	2208      	movs	r2, #8
 801392a:	4629      	mov	r1, r5
 801392c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013930:	f7ff fe86 	bl	8013640 <memset>
 8013934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801393c:	4620      	mov	r0, r4
 801393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013940:	3468      	adds	r4, #104	; 0x68
 8013942:	e7d9      	b.n	80138f8 <__sfp+0x1c>
 8013944:	2104      	movs	r1, #4
 8013946:	4638      	mov	r0, r7
 8013948:	f7ff ff62 	bl	8013810 <__sfmoreglue>
 801394c:	4604      	mov	r4, r0
 801394e:	6030      	str	r0, [r6, #0]
 8013950:	2800      	cmp	r0, #0
 8013952:	d1d5      	bne.n	8013900 <__sfp+0x24>
 8013954:	f7ff ff78 	bl	8013848 <__sfp_lock_release>
 8013958:	230c      	movs	r3, #12
 801395a:	603b      	str	r3, [r7, #0]
 801395c:	e7ee      	b.n	801393c <__sfp+0x60>
 801395e:	bf00      	nop
 8013960:	08041e64 	.word	0x08041e64
 8013964:	ffff0001 	.word	0xffff0001

08013968 <fiprintf>:
 8013968:	b40e      	push	{r1, r2, r3}
 801396a:	b503      	push	{r0, r1, lr}
 801396c:	4601      	mov	r1, r0
 801396e:	ab03      	add	r3, sp, #12
 8013970:	4805      	ldr	r0, [pc, #20]	; (8013988 <fiprintf+0x20>)
 8013972:	f853 2b04 	ldr.w	r2, [r3], #4
 8013976:	6800      	ldr	r0, [r0, #0]
 8013978:	9301      	str	r3, [sp, #4]
 801397a:	f000 fa61 	bl	8013e40 <_vfiprintf_r>
 801397e:	b002      	add	sp, #8
 8013980:	f85d eb04 	ldr.w	lr, [sp], #4
 8013984:	b003      	add	sp, #12
 8013986:	4770      	bx	lr
 8013988:	20000028 	.word	0x20000028

0801398c <_fwalk_reent>:
 801398c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013990:	4606      	mov	r6, r0
 8013992:	4688      	mov	r8, r1
 8013994:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013998:	2700      	movs	r7, #0
 801399a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801399e:	f1b9 0901 	subs.w	r9, r9, #1
 80139a2:	d505      	bpl.n	80139b0 <_fwalk_reent+0x24>
 80139a4:	6824      	ldr	r4, [r4, #0]
 80139a6:	2c00      	cmp	r4, #0
 80139a8:	d1f7      	bne.n	801399a <_fwalk_reent+0xe>
 80139aa:	4638      	mov	r0, r7
 80139ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b0:	89ab      	ldrh	r3, [r5, #12]
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	d907      	bls.n	80139c6 <_fwalk_reent+0x3a>
 80139b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80139ba:	3301      	adds	r3, #1
 80139bc:	d003      	beq.n	80139c6 <_fwalk_reent+0x3a>
 80139be:	4629      	mov	r1, r5
 80139c0:	4630      	mov	r0, r6
 80139c2:	47c0      	blx	r8
 80139c4:	4307      	orrs	r7, r0
 80139c6:	3568      	adds	r5, #104	; 0x68
 80139c8:	e7e9      	b.n	801399e <_fwalk_reent+0x12>

080139ca <__retarget_lock_init_recursive>:
 80139ca:	4770      	bx	lr

080139cc <__retarget_lock_acquire_recursive>:
 80139cc:	4770      	bx	lr

080139ce <__retarget_lock_release_recursive>:
 80139ce:	4770      	bx	lr

080139d0 <malloc>:
 80139d0:	4b02      	ldr	r3, [pc, #8]	; (80139dc <malloc+0xc>)
 80139d2:	4601      	mov	r1, r0
 80139d4:	6818      	ldr	r0, [r3, #0]
 80139d6:	f000 b853 	b.w	8013a80 <_malloc_r>
 80139da:	bf00      	nop
 80139dc:	20000028 	.word	0x20000028

080139e0 <_free_r>:
 80139e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139e2:	2900      	cmp	r1, #0
 80139e4:	d048      	beq.n	8013a78 <_free_r+0x98>
 80139e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139ea:	9001      	str	r0, [sp, #4]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	f1a1 0404 	sub.w	r4, r1, #4
 80139f2:	bfb8      	it	lt
 80139f4:	18e4      	addlt	r4, r4, r3
 80139f6:	f000 ff5d 	bl	80148b4 <__malloc_lock>
 80139fa:	4a20      	ldr	r2, [pc, #128]	; (8013a7c <_free_r+0x9c>)
 80139fc:	9801      	ldr	r0, [sp, #4]
 80139fe:	6813      	ldr	r3, [r2, #0]
 8013a00:	4615      	mov	r5, r2
 8013a02:	b933      	cbnz	r3, 8013a12 <_free_r+0x32>
 8013a04:	6063      	str	r3, [r4, #4]
 8013a06:	6014      	str	r4, [r2, #0]
 8013a08:	b003      	add	sp, #12
 8013a0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a0e:	f000 bf57 	b.w	80148c0 <__malloc_unlock>
 8013a12:	42a3      	cmp	r3, r4
 8013a14:	d90b      	bls.n	8013a2e <_free_r+0x4e>
 8013a16:	6821      	ldr	r1, [r4, #0]
 8013a18:	1862      	adds	r2, r4, r1
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	bf04      	itt	eq
 8013a1e:	681a      	ldreq	r2, [r3, #0]
 8013a20:	685b      	ldreq	r3, [r3, #4]
 8013a22:	6063      	str	r3, [r4, #4]
 8013a24:	bf04      	itt	eq
 8013a26:	1852      	addeq	r2, r2, r1
 8013a28:	6022      	streq	r2, [r4, #0]
 8013a2a:	602c      	str	r4, [r5, #0]
 8013a2c:	e7ec      	b.n	8013a08 <_free_r+0x28>
 8013a2e:	461a      	mov	r2, r3
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	b10b      	cbz	r3, 8013a38 <_free_r+0x58>
 8013a34:	42a3      	cmp	r3, r4
 8013a36:	d9fa      	bls.n	8013a2e <_free_r+0x4e>
 8013a38:	6811      	ldr	r1, [r2, #0]
 8013a3a:	1855      	adds	r5, r2, r1
 8013a3c:	42a5      	cmp	r5, r4
 8013a3e:	d10b      	bne.n	8013a58 <_free_r+0x78>
 8013a40:	6824      	ldr	r4, [r4, #0]
 8013a42:	4421      	add	r1, r4
 8013a44:	1854      	adds	r4, r2, r1
 8013a46:	42a3      	cmp	r3, r4
 8013a48:	6011      	str	r1, [r2, #0]
 8013a4a:	d1dd      	bne.n	8013a08 <_free_r+0x28>
 8013a4c:	681c      	ldr	r4, [r3, #0]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	6053      	str	r3, [r2, #4]
 8013a52:	4421      	add	r1, r4
 8013a54:	6011      	str	r1, [r2, #0]
 8013a56:	e7d7      	b.n	8013a08 <_free_r+0x28>
 8013a58:	d902      	bls.n	8013a60 <_free_r+0x80>
 8013a5a:	230c      	movs	r3, #12
 8013a5c:	6003      	str	r3, [r0, #0]
 8013a5e:	e7d3      	b.n	8013a08 <_free_r+0x28>
 8013a60:	6825      	ldr	r5, [r4, #0]
 8013a62:	1961      	adds	r1, r4, r5
 8013a64:	428b      	cmp	r3, r1
 8013a66:	bf04      	itt	eq
 8013a68:	6819      	ldreq	r1, [r3, #0]
 8013a6a:	685b      	ldreq	r3, [r3, #4]
 8013a6c:	6063      	str	r3, [r4, #4]
 8013a6e:	bf04      	itt	eq
 8013a70:	1949      	addeq	r1, r1, r5
 8013a72:	6021      	streq	r1, [r4, #0]
 8013a74:	6054      	str	r4, [r2, #4]
 8013a76:	e7c7      	b.n	8013a08 <_free_r+0x28>
 8013a78:	b003      	add	sp, #12
 8013a7a:	bd30      	pop	{r4, r5, pc}
 8013a7c:	200006f0 	.word	0x200006f0

08013a80 <_malloc_r>:
 8013a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a82:	1ccd      	adds	r5, r1, #3
 8013a84:	f025 0503 	bic.w	r5, r5, #3
 8013a88:	3508      	adds	r5, #8
 8013a8a:	2d0c      	cmp	r5, #12
 8013a8c:	bf38      	it	cc
 8013a8e:	250c      	movcc	r5, #12
 8013a90:	2d00      	cmp	r5, #0
 8013a92:	4606      	mov	r6, r0
 8013a94:	db01      	blt.n	8013a9a <_malloc_r+0x1a>
 8013a96:	42a9      	cmp	r1, r5
 8013a98:	d903      	bls.n	8013aa2 <_malloc_r+0x22>
 8013a9a:	230c      	movs	r3, #12
 8013a9c:	6033      	str	r3, [r6, #0]
 8013a9e:	2000      	movs	r0, #0
 8013aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013aa2:	f000 ff07 	bl	80148b4 <__malloc_lock>
 8013aa6:	4921      	ldr	r1, [pc, #132]	; (8013b2c <_malloc_r+0xac>)
 8013aa8:	680a      	ldr	r2, [r1, #0]
 8013aaa:	4614      	mov	r4, r2
 8013aac:	b99c      	cbnz	r4, 8013ad6 <_malloc_r+0x56>
 8013aae:	4f20      	ldr	r7, [pc, #128]	; (8013b30 <_malloc_r+0xb0>)
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	b923      	cbnz	r3, 8013abe <_malloc_r+0x3e>
 8013ab4:	4621      	mov	r1, r4
 8013ab6:	4630      	mov	r0, r6
 8013ab8:	f000 fc86 	bl	80143c8 <_sbrk_r>
 8013abc:	6038      	str	r0, [r7, #0]
 8013abe:	4629      	mov	r1, r5
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f000 fc81 	bl	80143c8 <_sbrk_r>
 8013ac6:	1c43      	adds	r3, r0, #1
 8013ac8:	d123      	bne.n	8013b12 <_malloc_r+0x92>
 8013aca:	230c      	movs	r3, #12
 8013acc:	6033      	str	r3, [r6, #0]
 8013ace:	4630      	mov	r0, r6
 8013ad0:	f000 fef6 	bl	80148c0 <__malloc_unlock>
 8013ad4:	e7e3      	b.n	8013a9e <_malloc_r+0x1e>
 8013ad6:	6823      	ldr	r3, [r4, #0]
 8013ad8:	1b5b      	subs	r3, r3, r5
 8013ada:	d417      	bmi.n	8013b0c <_malloc_r+0x8c>
 8013adc:	2b0b      	cmp	r3, #11
 8013ade:	d903      	bls.n	8013ae8 <_malloc_r+0x68>
 8013ae0:	6023      	str	r3, [r4, #0]
 8013ae2:	441c      	add	r4, r3
 8013ae4:	6025      	str	r5, [r4, #0]
 8013ae6:	e004      	b.n	8013af2 <_malloc_r+0x72>
 8013ae8:	6863      	ldr	r3, [r4, #4]
 8013aea:	42a2      	cmp	r2, r4
 8013aec:	bf0c      	ite	eq
 8013aee:	600b      	streq	r3, [r1, #0]
 8013af0:	6053      	strne	r3, [r2, #4]
 8013af2:	4630      	mov	r0, r6
 8013af4:	f000 fee4 	bl	80148c0 <__malloc_unlock>
 8013af8:	f104 000b 	add.w	r0, r4, #11
 8013afc:	1d23      	adds	r3, r4, #4
 8013afe:	f020 0007 	bic.w	r0, r0, #7
 8013b02:	1ac2      	subs	r2, r0, r3
 8013b04:	d0cc      	beq.n	8013aa0 <_malloc_r+0x20>
 8013b06:	1a1b      	subs	r3, r3, r0
 8013b08:	50a3      	str	r3, [r4, r2]
 8013b0a:	e7c9      	b.n	8013aa0 <_malloc_r+0x20>
 8013b0c:	4622      	mov	r2, r4
 8013b0e:	6864      	ldr	r4, [r4, #4]
 8013b10:	e7cc      	b.n	8013aac <_malloc_r+0x2c>
 8013b12:	1cc4      	adds	r4, r0, #3
 8013b14:	f024 0403 	bic.w	r4, r4, #3
 8013b18:	42a0      	cmp	r0, r4
 8013b1a:	d0e3      	beq.n	8013ae4 <_malloc_r+0x64>
 8013b1c:	1a21      	subs	r1, r4, r0
 8013b1e:	4630      	mov	r0, r6
 8013b20:	f000 fc52 	bl	80143c8 <_sbrk_r>
 8013b24:	3001      	adds	r0, #1
 8013b26:	d1dd      	bne.n	8013ae4 <_malloc_r+0x64>
 8013b28:	e7cf      	b.n	8013aca <_malloc_r+0x4a>
 8013b2a:	bf00      	nop
 8013b2c:	200006f0 	.word	0x200006f0
 8013b30:	200006f4 	.word	0x200006f4

08013b34 <__ssputs_r>:
 8013b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b38:	688e      	ldr	r6, [r1, #8]
 8013b3a:	429e      	cmp	r6, r3
 8013b3c:	4682      	mov	sl, r0
 8013b3e:	460c      	mov	r4, r1
 8013b40:	4690      	mov	r8, r2
 8013b42:	461f      	mov	r7, r3
 8013b44:	d838      	bhi.n	8013bb8 <__ssputs_r+0x84>
 8013b46:	898a      	ldrh	r2, [r1, #12]
 8013b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013b4c:	d032      	beq.n	8013bb4 <__ssputs_r+0x80>
 8013b4e:	6825      	ldr	r5, [r4, #0]
 8013b50:	6909      	ldr	r1, [r1, #16]
 8013b52:	eba5 0901 	sub.w	r9, r5, r1
 8013b56:	6965      	ldr	r5, [r4, #20]
 8013b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b60:	3301      	adds	r3, #1
 8013b62:	444b      	add	r3, r9
 8013b64:	106d      	asrs	r5, r5, #1
 8013b66:	429d      	cmp	r5, r3
 8013b68:	bf38      	it	cc
 8013b6a:	461d      	movcc	r5, r3
 8013b6c:	0553      	lsls	r3, r2, #21
 8013b6e:	d531      	bpl.n	8013bd4 <__ssputs_r+0xa0>
 8013b70:	4629      	mov	r1, r5
 8013b72:	f7ff ff85 	bl	8013a80 <_malloc_r>
 8013b76:	4606      	mov	r6, r0
 8013b78:	b950      	cbnz	r0, 8013b90 <__ssputs_r+0x5c>
 8013b7a:	230c      	movs	r3, #12
 8013b7c:	f8ca 3000 	str.w	r3, [sl]
 8013b80:	89a3      	ldrh	r3, [r4, #12]
 8013b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b86:	81a3      	strh	r3, [r4, #12]
 8013b88:	f04f 30ff 	mov.w	r0, #4294967295
 8013b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b90:	6921      	ldr	r1, [r4, #16]
 8013b92:	464a      	mov	r2, r9
 8013b94:	f7ff fd2c 	bl	80135f0 <memcpy>
 8013b98:	89a3      	ldrh	r3, [r4, #12]
 8013b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ba2:	81a3      	strh	r3, [r4, #12]
 8013ba4:	6126      	str	r6, [r4, #16]
 8013ba6:	6165      	str	r5, [r4, #20]
 8013ba8:	444e      	add	r6, r9
 8013baa:	eba5 0509 	sub.w	r5, r5, r9
 8013bae:	6026      	str	r6, [r4, #0]
 8013bb0:	60a5      	str	r5, [r4, #8]
 8013bb2:	463e      	mov	r6, r7
 8013bb4:	42be      	cmp	r6, r7
 8013bb6:	d900      	bls.n	8013bba <__ssputs_r+0x86>
 8013bb8:	463e      	mov	r6, r7
 8013bba:	4632      	mov	r2, r6
 8013bbc:	6820      	ldr	r0, [r4, #0]
 8013bbe:	4641      	mov	r1, r8
 8013bc0:	f7ff fd24 	bl	801360c <memmove>
 8013bc4:	68a3      	ldr	r3, [r4, #8]
 8013bc6:	6822      	ldr	r2, [r4, #0]
 8013bc8:	1b9b      	subs	r3, r3, r6
 8013bca:	4432      	add	r2, r6
 8013bcc:	60a3      	str	r3, [r4, #8]
 8013bce:	6022      	str	r2, [r4, #0]
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	e7db      	b.n	8013b8c <__ssputs_r+0x58>
 8013bd4:	462a      	mov	r2, r5
 8013bd6:	f000 fe79 	bl	80148cc <_realloc_r>
 8013bda:	4606      	mov	r6, r0
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d1e1      	bne.n	8013ba4 <__ssputs_r+0x70>
 8013be0:	6921      	ldr	r1, [r4, #16]
 8013be2:	4650      	mov	r0, sl
 8013be4:	f7ff fefc 	bl	80139e0 <_free_r>
 8013be8:	e7c7      	b.n	8013b7a <__ssputs_r+0x46>
	...

08013bec <_svfiprintf_r>:
 8013bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf0:	4698      	mov	r8, r3
 8013bf2:	898b      	ldrh	r3, [r1, #12]
 8013bf4:	061b      	lsls	r3, r3, #24
 8013bf6:	b09d      	sub	sp, #116	; 0x74
 8013bf8:	4607      	mov	r7, r0
 8013bfa:	460d      	mov	r5, r1
 8013bfc:	4614      	mov	r4, r2
 8013bfe:	d50e      	bpl.n	8013c1e <_svfiprintf_r+0x32>
 8013c00:	690b      	ldr	r3, [r1, #16]
 8013c02:	b963      	cbnz	r3, 8013c1e <_svfiprintf_r+0x32>
 8013c04:	2140      	movs	r1, #64	; 0x40
 8013c06:	f7ff ff3b 	bl	8013a80 <_malloc_r>
 8013c0a:	6028      	str	r0, [r5, #0]
 8013c0c:	6128      	str	r0, [r5, #16]
 8013c0e:	b920      	cbnz	r0, 8013c1a <_svfiprintf_r+0x2e>
 8013c10:	230c      	movs	r3, #12
 8013c12:	603b      	str	r3, [r7, #0]
 8013c14:	f04f 30ff 	mov.w	r0, #4294967295
 8013c18:	e0d1      	b.n	8013dbe <_svfiprintf_r+0x1d2>
 8013c1a:	2340      	movs	r3, #64	; 0x40
 8013c1c:	616b      	str	r3, [r5, #20]
 8013c1e:	2300      	movs	r3, #0
 8013c20:	9309      	str	r3, [sp, #36]	; 0x24
 8013c22:	2320      	movs	r3, #32
 8013c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c2c:	2330      	movs	r3, #48	; 0x30
 8013c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013dd8 <_svfiprintf_r+0x1ec>
 8013c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c36:	f04f 0901 	mov.w	r9, #1
 8013c3a:	4623      	mov	r3, r4
 8013c3c:	469a      	mov	sl, r3
 8013c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c42:	b10a      	cbz	r2, 8013c48 <_svfiprintf_r+0x5c>
 8013c44:	2a25      	cmp	r2, #37	; 0x25
 8013c46:	d1f9      	bne.n	8013c3c <_svfiprintf_r+0x50>
 8013c48:	ebba 0b04 	subs.w	fp, sl, r4
 8013c4c:	d00b      	beq.n	8013c66 <_svfiprintf_r+0x7a>
 8013c4e:	465b      	mov	r3, fp
 8013c50:	4622      	mov	r2, r4
 8013c52:	4629      	mov	r1, r5
 8013c54:	4638      	mov	r0, r7
 8013c56:	f7ff ff6d 	bl	8013b34 <__ssputs_r>
 8013c5a:	3001      	adds	r0, #1
 8013c5c:	f000 80aa 	beq.w	8013db4 <_svfiprintf_r+0x1c8>
 8013c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c62:	445a      	add	r2, fp
 8013c64:	9209      	str	r2, [sp, #36]	; 0x24
 8013c66:	f89a 3000 	ldrb.w	r3, [sl]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	f000 80a2 	beq.w	8013db4 <_svfiprintf_r+0x1c8>
 8013c70:	2300      	movs	r3, #0
 8013c72:	f04f 32ff 	mov.w	r2, #4294967295
 8013c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c7a:	f10a 0a01 	add.w	sl, sl, #1
 8013c7e:	9304      	str	r3, [sp, #16]
 8013c80:	9307      	str	r3, [sp, #28]
 8013c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c86:	931a      	str	r3, [sp, #104]	; 0x68
 8013c88:	4654      	mov	r4, sl
 8013c8a:	2205      	movs	r2, #5
 8013c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c90:	4851      	ldr	r0, [pc, #324]	; (8013dd8 <_svfiprintf_r+0x1ec>)
 8013c92:	f7ec faed 	bl	8000270 <memchr>
 8013c96:	9a04      	ldr	r2, [sp, #16]
 8013c98:	b9d8      	cbnz	r0, 8013cd2 <_svfiprintf_r+0xe6>
 8013c9a:	06d0      	lsls	r0, r2, #27
 8013c9c:	bf44      	itt	mi
 8013c9e:	2320      	movmi	r3, #32
 8013ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ca4:	0711      	lsls	r1, r2, #28
 8013ca6:	bf44      	itt	mi
 8013ca8:	232b      	movmi	r3, #43	; 0x2b
 8013caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013cae:	f89a 3000 	ldrb.w	r3, [sl]
 8013cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8013cb4:	d015      	beq.n	8013ce2 <_svfiprintf_r+0xf6>
 8013cb6:	9a07      	ldr	r2, [sp, #28]
 8013cb8:	4654      	mov	r4, sl
 8013cba:	2000      	movs	r0, #0
 8013cbc:	f04f 0c0a 	mov.w	ip, #10
 8013cc0:	4621      	mov	r1, r4
 8013cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013cc6:	3b30      	subs	r3, #48	; 0x30
 8013cc8:	2b09      	cmp	r3, #9
 8013cca:	d94e      	bls.n	8013d6a <_svfiprintf_r+0x17e>
 8013ccc:	b1b0      	cbz	r0, 8013cfc <_svfiprintf_r+0x110>
 8013cce:	9207      	str	r2, [sp, #28]
 8013cd0:	e014      	b.n	8013cfc <_svfiprintf_r+0x110>
 8013cd2:	eba0 0308 	sub.w	r3, r0, r8
 8013cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8013cda:	4313      	orrs	r3, r2
 8013cdc:	9304      	str	r3, [sp, #16]
 8013cde:	46a2      	mov	sl, r4
 8013ce0:	e7d2      	b.n	8013c88 <_svfiprintf_r+0x9c>
 8013ce2:	9b03      	ldr	r3, [sp, #12]
 8013ce4:	1d19      	adds	r1, r3, #4
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	9103      	str	r1, [sp, #12]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	bfbb      	ittet	lt
 8013cee:	425b      	neglt	r3, r3
 8013cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8013cf4:	9307      	strge	r3, [sp, #28]
 8013cf6:	9307      	strlt	r3, [sp, #28]
 8013cf8:	bfb8      	it	lt
 8013cfa:	9204      	strlt	r2, [sp, #16]
 8013cfc:	7823      	ldrb	r3, [r4, #0]
 8013cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8013d00:	d10c      	bne.n	8013d1c <_svfiprintf_r+0x130>
 8013d02:	7863      	ldrb	r3, [r4, #1]
 8013d04:	2b2a      	cmp	r3, #42	; 0x2a
 8013d06:	d135      	bne.n	8013d74 <_svfiprintf_r+0x188>
 8013d08:	9b03      	ldr	r3, [sp, #12]
 8013d0a:	1d1a      	adds	r2, r3, #4
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	9203      	str	r2, [sp, #12]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	bfb8      	it	lt
 8013d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8013d18:	3402      	adds	r4, #2
 8013d1a:	9305      	str	r3, [sp, #20]
 8013d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013de8 <_svfiprintf_r+0x1fc>
 8013d20:	7821      	ldrb	r1, [r4, #0]
 8013d22:	2203      	movs	r2, #3
 8013d24:	4650      	mov	r0, sl
 8013d26:	f7ec faa3 	bl	8000270 <memchr>
 8013d2a:	b140      	cbz	r0, 8013d3e <_svfiprintf_r+0x152>
 8013d2c:	2340      	movs	r3, #64	; 0x40
 8013d2e:	eba0 000a 	sub.w	r0, r0, sl
 8013d32:	fa03 f000 	lsl.w	r0, r3, r0
 8013d36:	9b04      	ldr	r3, [sp, #16]
 8013d38:	4303      	orrs	r3, r0
 8013d3a:	3401      	adds	r4, #1
 8013d3c:	9304      	str	r3, [sp, #16]
 8013d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d42:	4826      	ldr	r0, [pc, #152]	; (8013ddc <_svfiprintf_r+0x1f0>)
 8013d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d48:	2206      	movs	r2, #6
 8013d4a:	f7ec fa91 	bl	8000270 <memchr>
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d038      	beq.n	8013dc4 <_svfiprintf_r+0x1d8>
 8013d52:	4b23      	ldr	r3, [pc, #140]	; (8013de0 <_svfiprintf_r+0x1f4>)
 8013d54:	bb1b      	cbnz	r3, 8013d9e <_svfiprintf_r+0x1b2>
 8013d56:	9b03      	ldr	r3, [sp, #12]
 8013d58:	3307      	adds	r3, #7
 8013d5a:	f023 0307 	bic.w	r3, r3, #7
 8013d5e:	3308      	adds	r3, #8
 8013d60:	9303      	str	r3, [sp, #12]
 8013d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d64:	4433      	add	r3, r6
 8013d66:	9309      	str	r3, [sp, #36]	; 0x24
 8013d68:	e767      	b.n	8013c3a <_svfiprintf_r+0x4e>
 8013d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d6e:	460c      	mov	r4, r1
 8013d70:	2001      	movs	r0, #1
 8013d72:	e7a5      	b.n	8013cc0 <_svfiprintf_r+0xd4>
 8013d74:	2300      	movs	r3, #0
 8013d76:	3401      	adds	r4, #1
 8013d78:	9305      	str	r3, [sp, #20]
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	f04f 0c0a 	mov.w	ip, #10
 8013d80:	4620      	mov	r0, r4
 8013d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d86:	3a30      	subs	r2, #48	; 0x30
 8013d88:	2a09      	cmp	r2, #9
 8013d8a:	d903      	bls.n	8013d94 <_svfiprintf_r+0x1a8>
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d0c5      	beq.n	8013d1c <_svfiprintf_r+0x130>
 8013d90:	9105      	str	r1, [sp, #20]
 8013d92:	e7c3      	b.n	8013d1c <_svfiprintf_r+0x130>
 8013d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d98:	4604      	mov	r4, r0
 8013d9a:	2301      	movs	r3, #1
 8013d9c:	e7f0      	b.n	8013d80 <_svfiprintf_r+0x194>
 8013d9e:	ab03      	add	r3, sp, #12
 8013da0:	9300      	str	r3, [sp, #0]
 8013da2:	462a      	mov	r2, r5
 8013da4:	4b0f      	ldr	r3, [pc, #60]	; (8013de4 <_svfiprintf_r+0x1f8>)
 8013da6:	a904      	add	r1, sp, #16
 8013da8:	4638      	mov	r0, r7
 8013daa:	f3af 8000 	nop.w
 8013dae:	1c42      	adds	r2, r0, #1
 8013db0:	4606      	mov	r6, r0
 8013db2:	d1d6      	bne.n	8013d62 <_svfiprintf_r+0x176>
 8013db4:	89ab      	ldrh	r3, [r5, #12]
 8013db6:	065b      	lsls	r3, r3, #25
 8013db8:	f53f af2c 	bmi.w	8013c14 <_svfiprintf_r+0x28>
 8013dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dbe:	b01d      	add	sp, #116	; 0x74
 8013dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dc4:	ab03      	add	r3, sp, #12
 8013dc6:	9300      	str	r3, [sp, #0]
 8013dc8:	462a      	mov	r2, r5
 8013dca:	4b06      	ldr	r3, [pc, #24]	; (8013de4 <_svfiprintf_r+0x1f8>)
 8013dcc:	a904      	add	r1, sp, #16
 8013dce:	4638      	mov	r0, r7
 8013dd0:	f000 f9d4 	bl	801417c <_printf_i>
 8013dd4:	e7eb      	b.n	8013dae <_svfiprintf_r+0x1c2>
 8013dd6:	bf00      	nop
 8013dd8:	08041f7c 	.word	0x08041f7c
 8013ddc:	08041f86 	.word	0x08041f86
 8013de0:	00000000 	.word	0x00000000
 8013de4:	08013b35 	.word	0x08013b35
 8013de8:	08041f82 	.word	0x08041f82

08013dec <__sfputc_r>:
 8013dec:	6893      	ldr	r3, [r2, #8]
 8013dee:	3b01      	subs	r3, #1
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	b410      	push	{r4}
 8013df4:	6093      	str	r3, [r2, #8]
 8013df6:	da08      	bge.n	8013e0a <__sfputc_r+0x1e>
 8013df8:	6994      	ldr	r4, [r2, #24]
 8013dfa:	42a3      	cmp	r3, r4
 8013dfc:	db01      	blt.n	8013e02 <__sfputc_r+0x16>
 8013dfe:	290a      	cmp	r1, #10
 8013e00:	d103      	bne.n	8013e0a <__sfputc_r+0x1e>
 8013e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e06:	f000 bb33 	b.w	8014470 <__swbuf_r>
 8013e0a:	6813      	ldr	r3, [r2, #0]
 8013e0c:	1c58      	adds	r0, r3, #1
 8013e0e:	6010      	str	r0, [r2, #0]
 8013e10:	7019      	strb	r1, [r3, #0]
 8013e12:	4608      	mov	r0, r1
 8013e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e18:	4770      	bx	lr

08013e1a <__sfputs_r>:
 8013e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e1c:	4606      	mov	r6, r0
 8013e1e:	460f      	mov	r7, r1
 8013e20:	4614      	mov	r4, r2
 8013e22:	18d5      	adds	r5, r2, r3
 8013e24:	42ac      	cmp	r4, r5
 8013e26:	d101      	bne.n	8013e2c <__sfputs_r+0x12>
 8013e28:	2000      	movs	r0, #0
 8013e2a:	e007      	b.n	8013e3c <__sfputs_r+0x22>
 8013e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e30:	463a      	mov	r2, r7
 8013e32:	4630      	mov	r0, r6
 8013e34:	f7ff ffda 	bl	8013dec <__sfputc_r>
 8013e38:	1c43      	adds	r3, r0, #1
 8013e3a:	d1f3      	bne.n	8013e24 <__sfputs_r+0xa>
 8013e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013e40 <_vfiprintf_r>:
 8013e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e44:	460d      	mov	r5, r1
 8013e46:	b09d      	sub	sp, #116	; 0x74
 8013e48:	4614      	mov	r4, r2
 8013e4a:	4698      	mov	r8, r3
 8013e4c:	4606      	mov	r6, r0
 8013e4e:	b118      	cbz	r0, 8013e58 <_vfiprintf_r+0x18>
 8013e50:	6983      	ldr	r3, [r0, #24]
 8013e52:	b90b      	cbnz	r3, 8013e58 <_vfiprintf_r+0x18>
 8013e54:	f7ff fd0a 	bl	801386c <__sinit>
 8013e58:	4b89      	ldr	r3, [pc, #548]	; (8014080 <_vfiprintf_r+0x240>)
 8013e5a:	429d      	cmp	r5, r3
 8013e5c:	d11b      	bne.n	8013e96 <_vfiprintf_r+0x56>
 8013e5e:	6875      	ldr	r5, [r6, #4]
 8013e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e62:	07d9      	lsls	r1, r3, #31
 8013e64:	d405      	bmi.n	8013e72 <_vfiprintf_r+0x32>
 8013e66:	89ab      	ldrh	r3, [r5, #12]
 8013e68:	059a      	lsls	r2, r3, #22
 8013e6a:	d402      	bmi.n	8013e72 <_vfiprintf_r+0x32>
 8013e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e6e:	f7ff fdad 	bl	80139cc <__retarget_lock_acquire_recursive>
 8013e72:	89ab      	ldrh	r3, [r5, #12]
 8013e74:	071b      	lsls	r3, r3, #28
 8013e76:	d501      	bpl.n	8013e7c <_vfiprintf_r+0x3c>
 8013e78:	692b      	ldr	r3, [r5, #16]
 8013e7a:	b9eb      	cbnz	r3, 8013eb8 <_vfiprintf_r+0x78>
 8013e7c:	4629      	mov	r1, r5
 8013e7e:	4630      	mov	r0, r6
 8013e80:	f000 fb5a 	bl	8014538 <__swsetup_r>
 8013e84:	b1c0      	cbz	r0, 8013eb8 <_vfiprintf_r+0x78>
 8013e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e88:	07dc      	lsls	r4, r3, #31
 8013e8a:	d50e      	bpl.n	8013eaa <_vfiprintf_r+0x6a>
 8013e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e90:	b01d      	add	sp, #116	; 0x74
 8013e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e96:	4b7b      	ldr	r3, [pc, #492]	; (8014084 <_vfiprintf_r+0x244>)
 8013e98:	429d      	cmp	r5, r3
 8013e9a:	d101      	bne.n	8013ea0 <_vfiprintf_r+0x60>
 8013e9c:	68b5      	ldr	r5, [r6, #8]
 8013e9e:	e7df      	b.n	8013e60 <_vfiprintf_r+0x20>
 8013ea0:	4b79      	ldr	r3, [pc, #484]	; (8014088 <_vfiprintf_r+0x248>)
 8013ea2:	429d      	cmp	r5, r3
 8013ea4:	bf08      	it	eq
 8013ea6:	68f5      	ldreq	r5, [r6, #12]
 8013ea8:	e7da      	b.n	8013e60 <_vfiprintf_r+0x20>
 8013eaa:	89ab      	ldrh	r3, [r5, #12]
 8013eac:	0598      	lsls	r0, r3, #22
 8013eae:	d4ed      	bmi.n	8013e8c <_vfiprintf_r+0x4c>
 8013eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013eb2:	f7ff fd8c 	bl	80139ce <__retarget_lock_release_recursive>
 8013eb6:	e7e9      	b.n	8013e8c <_vfiprintf_r+0x4c>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	9309      	str	r3, [sp, #36]	; 0x24
 8013ebc:	2320      	movs	r3, #32
 8013ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ec6:	2330      	movs	r3, #48	; 0x30
 8013ec8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801408c <_vfiprintf_r+0x24c>
 8013ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ed0:	f04f 0901 	mov.w	r9, #1
 8013ed4:	4623      	mov	r3, r4
 8013ed6:	469a      	mov	sl, r3
 8013ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013edc:	b10a      	cbz	r2, 8013ee2 <_vfiprintf_r+0xa2>
 8013ede:	2a25      	cmp	r2, #37	; 0x25
 8013ee0:	d1f9      	bne.n	8013ed6 <_vfiprintf_r+0x96>
 8013ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8013ee6:	d00b      	beq.n	8013f00 <_vfiprintf_r+0xc0>
 8013ee8:	465b      	mov	r3, fp
 8013eea:	4622      	mov	r2, r4
 8013eec:	4629      	mov	r1, r5
 8013eee:	4630      	mov	r0, r6
 8013ef0:	f7ff ff93 	bl	8013e1a <__sfputs_r>
 8013ef4:	3001      	adds	r0, #1
 8013ef6:	f000 80aa 	beq.w	801404e <_vfiprintf_r+0x20e>
 8013efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013efc:	445a      	add	r2, fp
 8013efe:	9209      	str	r2, [sp, #36]	; 0x24
 8013f00:	f89a 3000 	ldrb.w	r3, [sl]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f000 80a2 	beq.w	801404e <_vfiprintf_r+0x20e>
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f14:	f10a 0a01 	add.w	sl, sl, #1
 8013f18:	9304      	str	r3, [sp, #16]
 8013f1a:	9307      	str	r3, [sp, #28]
 8013f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f20:	931a      	str	r3, [sp, #104]	; 0x68
 8013f22:	4654      	mov	r4, sl
 8013f24:	2205      	movs	r2, #5
 8013f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f2a:	4858      	ldr	r0, [pc, #352]	; (801408c <_vfiprintf_r+0x24c>)
 8013f2c:	f7ec f9a0 	bl	8000270 <memchr>
 8013f30:	9a04      	ldr	r2, [sp, #16]
 8013f32:	b9d8      	cbnz	r0, 8013f6c <_vfiprintf_r+0x12c>
 8013f34:	06d1      	lsls	r1, r2, #27
 8013f36:	bf44      	itt	mi
 8013f38:	2320      	movmi	r3, #32
 8013f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f3e:	0713      	lsls	r3, r2, #28
 8013f40:	bf44      	itt	mi
 8013f42:	232b      	movmi	r3, #43	; 0x2b
 8013f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f48:	f89a 3000 	ldrb.w	r3, [sl]
 8013f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8013f4e:	d015      	beq.n	8013f7c <_vfiprintf_r+0x13c>
 8013f50:	9a07      	ldr	r2, [sp, #28]
 8013f52:	4654      	mov	r4, sl
 8013f54:	2000      	movs	r0, #0
 8013f56:	f04f 0c0a 	mov.w	ip, #10
 8013f5a:	4621      	mov	r1, r4
 8013f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f60:	3b30      	subs	r3, #48	; 0x30
 8013f62:	2b09      	cmp	r3, #9
 8013f64:	d94e      	bls.n	8014004 <_vfiprintf_r+0x1c4>
 8013f66:	b1b0      	cbz	r0, 8013f96 <_vfiprintf_r+0x156>
 8013f68:	9207      	str	r2, [sp, #28]
 8013f6a:	e014      	b.n	8013f96 <_vfiprintf_r+0x156>
 8013f6c:	eba0 0308 	sub.w	r3, r0, r8
 8013f70:	fa09 f303 	lsl.w	r3, r9, r3
 8013f74:	4313      	orrs	r3, r2
 8013f76:	9304      	str	r3, [sp, #16]
 8013f78:	46a2      	mov	sl, r4
 8013f7a:	e7d2      	b.n	8013f22 <_vfiprintf_r+0xe2>
 8013f7c:	9b03      	ldr	r3, [sp, #12]
 8013f7e:	1d19      	adds	r1, r3, #4
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	9103      	str	r1, [sp, #12]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	bfbb      	ittet	lt
 8013f88:	425b      	neglt	r3, r3
 8013f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8013f8e:	9307      	strge	r3, [sp, #28]
 8013f90:	9307      	strlt	r3, [sp, #28]
 8013f92:	bfb8      	it	lt
 8013f94:	9204      	strlt	r2, [sp, #16]
 8013f96:	7823      	ldrb	r3, [r4, #0]
 8013f98:	2b2e      	cmp	r3, #46	; 0x2e
 8013f9a:	d10c      	bne.n	8013fb6 <_vfiprintf_r+0x176>
 8013f9c:	7863      	ldrb	r3, [r4, #1]
 8013f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8013fa0:	d135      	bne.n	801400e <_vfiprintf_r+0x1ce>
 8013fa2:	9b03      	ldr	r3, [sp, #12]
 8013fa4:	1d1a      	adds	r2, r3, #4
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	9203      	str	r2, [sp, #12]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	bfb8      	it	lt
 8013fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8013fb2:	3402      	adds	r4, #2
 8013fb4:	9305      	str	r3, [sp, #20]
 8013fb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801409c <_vfiprintf_r+0x25c>
 8013fba:	7821      	ldrb	r1, [r4, #0]
 8013fbc:	2203      	movs	r2, #3
 8013fbe:	4650      	mov	r0, sl
 8013fc0:	f7ec f956 	bl	8000270 <memchr>
 8013fc4:	b140      	cbz	r0, 8013fd8 <_vfiprintf_r+0x198>
 8013fc6:	2340      	movs	r3, #64	; 0x40
 8013fc8:	eba0 000a 	sub.w	r0, r0, sl
 8013fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8013fd0:	9b04      	ldr	r3, [sp, #16]
 8013fd2:	4303      	orrs	r3, r0
 8013fd4:	3401      	adds	r4, #1
 8013fd6:	9304      	str	r3, [sp, #16]
 8013fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fdc:	482c      	ldr	r0, [pc, #176]	; (8014090 <_vfiprintf_r+0x250>)
 8013fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fe2:	2206      	movs	r2, #6
 8013fe4:	f7ec f944 	bl	8000270 <memchr>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d03f      	beq.n	801406c <_vfiprintf_r+0x22c>
 8013fec:	4b29      	ldr	r3, [pc, #164]	; (8014094 <_vfiprintf_r+0x254>)
 8013fee:	bb1b      	cbnz	r3, 8014038 <_vfiprintf_r+0x1f8>
 8013ff0:	9b03      	ldr	r3, [sp, #12]
 8013ff2:	3307      	adds	r3, #7
 8013ff4:	f023 0307 	bic.w	r3, r3, #7
 8013ff8:	3308      	adds	r3, #8
 8013ffa:	9303      	str	r3, [sp, #12]
 8013ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ffe:	443b      	add	r3, r7
 8014000:	9309      	str	r3, [sp, #36]	; 0x24
 8014002:	e767      	b.n	8013ed4 <_vfiprintf_r+0x94>
 8014004:	fb0c 3202 	mla	r2, ip, r2, r3
 8014008:	460c      	mov	r4, r1
 801400a:	2001      	movs	r0, #1
 801400c:	e7a5      	b.n	8013f5a <_vfiprintf_r+0x11a>
 801400e:	2300      	movs	r3, #0
 8014010:	3401      	adds	r4, #1
 8014012:	9305      	str	r3, [sp, #20]
 8014014:	4619      	mov	r1, r3
 8014016:	f04f 0c0a 	mov.w	ip, #10
 801401a:	4620      	mov	r0, r4
 801401c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014020:	3a30      	subs	r2, #48	; 0x30
 8014022:	2a09      	cmp	r2, #9
 8014024:	d903      	bls.n	801402e <_vfiprintf_r+0x1ee>
 8014026:	2b00      	cmp	r3, #0
 8014028:	d0c5      	beq.n	8013fb6 <_vfiprintf_r+0x176>
 801402a:	9105      	str	r1, [sp, #20]
 801402c:	e7c3      	b.n	8013fb6 <_vfiprintf_r+0x176>
 801402e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014032:	4604      	mov	r4, r0
 8014034:	2301      	movs	r3, #1
 8014036:	e7f0      	b.n	801401a <_vfiprintf_r+0x1da>
 8014038:	ab03      	add	r3, sp, #12
 801403a:	9300      	str	r3, [sp, #0]
 801403c:	462a      	mov	r2, r5
 801403e:	4b16      	ldr	r3, [pc, #88]	; (8014098 <_vfiprintf_r+0x258>)
 8014040:	a904      	add	r1, sp, #16
 8014042:	4630      	mov	r0, r6
 8014044:	f3af 8000 	nop.w
 8014048:	4607      	mov	r7, r0
 801404a:	1c78      	adds	r0, r7, #1
 801404c:	d1d6      	bne.n	8013ffc <_vfiprintf_r+0x1bc>
 801404e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014050:	07d9      	lsls	r1, r3, #31
 8014052:	d405      	bmi.n	8014060 <_vfiprintf_r+0x220>
 8014054:	89ab      	ldrh	r3, [r5, #12]
 8014056:	059a      	lsls	r2, r3, #22
 8014058:	d402      	bmi.n	8014060 <_vfiprintf_r+0x220>
 801405a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801405c:	f7ff fcb7 	bl	80139ce <__retarget_lock_release_recursive>
 8014060:	89ab      	ldrh	r3, [r5, #12]
 8014062:	065b      	lsls	r3, r3, #25
 8014064:	f53f af12 	bmi.w	8013e8c <_vfiprintf_r+0x4c>
 8014068:	9809      	ldr	r0, [sp, #36]	; 0x24
 801406a:	e711      	b.n	8013e90 <_vfiprintf_r+0x50>
 801406c:	ab03      	add	r3, sp, #12
 801406e:	9300      	str	r3, [sp, #0]
 8014070:	462a      	mov	r2, r5
 8014072:	4b09      	ldr	r3, [pc, #36]	; (8014098 <_vfiprintf_r+0x258>)
 8014074:	a904      	add	r1, sp, #16
 8014076:	4630      	mov	r0, r6
 8014078:	f000 f880 	bl	801417c <_printf_i>
 801407c:	e7e4      	b.n	8014048 <_vfiprintf_r+0x208>
 801407e:	bf00      	nop
 8014080:	08041f3c 	.word	0x08041f3c
 8014084:	08041f5c 	.word	0x08041f5c
 8014088:	08041f1c 	.word	0x08041f1c
 801408c:	08041f7c 	.word	0x08041f7c
 8014090:	08041f86 	.word	0x08041f86
 8014094:	00000000 	.word	0x00000000
 8014098:	08013e1b 	.word	0x08013e1b
 801409c:	08041f82 	.word	0x08041f82

080140a0 <_printf_common>:
 80140a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140a4:	4616      	mov	r6, r2
 80140a6:	4699      	mov	r9, r3
 80140a8:	688a      	ldr	r2, [r1, #8]
 80140aa:	690b      	ldr	r3, [r1, #16]
 80140ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80140b0:	4293      	cmp	r3, r2
 80140b2:	bfb8      	it	lt
 80140b4:	4613      	movlt	r3, r2
 80140b6:	6033      	str	r3, [r6, #0]
 80140b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80140bc:	4607      	mov	r7, r0
 80140be:	460c      	mov	r4, r1
 80140c0:	b10a      	cbz	r2, 80140c6 <_printf_common+0x26>
 80140c2:	3301      	adds	r3, #1
 80140c4:	6033      	str	r3, [r6, #0]
 80140c6:	6823      	ldr	r3, [r4, #0]
 80140c8:	0699      	lsls	r1, r3, #26
 80140ca:	bf42      	ittt	mi
 80140cc:	6833      	ldrmi	r3, [r6, #0]
 80140ce:	3302      	addmi	r3, #2
 80140d0:	6033      	strmi	r3, [r6, #0]
 80140d2:	6825      	ldr	r5, [r4, #0]
 80140d4:	f015 0506 	ands.w	r5, r5, #6
 80140d8:	d106      	bne.n	80140e8 <_printf_common+0x48>
 80140da:	f104 0a19 	add.w	sl, r4, #25
 80140de:	68e3      	ldr	r3, [r4, #12]
 80140e0:	6832      	ldr	r2, [r6, #0]
 80140e2:	1a9b      	subs	r3, r3, r2
 80140e4:	42ab      	cmp	r3, r5
 80140e6:	dc26      	bgt.n	8014136 <_printf_common+0x96>
 80140e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80140ec:	1e13      	subs	r3, r2, #0
 80140ee:	6822      	ldr	r2, [r4, #0]
 80140f0:	bf18      	it	ne
 80140f2:	2301      	movne	r3, #1
 80140f4:	0692      	lsls	r2, r2, #26
 80140f6:	d42b      	bmi.n	8014150 <_printf_common+0xb0>
 80140f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140fc:	4649      	mov	r1, r9
 80140fe:	4638      	mov	r0, r7
 8014100:	47c0      	blx	r8
 8014102:	3001      	adds	r0, #1
 8014104:	d01e      	beq.n	8014144 <_printf_common+0xa4>
 8014106:	6823      	ldr	r3, [r4, #0]
 8014108:	68e5      	ldr	r5, [r4, #12]
 801410a:	6832      	ldr	r2, [r6, #0]
 801410c:	f003 0306 	and.w	r3, r3, #6
 8014110:	2b04      	cmp	r3, #4
 8014112:	bf08      	it	eq
 8014114:	1aad      	subeq	r5, r5, r2
 8014116:	68a3      	ldr	r3, [r4, #8]
 8014118:	6922      	ldr	r2, [r4, #16]
 801411a:	bf0c      	ite	eq
 801411c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014120:	2500      	movne	r5, #0
 8014122:	4293      	cmp	r3, r2
 8014124:	bfc4      	itt	gt
 8014126:	1a9b      	subgt	r3, r3, r2
 8014128:	18ed      	addgt	r5, r5, r3
 801412a:	2600      	movs	r6, #0
 801412c:	341a      	adds	r4, #26
 801412e:	42b5      	cmp	r5, r6
 8014130:	d11a      	bne.n	8014168 <_printf_common+0xc8>
 8014132:	2000      	movs	r0, #0
 8014134:	e008      	b.n	8014148 <_printf_common+0xa8>
 8014136:	2301      	movs	r3, #1
 8014138:	4652      	mov	r2, sl
 801413a:	4649      	mov	r1, r9
 801413c:	4638      	mov	r0, r7
 801413e:	47c0      	blx	r8
 8014140:	3001      	adds	r0, #1
 8014142:	d103      	bne.n	801414c <_printf_common+0xac>
 8014144:	f04f 30ff 	mov.w	r0, #4294967295
 8014148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801414c:	3501      	adds	r5, #1
 801414e:	e7c6      	b.n	80140de <_printf_common+0x3e>
 8014150:	18e1      	adds	r1, r4, r3
 8014152:	1c5a      	adds	r2, r3, #1
 8014154:	2030      	movs	r0, #48	; 0x30
 8014156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801415a:	4422      	add	r2, r4
 801415c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014164:	3302      	adds	r3, #2
 8014166:	e7c7      	b.n	80140f8 <_printf_common+0x58>
 8014168:	2301      	movs	r3, #1
 801416a:	4622      	mov	r2, r4
 801416c:	4649      	mov	r1, r9
 801416e:	4638      	mov	r0, r7
 8014170:	47c0      	blx	r8
 8014172:	3001      	adds	r0, #1
 8014174:	d0e6      	beq.n	8014144 <_printf_common+0xa4>
 8014176:	3601      	adds	r6, #1
 8014178:	e7d9      	b.n	801412e <_printf_common+0x8e>
	...

0801417c <_printf_i>:
 801417c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014180:	460c      	mov	r4, r1
 8014182:	4691      	mov	r9, r2
 8014184:	7e27      	ldrb	r7, [r4, #24]
 8014186:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014188:	2f78      	cmp	r7, #120	; 0x78
 801418a:	4680      	mov	r8, r0
 801418c:	469a      	mov	sl, r3
 801418e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014192:	d807      	bhi.n	80141a4 <_printf_i+0x28>
 8014194:	2f62      	cmp	r7, #98	; 0x62
 8014196:	d80a      	bhi.n	80141ae <_printf_i+0x32>
 8014198:	2f00      	cmp	r7, #0
 801419a:	f000 80d8 	beq.w	801434e <_printf_i+0x1d2>
 801419e:	2f58      	cmp	r7, #88	; 0x58
 80141a0:	f000 80a3 	beq.w	80142ea <_printf_i+0x16e>
 80141a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80141a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80141ac:	e03a      	b.n	8014224 <_printf_i+0xa8>
 80141ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80141b2:	2b15      	cmp	r3, #21
 80141b4:	d8f6      	bhi.n	80141a4 <_printf_i+0x28>
 80141b6:	a001      	add	r0, pc, #4	; (adr r0, 80141bc <_printf_i+0x40>)
 80141b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80141bc:	08014215 	.word	0x08014215
 80141c0:	08014229 	.word	0x08014229
 80141c4:	080141a5 	.word	0x080141a5
 80141c8:	080141a5 	.word	0x080141a5
 80141cc:	080141a5 	.word	0x080141a5
 80141d0:	080141a5 	.word	0x080141a5
 80141d4:	08014229 	.word	0x08014229
 80141d8:	080141a5 	.word	0x080141a5
 80141dc:	080141a5 	.word	0x080141a5
 80141e0:	080141a5 	.word	0x080141a5
 80141e4:	080141a5 	.word	0x080141a5
 80141e8:	08014335 	.word	0x08014335
 80141ec:	08014259 	.word	0x08014259
 80141f0:	08014317 	.word	0x08014317
 80141f4:	080141a5 	.word	0x080141a5
 80141f8:	080141a5 	.word	0x080141a5
 80141fc:	08014357 	.word	0x08014357
 8014200:	080141a5 	.word	0x080141a5
 8014204:	08014259 	.word	0x08014259
 8014208:	080141a5 	.word	0x080141a5
 801420c:	080141a5 	.word	0x080141a5
 8014210:	0801431f 	.word	0x0801431f
 8014214:	680b      	ldr	r3, [r1, #0]
 8014216:	1d1a      	adds	r2, r3, #4
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	600a      	str	r2, [r1, #0]
 801421c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014224:	2301      	movs	r3, #1
 8014226:	e0a3      	b.n	8014370 <_printf_i+0x1f4>
 8014228:	6825      	ldr	r5, [r4, #0]
 801422a:	6808      	ldr	r0, [r1, #0]
 801422c:	062e      	lsls	r6, r5, #24
 801422e:	f100 0304 	add.w	r3, r0, #4
 8014232:	d50a      	bpl.n	801424a <_printf_i+0xce>
 8014234:	6805      	ldr	r5, [r0, #0]
 8014236:	600b      	str	r3, [r1, #0]
 8014238:	2d00      	cmp	r5, #0
 801423a:	da03      	bge.n	8014244 <_printf_i+0xc8>
 801423c:	232d      	movs	r3, #45	; 0x2d
 801423e:	426d      	negs	r5, r5
 8014240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014244:	485e      	ldr	r0, [pc, #376]	; (80143c0 <_printf_i+0x244>)
 8014246:	230a      	movs	r3, #10
 8014248:	e019      	b.n	801427e <_printf_i+0x102>
 801424a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801424e:	6805      	ldr	r5, [r0, #0]
 8014250:	600b      	str	r3, [r1, #0]
 8014252:	bf18      	it	ne
 8014254:	b22d      	sxthne	r5, r5
 8014256:	e7ef      	b.n	8014238 <_printf_i+0xbc>
 8014258:	680b      	ldr	r3, [r1, #0]
 801425a:	6825      	ldr	r5, [r4, #0]
 801425c:	1d18      	adds	r0, r3, #4
 801425e:	6008      	str	r0, [r1, #0]
 8014260:	0628      	lsls	r0, r5, #24
 8014262:	d501      	bpl.n	8014268 <_printf_i+0xec>
 8014264:	681d      	ldr	r5, [r3, #0]
 8014266:	e002      	b.n	801426e <_printf_i+0xf2>
 8014268:	0669      	lsls	r1, r5, #25
 801426a:	d5fb      	bpl.n	8014264 <_printf_i+0xe8>
 801426c:	881d      	ldrh	r5, [r3, #0]
 801426e:	4854      	ldr	r0, [pc, #336]	; (80143c0 <_printf_i+0x244>)
 8014270:	2f6f      	cmp	r7, #111	; 0x6f
 8014272:	bf0c      	ite	eq
 8014274:	2308      	moveq	r3, #8
 8014276:	230a      	movne	r3, #10
 8014278:	2100      	movs	r1, #0
 801427a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801427e:	6866      	ldr	r6, [r4, #4]
 8014280:	60a6      	str	r6, [r4, #8]
 8014282:	2e00      	cmp	r6, #0
 8014284:	bfa2      	ittt	ge
 8014286:	6821      	ldrge	r1, [r4, #0]
 8014288:	f021 0104 	bicge.w	r1, r1, #4
 801428c:	6021      	strge	r1, [r4, #0]
 801428e:	b90d      	cbnz	r5, 8014294 <_printf_i+0x118>
 8014290:	2e00      	cmp	r6, #0
 8014292:	d04d      	beq.n	8014330 <_printf_i+0x1b4>
 8014294:	4616      	mov	r6, r2
 8014296:	fbb5 f1f3 	udiv	r1, r5, r3
 801429a:	fb03 5711 	mls	r7, r3, r1, r5
 801429e:	5dc7      	ldrb	r7, [r0, r7]
 80142a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80142a4:	462f      	mov	r7, r5
 80142a6:	42bb      	cmp	r3, r7
 80142a8:	460d      	mov	r5, r1
 80142aa:	d9f4      	bls.n	8014296 <_printf_i+0x11a>
 80142ac:	2b08      	cmp	r3, #8
 80142ae:	d10b      	bne.n	80142c8 <_printf_i+0x14c>
 80142b0:	6823      	ldr	r3, [r4, #0]
 80142b2:	07df      	lsls	r7, r3, #31
 80142b4:	d508      	bpl.n	80142c8 <_printf_i+0x14c>
 80142b6:	6923      	ldr	r3, [r4, #16]
 80142b8:	6861      	ldr	r1, [r4, #4]
 80142ba:	4299      	cmp	r1, r3
 80142bc:	bfde      	ittt	le
 80142be:	2330      	movle	r3, #48	; 0x30
 80142c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80142c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80142c8:	1b92      	subs	r2, r2, r6
 80142ca:	6122      	str	r2, [r4, #16]
 80142cc:	f8cd a000 	str.w	sl, [sp]
 80142d0:	464b      	mov	r3, r9
 80142d2:	aa03      	add	r2, sp, #12
 80142d4:	4621      	mov	r1, r4
 80142d6:	4640      	mov	r0, r8
 80142d8:	f7ff fee2 	bl	80140a0 <_printf_common>
 80142dc:	3001      	adds	r0, #1
 80142de:	d14c      	bne.n	801437a <_printf_i+0x1fe>
 80142e0:	f04f 30ff 	mov.w	r0, #4294967295
 80142e4:	b004      	add	sp, #16
 80142e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ea:	4835      	ldr	r0, [pc, #212]	; (80143c0 <_printf_i+0x244>)
 80142ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80142f0:	6823      	ldr	r3, [r4, #0]
 80142f2:	680e      	ldr	r6, [r1, #0]
 80142f4:	061f      	lsls	r7, r3, #24
 80142f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80142fa:	600e      	str	r6, [r1, #0]
 80142fc:	d514      	bpl.n	8014328 <_printf_i+0x1ac>
 80142fe:	07d9      	lsls	r1, r3, #31
 8014300:	bf44      	itt	mi
 8014302:	f043 0320 	orrmi.w	r3, r3, #32
 8014306:	6023      	strmi	r3, [r4, #0]
 8014308:	b91d      	cbnz	r5, 8014312 <_printf_i+0x196>
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	f023 0320 	bic.w	r3, r3, #32
 8014310:	6023      	str	r3, [r4, #0]
 8014312:	2310      	movs	r3, #16
 8014314:	e7b0      	b.n	8014278 <_printf_i+0xfc>
 8014316:	6823      	ldr	r3, [r4, #0]
 8014318:	f043 0320 	orr.w	r3, r3, #32
 801431c:	6023      	str	r3, [r4, #0]
 801431e:	2378      	movs	r3, #120	; 0x78
 8014320:	4828      	ldr	r0, [pc, #160]	; (80143c4 <_printf_i+0x248>)
 8014322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014326:	e7e3      	b.n	80142f0 <_printf_i+0x174>
 8014328:	065e      	lsls	r6, r3, #25
 801432a:	bf48      	it	mi
 801432c:	b2ad      	uxthmi	r5, r5
 801432e:	e7e6      	b.n	80142fe <_printf_i+0x182>
 8014330:	4616      	mov	r6, r2
 8014332:	e7bb      	b.n	80142ac <_printf_i+0x130>
 8014334:	680b      	ldr	r3, [r1, #0]
 8014336:	6826      	ldr	r6, [r4, #0]
 8014338:	6960      	ldr	r0, [r4, #20]
 801433a:	1d1d      	adds	r5, r3, #4
 801433c:	600d      	str	r5, [r1, #0]
 801433e:	0635      	lsls	r5, r6, #24
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	d501      	bpl.n	8014348 <_printf_i+0x1cc>
 8014344:	6018      	str	r0, [r3, #0]
 8014346:	e002      	b.n	801434e <_printf_i+0x1d2>
 8014348:	0671      	lsls	r1, r6, #25
 801434a:	d5fb      	bpl.n	8014344 <_printf_i+0x1c8>
 801434c:	8018      	strh	r0, [r3, #0]
 801434e:	2300      	movs	r3, #0
 8014350:	6123      	str	r3, [r4, #16]
 8014352:	4616      	mov	r6, r2
 8014354:	e7ba      	b.n	80142cc <_printf_i+0x150>
 8014356:	680b      	ldr	r3, [r1, #0]
 8014358:	1d1a      	adds	r2, r3, #4
 801435a:	600a      	str	r2, [r1, #0]
 801435c:	681e      	ldr	r6, [r3, #0]
 801435e:	6862      	ldr	r2, [r4, #4]
 8014360:	2100      	movs	r1, #0
 8014362:	4630      	mov	r0, r6
 8014364:	f7eb ff84 	bl	8000270 <memchr>
 8014368:	b108      	cbz	r0, 801436e <_printf_i+0x1f2>
 801436a:	1b80      	subs	r0, r0, r6
 801436c:	6060      	str	r0, [r4, #4]
 801436e:	6863      	ldr	r3, [r4, #4]
 8014370:	6123      	str	r3, [r4, #16]
 8014372:	2300      	movs	r3, #0
 8014374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014378:	e7a8      	b.n	80142cc <_printf_i+0x150>
 801437a:	6923      	ldr	r3, [r4, #16]
 801437c:	4632      	mov	r2, r6
 801437e:	4649      	mov	r1, r9
 8014380:	4640      	mov	r0, r8
 8014382:	47d0      	blx	sl
 8014384:	3001      	adds	r0, #1
 8014386:	d0ab      	beq.n	80142e0 <_printf_i+0x164>
 8014388:	6823      	ldr	r3, [r4, #0]
 801438a:	079b      	lsls	r3, r3, #30
 801438c:	d413      	bmi.n	80143b6 <_printf_i+0x23a>
 801438e:	68e0      	ldr	r0, [r4, #12]
 8014390:	9b03      	ldr	r3, [sp, #12]
 8014392:	4298      	cmp	r0, r3
 8014394:	bfb8      	it	lt
 8014396:	4618      	movlt	r0, r3
 8014398:	e7a4      	b.n	80142e4 <_printf_i+0x168>
 801439a:	2301      	movs	r3, #1
 801439c:	4632      	mov	r2, r6
 801439e:	4649      	mov	r1, r9
 80143a0:	4640      	mov	r0, r8
 80143a2:	47d0      	blx	sl
 80143a4:	3001      	adds	r0, #1
 80143a6:	d09b      	beq.n	80142e0 <_printf_i+0x164>
 80143a8:	3501      	adds	r5, #1
 80143aa:	68e3      	ldr	r3, [r4, #12]
 80143ac:	9903      	ldr	r1, [sp, #12]
 80143ae:	1a5b      	subs	r3, r3, r1
 80143b0:	42ab      	cmp	r3, r5
 80143b2:	dcf2      	bgt.n	801439a <_printf_i+0x21e>
 80143b4:	e7eb      	b.n	801438e <_printf_i+0x212>
 80143b6:	2500      	movs	r5, #0
 80143b8:	f104 0619 	add.w	r6, r4, #25
 80143bc:	e7f5      	b.n	80143aa <_printf_i+0x22e>
 80143be:	bf00      	nop
 80143c0:	08041f8d 	.word	0x08041f8d
 80143c4:	08041f9e 	.word	0x08041f9e

080143c8 <_sbrk_r>:
 80143c8:	b538      	push	{r3, r4, r5, lr}
 80143ca:	4d06      	ldr	r5, [pc, #24]	; (80143e4 <_sbrk_r+0x1c>)
 80143cc:	2300      	movs	r3, #0
 80143ce:	4604      	mov	r4, r0
 80143d0:	4608      	mov	r0, r1
 80143d2:	602b      	str	r3, [r5, #0]
 80143d4:	f7ec fbe6 	bl	8000ba4 <_sbrk>
 80143d8:	1c43      	adds	r3, r0, #1
 80143da:	d102      	bne.n	80143e2 <_sbrk_r+0x1a>
 80143dc:	682b      	ldr	r3, [r5, #0]
 80143de:	b103      	cbz	r3, 80143e2 <_sbrk_r+0x1a>
 80143e0:	6023      	str	r3, [r4, #0]
 80143e2:	bd38      	pop	{r3, r4, r5, pc}
 80143e4:	20007b6c 	.word	0x20007b6c

080143e8 <__sread>:
 80143e8:	b510      	push	{r4, lr}
 80143ea:	460c      	mov	r4, r1
 80143ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143f0:	f000 fa92 	bl	8014918 <_read_r>
 80143f4:	2800      	cmp	r0, #0
 80143f6:	bfab      	itete	ge
 80143f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80143fa:	89a3      	ldrhlt	r3, [r4, #12]
 80143fc:	181b      	addge	r3, r3, r0
 80143fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014402:	bfac      	ite	ge
 8014404:	6563      	strge	r3, [r4, #84]	; 0x54
 8014406:	81a3      	strhlt	r3, [r4, #12]
 8014408:	bd10      	pop	{r4, pc}

0801440a <__swrite>:
 801440a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801440e:	461f      	mov	r7, r3
 8014410:	898b      	ldrh	r3, [r1, #12]
 8014412:	05db      	lsls	r3, r3, #23
 8014414:	4605      	mov	r5, r0
 8014416:	460c      	mov	r4, r1
 8014418:	4616      	mov	r6, r2
 801441a:	d505      	bpl.n	8014428 <__swrite+0x1e>
 801441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014420:	2302      	movs	r3, #2
 8014422:	2200      	movs	r2, #0
 8014424:	f000 f9d0 	bl	80147c8 <_lseek_r>
 8014428:	89a3      	ldrh	r3, [r4, #12]
 801442a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801442e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014432:	81a3      	strh	r3, [r4, #12]
 8014434:	4632      	mov	r2, r6
 8014436:	463b      	mov	r3, r7
 8014438:	4628      	mov	r0, r5
 801443a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801443e:	f000 b869 	b.w	8014514 <_write_r>

08014442 <__sseek>:
 8014442:	b510      	push	{r4, lr}
 8014444:	460c      	mov	r4, r1
 8014446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801444a:	f000 f9bd 	bl	80147c8 <_lseek_r>
 801444e:	1c43      	adds	r3, r0, #1
 8014450:	89a3      	ldrh	r3, [r4, #12]
 8014452:	bf15      	itete	ne
 8014454:	6560      	strne	r0, [r4, #84]	; 0x54
 8014456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801445a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801445e:	81a3      	strheq	r3, [r4, #12]
 8014460:	bf18      	it	ne
 8014462:	81a3      	strhne	r3, [r4, #12]
 8014464:	bd10      	pop	{r4, pc}

08014466 <__sclose>:
 8014466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801446a:	f000 b8db 	b.w	8014624 <_close_r>
	...

08014470 <__swbuf_r>:
 8014470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014472:	460e      	mov	r6, r1
 8014474:	4614      	mov	r4, r2
 8014476:	4605      	mov	r5, r0
 8014478:	b118      	cbz	r0, 8014482 <__swbuf_r+0x12>
 801447a:	6983      	ldr	r3, [r0, #24]
 801447c:	b90b      	cbnz	r3, 8014482 <__swbuf_r+0x12>
 801447e:	f7ff f9f5 	bl	801386c <__sinit>
 8014482:	4b21      	ldr	r3, [pc, #132]	; (8014508 <__swbuf_r+0x98>)
 8014484:	429c      	cmp	r4, r3
 8014486:	d12b      	bne.n	80144e0 <__swbuf_r+0x70>
 8014488:	686c      	ldr	r4, [r5, #4]
 801448a:	69a3      	ldr	r3, [r4, #24]
 801448c:	60a3      	str	r3, [r4, #8]
 801448e:	89a3      	ldrh	r3, [r4, #12]
 8014490:	071a      	lsls	r2, r3, #28
 8014492:	d52f      	bpl.n	80144f4 <__swbuf_r+0x84>
 8014494:	6923      	ldr	r3, [r4, #16]
 8014496:	b36b      	cbz	r3, 80144f4 <__swbuf_r+0x84>
 8014498:	6923      	ldr	r3, [r4, #16]
 801449a:	6820      	ldr	r0, [r4, #0]
 801449c:	1ac0      	subs	r0, r0, r3
 801449e:	6963      	ldr	r3, [r4, #20]
 80144a0:	b2f6      	uxtb	r6, r6
 80144a2:	4283      	cmp	r3, r0
 80144a4:	4637      	mov	r7, r6
 80144a6:	dc04      	bgt.n	80144b2 <__swbuf_r+0x42>
 80144a8:	4621      	mov	r1, r4
 80144aa:	4628      	mov	r0, r5
 80144ac:	f000 f950 	bl	8014750 <_fflush_r>
 80144b0:	bb30      	cbnz	r0, 8014500 <__swbuf_r+0x90>
 80144b2:	68a3      	ldr	r3, [r4, #8]
 80144b4:	3b01      	subs	r3, #1
 80144b6:	60a3      	str	r3, [r4, #8]
 80144b8:	6823      	ldr	r3, [r4, #0]
 80144ba:	1c5a      	adds	r2, r3, #1
 80144bc:	6022      	str	r2, [r4, #0]
 80144be:	701e      	strb	r6, [r3, #0]
 80144c0:	6963      	ldr	r3, [r4, #20]
 80144c2:	3001      	adds	r0, #1
 80144c4:	4283      	cmp	r3, r0
 80144c6:	d004      	beq.n	80144d2 <__swbuf_r+0x62>
 80144c8:	89a3      	ldrh	r3, [r4, #12]
 80144ca:	07db      	lsls	r3, r3, #31
 80144cc:	d506      	bpl.n	80144dc <__swbuf_r+0x6c>
 80144ce:	2e0a      	cmp	r6, #10
 80144d0:	d104      	bne.n	80144dc <__swbuf_r+0x6c>
 80144d2:	4621      	mov	r1, r4
 80144d4:	4628      	mov	r0, r5
 80144d6:	f000 f93b 	bl	8014750 <_fflush_r>
 80144da:	b988      	cbnz	r0, 8014500 <__swbuf_r+0x90>
 80144dc:	4638      	mov	r0, r7
 80144de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144e0:	4b0a      	ldr	r3, [pc, #40]	; (801450c <__swbuf_r+0x9c>)
 80144e2:	429c      	cmp	r4, r3
 80144e4:	d101      	bne.n	80144ea <__swbuf_r+0x7a>
 80144e6:	68ac      	ldr	r4, [r5, #8]
 80144e8:	e7cf      	b.n	801448a <__swbuf_r+0x1a>
 80144ea:	4b09      	ldr	r3, [pc, #36]	; (8014510 <__swbuf_r+0xa0>)
 80144ec:	429c      	cmp	r4, r3
 80144ee:	bf08      	it	eq
 80144f0:	68ec      	ldreq	r4, [r5, #12]
 80144f2:	e7ca      	b.n	801448a <__swbuf_r+0x1a>
 80144f4:	4621      	mov	r1, r4
 80144f6:	4628      	mov	r0, r5
 80144f8:	f000 f81e 	bl	8014538 <__swsetup_r>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	d0cb      	beq.n	8014498 <__swbuf_r+0x28>
 8014500:	f04f 37ff 	mov.w	r7, #4294967295
 8014504:	e7ea      	b.n	80144dc <__swbuf_r+0x6c>
 8014506:	bf00      	nop
 8014508:	08041f3c 	.word	0x08041f3c
 801450c:	08041f5c 	.word	0x08041f5c
 8014510:	08041f1c 	.word	0x08041f1c

08014514 <_write_r>:
 8014514:	b538      	push	{r3, r4, r5, lr}
 8014516:	4d07      	ldr	r5, [pc, #28]	; (8014534 <_write_r+0x20>)
 8014518:	4604      	mov	r4, r0
 801451a:	4608      	mov	r0, r1
 801451c:	4611      	mov	r1, r2
 801451e:	2200      	movs	r2, #0
 8014520:	602a      	str	r2, [r5, #0]
 8014522:	461a      	mov	r2, r3
 8014524:	f7ec faed 	bl	8000b02 <_write>
 8014528:	1c43      	adds	r3, r0, #1
 801452a:	d102      	bne.n	8014532 <_write_r+0x1e>
 801452c:	682b      	ldr	r3, [r5, #0]
 801452e:	b103      	cbz	r3, 8014532 <_write_r+0x1e>
 8014530:	6023      	str	r3, [r4, #0]
 8014532:	bd38      	pop	{r3, r4, r5, pc}
 8014534:	20007b6c 	.word	0x20007b6c

08014538 <__swsetup_r>:
 8014538:	4b32      	ldr	r3, [pc, #200]	; (8014604 <__swsetup_r+0xcc>)
 801453a:	b570      	push	{r4, r5, r6, lr}
 801453c:	681d      	ldr	r5, [r3, #0]
 801453e:	4606      	mov	r6, r0
 8014540:	460c      	mov	r4, r1
 8014542:	b125      	cbz	r5, 801454e <__swsetup_r+0x16>
 8014544:	69ab      	ldr	r3, [r5, #24]
 8014546:	b913      	cbnz	r3, 801454e <__swsetup_r+0x16>
 8014548:	4628      	mov	r0, r5
 801454a:	f7ff f98f 	bl	801386c <__sinit>
 801454e:	4b2e      	ldr	r3, [pc, #184]	; (8014608 <__swsetup_r+0xd0>)
 8014550:	429c      	cmp	r4, r3
 8014552:	d10f      	bne.n	8014574 <__swsetup_r+0x3c>
 8014554:	686c      	ldr	r4, [r5, #4]
 8014556:	89a3      	ldrh	r3, [r4, #12]
 8014558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801455c:	0719      	lsls	r1, r3, #28
 801455e:	d42c      	bmi.n	80145ba <__swsetup_r+0x82>
 8014560:	06dd      	lsls	r5, r3, #27
 8014562:	d411      	bmi.n	8014588 <__swsetup_r+0x50>
 8014564:	2309      	movs	r3, #9
 8014566:	6033      	str	r3, [r6, #0]
 8014568:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801456c:	81a3      	strh	r3, [r4, #12]
 801456e:	f04f 30ff 	mov.w	r0, #4294967295
 8014572:	e03e      	b.n	80145f2 <__swsetup_r+0xba>
 8014574:	4b25      	ldr	r3, [pc, #148]	; (801460c <__swsetup_r+0xd4>)
 8014576:	429c      	cmp	r4, r3
 8014578:	d101      	bne.n	801457e <__swsetup_r+0x46>
 801457a:	68ac      	ldr	r4, [r5, #8]
 801457c:	e7eb      	b.n	8014556 <__swsetup_r+0x1e>
 801457e:	4b24      	ldr	r3, [pc, #144]	; (8014610 <__swsetup_r+0xd8>)
 8014580:	429c      	cmp	r4, r3
 8014582:	bf08      	it	eq
 8014584:	68ec      	ldreq	r4, [r5, #12]
 8014586:	e7e6      	b.n	8014556 <__swsetup_r+0x1e>
 8014588:	0758      	lsls	r0, r3, #29
 801458a:	d512      	bpl.n	80145b2 <__swsetup_r+0x7a>
 801458c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801458e:	b141      	cbz	r1, 80145a2 <__swsetup_r+0x6a>
 8014590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014594:	4299      	cmp	r1, r3
 8014596:	d002      	beq.n	801459e <__swsetup_r+0x66>
 8014598:	4630      	mov	r0, r6
 801459a:	f7ff fa21 	bl	80139e0 <_free_r>
 801459e:	2300      	movs	r3, #0
 80145a0:	6363      	str	r3, [r4, #52]	; 0x34
 80145a2:	89a3      	ldrh	r3, [r4, #12]
 80145a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145a8:	81a3      	strh	r3, [r4, #12]
 80145aa:	2300      	movs	r3, #0
 80145ac:	6063      	str	r3, [r4, #4]
 80145ae:	6923      	ldr	r3, [r4, #16]
 80145b0:	6023      	str	r3, [r4, #0]
 80145b2:	89a3      	ldrh	r3, [r4, #12]
 80145b4:	f043 0308 	orr.w	r3, r3, #8
 80145b8:	81a3      	strh	r3, [r4, #12]
 80145ba:	6923      	ldr	r3, [r4, #16]
 80145bc:	b94b      	cbnz	r3, 80145d2 <__swsetup_r+0x9a>
 80145be:	89a3      	ldrh	r3, [r4, #12]
 80145c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80145c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145c8:	d003      	beq.n	80145d2 <__swsetup_r+0x9a>
 80145ca:	4621      	mov	r1, r4
 80145cc:	4630      	mov	r0, r6
 80145ce:	f000 f931 	bl	8014834 <__smakebuf_r>
 80145d2:	89a0      	ldrh	r0, [r4, #12]
 80145d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145d8:	f010 0301 	ands.w	r3, r0, #1
 80145dc:	d00a      	beq.n	80145f4 <__swsetup_r+0xbc>
 80145de:	2300      	movs	r3, #0
 80145e0:	60a3      	str	r3, [r4, #8]
 80145e2:	6963      	ldr	r3, [r4, #20]
 80145e4:	425b      	negs	r3, r3
 80145e6:	61a3      	str	r3, [r4, #24]
 80145e8:	6923      	ldr	r3, [r4, #16]
 80145ea:	b943      	cbnz	r3, 80145fe <__swsetup_r+0xc6>
 80145ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80145f0:	d1ba      	bne.n	8014568 <__swsetup_r+0x30>
 80145f2:	bd70      	pop	{r4, r5, r6, pc}
 80145f4:	0781      	lsls	r1, r0, #30
 80145f6:	bf58      	it	pl
 80145f8:	6963      	ldrpl	r3, [r4, #20]
 80145fa:	60a3      	str	r3, [r4, #8]
 80145fc:	e7f4      	b.n	80145e8 <__swsetup_r+0xb0>
 80145fe:	2000      	movs	r0, #0
 8014600:	e7f7      	b.n	80145f2 <__swsetup_r+0xba>
 8014602:	bf00      	nop
 8014604:	20000028 	.word	0x20000028
 8014608:	08041f3c 	.word	0x08041f3c
 801460c:	08041f5c 	.word	0x08041f5c
 8014610:	08041f1c 	.word	0x08041f1c

08014614 <abort>:
 8014614:	b508      	push	{r3, lr}
 8014616:	2006      	movs	r0, #6
 8014618:	f000 f9b8 	bl	801498c <raise>
 801461c:	2001      	movs	r0, #1
 801461e:	f7ec fa49 	bl	8000ab4 <_exit>
	...

08014624 <_close_r>:
 8014624:	b538      	push	{r3, r4, r5, lr}
 8014626:	4d06      	ldr	r5, [pc, #24]	; (8014640 <_close_r+0x1c>)
 8014628:	2300      	movs	r3, #0
 801462a:	4604      	mov	r4, r0
 801462c:	4608      	mov	r0, r1
 801462e:	602b      	str	r3, [r5, #0]
 8014630:	f7ec fa83 	bl	8000b3a <_close>
 8014634:	1c43      	adds	r3, r0, #1
 8014636:	d102      	bne.n	801463e <_close_r+0x1a>
 8014638:	682b      	ldr	r3, [r5, #0]
 801463a:	b103      	cbz	r3, 801463e <_close_r+0x1a>
 801463c:	6023      	str	r3, [r4, #0]
 801463e:	bd38      	pop	{r3, r4, r5, pc}
 8014640:	20007b6c 	.word	0x20007b6c

08014644 <__sflush_r>:
 8014644:	898a      	ldrh	r2, [r1, #12]
 8014646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801464a:	4605      	mov	r5, r0
 801464c:	0710      	lsls	r0, r2, #28
 801464e:	460c      	mov	r4, r1
 8014650:	d458      	bmi.n	8014704 <__sflush_r+0xc0>
 8014652:	684b      	ldr	r3, [r1, #4]
 8014654:	2b00      	cmp	r3, #0
 8014656:	dc05      	bgt.n	8014664 <__sflush_r+0x20>
 8014658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801465a:	2b00      	cmp	r3, #0
 801465c:	dc02      	bgt.n	8014664 <__sflush_r+0x20>
 801465e:	2000      	movs	r0, #0
 8014660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014666:	2e00      	cmp	r6, #0
 8014668:	d0f9      	beq.n	801465e <__sflush_r+0x1a>
 801466a:	2300      	movs	r3, #0
 801466c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014670:	682f      	ldr	r7, [r5, #0]
 8014672:	602b      	str	r3, [r5, #0]
 8014674:	d032      	beq.n	80146dc <__sflush_r+0x98>
 8014676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014678:	89a3      	ldrh	r3, [r4, #12]
 801467a:	075a      	lsls	r2, r3, #29
 801467c:	d505      	bpl.n	801468a <__sflush_r+0x46>
 801467e:	6863      	ldr	r3, [r4, #4]
 8014680:	1ac0      	subs	r0, r0, r3
 8014682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014684:	b10b      	cbz	r3, 801468a <__sflush_r+0x46>
 8014686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014688:	1ac0      	subs	r0, r0, r3
 801468a:	2300      	movs	r3, #0
 801468c:	4602      	mov	r2, r0
 801468e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014690:	6a21      	ldr	r1, [r4, #32]
 8014692:	4628      	mov	r0, r5
 8014694:	47b0      	blx	r6
 8014696:	1c43      	adds	r3, r0, #1
 8014698:	89a3      	ldrh	r3, [r4, #12]
 801469a:	d106      	bne.n	80146aa <__sflush_r+0x66>
 801469c:	6829      	ldr	r1, [r5, #0]
 801469e:	291d      	cmp	r1, #29
 80146a0:	d82c      	bhi.n	80146fc <__sflush_r+0xb8>
 80146a2:	4a2a      	ldr	r2, [pc, #168]	; (801474c <__sflush_r+0x108>)
 80146a4:	40ca      	lsrs	r2, r1
 80146a6:	07d6      	lsls	r6, r2, #31
 80146a8:	d528      	bpl.n	80146fc <__sflush_r+0xb8>
 80146aa:	2200      	movs	r2, #0
 80146ac:	6062      	str	r2, [r4, #4]
 80146ae:	04d9      	lsls	r1, r3, #19
 80146b0:	6922      	ldr	r2, [r4, #16]
 80146b2:	6022      	str	r2, [r4, #0]
 80146b4:	d504      	bpl.n	80146c0 <__sflush_r+0x7c>
 80146b6:	1c42      	adds	r2, r0, #1
 80146b8:	d101      	bne.n	80146be <__sflush_r+0x7a>
 80146ba:	682b      	ldr	r3, [r5, #0]
 80146bc:	b903      	cbnz	r3, 80146c0 <__sflush_r+0x7c>
 80146be:	6560      	str	r0, [r4, #84]	; 0x54
 80146c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146c2:	602f      	str	r7, [r5, #0]
 80146c4:	2900      	cmp	r1, #0
 80146c6:	d0ca      	beq.n	801465e <__sflush_r+0x1a>
 80146c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146cc:	4299      	cmp	r1, r3
 80146ce:	d002      	beq.n	80146d6 <__sflush_r+0x92>
 80146d0:	4628      	mov	r0, r5
 80146d2:	f7ff f985 	bl	80139e0 <_free_r>
 80146d6:	2000      	movs	r0, #0
 80146d8:	6360      	str	r0, [r4, #52]	; 0x34
 80146da:	e7c1      	b.n	8014660 <__sflush_r+0x1c>
 80146dc:	6a21      	ldr	r1, [r4, #32]
 80146de:	2301      	movs	r3, #1
 80146e0:	4628      	mov	r0, r5
 80146e2:	47b0      	blx	r6
 80146e4:	1c41      	adds	r1, r0, #1
 80146e6:	d1c7      	bne.n	8014678 <__sflush_r+0x34>
 80146e8:	682b      	ldr	r3, [r5, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d0c4      	beq.n	8014678 <__sflush_r+0x34>
 80146ee:	2b1d      	cmp	r3, #29
 80146f0:	d001      	beq.n	80146f6 <__sflush_r+0xb2>
 80146f2:	2b16      	cmp	r3, #22
 80146f4:	d101      	bne.n	80146fa <__sflush_r+0xb6>
 80146f6:	602f      	str	r7, [r5, #0]
 80146f8:	e7b1      	b.n	801465e <__sflush_r+0x1a>
 80146fa:	89a3      	ldrh	r3, [r4, #12]
 80146fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014700:	81a3      	strh	r3, [r4, #12]
 8014702:	e7ad      	b.n	8014660 <__sflush_r+0x1c>
 8014704:	690f      	ldr	r7, [r1, #16]
 8014706:	2f00      	cmp	r7, #0
 8014708:	d0a9      	beq.n	801465e <__sflush_r+0x1a>
 801470a:	0793      	lsls	r3, r2, #30
 801470c:	680e      	ldr	r6, [r1, #0]
 801470e:	bf08      	it	eq
 8014710:	694b      	ldreq	r3, [r1, #20]
 8014712:	600f      	str	r7, [r1, #0]
 8014714:	bf18      	it	ne
 8014716:	2300      	movne	r3, #0
 8014718:	eba6 0807 	sub.w	r8, r6, r7
 801471c:	608b      	str	r3, [r1, #8]
 801471e:	f1b8 0f00 	cmp.w	r8, #0
 8014722:	dd9c      	ble.n	801465e <__sflush_r+0x1a>
 8014724:	6a21      	ldr	r1, [r4, #32]
 8014726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014728:	4643      	mov	r3, r8
 801472a:	463a      	mov	r2, r7
 801472c:	4628      	mov	r0, r5
 801472e:	47b0      	blx	r6
 8014730:	2800      	cmp	r0, #0
 8014732:	dc06      	bgt.n	8014742 <__sflush_r+0xfe>
 8014734:	89a3      	ldrh	r3, [r4, #12]
 8014736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801473a:	81a3      	strh	r3, [r4, #12]
 801473c:	f04f 30ff 	mov.w	r0, #4294967295
 8014740:	e78e      	b.n	8014660 <__sflush_r+0x1c>
 8014742:	4407      	add	r7, r0
 8014744:	eba8 0800 	sub.w	r8, r8, r0
 8014748:	e7e9      	b.n	801471e <__sflush_r+0xda>
 801474a:	bf00      	nop
 801474c:	20400001 	.word	0x20400001

08014750 <_fflush_r>:
 8014750:	b538      	push	{r3, r4, r5, lr}
 8014752:	690b      	ldr	r3, [r1, #16]
 8014754:	4605      	mov	r5, r0
 8014756:	460c      	mov	r4, r1
 8014758:	b913      	cbnz	r3, 8014760 <_fflush_r+0x10>
 801475a:	2500      	movs	r5, #0
 801475c:	4628      	mov	r0, r5
 801475e:	bd38      	pop	{r3, r4, r5, pc}
 8014760:	b118      	cbz	r0, 801476a <_fflush_r+0x1a>
 8014762:	6983      	ldr	r3, [r0, #24]
 8014764:	b90b      	cbnz	r3, 801476a <_fflush_r+0x1a>
 8014766:	f7ff f881 	bl	801386c <__sinit>
 801476a:	4b14      	ldr	r3, [pc, #80]	; (80147bc <_fflush_r+0x6c>)
 801476c:	429c      	cmp	r4, r3
 801476e:	d11b      	bne.n	80147a8 <_fflush_r+0x58>
 8014770:	686c      	ldr	r4, [r5, #4]
 8014772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d0ef      	beq.n	801475a <_fflush_r+0xa>
 801477a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801477c:	07d0      	lsls	r0, r2, #31
 801477e:	d404      	bmi.n	801478a <_fflush_r+0x3a>
 8014780:	0599      	lsls	r1, r3, #22
 8014782:	d402      	bmi.n	801478a <_fflush_r+0x3a>
 8014784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014786:	f7ff f921 	bl	80139cc <__retarget_lock_acquire_recursive>
 801478a:	4628      	mov	r0, r5
 801478c:	4621      	mov	r1, r4
 801478e:	f7ff ff59 	bl	8014644 <__sflush_r>
 8014792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014794:	07da      	lsls	r2, r3, #31
 8014796:	4605      	mov	r5, r0
 8014798:	d4e0      	bmi.n	801475c <_fflush_r+0xc>
 801479a:	89a3      	ldrh	r3, [r4, #12]
 801479c:	059b      	lsls	r3, r3, #22
 801479e:	d4dd      	bmi.n	801475c <_fflush_r+0xc>
 80147a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147a2:	f7ff f914 	bl	80139ce <__retarget_lock_release_recursive>
 80147a6:	e7d9      	b.n	801475c <_fflush_r+0xc>
 80147a8:	4b05      	ldr	r3, [pc, #20]	; (80147c0 <_fflush_r+0x70>)
 80147aa:	429c      	cmp	r4, r3
 80147ac:	d101      	bne.n	80147b2 <_fflush_r+0x62>
 80147ae:	68ac      	ldr	r4, [r5, #8]
 80147b0:	e7df      	b.n	8014772 <_fflush_r+0x22>
 80147b2:	4b04      	ldr	r3, [pc, #16]	; (80147c4 <_fflush_r+0x74>)
 80147b4:	429c      	cmp	r4, r3
 80147b6:	bf08      	it	eq
 80147b8:	68ec      	ldreq	r4, [r5, #12]
 80147ba:	e7da      	b.n	8014772 <_fflush_r+0x22>
 80147bc:	08041f3c 	.word	0x08041f3c
 80147c0:	08041f5c 	.word	0x08041f5c
 80147c4:	08041f1c 	.word	0x08041f1c

080147c8 <_lseek_r>:
 80147c8:	b538      	push	{r3, r4, r5, lr}
 80147ca:	4d07      	ldr	r5, [pc, #28]	; (80147e8 <_lseek_r+0x20>)
 80147cc:	4604      	mov	r4, r0
 80147ce:	4608      	mov	r0, r1
 80147d0:	4611      	mov	r1, r2
 80147d2:	2200      	movs	r2, #0
 80147d4:	602a      	str	r2, [r5, #0]
 80147d6:	461a      	mov	r2, r3
 80147d8:	f7ec f9d6 	bl	8000b88 <_lseek>
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d102      	bne.n	80147e6 <_lseek_r+0x1e>
 80147e0:	682b      	ldr	r3, [r5, #0]
 80147e2:	b103      	cbz	r3, 80147e6 <_lseek_r+0x1e>
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	20007b6c 	.word	0x20007b6c

080147ec <__swhatbuf_r>:
 80147ec:	b570      	push	{r4, r5, r6, lr}
 80147ee:	460e      	mov	r6, r1
 80147f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147f4:	2900      	cmp	r1, #0
 80147f6:	b096      	sub	sp, #88	; 0x58
 80147f8:	4614      	mov	r4, r2
 80147fa:	461d      	mov	r5, r3
 80147fc:	da07      	bge.n	801480e <__swhatbuf_r+0x22>
 80147fe:	2300      	movs	r3, #0
 8014800:	602b      	str	r3, [r5, #0]
 8014802:	89b3      	ldrh	r3, [r6, #12]
 8014804:	061a      	lsls	r2, r3, #24
 8014806:	d410      	bmi.n	801482a <__swhatbuf_r+0x3e>
 8014808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801480c:	e00e      	b.n	801482c <__swhatbuf_r+0x40>
 801480e:	466a      	mov	r2, sp
 8014810:	f000 f8d8 	bl	80149c4 <_fstat_r>
 8014814:	2800      	cmp	r0, #0
 8014816:	dbf2      	blt.n	80147fe <__swhatbuf_r+0x12>
 8014818:	9a01      	ldr	r2, [sp, #4]
 801481a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801481e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014822:	425a      	negs	r2, r3
 8014824:	415a      	adcs	r2, r3
 8014826:	602a      	str	r2, [r5, #0]
 8014828:	e7ee      	b.n	8014808 <__swhatbuf_r+0x1c>
 801482a:	2340      	movs	r3, #64	; 0x40
 801482c:	2000      	movs	r0, #0
 801482e:	6023      	str	r3, [r4, #0]
 8014830:	b016      	add	sp, #88	; 0x58
 8014832:	bd70      	pop	{r4, r5, r6, pc}

08014834 <__smakebuf_r>:
 8014834:	898b      	ldrh	r3, [r1, #12]
 8014836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014838:	079d      	lsls	r5, r3, #30
 801483a:	4606      	mov	r6, r0
 801483c:	460c      	mov	r4, r1
 801483e:	d507      	bpl.n	8014850 <__smakebuf_r+0x1c>
 8014840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014844:	6023      	str	r3, [r4, #0]
 8014846:	6123      	str	r3, [r4, #16]
 8014848:	2301      	movs	r3, #1
 801484a:	6163      	str	r3, [r4, #20]
 801484c:	b002      	add	sp, #8
 801484e:	bd70      	pop	{r4, r5, r6, pc}
 8014850:	ab01      	add	r3, sp, #4
 8014852:	466a      	mov	r2, sp
 8014854:	f7ff ffca 	bl	80147ec <__swhatbuf_r>
 8014858:	9900      	ldr	r1, [sp, #0]
 801485a:	4605      	mov	r5, r0
 801485c:	4630      	mov	r0, r6
 801485e:	f7ff f90f 	bl	8013a80 <_malloc_r>
 8014862:	b948      	cbnz	r0, 8014878 <__smakebuf_r+0x44>
 8014864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014868:	059a      	lsls	r2, r3, #22
 801486a:	d4ef      	bmi.n	801484c <__smakebuf_r+0x18>
 801486c:	f023 0303 	bic.w	r3, r3, #3
 8014870:	f043 0302 	orr.w	r3, r3, #2
 8014874:	81a3      	strh	r3, [r4, #12]
 8014876:	e7e3      	b.n	8014840 <__smakebuf_r+0xc>
 8014878:	4b0d      	ldr	r3, [pc, #52]	; (80148b0 <__smakebuf_r+0x7c>)
 801487a:	62b3      	str	r3, [r6, #40]	; 0x28
 801487c:	89a3      	ldrh	r3, [r4, #12]
 801487e:	6020      	str	r0, [r4, #0]
 8014880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014884:	81a3      	strh	r3, [r4, #12]
 8014886:	9b00      	ldr	r3, [sp, #0]
 8014888:	6163      	str	r3, [r4, #20]
 801488a:	9b01      	ldr	r3, [sp, #4]
 801488c:	6120      	str	r0, [r4, #16]
 801488e:	b15b      	cbz	r3, 80148a8 <__smakebuf_r+0x74>
 8014890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014894:	4630      	mov	r0, r6
 8014896:	f000 f8a7 	bl	80149e8 <_isatty_r>
 801489a:	b128      	cbz	r0, 80148a8 <__smakebuf_r+0x74>
 801489c:	89a3      	ldrh	r3, [r4, #12]
 801489e:	f023 0303 	bic.w	r3, r3, #3
 80148a2:	f043 0301 	orr.w	r3, r3, #1
 80148a6:	81a3      	strh	r3, [r4, #12]
 80148a8:	89a0      	ldrh	r0, [r4, #12]
 80148aa:	4305      	orrs	r5, r0
 80148ac:	81a5      	strh	r5, [r4, #12]
 80148ae:	e7cd      	b.n	801484c <__smakebuf_r+0x18>
 80148b0:	08013805 	.word	0x08013805

080148b4 <__malloc_lock>:
 80148b4:	4801      	ldr	r0, [pc, #4]	; (80148bc <__malloc_lock+0x8>)
 80148b6:	f7ff b889 	b.w	80139cc <__retarget_lock_acquire_recursive>
 80148ba:	bf00      	nop
 80148bc:	20007b74 	.word	0x20007b74

080148c0 <__malloc_unlock>:
 80148c0:	4801      	ldr	r0, [pc, #4]	; (80148c8 <__malloc_unlock+0x8>)
 80148c2:	f7ff b884 	b.w	80139ce <__retarget_lock_release_recursive>
 80148c6:	bf00      	nop
 80148c8:	20007b74 	.word	0x20007b74

080148cc <_realloc_r>:
 80148cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ce:	4607      	mov	r7, r0
 80148d0:	4614      	mov	r4, r2
 80148d2:	460e      	mov	r6, r1
 80148d4:	b921      	cbnz	r1, 80148e0 <_realloc_r+0x14>
 80148d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80148da:	4611      	mov	r1, r2
 80148dc:	f7ff b8d0 	b.w	8013a80 <_malloc_r>
 80148e0:	b922      	cbnz	r2, 80148ec <_realloc_r+0x20>
 80148e2:	f7ff f87d 	bl	80139e0 <_free_r>
 80148e6:	4625      	mov	r5, r4
 80148e8:	4628      	mov	r0, r5
 80148ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148ec:	f000 f88c 	bl	8014a08 <_malloc_usable_size_r>
 80148f0:	42a0      	cmp	r0, r4
 80148f2:	d20f      	bcs.n	8014914 <_realloc_r+0x48>
 80148f4:	4621      	mov	r1, r4
 80148f6:	4638      	mov	r0, r7
 80148f8:	f7ff f8c2 	bl	8013a80 <_malloc_r>
 80148fc:	4605      	mov	r5, r0
 80148fe:	2800      	cmp	r0, #0
 8014900:	d0f2      	beq.n	80148e8 <_realloc_r+0x1c>
 8014902:	4631      	mov	r1, r6
 8014904:	4622      	mov	r2, r4
 8014906:	f7fe fe73 	bl	80135f0 <memcpy>
 801490a:	4631      	mov	r1, r6
 801490c:	4638      	mov	r0, r7
 801490e:	f7ff f867 	bl	80139e0 <_free_r>
 8014912:	e7e9      	b.n	80148e8 <_realloc_r+0x1c>
 8014914:	4635      	mov	r5, r6
 8014916:	e7e7      	b.n	80148e8 <_realloc_r+0x1c>

08014918 <_read_r>:
 8014918:	b538      	push	{r3, r4, r5, lr}
 801491a:	4d07      	ldr	r5, [pc, #28]	; (8014938 <_read_r+0x20>)
 801491c:	4604      	mov	r4, r0
 801491e:	4608      	mov	r0, r1
 8014920:	4611      	mov	r1, r2
 8014922:	2200      	movs	r2, #0
 8014924:	602a      	str	r2, [r5, #0]
 8014926:	461a      	mov	r2, r3
 8014928:	f7ec f8ce 	bl	8000ac8 <_read>
 801492c:	1c43      	adds	r3, r0, #1
 801492e:	d102      	bne.n	8014936 <_read_r+0x1e>
 8014930:	682b      	ldr	r3, [r5, #0]
 8014932:	b103      	cbz	r3, 8014936 <_read_r+0x1e>
 8014934:	6023      	str	r3, [r4, #0]
 8014936:	bd38      	pop	{r3, r4, r5, pc}
 8014938:	20007b6c 	.word	0x20007b6c

0801493c <_raise_r>:
 801493c:	291f      	cmp	r1, #31
 801493e:	b538      	push	{r3, r4, r5, lr}
 8014940:	4604      	mov	r4, r0
 8014942:	460d      	mov	r5, r1
 8014944:	d904      	bls.n	8014950 <_raise_r+0x14>
 8014946:	2316      	movs	r3, #22
 8014948:	6003      	str	r3, [r0, #0]
 801494a:	f04f 30ff 	mov.w	r0, #4294967295
 801494e:	bd38      	pop	{r3, r4, r5, pc}
 8014950:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014952:	b112      	cbz	r2, 801495a <_raise_r+0x1e>
 8014954:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014958:	b94b      	cbnz	r3, 801496e <_raise_r+0x32>
 801495a:	4620      	mov	r0, r4
 801495c:	f000 f830 	bl	80149c0 <_getpid_r>
 8014960:	462a      	mov	r2, r5
 8014962:	4601      	mov	r1, r0
 8014964:	4620      	mov	r0, r4
 8014966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801496a:	f000 b817 	b.w	801499c <_kill_r>
 801496e:	2b01      	cmp	r3, #1
 8014970:	d00a      	beq.n	8014988 <_raise_r+0x4c>
 8014972:	1c59      	adds	r1, r3, #1
 8014974:	d103      	bne.n	801497e <_raise_r+0x42>
 8014976:	2316      	movs	r3, #22
 8014978:	6003      	str	r3, [r0, #0]
 801497a:	2001      	movs	r0, #1
 801497c:	e7e7      	b.n	801494e <_raise_r+0x12>
 801497e:	2400      	movs	r4, #0
 8014980:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014984:	4628      	mov	r0, r5
 8014986:	4798      	blx	r3
 8014988:	2000      	movs	r0, #0
 801498a:	e7e0      	b.n	801494e <_raise_r+0x12>

0801498c <raise>:
 801498c:	4b02      	ldr	r3, [pc, #8]	; (8014998 <raise+0xc>)
 801498e:	4601      	mov	r1, r0
 8014990:	6818      	ldr	r0, [r3, #0]
 8014992:	f7ff bfd3 	b.w	801493c <_raise_r>
 8014996:	bf00      	nop
 8014998:	20000028 	.word	0x20000028

0801499c <_kill_r>:
 801499c:	b538      	push	{r3, r4, r5, lr}
 801499e:	4d07      	ldr	r5, [pc, #28]	; (80149bc <_kill_r+0x20>)
 80149a0:	2300      	movs	r3, #0
 80149a2:	4604      	mov	r4, r0
 80149a4:	4608      	mov	r0, r1
 80149a6:	4611      	mov	r1, r2
 80149a8:	602b      	str	r3, [r5, #0]
 80149aa:	f7ec f871 	bl	8000a90 <_kill>
 80149ae:	1c43      	adds	r3, r0, #1
 80149b0:	d102      	bne.n	80149b8 <_kill_r+0x1c>
 80149b2:	682b      	ldr	r3, [r5, #0]
 80149b4:	b103      	cbz	r3, 80149b8 <_kill_r+0x1c>
 80149b6:	6023      	str	r3, [r4, #0]
 80149b8:	bd38      	pop	{r3, r4, r5, pc}
 80149ba:	bf00      	nop
 80149bc:	20007b6c 	.word	0x20007b6c

080149c0 <_getpid_r>:
 80149c0:	f7ec b85e 	b.w	8000a80 <_getpid>

080149c4 <_fstat_r>:
 80149c4:	b538      	push	{r3, r4, r5, lr}
 80149c6:	4d07      	ldr	r5, [pc, #28]	; (80149e4 <_fstat_r+0x20>)
 80149c8:	2300      	movs	r3, #0
 80149ca:	4604      	mov	r4, r0
 80149cc:	4608      	mov	r0, r1
 80149ce:	4611      	mov	r1, r2
 80149d0:	602b      	str	r3, [r5, #0]
 80149d2:	f7ec f8be 	bl	8000b52 <_fstat>
 80149d6:	1c43      	adds	r3, r0, #1
 80149d8:	d102      	bne.n	80149e0 <_fstat_r+0x1c>
 80149da:	682b      	ldr	r3, [r5, #0]
 80149dc:	b103      	cbz	r3, 80149e0 <_fstat_r+0x1c>
 80149de:	6023      	str	r3, [r4, #0]
 80149e0:	bd38      	pop	{r3, r4, r5, pc}
 80149e2:	bf00      	nop
 80149e4:	20007b6c 	.word	0x20007b6c

080149e8 <_isatty_r>:
 80149e8:	b538      	push	{r3, r4, r5, lr}
 80149ea:	4d06      	ldr	r5, [pc, #24]	; (8014a04 <_isatty_r+0x1c>)
 80149ec:	2300      	movs	r3, #0
 80149ee:	4604      	mov	r4, r0
 80149f0:	4608      	mov	r0, r1
 80149f2:	602b      	str	r3, [r5, #0]
 80149f4:	f7ec f8bd 	bl	8000b72 <_isatty>
 80149f8:	1c43      	adds	r3, r0, #1
 80149fa:	d102      	bne.n	8014a02 <_isatty_r+0x1a>
 80149fc:	682b      	ldr	r3, [r5, #0]
 80149fe:	b103      	cbz	r3, 8014a02 <_isatty_r+0x1a>
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	bd38      	pop	{r3, r4, r5, pc}
 8014a04:	20007b6c 	.word	0x20007b6c

08014a08 <_malloc_usable_size_r>:
 8014a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a0c:	1f18      	subs	r0, r3, #4
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	bfbc      	itt	lt
 8014a12:	580b      	ldrlt	r3, [r1, r0]
 8014a14:	18c0      	addlt	r0, r0, r3
 8014a16:	4770      	bx	lr

08014a18 <_init>:
 8014a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1a:	bf00      	nop
 8014a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a1e:	bc08      	pop	{r3}
 8014a20:	469e      	mov	lr, r3
 8014a22:	4770      	bx	lr

08014a24 <_fini>:
 8014a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a26:	bf00      	nop
 8014a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a2a:	bc08      	pop	{r3}
 8014a2c:	469e      	mov	lr, r3
 8014a2e:	4770      	bx	lr
