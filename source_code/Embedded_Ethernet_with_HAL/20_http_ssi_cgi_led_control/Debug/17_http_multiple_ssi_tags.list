
17_http_multiple_ssi_tags.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001476c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00024f38  0801496c  0801496c  0002496c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080398a4  080398a4  00050088  2**0
                  CONTENTS
  4 .ARM          00000008  080398a4  080398a4  000498a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080398ac  080398ac  00050088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080398ac  080398ac  000498ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080398b0  080398b0  000498b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080398b4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007af0  20000088  0803993c  00050088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007b78  0803993c  00057b78  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00050088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038aa1  00000000  00000000  000500b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a45  00000000  00000000  00088b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0008f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  00090c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034ce3  00000000  00000000  00092148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a24f  00000000  00000000  000c6e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011aa5d  00000000  00000000  000f107a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020bad7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d4  00000000  00000000  0020bb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000088 	.word	0x20000088
 800021c:	00000000 	.word	0x00000000
 8000220:	08014954 	.word	0x08014954

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000008c 	.word	0x2000008c
 800023c:	08014954 	.word	0x08014954

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <adc1_pa4_init>:

ADC_HandleTypeDef hadc1;


void adc1_pa4_init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
    ADC_ChannelConfTypeDef sConfig 	  = {0};
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <adc1_pa4_init+0xe0>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a2d      	ldr	r2, [pc, #180]	; (80006e8 <adc1_pa4_init+0xe0>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <adc1_pa4_init+0xe0>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <adc1_pa4_init+0xe0>)
 8000646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <adc1_pa4_init+0xe0>)
 800064a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800064e:	6453      	str	r3, [r2, #68]	; 0x44
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <adc1_pa4_init+0xe0>)
 8000652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

	/*Set PA4 as analog pin*/
	GPIO_InitStruct.Pin  = SENSOR_PIN;
 800065c:	2310      	movs	r3, #16
 800065e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000660:	2303      	movs	r3, #3
 8000662:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(SENSOR_PORT,&GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	481f      	ldr	r0, [pc, #124]	; (80006ec <adc1_pa4_init+0xe4>)
 8000670:	f002 f9e2 	bl	8002a38 <HAL_GPIO_Init>


	/*Configure ADC parameters*/

	hadc1.Instance =  ADC1;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <adc1_pa4_init+0xe8>)
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <adc1_pa4_init+0xec>)
 8000678:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler =  ADC_CLOCK_SYNC_PCLK_DIV8;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <adc1_pa4_init+0xe8>)
 800067c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000680:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution	  =  ADC_RESOLUTION_12B;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <adc1_pa4_init+0xe8>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode   =  ADC_SCAN_DISABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <adc1_pa4_init+0xe8>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode	= DISABLE;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <adc1_pa4_init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <adc1_pa4_init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <adc1_pa4_init+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006a4:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <adc1_pa4_init+0xf0>)
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006be:	2201      	movs	r2, #1
 80006c0:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006c4:	f000 fbae 	bl	8000e24 <HAL_ADC_Init>

	sConfig.Channel = ADC_CHANNEL_4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
	sConfig.Rank    = ADC_REGULAR_RANK_1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime =  ADC_SAMPLETIME_480CYCLES;
 80006d0:	2307      	movs	r3, #7
 80006d2:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1,&sConfig);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <adc1_pa4_init+0xe8>)
 80006dc:	f000 fccc 	bl	8001078 <HAL_ADC_ConfigChannel>


}
 80006e0:	bf00      	nop
 80006e2:	3730      	adds	r7, #48	; 0x30
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	200006f4 	.word	0x200006f4
 80006f4:	40012000 	.word	0x40012000
 80006f8:	0f000001 	.word	0x0f000001

080006fc <leds_init>:
#include "leds.h"



void leds_init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef   GPIO_InitStruct = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <leds_init+0x4c>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <leds_init+0x4c>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	6313      	str	r3, [r2, #48]	; 0x30
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <leds_init+0x4c>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	f003 0302 	and.w	r3, r3, #2
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStruct.Pin  = GREEN_LED | BLUE_LED | RED_LED | CUSTOM_LED;
 8000728:	f24c 0381 	movw	r3, #49281	; 0xc081
 800072c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull =  GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(LEDS_PORT,&GPIO_InitStruct);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <leds_init+0x50>)
 800073c:	f002 f97c 	bl	8002a38 <HAL_GPIO_Init>
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020400 	.word	0x40020400

08000750 <led_on>:


void led_on(uint32_t led)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	switch(led)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800075e:	d025      	beq.n	80007ac <led_on+0x5c>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000766:	d828      	bhi.n	80007ba <led_on+0x6a>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800076e:	d016      	beq.n	800079e <led_on+0x4e>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000776:	d820      	bhi.n	80007ba <led_on+0x6a>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d003      	beq.n	8000786 <led_on+0x36>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b80      	cmp	r3, #128	; 0x80
 8000782:	d006      	beq.n	8000792 <led_on+0x42>
		case CUSTOM_LED:
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
			break;

	}
}
 8000784:	e019      	b.n	80007ba <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,GREEN_LED,GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2101      	movs	r1, #1
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <led_on+0x74>)
 800078c:	f002 fb00 	bl	8002d90 <HAL_GPIO_WritePin>
			break;
 8000790:	e013      	b.n	80007ba <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,BLUE_LED,GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <led_on+0x74>)
 8000798:	f002 fafa 	bl	8002d90 <HAL_GPIO_WritePin>
			break;
 800079c:	e00d      	b.n	80007ba <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,RED_LED,GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <led_on+0x74>)
 80007a6:	f002 faf3 	bl	8002d90 <HAL_GPIO_WritePin>
			break;
 80007aa:	e006      	b.n	80007ba <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <led_on+0x74>)
 80007b4:	f002 faec 	bl	8002d90 <HAL_GPIO_WritePin>
			break;
 80007b8:	bf00      	nop
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40020400 	.word	0x40020400

080007c8 <main>:
extern struct netif gnetif;



int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_Init();
 80007cc:	f000 faa1 	bl	8000d12 <HAL_Init>
	sysclock_config();
 80007d0:	f000 f84e 	bl	8000870 <sysclock_config>
	leds_init();
 80007d4:	f7ff ff92 	bl	80006fc <leds_init>
	uart3_tx_init();
 80007d8:	f000 f9e4 	bl	8000ba4 <uart3_tx_init>
	adc1_pa4_init();
 80007dc:	f7ff ff14 	bl	8000608 <adc1_pa4_init>

	lwip_lib_init();
 80007e0:	f003 fc7a 	bl	80040d8 <lwip_lib_init>
	httpd_init();
 80007e4:	f005 fabe 	bl	8005d64 <httpd_init>
	http_set_ssi_handler(ssi_handler,(const char **)tags,NUM_OF_TAGS);
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <main+0x84>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2202      	movs	r2, #2
 80007ee:	4619      	mov	r1, r3
 80007f0:	4817      	ldr	r0, [pc, #92]	; (8000850 <main+0x88>)
 80007f2:	f005 fad7 	bl	8005da4 <http_set_ssi_handler>

	g_hclk_freq = HAL_RCC_GetHCLKFreq();
 80007f6:	f002 ff85 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a15      	ldr	r2, [pc, #84]	; (8000854 <main+0x8c>)
 80007fe:	6013      	str	r3, [r2, #0]
	g_pclk1_freq = HAL_RCC_GetPCLK1Freq();
 8000800:	f002 ff8c 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8000804:	4603      	mov	r3, r0
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <main+0x90>)
 8000808:	6013      	str	r3, [r2, #0]
	g_pclk2_freq = HAL_RCC_GetPCLK2Freq();
 800080a:	f002 ff9b 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 800080e:	4603      	mov	r3, r0
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <main+0x94>)
 8000812:	6013      	str	r3, [r2, #0]

	led_on(GREEN_LED);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff ff9b 	bl	8000750 <led_on>
	led_on(BLUE_LED);
 800081a:	2080      	movs	r0, #128	; 0x80
 800081c:	f7ff ff98 	bl	8000750 <led_on>
	led_on(RED_LED);
 8000820:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000824:	f7ff ff94 	bl	8000750 <led_on>

	ethernetif_notify_conn_changed(&gnetif);
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <main+0x98>)
 800082a:	f000 f87f 	bl	800092c <ethernetif_notify_conn_changed>
	while(1)
	{

		lwip_process();
 800082e:	f003 fc99 	bl	8004164 <lwip_process>
        HAL_ADC_Start(&hadc1);
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <main+0x9c>)
 8000834:	f000 fb44 	bl	8000ec0 <HAL_ADC_Start>
		printf("IP address from DHCP :  %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000838:	480b      	ldr	r0, [pc, #44]	; (8000868 <main+0xa0>)
 800083a:	f011 fe35 	bl	80124a8 <ip4addr_ntoa>
 800083e:	4603      	mov	r3, r0
 8000840:	4619      	mov	r1, r3
 8000842:	480a      	ldr	r0, [pc, #40]	; (800086c <main+0xa4>)
 8000844:	f012 fea2 	bl	801358c <iprintf>
		lwip_process();
 8000848:	e7f1      	b.n	800082e <main+0x66>
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	08000965 	.word	0x08000965
 8000854:	20000748 	.word	0x20000748
 8000858:	2000073c 	.word	0x2000073c
 800085c:	20000744 	.word	0x20000744
 8000860:	200007d8 	.word	0x200007d8
 8000864:	200006f4 	.word	0x200006f4
 8000868:	200007dc 	.word	0x200007dc
 800086c:	0801496c 	.word	0x0801496c

08000870 <sysclock_config>:




void sysclock_config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef		RCC_OscInitStruct = {0};
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	2234      	movs	r2, #52	; 0x34
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f012 fe7c 	bl	801357c <memset>
	RCC_ClkInitTypeDef		RCC_ClkInitStruct = {0};
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <sysclock_config+0xb4>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	4a22      	ldr	r2, [pc, #136]	; (8000924 <sysclock_config+0xb4>)
 800089a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089e:	6413      	str	r3, [r2, #64]	; 0x40
 80008a0:	4b20      	ldr	r3, [pc, #128]	; (8000924 <sysclock_config+0xb4>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <sysclock_config+0xb8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1d      	ldr	r2, [pc, #116]	; (8000928 <sysclock_config+0xb8>)
 80008b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <sysclock_config+0xb8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState		 = RCC_HSE_BYPASS;
 80008c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008cc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM		 = 12;
 80008d8:	230c      	movs	r3, #12
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN		 = 192;
 80008dc:	23c0      	movs	r3, #192	; 0xc0
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ		 = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP		 = RCC_PLLP_DIV2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fab9 	bl	8002e64 <HAL_RCC_OscConfig>

	/*Activate the over drive mode */
	HAL_PWREx_EnableOverDrive();
 80008f2:	f002 fa67 	bl	8002dc4 <HAL_PWREx_EnableOverDrive>


	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	60bb      	str	r3, [r7, #8]
								  |RCC_CLOCKTYPE_PCLK1 |RCC_CLOCKTYPE_PCLK2;

	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2302      	movs	r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000902:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000906:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]

	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_6);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2106      	movs	r1, #6
 8000914:	4618      	mov	r0, r3
 8000916:	f002 fd53 	bl	80033c0 <HAL_RCC_ClockConfig>

}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <ethernetif_notify_conn_changed>:

 void ethernetif_notify_conn_changed(struct netif *netif)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

	  if(netif_is_link_up(netif))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d003      	beq.n	800094e <ethernetif_notify_conn_changed+0x22>
	  {
		  printf("Cable Connected !!\n\r");
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <ethernetif_notify_conn_changed+0x30>)
 8000948:	f012 fe20 	bl	801358c <iprintf>
	  }
	  else
	  {
		  printf("ERR : Cable not connected !!\n\r");
	  }
}
 800094c:	e002      	b.n	8000954 <ethernetif_notify_conn_changed+0x28>
		  printf("ERR : Cable not connected !!\n\r");
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <ethernetif_notify_conn_changed+0x34>)
 8000950:	f012 fe1c 	bl	801358c <iprintf>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	0801498c 	.word	0x0801498c
 8000960:	080149a4 	.word	0x080149a4

08000964 <ssi_handler>:
char const ** tags =  ssi_tags;
extern ADC_HandleTypeDef hadc1;


uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]

	switch(iIndex)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d005      	beq.n	8000982 <ssi_handler+0x1e>
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d010      	beq.n	800099e <ssi_handler+0x3a>
		case 1:
			sprintf(pcInsert, "%d", (int)HAL_ADC_GetValue(&hadc1));
			return strlen(pcInsert);
			break;
		default:
			break;
 800097c:	bf00      	nop

	}
   return 0;
 800097e:	2300      	movs	r3, #0
 8000980:	e01b      	b.n	80009ba <ssi_handler+0x56>
			sprintf(pcInsert, "%d", (int)HAL_GetTick());
 8000982:	f000 fa1f 	bl	8000dc4 <HAL_GetTick>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <ssi_handler+0x60>)
 800098c:	68b8      	ldr	r0, [r7, #8]
 800098e:	f012 fe55 	bl	801363c <siprintf>
			return strlen(pcInsert);
 8000992:	68b8      	ldr	r0, [r7, #8]
 8000994:	f7ff fc5e 	bl	8000254 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b29b      	uxth	r3, r3
 800099c:	e00d      	b.n	80009ba <ssi_handler+0x56>
			sprintf(pcInsert, "%d", (int)HAL_ADC_GetValue(&hadc1));
 800099e:	480a      	ldr	r0, [pc, #40]	; (80009c8 <ssi_handler+0x64>)
 80009a0:	f000 fb5c 	bl	800105c <HAL_ADC_GetValue>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4906      	ldr	r1, [pc, #24]	; (80009c4 <ssi_handler+0x60>)
 80009aa:	68b8      	ldr	r0, [r7, #8]
 80009ac:	f012 fe46 	bl	801363c <siprintf>
			return strlen(pcInsert);
 80009b0:	68b8      	ldr	r0, [r7, #8]
 80009b2:	f7ff fc4f 	bl	8000254 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29b      	uxth	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	080149d4 	.word	0x080149d4
 80009c8:	200006f4 	.word	0x200006f4

080009cc <SysTick_Handler>:


extern ETH_HandleTypeDef heth;

void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80009d0:	f000 f9e4 	bl	8000d9c <HAL_IncTick>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <ETH_IRQHandler>:


void ETH_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	HAL_ETH_IRQHandler(&heth);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <ETH_IRQHandler+0x10>)
 80009de:	f001 fa7f 	bl	8001ee0 <HAL_ETH_IRQHandler>
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20002728 	.word	0x20002728

080009ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_kill>:

int _kill(int pid, int sig)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <_kill+0x20>)
 8000a08:	2216      	movs	r2, #22
 8000a0a:	601a      	str	r2, [r3, #0]
	return -1;
 8000a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20007b68 	.word	0x20007b68

08000a20 <_exit>:

void _exit (int status)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ffe5 	bl	80009fc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a32:	e7fe      	b.n	8000a32 <_exit+0x12>

08000a34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
	}

return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e009      	b.n	8000a94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f879 	bl	8000b80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf1      	blt.n	8000a80 <_write+0x12>
	}
	return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b087      	sub	sp, #28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d205      	bcs.n	8000b4c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <_sbrk+0x6c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	371c      	adds	r7, #28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	20080000 	.word	0x20080000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	200000a4 	.word	0x200000a4
 8000b78:	20007b78 	.word	0x20007b78
 8000b7c:	20007b68 	.word	0x20007b68

08000b80 <__io_putchar>:

static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate);


int __io_putchar(int ch)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,10);
 8000b88:	1d39      	adds	r1, r7, #4
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <__io_putchar+0x20>)
 8000b90:	f002 fe44 	bl	800381c <HAL_UART_Transmit>
	return ch;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000074c 	.word	0x2000074c

08000ba4 <uart3_tx_init>:

void uart3_tx_init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <uart3_tx_init+0xb8>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <uart3_tx_init+0xb8>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <uart3_tx_init+0xb8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]


	GPIO_InitStruct.Pin  = GPIO_PIN_8;
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000be4:	2307      	movs	r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOD,&GPIO_InitStruct);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	4619      	mov	r1, r3
 8000bee:	481c      	ldr	r0, [pc, #112]	; (8000c60 <uart3_tx_init+0xbc>)
 8000bf0:	f001 ff22 	bl	8002a38 <HAL_GPIO_Init>


	__HAL_RCC_USART3_CLK_ENABLE();
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <uart3_tx_init+0xb8>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <uart3_tx_init+0xb8>)
 8000bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <uart3_tx_init+0xb8>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]


	huart3.Instance = USART3;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c0e:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <uart3_tx_init+0xc4>)
 8000c10:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits   = UART_STOPBITS_1;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity	= UART_PARITY_NONE;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling =  UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]

	HAL_UART_Init(&huart3);
 8000c44:	4807      	ldr	r0, [pc, #28]	; (8000c64 <uart3_tx_init+0xc0>)
 8000c46:	f002 fd91 	bl	800376c <HAL_UART_Init>

   /*Set baudrate fix*/
	uart3_set_baudrate(16000000,115200);
 8000c4a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <uart3_tx_init+0xc8>)
 8000c50:	f000 f822 	bl	8000c98 <uart3_set_baudrate>
}
 8000c54:	bf00      	nop
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	2000074c 	.word	0x2000074c
 8000c68:	40004800 	.word	0x40004800
 8000c6c:	00f42400 	.word	0x00f42400

08000c70 <compute_uart_div>:



static uint16_t compute_uart_div(uint32_t periph_clock, uint32_t baudrate)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
	return ((periph_clock + (baudrate/2U))/baudrate);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	085a      	lsrs	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	441a      	add	r2, r3
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c88:	b29b      	uxth	r3, r3
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <uart3_set_baudrate>:


static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
	USART3->BRR  = compute_uart_div(periph_clock,baudrate);
 8000ca2:	6839      	ldr	r1, [r7, #0]
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe3 	bl	8000c70 <compute_uart_div>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <uart3_set_baudrate+0x24>)
 8000cb0:	60da      	str	r2, [r3, #12]
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40004800 	.word	0x40004800

08000cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cc4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cee:	f012 fbeb 	bl	80134c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf2:	f7ff fd69 	bl	80007c8 <main>

08000cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   r0, =_estack
 8000cf8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d04:	080398b4 	.word	0x080398b4
  ldr r2, =_sbss
 8000d08:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000d0c:	20007b78 	.word	0x20007b78

08000d10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>

08000d12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 fcc2 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f80d 	bl	8000d3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f000 f803 	bl	8000d2c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fcd5 	bl	800170a <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 fc9d 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000000c 	.word	0x2000000c
 8000d94:	20000014 	.word	0x20000014
 8000d98:	20000010 	.word	0x20000010

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000014 	.word	0x20000014
 8000dc0:	200007d0 	.word	0x200007d0

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200007d0 	.word	0x200007d0

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000014 	.word	0x20000014

08000e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e031      	b.n	8000e9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f832 	bl	8000eac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d116      	bne.n	8000e90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_ADC_Init+0x84>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	f043 0202 	orr.w	r2, r3, #2
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 fa4a 	bl	800130c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e8e:	e001      	b.n	8000e94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	ffffeefd 	.word	0xffffeefd

08000eac <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Start+0x1a>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e0ad      	b.n	8001036 <HAL_ADC_Start+0x176>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2201      	movs	r2, #1
 8000ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d018      	beq.n	8000f22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000f00:	4b50      	ldr	r3, [pc, #320]	; (8001044 <HAL_ADC_Start+0x184>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a50      	ldr	r2, [pc, #320]	; (8001048 <HAL_ADC_Start+0x188>)
 8000f06:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0a:	0c9a      	lsrs	r2, r3, #18
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000f14:	e002      	b.n	8000f1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1f9      	bne.n	8000f16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d175      	bne.n	800101c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f34:	4b45      	ldr	r3, [pc, #276]	; (800104c <HAL_ADC_Start+0x18c>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f6a:	d106      	bne.n	8000f7a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f70:	f023 0206 	bic.w	r2, r3, #6
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	645a      	str	r2, [r3, #68]	; 0x44
 8000f78:	e002      	b.n	8000f80 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <HAL_ADC_Start+0x190>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d143      	bne.n	8001034 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	e03a      	b.n	8001034 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_ADC_Start+0x194>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d10e      	bne.n	8000fe6 <HAL_ADC_Start+0x126>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d107      	bne.n	8000fe6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fe4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_ADC_Start+0x190>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d120      	bne.n	8001034 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_ADC_Start+0x198>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d11b      	bne.n	8001034 <HAL_ADC_Start+0x174>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d114      	bne.n	8001034 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	e00b      	b.n	8001034 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f043 0210 	orr.w	r2, r3, #16
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2000000c 	.word	0x2000000c
 8001048:	431bde83 	.word	0x431bde83
 800104c:	fffff8fe 	.word	0xfffff8fe
 8001050:	40012300 	.word	0x40012300
 8001054:	40012000 	.word	0x40012000
 8001058:	40012200 	.word	0x40012200

0800105c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x1c>
 8001090:	2302      	movs	r3, #2
 8001092:	e12a      	b.n	80012ea <HAL_ADC_ConfigChannel+0x272>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	d93a      	bls.n	800111a <HAL_ADC_ConfigChannel+0xa2>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010ac:	d035      	beq.n	800111a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68d9      	ldr	r1, [r3, #12]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	461a      	mov	r2, r3
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	3b1e      	subs	r3, #30
 80010c4:	2207      	movs	r2, #7
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	400a      	ands	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a87      	ldr	r2, [pc, #540]	; (80012f8 <HAL_ADC_ConfigChannel+0x280>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10a      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68d9      	ldr	r1, [r3, #12]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	061a      	lsls	r2, r3, #24
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010f2:	e035      	b.n	8001160 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d9      	ldr	r1, [r3, #12]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	4603      	mov	r3, r0
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4403      	add	r3, r0
 800110c:	3b1e      	subs	r3, #30
 800110e:	409a      	lsls	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001118:	e022      	b.n	8001160 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6919      	ldr	r1, [r3, #16]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	2207      	movs	r2, #7
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43da      	mvns	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	400a      	ands	r2, r1
 800113c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6919      	ldr	r1, [r3, #16]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	4603      	mov	r3, r0
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4403      	add	r3, r0
 8001156:	409a      	lsls	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b06      	cmp	r3, #6
 8001166:	d824      	bhi.n	80011b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	3b05      	subs	r3, #5
 800117a:	221f      	movs	r2, #31
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43da      	mvns	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	400a      	ands	r2, r1
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	3b05      	subs	r3, #5
 80011a4:	fa00 f203 	lsl.w	r2, r0, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
 80011b0:	e04c      	b.n	800124c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b0c      	cmp	r3, #12
 80011b8:	d824      	bhi.n	8001204 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	3b23      	subs	r3, #35	; 0x23
 80011cc:	221f      	movs	r2, #31
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	400a      	ands	r2, r1
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	3b23      	subs	r3, #35	; 0x23
 80011f6:	fa00 f203 	lsl.w	r2, r0, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
 8001202:	e023      	b.n	800124c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	3b41      	subs	r3, #65	; 0x41
 8001216:	221f      	movs	r2, #31
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43da      	mvns	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	400a      	ands	r2, r1
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	3b41      	subs	r3, #65	; 0x41
 8001240:	fa00 f203 	lsl.w	r2, r0, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2a      	ldr	r2, [pc, #168]	; (80012fc <HAL_ADC_ConfigChannel+0x284>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10a      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1f4>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800125e:	d105      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <HAL_ADC_ConfigChannel+0x288>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_ADC_ConfigChannel+0x288>)
 8001266:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800126a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a22      	ldr	r2, [pc, #136]	; (80012fc <HAL_ADC_ConfigChannel+0x284>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d109      	bne.n	800128a <HAL_ADC_ConfigChannel+0x212>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b12      	cmp	r3, #18
 800127c:	d105      	bne.n	800128a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <HAL_ADC_ConfigChannel+0x288>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <HAL_ADC_ConfigChannel+0x288>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001288:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <HAL_ADC_ConfigChannel+0x284>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d125      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x268>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_ADC_ConfigChannel+0x280>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d003      	beq.n	80012a6 <HAL_ADC_ConfigChannel+0x22e>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b11      	cmp	r3, #17
 80012a4:	d11c      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_ADC_ConfigChannel+0x288>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <HAL_ADC_ConfigChannel+0x288>)
 80012ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012b0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_ADC_ConfigChannel+0x280>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d111      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_ADC_ConfigChannel+0x28c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_ADC_ConfigChannel+0x290>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	0c9a      	lsrs	r2, r3, #18
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012d2:	e002      	b.n	80012da <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f9      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	10000012 	.word	0x10000012
 80012fc:	40012000 	.word	0x40012000
 8001300:	40012300 	.word	0x40012300
 8001304:	2000000c 	.word	0x2000000c
 8001308:	431bde83 	.word	0x431bde83

0800130c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001314:	4b78      	ldr	r3, [pc, #480]	; (80014f8 <ADC_Init+0x1ec>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a77      	ldr	r2, [pc, #476]	; (80014f8 <ADC_Init+0x1ec>)
 800131a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800131e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001320:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <ADC_Init+0x1ec>)
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4973      	ldr	r1, [pc, #460]	; (80014f8 <ADC_Init+0x1ec>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	021a      	lsls	r2, r3, #8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <ADC_Init+0x1f0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d022      	beq.n	80013e6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6899      	ldr	r1, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6899      	ldr	r1, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e00f      	b.n	8001406 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001404:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0202 	bic.w	r2, r2, #2
 8001414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6899      	ldr	r1, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	005a      	lsls	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01b      	beq.n	800146c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001442:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6859      	ldr	r1, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	3b01      	subs	r3, #1
 8001460:	035a      	lsls	r2, r3, #13
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	e007      	b.n	800147c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	3b01      	subs	r3, #1
 8001498:	051a      	lsls	r2, r3, #20
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6899      	ldr	r1, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014be:	025a      	lsls	r2, r3, #9
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6899      	ldr	r1, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	029a      	lsls	r2, r3, #10
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40012300 	.word	0x40012300
 80014fc:	0f000001 	.word	0x0f000001

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	4313      	orrs	r3, r2
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x40>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	05fa0000 	.word	0x05fa0000

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff3e 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff8e 	bl	80015f4 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff31 	bl	8001564 <__NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffa2 	bl	800165c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001734:	4ba9      	ldr	r3, [pc, #676]	; (80019dc <HAL_ETH_Init+0x2b8>)
 8001736:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e181      	b.n	8001a4e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d106      	bne.n	8001764 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f002 fd0c 	bl	800417c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001764:	4b9e      	ldr	r3, [pc, #632]	; (80019e0 <HAL_ETH_Init+0x2bc>)
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	4a9d      	ldr	r2, [pc, #628]	; (80019e0 <HAL_ETH_Init+0x2bc>)
 800176a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176e:	6453      	str	r3, [r2, #68]	; 0x44
 8001770:	4b9b      	ldr	r3, [pc, #620]	; (80019e0 <HAL_ETH_Init+0x2bc>)
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800177c:	4b99      	ldr	r3, [pc, #612]	; (80019e4 <HAL_ETH_Init+0x2c0>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a98      	ldr	r2, [pc, #608]	; (80019e4 <HAL_ETH_Init+0x2c0>)
 8001782:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001786:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001788:	4b96      	ldr	r3, [pc, #600]	; (80019e4 <HAL_ETH_Init+0x2c0>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4994      	ldr	r1, [pc, #592]	; (80019e4 <HAL_ETH_Init+0x2c0>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 0201 	orr.w	r2, r2, #1
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017ae:	f7ff fb09 	bl	8000dc4 <HAL_GetTick>
 80017b2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80017b4:	e011      	b.n	80017da <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80017b6:	f7ff fb05 	bl	8000dc4 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017c4:	d909      	bls.n	80017da <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2203      	movs	r2, #3
 80017ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e139      	b.n	8001a4e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1e4      	bne.n	80017b6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f023 031c 	bic.w	r3, r3, #28
 80017fa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017fc:	f001 ff82 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8001800:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4a78      	ldr	r2, [pc, #480]	; (80019e8 <HAL_ETH_Init+0x2c4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d908      	bls.n	800181c <HAL_ETH_Init+0xf8>
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4a77      	ldr	r2, [pc, #476]	; (80019ec <HAL_ETH_Init+0x2c8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d804      	bhi.n	800181c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f043 0308 	orr.w	r3, r3, #8
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e027      	b.n	800186c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4a73      	ldr	r2, [pc, #460]	; (80019ec <HAL_ETH_Init+0x2c8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d908      	bls.n	8001836 <HAL_ETH_Init+0x112>
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	4a6d      	ldr	r2, [pc, #436]	; (80019dc <HAL_ETH_Init+0x2b8>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d204      	bcs.n	8001836 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f043 030c 	orr.w	r3, r3, #12
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	e01a      	b.n	800186c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4a68      	ldr	r2, [pc, #416]	; (80019dc <HAL_ETH_Init+0x2b8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d303      	bcc.n	8001846 <HAL_ETH_Init+0x122>
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4a6b      	ldr	r2, [pc, #428]	; (80019f0 <HAL_ETH_Init+0x2cc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d911      	bls.n	800186a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4a69      	ldr	r2, [pc, #420]	; (80019f0 <HAL_ETH_Init+0x2cc>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d908      	bls.n	8001860 <HAL_ETH_Init+0x13c>
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4a68      	ldr	r2, [pc, #416]	; (80019f4 <HAL_ETH_Init+0x2d0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d804      	bhi.n	8001860 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e005      	b.n	800186c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	e000      	b.n	800186c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800186a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001874:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001878:	2100      	movs	r1, #0
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fc1d 	bl	80020ba <HAL_ETH_WritePHYRegister>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800188a:	6939      	ldr	r1, [r7, #16]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fdd3 	bl	8002438 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0d7      	b.n	8001a4e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800189e:	20ff      	movs	r0, #255	; 0xff
 80018a0:	f7ff fa9c 	bl	8000ddc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80a5 	beq.w	80019f8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80018ae:	f7ff fa89 	bl	8000dc4 <HAL_GetTick>
 80018b2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	461a      	mov	r2, r3
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 fb94 	bl	8001fea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80018c2:	f7ff fa7f 	bl	8000dc4 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d90f      	bls.n	80018f4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018d8:	6939      	ldr	r1, [r7, #16]
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fdac 	bl	8002438 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0ac      	b.n	8001a4e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0da      	beq.n	80018b4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80018fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fbd8 	bl	80020ba <HAL_ETH_WritePHYRegister>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00b      	beq.n	8001928 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fd8e 	bl	8002438 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001924:	2301      	movs	r3, #1
 8001926:	e092      	b.n	8001a4e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff fa4c 	bl	8000dc4 <HAL_GetTick>
 800192c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	461a      	mov	r2, r3
 8001934:	2101      	movs	r1, #1
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fb57 	bl	8001fea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800193c:	f7ff fa42 	bl	8000dc4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d90f      	bls.n	800196e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001952:	6939      	ldr	r1, [r7, #16]
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fd6f 	bl	8002438 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e06f      	b.n	8001a4e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0320 	and.w	r3, r3, #32
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0da      	beq.n	800192e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	461a      	mov	r2, r3
 800197e:	2110      	movs	r1, #16
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 fb32 	bl	8001fea <HAL_ETH_ReadPHYRegister>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00b      	beq.n	80019a4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001990:	6939      	ldr	r1, [r7, #16]
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fd50 	bl	8002438 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80019a0:	2301      	movs	r3, #1
 80019a2:	e054      	b.n	8001a4e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	e002      	b.n	80019be <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e035      	b.n	8001a3c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e030      	b.n	8001a3c <HAL_ETH_Init+0x318>
 80019da:	bf00      	nop
 80019dc:	03938700 	.word	0x03938700
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40013800 	.word	0x40013800
 80019e8:	01312cff 	.word	0x01312cff
 80019ec:	02160ebf 	.word	0x02160ebf
 80019f0:	05f5e0ff 	.word	0x05f5e0ff
 80019f4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	08db      	lsrs	r3, r3, #3
 80019fe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	2100      	movs	r1, #0
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fb52 	bl	80020ba <HAL_ETH_WritePHYRegister>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a20:	6939      	ldr	r1, [r7, #16]
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 fd08 	bl	8002438 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e00c      	b.n	8001a4e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001a34:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001a38:	f7ff f9d0 	bl	8000ddc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001a3c:	6939      	ldr	r1, [r7, #16]
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fcfa 	bl	8002438 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop

08001a58 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_ETH_DMATxDescListInit+0x20>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e052      	b.n	8001b1e <HAL_ETH_DMATxDescListInit+0xc6>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e030      	b.n	8001af6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aa4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d105      	bne.n	8001ace <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d208      	bcs.n	8001aea <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	015b      	lsls	r3, r3, #5
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	e002      	b.n	8001af0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3301      	adds	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3ca      	bcc.n	8001a94 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6819      	ldr	r1, [r3, #0]
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b08:	440b      	add	r3, r1
 8001b0a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b087      	sub	sp, #28
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_ETH_DMARxDescListInit+0x20>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e056      	b.n	8001bf8 <HAL_ETH_DMARxDescListInit+0xce>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	e034      	b.n	8001bd0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b76:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001b7e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d208      	bcs.n	8001bc4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	015b      	lsls	r3, r3, #5
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	4413      	add	r3, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	e002      	b.n	8001bca <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d3c6      	bcc.n	8001b66 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	f241 030c 	movw	r3, #4108	; 0x100c
 8001be2:	440b      	add	r3, r1
 8001be4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_ETH_TransmitFrame+0x24>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0cd      	b.n	8001dc4 <HAL_ETH_TransmitFrame+0x1c0>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0b8      	b.n	8001dc4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	da09      	bge.n	8001c70 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2212      	movs	r2, #18
 8001c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0a9      	b.n	8001dc4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d915      	bls.n	8001ca6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	4a54      	ldr	r2, [pc, #336]	; (8001dd0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0a9b      	lsrs	r3, r3, #10
 8001c84:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001c8e:	0a9b      	lsrs	r3, r3, #10
 8001c90:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e001      	b.n	8001caa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11c      	bne.n	8001cea <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001cbe:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001cca:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cda:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ce8:	e04b      	b.n	8001d82 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e044      	b.n	8001d7a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cfe:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d107      	bne.n	8001d16 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d14:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d1e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d116      	bne.n	8001d58 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001d38:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	4a25      	ldr	r2, [pc, #148]	; (8001dd4 <HAL_ETH_TransmitFrame+0x1d0>)
 8001d3e:	fb02 f203 	mul.w	r2, r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	4413      	add	r3, r2
 8001d46:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001d4a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001d56:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d66:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	3301      	adds	r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3b6      	bcc.n	8001cf0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00d      	beq.n	8001db2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d9e:	4413      	add	r3, r2
 8001da0:	2204      	movs	r2, #4
 8001da2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	f241 0304 	movw	r3, #4100	; 0x1004
 8001dac:	4413      	add	r3, r2
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	ac02b00b 	.word	0xac02b00b
 8001dd4:	fffffa0c 	.word	0xfffffa0c

08001dd8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ETH_GetReceivedFrame+0x1a>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e070      	b.n	8001ed4 <HAL_ETH_GetReceivedFrame+0xfc>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db5a      	blt.n	8001ec2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d030      	beq.n	8001e7c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d103      	bne.n	8001e34 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e48:	3b04      	subs	r3, #4
 8001e4a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	461a      	mov	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e02b      	b.n	8001ed4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d010      	beq.n	8001eac <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28
 8001eaa:	e00a      	b.n	8001ec2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d112      	bne.n	8001f22 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f860 	bl	8001fc2 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2240      	movs	r2, #64	; 0x40
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f20:	e01b      	b.n	8001f5a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f2a:	4413      	add	r3, r2
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d111      	bne.n	8001f5a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f839 	bl	8001fae <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f44:	4413      	add	r3, r2
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f62:	4413      	add	r3, r2
 8001f64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f68:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f72:	4413      	add	r3, r2
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7e:	d112      	bne.n	8001fa6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f828 	bl	8001fd6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f8e:	4413      	add	r3, r2
 8001f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f94:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b82      	cmp	r3, #130	; 0x82
 800200a:	d101      	bne.n	8002010 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
 800200e:	e050      	b.n	80020b2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2282      	movs	r2, #130	; 0x82
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 031c 	and.w	r3, r3, #28
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8a1b      	ldrh	r3, [r3, #16]
 800202c:	02db      	lsls	r3, r3, #11
 800202e:	b29b      	uxth	r3, r3
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	019b      	lsls	r3, r3, #6
 800203a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f023 0302 	bic.w	r3, r3, #2
 800204a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800205c:	f7fe feb2 	bl	8000dc4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002062:	e015      	b.n	8002090 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002064:	f7fe feae 	bl	8000dc4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002072:	d309      	bcc.n	8002088 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e014      	b.n	80020b2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1e4      	bne.n	8002064 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	460b      	mov	r3, r1
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b42      	cmp	r3, #66	; 0x42
 80020da:	d101      	bne.n	80020e0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
 80020de:	e04e      	b.n	800217e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2242      	movs	r2, #66	; 0x42
 80020e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 031c 	and.w	r3, r3, #28
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8a1b      	ldrh	r3, [r3, #16]
 80020fc:	02db      	lsls	r3, r3, #11
 80020fe:	b29b      	uxth	r3, r3
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002136:	f7fe fe45 	bl	8000dc4 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800213c:	e015      	b.n	800216a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800213e:	f7fe fe41 	bl	8000dc4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d309      	bcc.n	8002162 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e00d      	b.n	800217e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e4      	bne.n	800213e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_ETH_Start+0x16>
 8002198:	2302      	movs	r3, #2
 800219a:	e01f      	b.n	80021dc <HAL_ETH_Start+0x56>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fb45 	bl	800283c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fb7c 	bl	80028b0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fc13 	bl	80029e4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fbb0 	bl	8002924 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fbdd 	bl	8002984 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ETH_Stop+0x16>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e01f      	b.n	800223a <HAL_ETH_Stop+0x56>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fba2 	bl	8002954 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fbcf 	bl	80029b4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fb67 	bl	80028ea <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fbe1 	bl	80029e4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fb27 	bl	8002876 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_ETH_ConfigMAC+0x1c>
 800225c:	2302      	movs	r3, #2
 800225e:	e0e4      	b.n	800242a <HAL_ETH_ConfigMAC+0x1e6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80b1 	beq.w	80023da <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <HAL_ETH_ConfigMAC+0x1f0>)
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002290:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002296:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800229c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80022a2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80022a8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80022ae:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80022b4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80022ba:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80022c0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80022c6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80022cc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80022d2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f7fe fd76 	bl	8000ddc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002300:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002306:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800230c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002312:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002318:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800231e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800232a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800232c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002336:	2001      	movs	r0, #1
 8002338:	f7fe fd50 	bl	8000ddc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800234c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002356:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002366:	4013      	ands	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002374:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800237a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002380:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002386:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800238c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7fe fd19 	bl	8000ddc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7fe fd06 	bl	8000ddc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	61da      	str	r2, [r3, #28]
 80023d8:	e01e      	b.n	8002418 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80023e8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800240a:	2001      	movs	r0, #1
 800240c:	f7fe fce6 	bl	8000ddc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	ff20810f 	.word	0xff20810f

08002438 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0b0      	sub	sp, #192	; 0xc0
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002454:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800245c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002466:	2300      	movs	r3, #0
 8002468:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002472:	2300      	movs	r3, #0
 8002474:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800247e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002482:	663b      	str	r3, [r7, #96]	; 0x60
 8002484:	e001      	b.n	800248a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800248a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002494:	2300      	movs	r3, #0
 8002496:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002498:	2300      	movs	r3, #0
 800249a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80024a4:	2340      	movs	r3, #64	; 0x40
 80024a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800250c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002510:	4bab      	ldr	r3, [pc, #684]	; (80027c0 <ETH_MACDMAConfig+0x388>)
 8002512:	4013      	ands	r3, r2
 8002514:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002518:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800251a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800251c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800251e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002520:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002524:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800252a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800252c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800252e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002532:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002538:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800253a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800253c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800253e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002540:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002544:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002548:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800254a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800254c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800254e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002560:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800256c:	2001      	movs	r0, #1
 800256e:	f7fe fc35 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800257a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800257c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800257e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002580:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002584:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002586:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800258a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800258c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002590:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002596:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800259c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80025a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80025a8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80025aa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7fe fc10 	bl	8000ddc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025c4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025ce:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80025d8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80025e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80025ec:	4013      	ands	r3, r2
 80025ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80025f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025f6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80025f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80025fc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80025fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002602:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002608:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800260a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800260e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002610:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002614:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002616:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002628:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002634:	2001      	movs	r0, #1
 8002636:	f7fe fbd1 	bl	8000ddc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002642:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002644:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002648:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800265e:	2001      	movs	r0, #1
 8002660:	f7fe fbbc 	bl	8000ddc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800266c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800267c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002680:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002692:	2304      	movs	r3, #4
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800269c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ac:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f241 0318 	movw	r3, #4120	; 0x1018
 80026c2:	4413      	add	r3, r2
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80026ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <ETH_MACDMAConfig+0x38c>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80026d6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80026d8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80026da:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80026dc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80026de:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80026e0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80026e2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80026e4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80026e6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80026e8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80026ea:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80026ec:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80026ee:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80026f2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80026f6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80026f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	f241 0318 	movw	r3, #4120	; 0x1018
 800270a:	4413      	add	r3, r2
 800270c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002710:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f241 0318 	movw	r3, #4120	; 0x1018
 800271a:	4413      	add	r3, r2
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002722:	2001      	movs	r0, #1
 8002724:	f7fe fb5a 	bl	8000ddc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002730:	4413      	add	r3, r2
 8002732:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002736:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800273c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002740:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002744:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002748:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800274a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800274c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800274e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002752:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800275c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002760:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002770:	2001      	movs	r0, #1
 8002772:	f7fe fb33 	bl	8000ddc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800277e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002782:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d10d      	bne.n	80027a8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	f241 031c 	movw	r3, #4124	; 0x101c
 8002794:	4413      	add	r3, r2
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6811      	ldr	r1, [r2, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <ETH_MACDMAConfig+0x390>)
 800279e:	431a      	orrs	r2, r3
 80027a0:	f241 031c 	movw	r3, #4124	; 0x101c
 80027a4:	440b      	add	r3, r1
 80027a6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	461a      	mov	r2, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f80b 	bl	80027cc <ETH_MACAddressConfig>
}
 80027b6:	bf00      	nop
 80027b8:	37c0      	adds	r7, #192	; 0xc0
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	ff20810f 	.word	0xff20810f
 80027c4:	f8de3f23 	.word	0xf8de3f23
 80027c8:	00010040 	.word	0x00010040

080027cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3305      	adds	r3, #5
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	3204      	adds	r2, #4
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <ETH_MACAddressConfig+0x68>)
 80027ee:	4413      	add	r3, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3303      	adds	r3, #3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	061a      	lsls	r2, r3, #24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3302      	adds	r3, #2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3301      	adds	r3, #1
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	4313      	orrs	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <ETH_MACAddressConfig+0x6c>)
 800281e:	4413      	add	r3, r2
 8002820:	461a      	mov	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40028040 	.word	0x40028040
 8002838:	40028044 	.word	0x40028044

0800283c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002860:	2001      	movs	r0, #1
 8002862:	f7fe fabb 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0208 	bic.w	r2, r2, #8
 8002890:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800289a:	2001      	movs	r0, #1
 800289c:	f7fe fa9e 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0204 	orr.w	r2, r2, #4
 80028ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f7fe fa81 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0204 	bic.w	r2, r2, #4
 8002904:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800290e:	2001      	movs	r0, #1
 8002910:	f7fe fa64 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	f241 0318 	movw	r3, #4120	; 0x1018
 8002934:	4413      	add	r3, r2
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6811      	ldr	r1, [r2, #0]
 800293c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002940:	f241 0318 	movw	r3, #4120	; 0x1018
 8002944:	440b      	add	r3, r1
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	f241 0318 	movw	r3, #4120	; 0x1018
 8002964:	4413      	add	r3, r2
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6811      	ldr	r1, [r2, #0]
 800296c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002970:	f241 0318 	movw	r3, #4120	; 0x1018
 8002974:	440b      	add	r3, r1
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	f241 0318 	movw	r3, #4120	; 0x1018
 8002994:	4413      	add	r3, r2
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6811      	ldr	r1, [r2, #0]
 800299c:	f043 0202 	orr.w	r2, r3, #2
 80029a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80029a4:	440b      	add	r3, r1
 80029a6:	601a      	str	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80029c4:	4413      	add	r3, r2
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6811      	ldr	r1, [r2, #0]
 80029cc:	f023 0202 	bic.w	r2, r3, #2
 80029d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80029d4:	440b      	add	r3, r1
 80029d6:	601a      	str	r2, [r3, #0]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80029f8:	4413      	add	r3, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6811      	ldr	r1, [r2, #0]
 8002a00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a04:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a08:	440b      	add	r3, r1
 8002a0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a14:	4413      	add	r3, r2
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f7fe f9de 	bl	8000ddc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6819      	ldr	r1, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a2a:	440b      	add	r3, r1
 8002a2c:	601a      	str	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e175      	b.n	8002d44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f040 8164 	bne.w	8002d3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d00b      	beq.n	8002a96 <HAL_GPIO_Init+0x5e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d007      	beq.n	8002a96 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a8a:	2b11      	cmp	r3, #17
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b12      	cmp	r3, #18
 8002a94:	d130      	bne.n	8002af8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0201 	and.w	r2, r3, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x100>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b12      	cmp	r3, #18
 8002b36:	d123      	bne.n	8002b80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	08da      	lsrs	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3208      	adds	r2, #8
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80be 	beq.w	8002d3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	4b66      	ldr	r3, [pc, #408]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	4a65      	ldr	r2, [pc, #404]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_GPIO_Init+0x324>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bda:	4a61      	ldr	r2, [pc, #388]	; (8002d60 <HAL_GPIO_Init+0x328>)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a58      	ldr	r2, [pc, #352]	; (8002d64 <HAL_GPIO_Init+0x32c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d037      	beq.n	8002c76 <HAL_GPIO_Init+0x23e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a57      	ldr	r2, [pc, #348]	; (8002d68 <HAL_GPIO_Init+0x330>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d031      	beq.n	8002c72 <HAL_GPIO_Init+0x23a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_GPIO_Init+0x334>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d02b      	beq.n	8002c6e <HAL_GPIO_Init+0x236>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a55      	ldr	r2, [pc, #340]	; (8002d70 <HAL_GPIO_Init+0x338>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d025      	beq.n	8002c6a <HAL_GPIO_Init+0x232>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a54      	ldr	r2, [pc, #336]	; (8002d74 <HAL_GPIO_Init+0x33c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d01f      	beq.n	8002c66 <HAL_GPIO_Init+0x22e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a53      	ldr	r2, [pc, #332]	; (8002d78 <HAL_GPIO_Init+0x340>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d019      	beq.n	8002c62 <HAL_GPIO_Init+0x22a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_GPIO_Init+0x344>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x226>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a51      	ldr	r2, [pc, #324]	; (8002d80 <HAL_GPIO_Init+0x348>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00d      	beq.n	8002c5a <HAL_GPIO_Init+0x222>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a50      	ldr	r2, [pc, #320]	; (8002d84 <HAL_GPIO_Init+0x34c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_Init+0x21e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4f      	ldr	r2, [pc, #316]	; (8002d88 <HAL_GPIO_Init+0x350>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_GPIO_Init+0x21a>
 8002c4e:	2309      	movs	r3, #9
 8002c50:	e012      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c52:	230a      	movs	r3, #10
 8002c54:	e010      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c56:	2308      	movs	r3, #8
 8002c58:	e00e      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e00c      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c5e:	2306      	movs	r3, #6
 8002c60:	e00a      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c62:	2305      	movs	r3, #5
 8002c64:	e008      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c66:	2304      	movs	r3, #4
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e004      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_GPIO_Init+0x240>
 8002c76:	2300      	movs	r3, #0
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f002 0203 	and.w	r2, r2, #3
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4093      	lsls	r3, r2
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c88:	4935      	ldr	r1, [pc, #212]	; (8002d60 <HAL_GPIO_Init+0x328>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <HAL_GPIO_Init+0x354>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cba:	4a34      	ldr	r2, [pc, #208]	; (8002d8c <HAL_GPIO_Init+0x354>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cc0:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <HAL_GPIO_Init+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce4:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <HAL_GPIO_Init+0x354>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_GPIO_Init+0x354>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <HAL_GPIO_Init+0x354>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_GPIO_Init+0x354>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_GPIO_Init+0x354>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	f67f ae86 	bls.w	8002a58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40020000 	.word	0x40020000
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	40020800 	.word	0x40020800
 8002d70:	40020c00 	.word	0x40020c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40021400 	.word	0x40021400
 8002d7c:	40021800 	.word	0x40021800
 8002d80:	40021c00 	.word	0x40021c00
 8002d84:	40022000 	.word	0x40022000
 8002d88:	40022400 	.word	0x40022400
 8002d8c:	40013c00 	.word	0x40013c00

08002d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dac:	e003      	b.n	8002db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	619a      	str	r2, [r3, #24]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df2:	f7fd ffe7 	bl	8000dc4 <HAL_GetTick>
 8002df6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002df8:	e009      	b.n	8002e0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dfa:	f7fd ffe3 	bl	8000dc4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e08:	d901      	bls.n	8002e0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e022      	b.n	8002e54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1a:	d1ee      	bne.n	8002dfa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e28:	f7fd ffcc 	bl	8000dc4 <HAL_GetTick>
 8002e2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e2e:	e009      	b.n	8002e44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e30:	f7fd ffc8 	bl	8000dc4 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e3e:	d901      	bls.n	8002e44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e007      	b.n	8002e54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e50:	d1ee      	bne.n	8002e30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40007000 	.word	0x40007000

08002e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e29b      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8087 	beq.w	8002f96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e88:	4b96      	ldr	r3, [pc, #600]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d00c      	beq.n	8002eae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e94:	4b93      	ldr	r3, [pc, #588]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d112      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x62>
 8002ea0:	4b90      	ldr	r3, [pc, #576]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eac:	d10b      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eae:	4b8d      	ldr	r3, [pc, #564]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d06c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x130>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d168      	bne.n	8002f94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e275      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x7a>
 8002ed0:	4b84      	ldr	r3, [pc, #528]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a83      	ldr	r2, [pc, #524]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eda:	6013      	str	r3, [r2, #0]
 8002edc:	e02e      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x9c>
 8002ee6:	4b7f      	ldr	r3, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7e      	ldr	r2, [pc, #504]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	4b7c      	ldr	r3, [pc, #496]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a7b      	ldr	r2, [pc, #492]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	e01d      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f08:	d10c      	bne.n	8002f24 <HAL_RCC_OscConfig+0xc0>
 8002f0a:	4b76      	ldr	r3, [pc, #472]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a75      	ldr	r2, [pc, #468]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a72      	ldr	r2, [pc, #456]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e00b      	b.n	8002f3c <HAL_RCC_OscConfig+0xd8>
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6b      	ldr	r2, [pc, #428]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fd ff3e 	bl	8000dc4 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fd ff3a 	bl	8000dc4 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e229      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0xe8>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fd ff2a 	bl	8000dc4 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fd ff26 	bl	8000dc4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e215      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	4b57      	ldr	r3, [pc, #348]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x110>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d069      	beq.n	8003076 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fa2:	4b50      	ldr	r3, [pc, #320]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00b      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b4d      	ldr	r3, [pc, #308]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d11c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x190>
 8002fba:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d116      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x17a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d001      	beq.n	8002fde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e1e9      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	4b41      	ldr	r3, [pc, #260]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	493d      	ldr	r1, [pc, #244]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	e040      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d023      	beq.n	8003044 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ffc:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fd fedc 	bl	8000dc4 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003010:	f7fd fed8 	bl	8000dc4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1c7      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4929      	ldr	r1, [pc, #164]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
 8003042:	e018      	b.n	8003076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fd feb8 	bl	8000dc4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003058:	f7fd feb4 	bl	8000dc4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1a3      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d038      	beq.n	80030f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d019      	beq.n	80030be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 800308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fd fe95 	bl	8000dc4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fd fe91 	bl	8000dc4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e180      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x23a>
 80030bc:	e01a      	b.n	80030f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_RCC_OscConfig+0x280>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fd fe7b 	bl	8000dc4 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fd fe77 	bl	8000dc4 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d903      	bls.n	80030e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e166      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
 80030e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b92      	ldr	r3, [pc, #584]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ee      	bne.n	80030d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a4 	beq.w	800324a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003102:	4b8c      	ldr	r3, [pc, #560]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800310e:	4b89      	ldr	r3, [pc, #548]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a88      	ldr	r2, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b86      	ldr	r3, [pc, #536]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312a:	4b83      	ldr	r3, [pc, #524]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003136:	4b80      	ldr	r3, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7f      	ldr	r2, [pc, #508]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7fd fe3f 	bl	8000dc4 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fd fe3b 	bl	8000dc4 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e12a      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315c:	4b76      	ldr	r3, [pc, #472]	; (8003338 <HAL_RCC_OscConfig+0x4d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x31a>
 8003170:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a6f      	ldr	r2, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e02d      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x33c>
 8003186:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800318c:	f023 0301 	bic.w	r3, r3, #1
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b68      	ldr	r3, [pc, #416]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a67      	ldr	r2, [pc, #412]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	e01c      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x35e>
 80031a8:	4b62      	ldr	r3, [pc, #392]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a61      	ldr	r2, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a5e      	ldr	r2, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x376>
 80031c2:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a5b      	ldr	r2, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fd fdef 	bl	8000dc4 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fd fdeb 	bl	8000dc4 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0d8      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ee      	beq.n	80031ea <HAL_RCC_OscConfig+0x386>
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fd fdd9 	bl	8000dc4 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fd fdd5 	bl	8000dc4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0c2      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	4b41      	ldr	r3, [pc, #260]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ee      	bne.n	8003216 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a3c      	ldr	r2, [pc, #240]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80ae 	beq.w	80033b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003254:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d06d      	beq.n	800333c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d14b      	bne.n	8003300 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd fda6 	bl	8000dc4 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327c:	f7fd fda2 	bl	8000dc4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e091      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	3b01      	subs	r3, #1
 80032b4:	041b      	lsls	r3, r3, #16
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	071b      	lsls	r3, r3, #28
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fd fd74 	bl	8000dc4 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7fd fd70 	bl	8000dc4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e05f      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x47c>
 80032fe:	e057      	b.n	80033b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fd fd5a 	bl	8000dc4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fd fd56 	bl	8000dc4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e045      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x4b0>
 8003332:	e03d      	b.n	80033b0 <HAL_RCC_OscConfig+0x54c>
 8003334:	40023800 	.word	0x40023800
 8003338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800333c:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_RCC_OscConfig+0x558>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d030      	beq.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d129      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003362:	429a      	cmp	r2, r3
 8003364:	d122      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800336c:	4013      	ands	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003372:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003374:	4293      	cmp	r3, r2
 8003376:	d119      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	085b      	lsrs	r3, r3, #1
 8003384:	3b01      	subs	r3, #1
 8003386:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d10f      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0d0      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d910      	bls.n	8003408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b67      	ldr	r3, [pc, #412]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 020f 	bic.w	r2, r3, #15
 80033ee:	4965      	ldr	r1, [pc, #404]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d040      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d115      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e073      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b3d      	ldr	r3, [pc, #244]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e06b      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034a2:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4936      	ldr	r1, [pc, #216]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fd fc86 	bl	8000dc4 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034bc:	f7fd fc82 	bl	8000dc4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e053      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 020c 	and.w	r2, r3, #12
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d1eb      	bne.n	80034bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d210      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 020f 	bic.w	r2, r3, #15
 80034fa:	4922      	ldr	r1, [pc, #136]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1cc>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1d0>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fbe2 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	080178c0 	.word	0x080178c0
 8003590:	2000000c 	.word	0x2000000c
 8003594:	20000010 	.word	0x20000010

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800359e:	2100      	movs	r1, #0
 80035a0:	6079      	str	r1, [r7, #4]
 80035a2:	2100      	movs	r1, #0
 80035a4:	60f9      	str	r1, [r7, #12]
 80035a6:	2100      	movs	r1, #0
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80035aa:	2100      	movs	r1, #0
 80035ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ae:	4952      	ldr	r1, [pc, #328]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035b0:	6889      	ldr	r1, [r1, #8]
 80035b2:	f001 010c 	and.w	r1, r1, #12
 80035b6:	2908      	cmp	r1, #8
 80035b8:	d00d      	beq.n	80035d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80035ba:	2908      	cmp	r1, #8
 80035bc:	f200 8094 	bhi.w	80036e8 <HAL_RCC_GetSysClockFreq+0x150>
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d002      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x32>
 80035c4:	2904      	cmp	r1, #4
 80035c6:	d003      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x38>
 80035c8:	e08e      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ca:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCC_GetSysClockFreq+0x164>)
 80035cc:	60bb      	str	r3, [r7, #8]
      break;
 80035ce:	e08e      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCC_GetSysClockFreq+0x168>)
 80035d2:	60bb      	str	r3, [r7, #8]
      break;
 80035d4:	e08b      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d6:	4948      	ldr	r1, [pc, #288]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035d8:	6849      	ldr	r1, [r1, #4]
 80035da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035de:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80035e0:	4945      	ldr	r1, [pc, #276]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035e2:	6849      	ldr	r1, [r1, #4]
 80035e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035e8:	2900      	cmp	r1, #0
 80035ea:	d024      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ec:	4942      	ldr	r1, [pc, #264]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035ee:	6849      	ldr	r1, [r1, #4]
 80035f0:	0989      	lsrs	r1, r1, #6
 80035f2:	4608      	mov	r0, r1
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035fc:	f04f 0500 	mov.w	r5, #0
 8003600:	ea00 0204 	and.w	r2, r0, r4
 8003604:	ea01 0305 	and.w	r3, r1, r5
 8003608:	493d      	ldr	r1, [pc, #244]	; (8003700 <HAL_RCC_GetSysClockFreq+0x168>)
 800360a:	fb01 f003 	mul.w	r0, r1, r3
 800360e:	2100      	movs	r1, #0
 8003610:	fb01 f102 	mul.w	r1, r1, r2
 8003614:	1844      	adds	r4, r0, r1
 8003616:	493a      	ldr	r1, [pc, #232]	; (8003700 <HAL_RCC_GetSysClockFreq+0x168>)
 8003618:	fba2 0101 	umull	r0, r1, r2, r1
 800361c:	1863      	adds	r3, r4, r1
 800361e:	4619      	mov	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f7fc fe72 	bl	8000310 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e04a      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003636:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	461a      	mov	r2, r3
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003646:	f04f 0100 	mov.w	r1, #0
 800364a:	ea02 0400 	and.w	r4, r2, r0
 800364e:	ea03 0501 	and.w	r5, r3, r1
 8003652:	4620      	mov	r0, r4
 8003654:	4629      	mov	r1, r5
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	014b      	lsls	r3, r1, #5
 8003660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003664:	0142      	lsls	r2, r0, #5
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	1b00      	subs	r0, r0, r4
 800366c:	eb61 0105 	sbc.w	r1, r1, r5
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	018b      	lsls	r3, r1, #6
 800367a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800367e:	0182      	lsls	r2, r0, #6
 8003680:	1a12      	subs	r2, r2, r0
 8003682:	eb63 0301 	sbc.w	r3, r3, r1
 8003686:	f04f 0000 	mov.w	r0, #0
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	00d9      	lsls	r1, r3, #3
 8003690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003694:	00d0      	lsls	r0, r2, #3
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	1912      	adds	r2, r2, r4
 800369c:	eb45 0303 	adc.w	r3, r5, r3
 80036a0:	f04f 0000 	mov.w	r0, #0
 80036a4:	f04f 0100 	mov.w	r1, #0
 80036a8:	0299      	lsls	r1, r3, #10
 80036aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036ae:	0290      	lsls	r0, r2, #10
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	461a      	mov	r2, r3
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	f7fc fe26 	bl	8000310 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4613      	mov	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	60bb      	str	r3, [r7, #8]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_RCC_GetSysClockFreq+0x164>)
 80036ea:	60bb      	str	r3, [r7, #8]
      break;
 80036ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ee:	68bb      	ldr	r3, [r7, #8]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdb0      	pop	{r4, r5, r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	017d7840 	.word	0x017d7840

08003704 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	2000000c 	.word	0x2000000c

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003720:	f7ff fff0 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	080178d0 	.word	0x080178d0

08003744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003748:	f7ff ffdc 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0b5b      	lsrs	r3, r3, #13
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	080178d0 	.word	0x080178d0

0800376c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e040      	b.n	8003800 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f83a 	bl	8003808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8ca 	bl	8003944 <UART_SetConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fb20 	bl	8003e08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fba7 	bl	8003f4c <UART_CheckIdleState>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003830:	2b20      	cmp	r3, #32
 8003832:	f040 8081 	bne.w	8003938 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_UART_Transmit+0x26>
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e079      	b.n	800393a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_UART_Transmit+0x38>
 8003850:	2302      	movs	r3, #2
 8003852:	e072      	b.n	800393a <HAL_UART_Transmit+0x11e>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2221      	movs	r2, #33	; 0x21
 8003868:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800386a:	f7fd faab 	bl	8000dc4 <HAL_GetTick>
 800386e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003888:	d108      	bne.n	800389c <HAL_UART_Transmit+0x80>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d104      	bne.n	800389c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	e003      	b.n	80038a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80038ac:	e02c      	b.n	8003908 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 fb90 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e038      	b.n	800393a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10b      	bne.n	80038e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	3302      	adds	r3, #2
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e007      	b.n	80038f6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3301      	adds	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1cc      	bne.n	80038ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2200      	movs	r2, #0
 800391c:	2140      	movs	r1, #64	; 0x40
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fb5d 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e005      	b.n	800393a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	e000      	b.n	800393a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003938:	2302      	movs	r3, #2
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4ba7      	ldr	r3, [pc, #668]	; (8003c0c <UART_SetConfig+0x2c8>)
 8003970:	4013      	ands	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	430b      	orrs	r3, r1
 800397a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a95      	ldr	r2, [pc, #596]	; (8003c10 <UART_SetConfig+0x2cc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d120      	bne.n	8003a02 <UART_SetConfig+0xbe>
 80039c0:	4b94      	ldr	r3, [pc, #592]	; (8003c14 <UART_SetConfig+0x2d0>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d816      	bhi.n	80039fc <UART_SetConfig+0xb8>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0x90>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039f1 	.word	0x080039f1
 80039dc:	080039eb 	.word	0x080039eb
 80039e0:	080039f7 	.word	0x080039f7
 80039e4:	2301      	movs	r3, #1
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e14f      	b.n	8003c8a <UART_SetConfig+0x346>
 80039ea:	2302      	movs	r3, #2
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e14c      	b.n	8003c8a <UART_SetConfig+0x346>
 80039f0:	2304      	movs	r3, #4
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e149      	b.n	8003c8a <UART_SetConfig+0x346>
 80039f6:	2308      	movs	r3, #8
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e146      	b.n	8003c8a <UART_SetConfig+0x346>
 80039fc:	2310      	movs	r3, #16
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e143      	b.n	8003c8a <UART_SetConfig+0x346>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a84      	ldr	r2, [pc, #528]	; (8003c18 <UART_SetConfig+0x2d4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d132      	bne.n	8003a72 <UART_SetConfig+0x12e>
 8003a0c:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <UART_SetConfig+0x2d0>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b0c      	cmp	r3, #12
 8003a18:	d828      	bhi.n	8003a6c <UART_SetConfig+0x128>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <UART_SetConfig+0xdc>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a55 	.word	0x08003a55
 8003a24:	08003a6d 	.word	0x08003a6d
 8003a28:	08003a6d 	.word	0x08003a6d
 8003a2c:	08003a6d 	.word	0x08003a6d
 8003a30:	08003a61 	.word	0x08003a61
 8003a34:	08003a6d 	.word	0x08003a6d
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003a6d 	.word	0x08003a6d
 8003a40:	08003a5b 	.word	0x08003a5b
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	08003a6d 	.word	0x08003a6d
 8003a4c:	08003a6d 	.word	0x08003a6d
 8003a50:	08003a67 	.word	0x08003a67
 8003a54:	2300      	movs	r3, #0
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e117      	b.n	8003c8a <UART_SetConfig+0x346>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	77fb      	strb	r3, [r7, #31]
 8003a5e:	e114      	b.n	8003c8a <UART_SetConfig+0x346>
 8003a60:	2304      	movs	r3, #4
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e111      	b.n	8003c8a <UART_SetConfig+0x346>
 8003a66:	2308      	movs	r3, #8
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e10e      	b.n	8003c8a <UART_SetConfig+0x346>
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e10b      	b.n	8003c8a <UART_SetConfig+0x346>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a69      	ldr	r2, [pc, #420]	; (8003c1c <UART_SetConfig+0x2d8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d120      	bne.n	8003abe <UART_SetConfig+0x17a>
 8003a7c:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <UART_SetConfig+0x2d0>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a86:	2b30      	cmp	r3, #48	; 0x30
 8003a88:	d013      	beq.n	8003ab2 <UART_SetConfig+0x16e>
 8003a8a:	2b30      	cmp	r3, #48	; 0x30
 8003a8c:	d814      	bhi.n	8003ab8 <UART_SetConfig+0x174>
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	d009      	beq.n	8003aa6 <UART_SetConfig+0x162>
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d810      	bhi.n	8003ab8 <UART_SetConfig+0x174>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <UART_SetConfig+0x15c>
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d006      	beq.n	8003aac <UART_SetConfig+0x168>
 8003a9e:	e00b      	b.n	8003ab8 <UART_SetConfig+0x174>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e0f1      	b.n	8003c8a <UART_SetConfig+0x346>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e0ee      	b.n	8003c8a <UART_SetConfig+0x346>
 8003aac:	2304      	movs	r3, #4
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e0eb      	b.n	8003c8a <UART_SetConfig+0x346>
 8003ab2:	2308      	movs	r3, #8
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e0e8      	b.n	8003c8a <UART_SetConfig+0x346>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e0e5      	b.n	8003c8a <UART_SetConfig+0x346>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a57      	ldr	r2, [pc, #348]	; (8003c20 <UART_SetConfig+0x2dc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d120      	bne.n	8003b0a <UART_SetConfig+0x1c6>
 8003ac8:	4b52      	ldr	r3, [pc, #328]	; (8003c14 <UART_SetConfig+0x2d0>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad4:	d013      	beq.n	8003afe <UART_SetConfig+0x1ba>
 8003ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad8:	d814      	bhi.n	8003b04 <UART_SetConfig+0x1c0>
 8003ada:	2b80      	cmp	r3, #128	; 0x80
 8003adc:	d009      	beq.n	8003af2 <UART_SetConfig+0x1ae>
 8003ade:	2b80      	cmp	r3, #128	; 0x80
 8003ae0:	d810      	bhi.n	8003b04 <UART_SetConfig+0x1c0>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <UART_SetConfig+0x1a8>
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d006      	beq.n	8003af8 <UART_SetConfig+0x1b4>
 8003aea:	e00b      	b.n	8003b04 <UART_SetConfig+0x1c0>
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e0cb      	b.n	8003c8a <UART_SetConfig+0x346>
 8003af2:	2302      	movs	r3, #2
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e0c8      	b.n	8003c8a <UART_SetConfig+0x346>
 8003af8:	2304      	movs	r3, #4
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e0c5      	b.n	8003c8a <UART_SetConfig+0x346>
 8003afe:	2308      	movs	r3, #8
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e0c2      	b.n	8003c8a <UART_SetConfig+0x346>
 8003b04:	2310      	movs	r3, #16
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e0bf      	b.n	8003c8a <UART_SetConfig+0x346>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a45      	ldr	r2, [pc, #276]	; (8003c24 <UART_SetConfig+0x2e0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d125      	bne.n	8003b60 <UART_SetConfig+0x21c>
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <UART_SetConfig+0x2d0>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b22:	d017      	beq.n	8003b54 <UART_SetConfig+0x210>
 8003b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b28:	d817      	bhi.n	8003b5a <UART_SetConfig+0x216>
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2e:	d00b      	beq.n	8003b48 <UART_SetConfig+0x204>
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d811      	bhi.n	8003b5a <UART_SetConfig+0x216>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <UART_SetConfig+0x1fe>
 8003b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3e:	d006      	beq.n	8003b4e <UART_SetConfig+0x20a>
 8003b40:	e00b      	b.n	8003b5a <UART_SetConfig+0x216>
 8003b42:	2300      	movs	r3, #0
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e0a0      	b.n	8003c8a <UART_SetConfig+0x346>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e09d      	b.n	8003c8a <UART_SetConfig+0x346>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e09a      	b.n	8003c8a <UART_SetConfig+0x346>
 8003b54:	2308      	movs	r3, #8
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e097      	b.n	8003c8a <UART_SetConfig+0x346>
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e094      	b.n	8003c8a <UART_SetConfig+0x346>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a30      	ldr	r2, [pc, #192]	; (8003c28 <UART_SetConfig+0x2e4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d125      	bne.n	8003bb6 <UART_SetConfig+0x272>
 8003b6a:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <UART_SetConfig+0x2d0>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b78:	d017      	beq.n	8003baa <UART_SetConfig+0x266>
 8003b7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b7e:	d817      	bhi.n	8003bb0 <UART_SetConfig+0x26c>
 8003b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b84:	d00b      	beq.n	8003b9e <UART_SetConfig+0x25a>
 8003b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8a:	d811      	bhi.n	8003bb0 <UART_SetConfig+0x26c>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <UART_SetConfig+0x254>
 8003b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b94:	d006      	beq.n	8003ba4 <UART_SetConfig+0x260>
 8003b96:	e00b      	b.n	8003bb0 <UART_SetConfig+0x26c>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	77fb      	strb	r3, [r7, #31]
 8003b9c:	e075      	b.n	8003c8a <UART_SetConfig+0x346>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	77fb      	strb	r3, [r7, #31]
 8003ba2:	e072      	b.n	8003c8a <UART_SetConfig+0x346>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e06f      	b.n	8003c8a <UART_SetConfig+0x346>
 8003baa:	2308      	movs	r3, #8
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e06c      	b.n	8003c8a <UART_SetConfig+0x346>
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e069      	b.n	8003c8a <UART_SetConfig+0x346>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <UART_SetConfig+0x2e8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d137      	bne.n	8003c30 <UART_SetConfig+0x2ec>
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <UART_SetConfig+0x2d0>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003bca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bce:	d017      	beq.n	8003c00 <UART_SetConfig+0x2bc>
 8003bd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bd4:	d817      	bhi.n	8003c06 <UART_SetConfig+0x2c2>
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bda:	d00b      	beq.n	8003bf4 <UART_SetConfig+0x2b0>
 8003bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be0:	d811      	bhi.n	8003c06 <UART_SetConfig+0x2c2>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <UART_SetConfig+0x2aa>
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d006      	beq.n	8003bfa <UART_SetConfig+0x2b6>
 8003bec:	e00b      	b.n	8003c06 <UART_SetConfig+0x2c2>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e04a      	b.n	8003c8a <UART_SetConfig+0x346>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e047      	b.n	8003c8a <UART_SetConfig+0x346>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e044      	b.n	8003c8a <UART_SetConfig+0x346>
 8003c00:	2308      	movs	r3, #8
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e041      	b.n	8003c8a <UART_SetConfig+0x346>
 8003c06:	2310      	movs	r3, #16
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e03e      	b.n	8003c8a <UART_SetConfig+0x346>
 8003c0c:	efff69f3 	.word	0xefff69f3
 8003c10:	40011000 	.word	0x40011000
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40004400 	.word	0x40004400
 8003c1c:	40004800 	.word	0x40004800
 8003c20:	40004c00 	.word	0x40004c00
 8003c24:	40005000 	.word	0x40005000
 8003c28:	40011400 	.word	0x40011400
 8003c2c:	40007800 	.word	0x40007800
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <UART_SetConfig+0x4b8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d125      	bne.n	8003c86 <UART_SetConfig+0x342>
 8003c3a:	4b71      	ldr	r3, [pc, #452]	; (8003e00 <UART_SetConfig+0x4bc>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c44:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c48:	d017      	beq.n	8003c7a <UART_SetConfig+0x336>
 8003c4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c4e:	d817      	bhi.n	8003c80 <UART_SetConfig+0x33c>
 8003c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c54:	d00b      	beq.n	8003c6e <UART_SetConfig+0x32a>
 8003c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c5a:	d811      	bhi.n	8003c80 <UART_SetConfig+0x33c>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <UART_SetConfig+0x324>
 8003c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c64:	d006      	beq.n	8003c74 <UART_SetConfig+0x330>
 8003c66:	e00b      	b.n	8003c80 <UART_SetConfig+0x33c>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e00d      	b.n	8003c8a <UART_SetConfig+0x346>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e00a      	b.n	8003c8a <UART_SetConfig+0x346>
 8003c74:	2304      	movs	r3, #4
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e007      	b.n	8003c8a <UART_SetConfig+0x346>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e004      	b.n	8003c8a <UART_SetConfig+0x346>
 8003c80:	2310      	movs	r3, #16
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e001      	b.n	8003c8a <UART_SetConfig+0x346>
 8003c86:	2310      	movs	r3, #16
 8003c88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c92:	d15b      	bne.n	8003d4c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003c94:	7ffb      	ldrb	r3, [r7, #31]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d827      	bhi.n	8003cea <UART_SetConfig+0x3a6>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x35c>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	08003cd5 	.word	0x08003cd5
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cdb 	.word	0x08003cdb
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003ceb 	.word	0x08003ceb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7ff fd2a 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8003cc8:	61b8      	str	r0, [r7, #24]
        break;
 8003cca:	e013      	b.n	8003cf4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7ff fd3a 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 8003cd0:	61b8      	str	r0, [r7, #24]
        break;
 8003cd2:	e00f      	b.n	8003cf4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b4b      	ldr	r3, [pc, #300]	; (8003e04 <UART_SetConfig+0x4c0>)
 8003cd6:	61bb      	str	r3, [r7, #24]
        break;
 8003cd8:	e00c      	b.n	8003cf4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7ff fc5d 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003cde:	61b8      	str	r0, [r7, #24]
        break;
 8003ce0:	e008      	b.n	8003cf4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	61bb      	str	r3, [r7, #24]
        break;
 8003ce8:	e004      	b.n	8003cf4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	77bb      	strb	r3, [r7, #30]
        break;
 8003cf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d074      	beq.n	8003de4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	005a      	lsls	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	441a      	add	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b0f      	cmp	r3, #15
 8003d16:	d916      	bls.n	8003d46 <UART_SetConfig+0x402>
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1e:	d212      	bcs.n	8003d46 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f023 030f 	bic.w	r3, r3, #15
 8003d28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	89fb      	ldrh	r3, [r7, #14]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	89fa      	ldrh	r2, [r7, #14]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	e04e      	b.n	8003de4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	77bb      	strb	r3, [r7, #30]
 8003d4a:	e04b      	b.n	8003de4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d4c:	7ffb      	ldrb	r3, [r7, #31]
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d827      	bhi.n	8003da2 <UART_SetConfig+0x45e>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <UART_SetConfig+0x414>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d7d 	.word	0x08003d7d
 8003d5c:	08003d85 	.word	0x08003d85
 8003d60:	08003d8d 	.word	0x08003d8d
 8003d64:	08003da3 	.word	0x08003da3
 8003d68:	08003d93 	.word	0x08003d93
 8003d6c:	08003da3 	.word	0x08003da3
 8003d70:	08003da3 	.word	0x08003da3
 8003d74:	08003da3 	.word	0x08003da3
 8003d78:	08003d9b 	.word	0x08003d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d7c:	f7ff fcce 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8003d80:	61b8      	str	r0, [r7, #24]
        break;
 8003d82:	e013      	b.n	8003dac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d84:	f7ff fcde 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 8003d88:	61b8      	str	r0, [r7, #24]
        break;
 8003d8a:	e00f      	b.n	8003dac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <UART_SetConfig+0x4c0>)
 8003d8e:	61bb      	str	r3, [r7, #24]
        break;
 8003d90:	e00c      	b.n	8003dac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d92:	f7ff fc01 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003d96:	61b8      	str	r0, [r7, #24]
        break;
 8003d98:	e008      	b.n	8003dac <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d9e:	61bb      	str	r3, [r7, #24]
        break;
 8003da0:	e004      	b.n	8003dac <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	77bb      	strb	r3, [r7, #30]
        break;
 8003daa:	bf00      	nop
    }

    if (pclk != 0U)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d018      	beq.n	8003de4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	085a      	lsrs	r2, r3, #1
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	441a      	add	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b0f      	cmp	r3, #15
 8003dcc:	d908      	bls.n	8003de0 <UART_SetConfig+0x49c>
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd4:	d204      	bcs.n	8003de0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	e001      	b.n	8003de4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003df0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40007c00 	.word	0x40007c00
 8003e00:	40023800 	.word	0x40023800
 8003e04:	00f42400 	.word	0x00f42400

08003e08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d10a      	bne.n	8003f1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f5c:	f7fc ff32 	bl	8000dc4 <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d10e      	bne.n	8003f8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f82d 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e023      	b.n	8003fd6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d10e      	bne.n	8003fba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f817 	bl	8003fde <UART_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00d      	b.n	8003fd6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fee:	e05e      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff6:	d05a      	beq.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff8:	f7fc fee4 	bl	8000dc4 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d302      	bcc.n	800400e <UART_WaitOnFlagUntilTimeout+0x30>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d11b      	bne.n	8004046 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800401c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e043      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02c      	beq.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d124      	bne.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800406c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800407c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e00f      	b.n	80040ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	bf0c      	ite	eq
 80040be:	2301      	moveq	r3, #1
 80040c0:	2300      	movne	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d091      	beq.n	8003ff0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <lwip_lib_init>:
uint8_t GATEWAY_ADDRESS[4];



void lwip_lib_init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af04      	add	r7, sp, #16

	 ipaddr.addr = 0;
 80040de:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <lwip_lib_init+0x70>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
	 netmask.addr = 0;
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <lwip_lib_init+0x74>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
	 gw.addr = 0;
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <lwip_lib_init+0x78>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

	 /*Initialize lwip stack  without RTOS*/
	 lwip_init();
 80040f0:	f002 f8ab 	bl	800624a <lwip_init>
	 /*Add network interface without using RTOS*/
	 netif_add(&gnetif,&ipaddr,&netmask,&gw,NULL,&ethernetif_init,&ethernet_input);
 80040f4:	4b17      	ldr	r3, [pc, #92]	; (8004154 <lwip_lib_init+0x7c>)
 80040f6:	9302      	str	r3, [sp, #8]
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <lwip_lib_init+0x80>)
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4b13      	ldr	r3, [pc, #76]	; (8004150 <lwip_lib_init+0x78>)
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <lwip_lib_init+0x74>)
 8004104:	4910      	ldr	r1, [pc, #64]	; (8004148 <lwip_lib_init+0x70>)
 8004106:	4815      	ldr	r0, [pc, #84]	; (800415c <lwip_lib_init+0x84>)
 8004108:	f002 fdb4 	bl	8006c74 <netif_add>

	 /*Register default netif */
	 netif_set_default(&gnetif);
 800410c:	4813      	ldr	r0, [pc, #76]	; (800415c <lwip_lib_init+0x84>)
 800410e:	f002 ff6b 	bl	8006fe8 <netif_set_default>

	 /*Check if link is up*/
	 if(netif_is_link_up(&gnetif))
 8004112:	4b12      	ldr	r3, [pc, #72]	; (800415c <lwip_lib_init+0x84>)
 8004114:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <lwip_lib_init+0x54>
	 {
		 netif_set_up(&gnetif);
 8004124:	480d      	ldr	r0, [pc, #52]	; (800415c <lwip_lib_init+0x84>)
 8004126:	f002 ff6f 	bl	8007008 <netif_set_up>
 800412a:	e002      	b.n	8004132 <lwip_lib_init+0x5a>
	 }
	 else
	 {
		 netif_set_down(&gnetif);
 800412c:	480b      	ldr	r0, [pc, #44]	; (800415c <lwip_lib_init+0x84>)
 800412e:	f002 ffd7 	bl	80070e0 <netif_set_down>
	 }


	 /*Set link change callback*/
	 netif_set_link_callback(&gnetif,ethernetif_update_config);
 8004132:	490b      	ldr	r1, [pc, #44]	; (8004160 <lwip_lib_init+0x88>)
 8004134:	4809      	ldr	r0, [pc, #36]	; (800415c <lwip_lib_init+0x84>)
 8004136:	f003 f805 	bl	8007144 <netif_set_link_callback>

	 /*Enable DHCP*/
	 dhcp_start(&gnetif);
 800413a:	4808      	ldr	r0, [pc, #32]	; (800415c <lwip_lib_init+0x84>)
 800413c:	f00b f95a 	bl	800f3f4 <dhcp_start>

}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000810 	.word	0x20000810
 800414c:	2000081c 	.word	0x2000081c
 8004150:	20000820 	.word	0x20000820
 8004154:	080132c5 	.word	0x080132c5
 8004158:	08004775 	.word	0x08004775
 800415c:	200007d8 	.word	0x200007d8
 8004160:	080047b1 	.word	0x080047b1

08004164 <lwip_process>:



void lwip_process(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
	ethernetif_input(&gnetif);
 8004168:	4803      	ldr	r0, [pc, #12]	; (8004178 <lwip_process+0x14>)
 800416a:	f000 fadb 	bl	8004724 <ethernetif_input>
	sys_check_timeouts();
 800416e:	f00a f83d 	bl	800e1ec <sys_check_timeouts>
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	200007d8 	.word	0x200007d8

0800417c <HAL_ETH_MspInit>:

		void);


void HAL_ETH_MspInit( ETH_HandleTypeDef * ethHandle )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08e      	sub	sp, #56	; 0x38
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	60da      	str	r2, [r3, #12]
 8004192:	611a      	str	r2, [r3, #16]

	if(ethHandle->Instance ==  ETH)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a4e      	ldr	r2, [pc, #312]	; (80042d4 <HAL_ETH_MspInit+0x158>)
 800419a:	4293      	cmp	r3, r2
 800419c:	f040 8096 	bne.w	80042cc <HAL_ETH_MspInit+0x150>
		PB13     ------> ETH_TXD1
		PG11     ------> ETH_TX_EN
		PG13     ------> ETH_TXD0
		*/

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80041a0:	4b4d      	ldr	r3, [pc, #308]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	4a4c      	ldr	r2, [pc, #304]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041a6:	f043 0304 	orr.w	r3, r3, #4
 80041aa:	6313      	str	r3, [r2, #48]	; 0x30
 80041ac:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	623b      	str	r3, [r7, #32]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	4a46      	ldr	r2, [pc, #280]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6313      	str	r3, [r2, #48]	; 0x30
 80041c4:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80041d0:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	4a40      	ldr	r2, [pc, #256]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041d6:	f043 0302 	orr.w	r3, r3, #2
 80041da:	6313      	str	r3, [r2, #48]	; 0x30
 80041dc:	4b3e      	ldr	r3, [pc, #248]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f2:	6313      	str	r3, [r2, #48]	; 0x30
 80041f4:	4b38      	ldr	r3, [pc, #224]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_ETH_CLK_ENABLE();
 8004200:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	4a34      	ldr	r2, [pc, #208]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 8004206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800420a:	6313      	str	r3, [r2, #48]	; 0x30
 800420c:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	4a2e      	ldr	r2, [pc, #184]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 800421e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004222:	6313      	str	r3, [r2, #48]	; 0x30
 8004224:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4b29      	ldr	r3, [pc, #164]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	4a28      	ldr	r2, [pc, #160]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 8004236:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800423a:	6313      	str	r3, [r2, #48]	; 0x30
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_ETH_MspInit+0x15c>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]


		GPIO_InitStruct.Pin   = GPIO_PIN_1 |GPIO_PIN_4|GPIO_PIN_5;
 8004248:	2332      	movs	r3, #50	; 0x32
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 800424c:	2302      	movs	r3, #2
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004250:	2303      	movs	r3, #3
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004254:	230b      	movs	r3, #11
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425c:	4619      	mov	r1, r3
 800425e:	481f      	ldr	r0, [pc, #124]	; (80042dc <HAL_ETH_MspInit+0x160>)
 8004260:	f7fe fbea 	bl	8002a38 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin   = GPIO_PIN_1 |GPIO_PIN_2|GPIO_PIN_7;
 8004264:	2386      	movs	r3, #134	; 0x86
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8004268:	2302      	movs	r3, #2
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426c:	2303      	movs	r3, #3
 800426e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004270:	230b      	movs	r3, #11
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004278:	4619      	mov	r1, r3
 800427a:	4819      	ldr	r0, [pc, #100]	; (80042e0 <HAL_ETH_MspInit+0x164>)
 800427c:	f7fe fbdc 	bl	8002a38 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin   = GPIO_PIN_13;
 8004280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800428a:	2303      	movs	r3, #3
 800428c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800428e:	230b      	movs	r3, #11
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004296:	4619      	mov	r1, r3
 8004298:	4812      	ldr	r0, [pc, #72]	; (80042e4 <HAL_ETH_MspInit+0x168>)
 800429a:	f7fe fbcd 	bl	8002a38 <HAL_GPIO_Init>


		GPIO_InitStruct.Pin   = GPIO_PIN_11 |GPIO_PIN_13;
 800429e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80042a4:	2302      	movs	r3, #2
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a8:	2303      	movs	r3, #3
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80042ac:	230b      	movs	r3, #11
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b4:	4619      	mov	r1, r3
 80042b6:	480c      	ldr	r0, [pc, #48]	; (80042e8 <HAL_ETH_MspInit+0x16c>)
 80042b8:	f7fe fbbe 	bl	8002a38 <HAL_GPIO_Init>

		/*Set ETH interrupt priority*/

		HAL_NVIC_SetPriority(ETH_IRQn,0,0);
 80042bc:	2200      	movs	r2, #0
 80042be:	2100      	movs	r1, #0
 80042c0:	203d      	movs	r0, #61	; 0x3d
 80042c2:	f7fd f9f8 	bl	80016b6 <HAL_NVIC_SetPriority>

		/*Enable ETH interrupt*/
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 80042c6:	203d      	movs	r0, #61	; 0x3d
 80042c8:	f7fd fa11 	bl	80016ee <HAL_NVIC_EnableIRQ>

	}

}
 80042cc:	bf00      	nop
 80042ce:	3738      	adds	r7, #56	; 0x38
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40028000 	.word	0x40028000
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40020800 	.word	0x40020800
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40020400 	.word	0x40020400
 80042e8:	40021800 	.word	0x40021800

080042ec <low_level_init>:



static void low_level_init(struct netif *netif)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]

  HAL_StatusTypeDef 	hal_eth_init_status;

  uint8_t MACAddr[6];

  heth.Instance = ETH;
 80042f8:	4b4d      	ldr	r3, [pc, #308]	; (8004430 <low_level_init+0x144>)
 80042fa:	4a4e      	ldr	r2, [pc, #312]	; (8004434 <low_level_init+0x148>)
 80042fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation =  ETH_AUTONEGOTIATION_ENABLE;
 80042fe:	4b4c      	ldr	r3, [pc, #304]	; (8004430 <low_level_init+0x144>)
 8004300:	2201      	movs	r2, #1
 8004302:	605a      	str	r2, [r3, #4]
  heth.Init.Speed =  ETH_SPEED_100M;
 8004304:	4b4a      	ldr	r3, [pc, #296]	; (8004430 <low_level_init+0x144>)
 8004306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800430a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode =  ETH_MODE_FULLDUPLEX;
 800430c:	4b48      	ldr	r3, [pc, #288]	; (8004430 <low_level_init+0x144>)
 800430e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004312:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004314:	4b46      	ldr	r3, [pc, #280]	; (8004430 <low_level_init+0x144>)
 8004316:	2200      	movs	r2, #0
 8004318:	821a      	strh	r2, [r3, #16]

  MACAddr[0] = 0x00;
 800431a:	2300      	movs	r3, #0
 800431c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xAB;
 800431e:	23ab      	movs	r3, #171	; 0xab
 8004320:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xCD;
 8004322:	23cd      	movs	r3, #205	; 0xcd
 8004324:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004326:	2300      	movs	r3, #0
 8004328:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800432a:	2300      	movs	r3, #0
 800432c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800432e:	2300      	movs	r3, #0
 8004330:	737b      	strb	r3, [r7, #13]

  heth.Init.MACAddr = &MACAddr[0];
 8004332:	4a3f      	ldr	r2, [pc, #252]	; (8004430 <low_level_init+0x144>)
 8004334:	f107 0308 	add.w	r3, r7, #8
 8004338:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode  =  ETH_RXPOLLING_MODE;
 800433a:	4b3d      	ldr	r3, [pc, #244]	; (8004430 <low_level_init+0x144>)
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]

  heth.Init.ChecksumMode =  ETH_CHECKSUM_BY_HARDWARE;
 8004340:	4b3b      	ldr	r3, [pc, #236]	; (8004430 <low_level_init+0x144>)
 8004342:	2200      	movs	r2, #0
 8004344:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface =  ETH_MEDIA_INTERFACE_RMII;
 8004346:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <low_level_init+0x144>)
 8004348:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800434c:	621a      	str	r2, [r3, #32]

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800434e:	4838      	ldr	r0, [pc, #224]	; (8004430 <low_level_init+0x144>)
 8004350:	f7fd f9e8 	bl	8001724 <HAL_ETH_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]

  if(hal_eth_init_status ==  HAL_OK)
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d108      	bne.n	8004370 <low_level_init+0x84>
  {
	  netif->flags |= NETIF_FLAG_LINK_UP;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	b2da      	uxtb	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0],ETH_TXBUFNB);
 8004370:	2305      	movs	r3, #5
 8004372:	4a31      	ldr	r2, [pc, #196]	; (8004438 <low_level_init+0x14c>)
 8004374:	4931      	ldr	r1, [pc, #196]	; (800443c <low_level_init+0x150>)
 8004376:	482e      	ldr	r0, [pc, #184]	; (8004430 <low_level_init+0x144>)
 8004378:	f7fd fb6e 	bl	8001a58 <HAL_ETH_DMATxDescListInit>

  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0],ETH_RXBUFNB);
 800437c:	2305      	movs	r3, #5
 800437e:	4a30      	ldr	r2, [pc, #192]	; (8004440 <low_level_init+0x154>)
 8004380:	4930      	ldr	r1, [pc, #192]	; (8004444 <low_level_init+0x158>)
 8004382:	482b      	ldr	r0, [pc, #172]	; (8004430 <low_level_init+0x144>)
 8004384:	f7fd fbd1 	bl	8001b2a <HAL_ETH_DMARxDescListInit>

  /*set MAC address len*/
  netif->hwaddr_len =  ETH_HWADDR_LEN;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2206      	movs	r2, #6
 800438c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  netif->hwaddr[0] = heth.Init.MACAddr[0];
 8004390:	4b27      	ldr	r3, [pc, #156]	; (8004430 <low_level_init+0x144>)
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] = heth.Init.MACAddr[1];
 800439c:	4b24      	ldr	r3, [pc, #144]	; (8004430 <low_level_init+0x144>)
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	785a      	ldrb	r2, [r3, #1]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] = heth.Init.MACAddr[2];
 80043a8:	4b21      	ldr	r3, [pc, #132]	; (8004430 <low_level_init+0x144>)
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	789a      	ldrb	r2, [r3, #2]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] = heth.Init.MACAddr[3];
 80043b4:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <low_level_init+0x144>)
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	78da      	ldrb	r2, [r3, #3]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] = heth.Init.MACAddr[4];
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <low_level_init+0x144>)
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	791a      	ldrb	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] = heth.Init.MACAddr[5];
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <low_level_init+0x144>)
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	795a      	ldrb	r2, [r3, #5]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f


   /*Set MTU : Maximum transfer unit*/
  netif->mtu = 1500;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28

  /*Enable broadcasting and ARP*/
  netif->flags  |= NETIF_FLAG_BROADCAST |NETIF_FLAG_ETHARP;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043e6:	f043 030a 	orr.w	r3, r3, #10
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /*Start MAC and DMA transmission and reception*/

  HAL_ETH_Start(&heth);
 80043f2:	480f      	ldr	r0, [pc, #60]	; (8004430 <low_level_init+0x144>)
 80043f4:	f7fd fec7 	bl	8002186 <HAL_ETH_Start>


  /*Enable link down interupt*/
  HAL_ETH_ReadPHYRegister(&heth,PHY_ISFR,&regvalue);
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	461a      	mov	r2, r3
 80043fe:	211d      	movs	r1, #29
 8004400:	480b      	ldr	r0, [pc, #44]	; (8004430 <low_level_init+0x144>)
 8004402:	f7fd fdf2 	bl	8001fea <HAL_ETH_ReadPHYRegister>
  regvalue |= PHY_ISFR_INT4;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f043 030b 	orr.w	r3, r3, #11
 800440c:	613b      	str	r3, [r7, #16]

  HAL_ETH_WritePHYRegister(&heth,PHY_ISFR,regvalue);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	461a      	mov	r2, r3
 8004412:	211d      	movs	r1, #29
 8004414:	4806      	ldr	r0, [pc, #24]	; (8004430 <low_level_init+0x144>)
 8004416:	f7fd fe50 	bl	80020ba <HAL_ETH_WritePHYRegister>

  HAL_ETH_ReadPHYRegister(&heth,PHY_ISFR,&regvalue);
 800441a:	f107 0310 	add.w	r3, r7, #16
 800441e:	461a      	mov	r2, r3
 8004420:	211d      	movs	r1, #29
 8004422:	4803      	ldr	r0, [pc, #12]	; (8004430 <low_level_init+0x144>)
 8004424:	f7fd fde1 	bl	8001fea <HAL_ETH_ReadPHYRegister>



}
 8004428:	bf00      	nop
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20002728 	.word	0x20002728
 8004434:	40028000 	.word	0x40028000
 8004438:	20002770 	.word	0x20002770
 800443c:	20000824 	.word	0x20000824
 8004440:	200008c4 	.word	0x200008c4
 8004444:	20002688 	.word	0x20002688

08004448 <low_level_output>:


static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
	err_t errval;
	struct pbuf *q;
	__IO ETH_DMADescTypeDef	*DmaTxDesc;
	uint8_t *buffer =  (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004452:	4b4a      	ldr	r3, [pc, #296]	; (800457c <low_level_output+0x134>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	61fb      	str	r3, [r7, #28]
	DmaTxDesc  = heth.TxDesc;
 800445a:	4b48      	ldr	r3, [pc, #288]	; (800457c <low_level_output+0x134>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	623b      	str	r3, [r7, #32]

	uint32_t framelength = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
	uint32_t bufferoffset = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
	uint32_t byteslefttocopy = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
	uint32_t payloadoffset = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]


	/*Copy frames from pbufs ro ETH buff*/

	for(q = p; q != NULL; q =  q->next )
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
 8004474:	e05a      	b.n	800452c <low_level_output+0xe4>
	{
		/*Check if buffer is available*/
		if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) !=  (uint32_t)RESET)
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da03      	bge.n	8004486 <low_level_output+0x3e>
		{
			errval =  ERR_USE;
 800447e:	23f8      	movs	r3, #248	; 0xf8
 8004480:	72fb      	strb	r3, [r7, #11]
			process_error();
 8004482:	f000 f87d 	bl	8004580 <process_error>
		}

	    byteslefttocopy = q->len;
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	895b      	ldrh	r3, [r3, #10]
 800448a:	613b      	str	r3, [r7, #16]
	    payloadoffset = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]

	    /*Copy and update size variables when data length is larger than TX BUFF Size*/
	    while((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 8004490:	e02f      	b.n	80044f2 <low_level_output+0xaa>
	    {
	    	/*Copy data to TX buffer*/
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	18d0      	adds	r0, r2, r3
	    			(uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	685a      	ldr	r2, [r3, #4]
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	18d1      	adds	r1, r2, r3
					(ETH_TX_BUF_SIZE - bufferoffset));
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80044a6:	1a9b      	subs	r3, r3, r2
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 80044a8:	461a      	mov	r2, r3
 80044aa:	f00f f83f 	bl	801352c <memcpy>

	    	/*Point to the next descriptor*/
	    	DmaTxDesc  =  (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	623b      	str	r3, [r7, #32]

			/*Check if buffer is available*/
			if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) !=  (uint32_t)RESET)
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	da03      	bge.n	80044c4 <low_level_output+0x7c>
			{
				errval =  ERR_USE;
 80044bc:	23f8      	movs	r3, #248	; 0xf8
 80044be:	72fb      	strb	r3, [r7, #11]
				process_error();
 80044c0:	f000 f85e 	bl	8004580 <process_error>
			}

			buffer  =  (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	61fb      	str	r3, [r7, #28]

			byteslefttocopy  = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset );
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80044d4:	613b      	str	r3, [r7, #16]
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset );
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80044e0:	60fb      	str	r3, [r7, #12]
			framelength =  framelength + (ETH_TX_BUF_SIZE - bufferoffset );
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80044ec:	61bb      	str	r3, [r7, #24]

			bufferoffset = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
	    while((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d8c8      	bhi.n	8004492 <low_level_output+0x4a>
	    }

	    /*Copy the rest of bytes*/
	    memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	18d0      	adds	r0, r2, r3
    			(uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	685a      	ldr	r2, [r3, #4]
	    memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4619      	mov	r1, r3
 8004512:	f00f f80b 	bl	801352c <memcpy>
				byteslefttocopy);

    	bufferoffset  =  bufferoffset + byteslefttocopy;
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    	framelength   =  framelength + byteslefttocopy;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
	for(q = p; q != NULL; q =  q->next )
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1a1      	bne.n	8004476 <low_level_output+0x2e>


	}

	/*Prep TX descriptors to give to DMA*/
	HAL_ETH_TransmitFrame(&heth,framelength);
 8004532:	69b9      	ldr	r1, [r7, #24]
 8004534:	4811      	ldr	r0, [pc, #68]	; (800457c <low_level_output+0x134>)
 8004536:	f7fd fb65 	bl	8001c04 <HAL_ETH_TransmitFrame>

	errval = ERR_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	72fb      	strb	r3, [r7, #11]

	/*Check if Transmit Underflow Status (TUS) is set*/
	if((heth.Instance->DMASR & ETH_DMASR_TUS) !=  (uint32_t)RESET)
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <low_level_output+0x134>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	f241 0314 	movw	r3, #4116	; 0x1014
 8004546:	4413      	add	r3, r2
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00d      	beq.n	800456e <low_level_output+0x126>
	{
		 /*Clear  Transmit Underflow Status (TUS)*/
		heth.Instance->DMASR =  ETH_DMASR_TUS;
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <low_level_output+0x134>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	f241 0314 	movw	r3, #4116	; 0x1014
 800455a:	4413      	add	r3, r2
 800455c:	2220      	movs	r2, #32
 800455e:	601a      	str	r2, [r3, #0]

		/*Resume DMA Transmission*/
		heth.Instance->DMATPDR = 0;
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <low_level_output+0x134>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	f241 0304 	movw	r3, #4100	; 0x1004
 8004568:	4413      	add	r3, r2
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
	}


	return errval;
 800456e:	f997 300b 	ldrsb.w	r3, [r7, #11]


}
 8004572:	4618      	mov	r0, r3
 8004574:	3728      	adds	r7, #40	; 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20002728 	.word	0x20002728

08004580 <process_error>:



static void process_error(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0

	/*Check if Transmit Underflow Status (TUS) is set*/
	if((heth.Instance->DMASR & ETH_DMASR_TUS) !=  (uint32_t)RESET)
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <process_error+0x40>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	f241 0314 	movw	r3, #4116	; 0x1014
 800458c:	4413      	add	r3, r2
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <process_error+0x34>
	{
		 /*Clear  Transmit Underflow Status (TUS)*/
		heth.Instance->DMASR =  ETH_DMASR_TUS;
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <process_error+0x40>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	f241 0314 	movw	r3, #4116	; 0x1014
 80045a0:	4413      	add	r3, r2
 80045a2:	2220      	movs	r2, #32
 80045a4:	601a      	str	r2, [r3, #0]

		/*Resume DMA Transmission*/
		heth.Instance->DMATPDR = 0;
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <process_error+0x40>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f241 0304 	movw	r3, #4100	; 0x1004
 80045ae:	4413      	add	r3, r2
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
	}
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20002728 	.word	0x20002728

080045c4 <low_level_input>:



static struct pbuf * low_level_input(struct netif * netif)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08c      	sub	sp, #48	; 0x30
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	__IO ETH_DMADescTypeDef  *dmarxdesc;
	uint8_t * buffer;
	struct pbuf *p = NULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
	struct pbuf *q = NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	623b      	str	r3, [r7, #32]
	uint16_t len   = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	81fb      	strh	r3, [r7, #14]

	uint32_t bufferoffset    =  0;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
	uint32_t payloadoffset   =  0;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
	uint32_t byteslefttocopy = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]


	/*Get received frame*/
	if(HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80045e4:	484e      	ldr	r0, [pc, #312]	; (8004720 <low_level_input+0x15c>)
 80045e6:	f7fd fbf7 	bl	8001dd8 <HAL_ETH_GetReceivedFrame>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <low_level_input+0x30>
	{
		return NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e090      	b.n	8004716 <low_level_input+0x152>
	}


	/*Get size of packet*/
	len =  heth.RxFrameInfos.length;
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <low_level_input+0x15c>)
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	81fb      	strh	r3, [r7, #14]

	buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80045fa:	4b49      	ldr	r3, [pc, #292]	; (8004720 <low_level_input+0x15c>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28

	if( len > 0)
 8004600:	89fb      	ldrh	r3, [r7, #14]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <low_level_input+0x52>
	{
		/*Allocate pbuf from lwip buffer pool*/
		p  = pbuf_alloc(PBUF_RAW,len,PBUF_POOL);
 8004606:	89fb      	ldrh	r3, [r7, #14]
 8004608:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800460c:	4619      	mov	r1, r3
 800460e:	2000      	movs	r0, #0
 8004610:	f002 fe34 	bl	800727c <pbuf_alloc>
 8004614:	6278      	str	r0, [r7, #36]	; 0x24

	}
		if( p != NULL)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d049      	beq.n	80046b0 <low_level_input+0xec>
		{
			dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800461c:	4b40      	ldr	r3, [pc, #256]	; (8004720 <low_level_input+0x15c>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
			bufferoffset =  0;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]

			for( q = p; q != NULL; q = q->next)
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	623b      	str	r3, [r7, #32]
 800462a:	e03e      	b.n	80046aa <low_level_input+0xe6>
			{
				byteslefttocopy =  q->len;
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	895b      	ldrh	r3, [r3, #10]
 8004630:	617b      	str	r3, [r7, #20]
				payloadoffset = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]

			    /*Copy and update size variables when data length is larger than RX BUFF Size*/


				while( (byteslefttocopy + bufferoffset) >  ETH_RX_BUF_SIZE)
 8004636:	e01f      	b.n	8004678 <low_level_input+0xb4>
				{

					/*Copy data to pbuf*/

					memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	18d0      	adds	r0, r2, r3
							((uint8_t *)((uint8_t *)buffer +  bufferoffset)),
 8004640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	18d1      	adds	r1, r2, r3
							(ETH_RX_BUF_SIZE -  bufferoffset));
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800464c:	1a9b      	subs	r3, r3, r2
					memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 800464e:	461a      	mov	r2, r3
 8004650:	f00e ff6c 	bl	801352c <memcpy>

					/*Poin to the next descriptor*/
					dmarxdesc =  (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c

					buffer = (uint8_t *) dmarxdesc->Buffer1Addr;
 800465a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28

					byteslefttocopy =  byteslefttocopy - (ETH_RX_BUF_SIZE -  bufferoffset);
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800466a:	617b      	str	r3, [r7, #20]

					payloadoffset =  payloadoffset + (ETH_RX_BUF_SIZE -  bufferoffset);
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004676:	61bb      	str	r3, [r7, #24]
				while( (byteslefttocopy + bufferoffset) >  ETH_RX_BUF_SIZE)
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004682:	4293      	cmp	r3, r2
 8004684:	d8d8      	bhi.n	8004638 <low_level_input+0x74>

				}

				/*Copy remaining dat in pbuf*/

				memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	18d0      	adds	r0, r2, r3
						((uint8_t *)((uint8_t *)buffer +  bufferoffset)),
 800468e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	4413      	add	r3, r2
				memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4619      	mov	r1, r3
 8004698:	f00e ff48 	bl	801352c <memcpy>
						byteslefttocopy);


				bufferoffset  = bufferoffset + byteslefttocopy;
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	4413      	add	r3, r2
 80046a2:	61fb      	str	r3, [r7, #28]
			for( q = p; q != NULL; q = q->next)
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	623b      	str	r3, [r7, #32]
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1bd      	bne.n	800462c <low_level_input+0x68>



		/*Point to first descriptor*/

		dmarxdesc =  heth.RxFrameInfos.FSRxDesc;
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <low_level_input+0x15c>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/*Set OWN bit in RX descriptors*/
		for(int i = 0; i<heth.RxFrameInfos.SegCount; i++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e00b      	b.n	80046d4 <low_level_input+0x110>
		{
			dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	601a      	str	r2, [r3, #0]
			dmarxdesc =  (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80046c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i = 0; i<heth.RxFrameInfos.SegCount; i++)
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3301      	adds	r3, #1
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <low_level_input+0x15c>)
 80046d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d8ee      	bhi.n	80046bc <low_level_input+0xf8>
		}

		/*Clear Segment Count*/

		heth.RxFrameInfos.SegCount =  0;
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <low_level_input+0x15c>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38

		/*Check if RX Buffer unavailable flag is set,
		 * if so, clear and resume reception*/

		if((heth.Instance->DMASR & ETH_DMASR_RBUS) !=  (uint32_t)RESET)
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <low_level_input+0x15c>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80046ec:	4413      	add	r3, r2
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <low_level_input+0x150>
		{
			/*Clear the RBUS flag*/
			heth.Instance->DMASR  = ETH_DMASR_RBUS;
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <low_level_input+0x15c>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8004700:	4413      	add	r3, r2
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	601a      	str	r2, [r3, #0]

			/*Resume reception*/
			heth.Instance->DMARPDR = 0;
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <low_level_input+0x15c>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	f241 0308 	movw	r3, #4104	; 0x1008
 800470e:	4413      	add	r3, r2
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
		}

	return p;
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004716:	4618      	mov	r0, r3
 8004718:	3730      	adds	r7, #48	; 0x30
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20002728 	.word	0x20002728

08004724 <ethernetif_input>:



void ethernetif_input(struct netif * netif)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	err_t err;
	struct pbuf *p;

	/*Move received pcket into new pbuf*/
	p = low_level_input(netif);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff49 	bl	80045c4 <low_level_input>
 8004732:	60f8      	str	r0, [r7, #12]

	if( p == NULL)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d010      	beq.n	800475c <ethernetif_input+0x38>

	{
		return;
	}
	/*Entry point into LWIP stack*/
	err = netif->input(p,netif);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	4798      	blx	r3
 8004744:	4603      	mov	r3, r0
 8004746:	72fb      	strb	r3, [r7, #11]

	if(err != ERR_OK)
 8004748:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <ethernetif_input+0x3a>
	{
		pbuf_free(p);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f003 f833 	bl	80077bc <pbuf_free>

		p =NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	e000      	b.n	800475e <ethernetif_input+0x3a>
		return;
 800475c:	bf00      	nop
	}
}
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <sys_now>:


u32_t sys_now(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8004768:	f7fc fb2c 	bl	8000dc4 <HAL_GetTick>
 800476c:	4603      	mov	r3, r0
}
 800476e:	4618      	mov	r0, r3
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <ethernetif_init>:



err_t ethernetif_init(struct netif * netif)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	/*Set netif name*/
	netif->name[0] =  IFNAME0;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2245      	movs	r2, #69	; 0x45
 8004780:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	netif->name[1] =  IFNAME1;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2258      	movs	r2, #88	; 0x58
 8004788:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	/*Set netif output function*/
	netif->output = etharp_output;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a06      	ldr	r2, [pc, #24]	; (80047a8 <ethernetif_init+0x34>)
 8004790:	615a      	str	r2, [r3, #20]

	/*Set netif link output function*/
	netif->linkoutput =  low_level_output;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a05      	ldr	r2, [pc, #20]	; (80047ac <ethernetif_init+0x38>)
 8004796:	619a      	str	r2, [r3, #24]

	/*Init hardware*/
	low_level_init(netif);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fda7 	bl	80042ec <low_level_init>

	return ERR_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	08011281 	.word	0x08011281
 80047ac:	08004449 	.word	0x08004449

080047b0 <ethernetif_update_config>:



void ethernetif_update_config(struct netif *netif)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	 __IO uint32_t tickstart = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
	 uint32_t regvalue = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	60bb      	str	r3, [r7, #8]

	 /*Check if link is up*/
	  if(netif_is_link_up(netif))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d062      	beq.n	8004898 <ethernetif_update_config+0xe8>
	  {
		 /*Check if auto-negotiation is enabled*/
		  if(heth.Init.AutoNegotiation  != ETH_AUTONEGOTIATION_DISABLE)
 80047d2:	4b36      	ldr	r3, [pc, #216]	; (80048ac <ethernetif_update_config+0xfc>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d047      	beq.n	800486a <ethernetif_update_config+0xba>
		  {
			/*Enable Auto-negotiation*/
			  HAL_ETH_WritePHYRegister(&heth,PHY_BCR, PHY_AUTONEGOTIATION);
 80047da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047de:	2100      	movs	r1, #0
 80047e0:	4832      	ldr	r0, [pc, #200]	; (80048ac <ethernetif_update_config+0xfc>)
 80047e2:	f7fd fc6a 	bl	80020ba <HAL_ETH_WritePHYRegister>

			  /*Get current tick value*/
			  tickstart =  HAL_GetTick();
 80047e6:	f7fc faed 	bl	8000dc4 <HAL_GetTick>
 80047ea:	4603      	mov	r3, r0
 80047ec:	60fb      	str	r3, [r7, #12]

			  /*Wait for auto-negotiation to complete*/
			  do
			  {
				HAL_ETH_ReadPHYRegister(&heth,PHY_BSR,&regvalue);
 80047ee:	f107 0308 	add.w	r3, r7, #8
 80047f2:	461a      	mov	r2, r3
 80047f4:	2101      	movs	r1, #1
 80047f6:	482d      	ldr	r0, [pc, #180]	; (80048ac <ethernetif_update_config+0xfc>)
 80047f8:	f7fd fbf7 	bl	8001fea <HAL_ETH_ReadPHYRegister>

				if((HAL_GetTick() - tickstart) > 1000 )
 80047fc:	f7fc fae2 	bl	8000dc4 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800480a:	d90e      	bls.n	800482a <ethernetif_update_config+0x7a>
				{
					/*Set MAC speed and Duplex Mode to PHY*/
					HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 800480c:	4b27      	ldr	r3, [pc, #156]	; (80048ac <ethernetif_update_config+0xfc>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	08db      	lsrs	r3, r3, #3
 8004812:	b29a      	uxth	r2, r3
																(uint16_t)(heth.Init.Speed>>1));
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <ethernetif_update_config+0xfc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	b29b      	uxth	r3, r3
					HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 800481c:	4313      	orrs	r3, r2
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	2100      	movs	r1, #0
 8004824:	4821      	ldr	r0, [pc, #132]	; (80048ac <ethernetif_update_config+0xfc>)
 8004826:	f7fd fc48 	bl	80020ba <HAL_ETH_WritePHYRegister>
				}

			  }while((regvalue & PHY_AUTONEGO_COMPLETE) !=  PHY_AUTONEGO_COMPLETE);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0dc      	beq.n	80047ee <ethernetif_update_config+0x3e>

			  /*Read the results of the auto-negotiation*/

			  if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d004      	beq.n	8004848 <ethernetif_update_config+0x98>
			  {
				  /*Set ETH duplex to full-duplex*/
				  heth.Init.DuplexMode =  ETH_MODE_FULLDUPLEX;
 800483e:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <ethernetif_update_config+0xfc>)
 8004840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	e002      	b.n	800484e <ethernetif_update_config+0x9e>
			  }
			  else
			  {
				  /*Set ETH duplex to half-duplex*/
				  heth.Init.DuplexMode =  ETH_MODE_HALFDUPLEX;
 8004848:	4b18      	ldr	r3, [pc, #96]	; (80048ac <ethernetif_update_config+0xfc>)
 800484a:	2200      	movs	r2, #0
 800484c:	60da      	str	r2, [r3, #12]
			  }

			  if(regvalue & PHY_SPEED_STATUS)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <ethernetif_update_config+0xb0>
			  {
				  /*Set ETH speed 10M*/
				  heth.Init.Speed  =  ETH_SPEED_10M;
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <ethernetif_update_config+0xfc>)
 800485a:	2200      	movs	r2, #0
 800485c:	609a      	str	r2, [r3, #8]
 800485e:	e013      	b.n	8004888 <ethernetif_update_config+0xd8>
			  }
			  else
			  {
				  /*Set ETH speed 100M*/
				  heth.Init.Speed  =  ETH_SPEED_100M;
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <ethernetif_update_config+0xfc>)
 8004862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004866:	609a      	str	r2, [r3, #8]
 8004868:	e00e      	b.n	8004888 <ethernetif_update_config+0xd8>
			  }
		  }
		  else
		  {
				/*Set MAC speed and Duplex Mode to PHY*/
				HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 800486a:	4b10      	ldr	r3, [pc, #64]	; (80048ac <ethernetif_update_config+0xfc>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	08db      	lsrs	r3, r3, #3
 8004870:	b29a      	uxth	r2, r3
															(uint16_t)(heth.Init.Speed>>1));
 8004872:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <ethernetif_update_config+0xfc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	b29b      	uxth	r3, r3
				HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 800487a:	4313      	orrs	r3, r2
 800487c:	b29b      	uxth	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	2100      	movs	r1, #0
 8004882:	480a      	ldr	r0, [pc, #40]	; (80048ac <ethernetif_update_config+0xfc>)
 8004884:	f7fd fc19 	bl	80020ba <HAL_ETH_WritePHYRegister>
		  }


		  /*Re-configure ETH MAC*/
		  HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *)NULL);
 8004888:	2100      	movs	r1, #0
 800488a:	4808      	ldr	r0, [pc, #32]	; (80048ac <ethernetif_update_config+0xfc>)
 800488c:	f7fd fcda 	bl	8002244 <HAL_ETH_ConfigMAC>

		  /*Restart MAC interface*/
		  HAL_ETH_Start(&heth);
 8004890:	4806      	ldr	r0, [pc, #24]	; (80048ac <ethernetif_update_config+0xfc>)
 8004892:	f7fd fc78 	bl	8002186 <HAL_ETH_Start>
 8004896:	e002      	b.n	800489e <ethernetif_update_config+0xee>

	  }
	  else
	  {
		  /*Stop MAC*/
		  HAL_ETH_Stop(&heth);
 8004898:	4804      	ldr	r0, [pc, #16]	; (80048ac <ethernetif_update_config+0xfc>)
 800489a:	f7fd fca3 	bl	80021e4 <HAL_ETH_Stop>
	  }

	  ethernetif_notify_conn_changed(netif);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc f844 	bl	800092c <ethernetif_notify_conn_changed>
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20002728 	.word	0x20002728

080048b0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <fs_open+0x16>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <fs_open+0x1c>
    return ERR_ARG;
 80048c6:	f06f 030f 	mvn.w	r3, #15
 80048ca:	e028      	b.n	800491e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80048cc:	4b16      	ldr	r3, [pc, #88]	; (8004928 <fs_open+0x78>)
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e020      	b.n	8004914 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4619      	mov	r1, r3
 80048d8:	6838      	ldr	r0, [r7, #0]
 80048da:	f7fb fcb1 	bl	8000240 <strcmp>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d114      	bne.n	800490e <fs_open+0x5e>
      file->data = (const char *)f->data;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	7c1a      	ldrb	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e007      	b.n	800491e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1db      	bne.n	80048d2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800491a:	f06f 0305 	mvn.w	r3, #5
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	080395dc 	.word	0x080395dc

0800492c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	1ad3      	subs	r3, r2, r3
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8004964:	20e0      	movs	r0, #224	; 0xe0
 8004966:	f001 ff69 	bl	800683c <mem_malloc>
 800496a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d004      	beq.n	800497c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8004972:	22e0      	movs	r2, #224	; 0xe0
 8004974:	2100      	movs	r1, #0
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f00e fe00 	bl	801357c <memset>
  }
  return ret;
 800497c:	687b      	ldr	r3, [r7, #4]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fdb1 	bl	80064fc <mem_free>
  }
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80049aa:	2230      	movs	r2, #48	; 0x30
 80049ac:	2100      	movs	r1, #0
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f00e fde4 	bl	801357c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80049c2:	2030      	movs	r0, #48	; 0x30
 80049c4:	f001 ff3a 	bl	800683c <mem_malloc>
 80049c8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <http_state_alloc+0x1a>
    http_state_init(ret);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ffe6 	bl	80049a2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80049d6:	687b      	ldr	r3, [r7, #4]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff99 	bl	800492c <fs_close>
    hs->handle = NULL;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ffba 	bl	8004986 <http_ssi_state_free>
    hs->ssi = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f002 fec9 	bl	80077bc <pbuf_free>
    hs->req = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <http_state_free+0x1a>
    http_state_eof(hs);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff ffca 	bl	80049e0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fd55 	bl	80064fc <mem_free>
  }
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <http_write+0x22>
 8004a70:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <http_write+0xc8>)
 8004a72:	f240 2219 	movw	r2, #537	; 0x219
 8004a76:	492c      	ldr	r1, [pc, #176]	; (8004b28 <http_write+0xcc>)
 8004a78:	482c      	ldr	r0, [pc, #176]	; (8004b2c <http_write+0xd0>)
 8004a7a:	f00e fd87 	bl	801358c <iprintf>
  len = *length;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004a84:	8afb      	ldrh	r3, [r7, #22]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <http_write+0x32>
    return ERR_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e045      	b.n	8004b1a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004a94:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004a96:	8aba      	ldrh	r2, [r7, #20]
 8004a98:	8afb      	ldrh	r3, [r7, #22]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d201      	bcs.n	8004aa2 <http_write+0x46>
    len = max_len;
 8004a9e:	8abb      	ldrh	r3, [r7, #20]
 8004aa0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004aaa:	8afa      	ldrh	r2, [r7, #22]
 8004aac:	8abb      	ldrh	r3, [r7, #20]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d901      	bls.n	8004ab6 <http_write+0x5a>
    len = max_len;
 8004ab2:	8abb      	ldrh	r3, [r7, #20]
 8004ab4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	8afa      	ldrh	r2, [r7, #22]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f007 fce1 	bl	800c484 <tcp_write>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004ac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d10f      	bne.n	8004af0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004ae0:	2b07      	cmp	r3, #7
 8004ae2:	d902      	bls.n	8004aea <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	82fb      	strh	r3, [r7, #22]
 8004ae8:	e002      	b.n	8004af0 <http_write+0x94>
      } else {
        len /= 2;
 8004aea:	8afb      	ldrh	r3, [r7, #22]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004af0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d102      	bne.n	8004b00 <http_write+0xa4>
 8004afa:	8afb      	ldrh	r3, [r7, #22]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d8da      	bhi.n	8004ab6 <http_write+0x5a>

  if (err == ERR_OK) {
 8004b00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8afa      	ldrh	r2, [r7, #22]
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	e002      	b.n	8004b16 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004b16:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	08014a54 	.word	0x08014a54
 8004b28:	08014a8c 	.word	0x08014a8c
 8004b2c:	08014a9c 	.word	0x08014a9c

08004b30 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004b3e:	2100      	movs	r1, #0
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f004 fcc3 	bl	80094cc <tcp_arg>
  altcp_recv(pcb, NULL);
 8004b46:	2100      	movs	r1, #0
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f004 fcd1 	bl	80094f0 <tcp_recv>
  altcp_err(pcb, NULL);
 8004b4e:	2100      	movs	r1, #0
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f004 fd11 	bl	8009578 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004b56:	2200      	movs	r2, #0
 8004b58:	2100      	movs	r1, #0
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f004 fd46 	bl	80095ec <tcp_poll>
  altcp_sent(pcb, NULL);
 8004b60:	2100      	movs	r1, #0
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f004 fce6 	bl	8009534 <tcp_sent>
  if (hs != NULL) {
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8004b6e:	68b8      	ldr	r0, [r7, #8]
 8004b70:	f7ff ff62 	bl	8004a38 <http_state_free>
  }

  if (abort_conn) {
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d004      	beq.n	8004b84 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f003 fbbe 	bl	80082fc <tcp_abort>
    return ERR_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e00f      	b.n	8004ba4 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f003 facf 	bl	8008128 <tcp_close>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8004b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004b96:	2204      	movs	r2, #4
 8004b98:	4904      	ldr	r1, [pc, #16]	; (8004bac <http_close_or_abort_conn+0x7c>)
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f004 fd26 	bl	80095ec <tcp_poll>
  }
  return err;
 8004ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	08005ad7 	.word	0x08005ad7

08004bb0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ffb6 	bl	8004b30 <http_close_or_abort_conn>
 8004bc4:	4603      	mov	r3, r0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff ffe8 	bl	8004bb0 <http_close_conn>
  }
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <get_tag_insert+0x1c>
 8004bf6:	4b51      	ldr	r3, [pc, #324]	; (8004d3c <get_tag_insert+0x154>)
 8004bf8:	f44f 7241 	mov.w	r2, #772	; 0x304
 8004bfc:	4950      	ldr	r1, [pc, #320]	; (8004d40 <get_tag_insert+0x158>)
 8004bfe:	4851      	ldr	r0, [pc, #324]	; (8004d44 <get_tag_insert+0x15c>)
 8004c00:	f00e fcc4 	bl	801358c <iprintf>
  ssi = hs->ssi;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <get_tag_insert+0x36>
 8004c10:	4b4a      	ldr	r3, [pc, #296]	; (8004d3c <get_tag_insert+0x154>)
 8004c12:	f240 3206 	movw	r2, #774	; 0x306
 8004c16:	494c      	ldr	r1, [pc, #304]	; (8004d48 <get_tag_insert+0x160>)
 8004c18:	484a      	ldr	r0, [pc, #296]	; (8004d44 <get_tag_insert+0x15c>)
 8004c1a:	f00e fcb7 	bl	801358c <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8004c1e:	4b4b      	ldr	r3, [pc, #300]	; (8004d4c <get_tag_insert+0x164>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d02e      	beq.n	8004c84 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8004c26:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <get_tag_insert+0x168>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02a      	beq.n	8004c84 <get_tag_insert+0x9c>
 8004c2e:	4b49      	ldr	r3, [pc, #292]	; (8004d54 <get_tag_insert+0x16c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d026      	beq.n	8004c84 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	e01e      	b.n	8004c7a <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f103 0012 	add.w	r0, r3, #18
 8004c42:	4b43      	ldr	r3, [pc, #268]	; (8004d50 <get_tag_insert+0x168>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f7fb faf6 	bl	8000240 <strcmp>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10c      	bne.n	8004c74 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8004c5a:	4b3c      	ldr	r3, [pc, #240]	; (8004d4c <get_tag_insert+0x164>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	f102 011b 	add.w	r1, r2, #27
 8004c64:	22c0      	movs	r2, #192	; 0xc0
 8004c66:	6978      	ldr	r0, [r7, #20]
 8004c68:	4798      	blx	r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8004c72:	e060      	b.n	8004d36 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3301      	adds	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <get_tag_insert+0x16c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	dbdb      	blt.n	8004c3c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3312      	adds	r3, #18
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fb fae3 	bl	8000254 <strlen>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2ba6      	cmp	r3, #166	; 0xa6
 8004c92:	d818      	bhi.n	8004cc6 <get_tag_insert+0xde>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	3312      	adds	r3, #18
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb fadb 	bl	8000254 <strlen>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b09      	cmp	r3, #9
 8004ca2:	d810      	bhi.n	8004cc6 <get_tag_insert+0xde>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3312      	adds	r3, #18
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fb fad3 	bl	8000254 <strlen>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2ba6      	cmp	r3, #166	; 0xa6
 8004cb2:	d806      	bhi.n	8004cc2 <get_tag_insert+0xda>
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	3312      	adds	r3, #18
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb facb 	bl	8000254 <strlen>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	e002      	b.n	8004cc8 <get_tag_insert+0xe0>
 8004cc2:	23a7      	movs	r3, #167	; 0xa7
 8004cc4:	e000      	b.n	8004cc8 <get_tag_insert+0xe0>
 8004cc6:	2309      	movs	r3, #9
 8004cc8:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	331b      	adds	r3, #27
 8004cce:	2212      	movs	r2, #18
 8004cd0:	4921      	ldr	r1, [pc, #132]	; (8004d58 <get_tag_insert+0x170>)
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f00e fc2a 	bl	801352c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3312      	adds	r3, #18
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	f00e fc21 	bl	801352c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3312      	adds	r3, #18
 8004cee:	3318      	adds	r3, #24
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3303      	adds	r3, #3
 8004cf6:	2207      	movs	r2, #7
 8004cf8:	4918      	ldr	r1, [pc, #96]	; (8004d5c <get_tag_insert+0x174>)
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f00e fc16 	bl	801352c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3319      	adds	r3, #25
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	2200      	movs	r2, #0
 8004d0a:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	331b      	adds	r3, #27
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb fa9f 	bl	8000254 <strlen>
 8004d16:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1e:	d306      	bcc.n	8004d2e <get_tag_insert+0x146>
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <get_tag_insert+0x154>)
 8004d22:	f240 323f 	movw	r2, #831	; 0x33f
 8004d26:	490e      	ldr	r1, [pc, #56]	; (8004d60 <get_tag_insert+0x178>)
 8004d28:	4806      	ldr	r0, [pc, #24]	; (8004d44 <get_tag_insert+0x15c>)
 8004d2a:	f00e fc2f 	bl	801358c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	81da      	strh	r2, [r3, #14]
}
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	08014a54 	.word	0x08014a54
 8004d40:	08014ac4 	.word	0x08014ac4
 8004d44:	08014a9c 	.word	0x08014a9c
 8004d48:	08014ad0 	.word	0x08014ad0
 8004d4c:	200004e8 	.word	0x200004e8
 8004d50:	200004f0 	.word	0x200004f0
 8004d54:	200004ec 	.word	0x200004ec
 8004d58:	08014adc 	.word	0x08014adc
 8004d5c:	08014af0 	.word	0x08014af0
 8004d60:	08014af8 	.word	0x08014af8

08004d64 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d105      	bne.n	8004d82 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8004d76:	6839      	ldr	r1, [r7, #0]
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff28 	bl	8004bce <http_eof>
    return 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e016      	b.n	8004db0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fdda 	bl	8004940 <fs_bytes_left>
 8004d8c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	dc05      	bgt.n	8004da0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004d94:	6839      	ldr	r1, [r7, #0]
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ff19 	bl	8004bce <http_eof>
    return 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e007      	b.n	8004db0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <http_check_eof+0x54>)
 8004da2:	f240 429d 	movw	r2, #1181	; 0x49d
 8004da6:	4905      	ldr	r1, [pc, #20]	; (8004dbc <http_check_eof+0x58>)
 8004da8:	4805      	ldr	r0, [pc, #20]	; (8004dc0 <http_check_eof+0x5c>)
 8004daa:	f00e fbef 	bl	801358c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8004dae:	2301      	movs	r3, #1
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	08014a54 	.word	0x08014a54
 8004dbc:	08014b08 	.word	0x08014b08
 8004dc0:	08014a9c 	.word	0x08014a9c

08004dc4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d803      	bhi.n	8004de6 <http_send_data_nonssi+0x22>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	e001      	b.n	8004dea <http_send_data_nonssi+0x26>
 8004de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dea:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	6999      	ldr	r1, [r3, #24]
 8004df0:	f107 020c 	add.w	r2, r7, #12
 8004df4:	2300      	movs	r3, #0
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff fe30 	bl	8004a5c <http_write>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8004e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10d      	bne.n	8004e24 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	89ba      	ldrh	r2, [r7, #12]
 8004e12:	441a      	add	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	89ba      	ldrh	r2, [r7, #12]
 8004e1e:	1a9a      	subs	r2, r3, r2
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <http_send_data_ssi+0x2c>
 8004e4e:	4b9d      	ldr	r3, [pc, #628]	; (80050c4 <http_send_data_ssi+0x294>)
 8004e50:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8004e54:	499c      	ldr	r1, [pc, #624]	; (80050c8 <http_send_data_ssi+0x298>)
 8004e56:	489d      	ldr	r0, [pc, #628]	; (80050cc <http_send_data_ssi+0x29c>)
 8004e58:	f00e fb98 	bl	801358c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004e62:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	f240 826a 	bls.w	8005346 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e80:	4293      	cmp	r3, r2
 8004e82:	dc06      	bgt.n	8004e92 <http_send_data_ssi+0x62>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	e001      	b.n	8004e96 <http_send_data_ssi+0x66>
 8004e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e96:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6999      	ldr	r1, [r3, #24]
 8004e9c:	f107 020e 	add.w	r2, r7, #14
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fdda 	bl	8004a5c <http_write>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004eac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10d      	bne.n	8004ed0 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	89fa      	ldrh	r2, [r7, #14]
 8004ebe:	441a      	add	r2, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	89fa      	ldrh	r2, [r7, #14]
 8004eca:	1a9a      	subs	r2, r3, r2
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 8235 	bne.w	8005346 <http_send_data_ssi+0x516>
      return data_to_send;
 8004edc:	7dbb      	ldrb	r3, [r7, #22]
 8004ede:	e27b      	b.n	80053d8 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <http_send_data_ssi+0xba>
      return data_to_send;
 8004ee6:	7dbb      	ldrb	r3, [r7, #22]
 8004ee8:	e276      	b.n	80053d8 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	f200 8227 	bhi.w	8005344 <http_send_data_ssi+0x514>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <http_send_data_ssi+0xcc>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f11 	.word	0x08004f11
 8004f00:	08004f63 	.word	0x08004f63
 8004f04:	08004fd5 	.word	0x08004fd5
 8004f08:	08005123 	.word	0x08005123
 8004f0c:	0800526b 	.word	0x0800526b
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8004f10:	2300      	movs	r3, #0
 8004f12:	757b      	strb	r3, [r7, #21]
 8004f14:	e017      	b.n	8004f46 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	7d7b      	ldrb	r3, [r7, #21]
 8004f1e:	496c      	ldr	r1, [pc, #432]	; (80050d0 <http_send_data_ssi+0x2a0>)
 8004f20:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d10a      	bne.n	8004f40 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	7d7a      	ldrb	r2, [r7, #21]
 8004f2e:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8004f3e:	e005      	b.n	8004f4c <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8004f40:	7d7b      	ldrb	r3, [r7, #21]
 8004f42:	3301      	adds	r3, #1
 8004f44:	757b      	strb	r3, [r7, #21]
 8004f46:	7d7b      	ldrb	r3, [r7, #21]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d9e4      	bls.n	8004f16 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	601a      	str	r2, [r3, #0]
        break;
 8004f60:	e1f1      	b.n	8005346 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	7c1b      	ldrb	r3, [r3, #16]
 8004f66:	461a      	mov	r2, r3
 8004f68:	4b59      	ldr	r3, [pc, #356]	; (80050d0 <http_send_data_ssi+0x2a0>)
 8004f6a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	8992      	ldrh	r2, [r2, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d107      	bne.n	8004f8a <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004f88:	e1dd      	b.n	8005346 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	7c1b      	ldrb	r3, [r3, #16]
 8004f94:	4619      	mov	r1, r3
 8004f96:	4b4e      	ldr	r3, [pc, #312]	; (80050d0 <http_send_data_ssi+0x2a0>)
 8004f98:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8004f9c:	6939      	ldr	r1, [r7, #16]
 8004f9e:	8989      	ldrh	r1, [r1, #12]
 8004fa0:	440b      	add	r3, r1
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d106      	bne.n	8004fb6 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	899b      	ldrh	r3, [r3, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	819a      	strh	r2, [r3, #12]
 8004fb4:	e003      	b.n	8004fbe <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	1e5a      	subs	r2, r3, #1
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	601a      	str	r2, [r3, #0]
        }
        break;
 8004fd2:	e1b8      	b.n	8005346 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	899b      	ldrh	r3, [r3, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d11e      	bne.n	800501a <http_send_data_ssi+0x1ea>
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d00e      	beq.n	8005004 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004fec:	2b09      	cmp	r3, #9
 8004fee:	d009      	beq.n	8005004 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b0a      	cmp	r3, #10
 8004ff8:	d004      	beq.n	8005004 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005000:	2b0d      	cmp	r3, #13
 8005002:	d10a      	bne.n	800501a <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	601a      	str	r2, [r3, #0]
          break;
 8005018:	e195      	b.n	8005346 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	7c1b      	ldrb	r3, [r3, #16]
 8005024:	492a      	ldr	r1, [pc, #168]	; (80050d0 <http_send_data_ssi+0x2a0>)
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d013      	beq.n	800505a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8005038:	2b20      	cmp	r3, #32
 800503a:	d00e      	beq.n	800505a <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b09      	cmp	r3, #9
 8005044:	d009      	beq.n	800505a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800504c:	2b0a      	cmp	r3, #10
 800504e:	d004      	beq.n	800505a <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b0d      	cmp	r3, #13
 8005058:	d142      	bne.n	80050e0 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	899b      	ldrh	r3, [r3, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800506a:	e04f      	b.n	800510c <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2203      	movs	r2, #3
 8005070:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	899b      	ldrh	r3, [r3, #12]
 8005078:	2bff      	cmp	r3, #255	; 0xff
 800507a:	d906      	bls.n	800508a <http_send_data_ssi+0x25a>
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <http_send_data_ssi+0x294>)
 800507e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005082:	4914      	ldr	r1, [pc, #80]	; (80050d4 <http_send_data_ssi+0x2a4>)
 8005084:	4811      	ldr	r0, [pc, #68]	; (80050cc <http_send_data_ssi+0x29c>)
 8005086:	f00e fa81 	bl	801358c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	899b      	ldrh	r3, [r3, #12]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	899b      	ldrh	r3, [r3, #12]
 8005098:	461a      	mov	r2, r3
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	4413      	add	r3, r2
 800509e:	2200      	movs	r2, #0
 80050a0:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	781a      	ldrb	r2, [r3, #0]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	7c1b      	ldrb	r3, [r3, #16]
 80050ac:	4908      	ldr	r1, [pc, #32]	; (80050d0 <http_send_data_ssi+0x2a0>)
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	440b      	add	r3, r1
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d10e      	bne.n	80050d8 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2201      	movs	r2, #1
 80050be:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80050c0:	e024      	b.n	800510c <http_send_data_ssi+0x2dc>
 80050c2:	bf00      	nop
 80050c4:	08014a54 	.word	0x08014a54
 80050c8:	08014ad0 	.word	0x08014ad0
 80050cc:	08014a9c 	.word	0x08014a9c
 80050d0:	0803962c 	.word	0x0803962c
 80050d4:	08014b40 	.word	0x08014b40
            } else {
              ssi->tag_index = 0;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2200      	movs	r2, #0
 80050dc:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80050de:	e015      	b.n	800510c <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	899b      	ldrh	r3, [r3, #12]
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	d80d      	bhi.n	8005104 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	899b      	ldrh	r3, [r3, #12]
 80050f0:	1c59      	adds	r1, r3, #1
 80050f2:	b288      	uxth	r0, r1
 80050f4:	6939      	ldr	r1, [r7, #16]
 80050f6:	8188      	strh	r0, [r1, #12]
 80050f8:	4619      	mov	r1, r3
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	440b      	add	r3, r1
 8005100:	749a      	strb	r2, [r3, #18]
 8005102:	e003      	b.n	800510c <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	601a      	str	r2, [r3, #0]

        break;
 8005120:	e111      	b.n	8005346 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	899b      	ldrh	r3, [r3, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11e      	bne.n	8005168 <http_send_data_ssi+0x338>
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b20      	cmp	r3, #32
 8005132:	d00e      	beq.n	8005152 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800513a:	2b09      	cmp	r3, #9
 800513c:	d009      	beq.n	8005152 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b0a      	cmp	r3, #10
 8005146:	d004      	beq.n	8005152 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800514e:	2b0d      	cmp	r3, #13
 8005150:	d10a      	bne.n	8005168 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	1e5a      	subs	r2, r3, #1
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	601a      	str	r2, [r3, #0]
          break;
 8005166:	e0ee      	b.n	8005346 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	781a      	ldrb	r2, [r3, #0]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	7c1b      	ldrb	r3, [r3, #16]
 8005172:	499b      	ldr	r1, [pc, #620]	; (80053e0 <http_send_data_ssi+0x5b0>)
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	440b      	add	r3, r1
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	6939      	ldr	r1, [r7, #16]
 800517c:	8989      	ldrh	r1, [r1, #12]
 800517e:	440b      	add	r3, r1
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d162      	bne.n	800524c <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	1e5a      	subs	r2, r3, #1
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	899b      	ldrh	r3, [r3, #12]
 800519e:	3301      	adds	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	7c1b      	ldrb	r3, [r3, #16]
 80051aa:	4a8d      	ldr	r2, [pc, #564]	; (80053e0 <http_send_data_ssi+0x5b0>)
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	8992      	ldrh	r2, [r2, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f040 80c3 	bne.w	8005346 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80051c0:	6838      	ldr	r0, [r7, #0]
 80051c2:	f7ff fd11 	bl	8004be8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2200      	movs	r2, #0
 80051ca:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2204      	movs	r2, #4
 80051d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	f240 80ae 	bls.w	8005346 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80051f8:	4293      	cmp	r3, r2
 80051fa:	dc06      	bgt.n	800520a <http_send_data_ssi+0x3da>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	b29b      	uxth	r3, r3
 8005208:	e001      	b.n	800520e <http_send_data_ssi+0x3de>
 800520a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800520e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6999      	ldr	r1, [r3, #24]
 8005214:	f107 020e 	add.w	r2, r7, #14
 8005218:	2300      	movs	r3, #0
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff fc1e 	bl	8004a5c <http_write>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8005224:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f040 808c 	bne.w	8005346 <http_send_data_ssi+0x516>
                data_to_send = 1;
 800522e:	2301      	movs	r3, #1
 8005230:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	89fa      	ldrh	r2, [r7, #14]
 8005238:	441a      	add	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	89fa      	ldrh	r2, [r7, #14]
 8005244:	1a9a      	subs	r2, r3, r2
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	625a      	str	r2, [r3, #36]	; 0x24
 800524a:	e07c      	b.n	8005346 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	1e5a      	subs	r2, r3, #1
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 8005268:	e06d      	b.n	8005346 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	429a      	cmp	r2, r3
 8005274:	d935      	bls.n	80052e2 <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005284:	4293      	cmp	r3, r2
 8005286:	dc06      	bgt.n	8005296 <http_send_data_ssi+0x466>
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	b29b      	uxth	r3, r3
 8005294:	e001      	b.n	800529a <http_send_data_ssi+0x46a>
 8005296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800529a:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800529c:	89fb      	ldrh	r3, [r7, #14]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6999      	ldr	r1, [r3, #24]
 80052a6:	f107 020e 	add.w	r2, r7, #14
 80052aa:	2300      	movs	r3, #0
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff fbd5 	bl	8004a5c <http_write>
 80052b2:	4603      	mov	r3, r0
 80052b4:	75fb      	strb	r3, [r7, #23]
 80052b6:	e001      	b.n	80052bc <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 80052bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d140      	bne.n	8005346 <http_send_data_ssi+0x516>
            data_to_send = 1;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	89fa      	ldrh	r2, [r7, #14]
 80052ce:	441a      	add	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	89fa      	ldrh	r2, [r7, #14]
 80052da:	1a9a      	subs	r2, r3, r2
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	625a      	str	r2, [r3, #36]	; 0x24
 80052e0:	e031      	b.n	8005346 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	899a      	ldrh	r2, [r3, #12]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	89db      	ldrh	r3, [r3, #14]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d222      	bcs.n	8005334 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	89da      	ldrh	r2, [r3, #14]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	899b      	ldrh	r3, [r3, #12]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	899b      	ldrh	r3, [r3, #12]
 8005300:	3318      	adds	r3, #24
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4413      	add	r3, r2
 8005306:	1cd9      	adds	r1, r3, #3
 8005308:	f107 020e 	add.w	r2, r7, #14
 800530c:	2301      	movs	r3, #1
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fba4 	bl	8004a5c <http_write>
 8005314:	4603      	mov	r3, r0
 8005316:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8005318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d112      	bne.n	8005346 <http_send_data_ssi+0x516>
              data_to_send = 1;
 8005320:	2301      	movs	r3, #1
 8005322:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	899a      	ldrh	r2, [r3, #12]
 8005328:	89fb      	ldrh	r3, [r7, #14]
 800532a:	4413      	add	r3, r2
 800532c:	b29a      	uxth	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	819a      	strh	r2, [r3, #12]
 8005332:	e008      	b.n	8005346 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2200      	movs	r2, #0
 8005338:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005342:	e000      	b.n	8005346 <http_send_data_ssi+0x516>
        default:
          break;
 8005344:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800534c:	2b04      	cmp	r3, #4
 800534e:	d003      	beq.n	8005358 <http_send_data_ssi+0x528>
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <http_send_data_ssi+0x532>
 8005358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f43f adbf 	beq.w	8004ee0 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005368:	2b04      	cmp	r3, #4
 800536a:	d034      	beq.n	80053d6 <http_send_data_ssi+0x5a6>
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	429a      	cmp	r2, r3
 8005376:	d92e      	bls.n	80053d6 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005386:	4293      	cmp	r3, r2
 8005388:	dc06      	bgt.n	8005398 <http_send_data_ssi+0x568>
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	b29b      	uxth	r3, r3
 8005396:	e001      	b.n	800539c <http_send_data_ssi+0x56c>
 8005398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800539c:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	f107 020e 	add.w	r2, r7, #14
 80053a6:	2300      	movs	r3, #0
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fb57 	bl	8004a5c <http_write>
 80053ae:	4603      	mov	r3, r0
 80053b0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80053b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	89fa      	ldrh	r2, [r7, #14]
 80053c4:	441a      	add	r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	89fa      	ldrh	r2, [r7, #14]
 80053d0:	1a9a      	subs	r2, r3, r2
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 80053d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	0803962c 	.word	0x0803962c

080053e4 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <http_send+0x18>
    return 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e030      	b.n	800545e <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d108      	bne.n	8005416 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fcac 	bl	8004d64 <http_check_eof>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <http_send+0x32>
      return 0;
 8005412:	2300      	movs	r3, #0
 8005414:	e023      	b.n	800545e <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d006      	beq.n	800542c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fd05 	bl	8004e30 <http_send_data_ssi>
 8005426:	4603      	mov	r3, r0
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	e005      	b.n	8005438 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fcc8 	bl	8004dc4 <http_send_data_nonssi>
 8005434:	4603      	mov	r3, r0
 8005436:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10d      	bne.n	800545c <http_send+0x78>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fa7b 	bl	8004940 <fs_bytes_left>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	dc05      	bgt.n	800545c <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fbbb 	bl	8004bce <http_eof>
    return 0;
 8005458:	2300      	movs	r3, #0
 800545a:	e000      	b.n	800545e <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800545c:	7bfb      	ldrb	r3, [r7, #15]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <http_get_404_file+0x80>)
 8005476:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f7ff fa15 	bl	80048b0 <fs_open>
 8005486:	4603      	mov	r3, r0
 8005488:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800548a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d024      	beq.n	80054dc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4a15      	ldr	r2, [pc, #84]	; (80054ec <http_get_404_file+0x84>)
 8005496:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4619      	mov	r1, r3
 80054a0:	4610      	mov	r0, r2
 80054a2:	f7ff fa05 	bl	80048b0 <fs_open>
 80054a6:	4603      	mov	r3, r0
 80054a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80054aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d014      	beq.n	80054dc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <http_get_404_file+0x88>)
 80054b6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7ff f9f5 	bl	80048b0 <fs_open>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80054ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
        return NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80054dc:	687b      	ldr	r3, [r7, #4]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	08014b58 	.word	0x08014b58
 80054ec:	08014b64 	.word	0x08014b64
 80054f0:	08014b70 	.word	0x08014b70

080054f4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08e      	sub	sp, #56	; 0x38
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <http_parse_request+0x24>
 800550a:	4b65      	ldr	r3, [pc, #404]	; (80056a0 <http_parse_request+0x1ac>)
 800550c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8005510:	4964      	ldr	r1, [pc, #400]	; (80056a4 <http_parse_request+0x1b0>)
 8005512:	4865      	ldr	r0, [pc, #404]	; (80056a8 <http_parse_request+0x1b4>)
 8005514:	f00e f83a 	bl	801358c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <http_parse_request+0x38>
 800551e:	4b60      	ldr	r3, [pc, #384]	; (80056a0 <http_parse_request+0x1ac>)
 8005520:	f240 72af 	movw	r2, #1967	; 0x7af
 8005524:	4961      	ldr	r1, [pc, #388]	; (80056ac <http_parse_request+0x1b8>)
 8005526:	4860      	ldr	r0, [pc, #384]	; (80056a8 <http_parse_request+0x1b4>)
 8005528:	f00e f830 	bl	801358c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d103      	bne.n	800553c <http_parse_request+0x48>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800553c:	f06f 0307 	mvn.w	r3, #7
 8005540:	e0a9      	b.n	8005696 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	621a      	str	r2, [r3, #32]
 8005550:	e005      	b.n	800555e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005558:	4618      	mov	r0, r3
 800555a:	f002 f9f1 	bl	8007940 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800555e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005560:	f002 f9cc 	bl	80078fc <pbuf_ref>

  if (hs->req->next != NULL) {
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d012      	beq.n	8005594 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	891b      	ldrh	r3, [r3, #8]
 8005574:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005578:	4293      	cmp	r3, r2
 800557a:	bf28      	it	cs
 800557c:	4613      	movcs	r3, r2
 800557e:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6a18      	ldr	r0, [r3, #32]
 8005584:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005586:	2300      	movs	r3, #0
 8005588:	4949      	ldr	r1, [pc, #292]	; (80056b0 <http_parse_request+0x1bc>)
 800558a:	f002 fb11 	bl	8007bb0 <pbuf_copy_partial>
    data = httpd_req_buf;
 800558e:	4b48      	ldr	r3, [pc, #288]	; (80056b0 <http_parse_request+0x1bc>)
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	e005      	b.n	80055a0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	895b      	ldrh	r3, [r3, #10]
 800559e:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80055a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80055a2:	2b06      	cmp	r3, #6
 80055a4:	d962      	bls.n	800566c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80055a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80055a8:	461a      	mov	r2, r3
 80055aa:	4942      	ldr	r1, [pc, #264]	; (80056b4 <http_parse_request+0x1c0>)
 80055ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055ae:	f000 fc69 	bl	8005e84 <lwip_strnstr>
 80055b2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d058      	beq.n	800566c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80055be:	2204      	movs	r2, #4
 80055c0:	493d      	ldr	r1, [pc, #244]	; (80056b8 <http_parse_request+0x1c4>)
 80055c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055c4:	f00e f867 	bl	8013696 <strncmp>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d116      	bne.n	80055fc <http_parse_request+0x108>
        sp1 = data + 3;
 80055ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d0:	3303      	adds	r3, #3
 80055d2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	b29b      	uxth	r3, r3
 80055de:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3301      	adds	r3, #1
 80055e8:	8b7a      	ldrh	r2, [r7, #26]
 80055ea:	4934      	ldr	r1, [pc, #208]	; (80056bc <http_parse_request+0x1c8>)
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fc49 	bl	8005e84 <lwip_strnstr>
 80055f2:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d111      	bne.n	800561e <http_parse_request+0x12a>
 80055fa:	e006      	b.n	800560a <http_parse_request+0x116>
        data[4] = 0;
 80055fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fe:	3304      	adds	r3, #4
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005604:	f06f 030f 	mvn.w	r3, #15
 8005608:	e045      	b.n	8005696 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	3301      	adds	r3, #1
 800560e:	8b7a      	ldrh	r2, [r7, #26]
 8005610:	4928      	ldr	r1, [pc, #160]	; (80056b4 <http_parse_request+0x1c0>)
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fc36 	bl	8005e84 <lwip_strnstr>
 8005618:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	3301      	adds	r3, #1
 8005622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01e      	beq.n	800566c <http_parse_request+0x178>
 800562e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	429a      	cmp	r2, r3
 8005634:	d91a      	bls.n	800566c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005636:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005638:	461a      	mov	r2, r3
 800563a:	4921      	ldr	r1, [pc, #132]	; (80056c0 <http_parse_request+0x1cc>)
 800563c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800563e:	f000 fc21 	bl	8005e84 <lwip_strnstr>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d011      	beq.n	800566c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	3301      	adds	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005654:	8b3b      	ldrh	r3, [r7, #24]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800565e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005660:	6979      	ldr	r1, [r7, #20]
 8005662:	68b8      	ldr	r0, [r7, #8]
 8005664:	f000 f880 	bl	8005768 <http_find_file>
 8005668:	4603      	mov	r3, r0
 800566a:	e014      	b.n	8005696 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	4618      	mov	r0, r3
 8005672:	f002 f92b 	bl	80078cc <pbuf_clen>
 8005676:	4603      	mov	r3, r0
 8005678:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	891b      	ldrh	r3, [r3, #8]
 8005680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005684:	d205      	bcs.n	8005692 <http_parse_request+0x19e>
 8005686:	8a7b      	ldrh	r3, [r7, #18]
 8005688:	2b05      	cmp	r3, #5
 800568a:	d802      	bhi.n	8005692 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800568c:	f06f 0304 	mvn.w	r3, #4
 8005690:	e001      	b.n	8005696 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005692:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005696:	4618      	mov	r0, r3
 8005698:	3738      	adds	r7, #56	; 0x38
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	08014a54 	.word	0x08014a54
 80056a4:	08014b7c 	.word	0x08014b7c
 80056a8:	08014a9c 	.word	0x08014a9c
 80056ac:	08014ac4 	.word	0x08014ac4
 80056b0:	200000a8 	.word	0x200000a8
 80056b4:	08014b88 	.word	0x08014b88
 80056b8:	08014b8c 	.word	0x08014b8c
 80056bc:	08014b94 	.word	0x08014b94
 80056c0:	08014b98 	.word	0x08014b98

080056c4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d040      	beq.n	800575a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80056dc:	213f      	movs	r1, #63	; 0x3f
 80056de:	6838      	ldr	r0, [r7, #0]
 80056e0:	f00d ffcc 	bl	801367c <strchr>
 80056e4:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	613b      	str	r3, [r7, #16]
    ext = uri;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80056fa:	212e      	movs	r1, #46	; 0x2e
 80056fc:	6938      	ldr	r0, [r7, #16]
 80056fe:	f00d ffbd 	bl	801367c <strchr>
 8005702:	6138      	str	r0, [r7, #16]
 8005704:	e009      	b.n	800571a <http_uri_is_ssi+0x56>
      ext = sub;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	617b      	str	r3, [r7, #20]
      sub++;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	3301      	adds	r3, #1
 800570e:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8005710:	212e      	movs	r1, #46	; 0x2e
 8005712:	6938      	ldr	r0, [r7, #16]
 8005714:	f00d ffb2 	bl	801367c <strchr>
 8005718:	6138      	str	r0, [r7, #16]
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1f2      	bne.n	8005706 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	e010      	b.n	8005748 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8005726:	4a0f      	ldr	r2, [pc, #60]	; (8005764 <http_uri_is_ssi+0xa0>)
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800572e:	4619      	mov	r1, r3
 8005730:	6978      	ldr	r0, [r7, #20]
 8005732:	f000 fbdd 	bl	8005ef0 <lwip_stricmp>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800573c:	2301      	movs	r3, #1
 800573e:	76fb      	strb	r3, [r7, #27]
        break;
 8005740:	e005      	b.n	800574e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3301      	adds	r3, #1
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d9eb      	bls.n	8005726 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <http_uri_is_ssi+0x96>
      *param = '?';
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	223f      	movs	r2, #63	; 0x3f
 8005758:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800575a:	7efb      	ldrb	r3, [r7, #27]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3720      	adds	r7, #32
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	080395f0 	.word	0x080395f0

08005768 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b092      	sub	sp, #72	; 0x48
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005774:	2300      	movs	r3, #0
 8005776:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4618      	mov	r0, r3
 8005786:	f7fa fd65 	bl	8000254 <strlen>
 800578a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d072      	beq.n	8005878 <http_find_file+0x110>
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	3b01      	subs	r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b2f      	cmp	r3, #47	; 0x2f
 800579e:	d16b      	bne.n	8005878 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80057a0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80057a2:	4a61      	ldr	r2, [pc, #388]	; (8005928 <http_find_file+0x1c0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d102      	bne.n	80057ae <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d164      	bne.n	8005878 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	3b01      	subs	r3, #1
 80057b2:	2b3f      	cmp	r3, #63	; 0x3f
 80057b4:	bf28      	it	cs
 80057b6:	233f      	movcs	r3, #63	; 0x3f
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c4:	4619      	mov	r1, r3
 80057c6:	4858      	ldr	r0, [pc, #352]	; (8005928 <http_find_file+0x1c0>)
 80057c8:	f00d feb0 	bl	801352c <memcpy>
      http_uri_buf[copy_len] = 0;
 80057cc:	4a56      	ldr	r2, [pc, #344]	; (8005928 <http_find_file+0x1c0>)
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	4413      	add	r3, r2
 80057d2:	2200      	movs	r2, #0
 80057d4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80057d6:	2300      	movs	r3, #0
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057da:	e04a      	b.n	8005872 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d028      	beq.n	8005834 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80057e8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01e      	beq.n	800582e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80057f0:	4a4e      	ldr	r2, [pc, #312]	; (800592c <http_find_file+0x1c4>)
 80057f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fa fd2b 	bl	8000254 <strlen>
 80057fe:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	4293      	cmp	r3, r2
 8005806:	bf28      	it	cs
 8005808:	4613      	movcs	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	4a46      	ldr	r2, [pc, #280]	; (8005928 <http_find_file+0x1c0>)
 8005810:	1898      	adds	r0, r3, r2
 8005812:	4a46      	ldr	r2, [pc, #280]	; (800592c <http_find_file+0x1c4>)
 8005814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005816:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4619      	mov	r1, r3
 800581e:	f00d fe85 	bl	801352c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	4413      	add	r3, r2
 8005828:	4a3f      	ldr	r2, [pc, #252]	; (8005928 <http_find_file+0x1c0>)
 800582a:	2100      	movs	r1, #0
 800582c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800582e:	4b3e      	ldr	r3, [pc, #248]	; (8005928 <http_find_file+0x1c0>)
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005832:	e004      	b.n	800583e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8005834:	4a3d      	ldr	r2, [pc, #244]	; (800592c <http_find_file+0x1c4>)
 8005836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff f834 	bl	80048b0 <fs_open>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800584c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <http_find_file+0x104>
        uri = file_name;
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800585c:	4a33      	ldr	r2, [pc, #204]	; (800592c <http_find_file+0x1c4>)
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	791b      	ldrb	r3, [r3, #4]
 8005866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI */
        break;
 800586a:	e005      	b.n	8005878 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800586c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586e:	3301      	adds	r3, #1
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005874:	2b04      	cmp	r3, #4
 8005876:	d9b1      	bls.n	80057dc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	d139      	bne.n	80058f2 <http_find_file+0x18a>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	213f      	movs	r1, #63	; 0x3f
 8005882:	4618      	mov	r0, r3
 8005884:	f00d fefa 	bl	801367c <strchr>
 8005888:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8005890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
      params++;
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	3301      	adds	r3, #1
 800589a:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	4611      	mov	r1, r2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff f804 	bl	80048b0 <fs_open>
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80058ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <http_find_file+0x152>
      file = &hs->file_handle;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b8:	e006      	b.n	80058c8 <http_find_file+0x160>
    } else {
      file = http_get_404_file(hs, &uri);
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	4619      	mov	r1, r3
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7ff fdd1 	bl	8005468 <http_get_404_file>
 80058c6:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d011      	beq.n	80058f2 <http_find_file+0x18a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	7c1b      	ldrb	r3, [r3, #16]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <http_find_file+0x17a>
        tag_check = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058e0:	e007      	b.n	80058f2 <http_find_file+0x18a>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4619      	mov	r1, r3
 80058e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80058e8:	f7ff feec 	bl	80056c4 <http_uri_is_ssi>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <http_find_file+0x19e>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4619      	mov	r1, r3
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f7ff fdb2 	bl	8005468 <http_get_404_file>
 8005904:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f809 	bl	8005930 <http_init_file>
 800591e:	4603      	mov	r3, r0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3740      	adds	r7, #64	; 0x40
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	200004a8 	.word	0x200004a8
 800592c:	08039604 	.word	0x08039604

08005930 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d07d      	beq.n	8005a40 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <http_init_file+0x2a>
 800594c:	4b45      	ldr	r3, [pc, #276]	; (8005a64 <http_init_file+0x134>)
 800594e:	f640 120b 	movw	r2, #2315	; 0x90b
 8005952:	4945      	ldr	r1, [pc, #276]	; (8005a68 <http_init_file+0x138>)
 8005954:	4845      	ldr	r0, [pc, #276]	; (8005a6c <http_init_file+0x13c>)
 8005956:	f00d fe19 	bl	801358c <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800595a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01c      	beq.n	800599c <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8005962:	f7fe fffc 	bl	800495e <http_ssi_state_alloc>
 8005966:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <http_init_file+0x6c>
        ssi->tag_index = 0;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2200      	movs	r2, #0
 8005972:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	461a      	mov	r2, r3
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da06      	bge.n	80059c0 <http_init_file+0x90>
 80059b2:	4b2c      	ldr	r3, [pc, #176]	; (8005a64 <http_init_file+0x134>)
 80059b4:	f640 1234 	movw	r2, #2356	; 0x934
 80059b8:	492d      	ldr	r1, [pc, #180]	; (8005a70 <http_init_file+0x140>)
 80059ba:	482c      	ldr	r0, [pc, #176]	; (8005a6c <http_init_file+0x13c>)
 80059bc:	f00d fde6 	bl	801358c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	461a      	mov	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	7c1b      	ldrb	r3, [r3, #16]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <http_init_file+0xbe>
 80059e0:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <http_init_file+0x134>)
 80059e2:	f640 1243 	movw	r2, #2371	; 0x943
 80059e6:	4923      	ldr	r1, [pc, #140]	; (8005a74 <http_init_file+0x144>)
 80059e8:	4820      	ldr	r0, [pc, #128]	; (8005a6c <http_init_file+0x13c>)
 80059ea:	f00d fdcf 	bl	801358c <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d032      	beq.n	8005a5a <http_init_file+0x12a>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	7c1b      	ldrb	r3, [r3, #16]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d02b      	beq.n	8005a5a <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6998      	ldr	r0, [r3, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	491a      	ldr	r1, [pc, #104]	; (8005a78 <http_init_file+0x148>)
 8005a0e:	f000 fa39 	bl	8005e84 <lwip_strnstr>
 8005a12:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01f      	beq.n	8005a5a <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	1d1a      	adds	r2, r3, #4
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a3e:	e00c      	b.n	8005a5a <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3720      	adds	r7, #32
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	08014a54 	.word	0x08014a54
 8005a68:	08014ba0 	.word	0x08014ba0
 8005a6c:	08014a9c 	.word	0x08014a9c
 8005a70:	08014bb4 	.word	0x08014bb4
 8005a74:	08014bd4 	.word	0x08014bd4
 8005a78:	08014b98 	.word	0x08014b98

08005a7c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <http_err+0x1c>
    http_state_free(hs);
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7fe ffd0 	bl	8004a38 <http_state_free>
  }
}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <http_sent+0x1c>
    return ERR_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e008      	b.n	8005ace <http_sent+0x2e>
  }

  hs->retries = 0;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8005ac4:	6979      	ldr	r1, [r7, #20]
 8005ac6:	68b8      	ldr	r0, [r7, #8]
 8005ac8:	f7ff fc8c 	bl	80053e4 <http_send>

  return ERR_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d107      	bne.n	8005afa <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8005aea:	2100      	movs	r1, #0
 8005aec:	6838      	ldr	r0, [r7, #0]
 8005aee:	f7ff f85f 	bl	8004bb0 <http_close_conn>
 8005af2:	4603      	mov	r3, r0
 8005af4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	e021      	b.n	8005b3e <http_poll+0x68>
  } else {
    hs->retries++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b00:	3301      	adds	r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d105      	bne.n	8005b20 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	6838      	ldr	r0, [r7, #0]
 8005b18:	f7ff f84a 	bl	8004bb0 <http_close_conn>
      return ERR_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e00e      	b.n	8005b3e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	6838      	ldr	r0, [r7, #0]
 8005b2c:	f7ff fc5a 	bl	80053e4 <http_send>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8005b36:	6838      	ldr	r0, [r7, #0]
 8005b38:	f007 faa4 	bl	800d084 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <http_recv+0x26>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <http_recv+0x26>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d111      	bne.n	8005b92 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	891b      	ldrh	r3, [r3, #8]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	68b8      	ldr	r0, [r7, #8]
 8005b7c:	f002 fd98 	bl	80086b0 <tcp_recved>
      pbuf_free(p);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fe1b 	bl	80077bc <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8005b86:	6979      	ldr	r1, [r7, #20]
 8005b88:	68b8      	ldr	r0, [r7, #8]
 8005b8a:	f7ff f811 	bl	8004bb0 <http_close_conn>
    return ERR_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e055      	b.n	8005c3e <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	891b      	ldrh	r3, [r3, #8]
 8005b96:	4619      	mov	r1, r3
 8005b98:	68b8      	ldr	r0, [r7, #8]
 8005b9a:	f002 fd89 	bl	80086b0 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d147      	bne.n	8005c36 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff fca2 	bl	80054f4 <http_parse_request>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8005bb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d015      	beq.n	8005be8 <http_recv+0xa0>
 8005bbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bc0:	f113 0f05 	cmn.w	r3, #5
 8005bc4:	d010      	beq.n	8005be8 <http_recv+0xa0>
 8005bc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bca:	f113 0f10 	cmn.w	r3, #16
 8005bce:	d00b      	beq.n	8005be8 <http_recv+0xa0>
 8005bd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bd4:	f113 0f08 	cmn.w	r3, #8
 8005bd8:	d006      	beq.n	8005be8 <http_recv+0xa0>
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <http_recv+0x100>)
 8005bdc:	f640 2204 	movw	r2, #2564	; 0xa04
 8005be0:	491a      	ldr	r1, [pc, #104]	; (8005c4c <http_recv+0x104>)
 8005be2:	481b      	ldr	r0, [pc, #108]	; (8005c50 <http_recv+0x108>)
 8005be4:	f00d fcd2 	bl	801358c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8005be8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bec:	f113 0f05 	cmn.w	r3, #5
 8005bf0:	d00b      	beq.n	8005c0a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <http_recv+0xc2>
          pbuf_free(hs->req);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fddc 	bl	80077bc <pbuf_free>
          hs->req = NULL;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 fdd6 	bl	80077bc <pbuf_free>
      if (parsed == ERR_OK) {
 8005c10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8005c18:	6979      	ldr	r1, [r7, #20]
 8005c1a:	68b8      	ldr	r0, [r7, #8]
 8005c1c:	f7ff fbe2 	bl	80053e4 <http_send>
 8005c20:	e00c      	b.n	8005c3c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8005c22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c26:	f113 0f10 	cmn.w	r3, #16
 8005c2a:	d107      	bne.n	8005c3c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8005c2c:	6979      	ldr	r1, [r7, #20]
 8005c2e:	68b8      	ldr	r0, [r7, #8]
 8005c30:	f7fe ffbe 	bl	8004bb0 <http_close_conn>
 8005c34:	e002      	b.n	8005c3c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f001 fdc0 	bl	80077bc <pbuf_free>
    }
  }
  return ERR_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	08014a54 	.word	0x08014a54
 8005c4c:	08014c00 	.word	0x08014c00
 8005c50:	08014a9c 	.word	0x08014a9c

08005c54 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8005c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d102      	bne.n	8005c70 <http_accept+0x1c>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <http_accept+0x22>
    return ERR_VAL;
 8005c70:	f06f 0305 	mvn.w	r3, #5
 8005c74:	e025      	b.n	8005cc2 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005c76:	2101      	movs	r1, #1
 8005c78:	68b8      	ldr	r0, [r7, #8]
 8005c7a:	f003 f9fd 	bl	8009078 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8005c7e:	f7fe fe9d 	bl	80049bc <http_state_alloc>
 8005c82:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d102      	bne.n	8005c90 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8e:	e018      	b.n	8005cc2 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8005c96:	6979      	ldr	r1, [r7, #20]
 8005c98:	68b8      	ldr	r0, [r7, #8]
 8005c9a:	f003 fc17 	bl	80094cc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8005c9e:	490b      	ldr	r1, [pc, #44]	; (8005ccc <http_accept+0x78>)
 8005ca0:	68b8      	ldr	r0, [r7, #8]
 8005ca2:	f003 fc25 	bl	80094f0 <tcp_recv>
  altcp_err(pcb, http_err);
 8005ca6:	490a      	ldr	r1, [pc, #40]	; (8005cd0 <http_accept+0x7c>)
 8005ca8:	68b8      	ldr	r0, [r7, #8]
 8005caa:	f003 fc65 	bl	8009578 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005cae:	2204      	movs	r2, #4
 8005cb0:	4908      	ldr	r1, [pc, #32]	; (8005cd4 <http_accept+0x80>)
 8005cb2:	68b8      	ldr	r0, [r7, #8]
 8005cb4:	f003 fc9a 	bl	80095ec <tcp_poll>
  altcp_sent(pcb, http_sent);
 8005cb8:	4907      	ldr	r1, [pc, #28]	; (8005cd8 <http_accept+0x84>)
 8005cba:	68b8      	ldr	r0, [r7, #8]
 8005cbc:	f003 fc3a 	bl	8009534 <tcp_sent>

  return ERR_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	08005b49 	.word	0x08005b49
 8005cd0:	08005a7d 	.word	0x08005a7d
 8005cd4:	08005ad7 	.word	0x08005ad7
 8005cd8:	08005aa1 	.word	0x08005aa1

08005cdc <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d029      	beq.n	8005d42 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005cee:	2101      	movs	r1, #1
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f003 f9c1 	bl	8009078 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8005cf6:	887b      	ldrh	r3, [r7, #2]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4914      	ldr	r1, [pc, #80]	; (8005d4c <httpd_init_pcb+0x70>)
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f002 fb09 	bl	8008314 <tcp_bind>
 8005d02:	4603      	mov	r3, r0
 8005d04:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8005d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <httpd_init_pcb+0x40>
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <httpd_init_pcb+0x74>)
 8005d10:	f640 2257 	movw	r2, #2647	; 0xa57
 8005d14:	490f      	ldr	r1, [pc, #60]	; (8005d54 <httpd_init_pcb+0x78>)
 8005d16:	4810      	ldr	r0, [pc, #64]	; (8005d58 <httpd_init_pcb+0x7c>)
 8005d18:	f00d fc38 	bl	801358c <iprintf>
    pcb = altcp_listen(pcb);
 8005d1c:	21ff      	movs	r1, #255	; 0xff
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f002 fbb0 	bl	8008484 <tcp_listen_with_backlog>
 8005d24:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <httpd_init_pcb+0x5e>
 8005d2c:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <httpd_init_pcb+0x74>)
 8005d2e:	f640 2259 	movw	r2, #2649	; 0xa59
 8005d32:	490a      	ldr	r1, [pc, #40]	; (8005d5c <httpd_init_pcb+0x80>)
 8005d34:	4808      	ldr	r0, [pc, #32]	; (8005d58 <httpd_init_pcb+0x7c>)
 8005d36:	f00d fc29 	bl	801358c <iprintf>
    altcp_accept(pcb, http_accept);
 8005d3a:	4909      	ldr	r1, [pc, #36]	; (8005d60 <httpd_init_pcb+0x84>)
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f003 fc3d 	bl	80095bc <tcp_accept>
  }
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08039740 	.word	0x08039740
 8005d50:	08014a54 	.word	0x08014a54
 8005d54:	08014c2c 	.word	0x08014c2c
 8005d58:	08014a9c 	.word	0x08014a9c
 8005d5c:	08014c48 	.word	0x08014c48
 8005d60:	08005c55 	.word	0x08005c55

08005d64 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005d6a:	202e      	movs	r0, #46	; 0x2e
 8005d6c:	f003 fba0 	bl	80094b0 <tcp_new_ip_type>
 8005d70:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d106      	bne.n	8005d86 <httpd_init+0x22>
 8005d78:	4b07      	ldr	r3, [pc, #28]	; (8005d98 <httpd_init+0x34>)
 8005d7a:	f640 2272 	movw	r2, #2674	; 0xa72
 8005d7e:	4907      	ldr	r1, [pc, #28]	; (8005d9c <httpd_init+0x38>)
 8005d80:	4807      	ldr	r0, [pc, #28]	; (8005da0 <httpd_init+0x3c>)
 8005d82:	f00d fc03 	bl	801358c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8005d86:	2150      	movs	r1, #80	; 0x50
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ffa7 	bl	8005cdc <httpd_init_pcb>
}
 8005d8e:	bf00      	nop
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	08014a54 	.word	0x08014a54
 8005d9c:	08014c68 	.word	0x08014c68
 8005da0:	08014a9c 	.word	0x08014a9c

08005da4 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <http_set_ssi_handler+0x20>
 8005db6:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <http_set_ssi_handler+0x64>)
 8005db8:	f640 2297 	movw	r2, #2711	; 0xa97
 8005dbc:	4913      	ldr	r1, [pc, #76]	; (8005e0c <http_set_ssi_handler+0x68>)
 8005dbe:	4814      	ldr	r0, [pc, #80]	; (8005e10 <http_set_ssi_handler+0x6c>)
 8005dc0:	f00d fbe4 	bl	801358c <iprintf>
  httpd_ssi_handler = ssi_handler;
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <http_set_ssi_handler+0x70>)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <http_set_ssi_handler+0x3a>
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <http_set_ssi_handler+0x64>)
 8005dd2:	f640 229e 	movw	r2, #2718	; 0xa9e
 8005dd6:	4910      	ldr	r1, [pc, #64]	; (8005e18 <http_set_ssi_handler+0x74>)
 8005dd8:	480d      	ldr	r0, [pc, #52]	; (8005e10 <http_set_ssi_handler+0x6c>)
 8005dda:	f00d fbd7 	bl	801358c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dc06      	bgt.n	8005df2 <http_set_ssi_handler+0x4e>
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <http_set_ssi_handler+0x64>)
 8005de6:	f640 229f 	movw	r2, #2719	; 0xa9f
 8005dea:	490c      	ldr	r1, [pc, #48]	; (8005e1c <http_set_ssi_handler+0x78>)
 8005dec:	4808      	ldr	r0, [pc, #32]	; (8005e10 <http_set_ssi_handler+0x6c>)
 8005dee:	f00d fbcd 	bl	801358c <iprintf>

  httpd_tags = tags;
 8005df2:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <http_set_ssi_handler+0x7c>)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8005df8:	4a0a      	ldr	r2, [pc, #40]	; (8005e24 <http_set_ssi_handler+0x80>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	08014a54 	.word	0x08014a54
 8005e0c:	08014c84 	.word	0x08014c84
 8005e10:	08014a9c 	.word	0x08014a9c
 8005e14:	200004e8 	.word	0x200004e8
 8005e18:	08014c9c 	.word	0x08014c9c
 8005e1c:	08014cac 	.word	0x08014cac
 8005e20:	200004f0 	.word	0x200004f0
 8005e24:	200004ec 	.word	0x200004ec

08005e28 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	b21a      	sxth	r2, r3
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	0a1b      	lsrs	r3, r3, #8
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	b21b      	sxth	r3, r3
 8005e40:	4313      	orrs	r3, r2
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	b29b      	uxth	r3, r3
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	061a      	lsls	r2, r3, #24
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0e1b      	lsrs	r3, r3, #24
 8005e76:	4313      	orrs	r3, r2
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005e90:	68b8      	ldr	r0, [r7, #8]
 8005e92:	f7fa f9df 	bl	8000254 <strlen>
 8005e96:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	e022      	b.n	8005ee8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e012      	b.n	8005ece <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d109      	bne.n	8005ec8 <lwip_strnstr+0x44>
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	6978      	ldr	r0, [r7, #20]
 8005eba:	f00d fbec 	bl	8013696 <strncmp>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	e00f      	b.n	8005ee8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <lwip_strnstr+0x62>
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	441a      	add	r2, r3
 8005edc:	68f9      	ldr	r1, [r7, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	440b      	add	r3, r1
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d9e0      	bls.n	8005ea8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	603a      	str	r2, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8005f0e:	7bfa      	ldrb	r2, [r7, #15]
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d016      	beq.n	8005f44 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	f043 0320 	orr.w	r3, r3, #32
 8005f1c:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005f1e:	7b7b      	ldrb	r3, [r7, #13]
 8005f20:	2b60      	cmp	r3, #96	; 0x60
 8005f22:	d90c      	bls.n	8005f3e <lwip_stricmp+0x4e>
 8005f24:	7b7b      	ldrb	r3, [r7, #13]
 8005f26:	2b7a      	cmp	r3, #122	; 0x7a
 8005f28:	d809      	bhi.n	8005f3e <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	f043 0320 	orr.w	r3, r3, #32
 8005f30:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8005f32:	7b7a      	ldrb	r2, [r7, #13]
 8005f34:	7b3b      	ldrb	r3, [r7, #12]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d003      	beq.n	8005f42 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e006      	b.n	8005f4c <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e004      	b.n	8005f4c <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005f42:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1d7      	bne.n	8005efa <lwip_stricmp+0xa>
  return 0;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b089      	sub	sp, #36	; 0x24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00d      	beq.n	8005f98 <lwip_standard_chksum+0x40>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	dd0a      	ble.n	8005f98 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	1c53      	adds	r3, r2, #1
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	f107 030e 	add.w	r3, r7, #14
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	7812      	ldrb	r2, [r2, #0]
 8005f90:	701a      	strb	r2, [r3, #0]
    len--;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8005f9c:	e00a      	b.n	8005fb4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	1c9a      	adds	r2, r3, #2
 8005fa2:	61ba      	str	r2, [r7, #24]
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	4413      	add	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
    len -= 2;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	3b02      	subs	r3, #2
 8005fb2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	dcf1      	bgt.n	8005f9e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dd04      	ble.n	8005fca <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8005fc0:	f107 030e 	add.w	r3, r7, #14
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	7812      	ldrb	r2, [r2, #0]
 8005fc8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8005fca:	89fb      	ldrh	r3, [r7, #14]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	0c1a      	lsrs	r2, r3, #16
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	0c1a      	lsrs	r2, r3, #16
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4413      	add	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	b29b      	uxth	r3, r3
}
 8006006:	4618      	mov	r0, r3
 8006008:	3724      	adds	r7, #36	; 0x24
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b086      	sub	sp, #24
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	607b      	str	r3, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	72fb      	strb	r3, [r7, #11]
 8006020:	4613      	mov	r3, r2
 8006022:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e02b      	b.n	8006086 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	895b      	ldrh	r3, [r3, #10]
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f7ff ff8d 	bl	8005f58 <lwip_standard_chksum>
 800603e:	4603      	mov	r3, r0
 8006040:	461a      	mov	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4413      	add	r3, r2
 8006046:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	0c1a      	lsrs	r2, r3, #16
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	b29b      	uxth	r3, r3
 8006050:	4413      	add	r3, r2
 8006052:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	895b      	ldrh	r3, [r3, #10]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00e      	beq.n	8006080 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	0a1b      	lsrs	r3, r3, #8
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4313      	orrs	r3, r2
 800607e:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1d0      	bne.n	800602e <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	b29a      	uxth	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b2db      	uxtb	r3, r3
 800609e:	4313      	orrs	r3, r2
 80060a0:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80060a2:	7afb      	ldrb	r3, [r7, #11]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff febe 	bl	8005e28 <lwip_htons>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4413      	add	r3, r2
 80060b4:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 80060b6:	893b      	ldrh	r3, [r7, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff feb5 	bl	8005e28 <lwip_htons>
 80060be:	4603      	mov	r3, r0
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4413      	add	r3, r2
 80060c6:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	0c1a      	lsrs	r2, r3, #16
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	0c1a      	lsrs	r2, r3, #16
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	4413      	add	r3, r2
 80060de:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	43db      	mvns	r3, r3
 80060e6:	b29b      	uxth	r3, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	607b      	str	r3, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	72fb      	strb	r3, [r7, #11]
 80060fe:	4613      	mov	r3, r2
 8006100:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	b29b      	uxth	r3, r3
 800610c:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	0c1b      	lsrs	r3, r3, #16
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	b29b      	uxth	r3, r3
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4413      	add	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	0c1b      	lsrs	r3, r3, #16
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	0c1a      	lsrs	r2, r3, #16
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	b29b      	uxth	r3, r3
 800613a:	4413      	add	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	0c1a      	lsrs	r2, r3, #16
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	b29b      	uxth	r3, r3
 8006146:	4413      	add	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800614a:	893a      	ldrh	r2, [r7, #8]
 800614c:	7af9      	ldrb	r1, [r7, #11]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff5e 	bl	8006012 <inet_cksum_pseudo_base>
 8006156:	4603      	mov	r3, r0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	607b      	str	r3, [r7, #4]
 800616a:	460b      	mov	r3, r1
 800616c:	72fb      	strb	r3, [r7, #11]
 800616e:	4613      	mov	r3, r2
 8006170:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8006172:	893a      	ldrh	r2, [r7, #8]
 8006174:	7af9      	ldrb	r1, [r7, #11]
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f7ff ffb7 	bl	80060f0 <inet_chksum_pseudo>
 8006182:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8006198:	887b      	ldrh	r3, [r7, #2]
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fedb 	bl	8005f58 <lwip_standard_chksum>
 80061a2:	4603      	mov	r3, r0
 80061a4:	43db      	mvns	r3, r3
 80061a6:	b29b      	uxth	r3, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	e02b      	b.n	800621e <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	895b      	ldrh	r3, [r3, #10]
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f7ff fec1 	bl	8005f58 <lwip_standard_chksum>
 80061d6:	4603      	mov	r3, r0
 80061d8:	461a      	mov	r2, r3
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	0c1a      	lsrs	r2, r3, #16
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	4413      	add	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	895b      	ldrh	r3, [r3, #10]
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00e      	beq.n	8006218 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	bf0c      	ite	eq
 8006200:	2301      	moveq	r3, #1
 8006202:	2300      	movne	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	b29a      	uxth	r2, r3
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	b2db      	uxtb	r3, r3
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1d0      	bne.n	80061c6 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	b29a      	uxth	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	b2db      	uxtb	r3, r3
 8006236:	4313      	orrs	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	b29b      	uxth	r3, r3
 800623e:	43db      	mvns	r3, r3
 8006240:	b29b      	uxth	r3, r3
}
 8006242:	4618      	mov	r0, r3
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8006254:	f001 fd50 	bl	8007cf8 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006258:	f000 f8d4 	bl	8006404 <mem_init>
  memp_init();
 800625c:	f000 fc3a 	bl	8006ad4 <memp_init>
  pbuf_init();
  netif_init();
 8006260:	f000 fd00 	bl	8006c64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006264:	f008 f804 	bl	800e270 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006268:	f001 fd4e 	bl	8007d08 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800626c:	f007 ff76 	bl	800e15c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <ptr_to_mem+0x20>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	4413      	add	r3, r2
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	200004f4 	.word	0x200004f4

0800629c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <mem_to_ptr+0x20>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	b29b      	uxth	r3, r3
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	200004f4 	.word	0x200004f4

080062c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80062c8:	4b45      	ldr	r3, [pc, #276]	; (80063e0 <plug_holes+0x120>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d206      	bcs.n	80062e0 <plug_holes+0x20>
 80062d2:	4b44      	ldr	r3, [pc, #272]	; (80063e4 <plug_holes+0x124>)
 80062d4:	f240 12df 	movw	r2, #479	; 0x1df
 80062d8:	4943      	ldr	r1, [pc, #268]	; (80063e8 <plug_holes+0x128>)
 80062da:	4844      	ldr	r0, [pc, #272]	; (80063ec <plug_holes+0x12c>)
 80062dc:	f00d f956 	bl	801358c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80062e0:	4b43      	ldr	r3, [pc, #268]	; (80063f0 <plug_holes+0x130>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d306      	bcc.n	80062f8 <plug_holes+0x38>
 80062ea:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <plug_holes+0x124>)
 80062ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80062f0:	4940      	ldr	r1, [pc, #256]	; (80063f4 <plug_holes+0x134>)
 80062f2:	483e      	ldr	r0, [pc, #248]	; (80063ec <plug_holes+0x12c>)
 80062f4:	f00d f94a 	bl	801358c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	791b      	ldrb	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d006      	beq.n	800630e <plug_holes+0x4e>
 8006300:	4b38      	ldr	r3, [pc, #224]	; (80063e4 <plug_holes+0x124>)
 8006302:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006306:	493c      	ldr	r1, [pc, #240]	; (80063f8 <plug_holes+0x138>)
 8006308:	4838      	ldr	r0, [pc, #224]	; (80063ec <plug_holes+0x12c>)
 800630a:	f00d f93f 	bl	801358c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006316:	d906      	bls.n	8006326 <plug_holes+0x66>
 8006318:	4b32      	ldr	r3, [pc, #200]	; (80063e4 <plug_holes+0x124>)
 800631a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800631e:	4937      	ldr	r1, [pc, #220]	; (80063fc <plug_holes+0x13c>)
 8006320:	4832      	ldr	r0, [pc, #200]	; (80063ec <plug_holes+0x12c>)
 8006322:	f00d f933 	bl	801358c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff ffa4 	bl	8006278 <ptr_to_mem>
 8006330:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	429a      	cmp	r2, r3
 8006338:	d024      	beq.n	8006384 <plug_holes+0xc4>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	791b      	ldrb	r3, [r3, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d120      	bne.n	8006384 <plug_holes+0xc4>
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <plug_holes+0x130>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	429a      	cmp	r2, r3
 800634a:	d01b      	beq.n	8006384 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800634c:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <plug_holes+0x140>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	429a      	cmp	r2, r3
 8006354:	d102      	bne.n	800635c <plug_holes+0x9c>
      lfree = mem;
 8006356:	4a2a      	ldr	r2, [pc, #168]	; (8006400 <plug_holes+0x140>)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	881a      	ldrh	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800636c:	d00a      	beq.n	8006384 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff ff80 	bl	8006278 <ptr_to_mem>
 8006378:	4604      	mov	r4, r0
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff ff8e 	bl	800629c <mem_to_ptr>
 8006380:	4603      	mov	r3, r0
 8006382:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	885b      	ldrh	r3, [r3, #2]
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff ff75 	bl	8006278 <ptr_to_mem>
 800638e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	429a      	cmp	r2, r3
 8006396:	d01f      	beq.n	80063d8 <plug_holes+0x118>
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	791b      	ldrb	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11b      	bne.n	80063d8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80063a0:	4b17      	ldr	r3, [pc, #92]	; (8006400 <plug_holes+0x140>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d102      	bne.n	80063b0 <plug_holes+0xf0>
      lfree = pmem;
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <plug_holes+0x140>)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	881a      	ldrh	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80063c0:	d00a      	beq.n	80063d8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff ff56 	bl	8006278 <ptr_to_mem>
 80063cc:	4604      	mov	r4, r0
 80063ce:	68b8      	ldr	r0, [r7, #8]
 80063d0:	f7ff ff64 	bl	800629c <mem_to_ptr>
 80063d4:	4603      	mov	r3, r0
 80063d6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd90      	pop	{r4, r7, pc}
 80063e0:	200004f4 	.word	0x200004f4
 80063e4:	08014cc4 	.word	0x08014cc4
 80063e8:	08014cf4 	.word	0x08014cf4
 80063ec:	08014d0c 	.word	0x08014d0c
 80063f0:	200004f8 	.word	0x200004f8
 80063f4:	08014d34 	.word	0x08014d34
 80063f8:	08014d50 	.word	0x08014d50
 80063fc:	08014d6c 	.word	0x08014d6c
 8006400:	200004fc 	.word	0x200004fc

08006404 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800640a:	4b19      	ldr	r3, [pc, #100]	; (8006470 <mem_init+0x6c>)
 800640c:	4a19      	ldr	r2, [pc, #100]	; (8006474 <mem_init+0x70>)
 800640e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006410:	4b17      	ldr	r3, [pc, #92]	; (8006470 <mem_init+0x6c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800641c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800642a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800642e:	f7ff ff23 	bl	8006278 <ptr_to_mem>
 8006432:	4603      	mov	r3, r0
 8006434:	4a10      	ldr	r2, [pc, #64]	; (8006478 <mem_init+0x74>)
 8006436:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <mem_init+0x74>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2201      	movs	r2, #1
 800643e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006440:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <mem_init+0x74>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006448:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <mem_init+0x74>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006452:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <mem_init+0x6c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a08      	ldr	r2, [pc, #32]	; (800647c <mem_init+0x78>)
 800645a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 800645c:	4b08      	ldr	r3, [pc, #32]	; (8006480 <mem_init+0x7c>)
 800645e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006462:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	200004f4 	.word	0x200004f4
 8006474:	2000454c 	.word	0x2000454c
 8006478:	200004f8 	.word	0x200004f8
 800647c:	200004fc 	.word	0x200004fc
 8006480:	20007a48 	.word	0x20007a48

08006484 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ff05 	bl	800629c <mem_to_ptr>
 8006492:	4603      	mov	r3, r0
 8006494:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff feec 	bl	8006278 <ptr_to_mem>
 80064a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	885b      	ldrh	r3, [r3, #2]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fee6 	bl	8006278 <ptr_to_mem>
 80064ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064b6:	d818      	bhi.n	80064ea <mem_link_valid+0x66>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	885b      	ldrh	r3, [r3, #2]
 80064bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80064c0:	d813      	bhi.n	80064ea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80064c6:	8afa      	ldrh	r2, [r7, #22]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d004      	beq.n	80064d6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	8afa      	ldrh	r2, [r7, #22]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d109      	bne.n	80064ea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <mem_link_valid+0x74>)
 80064d8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d006      	beq.n	80064ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	8afa      	ldrh	r2, [r7, #22]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d001      	beq.n	80064ee <mem_link_valid+0x6a>
    return 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	e000      	b.n	80064f0 <mem_link_valid+0x6c>
  }
  return 1;
 80064ee:	2301      	movs	r3, #1
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	200004f8 	.word	0x200004f8

080064fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d068      	beq.n	80065dc <mem_free+0xe0>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3b06      	subs	r3, #6
 800650e:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006510:	4b34      	ldr	r3, [pc, #208]	; (80065e4 <mem_free+0xe8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	429a      	cmp	r2, r3
 8006518:	d306      	bcc.n	8006528 <mem_free+0x2c>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f103 020c 	add.w	r2, r3, #12
 8006520:	4b31      	ldr	r3, [pc, #196]	; (80065e8 <mem_free+0xec>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d90f      	bls.n	8006548 <mem_free+0x4c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006528:	4b30      	ldr	r3, [pc, #192]	; (80065ec <mem_free+0xf0>)
 800652a:	f240 227f 	movw	r2, #639	; 0x27f
 800652e:	4930      	ldr	r1, [pc, #192]	; (80065f0 <mem_free+0xf4>)
 8006530:	4830      	ldr	r0, [pc, #192]	; (80065f4 <mem_free+0xf8>)
 8006532:	f00d f82b 	bl	801358c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006536:	4b30      	ldr	r3, [pc, #192]	; (80065f8 <mem_free+0xfc>)
 8006538:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800653c:	3301      	adds	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	4b2d      	ldr	r3, [pc, #180]	; (80065f8 <mem_free+0xfc>)
 8006542:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 8006546:	e04a      	b.n	80065de <mem_free+0xe2>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	791b      	ldrb	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10f      	bne.n	8006570 <mem_free+0x74>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006550:	4b26      	ldr	r3, [pc, #152]	; (80065ec <mem_free+0xf0>)
 8006552:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006556:	4929      	ldr	r1, [pc, #164]	; (80065fc <mem_free+0x100>)
 8006558:	4826      	ldr	r0, [pc, #152]	; (80065f4 <mem_free+0xf8>)
 800655a:	f00d f817 	bl	801358c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800655e:	4b26      	ldr	r3, [pc, #152]	; (80065f8 <mem_free+0xfc>)
 8006560:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006564:	3301      	adds	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	4b23      	ldr	r3, [pc, #140]	; (80065f8 <mem_free+0xfc>)
 800656a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 800656e:	e036      	b.n	80065de <mem_free+0xe2>
  }

  if (!mem_link_valid(mem)) {
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff ff87 	bl	8006484 <mem_link_valid>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10f      	bne.n	800659c <mem_free+0xa0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <mem_free+0xf0>)
 800657e:	f240 2295 	movw	r2, #661	; 0x295
 8006582:	491f      	ldr	r1, [pc, #124]	; (8006600 <mem_free+0x104>)
 8006584:	481b      	ldr	r0, [pc, #108]	; (80065f4 <mem_free+0xf8>)
 8006586:	f00d f801 	bl	801358c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800658a:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <mem_free+0xfc>)
 800658c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006590:	3301      	adds	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <mem_free+0xfc>)
 8006596:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 800659a:	e020      	b.n	80065de <mem_free+0xe2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80065a2:	4b18      	ldr	r3, [pc, #96]	; (8006604 <mem_free+0x108>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d202      	bcs.n	80065b2 <mem_free+0xb6>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80065ac:	4a15      	ldr	r2, [pc, #84]	; (8006604 <mem_free+0x108>)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80065b2:	4b11      	ldr	r3, [pc, #68]	; (80065f8 <mem_free+0xfc>)
 80065b4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <mem_free+0xe8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68f9      	ldr	r1, [r7, #12]
 80065be:	1acb      	subs	r3, r1, r3
 80065c0:	b299      	uxth	r1, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	1acb      	subs	r3, r1, r3
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	4413      	add	r3, r2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <mem_free+0xfc>)
 80065d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff fe73 	bl	80062c0 <plug_holes>
 80065da:	e000      	b.n	80065de <mem_free+0xe2>
    return;
 80065dc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200004f4 	.word	0x200004f4
 80065e8:	200004f8 	.word	0x200004f8
 80065ec:	08014cc4 	.word	0x08014cc4
 80065f0:	08014d98 	.word	0x08014d98
 80065f4:	08014d0c 	.word	0x08014d0c
 80065f8:	20007a48 	.word	0x20007a48
 80065fc:	08014db4 	.word	0x08014db4
 8006600:	08014ddc 	.word	0x08014ddc
 8006604:	200004fc 	.word	0x200004fc

08006608 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006618:	8bfb      	ldrh	r3, [r7, #30]
 800661a:	2b0b      	cmp	r3, #11
 800661c:	d801      	bhi.n	8006622 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800661e:	230c      	movs	r3, #12
 8006620:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006622:	8bfb      	ldrh	r3, [r7, #30]
 8006624:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006628:	d803      	bhi.n	8006632 <mem_trim+0x2a>
 800662a:	8bfa      	ldrh	r2, [r7, #30]
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	429a      	cmp	r2, r3
 8006630:	d201      	bcs.n	8006636 <mem_trim+0x2e>
    return NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	e0ec      	b.n	8006810 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006636:	4b78      	ldr	r3, [pc, #480]	; (8006818 <mem_trim+0x210>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	429a      	cmp	r2, r3
 800663e:	d304      	bcc.n	800664a <mem_trim+0x42>
 8006640:	4b76      	ldr	r3, [pc, #472]	; (800681c <mem_trim+0x214>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d306      	bcc.n	8006658 <mem_trim+0x50>
 800664a:	4b75      	ldr	r3, [pc, #468]	; (8006820 <mem_trim+0x218>)
 800664c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006650:	4974      	ldr	r1, [pc, #464]	; (8006824 <mem_trim+0x21c>)
 8006652:	4875      	ldr	r0, [pc, #468]	; (8006828 <mem_trim+0x220>)
 8006654:	f00c ff9a 	bl	801358c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006658:	4b6f      	ldr	r3, [pc, #444]	; (8006818 <mem_trim+0x210>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	429a      	cmp	r2, r3
 8006660:	d304      	bcc.n	800666c <mem_trim+0x64>
 8006662:	4b6e      	ldr	r3, [pc, #440]	; (800681c <mem_trim+0x214>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	d309      	bcc.n	8006680 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800666c:	4b6f      	ldr	r3, [pc, #444]	; (800682c <mem_trim+0x224>)
 800666e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006672:	3301      	adds	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	4b6d      	ldr	r3, [pc, #436]	; (800682c <mem_trim+0x224>)
 8006678:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return rmem;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	e0c7      	b.n	8006810 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3b06      	subs	r3, #6
 8006684:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006686:	69b8      	ldr	r0, [r7, #24]
 8006688:	f7ff fe08 	bl	800629c <mem_to_ptr>
 800668c:	4603      	mov	r3, r0
 800668e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	881a      	ldrh	r2, [r3, #0]
 8006694:	8afb      	ldrh	r3, [r7, #22]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b06      	subs	r3, #6
 800669c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800669e:	8bfa      	ldrh	r2, [r7, #30]
 80066a0:	8abb      	ldrh	r3, [r7, #20]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d906      	bls.n	80066b4 <mem_trim+0xac>
 80066a6:	4b5e      	ldr	r3, [pc, #376]	; (8006820 <mem_trim+0x218>)
 80066a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80066ac:	4960      	ldr	r1, [pc, #384]	; (8006830 <mem_trim+0x228>)
 80066ae:	485e      	ldr	r0, [pc, #376]	; (8006828 <mem_trim+0x220>)
 80066b0:	f00c ff6c 	bl	801358c <iprintf>
  if (newsize > size) {
 80066b4:	8bfa      	ldrh	r2, [r7, #30]
 80066b6:	8abb      	ldrh	r3, [r7, #20]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d901      	bls.n	80066c0 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	e0a7      	b.n	8006810 <mem_trim+0x208>
  }
  if (newsize == size) {
 80066c0:	8bfa      	ldrh	r2, [r7, #30]
 80066c2:	8abb      	ldrh	r3, [r7, #20]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d101      	bne.n	80066cc <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	e0a1      	b.n	8006810 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff fdd1 	bl	8006278 <ptr_to_mem>
 80066d6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	791b      	ldrb	r3, [r3, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d14b      	bne.n	8006778 <mem_trim+0x170>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80066e8:	d106      	bne.n	80066f8 <mem_trim+0xf0>
 80066ea:	4b4d      	ldr	r3, [pc, #308]	; (8006820 <mem_trim+0x218>)
 80066ec:	f240 22f5 	movw	r2, #757	; 0x2f5
 80066f0:	4950      	ldr	r1, [pc, #320]	; (8006834 <mem_trim+0x22c>)
 80066f2:	484d      	ldr	r0, [pc, #308]	; (8006828 <mem_trim+0x220>)
 80066f4:	f00c ff4a 	bl	801358c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80066fe:	8afa      	ldrh	r2, [r7, #22]
 8006700:	8bfb      	ldrh	r3, [r7, #30]
 8006702:	4413      	add	r3, r2
 8006704:	b29b      	uxth	r3, r3
 8006706:	3306      	adds	r3, #6
 8006708:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800670a:	4b4b      	ldr	r3, [pc, #300]	; (8006838 <mem_trim+0x230>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	429a      	cmp	r2, r3
 8006712:	d106      	bne.n	8006722 <mem_trim+0x11a>
      lfree = ptr_to_mem(ptr2);
 8006714:	89fb      	ldrh	r3, [r7, #14]
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fdae 	bl	8006278 <ptr_to_mem>
 800671c:	4603      	mov	r3, r0
 800671e:	4a46      	ldr	r2, [pc, #280]	; (8006838 <mem_trim+0x230>)
 8006720:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006722:	89fb      	ldrh	r3, [r7, #14]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fda7 	bl	8006278 <ptr_to_mem>
 800672a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2200      	movs	r2, #0
 8006730:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	89ba      	ldrh	r2, [r7, #12]
 8006736:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	8afa      	ldrh	r2, [r7, #22]
 800673c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	89fa      	ldrh	r2, [r7, #14]
 8006742:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800674c:	d007      	beq.n	800675e <mem_trim+0x156>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fd90 	bl	8006278 <ptr_to_mem>
 8006758:	4602      	mov	r2, r0
 800675a:	89fb      	ldrh	r3, [r7, #14]
 800675c:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800675e:	4b33      	ldr	r3, [pc, #204]	; (800682c <mem_trim+0x224>)
 8006760:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006764:	8bf9      	ldrh	r1, [r7, #30]
 8006766:	8abb      	ldrh	r3, [r7, #20]
 8006768:	1acb      	subs	r3, r1, r3
 800676a:	b29b      	uxth	r3, r3
 800676c:	4413      	add	r3, r2
 800676e:	b29a      	uxth	r2, r3
 8006770:	4b2e      	ldr	r3, [pc, #184]	; (800682c <mem_trim+0x224>)
 8006772:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8006776:	e04a      	b.n	800680e <mem_trim+0x206>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006778:	8bfb      	ldrh	r3, [r7, #30]
 800677a:	f103 0212 	add.w	r2, r3, #18
 800677e:	8abb      	ldrh	r3, [r7, #20]
 8006780:	429a      	cmp	r2, r3
 8006782:	d844      	bhi.n	800680e <mem_trim+0x206>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006784:	8afa      	ldrh	r2, [r7, #22]
 8006786:	8bfb      	ldrh	r3, [r7, #30]
 8006788:	4413      	add	r3, r2
 800678a:	b29b      	uxth	r3, r3
 800678c:	3306      	adds	r3, #6
 800678e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006798:	d106      	bne.n	80067a8 <mem_trim+0x1a0>
 800679a:	4b21      	ldr	r3, [pc, #132]	; (8006820 <mem_trim+0x218>)
 800679c:	f240 3216 	movw	r2, #790	; 0x316
 80067a0:	4924      	ldr	r1, [pc, #144]	; (8006834 <mem_trim+0x22c>)
 80067a2:	4821      	ldr	r0, [pc, #132]	; (8006828 <mem_trim+0x220>)
 80067a4:	f00c fef2 	bl	801358c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fd64 	bl	8006278 <ptr_to_mem>
 80067b0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <mem_trim+0x230>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d202      	bcs.n	80067c2 <mem_trim+0x1ba>
      lfree = mem2;
 80067bc:	4a1e      	ldr	r2, [pc, #120]	; (8006838 <mem_trim+0x230>)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2200      	movs	r2, #0
 80067c6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	881a      	ldrh	r2, [r3, #0]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	8afa      	ldrh	r2, [r7, #22]
 80067d4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	89fa      	ldrh	r2, [r7, #14]
 80067da:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80067e4:	d007      	beq.n	80067f6 <mem_trim+0x1ee>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fd44 	bl	8006278 <ptr_to_mem>
 80067f0:	4602      	mov	r2, r0
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80067f6:	4b0d      	ldr	r3, [pc, #52]	; (800682c <mem_trim+0x224>)
 80067f8:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80067fc:	8bf9      	ldrh	r1, [r7, #30]
 80067fe:	8abb      	ldrh	r3, [r7, #20]
 8006800:	1acb      	subs	r3, r1, r3
 8006802:	b29b      	uxth	r3, r3
 8006804:	4413      	add	r3, r2
 8006806:	b29a      	uxth	r2, r3
 8006808:	4b08      	ldr	r3, [pc, #32]	; (800682c <mem_trim+0x224>)
 800680a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800680e:	687b      	ldr	r3, [r7, #4]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	200004f4 	.word	0x200004f4
 800681c:	200004f8 	.word	0x200004f8
 8006820:	08014cc4 	.word	0x08014cc4
 8006824:	08014e10 	.word	0x08014e10
 8006828:	08014d0c 	.word	0x08014d0c
 800682c:	20007a48 	.word	0x20007a48
 8006830:	08014e28 	.word	0x08014e28
 8006834:	08014e48 	.word	0x08014e48
 8006838:	200004fc 	.word	0x200004fc

0800683c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b089      	sub	sp, #36	; 0x24
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <mem_malloc+0x14>
    return NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	e0fa      	b.n	8006a46 <mem_malloc+0x20a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006854:	8bbb      	ldrh	r3, [r7, #28]
 8006856:	2b0b      	cmp	r3, #11
 8006858:	d801      	bhi.n	800685e <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800685a:	230c      	movs	r3, #12
 800685c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800685e:	8bbb      	ldrh	r3, [r7, #28]
 8006860:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006864:	d803      	bhi.n	800686e <mem_malloc+0x32>
 8006866:	8bba      	ldrh	r2, [r7, #28]
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	429a      	cmp	r2, r3
 800686c:	d201      	bcs.n	8006872 <mem_malloc+0x36>
    return NULL;
 800686e:	2300      	movs	r3, #0
 8006870:	e0e9      	b.n	8006a46 <mem_malloc+0x20a>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006872:	4b77      	ldr	r3, [pc, #476]	; (8006a50 <mem_malloc+0x214>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fd10 	bl	800629c <mem_to_ptr>
 800687c:	4603      	mov	r3, r0
 800687e:	83fb      	strh	r3, [r7, #30]
 8006880:	e0d1      	b.n	8006a26 <mem_malloc+0x1ea>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006882:	8bfb      	ldrh	r3, [r7, #30]
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fcf7 	bl	8006278 <ptr_to_mem>
 800688a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	791b      	ldrb	r3, [r3, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 80c1 	bne.w	8006a18 <mem_malloc+0x1dc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	8bfb      	ldrh	r3, [r7, #30]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	1f9a      	subs	r2, r3, #6
 80068a2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80068a4:	429a      	cmp	r2, r3
 80068a6:	f0c0 80b7 	bcc.w	8006a18 <mem_malloc+0x1dc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	8bfb      	ldrh	r3, [r7, #30]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	1f9a      	subs	r2, r3, #6
 80068b6:	8bbb      	ldrh	r3, [r7, #28]
 80068b8:	3312      	adds	r3, #18
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d34c      	bcc.n	8006958 <mem_malloc+0x11c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80068be:	8bfa      	ldrh	r2, [r7, #30]
 80068c0:	8bbb      	ldrh	r3, [r7, #28]
 80068c2:	4413      	add	r3, r2
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3306      	adds	r3, #6
 80068c8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80068ca:	8a7b      	ldrh	r3, [r7, #18]
 80068cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068d0:	d106      	bne.n	80068e0 <mem_malloc+0xa4>
 80068d2:	4b60      	ldr	r3, [pc, #384]	; (8006a54 <mem_malloc+0x218>)
 80068d4:	f240 3287 	movw	r2, #903	; 0x387
 80068d8:	495f      	ldr	r1, [pc, #380]	; (8006a58 <mem_malloc+0x21c>)
 80068da:	4860      	ldr	r0, [pc, #384]	; (8006a5c <mem_malloc+0x220>)
 80068dc:	f00c fe56 	bl	801358c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80068e0:	8a7b      	ldrh	r3, [r7, #18]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff fcc8 	bl	8006278 <ptr_to_mem>
 80068e8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	881a      	ldrh	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8bfa      	ldrh	r2, [r7, #30]
 80068fc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	8a7a      	ldrh	r2, [r7, #18]
 8006902:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2201      	movs	r2, #1
 8006908:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006912:	d007      	beq.n	8006924 <mem_malloc+0xe8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff fcad 	bl	8006278 <ptr_to_mem>
 800691e:	4602      	mov	r2, r0
 8006920:	8a7b      	ldrh	r3, [r7, #18]
 8006922:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8006924:	4b4e      	ldr	r3, [pc, #312]	; (8006a60 <mem_malloc+0x224>)
 8006926:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800692a:	8bbb      	ldrh	r3, [r7, #28]
 800692c:	4413      	add	r3, r2
 800692e:	b29b      	uxth	r3, r3
 8006930:	3306      	adds	r3, #6
 8006932:	b29a      	uxth	r2, r3
 8006934:	4b4a      	ldr	r3, [pc, #296]	; (8006a60 <mem_malloc+0x224>)
 8006936:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800693a:	4b49      	ldr	r3, [pc, #292]	; (8006a60 <mem_malloc+0x224>)
 800693c:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8006940:	4b47      	ldr	r3, [pc, #284]	; (8006a60 <mem_malloc+0x224>)
 8006942:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8006946:	429a      	cmp	r2, r3
 8006948:	d227      	bcs.n	800699a <mem_malloc+0x15e>
 800694a:	4b45      	ldr	r3, [pc, #276]	; (8006a60 <mem_malloc+0x224>)
 800694c:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006950:	4b43      	ldr	r3, [pc, #268]	; (8006a60 <mem_malloc+0x224>)
 8006952:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8006956:	e020      	b.n	800699a <mem_malloc+0x15e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2201      	movs	r2, #1
 800695c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800695e:	4b40      	ldr	r3, [pc, #256]	; (8006a60 <mem_malloc+0x224>)
 8006960:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	4413      	add	r3, r2
 800696a:	b29c      	uxth	r4, r3
 800696c:	6978      	ldr	r0, [r7, #20]
 800696e:	f7ff fc95 	bl	800629c <mem_to_ptr>
 8006972:	4603      	mov	r3, r0
 8006974:	1ae3      	subs	r3, r4, r3
 8006976:	b29a      	uxth	r2, r3
 8006978:	4b39      	ldr	r3, [pc, #228]	; (8006a60 <mem_malloc+0x224>)
 800697a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800697e:	4b38      	ldr	r3, [pc, #224]	; (8006a60 <mem_malloc+0x224>)
 8006980:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8006984:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <mem_malloc+0x224>)
 8006986:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800698a:	429a      	cmp	r2, r3
 800698c:	d205      	bcs.n	800699a <mem_malloc+0x15e>
 800698e:	4b34      	ldr	r3, [pc, #208]	; (8006a60 <mem_malloc+0x224>)
 8006990:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8006994:	4b32      	ldr	r3, [pc, #200]	; (8006a60 <mem_malloc+0x224>)
 8006996:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800699a:	4b2d      	ldr	r3, [pc, #180]	; (8006a50 <mem_malloc+0x214>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d127      	bne.n	80069f4 <mem_malloc+0x1b8>
          struct mem *cur = lfree;
 80069a4:	4b2a      	ldr	r3, [pc, #168]	; (8006a50 <mem_malloc+0x214>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80069aa:	e005      	b.n	80069b8 <mem_malloc+0x17c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff fc61 	bl	8006278 <ptr_to_mem>
 80069b6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	791b      	ldrb	r3, [r3, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <mem_malloc+0x18e>
 80069c0:	4b28      	ldr	r3, [pc, #160]	; (8006a64 <mem_malloc+0x228>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d1f0      	bne.n	80069ac <mem_malloc+0x170>
          }
          lfree = cur;
 80069ca:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <mem_malloc+0x214>)
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80069d0:	4b1f      	ldr	r3, [pc, #124]	; (8006a50 <mem_malloc+0x214>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <mem_malloc+0x228>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d00b      	beq.n	80069f4 <mem_malloc+0x1b8>
 80069dc:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <mem_malloc+0x214>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	791b      	ldrb	r3, [r3, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <mem_malloc+0x1b8>
 80069e6:	4b1b      	ldr	r3, [pc, #108]	; (8006a54 <mem_malloc+0x218>)
 80069e8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80069ec:	491e      	ldr	r1, [pc, #120]	; (8006a68 <mem_malloc+0x22c>)
 80069ee:	481b      	ldr	r0, [pc, #108]	; (8006a5c <mem_malloc+0x220>)
 80069f0:	f00c fdcc 	bl	801358c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80069f4:	8bba      	ldrh	r2, [r7, #28]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	4413      	add	r3, r2
 80069fa:	3306      	adds	r3, #6
 80069fc:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <mem_malloc+0x228>)
 80069fe:	6812      	ldr	r2, [r2, #0]
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d906      	bls.n	8006a12 <mem_malloc+0x1d6>
 8006a04:	4b13      	ldr	r3, [pc, #76]	; (8006a54 <mem_malloc+0x218>)
 8006a06:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006a0a:	4918      	ldr	r1, [pc, #96]	; (8006a6c <mem_malloc+0x230>)
 8006a0c:	4813      	ldr	r0, [pc, #76]	; (8006a5c <mem_malloc+0x220>)
 8006a0e:	f00c fdbd 	bl	801358c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	3306      	adds	r3, #6
 8006a16:	e016      	b.n	8006a46 <mem_malloc+0x20a>
         ptr = ptr_to_mem(ptr)->next) {
 8006a18:	8bfb      	ldrh	r3, [r7, #30]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff fc2c 	bl	8006278 <ptr_to_mem>
 8006a20:	4603      	mov	r3, r0
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006a26:	8bfa      	ldrh	r2, [r7, #30]
 8006a28:	8bbb      	ldrh	r3, [r7, #28]
 8006a2a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	f4ff af27 	bcc.w	8006882 <mem_malloc+0x46>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8006a34:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <mem_malloc+0x224>)
 8006a36:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <mem_malloc+0x224>)
 8006a40:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3724      	adds	r7, #36	; 0x24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd90      	pop	{r4, r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	200004fc 	.word	0x200004fc
 8006a54:	08014cc4 	.word	0x08014cc4
 8006a58:	08014e48 	.word	0x08014e48
 8006a5c:	08014d0c 	.word	0x08014d0c
 8006a60:	20007a48 	.word	0x20007a48
 8006a64:	200004f8 	.word	0x200004f8
 8006a68:	08014e5c 	.word	0x08014e5c
 8006a6c:	08014e78 	.word	0x08014e78

08006a70 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	e011      	b.n	8006ab0 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	889b      	ldrh	r3, [r3, #4]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	88db      	ldrh	r3, [r3, #6]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	dbe7      	blt.n	8006a8c <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	88d2      	ldrh	r2, [r2, #6]
 8006ac4:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
	...

08006ad4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006ada:	2300      	movs	r3, #0
 8006adc:	80fb      	strh	r3, [r7, #6]
 8006ade:	e014      	b.n	8006b0a <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	; (8006b1c <memp_init+0x48>)
 8006ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff ffc1 	bl	8006a70 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <memp_init+0x48>)
 8006af2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	6812      	ldr	r2, [r2, #0]
 8006afa:	4909      	ldr	r1, [pc, #36]	; (8006b20 <memp_init+0x4c>)
 8006afc:	332c      	adds	r3, #44	; 0x2c
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	3301      	adds	r3, #1
 8006b08:	80fb      	strh	r3, [r7, #6]
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d9e7      	bls.n	8006ae0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	080396cc 	.word	0x080396cc
 8006b20:	20007a48 	.word	0x20007a48

08006b24 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01a      	beq.n	8006b70 <do_memp_malloc_pool+0x4c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	6812      	ldr	r2, [r2, #0]
 8006b42:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	889a      	ldrh	r2, [r3, #4]
 8006b4a:	3201      	adds	r2, #1
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	889a      	ldrh	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	88db      	ldrh	r3, [r3, #6]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d905      	bls.n	8006b6c <do_memp_malloc_pool+0x48>
      desc->stats->max = desc->stats->used;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	8892      	ldrh	r2, [r2, #4]
 8006b6a:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	e006      	b.n	8006b7e <do_memp_malloc_pool+0x5a>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	881a      	ldrh	r2, [r3, #0]
 8006b76:	3201      	adds	r2, #1
 8006b78:	b292      	uxth	r2, r2
 8006b7a:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d908      	bls.n	8006bae <memp_malloc+0x22>
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <memp_malloc+0x3c>)
 8006b9e:	f240 1257 	movw	r2, #343	; 0x157
 8006ba2:	490a      	ldr	r1, [pc, #40]	; (8006bcc <memp_malloc+0x40>)
 8006ba4:	480a      	ldr	r0, [pc, #40]	; (8006bd0 <memp_malloc+0x44>)
 8006ba6:	f00c fcf1 	bl	801358c <iprintf>
 8006baa:	2300      	movs	r3, #0
 8006bac:	e008      	b.n	8006bc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <memp_malloc+0x48>)
 8006bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ffb4 	bl	8006b24 <do_memp_malloc_pool>
 8006bbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	08014ea8 	.word	0x08014ea8
 8006bcc:	08014f14 	.word	0x08014f14
 8006bd0:	08014eec 	.word	0x08014eec
 8006bd4:	080396cc 	.word	0x080396cc

08006bd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	60fb      	str	r3, [r7, #12]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	889a      	ldrh	r2, [r3, #4]
 8006bec:	3a01      	subs	r2, #1
 8006bee:	b292      	uxth	r2, r2
 8006bf0:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d907      	bls.n	8006c32 <memp_free+0x22>
 8006c22:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <memp_free+0x44>)
 8006c24:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006c28:	490b      	ldr	r1, [pc, #44]	; (8006c58 <memp_free+0x48>)
 8006c2a:	480c      	ldr	r0, [pc, #48]	; (8006c5c <memp_free+0x4c>)
 8006c2c:	f00c fcae 	bl	801358c <iprintf>
 8006c30:	e00c      	b.n	8006c4c <memp_free+0x3c>

  if (mem == NULL) {
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d008      	beq.n	8006c4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <memp_free+0x50>)
 8006c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff ffc8 	bl	8006bd8 <do_memp_free_pool>
 8006c48:	e000      	b.n	8006c4c <memp_free+0x3c>
    return;
 8006c4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	08014ea8 	.word	0x08014ea8
 8006c58:	08014f34 	.word	0x08014f34
 8006c5c:	08014eec 	.word	0x08014eec
 8006c60:	080396cc 	.word	0x080396cc

08006c64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006c68:	bf00      	nop
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d108      	bne.n	8006c9a <netif_add+0x26>
 8006c88:	4b5b      	ldr	r3, [pc, #364]	; (8006df8 <netif_add+0x184>)
 8006c8a:	f240 1227 	movw	r2, #295	; 0x127
 8006c8e:	495b      	ldr	r1, [pc, #364]	; (8006dfc <netif_add+0x188>)
 8006c90:	485b      	ldr	r0, [pc, #364]	; (8006e00 <netif_add+0x18c>)
 8006c92:	f00c fc7b 	bl	801358c <iprintf>
 8006c96:	2300      	movs	r3, #0
 8006c98:	e0a9      	b.n	8006dee <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d108      	bne.n	8006cb2 <netif_add+0x3e>
 8006ca0:	4b55      	ldr	r3, [pc, #340]	; (8006df8 <netif_add+0x184>)
 8006ca2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006ca6:	4957      	ldr	r1, [pc, #348]	; (8006e04 <netif_add+0x190>)
 8006ca8:	4855      	ldr	r0, [pc, #340]	; (8006e00 <netif_add+0x18c>)
 8006caa:	f00c fc6f 	bl	801358c <iprintf>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e09d      	b.n	8006dee <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006cb8:	4b53      	ldr	r3, [pc, #332]	; (8006e08 <netif_add+0x194>)
 8006cba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006cc2:	4b51      	ldr	r3, [pc, #324]	; (8006e08 <netif_add+0x194>)
 8006cc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006ccc:	4b4e      	ldr	r3, [pc, #312]	; (8006e08 <netif_add+0x194>)
 8006cce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a49      	ldr	r2, [pc, #292]	; (8006e0c <netif_add+0x198>)
 8006ce6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3324      	adds	r3, #36	; 0x24
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f00c fc3c 	bl	801357c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a3a      	ldr	r2, [r7, #32]
 8006d0e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006d10:	4b3f      	ldr	r3, [pc, #252]	; (8006e10 <netif_add+0x19c>)
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d1e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 f914 	bl	8006f54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	4798      	blx	r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <netif_add+0xc8>
    return NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e058      	b.n	8006dee <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d103      	bne.n	8006d4e <netif_add+0xda>
        netif->num = 0;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006d52:	4b30      	ldr	r3, [pc, #192]	; (8006e14 <netif_add+0x1a0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	e02b      	b.n	8006db2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d106      	bne.n	8006d70 <netif_add+0xfc>
 8006d62:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <netif_add+0x184>)
 8006d64:	f240 128b 	movw	r2, #395	; 0x18b
 8006d68:	492b      	ldr	r1, [pc, #172]	; (8006e18 <netif_add+0x1a4>)
 8006d6a:	4825      	ldr	r0, [pc, #148]	; (8006e00 <netif_add+0x18c>)
 8006d6c:	f00c fc0e 	bl	801358c <iprintf>
        num_netifs++;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	3301      	adds	r3, #1
 8006d74:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	2bff      	cmp	r3, #255	; 0xff
 8006d7a:	dd06      	ble.n	8006d8a <netif_add+0x116>
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <netif_add+0x184>)
 8006d7e:	f240 128d 	movw	r2, #397	; 0x18d
 8006d82:	4926      	ldr	r1, [pc, #152]	; (8006e1c <netif_add+0x1a8>)
 8006d84:	481e      	ldr	r0, [pc, #120]	; (8006e00 <netif_add+0x18c>)
 8006d86:	f00c fc01 	bl	801358c <iprintf>
        if (netif2->num == netif->num) {
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d108      	bne.n	8006dac <netif_add+0x138>
          netif->num++;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006da0:	3301      	adds	r3, #1
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8006daa:	e005      	b.n	8006db8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1d0      	bne.n	8006d5a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1be      	bne.n	8006d3c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dc4:	2bfe      	cmp	r3, #254	; 0xfe
 8006dc6:	d103      	bne.n	8006dd0 <netif_add+0x15c>
    netif_num = 0;
 8006dc8:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <netif_add+0x19c>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e006      	b.n	8006dde <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <netif_add+0x19c>)
 8006ddc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <netif_add+0x1a0>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006de6:	4a0b      	ldr	r2, [pc, #44]	; (8006e14 <netif_add+0x1a0>)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	08014f50 	.word	0x08014f50
 8006dfc:	08014fe4 	.word	0x08014fe4
 8006e00:	08014fa0 	.word	0x08014fa0
 8006e04:	08015000 	.word	0x08015000
 8006e08:	08039740 	.word	0x08039740
 8006e0c:	08007167 	.word	0x08007167
 8006e10:	20000590 	.word	0x20000590
 8006e14:	20007a3c 	.word	0x20007a3c
 8006e18:	08015024 	.word	0x08015024
 8006e1c:	08015038 	.word	0x08015038

08006e20 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f002 fd83 	bl	8009938 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f007 ff2f 	bl	800ec98 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <netif_do_set_ipaddr+0x20>
 8006e56:	4b1d      	ldr	r3, [pc, #116]	; (8006ecc <netif_do_set_ipaddr+0x88>)
 8006e58:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006e5c:	491c      	ldr	r1, [pc, #112]	; (8006ed0 <netif_do_set_ipaddr+0x8c>)
 8006e5e:	481d      	ldr	r0, [pc, #116]	; (8006ed4 <netif_do_set_ipaddr+0x90>)
 8006e60:	f00c fb94 	bl	801358c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <netif_do_set_ipaddr+0x34>
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <netif_do_set_ipaddr+0x88>)
 8006e6c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006e70:	4917      	ldr	r1, [pc, #92]	; (8006ed0 <netif_do_set_ipaddr+0x8c>)
 8006e72:	4818      	ldr	r0, [pc, #96]	; (8006ed4 <netif_do_set_ipaddr+0x90>)
 8006e74:	f00c fb8a 	bl	801358c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d01c      	beq.n	8006ec0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006e96:	f107 0314 	add.w	r3, r7, #20
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ffbf 	bl	8006e20 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <netif_do_set_ipaddr+0x6a>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	e000      	b.n	8006eb0 <netif_do_set_ipaddr+0x6c>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 f8d2 	bl	8007060 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	08014f50 	.word	0x08014f50
 8006ed0:	08015068 	.word	0x08015068
 8006ed4:	08014fa0 	.word	0x08014fa0

08006ed8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3308      	adds	r3, #8
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d00a      	beq.n	8006f08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <netif_do_set_netmask+0x26>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	e000      	b.n	8006f00 <netif_do_set_netmask+0x28>
 8006efe:	2300      	movs	r3, #0
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	330c      	adds	r3, #12
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d00a      	beq.n	8006f46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <netif_do_set_gw+0x26>
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	e000      	b.n	8006f3e <netif_do_set_gw+0x28>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006f70:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <netif_set_addr+0x90>)
 8006f72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006f7a:	4b1a      	ldr	r3, [pc, #104]	; (8006fe4 <netif_set_addr+0x90>)
 8006f7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006f84:	4b17      	ldr	r3, [pc, #92]	; (8006fe4 <netif_set_addr+0x90>)
 8006f86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <netif_set_addr+0x42>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <netif_set_addr+0x46>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <netif_set_addr+0x48>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d006      	beq.n	8006fb2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006fa4:	f107 0310 	add.w	r3, r7, #16
 8006fa8:	461a      	mov	r2, r3
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff ff49 	bl	8006e44 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff ff8e 	bl	8006ed8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff ffa8 	bl	8006f16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006fcc:	f107 0310 	add.w	r3, r7, #16
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff ff35 	bl	8006e44 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006fda:	bf00      	nop
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	08039740 	.word	0x08039740

08006fe8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006ff0:	4a04      	ldr	r2, [pc, #16]	; (8007004 <netif_set_default+0x1c>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20007a40 	.word	0x20007a40

08007008 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d107      	bne.n	8007026 <netif_set_up+0x1e>
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <netif_set_up+0x4c>)
 8007018:	f44f 7254 	mov.w	r2, #848	; 0x350
 800701c:	490e      	ldr	r1, [pc, #56]	; (8007058 <netif_set_up+0x50>)
 800701e:	480f      	ldr	r0, [pc, #60]	; (800705c <netif_set_up+0x54>)
 8007020:	f00c fab4 	bl	801358c <iprintf>
 8007024:	e013      	b.n	800704e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10c      	bne.n	800704e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	b2da      	uxtb	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007046:	2103      	movs	r1, #3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f809 	bl	8007060 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	08014f50 	.word	0x08014f50
 8007058:	080150d8 	.word	0x080150d8
 800705c:	08014fa0 	.word	0x08014fa0

08007060 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <netif_issue_reports+0x20>
 8007072:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <netif_issue_reports+0x74>)
 8007074:	f240 326d 	movw	r2, #877	; 0x36d
 8007078:	4917      	ldr	r1, [pc, #92]	; (80070d8 <netif_issue_reports+0x78>)
 800707a:	4818      	ldr	r0, [pc, #96]	; (80070dc <netif_issue_reports+0x7c>)
 800707c:	f00c fa86 	bl	801358c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01e      	beq.n	80070cc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007094:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d013      	beq.n	80070ce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3304      	adds	r3, #4
 80070aa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00e      	beq.n	80070ce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f00a fbef 	bl	80118a8 <etharp_request>
 80070ca:	e000      	b.n	80070ce <netif_issue_reports+0x6e>
    return;
 80070cc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	08014f50 	.word	0x08014f50
 80070d8:	080150f4 	.word	0x080150f4
 80070dc:	08014fa0 	.word	0x08014fa0

080070e0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d107      	bne.n	80070fe <netif_set_down+0x1e>
 80070ee:	4b12      	ldr	r3, [pc, #72]	; (8007138 <netif_set_down+0x58>)
 80070f0:	f240 329b 	movw	r2, #923	; 0x39b
 80070f4:	4911      	ldr	r1, [pc, #68]	; (800713c <netif_set_down+0x5c>)
 80070f6:	4812      	ldr	r0, [pc, #72]	; (8007140 <netif_set_down+0x60>)
 80070f8:	f00c fa48 	bl	801358c <iprintf>
 80070fc:	e019      	b.n	8007132 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d012      	beq.n	8007132 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007112:	f023 0301 	bic.w	r3, r3, #1
 8007116:	b2da      	uxtb	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f009 ff33 	bl	8010f98 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	08014f50 	.word	0x08014f50
 800713c:	08015118 	.word	0x08015118
 8007140:	08014fa0 	.word	0x08014fa0

08007144 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	61da      	str	r2, [r3, #28]
  }
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007172:	f06f 030b 	mvn.w	r3, #11
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
	...

08007184 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d013      	beq.n	80071bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007194:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <netif_get_by_index+0x48>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e00c      	b.n	80071b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071a2:	3301      	adds	r3, #1
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	79fa      	ldrb	r2, [r7, #7]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d101      	bne.n	80071b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	e006      	b.n	80071be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1ef      	bne.n	800719c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20007a3c 	.word	0x20007a3c

080071d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <pbuf_free_ooseq+0x38>)
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071dc:	4b0b      	ldr	r3, [pc, #44]	; (800720c <pbuf_free_ooseq+0x3c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	e00a      	b.n	80071fa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f002 fbe1 	bl	80099b4 <tcp_free_ooseq>
      return;
 80071f2:	e005      	b.n	8007200 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	607b      	str	r3, [r7, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f1      	bne.n	80071e4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20007a44 	.word	0x20007a44
 800720c:	20007b24 	.word	0x20007b24

08007210 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007214:	4b03      	ldr	r3, [pc, #12]	; (8007224 <pbuf_pool_is_empty+0x14>)
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800721a:	bf00      	nop
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20007a44 	.word	0x20007a44

08007228 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	460b      	mov	r3, r1
 8007238:	80fb      	strh	r3, [r7, #6]
 800723a:	4613      	mov	r3, r2
 800723c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	88fa      	ldrh	r2, [r7, #6]
 800724e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	88ba      	ldrh	r2, [r7, #4]
 8007254:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007256:	8b3b      	ldrh	r3, [r7, #24]
 8007258:	b2da      	uxtb	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	7f3a      	ldrb	r2, [r7, #28]
 8007262:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2201      	movs	r2, #1
 8007268:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	73da      	strb	r2, [r3, #15]
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08c      	sub	sp, #48	; 0x30
 8007280:	af02      	add	r7, sp, #8
 8007282:	4603      	mov	r3, r0
 8007284:	71fb      	strb	r3, [r7, #7]
 8007286:	460b      	mov	r3, r1
 8007288:	80bb      	strh	r3, [r7, #4]
 800728a:	4613      	mov	r3, r2
 800728c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007292:	887b      	ldrh	r3, [r7, #2]
 8007294:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007298:	d067      	beq.n	800736a <pbuf_alloc+0xee>
 800729a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800729e:	f300 808e 	bgt.w	80073be <pbuf_alloc+0x142>
 80072a2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80072a6:	d010      	beq.n	80072ca <pbuf_alloc+0x4e>
 80072a8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80072ac:	f300 8087 	bgt.w	80073be <pbuf_alloc+0x142>
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d002      	beq.n	80072ba <pbuf_alloc+0x3e>
 80072b4:	2b41      	cmp	r3, #65	; 0x41
 80072b6:	f040 8082 	bne.w	80073be <pbuf_alloc+0x142>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80072ba:	887a      	ldrh	r2, [r7, #2]
 80072bc:	88bb      	ldrh	r3, [r7, #4]
 80072be:	4619      	mov	r1, r3
 80072c0:	2000      	movs	r0, #0
 80072c2:	f000 f893 	bl	80073ec <pbuf_alloc_reference>
 80072c6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80072c8:	e082      	b.n	80073d0 <pbuf_alloc+0x154>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80072d2:	88bb      	ldrh	r3, [r7, #4]
 80072d4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80072d6:	2008      	movs	r0, #8
 80072d8:	f7ff fc58 	bl	8006b8c <memp_malloc>
 80072dc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d109      	bne.n	80072f8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80072e4:	f7ff ff94 	bl	8007210 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80072ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072f0:	f000 fa64 	bl	80077bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e06c      	b.n	80073d2 <pbuf_alloc+0x156>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80072f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072fa:	f5c3 7313 	rsb	r3, r3, #588	; 0x24c
 80072fe:	3302      	adds	r3, #2
 8007300:	b29b      	uxth	r3, r3
 8007302:	8b7a      	ldrh	r2, [r7, #26]
 8007304:	4293      	cmp	r3, r2
 8007306:	bf28      	it	cs
 8007308:	4613      	movcs	r3, r2
 800730a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800730c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800730e:	3310      	adds	r3, #16
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	18d1      	adds	r1, r2, r3
 8007314:	89f8      	ldrh	r0, [r7, #14]
 8007316:	8b7a      	ldrh	r2, [r7, #26]
 8007318:	2300      	movs	r3, #0
 800731a:	9301      	str	r3, [sp, #4]
 800731c:	887b      	ldrh	r3, [r7, #2]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	4603      	mov	r3, r0
 8007322:	6938      	ldr	r0, [r7, #16]
 8007324:	f7ff ff80 	bl	8007228 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007328:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800732a:	f240 224e 	movw	r2, #590	; 0x24e
 800732e:	4293      	cmp	r3, r2
 8007330:	d106      	bne.n	8007340 <pbuf_alloc+0xc4>
 8007332:	4b2a      	ldr	r3, [pc, #168]	; (80073dc <pbuf_alloc+0x160>)
 8007334:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007338:	4929      	ldr	r1, [pc, #164]	; (80073e0 <pbuf_alloc+0x164>)
 800733a:	482a      	ldr	r0, [pc, #168]	; (80073e4 <pbuf_alloc+0x168>)
 800733c:	f00c f926 	bl	801358c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <pbuf_alloc+0xd0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
 800734a:	e002      	b.n	8007352 <pbuf_alloc+0xd6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007356:	8b7a      	ldrh	r2, [r7, #26]
 8007358:	89fb      	ldrh	r3, [r7, #14]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8007362:	8b7b      	ldrh	r3, [r7, #26]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1b6      	bne.n	80072d6 <pbuf_alloc+0x5a>
      break;
 8007368:	e032      	b.n	80073d0 <pbuf_alloc+0x154>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800736a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800736c:	88bb      	ldrh	r3, [r7, #4]
 800736e:	4413      	add	r3, r2
 8007370:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007372:	8b3b      	ldrh	r3, [r7, #24]
 8007374:	3310      	adds	r3, #16
 8007376:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007378:	8b3a      	ldrh	r2, [r7, #24]
 800737a:	88bb      	ldrh	r3, [r7, #4]
 800737c:	429a      	cmp	r2, r3
 800737e:	d303      	bcc.n	8007388 <pbuf_alloc+0x10c>
 8007380:	8afa      	ldrh	r2, [r7, #22]
 8007382:	88bb      	ldrh	r3, [r7, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	d201      	bcs.n	800738c <pbuf_alloc+0x110>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8007388:	2300      	movs	r3, #0
 800738a:	e022      	b.n	80073d2 <pbuf_alloc+0x156>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800738c:	8afb      	ldrh	r3, [r7, #22]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fa54 	bl	800683c <mem_malloc>
 8007394:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <pbuf_alloc+0x124>
        return NULL;
 800739c:	2300      	movs	r3, #0
 800739e:	e018      	b.n	80073d2 <pbuf_alloc+0x156>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80073a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80073a2:	3310      	adds	r3, #16
 80073a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a6:	18d1      	adds	r1, r2, r3
 80073a8:	88b8      	ldrh	r0, [r7, #4]
 80073aa:	88ba      	ldrh	r2, [r7, #4]
 80073ac:	2300      	movs	r3, #0
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	887b      	ldrh	r3, [r7, #2]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4603      	mov	r3, r0
 80073b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073b8:	f7ff ff36 	bl	8007228 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80073bc:	e008      	b.n	80073d0 <pbuf_alloc+0x154>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80073be:	4b07      	ldr	r3, [pc, #28]	; (80073dc <pbuf_alloc+0x160>)
 80073c0:	f240 1227 	movw	r2, #295	; 0x127
 80073c4:	4908      	ldr	r1, [pc, #32]	; (80073e8 <pbuf_alloc+0x16c>)
 80073c6:	4807      	ldr	r0, [pc, #28]	; (80073e4 <pbuf_alloc+0x168>)
 80073c8:	f00c f8e0 	bl	801358c <iprintf>
      return NULL;
 80073cc:	2300      	movs	r3, #0
 80073ce:	e000      	b.n	80073d2 <pbuf_alloc+0x156>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3728      	adds	r7, #40	; 0x28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	08015180 	.word	0x08015180
 80073e0:	080151b0 	.word	0x080151b0
 80073e4:	080151e4 	.word	0x080151e4
 80073e8:	0801520c 	.word	0x0801520c

080073ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	807b      	strh	r3, [r7, #2]
 80073f8:	4613      	mov	r3, r2
 80073fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80073fc:	883b      	ldrh	r3, [r7, #0]
 80073fe:	2b41      	cmp	r3, #65	; 0x41
 8007400:	d009      	beq.n	8007416 <pbuf_alloc_reference+0x2a>
 8007402:	883b      	ldrh	r3, [r7, #0]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d006      	beq.n	8007416 <pbuf_alloc_reference+0x2a>
 8007408:	4b0f      	ldr	r3, [pc, #60]	; (8007448 <pbuf_alloc_reference+0x5c>)
 800740a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800740e:	490f      	ldr	r1, [pc, #60]	; (800744c <pbuf_alloc_reference+0x60>)
 8007410:	480f      	ldr	r0, [pc, #60]	; (8007450 <pbuf_alloc_reference+0x64>)
 8007412:	f00c f8bb 	bl	801358c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007416:	2007      	movs	r0, #7
 8007418:	f7ff fbb8 	bl	8006b8c <memp_malloc>
 800741c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007424:	2300      	movs	r3, #0
 8007426:	e00b      	b.n	8007440 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007428:	8879      	ldrh	r1, [r7, #2]
 800742a:	887a      	ldrh	r2, [r7, #2]
 800742c:	2300      	movs	r3, #0
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	883b      	ldrh	r3, [r7, #0]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	460b      	mov	r3, r1
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fef5 	bl	8007228 <pbuf_init_alloced_pbuf>
  return p;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	08015180 	.word	0x08015180
 800744c:	08015228 	.word	0x08015228
 8007450:	080151e4 	.word	0x080151e4

08007454 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af02      	add	r7, sp, #8
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]
 8007460:	460b      	mov	r3, r1
 8007462:	81bb      	strh	r3, [r7, #12]
 8007464:	4613      	mov	r3, r2
 8007466:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800746c:	8a7a      	ldrh	r2, [r7, #18]
 800746e:	89bb      	ldrh	r3, [r7, #12]
 8007470:	441a      	add	r2, r3
 8007472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007474:	429a      	cmp	r2, r3
 8007476:	d901      	bls.n	800747c <pbuf_alloced_custom+0x28>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007478:	2300      	movs	r3, #0
 800747a:	e015      	b.n	80074a8 <pbuf_alloced_custom+0x54>
  }

  if (payload_mem != NULL) {
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <pbuf_alloced_custom+0x38>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007482:	8a7b      	ldrh	r3, [r7, #18]
 8007484:	6a3a      	ldr	r2, [r7, #32]
 8007486:	4413      	add	r3, r2
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	e001      	b.n	8007490 <pbuf_alloced_custom+0x3c>
  } else {
    payload = NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	89b9      	ldrh	r1, [r7, #12]
 8007494:	89ba      	ldrh	r2, [r7, #12]
 8007496:	2302      	movs	r3, #2
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	897b      	ldrh	r3, [r7, #10]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	460b      	mov	r3, r1
 80074a0:	6979      	ldr	r1, [r7, #20]
 80074a2:	f7ff fec1 	bl	8007228 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80074a6:	687b      	ldr	r3, [r7, #4]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <pbuf_realloc+0x20>
 80074c2:	4b3a      	ldr	r3, [pc, #232]	; (80075ac <pbuf_realloc+0xfc>)
 80074c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80074c8:	4939      	ldr	r1, [pc, #228]	; (80075b0 <pbuf_realloc+0x100>)
 80074ca:	483a      	ldr	r0, [pc, #232]	; (80075b4 <pbuf_realloc+0x104>)
 80074cc:	f00c f85e 	bl	801358c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	891b      	ldrh	r3, [r3, #8]
 80074d4:	887a      	ldrh	r2, [r7, #2]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d263      	bcs.n	80075a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	891a      	ldrh	r2, [r3, #8]
 80074de:	887b      	ldrh	r3, [r7, #2]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80074e4:	887b      	ldrh	r3, [r7, #2]
 80074e6:	817b      	strh	r3, [r7, #10]
  q = p;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80074ec:	e018      	b.n	8007520 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	895b      	ldrh	r3, [r3, #10]
 80074f2:	897a      	ldrh	r2, [r7, #10]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	891a      	ldrh	r2, [r3, #8]
 80074fc:	893b      	ldrh	r3, [r7, #8]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <pbuf_realloc+0x70>
 8007512:	4b26      	ldr	r3, [pc, #152]	; (80075ac <pbuf_realloc+0xfc>)
 8007514:	f240 12af 	movw	r2, #431	; 0x1af
 8007518:	4927      	ldr	r1, [pc, #156]	; (80075b8 <pbuf_realloc+0x108>)
 800751a:	4826      	ldr	r0, [pc, #152]	; (80075b4 <pbuf_realloc+0x104>)
 800751c:	f00c f836 	bl	801358c <iprintf>
  while (rem_len > q->len) {
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	895b      	ldrh	r3, [r3, #10]
 8007524:	897a      	ldrh	r2, [r7, #10]
 8007526:	429a      	cmp	r2, r3
 8007528:	d8e1      	bhi.n	80074ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	7b1b      	ldrb	r3, [r3, #12]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	2b00      	cmp	r3, #0
 8007534:	d121      	bne.n	800757a <pbuf_realloc+0xca>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	895b      	ldrh	r3, [r3, #10]
 800753a:	897a      	ldrh	r2, [r7, #10]
 800753c:	429a      	cmp	r2, r3
 800753e:	d01c      	beq.n	800757a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	7b5b      	ldrb	r3, [r3, #13]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d116      	bne.n	800757a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	b29a      	uxth	r2, r3
 8007556:	897b      	ldrh	r3, [r7, #10]
 8007558:	4413      	add	r3, r2
 800755a:	b29b      	uxth	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff f852 	bl	8006608 <mem_trim>
 8007564:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <pbuf_realloc+0xca>
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <pbuf_realloc+0xfc>)
 800756e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007572:	4912      	ldr	r1, [pc, #72]	; (80075bc <pbuf_realloc+0x10c>)
 8007574:	480f      	ldr	r0, [pc, #60]	; (80075b4 <pbuf_realloc+0x104>)
 8007576:	f00c f809 	bl	801358c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	897a      	ldrh	r2, [r7, #10]
 800757e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	895a      	ldrh	r2, [r3, #10]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f000 f911 	bl	80077bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	e000      	b.n	80075a4 <pbuf_realloc+0xf4>
    return;
 80075a2:	bf00      	nop

}
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	08015180 	.word	0x08015180
 80075b0:	0801523c 	.word	0x0801523c
 80075b4:	080151e4 	.word	0x080151e4
 80075b8:	08015254 	.word	0x08015254
 80075bc:	0801526c 	.word	0x0801526c

080075c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	4613      	mov	r3, r2
 80075cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d106      	bne.n	80075e2 <pbuf_add_header_impl+0x22>
 80075d4:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <pbuf_add_header_impl+0xc4>)
 80075d6:	f240 12df 	movw	r2, #479	; 0x1df
 80075da:	492b      	ldr	r1, [pc, #172]	; (8007688 <pbuf_add_header_impl+0xc8>)
 80075dc:	482b      	ldr	r0, [pc, #172]	; (800768c <pbuf_add_header_impl+0xcc>)
 80075de:	f00b ffd5 	bl	801358c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <pbuf_add_header_impl+0x30>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ee:	d301      	bcc.n	80075f4 <pbuf_add_header_impl+0x34>
    return 1;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e043      	b.n	800767c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <pbuf_add_header_impl+0x3e>
    return 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	e03e      	b.n	800767c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	891a      	ldrh	r2, [r3, #8]
 8007606:	8a7b      	ldrh	r3, [r7, #18]
 8007608:	4413      	add	r3, r2
 800760a:	b29b      	uxth	r3, r3
 800760c:	8a7a      	ldrh	r2, [r7, #18]
 800760e:	429a      	cmp	r2, r3
 8007610:	d901      	bls.n	8007616 <pbuf_add_header_impl+0x56>
    return 1;
 8007612:	2301      	movs	r3, #1
 8007614:	e032      	b.n	800767c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	7b1b      	ldrb	r3, [r3, #12]
 800761a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800761c:	8a3b      	ldrh	r3, [r7, #16]
 800761e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00c      	beq.n	8007640 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	425b      	negs	r3, r3
 800762e:	4413      	add	r3, r2
 8007630:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3310      	adds	r3, #16
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	429a      	cmp	r2, r3
 800763a:	d20d      	bcs.n	8007658 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800763c:	2301      	movs	r3, #1
 800763e:	e01d      	b.n	800767c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d006      	beq.n	8007654 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	425b      	negs	r3, r3
 800764e:	4413      	add	r3, r2
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e001      	b.n	8007658 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007654:	2301      	movs	r3, #1
 8007656:	e011      	b.n	800767c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	895a      	ldrh	r2, [r3, #10]
 8007662:	8a7b      	ldrh	r3, [r7, #18]
 8007664:	4413      	add	r3, r2
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	891a      	ldrh	r2, [r3, #8]
 8007670:	8a7b      	ldrh	r3, [r7, #18]
 8007672:	4413      	add	r3, r2
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	811a      	strh	r2, [r3, #8]


  return 0;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	08015180 	.word	0x08015180
 8007688:	08015288 	.word	0x08015288
 800768c:	080151e4 	.word	0x080151e4

08007690 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800769a:	2200      	movs	r2, #0
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff ff8e 	bl	80075c0 <pbuf_add_header_impl>
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d106      	bne.n	80076ce <pbuf_remove_header+0x1e>
 80076c0:	4b20      	ldr	r3, [pc, #128]	; (8007744 <pbuf_remove_header+0x94>)
 80076c2:	f240 224b 	movw	r2, #587	; 0x24b
 80076c6:	4920      	ldr	r1, [pc, #128]	; (8007748 <pbuf_remove_header+0x98>)
 80076c8:	4820      	ldr	r0, [pc, #128]	; (800774c <pbuf_remove_header+0x9c>)
 80076ca:	f00b ff5f 	bl	801358c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <pbuf_remove_header+0x2c>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076da:	d301      	bcc.n	80076e0 <pbuf_remove_header+0x30>
    return 1;
 80076dc:	2301      	movs	r3, #1
 80076de:	e02c      	b.n	800773a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <pbuf_remove_header+0x3a>
    return 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	e027      	b.n	800773a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	895b      	ldrh	r3, [r3, #10]
 80076f2:	89fa      	ldrh	r2, [r7, #14]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d908      	bls.n	800770a <pbuf_remove_header+0x5a>
 80076f8:	4b12      	ldr	r3, [pc, #72]	; (8007744 <pbuf_remove_header+0x94>)
 80076fa:	f240 2255 	movw	r2, #597	; 0x255
 80076fe:	4914      	ldr	r1, [pc, #80]	; (8007750 <pbuf_remove_header+0xa0>)
 8007700:	4812      	ldr	r0, [pc, #72]	; (800774c <pbuf_remove_header+0x9c>)
 8007702:	f00b ff43 	bl	801358c <iprintf>
 8007706:	2301      	movs	r3, #1
 8007708:	e017      	b.n	800773a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	441a      	add	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	895a      	ldrh	r2, [r3, #10]
 8007720:	89fb      	ldrh	r3, [r7, #14]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	b29a      	uxth	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	891a      	ldrh	r2, [r3, #8]
 800772e:	89fb      	ldrh	r3, [r7, #14]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	b29a      	uxth	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	08015180 	.word	0x08015180
 8007748:	08015288 	.word	0x08015288
 800774c:	080151e4 	.word	0x080151e4
 8007750:	08015294 	.word	0x08015294

08007754 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	807b      	strh	r3, [r7, #2]
 8007760:	4613      	mov	r3, r2
 8007762:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007768:	2b00      	cmp	r3, #0
 800776a:	da08      	bge.n	800777e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800776c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007770:	425b      	negs	r3, r3
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff ff9b 	bl	80076b0 <pbuf_remove_header>
 800777a:	4603      	mov	r3, r0
 800777c:	e007      	b.n	800778e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800777e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007782:	787a      	ldrb	r2, [r7, #1]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff ff1a 	bl	80075c0 <pbuf_add_header_impl>
 800778c:	4603      	mov	r3, r0
  }
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80077a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077a6:	2201      	movs	r2, #1
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff ffd2 	bl	8007754 <pbuf_header_impl>
 80077b0:	4603      	mov	r3, r0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10b      	bne.n	80077e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <pbuf_free+0x22>
 80077d0:	4b38      	ldr	r3, [pc, #224]	; (80078b4 <pbuf_free+0xf8>)
 80077d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80077d6:	4938      	ldr	r1, [pc, #224]	; (80078b8 <pbuf_free+0xfc>)
 80077d8:	4838      	ldr	r0, [pc, #224]	; (80078bc <pbuf_free+0x100>)
 80077da:	f00b fed7 	bl	801358c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80077de:	2300      	movs	r3, #0
 80077e0:	e063      	b.n	80078aa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80077e6:	e05c      	b.n	80078a2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7b9b      	ldrb	r3, [r3, #14]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <pbuf_free+0x42>
 80077f0:	4b30      	ldr	r3, [pc, #192]	; (80078b4 <pbuf_free+0xf8>)
 80077f2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80077f6:	4932      	ldr	r1, [pc, #200]	; (80078c0 <pbuf_free+0x104>)
 80077f8:	4830      	ldr	r0, [pc, #192]	; (80078bc <pbuf_free+0x100>)
 80077fa:	f00b fec7 	bl	801358c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	7b9b      	ldrb	r3, [r3, #14]
 8007802:	3b01      	subs	r3, #1
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	739a      	strb	r2, [r3, #14]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7b9b      	ldrb	r3, [r3, #14]
 800780e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007810:	7dbb      	ldrb	r3, [r7, #22]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d143      	bne.n	800789e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7b1b      	ldrb	r3, [r3, #12]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	7b5b      	ldrb	r3, [r3, #13]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d011      	beq.n	8007856 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <pbuf_free+0x90>
 800783e:	4b1d      	ldr	r3, [pc, #116]	; (80078b4 <pbuf_free+0xf8>)
 8007840:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007844:	491f      	ldr	r1, [pc, #124]	; (80078c4 <pbuf_free+0x108>)
 8007846:	481d      	ldr	r0, [pc, #116]	; (80078bc <pbuf_free+0x100>)
 8007848:	f00b fea0 	bl	801358c <iprintf>
        pc->custom_free_function(p);
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
 8007854:	e01d      	b.n	8007892 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d104      	bne.n	8007866 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	2008      	movs	r0, #8
 8007860:	f7ff f9d6 	bl	8006c10 <memp_free>
 8007864:	e015      	b.n	8007892 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d104      	bne.n	8007876 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	2007      	movs	r0, #7
 8007870:	f7ff f9ce 	bl	8006c10 <memp_free>
 8007874:	e00d      	b.n	8007892 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d103      	bne.n	8007884 <pbuf_free+0xc8>
          mem_free(p);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fe fe3d 	bl	80064fc <mem_free>
 8007882:	e006      	b.n	8007892 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007884:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <pbuf_free+0xf8>)
 8007886:	f240 320f 	movw	r2, #783	; 0x30f
 800788a:	490f      	ldr	r1, [pc, #60]	; (80078c8 <pbuf_free+0x10c>)
 800788c:	480b      	ldr	r0, [pc, #44]	; (80078bc <pbuf_free+0x100>)
 800788e:	f00b fe7d 	bl	801358c <iprintf>
        }
      }
      count++;
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	3301      	adds	r3, #1
 8007896:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	607b      	str	r3, [r7, #4]
 800789c:	e001      	b.n	80078a2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d19f      	bne.n	80077e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	08015180 	.word	0x08015180
 80078b8:	08015288 	.word	0x08015288
 80078bc:	080151e4 	.word	0x080151e4
 80078c0:	080152b4 	.word	0x080152b4
 80078c4:	080152cc 	.word	0x080152cc
 80078c8:	080152f0 	.word	0x080152f0

080078cc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80078d8:	e005      	b.n	80078e6 <pbuf_clen+0x1a>
    ++len;
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	3301      	adds	r3, #1
 80078de:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f6      	bne.n	80078da <pbuf_clen+0xe>
  }
  return len;
 80078ec:	89fb      	ldrh	r3, [r7, #14]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7b9b      	ldrb	r3, [r3, #14]
 800790e:	3301      	adds	r3, #1
 8007910:	b2da      	uxtb	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7b9b      	ldrb	r3, [r3, #14]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <pbuf_ref+0x30>
 800791e:	4b05      	ldr	r3, [pc, #20]	; (8007934 <pbuf_ref+0x38>)
 8007920:	f240 3242 	movw	r2, #834	; 0x342
 8007924:	4904      	ldr	r1, [pc, #16]	; (8007938 <pbuf_ref+0x3c>)
 8007926:	4805      	ldr	r0, [pc, #20]	; (800793c <pbuf_ref+0x40>)
 8007928:	f00b fe30 	bl	801358c <iprintf>
  }
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	08015180 	.word	0x08015180
 8007938:	08015304 	.word	0x08015304
 800793c:	080151e4 	.word	0x080151e4

08007940 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <pbuf_cat+0x16>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d107      	bne.n	8007966 <pbuf_cat+0x26>
 8007956:	4b20      	ldr	r3, [pc, #128]	; (80079d8 <pbuf_cat+0x98>)
 8007958:	f240 3259 	movw	r2, #857	; 0x359
 800795c:	491f      	ldr	r1, [pc, #124]	; (80079dc <pbuf_cat+0x9c>)
 800795e:	4820      	ldr	r0, [pc, #128]	; (80079e0 <pbuf_cat+0xa0>)
 8007960:	f00b fe14 	bl	801358c <iprintf>
 8007964:	e034      	b.n	80079d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	e00a      	b.n	8007982 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	891a      	ldrh	r2, [r3, #8]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	891b      	ldrh	r3, [r3, #8]
 8007974:	4413      	add	r3, r2
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f0      	bne.n	800796c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	891a      	ldrh	r2, [r3, #8]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	895b      	ldrh	r3, [r3, #10]
 8007992:	429a      	cmp	r2, r3
 8007994:	d006      	beq.n	80079a4 <pbuf_cat+0x64>
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <pbuf_cat+0x98>)
 8007998:	f240 3262 	movw	r2, #866	; 0x362
 800799c:	4911      	ldr	r1, [pc, #68]	; (80079e4 <pbuf_cat+0xa4>)
 800799e:	4810      	ldr	r0, [pc, #64]	; (80079e0 <pbuf_cat+0xa0>)
 80079a0:	f00b fdf4 	bl	801358c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <pbuf_cat+0x7a>
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <pbuf_cat+0x98>)
 80079ae:	f240 3263 	movw	r2, #867	; 0x363
 80079b2:	490d      	ldr	r1, [pc, #52]	; (80079e8 <pbuf_cat+0xa8>)
 80079b4:	480a      	ldr	r0, [pc, #40]	; (80079e0 <pbuf_cat+0xa0>)
 80079b6:	f00b fde9 	bl	801358c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	891a      	ldrh	r2, [r3, #8]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	891b      	ldrh	r3, [r3, #8]
 80079c2:	4413      	add	r3, r2
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	08015180 	.word	0x08015180
 80079dc:	08015318 	.word	0x08015318
 80079e0:	080151e4 	.word	0x080151e4
 80079e4:	08015350 	.word	0x08015350
 80079e8:	08015380 	.word	0x08015380

080079ec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff ffa1 	bl	8007940 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80079fe:	6838      	ldr	r0, [r7, #0]
 8007a00:	f7ff ff7c 	bl	80078fc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <pbuf_copy+0x2a>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <pbuf_copy+0x2a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	891a      	ldrh	r2, [r3, #8]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	891b      	ldrh	r3, [r3, #8]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d209      	bcs.n	8007a4a <pbuf_copy+0x3e>
 8007a36:	4b57      	ldr	r3, [pc, #348]	; (8007b94 <pbuf_copy+0x188>)
 8007a38:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007a3c:	4956      	ldr	r1, [pc, #344]	; (8007b98 <pbuf_copy+0x18c>)
 8007a3e:	4857      	ldr	r0, [pc, #348]	; (8007b9c <pbuf_copy+0x190>)
 8007a40:	f00b fda4 	bl	801358c <iprintf>
 8007a44:	f06f 030f 	mvn.w	r3, #15
 8007a48:	e09f      	b.n	8007b8a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	895b      	ldrh	r3, [r3, #10]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	1ad2      	subs	r2, r2, r3
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	895b      	ldrh	r3, [r3, #10]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1acb      	subs	r3, r1, r3
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d306      	bcc.n	8007a70 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	895b      	ldrh	r3, [r3, #10]
 8007a66:	461a      	mov	r2, r3
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	e005      	b.n	8007a7c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	895b      	ldrh	r3, [r3, #10]
 8007a74:	461a      	mov	r2, r3
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	18d0      	adds	r0, r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	f00b fd4c 	bl	801352c <memcpy>
    offset_to += len;
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4413      	add	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	895b      	ldrh	r3, [r3, #10]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d906      	bls.n	8007abe <pbuf_copy+0xb2>
 8007ab0:	4b38      	ldr	r3, [pc, #224]	; (8007b94 <pbuf_copy+0x188>)
 8007ab2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007ab6:	493a      	ldr	r1, [pc, #232]	; (8007ba0 <pbuf_copy+0x194>)
 8007ab8:	4838      	ldr	r0, [pc, #224]	; (8007b9c <pbuf_copy+0x190>)
 8007aba:	f00b fd67 	bl	801358c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	895b      	ldrh	r3, [r3, #10]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d906      	bls.n	8007ad8 <pbuf_copy+0xcc>
 8007aca:	4b32      	ldr	r3, [pc, #200]	; (8007b94 <pbuf_copy+0x188>)
 8007acc:	f240 32da 	movw	r2, #986	; 0x3da
 8007ad0:	4934      	ldr	r1, [pc, #208]	; (8007ba4 <pbuf_copy+0x198>)
 8007ad2:	4832      	ldr	r0, [pc, #200]	; (8007b9c <pbuf_copy+0x190>)
 8007ad4:	f00b fd5a 	bl	801358c <iprintf>
    if (offset_from >= p_from->len) {
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	895b      	ldrh	r3, [r3, #10]
 8007adc:	461a      	mov	r2, r3
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d304      	bcc.n	8007aee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	895b      	ldrh	r3, [r3, #10]
 8007af2:	461a      	mov	r2, r3
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d114      	bne.n	8007b24 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10c      	bne.n	8007b24 <pbuf_copy+0x118>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <pbuf_copy+0x118>
 8007b10:	4b20      	ldr	r3, [pc, #128]	; (8007b94 <pbuf_copy+0x188>)
 8007b12:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007b16:	4924      	ldr	r1, [pc, #144]	; (8007ba8 <pbuf_copy+0x19c>)
 8007b18:	4820      	ldr	r0, [pc, #128]	; (8007b9c <pbuf_copy+0x190>)
 8007b1a:	f00b fd37 	bl	801358c <iprintf>
 8007b1e:	f06f 030f 	mvn.w	r3, #15
 8007b22:	e032      	b.n	8007b8a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d013      	beq.n	8007b52 <pbuf_copy+0x146>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	895a      	ldrh	r2, [r3, #10]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	891b      	ldrh	r3, [r3, #8]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d10d      	bne.n	8007b52 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <pbuf_copy+0x146>
 8007b3e:	4b15      	ldr	r3, [pc, #84]	; (8007b94 <pbuf_copy+0x188>)
 8007b40:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007b44:	4919      	ldr	r1, [pc, #100]	; (8007bac <pbuf_copy+0x1a0>)
 8007b46:	4815      	ldr	r0, [pc, #84]	; (8007b9c <pbuf_copy+0x190>)
 8007b48:	f00b fd20 	bl	801358c <iprintf>
 8007b4c:	f06f 0305 	mvn.w	r3, #5
 8007b50:	e01b      	b.n	8007b8a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d013      	beq.n	8007b80 <pbuf_copy+0x174>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	895a      	ldrh	r2, [r3, #10]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	891b      	ldrh	r3, [r3, #8]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d10d      	bne.n	8007b80 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d009      	beq.n	8007b80 <pbuf_copy+0x174>
 8007b6c:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <pbuf_copy+0x188>)
 8007b6e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007b72:	490e      	ldr	r1, [pc, #56]	; (8007bac <pbuf_copy+0x1a0>)
 8007b74:	4809      	ldr	r0, [pc, #36]	; (8007b9c <pbuf_copy+0x190>)
 8007b76:	f00b fd09 	bl	801358c <iprintf>
 8007b7a:	f06f 0305 	mvn.w	r3, #5
 8007b7e:	e004      	b.n	8007b8a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f47f af61 	bne.w	8007a4a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	08015180 	.word	0x08015180
 8007b98:	080153cc 	.word	0x080153cc
 8007b9c:	080151e4 	.word	0x080151e4
 8007ba0:	080153fc 	.word	0x080153fc
 8007ba4:	08015414 	.word	0x08015414
 8007ba8:	08015430 	.word	0x08015430
 8007bac:	08015440 	.word	0x08015440

08007bb0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	80fb      	strh	r3, [r7, #6]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d108      	bne.n	8007be6 <pbuf_copy_partial+0x36>
 8007bd4:	4b2b      	ldr	r3, [pc, #172]	; (8007c84 <pbuf_copy_partial+0xd4>)
 8007bd6:	f240 420a 	movw	r2, #1034	; 0x40a
 8007bda:	492b      	ldr	r1, [pc, #172]	; (8007c88 <pbuf_copy_partial+0xd8>)
 8007bdc:	482b      	ldr	r0, [pc, #172]	; (8007c8c <pbuf_copy_partial+0xdc>)
 8007bde:	f00b fcd5 	bl	801358c <iprintf>
 8007be2:	2300      	movs	r3, #0
 8007be4:	e04a      	b.n	8007c7c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d108      	bne.n	8007bfe <pbuf_copy_partial+0x4e>
 8007bec:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <pbuf_copy_partial+0xd4>)
 8007bee:	f240 420b 	movw	r2, #1035	; 0x40b
 8007bf2:	4927      	ldr	r1, [pc, #156]	; (8007c90 <pbuf_copy_partial+0xe0>)
 8007bf4:	4825      	ldr	r0, [pc, #148]	; (8007c8c <pbuf_copy_partial+0xdc>)
 8007bf6:	f00b fcc9 	bl	801358c <iprintf>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e03e      	b.n	8007c7c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	e034      	b.n	8007c6e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007c04:	88bb      	ldrh	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <pbuf_copy_partial+0x70>
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	895b      	ldrh	r3, [r3, #10]
 8007c0e:	88ba      	ldrh	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d305      	bcc.n	8007c20 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	895b      	ldrh	r3, [r3, #10]
 8007c18:	88ba      	ldrh	r2, [r7, #4]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	80bb      	strh	r3, [r7, #4]
 8007c1e:	e023      	b.n	8007c68 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	895a      	ldrh	r2, [r3, #10]
 8007c24:	88bb      	ldrh	r3, [r7, #4]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007c2a:	8b3a      	ldrh	r2, [r7, #24]
 8007c2c:	88fb      	ldrh	r3, [r7, #6]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d901      	bls.n	8007c36 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007c36:	8b7b      	ldrh	r3, [r7, #26]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	18d0      	adds	r0, r2, r3
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	88bb      	ldrh	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	8b3a      	ldrh	r2, [r7, #24]
 8007c46:	4619      	mov	r1, r3
 8007c48:	f00b fc70 	bl	801352c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007c4c:	8afa      	ldrh	r2, [r7, #22]
 8007c4e:	8b3b      	ldrh	r3, [r7, #24]
 8007c50:	4413      	add	r3, r2
 8007c52:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007c54:	8b7a      	ldrh	r2, [r7, #26]
 8007c56:	8b3b      	ldrh	r3, [r7, #24]
 8007c58:	4413      	add	r3, r2
 8007c5a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007c5c:	88fa      	ldrh	r2, [r7, #6]
 8007c5e:	8b3b      	ldrh	r3, [r7, #24]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	61fb      	str	r3, [r7, #28]
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <pbuf_copy_partial+0xca>
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1c4      	bne.n	8007c04 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007c7a:	8afb      	ldrh	r3, [r7, #22]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3720      	adds	r7, #32
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	08015180 	.word	0x08015180
 8007c88:	0801546c 	.word	0x0801546c
 8007c8c:	080151e4 	.word	0x080151e4
 8007c90:	0801548c 	.word	0x0801548c

08007c94 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	603a      	str	r2, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	8919      	ldrh	r1, [r3, #8]
 8007ca8:	88ba      	ldrh	r2, [r7, #4]
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff fae5 	bl	800727c <pbuf_alloc>
 8007cb2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <pbuf_clone+0x2a>
    return NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e011      	b.n	8007ce2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff fea3 	bl	8007a0c <pbuf_copy>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007cca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d006      	beq.n	8007ce0 <pbuf_clone+0x4c>
 8007cd2:	4b06      	ldr	r3, [pc, #24]	; (8007cec <pbuf_clone+0x58>)
 8007cd4:	f240 5224 	movw	r2, #1316	; 0x524
 8007cd8:	4905      	ldr	r1, [pc, #20]	; (8007cf0 <pbuf_clone+0x5c>)
 8007cda:	4806      	ldr	r0, [pc, #24]	; (8007cf4 <pbuf_clone+0x60>)
 8007cdc:	f00b fc56 	bl	801358c <iprintf>
  return q;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	08015180 	.word	0x08015180
 8007cf0:	08015598 	.word	0x08015598
 8007cf4:	080151e4 	.word	0x080151e4

08007cf8 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8007cfc:	bf00      	nop
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007d0c:	f00b fc56 	bl	80135bc <rand>
 8007d10:	4603      	mov	r3, r0
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	4b01      	ldr	r3, [pc, #4]	; (8007d28 <tcp_init+0x20>)
 8007d22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007d24:	bf00      	nop
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000016 	.word	0x20000016

08007d2c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	7d1b      	ldrb	r3, [r3, #20]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d105      	bne.n	8007d48 <tcp_free+0x1c>
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <tcp_free+0x2c>)
 8007d3e:	22d4      	movs	r2, #212	; 0xd4
 8007d40:	4906      	ldr	r1, [pc, #24]	; (8007d5c <tcp_free+0x30>)
 8007d42:	4807      	ldr	r0, [pc, #28]	; (8007d60 <tcp_free+0x34>)
 8007d44:	f00b fc22 	bl	801358c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	2001      	movs	r0, #1
 8007d4c:	f7fe ff60 	bl	8006c10 <memp_free>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	08015624 	.word	0x08015624
 8007d5c:	08015654 	.word	0x08015654
 8007d60:	08015668 	.word	0x08015668

08007d64 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	7d1b      	ldrb	r3, [r3, #20]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d105      	bne.n	8007d80 <tcp_free_listen+0x1c>
 8007d74:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <tcp_free_listen+0x2c>)
 8007d76:	22df      	movs	r2, #223	; 0xdf
 8007d78:	4906      	ldr	r1, [pc, #24]	; (8007d94 <tcp_free_listen+0x30>)
 8007d7a:	4807      	ldr	r0, [pc, #28]	; (8007d98 <tcp_free_listen+0x34>)
 8007d7c:	f00b fc06 	bl	801358c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	2002      	movs	r0, #2
 8007d84:	f7fe ff44 	bl	8006c10 <memp_free>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	08015624 	.word	0x08015624
 8007d94:	08015690 	.word	0x08015690
 8007d98:	08015668 	.word	0x08015668

08007d9c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007da0:	f001 f85c 	bl	8008e5c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <tcp_tmr+0x28>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <tcp_tmr+0x28>)
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <tcp_tmr+0x28>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007dbc:	f000 fd0e 	bl	80087dc <tcp_slowtmr>
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000591 	.word	0x20000591

08007dc8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <tcp_remove_listener+0x1c>
 8007dd8:	4b0d      	ldr	r3, [pc, #52]	; (8007e10 <tcp_remove_listener+0x48>)
 8007dda:	22ff      	movs	r2, #255	; 0xff
 8007ddc:	490d      	ldr	r1, [pc, #52]	; (8007e14 <tcp_remove_listener+0x4c>)
 8007dde:	480e      	ldr	r0, [pc, #56]	; (8007e18 <tcp_remove_listener+0x50>)
 8007de0:	f00b fbd4 	bl	801358c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e00a      	b.n	8007e00 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d102      	bne.n	8007dfa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f1      	bne.n	8007dea <tcp_remove_listener+0x22>
    }
  }
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	08015624 	.word	0x08015624
 8007e14:	080156ac 	.word	0x080156ac
 8007e18:	08015668 	.word	0x08015668

08007e1c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <tcp_listen_closed+0x1c>
 8007e2a:	4b14      	ldr	r3, [pc, #80]	; (8007e7c <tcp_listen_closed+0x60>)
 8007e2c:	f240 1211 	movw	r2, #273	; 0x111
 8007e30:	4913      	ldr	r1, [pc, #76]	; (8007e80 <tcp_listen_closed+0x64>)
 8007e32:	4814      	ldr	r0, [pc, #80]	; (8007e84 <tcp_listen_closed+0x68>)
 8007e34:	f00b fbaa 	bl	801358c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7d1b      	ldrb	r3, [r3, #20]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d006      	beq.n	8007e4e <tcp_listen_closed+0x32>
 8007e40:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <tcp_listen_closed+0x60>)
 8007e42:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007e46:	4910      	ldr	r1, [pc, #64]	; (8007e88 <tcp_listen_closed+0x6c>)
 8007e48:	480e      	ldr	r0, [pc, #56]	; (8007e84 <tcp_listen_closed+0x68>)
 8007e4a:	f00b fb9f 	bl	801358c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007e4e:	2301      	movs	r3, #1
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	e00b      	b.n	8007e6c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007e54:	4a0d      	ldr	r2, [pc, #52]	; (8007e8c <tcp_listen_closed+0x70>)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff ffb1 	bl	8007dc8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d9f0      	bls.n	8007e54 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	08015624 	.word	0x08015624
 8007e80:	080156d4 	.word	0x080156d4
 8007e84:	08015668 	.word	0x08015668
 8007e88:	080156e0 	.word	0x080156e0
 8007e8c:	08039708 	.word	0x08039708

08007e90 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007e90:	b5b0      	push	{r4, r5, r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af04      	add	r7, sp, #16
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d106      	bne.n	8007eb0 <tcp_close_shutdown+0x20>
 8007ea2:	4b63      	ldr	r3, [pc, #396]	; (8008030 <tcp_close_shutdown+0x1a0>)
 8007ea4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007ea8:	4962      	ldr	r1, [pc, #392]	; (8008034 <tcp_close_shutdown+0x1a4>)
 8007eaa:	4863      	ldr	r0, [pc, #396]	; (8008038 <tcp_close_shutdown+0x1a8>)
 8007eac:	f00b fb6e 	bl	801358c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d066      	beq.n	8007f84 <tcp_close_shutdown+0xf4>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7d1b      	ldrb	r3, [r3, #20]
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d003      	beq.n	8007ec6 <tcp_close_shutdown+0x36>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7d1b      	ldrb	r3, [r3, #20]
 8007ec2:	2b07      	cmp	r3, #7
 8007ec4:	d15e      	bne.n	8007f84 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d104      	bne.n	8007ed8 <tcp_close_shutdown+0x48>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ed6:	d055      	beq.n	8007f84 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8b5b      	ldrh	r3, [r3, #26]
 8007edc:	f003 0310 	and.w	r3, r3, #16
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d106      	bne.n	8007ef2 <tcp_close_shutdown+0x62>
 8007ee4:	4b52      	ldr	r3, [pc, #328]	; (8008030 <tcp_close_shutdown+0x1a0>)
 8007ee6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007eea:	4954      	ldr	r1, [pc, #336]	; (800803c <tcp_close_shutdown+0x1ac>)
 8007eec:	4852      	ldr	r0, [pc, #328]	; (8008038 <tcp_close_shutdown+0x1a8>)
 8007eee:	f00b fb4d 	bl	801358c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007efa:	687d      	ldr	r5, [r7, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3304      	adds	r3, #4
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	8ad2      	ldrh	r2, [r2, #22]
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	8b09      	ldrh	r1, [r1, #24]
 8007f08:	9102      	str	r1, [sp, #8]
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	462b      	mov	r3, r5
 8007f10:	4622      	mov	r2, r4
 8007f12:	4601      	mov	r1, r0
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f005 fe9f 	bl	800dc58 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fb96 	bl	800964c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007f20:	4b47      	ldr	r3, [pc, #284]	; (8008040 <tcp_close_shutdown+0x1b0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d105      	bne.n	8007f36 <tcp_close_shutdown+0xa6>
 8007f2a:	4b45      	ldr	r3, [pc, #276]	; (8008040 <tcp_close_shutdown+0x1b0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	4a43      	ldr	r2, [pc, #268]	; (8008040 <tcp_close_shutdown+0x1b0>)
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	e013      	b.n	8007f5e <tcp_close_shutdown+0xce>
 8007f36:	4b42      	ldr	r3, [pc, #264]	; (8008040 <tcp_close_shutdown+0x1b0>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	e00c      	b.n	8007f58 <tcp_close_shutdown+0xc8>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d104      	bne.n	8007f52 <tcp_close_shutdown+0xc2>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	60da      	str	r2, [r3, #12]
 8007f50:	e005      	b.n	8007f5e <tcp_close_shutdown+0xce>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1ef      	bne.n	8007f3e <tcp_close_shutdown+0xae>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	60da      	str	r2, [r3, #12]
 8007f64:	4b37      	ldr	r3, [pc, #220]	; (8008044 <tcp_close_shutdown+0x1b4>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007f6a:	4b37      	ldr	r3, [pc, #220]	; (8008048 <tcp_close_shutdown+0x1b8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d102      	bne.n	8007f7a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007f74:	f004 f8b6 	bl	800c0e4 <tcp_trigger_input_pcb_close>
 8007f78:	e002      	b.n	8007f80 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fed6 	bl	8007d2c <tcp_free>
      }
      return ERR_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	e050      	b.n	8008026 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	7d1b      	ldrb	r3, [r3, #20]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d03b      	beq.n	8008004 <tcp_close_shutdown+0x174>
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	dc44      	bgt.n	800801a <tcp_close_shutdown+0x18a>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <tcp_close_shutdown+0x10a>
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d02a      	beq.n	8007fee <tcp_close_shutdown+0x15e>
 8007f98:	e03f      	b.n	800801a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	8adb      	ldrh	r3, [r3, #22]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d021      	beq.n	8007fe6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007fa2:	4b2a      	ldr	r3, [pc, #168]	; (800804c <tcp_close_shutdown+0x1bc>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d105      	bne.n	8007fb8 <tcp_close_shutdown+0x128>
 8007fac:	4b27      	ldr	r3, [pc, #156]	; (800804c <tcp_close_shutdown+0x1bc>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	4a26      	ldr	r2, [pc, #152]	; (800804c <tcp_close_shutdown+0x1bc>)
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	e013      	b.n	8007fe0 <tcp_close_shutdown+0x150>
 8007fb8:	4b24      	ldr	r3, [pc, #144]	; (800804c <tcp_close_shutdown+0x1bc>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60bb      	str	r3, [r7, #8]
 8007fbe:	e00c      	b.n	8007fda <tcp_close_shutdown+0x14a>
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d104      	bne.n	8007fd4 <tcp_close_shutdown+0x144>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	60da      	str	r2, [r3, #12]
 8007fd2:	e005      	b.n	8007fe0 <tcp_close_shutdown+0x150>
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	60bb      	str	r3, [r7, #8]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1ef      	bne.n	8007fc0 <tcp_close_shutdown+0x130>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff fea0 	bl	8007d2c <tcp_free>
      break;
 8007fec:	e01a      	b.n	8008024 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff ff14 	bl	8007e1c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4816      	ldr	r0, [pc, #88]	; (8008050 <tcp_close_shutdown+0x1c0>)
 8007ff8:	f001 fb78 	bl	80096ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff feb1 	bl	8007d64 <tcp_free_listen>
      break;
 8008002:	e00f      	b.n	8008024 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	480e      	ldr	r0, [pc, #56]	; (8008040 <tcp_close_shutdown+0x1b0>)
 8008008:	f001 fb70 	bl	80096ec <tcp_pcb_remove>
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <tcp_close_shutdown+0x1b4>)
 800800e:	2201      	movs	r2, #1
 8008010:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fe8a 	bl	8007d2c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008018:	e004      	b.n	8008024 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f81a 	bl	8008054 <tcp_close_shutdown_fin>
 8008020:	4603      	mov	r3, r0
 8008022:	e000      	b.n	8008026 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bdb0      	pop	{r4, r5, r7, pc}
 800802e:	bf00      	nop
 8008030:	08015624 	.word	0x08015624
 8008034:	080156f8 	.word	0x080156f8
 8008038:	08015668 	.word	0x08015668
 800803c:	08015718 	.word	0x08015718
 8008040:	20007b24 	.word	0x20007b24
 8008044:	20007b20 	.word	0x20007b20
 8008048:	20007b38 	.word	0x20007b38
 800804c:	20007b30 	.word	0x20007b30
 8008050:	20007b2c 	.word	0x20007b2c

08008054 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <tcp_close_shutdown_fin+0x1c>
 8008062:	4b2e      	ldr	r3, [pc, #184]	; (800811c <tcp_close_shutdown_fin+0xc8>)
 8008064:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008068:	492d      	ldr	r1, [pc, #180]	; (8008120 <tcp_close_shutdown_fin+0xcc>)
 800806a:	482e      	ldr	r0, [pc, #184]	; (8008124 <tcp_close_shutdown_fin+0xd0>)
 800806c:	f00b fa8e 	bl	801358c <iprintf>

  switch (pcb->state) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	7d1b      	ldrb	r3, [r3, #20]
 8008074:	2b07      	cmp	r3, #7
 8008076:	d020      	beq.n	80080ba <tcp_close_shutdown_fin+0x66>
 8008078:	2b07      	cmp	r3, #7
 800807a:	dc2b      	bgt.n	80080d4 <tcp_close_shutdown_fin+0x80>
 800807c:	2b03      	cmp	r3, #3
 800807e:	d002      	beq.n	8008086 <tcp_close_shutdown_fin+0x32>
 8008080:	2b04      	cmp	r3, #4
 8008082:	d00d      	beq.n	80080a0 <tcp_close_shutdown_fin+0x4c>
 8008084:	e026      	b.n	80080d4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f004 febc 	bl	800ce04 <tcp_send_fin>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11f      	bne.n	80080d8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2205      	movs	r2, #5
 800809c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800809e:	e01b      	b.n	80080d8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f004 feaf 	bl	800ce04 <tcp_send_fin>
 80080a6:	4603      	mov	r3, r0
 80080a8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d114      	bne.n	80080dc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2205      	movs	r2, #5
 80080b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080b8:	e010      	b.n	80080dc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f004 fea2 	bl	800ce04 <tcp_send_fin>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80080c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2209      	movs	r2, #9
 80080d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80080d2:	e005      	b.n	80080e0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e01c      	b.n	8008112 <tcp_close_shutdown_fin+0xbe>
      break;
 80080d8:	bf00      	nop
 80080da:	e002      	b.n	80080e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80080dc:	bf00      	nop
 80080de:	e000      	b.n	80080e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80080e0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80080e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d103      	bne.n	80080f2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f004 ffca 	bl	800d084 <tcp_output>
 80080f0:	e00d      	b.n	800810e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80080f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080fa:	d108      	bne.n	800810e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	8b5b      	ldrh	r3, [r3, #26]
 8008100:	f043 0308 	orr.w	r3, r3, #8
 8008104:	b29a      	uxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	e001      	b.n	8008112 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800810e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	08015624 	.word	0x08015624
 8008120:	080156d4 	.word	0x080156d4
 8008124:	08015668 	.word	0x08015668

08008128 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d109      	bne.n	800814a <tcp_close+0x22>
 8008136:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <tcp_close+0x4c>)
 8008138:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800813c:	490e      	ldr	r1, [pc, #56]	; (8008178 <tcp_close+0x50>)
 800813e:	480f      	ldr	r0, [pc, #60]	; (800817c <tcp_close+0x54>)
 8008140:	f00b fa24 	bl	801358c <iprintf>
 8008144:	f06f 030f 	mvn.w	r3, #15
 8008148:	e00f      	b.n	800816a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7d1b      	ldrb	r3, [r3, #20]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d006      	beq.n	8008160 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	8b5b      	ldrh	r3, [r3, #26]
 8008156:	f043 0310 	orr.w	r3, r3, #16
 800815a:	b29a      	uxth	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008160:	2101      	movs	r1, #1
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fe94 	bl	8007e90 <tcp_close_shutdown>
 8008168:	4603      	mov	r3, r0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	08015624 	.word	0x08015624
 8008178:	08015734 	.word	0x08015734
 800817c:	08015668 	.word	0x08015668

08008180 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08e      	sub	sp, #56	; 0x38
 8008184:	af04      	add	r7, sp, #16
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d107      	bne.n	80081a0 <tcp_abandon+0x20>
 8008190:	4b52      	ldr	r3, [pc, #328]	; (80082dc <tcp_abandon+0x15c>)
 8008192:	f240 223d 	movw	r2, #573	; 0x23d
 8008196:	4952      	ldr	r1, [pc, #328]	; (80082e0 <tcp_abandon+0x160>)
 8008198:	4852      	ldr	r0, [pc, #328]	; (80082e4 <tcp_abandon+0x164>)
 800819a:	f00b f9f7 	bl	801358c <iprintf>
 800819e:	e099      	b.n	80082d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7d1b      	ldrb	r3, [r3, #20]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d106      	bne.n	80081b6 <tcp_abandon+0x36>
 80081a8:	4b4c      	ldr	r3, [pc, #304]	; (80082dc <tcp_abandon+0x15c>)
 80081aa:	f44f 7210 	mov.w	r2, #576	; 0x240
 80081ae:	494e      	ldr	r1, [pc, #312]	; (80082e8 <tcp_abandon+0x168>)
 80081b0:	484c      	ldr	r0, [pc, #304]	; (80082e4 <tcp_abandon+0x164>)
 80081b2:	f00b f9eb 	bl	801358c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7d1b      	ldrb	r3, [r3, #20]
 80081ba:	2b0a      	cmp	r3, #10
 80081bc:	d107      	bne.n	80081ce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	484a      	ldr	r0, [pc, #296]	; (80082ec <tcp_abandon+0x16c>)
 80081c2:	f001 fa93 	bl	80096ec <tcp_pcb_remove>
    tcp_free(pcb);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7ff fdb0 	bl	8007d2c <tcp_free>
 80081cc:	e082      	b.n	80082d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7d1b      	ldrb	r3, [r3, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d126      	bne.n	8008246 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	8adb      	ldrh	r3, [r3, #22]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d02e      	beq.n	800825e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008200:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <tcp_abandon+0x170>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d105      	bne.n	8008216 <tcp_abandon+0x96>
 800820a:	4b39      	ldr	r3, [pc, #228]	; (80082f0 <tcp_abandon+0x170>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	4a37      	ldr	r2, [pc, #220]	; (80082f0 <tcp_abandon+0x170>)
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	e013      	b.n	800823e <tcp_abandon+0xbe>
 8008216:	4b36      	ldr	r3, [pc, #216]	; (80082f0 <tcp_abandon+0x170>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	61fb      	str	r3, [r7, #28]
 800821c:	e00c      	b.n	8008238 <tcp_abandon+0xb8>
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d104      	bne.n	8008232 <tcp_abandon+0xb2>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	60da      	str	r2, [r3, #12]
 8008230:	e005      	b.n	800823e <tcp_abandon+0xbe>
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1ef      	bne.n	800821e <tcp_abandon+0x9e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	60da      	str	r2, [r3, #12]
 8008244:	e00b      	b.n	800825e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	8adb      	ldrh	r3, [r3, #22]
 800824e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4828      	ldr	r0, [pc, #160]	; (80082f4 <tcp_abandon+0x174>)
 8008254:	f001 fa4a 	bl	80096ec <tcp_pcb_remove>
 8008258:	4b27      	ldr	r3, [pc, #156]	; (80082f8 <tcp_abandon+0x178>)
 800825a:	2201      	movs	r2, #1
 800825c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008262:	2b00      	cmp	r3, #0
 8008264:	d004      	beq.n	8008270 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fed6 	bl	800901c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008274:	2b00      	cmp	r3, #0
 8008276:	d004      	beq.n	8008282 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fecd 	bl	800901c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008286:	2b00      	cmp	r3, #0
 8008288:	d004      	beq.n	8008294 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fec4 	bl	800901c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00e      	beq.n	80082b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	8b12      	ldrh	r2, [r2, #24]
 80082a4:	9202      	str	r2, [sp, #8]
 80082a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80082a8:	9201      	str	r2, [sp, #4]
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	460b      	mov	r3, r1
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	69b9      	ldr	r1, [r7, #24]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f005 fcd0 	bl	800dc58 <tcp_rst>
    }
    last_state = pcb->state;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7d1b      	ldrb	r3, [r3, #20]
 80082bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fd34 	bl	8007d2c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d004      	beq.n	80082d4 <tcp_abandon+0x154>
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f06f 010c 	mvn.w	r1, #12
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	4798      	blx	r3
  }
}
 80082d4:	3728      	adds	r7, #40	; 0x28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	08015624 	.word	0x08015624
 80082e0:	08015768 	.word	0x08015768
 80082e4:	08015668 	.word	0x08015668
 80082e8:	08015784 	.word	0x08015784
 80082ec:	20007b34 	.word	0x20007b34
 80082f0:	20007b30 	.word	0x20007b30
 80082f4:	20007b24 	.word	0x20007b24
 80082f8:	20007b20 	.word	0x20007b20

080082fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008304:	2101      	movs	r1, #1
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff ff3a 	bl	8008180 <tcp_abandon>
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	4613      	mov	r3, r2
 8008320:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008322:	2304      	movs	r3, #4
 8008324:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800832c:	4b3e      	ldr	r3, [pc, #248]	; (8008428 <tcp_bind+0x114>)
 800832e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <tcp_bind+0x36>
 8008336:	4b3d      	ldr	r3, [pc, #244]	; (800842c <tcp_bind+0x118>)
 8008338:	f240 22a9 	movw	r2, #681	; 0x2a9
 800833c:	493c      	ldr	r1, [pc, #240]	; (8008430 <tcp_bind+0x11c>)
 800833e:	483d      	ldr	r0, [pc, #244]	; (8008434 <tcp_bind+0x120>)
 8008340:	f00b f924 	bl	801358c <iprintf>
 8008344:	f06f 030f 	mvn.w	r3, #15
 8008348:	e06a      	b.n	8008420 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	7d1b      	ldrb	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <tcp_bind+0x52>
 8008352:	4b36      	ldr	r3, [pc, #216]	; (800842c <tcp_bind+0x118>)
 8008354:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008358:	4937      	ldr	r1, [pc, #220]	; (8008438 <tcp_bind+0x124>)
 800835a:	4836      	ldr	r0, [pc, #216]	; (8008434 <tcp_bind+0x120>)
 800835c:	f00b f916 	bl	801358c <iprintf>
 8008360:	f06f 0305 	mvn.w	r3, #5
 8008364:	e05c      	b.n	8008420 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d109      	bne.n	8008380 <tcp_bind+0x6c>
    port = tcp_new_port();
 800836c:	f000 f9f0 	bl	8008750 <tcp_new_port>
 8008370:	4603      	mov	r3, r0
 8008372:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008374:	88fb      	ldrh	r3, [r7, #6]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d135      	bne.n	80083e6 <tcp_bind+0xd2>
      return ERR_BUF;
 800837a:	f06f 0301 	mvn.w	r3, #1
 800837e:	e04f      	b.n	8008420 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e02b      	b.n	80083de <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008386:	4a2d      	ldr	r2, [pc, #180]	; (800843c <tcp_bind+0x128>)
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	61bb      	str	r3, [r7, #24]
 8008392:	e01e      	b.n	80083d2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	8adb      	ldrh	r3, [r3, #22]
 8008398:	88fa      	ldrh	r2, [r7, #6]
 800839a:	429a      	cmp	r2, r3
 800839c:	d116      	bne.n	80083cc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800839e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00c      	beq.n	80083c6 <tcp_bind+0xb2>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d102      	bne.n	80083cc <tcp_bind+0xb8>
              return ERR_USE;
 80083c6:	f06f 0307 	mvn.w	r3, #7
 80083ca:	e029      	b.n	8008420 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1dd      	bne.n	8008394 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	3301      	adds	r3, #1
 80083dc:	61fb      	str	r3, [r7, #28]
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	dbcf      	blt.n	8008386 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00c      	beq.n	8008406 <tcp_bind+0xf2>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d008      	beq.n	8008406 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <tcp_bind+0xec>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	e000      	b.n	8008402 <tcp_bind+0xee>
 8008400:	2300      	movs	r3, #0
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	88fa      	ldrh	r2, [r7, #6]
 800840a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <tcp_bind+0x12c>)
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	60da      	str	r2, [r3, #12]
 8008414:	4a0a      	ldr	r2, [pc, #40]	; (8008440 <tcp_bind+0x12c>)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	f005 fddf 	bl	800dfdc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3720      	adds	r7, #32
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	08039740 	.word	0x08039740
 800842c:	08015624 	.word	0x08015624
 8008430:	080157b8 	.word	0x080157b8
 8008434:	08015668 	.word	0x08015668
 8008438:	080157d0 	.word	0x080157d0
 800843c:	08039708 	.word	0x08039708
 8008440:	20007b30 	.word	0x20007b30

08008444 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	4613      	mov	r3, r2
 8008450:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d106      	bne.n	8008466 <tcp_accept_null+0x22>
 8008458:	4b07      	ldr	r3, [pc, #28]	; (8008478 <tcp_accept_null+0x34>)
 800845a:	f240 320f 	movw	r2, #783	; 0x30f
 800845e:	4907      	ldr	r1, [pc, #28]	; (800847c <tcp_accept_null+0x38>)
 8008460:	4807      	ldr	r0, [pc, #28]	; (8008480 <tcp_accept_null+0x3c>)
 8008462:	f00b f893 	bl	801358c <iprintf>

  tcp_abort(pcb);
 8008466:	68b8      	ldr	r0, [r7, #8]
 8008468:	f7ff ff48 	bl	80082fc <tcp_abort>

  return ERR_ABRT;
 800846c:	f06f 030c 	mvn.w	r3, #12
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	08015624 	.word	0x08015624
 800847c:	080157f8 	.word	0x080157f8
 8008480:	08015668 	.word	0x08015668

08008484 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	2200      	movs	r2, #0
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f806 	bl	80084a8 <tcp_listen_with_backlog_and_err>
 800849c:	4603      	mov	r3, r0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	460b      	mov	r3, r1
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d109      	bne.n	80084d4 <tcp_listen_with_backlog_and_err+0x2c>
 80084c0:	4b47      	ldr	r3, [pc, #284]	; (80085e0 <tcp_listen_with_backlog_and_err+0x138>)
 80084c2:	f240 3259 	movw	r2, #857	; 0x359
 80084c6:	4947      	ldr	r1, [pc, #284]	; (80085e4 <tcp_listen_with_backlog_and_err+0x13c>)
 80084c8:	4847      	ldr	r0, [pc, #284]	; (80085e8 <tcp_listen_with_backlog_and_err+0x140>)
 80084ca:	f00b f85f 	bl	801358c <iprintf>
 80084ce:	23f0      	movs	r3, #240	; 0xf0
 80084d0:	76fb      	strb	r3, [r7, #27]
 80084d2:	e079      	b.n	80085c8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	7d1b      	ldrb	r3, [r3, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d009      	beq.n	80084f0 <tcp_listen_with_backlog_and_err+0x48>
 80084dc:	4b40      	ldr	r3, [pc, #256]	; (80085e0 <tcp_listen_with_backlog_and_err+0x138>)
 80084de:	f240 325a 	movw	r2, #858	; 0x35a
 80084e2:	4942      	ldr	r1, [pc, #264]	; (80085ec <tcp_listen_with_backlog_and_err+0x144>)
 80084e4:	4840      	ldr	r0, [pc, #256]	; (80085e8 <tcp_listen_with_backlog_and_err+0x140>)
 80084e6:	f00b f851 	bl	801358c <iprintf>
 80084ea:	23f1      	movs	r3, #241	; 0xf1
 80084ec:	76fb      	strb	r3, [r7, #27]
 80084ee:	e06b      	b.n	80085c8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	7d1b      	ldrb	r3, [r3, #20]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d104      	bne.n	8008502 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80084fc:	23f7      	movs	r3, #247	; 0xf7
 80084fe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008500:	e062      	b.n	80085c8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008502:	2002      	movs	r0, #2
 8008504:	f7fe fb42 	bl	8006b8c <memp_malloc>
 8008508:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d102      	bne.n	8008516 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008510:	23ff      	movs	r3, #255	; 0xff
 8008512:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008514:	e058      	b.n	80085c8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691a      	ldr	r2, [r3, #16]
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8ada      	ldrh	r2, [r3, #22]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	2201      	movs	r2, #1
 800852a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	7d5a      	ldrb	r2, [r3, #21]
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	7a5a      	ldrb	r2, [r3, #9]
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2200      	movs	r2, #0
 8008540:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	7ada      	ldrb	r2, [r3, #11]
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	7a9a      	ldrb	r2, [r3, #10]
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8adb      	ldrh	r3, [r3, #22]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d021      	beq.n	80085a6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008562:	4b23      	ldr	r3, [pc, #140]	; (80085f0 <tcp_listen_with_backlog_and_err+0x148>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	429a      	cmp	r2, r3
 800856a:	d105      	bne.n	8008578 <tcp_listen_with_backlog_and_err+0xd0>
 800856c:	4b20      	ldr	r3, [pc, #128]	; (80085f0 <tcp_listen_with_backlog_and_err+0x148>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <tcp_listen_with_backlog_and_err+0x148>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	e013      	b.n	80085a0 <tcp_listen_with_backlog_and_err+0xf8>
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <tcp_listen_with_backlog_and_err+0x148>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	e00c      	b.n	800859a <tcp_listen_with_backlog_and_err+0xf2>
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	429a      	cmp	r2, r3
 8008588:	d104      	bne.n	8008594 <tcp_listen_with_backlog_and_err+0xec>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	60da      	str	r2, [r3, #12]
 8008592:	e005      	b.n	80085a0 <tcp_listen_with_backlog_and_err+0xf8>
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	617b      	str	r3, [r7, #20]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1ef      	bne.n	8008580 <tcp_listen_with_backlog_and_err+0xd8>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff fbc0 	bl	8007d2c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	4a11      	ldr	r2, [pc, #68]	; (80085f4 <tcp_listen_with_backlog_and_err+0x14c>)
 80085b0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80085b2:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <tcp_listen_with_backlog_and_err+0x150>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	60da      	str	r2, [r3, #12]
 80085ba:	4a0f      	ldr	r2, [pc, #60]	; (80085f8 <tcp_listen_with_backlog_and_err+0x150>)
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	f005 fd0c 	bl	800dfdc <tcp_timer_needed>
  res = ERR_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7efa      	ldrb	r2, [r7, #27]
 80085d2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80085d4:	69fb      	ldr	r3, [r7, #28]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3720      	adds	r7, #32
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	08015624 	.word	0x08015624
 80085e4:	08015818 	.word	0x08015818
 80085e8:	08015668 	.word	0x08015668
 80085ec:	08015848 	.word	0x08015848
 80085f0:	20007b30 	.word	0x20007b30
 80085f4:	08008445 	.word	0x08008445
 80085f8:	20007b2c 	.word	0x20007b2c

080085fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <tcp_update_rcv_ann_wnd+0x1c>
 800860a:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800860c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008610:	4924      	ldr	r1, [pc, #144]	; (80086a4 <tcp_update_rcv_ann_wnd+0xa8>)
 8008612:	4825      	ldr	r0, [pc, #148]	; (80086a8 <tcp_update_rcv_ann_wnd+0xac>)
 8008614:	f00a ffba 	bl	801358c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008620:	4413      	add	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800862c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008630:	bf28      	it	cs
 8008632:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008636:	b292      	uxth	r2, r2
 8008638:	4413      	add	r3, r2
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	db08      	blt.n	8008654 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	e020      	b.n	8008696 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	dd03      	ble.n	800866a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008668:	e014      	b.n	8008694 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867c:	d306      	bcc.n	800868c <tcp_update_rcv_ann_wnd+0x90>
 800867e:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <tcp_update_rcv_ann_wnd+0xa4>)
 8008680:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008684:	4909      	ldr	r1, [pc, #36]	; (80086ac <tcp_update_rcv_ann_wnd+0xb0>)
 8008686:	4808      	ldr	r0, [pc, #32]	; (80086a8 <tcp_update_rcv_ann_wnd+0xac>)
 8008688:	f00a ff80 	bl	801358c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	b29a      	uxth	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008694:	2300      	movs	r3, #0
  }
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	08015624 	.word	0x08015624
 80086a4:	08015880 	.word	0x08015880
 80086a8:	08015668 	.word	0x08015668
 80086ac:	080158a4 	.word	0x080158a4

080086b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d107      	bne.n	80086d2 <tcp_recved+0x22>
 80086c2:	4b1f      	ldr	r3, [pc, #124]	; (8008740 <tcp_recved+0x90>)
 80086c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80086c8:	491e      	ldr	r1, [pc, #120]	; (8008744 <tcp_recved+0x94>)
 80086ca:	481f      	ldr	r0, [pc, #124]	; (8008748 <tcp_recved+0x98>)
 80086cc:	f00a ff5e 	bl	801358c <iprintf>
 80086d0:	e032      	b.n	8008738 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7d1b      	ldrb	r3, [r3, #20]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d106      	bne.n	80086e8 <tcp_recved+0x38>
 80086da:	4b19      	ldr	r3, [pc, #100]	; (8008740 <tcp_recved+0x90>)
 80086dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80086e0:	491a      	ldr	r1, [pc, #104]	; (800874c <tcp_recved+0x9c>)
 80086e2:	4819      	ldr	r0, [pc, #100]	; (8008748 <tcp_recved+0x98>)
 80086e4:	f00a ff52 	bl	801358c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086ec:	887b      	ldrh	r3, [r7, #2]
 80086ee:	4413      	add	r3, r2
 80086f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80086f2:	89fb      	ldrh	r3, [r7, #14]
 80086f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80086f8:	d804      	bhi.n	8008704 <tcp_recved+0x54>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fe:	89fa      	ldrh	r2, [r7, #14]
 8008700:	429a      	cmp	r2, r3
 8008702:	d204      	bcs.n	800870e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800870a:	851a      	strh	r2, [r3, #40]	; 0x28
 800870c:	e002      	b.n	8008714 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	89fa      	ldrh	r2, [r7, #14]
 8008712:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff ff71 	bl	80085fc <tcp_update_rcv_ann_wnd>
 800871a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008722:	d309      	bcc.n	8008738 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	8b5b      	ldrh	r3, [r3, #26]
 8008728:	f043 0302 	orr.w	r3, r3, #2
 800872c:	b29a      	uxth	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f004 fca6 	bl	800d084 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	08015624 	.word	0x08015624
 8008744:	080158c0 	.word	0x080158c0
 8008748:	08015668 	.word	0x08015668
 800874c:	080158d8 	.word	0x080158d8

08008750 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800875a:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <tcp_new_port+0x84>)
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	4b1c      	ldr	r3, [pc, #112]	; (80087d4 <tcp_new_port+0x84>)
 8008764:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008766:	4b1b      	ldr	r3, [pc, #108]	; (80087d4 <tcp_new_port+0x84>)
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800876e:	4293      	cmp	r3, r2
 8008770:	d103      	bne.n	800877a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008772:	4b18      	ldr	r3, [pc, #96]	; (80087d4 <tcp_new_port+0x84>)
 8008774:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008778:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800877a:	2300      	movs	r3, #0
 800877c:	71fb      	strb	r3, [r7, #7]
 800877e:	e01e      	b.n	80087be <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008780:	79fb      	ldrb	r3, [r7, #7]
 8008782:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <tcp_new_port+0x88>)
 8008784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	e011      	b.n	80087b2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	8ada      	ldrh	r2, [r3, #22]
 8008792:	4b10      	ldr	r3, [pc, #64]	; (80087d4 <tcp_new_port+0x84>)
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d108      	bne.n	80087ac <tcp_new_port+0x5c>
        n++;
 800879a:	88bb      	ldrh	r3, [r7, #4]
 800879c:	3301      	adds	r3, #1
 800879e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80087a0:	88bb      	ldrh	r3, [r7, #4]
 80087a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087a6:	d3d8      	bcc.n	800875a <tcp_new_port+0xa>
          return 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	e00d      	b.n	80087c8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1ea      	bne.n	800878e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	3301      	adds	r3, #1
 80087bc:	71fb      	strb	r3, [r7, #7]
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d9dd      	bls.n	8008780 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80087c4:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <tcp_new_port+0x84>)
 80087c6:	881b      	ldrh	r3, [r3, #0]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	20000016 	.word	0x20000016
 80087d8:	08039708 	.word	0x08039708

080087dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80087dc:	b5b0      	push	{r4, r5, r7, lr}
 80087de:	b090      	sub	sp, #64	; 0x40
 80087e0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80087e8:	4b94      	ldr	r3, [pc, #592]	; (8008a3c <tcp_slowtmr+0x260>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3301      	adds	r3, #1
 80087ee:	4a93      	ldr	r2, [pc, #588]	; (8008a3c <tcp_slowtmr+0x260>)
 80087f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80087f2:	4b93      	ldr	r3, [pc, #588]	; (8008a40 <tcp_slowtmr+0x264>)
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	4b91      	ldr	r3, [pc, #580]	; (8008a40 <tcp_slowtmr+0x264>)
 80087fc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008802:	4b90      	ldr	r3, [pc, #576]	; (8008a44 <tcp_slowtmr+0x268>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008808:	e29d      	b.n	8008d46 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800880a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880c:	7d1b      	ldrb	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <tcp_slowtmr+0x44>
 8008812:	4b8d      	ldr	r3, [pc, #564]	; (8008a48 <tcp_slowtmr+0x26c>)
 8008814:	f240 42be 	movw	r2, #1214	; 0x4be
 8008818:	498c      	ldr	r1, [pc, #560]	; (8008a4c <tcp_slowtmr+0x270>)
 800881a:	488d      	ldr	r0, [pc, #564]	; (8008a50 <tcp_slowtmr+0x274>)
 800881c:	f00a feb6 	bl	801358c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008822:	7d1b      	ldrb	r3, [r3, #20]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d106      	bne.n	8008836 <tcp_slowtmr+0x5a>
 8008828:	4b87      	ldr	r3, [pc, #540]	; (8008a48 <tcp_slowtmr+0x26c>)
 800882a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800882e:	4989      	ldr	r1, [pc, #548]	; (8008a54 <tcp_slowtmr+0x278>)
 8008830:	4887      	ldr	r0, [pc, #540]	; (8008a50 <tcp_slowtmr+0x274>)
 8008832:	f00a feab 	bl	801358c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	7d1b      	ldrb	r3, [r3, #20]
 800883a:	2b0a      	cmp	r3, #10
 800883c:	d106      	bne.n	800884c <tcp_slowtmr+0x70>
 800883e:	4b82      	ldr	r3, [pc, #520]	; (8008a48 <tcp_slowtmr+0x26c>)
 8008840:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008844:	4984      	ldr	r1, [pc, #528]	; (8008a58 <tcp_slowtmr+0x27c>)
 8008846:	4882      	ldr	r0, [pc, #520]	; (8008a50 <tcp_slowtmr+0x274>)
 8008848:	f00a fea0 	bl	801358c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884e:	7f9a      	ldrb	r2, [r3, #30]
 8008850:	4b7b      	ldr	r3, [pc, #492]	; (8008a40 <tcp_slowtmr+0x264>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d105      	bne.n	8008864 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008862:	e270      	b.n	8008d46 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008864:	4b76      	ldr	r3, [pc, #472]	; (8008a40 <tcp_slowtmr+0x264>)
 8008866:	781a      	ldrb	r2, [r3, #0]
 8008868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	7d1b      	ldrb	r3, [r3, #20]
 800887c:	2b02      	cmp	r3, #2
 800887e:	d10a      	bne.n	8008896 <tcp_slowtmr+0xba>
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008886:	2b05      	cmp	r3, #5
 8008888:	d905      	bls.n	8008896 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800888a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800888e:	3301      	adds	r3, #1
 8008890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008894:	e11e      	b.n	8008ad4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800889c:	2b0b      	cmp	r3, #11
 800889e:	d905      	bls.n	80088ac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80088a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088a4:	3301      	adds	r3, #1
 80088a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088aa:	e113      	b.n	8008ad4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d075      	beq.n	80089a2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d006      	beq.n	80088cc <tcp_slowtmr+0xf0>
 80088be:	4b62      	ldr	r3, [pc, #392]	; (8008a48 <tcp_slowtmr+0x26c>)
 80088c0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80088c4:	4965      	ldr	r1, [pc, #404]	; (8008a5c <tcp_slowtmr+0x280>)
 80088c6:	4862      	ldr	r0, [pc, #392]	; (8008a50 <tcp_slowtmr+0x274>)
 80088c8:	f00a fe60 	bl	801358c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d106      	bne.n	80088e2 <tcp_slowtmr+0x106>
 80088d4:	4b5c      	ldr	r3, [pc, #368]	; (8008a48 <tcp_slowtmr+0x26c>)
 80088d6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80088da:	4961      	ldr	r1, [pc, #388]	; (8008a60 <tcp_slowtmr+0x284>)
 80088dc:	485c      	ldr	r0, [pc, #368]	; (8008a50 <tcp_slowtmr+0x274>)
 80088de:	f00a fe55 	bl	801358c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80088e8:	2b0b      	cmp	r3, #11
 80088ea:	d905      	bls.n	80088f8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80088ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088f0:	3301      	adds	r3, #1
 80088f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088f6:	e0ed      	b.n	8008ad4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80088fe:	3b01      	subs	r3, #1
 8008900:	4a58      	ldr	r2, [pc, #352]	; (8008a64 <tcp_slowtmr+0x288>)
 8008902:	5cd3      	ldrb	r3, [r2, r3]
 8008904:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800890c:	7c7a      	ldrb	r2, [r7, #17]
 800890e:	429a      	cmp	r2, r3
 8008910:	d907      	bls.n	8008922 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008918:	3301      	adds	r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008928:	7c7a      	ldrb	r2, [r7, #17]
 800892a:	429a      	cmp	r2, r3
 800892c:	f200 80d2 	bhi.w	8008ad4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008930:	2301      	movs	r3, #1
 8008932:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800893a:	2b00      	cmp	r3, #0
 800893c:	d108      	bne.n	8008950 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800893e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008940:	f005 fa7e 	bl	800de40 <tcp_zero_window_probe>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d014      	beq.n	8008974 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800894a:	2300      	movs	r3, #0
 800894c:	623b      	str	r3, [r7, #32]
 800894e:	e011      	b.n	8008974 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008956:	4619      	mov	r1, r3
 8008958:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800895a:	f004 f901 	bl	800cb60 <tcp_split_unsent_seg>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d107      	bne.n	8008974 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008966:	f004 fb8d 	bl	800d084 <tcp_output>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008970:	2300      	movs	r3, #0
 8008972:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 80ac 	beq.w	8008ad4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008986:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800898a:	2b06      	cmp	r3, #6
 800898c:	f200 80a2 	bhi.w	8008ad4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008996:	3301      	adds	r3, #1
 8008998:	b2da      	uxtb	r2, r3
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80089a0:	e098      	b.n	8008ad4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	db0f      	blt.n	80089cc <tcp_slowtmr+0x1f0>
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d008      	beq.n	80089cc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	3301      	adds	r3, #1
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	b21a      	sxth	r2, r3
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80089d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80089d8:	429a      	cmp	r2, r3
 80089da:	db7b      	blt.n	8008ad4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80089dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089de:	f004 fe5f 	bl	800d6a0 <tcp_rexmit_rto_prepare>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d007      	beq.n	80089f8 <tcp_slowtmr+0x21c>
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d171      	bne.n	8008ad4 <tcp_slowtmr+0x2f8>
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d06d      	beq.n	8008ad4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	7d1b      	ldrb	r3, [r3, #20]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d03a      	beq.n	8008a76 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a06:	2b0c      	cmp	r3, #12
 8008a08:	bf28      	it	cs
 8008a0a:	230c      	movcs	r3, #12
 8008a0c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a14:	10db      	asrs	r3, r3, #3
 8008a16:	b21b      	sxth	r3, r3
 8008a18:	461a      	mov	r2, r3
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a20:	4413      	add	r3, r2
 8008a22:	7efa      	ldrb	r2, [r7, #27]
 8008a24:	4910      	ldr	r1, [pc, #64]	; (8008a68 <tcp_slowtmr+0x28c>)
 8008a26:	5c8a      	ldrb	r2, [r1, r2]
 8008a28:	4093      	lsls	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008a32:	4293      	cmp	r3, r2
 8008a34:	dc1a      	bgt.n	8008a6c <tcp_slowtmr+0x290>
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	b21a      	sxth	r2, r3
 8008a3a:	e019      	b.n	8008a70 <tcp_slowtmr+0x294>
 8008a3c:	20007b28 	.word	0x20007b28
 8008a40:	20000592 	.word	0x20000592
 8008a44:	20007b24 	.word	0x20007b24
 8008a48:	08015624 	.word	0x08015624
 8008a4c:	08015968 	.word	0x08015968
 8008a50:	08015668 	.word	0x08015668
 8008a54:	08015994 	.word	0x08015994
 8008a58:	080159c0 	.word	0x080159c0
 8008a5c:	080159f0 	.word	0x080159f0
 8008a60:	08015a24 	.word	0x08015a24
 8008a64:	08039700 	.word	0x08039700
 8008a68:	080396f0 	.word	0x080396f0
 8008a6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	2200      	movs	r2, #0
 8008a7a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	bf28      	it	cs
 8008a8c:	4613      	movcs	r3, r2
 8008a8e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008a90:	8a7b      	ldrh	r3, [r7, #18]
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d206      	bcs.n	8008abc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ad0:	f004 fe56 	bl	800d780 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	7d1b      	ldrb	r3, [r3, #20]
 8008ad8:	2b06      	cmp	r3, #6
 8008ada:	d111      	bne.n	8008b00 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	8b5b      	ldrh	r3, [r3, #26]
 8008ae0:	f003 0310 	and.w	r3, r3, #16
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ae8:	4b9c      	ldr	r3, [pc, #624]	; (8008d5c <tcp_slowtmr+0x580>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b28      	cmp	r3, #40	; 0x28
 8008af4:	d904      	bls.n	8008b00 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008afa:	3301      	adds	r3, #1
 8008afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	7a5b      	ldrb	r3, [r3, #9]
 8008b04:	f003 0308 	and.w	r3, r3, #8
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d04a      	beq.n	8008ba2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d003      	beq.n	8008b1c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b18:	2b07      	cmp	r3, #7
 8008b1a:	d142      	bne.n	8008ba2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b1c:	4b8f      	ldr	r3, [pc, #572]	; (8008d5c <tcp_slowtmr+0x580>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008b2c:	4b8c      	ldr	r3, [pc, #560]	; (8008d60 <tcp_slowtmr+0x584>)
 8008b2e:	440b      	add	r3, r1
 8008b30:	498c      	ldr	r1, [pc, #560]	; (8008d64 <tcp_slowtmr+0x588>)
 8008b32:	fba1 1303 	umull	r1, r3, r1, r3
 8008b36:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d90a      	bls.n	8008b52 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b40:	3301      	adds	r3, #1
 8008b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b50:	e027      	b.n	8008ba2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b52:	4b82      	ldr	r3, [pc, #520]	; (8008d5c <tcp_slowtmr+0x580>)
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008b68:	4618      	mov	r0, r3
 8008b6a:	4b7f      	ldr	r3, [pc, #508]	; (8008d68 <tcp_slowtmr+0x58c>)
 8008b6c:	fb03 f300 	mul.w	r3, r3, r0
 8008b70:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008b72:	497c      	ldr	r1, [pc, #496]	; (8008d64 <tcp_slowtmr+0x588>)
 8008b74:	fba1 1303 	umull	r1, r3, r1, r3
 8008b78:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d911      	bls.n	8008ba2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b80:	f005 f91e 	bl	800ddc0 <tcp_keepalive>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008b8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d107      	bne.n	8008ba2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008b98:	3301      	adds	r3, #1
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d011      	beq.n	8008bce <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008baa:	4b6c      	ldr	r3, [pc, #432]	; (8008d5c <tcp_slowtmr+0x580>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008bba:	4619      	mov	r1, r3
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	440b      	add	r3, r1
 8008bc2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d302      	bcc.n	8008bce <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bca:	f000 fef3 	bl	80099b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	7d1b      	ldrb	r3, [r3, #20]
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d10b      	bne.n	8008bee <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bd6:	4b61      	ldr	r3, [pc, #388]	; (8008d5c <tcp_slowtmr+0x580>)
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	2b28      	cmp	r3, #40	; 0x28
 8008be2:	d904      	bls.n	8008bee <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008be8:	3301      	adds	r3, #1
 8008bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	7d1b      	ldrb	r3, [r3, #20]
 8008bf2:	2b09      	cmp	r3, #9
 8008bf4:	d10b      	bne.n	8008c0e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008bf6:	4b59      	ldr	r3, [pc, #356]	; (8008d5c <tcp_slowtmr+0x580>)
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2bf0      	cmp	r3, #240	; 0xf0
 8008c02:	d904      	bls.n	8008c0e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c08:	3301      	adds	r3, #1
 8008c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d060      	beq.n	8008cd8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c20:	f000 fd14 	bl	800964c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d010      	beq.n	8008c4c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c2a:	4b50      	ldr	r3, [pc, #320]	; (8008d6c <tcp_slowtmr+0x590>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d106      	bne.n	8008c42 <tcp_slowtmr+0x466>
 8008c34:	4b4e      	ldr	r3, [pc, #312]	; (8008d70 <tcp_slowtmr+0x594>)
 8008c36:	f240 526d 	movw	r2, #1389	; 0x56d
 8008c3a:	494e      	ldr	r1, [pc, #312]	; (8008d74 <tcp_slowtmr+0x598>)
 8008c3c:	484e      	ldr	r0, [pc, #312]	; (8008d78 <tcp_slowtmr+0x59c>)
 8008c3e:	f00a fca5 	bl	801358c <iprintf>
        prev->next = pcb->next;
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	68da      	ldr	r2, [r3, #12]
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	e00f      	b.n	8008c6c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008c4c:	4b47      	ldr	r3, [pc, #284]	; (8008d6c <tcp_slowtmr+0x590>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d006      	beq.n	8008c64 <tcp_slowtmr+0x488>
 8008c56:	4b46      	ldr	r3, [pc, #280]	; (8008d70 <tcp_slowtmr+0x594>)
 8008c58:	f240 5271 	movw	r2, #1393	; 0x571
 8008c5c:	4947      	ldr	r1, [pc, #284]	; (8008d7c <tcp_slowtmr+0x5a0>)
 8008c5e:	4846      	ldr	r0, [pc, #280]	; (8008d78 <tcp_slowtmr+0x59c>)
 8008c60:	f00a fc94 	bl	801358c <iprintf>
        tcp_active_pcbs = pcb->next;
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	4a40      	ldr	r2, [pc, #256]	; (8008d6c <tcp_slowtmr+0x590>)
 8008c6a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008c6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d013      	beq.n	8008c9c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008c7c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c80:	3304      	adds	r3, #4
 8008c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c84:	8ad2      	ldrh	r2, [r2, #22]
 8008c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c88:	8b09      	ldrh	r1, [r1, #24]
 8008c8a:	9102      	str	r1, [sp, #8]
 8008c8c:	9201      	str	r2, [sp, #4]
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	462b      	mov	r3, r5
 8008c92:	4622      	mov	r2, r4
 8008c94:	4601      	mov	r1, r0
 8008c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c98:	f004 ffde 	bl	800dc58 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	7d1b      	ldrb	r3, [r3, #20]
 8008ca6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008cb2:	6838      	ldr	r0, [r7, #0]
 8008cb4:	f7ff f83a 	bl	8007d2c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008cb8:	4b31      	ldr	r3, [pc, #196]	; (8008d80 <tcp_slowtmr+0x5a4>)
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <tcp_slowtmr+0x4f2>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f06f 010c 	mvn.w	r1, #12
 8008cca:	68b8      	ldr	r0, [r7, #8]
 8008ccc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008cce:	4b2c      	ldr	r3, [pc, #176]	; (8008d80 <tcp_slowtmr+0x5a4>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d037      	beq.n	8008d46 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008cd6:	e592      	b.n	80087fe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce4:	7f1b      	ldrb	r3, [r3, #28]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	7f1a      	ldrb	r2, [r3, #28]
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	7f5b      	ldrb	r3, [r3, #29]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d325      	bcc.n	8008d46 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008d00:	4b1f      	ldr	r3, [pc, #124]	; (8008d80 <tcp_slowtmr+0x5a4>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <tcp_slowtmr+0x54c>
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d18:	6912      	ldr	r2, [r2, #16]
 8008d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008d26:	e002      	b.n	8008d2e <tcp_slowtmr+0x552>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008d2e:	4b14      	ldr	r3, [pc, #80]	; (8008d80 <tcp_slowtmr+0x5a4>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d000      	beq.n	8008d38 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008d36:	e562      	b.n	80087fe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d38:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d42:	f004 f99f 	bl	800d084 <tcp_output>
  while (pcb != NULL) {
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f47f ad5e 	bne.w	800880a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008d52:	4b0c      	ldr	r3, [pc, #48]	; (8008d84 <tcp_slowtmr+0x5a8>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008d58:	e069      	b.n	8008e2e <tcp_slowtmr+0x652>
 8008d5a:	bf00      	nop
 8008d5c:	20007b28 	.word	0x20007b28
 8008d60:	000a4cb8 	.word	0x000a4cb8
 8008d64:	10624dd3 	.word	0x10624dd3
 8008d68:	000124f8 	.word	0x000124f8
 8008d6c:	20007b24 	.word	0x20007b24
 8008d70:	08015624 	.word	0x08015624
 8008d74:	08015a5c 	.word	0x08015a5c
 8008d78:	08015668 	.word	0x08015668
 8008d7c:	08015a88 	.word	0x08015a88
 8008d80:	20007b20 	.word	0x20007b20
 8008d84:	20007b34 	.word	0x20007b34
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8a:	7d1b      	ldrb	r3, [r3, #20]
 8008d8c:	2b0a      	cmp	r3, #10
 8008d8e:	d006      	beq.n	8008d9e <tcp_slowtmr+0x5c2>
 8008d90:	4b2b      	ldr	r3, [pc, #172]	; (8008e40 <tcp_slowtmr+0x664>)
 8008d92:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008d96:	492b      	ldr	r1, [pc, #172]	; (8008e44 <tcp_slowtmr+0x668>)
 8008d98:	482b      	ldr	r0, [pc, #172]	; (8008e48 <tcp_slowtmr+0x66c>)
 8008d9a:	f00a fbf7 	bl	801358c <iprintf>
    pcb_remove = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008da4:	4b29      	ldr	r3, [pc, #164]	; (8008e4c <tcp_slowtmr+0x670>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2bf0      	cmp	r3, #240	; 0xf0
 8008db0:	d904      	bls.n	8008dbc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008db6:	3301      	adds	r3, #1
 8008db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d02f      	beq.n	8008e24 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dc6:	f000 fc41 	bl	800964c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d010      	beq.n	8008df2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008dd0:	4b1f      	ldr	r3, [pc, #124]	; (8008e50 <tcp_slowtmr+0x674>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d106      	bne.n	8008de8 <tcp_slowtmr+0x60c>
 8008dda:	4b19      	ldr	r3, [pc, #100]	; (8008e40 <tcp_slowtmr+0x664>)
 8008ddc:	f240 52af 	movw	r2, #1455	; 0x5af
 8008de0:	491c      	ldr	r1, [pc, #112]	; (8008e54 <tcp_slowtmr+0x678>)
 8008de2:	4819      	ldr	r0, [pc, #100]	; (8008e48 <tcp_slowtmr+0x66c>)
 8008de4:	f00a fbd2 	bl	801358c <iprintf>
        prev->next = pcb->next;
 8008de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	60da      	str	r2, [r3, #12]
 8008df0:	e00f      	b.n	8008e12 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008df2:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <tcp_slowtmr+0x674>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d006      	beq.n	8008e0a <tcp_slowtmr+0x62e>
 8008dfc:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <tcp_slowtmr+0x664>)
 8008dfe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008e02:	4915      	ldr	r1, [pc, #84]	; (8008e58 <tcp_slowtmr+0x67c>)
 8008e04:	4810      	ldr	r0, [pc, #64]	; (8008e48 <tcp_slowtmr+0x66c>)
 8008e06:	f00a fbc1 	bl	801358c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	4a10      	ldr	r2, [pc, #64]	; (8008e50 <tcp_slowtmr+0x674>)
 8008e10:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008e1c:	69f8      	ldr	r0, [r7, #28]
 8008e1e:	f7fe ff85 	bl	8007d2c <tcp_free>
 8008e22:	e004      	b.n	8008e2e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1a9      	bne.n	8008d88 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	3730      	adds	r7, #48	; 0x30
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	08015624 	.word	0x08015624
 8008e44:	08015ab4 	.word	0x08015ab4
 8008e48:	08015668 	.word	0x08015668
 8008e4c:	20007b28 	.word	0x20007b28
 8008e50:	20007b34 	.word	0x20007b34
 8008e54:	08015ae4 	.word	0x08015ae4
 8008e58:	08015b0c 	.word	0x08015b0c

08008e5c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008e62:	4b2d      	ldr	r3, [pc, #180]	; (8008f18 <tcp_fasttmr+0xbc>)
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	3301      	adds	r3, #1
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	4b2b      	ldr	r3, [pc, #172]	; (8008f18 <tcp_fasttmr+0xbc>)
 8008e6c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008e6e:	4b2b      	ldr	r3, [pc, #172]	; (8008f1c <tcp_fasttmr+0xc0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008e74:	e048      	b.n	8008f08 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7f9a      	ldrb	r2, [r3, #30]
 8008e7a:	4b27      	ldr	r3, [pc, #156]	; (8008f18 <tcp_fasttmr+0xbc>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d03f      	beq.n	8008f02 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008e82:	4b25      	ldr	r3, [pc, #148]	; (8008f18 <tcp_fasttmr+0xbc>)
 8008e84:	781a      	ldrb	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	8b5b      	ldrh	r3, [r3, #26]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d010      	beq.n	8008eb8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	8b5b      	ldrh	r3, [r3, #26]
 8008e9a:	f043 0302 	orr.w	r3, r3, #2
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f004 f8ed 	bl	800d084 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	8b5b      	ldrh	r3, [r3, #26]
 8008eae:	f023 0303 	bic.w	r3, r3, #3
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	8b5b      	ldrh	r3, [r3, #26]
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d009      	beq.n	8008ed8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	8b5b      	ldrh	r3, [r3, #26]
 8008ec8:	f023 0308 	bic.w	r3, r3, #8
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7ff f8be 	bl	8008054 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008ee6:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <tcp_fasttmr+0xc4>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f819 	bl	8008f24 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <tcp_fasttmr+0xc4>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d000      	beq.n	8008efc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008efa:	e7b8      	b.n	8008e6e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	e002      	b.n	8008f08 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1b3      	bne.n	8008e76 <tcp_fasttmr+0x1a>
    }
  }
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20000592 	.word	0x20000592
 8008f1c:	20007b24 	.word	0x20007b24
 8008f20:	20007b20 	.word	0x20007b20

08008f24 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f24:	b590      	push	{r4, r7, lr}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d109      	bne.n	8008f46 <tcp_process_refused_data+0x22>
 8008f32:	4b37      	ldr	r3, [pc, #220]	; (8009010 <tcp_process_refused_data+0xec>)
 8008f34:	f240 6209 	movw	r2, #1545	; 0x609
 8008f38:	4936      	ldr	r1, [pc, #216]	; (8009014 <tcp_process_refused_data+0xf0>)
 8008f3a:	4837      	ldr	r0, [pc, #220]	; (8009018 <tcp_process_refused_data+0xf4>)
 8008f3c:	f00a fb26 	bl	801358c <iprintf>
 8008f40:	f06f 030f 	mvn.w	r3, #15
 8008f44:	e060      	b.n	8009008 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f4a:	7b5b      	ldrb	r3, [r3, #13]
 8008f4c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f52:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <tcp_process_refused_data+0x58>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6918      	ldr	r0, [r3, #16]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	47a0      	blx	r4
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
 8008f7a:	e007      	b.n	8008f8c <tcp_process_refused_data+0x68>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	2000      	movs	r0, #0
 8008f84:	f000 f8c2 	bl	800910c <tcp_recv_null>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d12a      	bne.n	8008fea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d033      	beq.n	8009006 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fa6:	d005      	beq.n	8008fb4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fac:	3301      	adds	r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00b      	beq.n	8008fd6 <tcp_process_refused_data+0xb2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6918      	ldr	r0, [r3, #16]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2200      	movs	r2, #0
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	47a0      	blx	r4
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]
 8008fd4:	e001      	b.n	8008fda <tcp_process_refused_data+0xb6>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fde:	f113 0f0d 	cmn.w	r3, #13
 8008fe2:	d110      	bne.n	8009006 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008fe4:	f06f 030c 	mvn.w	r3, #12
 8008fe8:	e00e      	b.n	8009008 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fee:	f113 0f0d 	cmn.w	r3, #13
 8008ff2:	d102      	bne.n	8008ffa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008ff4:	f06f 030c 	mvn.w	r3, #12
 8008ff8:	e006      	b.n	8009008 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009000:	f06f 0304 	mvn.w	r3, #4
 8009004:	e000      	b.n	8009008 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	bd90      	pop	{r4, r7, pc}
 8009010:	08015624 	.word	0x08015624
 8009014:	08015b34 	.word	0x08015b34
 8009018:	08015668 	.word	0x08015668

0800901c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009024:	e007      	b.n	8009036 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f80a 	bl	8009046 <tcp_seg_free>
    seg = next;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f4      	bne.n	8009026 <tcp_segs_free+0xa>
  }
}
 800903c:	bf00      	nop
 800903e:	bf00      	nop
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00c      	beq.n	800906e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d004      	beq.n	8009066 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	4618      	mov	r0, r3
 8009062:	f7fe fbab 	bl	80077bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	2003      	movs	r0, #3
 800906a:	f7fd fdd1 	bl	8006c10 <memp_free>
  }
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d107      	bne.n	800909a <tcp_setprio+0x22>
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <tcp_setprio+0x30>)
 800908c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8009090:	4906      	ldr	r1, [pc, #24]	; (80090ac <tcp_setprio+0x34>)
 8009092:	4807      	ldr	r0, [pc, #28]	; (80090b0 <tcp_setprio+0x38>)
 8009094:	f00a fa7a 	bl	801358c <iprintf>
 8009098:	e002      	b.n	80090a0 <tcp_setprio+0x28>

  pcb->prio = prio;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	755a      	strb	r2, [r3, #21]
}
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	08015624 	.word	0x08015624
 80090ac:	08015b5c 	.word	0x08015b5c
 80090b0:	08015668 	.word	0x08015668

080090b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <tcp_seg_copy+0x1c>
 80090c2:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <tcp_seg_copy+0x4c>)
 80090c4:	f240 6282 	movw	r2, #1666	; 0x682
 80090c8:	490e      	ldr	r1, [pc, #56]	; (8009104 <tcp_seg_copy+0x50>)
 80090ca:	480f      	ldr	r0, [pc, #60]	; (8009108 <tcp_seg_copy+0x54>)
 80090cc:	f00a fa5e 	bl	801358c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090d0:	2003      	movs	r0, #3
 80090d2:	f7fd fd5b 	bl	8006b8c <memp_malloc>
 80090d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <tcp_seg_copy+0x2e>
    return NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	e00a      	b.n	80090f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090e2:	2210      	movs	r2, #16
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f00a fa20 	bl	801352c <memcpy>
  pbuf_ref(cseg->p);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fc03 	bl	80078fc <pbuf_ref>
  return cseg;
 80090f6:	68fb      	ldr	r3, [r7, #12]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	08015624 	.word	0x08015624
 8009104:	08015b78 	.word	0x08015b78
 8009108:	08015668 	.word	0x08015668

0800910c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d109      	bne.n	8009134 <tcp_recv_null+0x28>
 8009120:	4b12      	ldr	r3, [pc, #72]	; (800916c <tcp_recv_null+0x60>)
 8009122:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009126:	4912      	ldr	r1, [pc, #72]	; (8009170 <tcp_recv_null+0x64>)
 8009128:	4812      	ldr	r0, [pc, #72]	; (8009174 <tcp_recv_null+0x68>)
 800912a:	f00a fa2f 	bl	801358c <iprintf>
 800912e:	f06f 030f 	mvn.w	r3, #15
 8009132:	e016      	b.n	8009162 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d009      	beq.n	800914e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	891b      	ldrh	r3, [r3, #8]
 800913e:	4619      	mov	r1, r3
 8009140:	68b8      	ldr	r0, [r7, #8]
 8009142:	f7ff fab5 	bl	80086b0 <tcp_recved>
    pbuf_free(p);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7fe fb38 	bl	80077bc <pbuf_free>
 800914c:	e008      	b.n	8009160 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800914e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d104      	bne.n	8009160 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009156:	68b8      	ldr	r0, [r7, #8]
 8009158:	f7fe ffe6 	bl	8008128 <tcp_close>
 800915c:	4603      	mov	r3, r0
 800915e:	e000      	b.n	8009162 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	08015624 	.word	0x08015624
 8009170:	08015b94 	.word	0x08015b94
 8009174:	08015668 	.word	0x08015668

08009178 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009186:	2b00      	cmp	r3, #0
 8009188:	db01      	blt.n	800918e <tcp_kill_prio+0x16>
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	e000      	b.n	8009190 <tcp_kill_prio+0x18>
 800918e:	237f      	movs	r3, #127	; 0x7f
 8009190:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009192:	7afb      	ldrb	r3, [r7, #11]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d034      	beq.n	8009202 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	3b01      	subs	r3, #1
 800919c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091a6:	4b19      	ldr	r3, [pc, #100]	; (800920c <tcp_kill_prio+0x94>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	e01f      	b.n	80091ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	7d5b      	ldrb	r3, [r3, #21]
 80091b2:	7afa      	ldrb	r2, [r7, #11]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d80c      	bhi.n	80091d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091bc:	7afa      	ldrb	r2, [r7, #11]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d112      	bne.n	80091e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091c2:	4b13      	ldr	r3, [pc, #76]	; (8009210 <tcp_kill_prio+0x98>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d80a      	bhi.n	80091e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80091d2:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <tcp_kill_prio+0x98>)
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	7d5b      	ldrb	r3, [r3, #21]
 80091e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1dc      	bne.n	80091ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80091fa:	6938      	ldr	r0, [r7, #16]
 80091fc:	f7ff f87e 	bl	80082fc <tcp_abort>
 8009200:	e000      	b.n	8009204 <tcp_kill_prio+0x8c>
    return;
 8009202:	bf00      	nop
  }
}
 8009204:	3718      	adds	r7, #24
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20007b24 	.word	0x20007b24
 8009210:	20007b28 	.word	0x20007b28

08009214 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	2b08      	cmp	r3, #8
 8009222:	d009      	beq.n	8009238 <tcp_kill_state+0x24>
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	2b09      	cmp	r3, #9
 8009228:	d006      	beq.n	8009238 <tcp_kill_state+0x24>
 800922a:	4b1a      	ldr	r3, [pc, #104]	; (8009294 <tcp_kill_state+0x80>)
 800922c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009230:	4919      	ldr	r1, [pc, #100]	; (8009298 <tcp_kill_state+0x84>)
 8009232:	481a      	ldr	r0, [pc, #104]	; (800929c <tcp_kill_state+0x88>)
 8009234:	f00a f9aa 	bl	801358c <iprintf>

  inactivity = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009240:	4b17      	ldr	r3, [pc, #92]	; (80092a0 <tcp_kill_state+0x8c>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	617b      	str	r3, [r7, #20]
 8009246:	e017      	b.n	8009278 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	7d1b      	ldrb	r3, [r3, #20]
 800924c:	79fa      	ldrb	r2, [r7, #7]
 800924e:	429a      	cmp	r2, r3
 8009250:	d10f      	bne.n	8009272 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009252:	4b14      	ldr	r3, [pc, #80]	; (80092a4 <tcp_kill_state+0x90>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	429a      	cmp	r2, r3
 8009260:	d807      	bhi.n	8009272 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009262:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <tcp_kill_state+0x90>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1e4      	bne.n	8009248 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009284:	2100      	movs	r1, #0
 8009286:	6938      	ldr	r0, [r7, #16]
 8009288:	f7fe ff7a 	bl	8008180 <tcp_abandon>
  }
}
 800928c:	bf00      	nop
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	08015624 	.word	0x08015624
 8009298:	08015bb0 	.word	0x08015bb0
 800929c:	08015668 	.word	0x08015668
 80092a0:	20007b24 	.word	0x20007b24
 80092a4:	20007b28 	.word	0x20007b28

080092a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092b6:	4b12      	ldr	r3, [pc, #72]	; (8009300 <tcp_kill_timewait+0x58>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	e012      	b.n	80092e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092be:	4b11      	ldr	r3, [pc, #68]	; (8009304 <tcp_kill_timewait+0x5c>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d807      	bhi.n	80092de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80092ce:	4b0d      	ldr	r3, [pc, #52]	; (8009304 <tcp_kill_timewait+0x5c>)
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e9      	bne.n	80092be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80092f0:	68b8      	ldr	r0, [r7, #8]
 80092f2:	f7ff f803 	bl	80082fc <tcp_abort>
  }
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20007b34 	.word	0x20007b34
 8009304:	20007b28 	.word	0x20007b28

08009308 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800930e:	4b10      	ldr	r3, [pc, #64]	; (8009350 <tcp_handle_closepend+0x48>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009314:	e014      	b.n	8009340 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8b5b      	ldrh	r3, [r3, #26]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b00      	cmp	r3, #0
 8009326:	d009      	beq.n	800933c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	8b5b      	ldrh	r3, [r3, #26]
 800932c:	f023 0308 	bic.w	r3, r3, #8
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7fe fe8c 	bl	8008054 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e7      	bne.n	8009316 <tcp_handle_closepend+0xe>
  }
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20007b24 	.word	0x20007b24

08009354 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800935e:	2001      	movs	r0, #1
 8009360:	f7fd fc14 	bl	8006b8c <memp_malloc>
 8009364:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d14e      	bne.n	800940a <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800936c:	f7ff ffcc 	bl	8009308 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009370:	f7ff ff9a 	bl	80092a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009374:	2001      	movs	r0, #1
 8009376:	f7fd fc09 	bl	8006b8c <memp_malloc>
 800937a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d139      	bne.n	80093f6 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009382:	2009      	movs	r0, #9
 8009384:	f7ff ff46 	bl	8009214 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009388:	2001      	movs	r0, #1
 800938a:	f7fd fbff 	bl	8006b8c <memp_malloc>
 800938e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d125      	bne.n	80093e2 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009396:	2008      	movs	r0, #8
 8009398:	f7ff ff3c 	bl	8009214 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800939c:	2001      	movs	r0, #1
 800939e:	f7fd fbf5 	bl	8006b8c <memp_malloc>
 80093a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d111      	bne.n	80093ce <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff fee3 	bl	8009178 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093b2:	2001      	movs	r0, #1
 80093b4:	f7fd fbea 	bl	8006b8c <memp_malloc>
 80093b8:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d006      	beq.n	80093ce <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80093c0:	4b36      	ldr	r3, [pc, #216]	; (800949c <tcp_alloc+0x148>)
 80093c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093c6:	881a      	ldrh	r2, [r3, #0]
 80093c8:	3a01      	subs	r2, #1
 80093ca:	b292      	uxth	r2, r2
 80093cc:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d006      	beq.n	80093e2 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80093d4:	4b31      	ldr	r3, [pc, #196]	; (800949c <tcp_alloc+0x148>)
 80093d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093da:	881a      	ldrh	r2, [r3, #0]
 80093dc:	3a01      	subs	r2, #1
 80093de:	b292      	uxth	r2, r2
 80093e0:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d006      	beq.n	80093f6 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80093e8:	4b2c      	ldr	r3, [pc, #176]	; (800949c <tcp_alloc+0x148>)
 80093ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093ee:	881a      	ldrh	r2, [r3, #0]
 80093f0:	3a01      	subs	r2, #1
 80093f2:	b292      	uxth	r2, r2
 80093f4:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d006      	beq.n	800940a <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80093fc:	4b27      	ldr	r3, [pc, #156]	; (800949c <tcp_alloc+0x148>)
 80093fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009402:	881a      	ldrh	r2, [r3, #0]
 8009404:	3a01      	subs	r2, #1
 8009406:	b292      	uxth	r2, r2
 8009408:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d03f      	beq.n	8009490 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009410:	229c      	movs	r2, #156	; 0x9c
 8009412:	2100      	movs	r1, #0
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f00a f8b1 	bl	801357c <memset>
    pcb->prio = prio;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	79fa      	ldrb	r2, [r7, #7]
 800941e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009426:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009430:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	22ff      	movs	r2, #255	; 0xff
 800943e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009446:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2206      	movs	r2, #6
 800944c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2206      	movs	r2, #6
 8009454:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800945c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2201      	movs	r2, #1
 8009462:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009466:	4b0e      	ldr	r3, [pc, #56]	; (80094a0 <tcp_alloc+0x14c>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800946e:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <tcp_alloc+0x150>)
 8009470:	781a      	ldrb	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800947c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4a09      	ldr	r2, [pc, #36]	; (80094a8 <tcp_alloc+0x154>)
 8009484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4a08      	ldr	r2, [pc, #32]	; (80094ac <tcp_alloc+0x158>)
 800948c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009490:	68fb      	ldr	r3, [r7, #12]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20007a48 	.word	0x20007a48
 80094a0:	20007b28 	.word	0x20007b28
 80094a4:	20000592 	.word	0x20000592
 80094a8:	0800910d 	.word	0x0800910d
 80094ac:	006ddd00 	.word	0x006ddd00

080094b0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80094ba:	2040      	movs	r0, #64	; 0x40
 80094bc:	f7ff ff4a 	bl	8009354 <tcp_alloc>
 80094c0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80094c2:	68fb      	ldr	r3, [r7, #12]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	611a      	str	r2, [r3, #16]
  }
}
 80094e2:	bf00      	nop
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
	...

080094f0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00e      	beq.n	800951e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	7d1b      	ldrb	r3, [r3, #20]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d106      	bne.n	8009516 <tcp_recv+0x26>
 8009508:	4b07      	ldr	r3, [pc, #28]	; (8009528 <tcp_recv+0x38>)
 800950a:	f240 72df 	movw	r2, #2015	; 0x7df
 800950e:	4907      	ldr	r1, [pc, #28]	; (800952c <tcp_recv+0x3c>)
 8009510:	4807      	ldr	r0, [pc, #28]	; (8009530 <tcp_recv+0x40>)
 8009512:	f00a f83b 	bl	801358c <iprintf>
    pcb->recv = recv;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800951e:	bf00      	nop
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	08015624 	.word	0x08015624
 800952c:	08015bc0 	.word	0x08015bc0
 8009530:	08015668 	.word	0x08015668

08009534 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00e      	beq.n	8009562 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7d1b      	ldrb	r3, [r3, #20]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d106      	bne.n	800955a <tcp_sent+0x26>
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <tcp_sent+0x38>)
 800954e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8009552:	4907      	ldr	r1, [pc, #28]	; (8009570 <tcp_sent+0x3c>)
 8009554:	4807      	ldr	r0, [pc, #28]	; (8009574 <tcp_sent+0x40>)
 8009556:	f00a f819 	bl	801358c <iprintf>
    pcb->sent = sent;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	08015624 	.word	0x08015624
 8009570:	08015be8 	.word	0x08015be8
 8009574:	08015668 	.word	0x08015668

08009578 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00e      	beq.n	80095a6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	7d1b      	ldrb	r3, [r3, #20]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d106      	bne.n	800959e <tcp_err+0x26>
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <tcp_err+0x38>)
 8009592:	f640 020d 	movw	r2, #2061	; 0x80d
 8009596:	4907      	ldr	r1, [pc, #28]	; (80095b4 <tcp_err+0x3c>)
 8009598:	4807      	ldr	r0, [pc, #28]	; (80095b8 <tcp_err+0x40>)
 800959a:	f009 fff7 	bl	801358c <iprintf>
    pcb->errf = err;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	08015624 	.word	0x08015624
 80095b4:	08015c10 	.word	0x08015c10
 80095b8:	08015668 	.word	0x08015668

080095bc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d008      	beq.n	80095de <tcp_accept+0x22>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	7d1b      	ldrb	r3, [r3, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d104      	bne.n	80095de <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	619a      	str	r2, [r3, #24]
  }
}
 80095de:	bf00      	nop
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
	...

080095ec <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d107      	bne.n	8009610 <tcp_poll+0x24>
 8009600:	4b0e      	ldr	r3, [pc, #56]	; (800963c <tcp_poll+0x50>)
 8009602:	f640 023d 	movw	r2, #2109	; 0x83d
 8009606:	490e      	ldr	r1, [pc, #56]	; (8009640 <tcp_poll+0x54>)
 8009608:	480e      	ldr	r0, [pc, #56]	; (8009644 <tcp_poll+0x58>)
 800960a:	f009 ffbf 	bl	801358c <iprintf>
 800960e:	e011      	b.n	8009634 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	7d1b      	ldrb	r3, [r3, #20]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d106      	bne.n	8009626 <tcp_poll+0x3a>
 8009618:	4b08      	ldr	r3, [pc, #32]	; (800963c <tcp_poll+0x50>)
 800961a:	f640 023e 	movw	r2, #2110	; 0x83e
 800961e:	490a      	ldr	r1, [pc, #40]	; (8009648 <tcp_poll+0x5c>)
 8009620:	4808      	ldr	r0, [pc, #32]	; (8009644 <tcp_poll+0x58>)
 8009622:	f009 ffb3 	bl	801358c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	79fa      	ldrb	r2, [r7, #7]
 8009632:	775a      	strb	r2, [r3, #29]
}
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	08015624 	.word	0x08015624
 8009640:	08015c38 	.word	0x08015c38
 8009644:	08015668 	.word	0x08015668
 8009648:	08015c50 	.word	0x08015c50

0800964c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d107      	bne.n	800966a <tcp_pcb_purge+0x1e>
 800965a:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <tcp_pcb_purge+0x94>)
 800965c:	f640 0251 	movw	r2, #2129	; 0x851
 8009660:	4920      	ldr	r1, [pc, #128]	; (80096e4 <tcp_pcb_purge+0x98>)
 8009662:	4821      	ldr	r0, [pc, #132]	; (80096e8 <tcp_pcb_purge+0x9c>)
 8009664:	f009 ff92 	bl	801358c <iprintf>
 8009668:	e037      	b.n	80096da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7d1b      	ldrb	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d033      	beq.n	80096da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009676:	2b0a      	cmp	r3, #10
 8009678:	d02f      	beq.n	80096da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800967e:	2b01      	cmp	r3, #1
 8009680:	d02b      	beq.n	80096da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009686:	2b00      	cmp	r3, #0
 8009688:	d007      	beq.n	800969a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe f894 	bl	80077bc <pbuf_free>
      pcb->refused_data = NULL;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f986 	bl	80099b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096ae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fcb1 	bl	800901c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096be:	4618      	mov	r0, r3
 80096c0:	f7ff fcac 	bl	800901c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	08015624 	.word	0x08015624
 80096e4:	08015c70 	.word	0x08015c70
 80096e8:	08015668 	.word	0x08015668

080096ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d106      	bne.n	800970a <tcp_pcb_remove+0x1e>
 80096fc:	4b3e      	ldr	r3, [pc, #248]	; (80097f8 <tcp_pcb_remove+0x10c>)
 80096fe:	f640 0283 	movw	r2, #2179	; 0x883
 8009702:	493e      	ldr	r1, [pc, #248]	; (80097fc <tcp_pcb_remove+0x110>)
 8009704:	483e      	ldr	r0, [pc, #248]	; (8009800 <tcp_pcb_remove+0x114>)
 8009706:	f009 ff41 	bl	801358c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d106      	bne.n	800971e <tcp_pcb_remove+0x32>
 8009710:	4b39      	ldr	r3, [pc, #228]	; (80097f8 <tcp_pcb_remove+0x10c>)
 8009712:	f640 0284 	movw	r2, #2180	; 0x884
 8009716:	493b      	ldr	r1, [pc, #236]	; (8009804 <tcp_pcb_remove+0x118>)
 8009718:	4839      	ldr	r0, [pc, #228]	; (8009800 <tcp_pcb_remove+0x114>)
 800971a:	f009 ff37 	bl	801358c <iprintf>

  TCP_RMV(pcblist, pcb);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	429a      	cmp	r2, r3
 8009726:	d105      	bne.n	8009734 <tcp_pcb_remove+0x48>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	e013      	b.n	800975c <tcp_pcb_remove+0x70>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	e00c      	b.n	8009756 <tcp_pcb_remove+0x6a>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d104      	bne.n	8009750 <tcp_pcb_remove+0x64>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	60da      	str	r2, [r3, #12]
 800974e:	e005      	b.n	800975c <tcp_pcb_remove+0x70>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1ef      	bne.n	800973c <tcp_pcb_remove+0x50>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2200      	movs	r2, #0
 8009760:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009762:	6838      	ldr	r0, [r7, #0]
 8009764:	f7ff ff72 	bl	800964c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	7d1b      	ldrb	r3, [r3, #20]
 800976c:	2b0a      	cmp	r3, #10
 800976e:	d013      	beq.n	8009798 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009774:	2b01      	cmp	r3, #1
 8009776:	d00f      	beq.n	8009798 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	8b5b      	ldrh	r3, [r3, #26]
 800977c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009780:	2b00      	cmp	r3, #0
 8009782:	d009      	beq.n	8009798 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	8b5b      	ldrh	r3, [r3, #26]
 8009788:	f043 0302 	orr.w	r3, r3, #2
 800978c:	b29a      	uxth	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009792:	6838      	ldr	r0, [r7, #0]
 8009794:	f003 fc76 	bl	800d084 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	7d1b      	ldrb	r3, [r3, #20]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d020      	beq.n	80097e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d006      	beq.n	80097b6 <tcp_pcb_remove+0xca>
 80097a8:	4b13      	ldr	r3, [pc, #76]	; (80097f8 <tcp_pcb_remove+0x10c>)
 80097aa:	f640 0293 	movw	r2, #2195	; 0x893
 80097ae:	4916      	ldr	r1, [pc, #88]	; (8009808 <tcp_pcb_remove+0x11c>)
 80097b0:	4813      	ldr	r0, [pc, #76]	; (8009800 <tcp_pcb_remove+0x114>)
 80097b2:	f009 feeb 	bl	801358c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d006      	beq.n	80097cc <tcp_pcb_remove+0xe0>
 80097be:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <tcp_pcb_remove+0x10c>)
 80097c0:	f640 0294 	movw	r2, #2196	; 0x894
 80097c4:	4911      	ldr	r1, [pc, #68]	; (800980c <tcp_pcb_remove+0x120>)
 80097c6:	480e      	ldr	r0, [pc, #56]	; (8009800 <tcp_pcb_remove+0x114>)
 80097c8:	f009 fee0 	bl	801358c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d006      	beq.n	80097e2 <tcp_pcb_remove+0xf6>
 80097d4:	4b08      	ldr	r3, [pc, #32]	; (80097f8 <tcp_pcb_remove+0x10c>)
 80097d6:	f640 0296 	movw	r2, #2198	; 0x896
 80097da:	490d      	ldr	r1, [pc, #52]	; (8009810 <tcp_pcb_remove+0x124>)
 80097dc:	4808      	ldr	r0, [pc, #32]	; (8009800 <tcp_pcb_remove+0x114>)
 80097de:	f009 fed5 	bl	801358c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2200      	movs	r2, #0
 80097e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2200      	movs	r2, #0
 80097ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80097ee:	bf00      	nop
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	08015624 	.word	0x08015624
 80097fc:	08015c8c 	.word	0x08015c8c
 8009800:	08015668 	.word	0x08015668
 8009804:	08015ca8 	.word	0x08015ca8
 8009808:	08015cc8 	.word	0x08015cc8
 800980c:	08015ce0 	.word	0x08015ce0
 8009810:	08015cfc 	.word	0x08015cfc

08009814 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <tcp_next_iss+0x1c>
 8009822:	4b0a      	ldr	r3, [pc, #40]	; (800984c <tcp_next_iss+0x38>)
 8009824:	f640 02af 	movw	r2, #2223	; 0x8af
 8009828:	4909      	ldr	r1, [pc, #36]	; (8009850 <tcp_next_iss+0x3c>)
 800982a:	480a      	ldr	r0, [pc, #40]	; (8009854 <tcp_next_iss+0x40>)
 800982c:	f009 feae 	bl	801358c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009830:	4b09      	ldr	r3, [pc, #36]	; (8009858 <tcp_next_iss+0x44>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	4b09      	ldr	r3, [pc, #36]	; (800985c <tcp_next_iss+0x48>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4413      	add	r3, r2
 800983a:	4a07      	ldr	r2, [pc, #28]	; (8009858 <tcp_next_iss+0x44>)
 800983c:	6013      	str	r3, [r2, #0]
  return iss;
 800983e:	4b06      	ldr	r3, [pc, #24]	; (8009858 <tcp_next_iss+0x44>)
 8009840:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	08015624 	.word	0x08015624
 8009850:	08015d14 	.word	0x08015d14
 8009854:	08015668 	.word	0x08015668
 8009858:	20000018 	.word	0x20000018
 800985c:	20007b28 	.word	0x20007b28

08009860 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <tcp_eff_send_mss_netif+0x22>
 8009874:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <tcp_eff_send_mss_netif+0x68>)
 8009876:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800987a:	4914      	ldr	r1, [pc, #80]	; (80098cc <tcp_eff_send_mss_netif+0x6c>)
 800987c:	4814      	ldr	r0, [pc, #80]	; (80098d0 <tcp_eff_send_mss_netif+0x70>)
 800987e:	f009 fe85 	bl	801358c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009888:	89fb      	ldrh	r3, [r7, #14]
 800988a:	e019      	b.n	80098c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009890:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009892:	8afb      	ldrh	r3, [r7, #22]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d012      	beq.n	80098be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009898:	2328      	movs	r3, #40	; 0x28
 800989a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800989c:	8afa      	ldrh	r2, [r7, #22]
 800989e:	8abb      	ldrh	r3, [r7, #20]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d904      	bls.n	80098ae <tcp_eff_send_mss_netif+0x4e>
 80098a4:	8afa      	ldrh	r2, [r7, #22]
 80098a6:	8abb      	ldrh	r3, [r7, #20]
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	e000      	b.n	80098b0 <tcp_eff_send_mss_netif+0x50>
 80098ae:	2300      	movs	r3, #0
 80098b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80098b2:	8a7a      	ldrh	r2, [r7, #18]
 80098b4:	89fb      	ldrh	r3, [r7, #14]
 80098b6:	4293      	cmp	r3, r2
 80098b8:	bf28      	it	cs
 80098ba:	4613      	movcs	r3, r2
 80098bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80098be:	89fb      	ldrh	r3, [r7, #14]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	08015624 	.word	0x08015624
 80098cc:	08015d30 	.word	0x08015d30
 80098d0:	08015668 	.word	0x08015668

080098d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d119      	bne.n	800991c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80098e8:	4b10      	ldr	r3, [pc, #64]	; (800992c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80098ea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80098ee:	4910      	ldr	r1, [pc, #64]	; (8009930 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80098f0:	4810      	ldr	r0, [pc, #64]	; (8009934 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80098f2:	f009 fe4b 	bl	801358c <iprintf>

  while (pcb != NULL) {
 80098f6:	e011      	b.n	800991c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	429a      	cmp	r2, r3
 8009902:	d108      	bne.n	8009916 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7fe fcf6 	bl	80082fc <tcp_abort>
      pcb = next;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	e002      	b.n	800991c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1ea      	bne.n	80098f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009922:	bf00      	nop
 8009924:	bf00      	nop
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	08015624 	.word	0x08015624
 8009930:	08015d58 	.word	0x08015d58
 8009934:	08015668 	.word	0x08015668

08009938 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d02a      	beq.n	800999e <tcp_netif_ip_addr_changed+0x66>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d026      	beq.n	800999e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009950:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <tcp_netif_ip_addr_changed+0x70>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff ffbc 	bl	80098d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800995c:	4b13      	ldr	r3, [pc, #76]	; (80099ac <tcp_netif_ip_addr_changed+0x74>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff ffb6 	bl	80098d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d017      	beq.n	800999e <tcp_netif_ip_addr_changed+0x66>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d013      	beq.n	800999e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009976:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <tcp_netif_ip_addr_changed+0x78>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	e00c      	b.n	8009998 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d103      	bne.n	8009992 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1ef      	bne.n	800997e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800999e:	bf00      	nop
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20007b24 	.word	0x20007b24
 80099ac:	20007b30 	.word	0x20007b30
 80099b0:	20007b2c 	.word	0x20007b2c

080099b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7ff fb27 	bl	800901c <tcp_segs_free>
    pcb->ooseq = NULL;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80099dc:	b590      	push	{r4, r7, lr}
 80099de:	b08d      	sub	sp, #52	; 0x34
 80099e0:	af04      	add	r7, sp, #16
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d105      	bne.n	80099f8 <tcp_input+0x1c>
 80099ec:	4b5b      	ldr	r3, [pc, #364]	; (8009b5c <tcp_input+0x180>)
 80099ee:	2283      	movs	r2, #131	; 0x83
 80099f0:	495b      	ldr	r1, [pc, #364]	; (8009b60 <tcp_input+0x184>)
 80099f2:	485c      	ldr	r0, [pc, #368]	; (8009b64 <tcp_input+0x188>)
 80099f4:	f009 fdca 	bl	801358c <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 80099f8:	4b5b      	ldr	r3, [pc, #364]	; (8009b68 <tcp_input+0x18c>)
 80099fa:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 80099fe:	3301      	adds	r3, #1
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	4b59      	ldr	r3, [pc, #356]	; (8009b68 <tcp_input+0x18c>)
 8009a04:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	4a57      	ldr	r2, [pc, #348]	; (8009b6c <tcp_input+0x190>)
 8009a0e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	895b      	ldrh	r3, [r3, #10]
 8009a14:	2b13      	cmp	r3, #19
 8009a16:	d809      	bhi.n	8009a2c <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8009a18:	4b53      	ldr	r3, [pc, #332]	; (8009b68 <tcp_input+0x18c>)
 8009a1a:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009a1e:	3301      	adds	r3, #1
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	4b51      	ldr	r3, [pc, #324]	; (8009b68 <tcp_input+0x18c>)
 8009a24:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8009a28:	f000 bc36 	b.w	800a298 <tcp_input+0x8bc>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009a2c:	4b50      	ldr	r3, [pc, #320]	; (8009b70 <tcp_input+0x194>)
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	4a4f      	ldr	r2, [pc, #316]	; (8009b70 <tcp_input+0x194>)
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f008 fcf4 	bl	8012424 <ip4_addr_isbroadcast_u32>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d105      	bne.n	8009a4e <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009a42:	4b4b      	ldr	r3, [pc, #300]	; (8009b70 <tcp_input+0x194>)
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009a4a:	2be0      	cmp	r3, #224	; 0xe0
 8009a4c:	d109      	bne.n	8009a62 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8009a4e:	4b46      	ldr	r3, [pc, #280]	; (8009b68 <tcp_input+0x18c>)
 8009a50:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8009a54:	3301      	adds	r3, #1
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	4b43      	ldr	r3, [pc, #268]	; (8009b68 <tcp_input+0x18c>)
 8009a5a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 8009a5e:	f000 bc1b 	b.w	800a298 <tcp_input+0x8bc>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	891a      	ldrh	r2, [r3, #8]
 8009a66:	4b43      	ldr	r3, [pc, #268]	; (8009b74 <tcp_input+0x198>)
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	4b43      	ldr	r3, [pc, #268]	; (8009b78 <tcp_input+0x19c>)
 8009a6c:	2106      	movs	r1, #6
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7fc fb76 	bl	8006160 <ip_chksum_pseudo>
 8009a74:	4603      	mov	r3, r0
 8009a76:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8009a78:	8a3b      	ldrh	r3, [r7, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <tcp_input+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 8009a7e:	4b3a      	ldr	r3, [pc, #232]	; (8009b68 <tcp_input+0x18c>)
 8009a80:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009a84:	3301      	adds	r3, #1
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	4b37      	ldr	r3, [pc, #220]	; (8009b68 <tcp_input+0x18c>)
 8009a8a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      goto dropped;
 8009a8e:	f000 bc03 	b.w	800a298 <tcp_input+0x8bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009a92:	4b36      	ldr	r3, [pc, #216]	; (8009b6c <tcp_input+0x190>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	899b      	ldrh	r3, [r3, #12]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fc f9c4 	bl	8005e28 <lwip_htons>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	0b1b      	lsrs	r3, r3, #12
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	2b13      	cmp	r3, #19
 8009ab0:	d905      	bls.n	8009abe <tcp_input+0xe2>
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	891b      	ldrh	r3, [r3, #8]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d908      	bls.n	8009ad0 <tcp_input+0xf4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8009abe:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <tcp_input+0x18c>)
 8009ac0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	4b27      	ldr	r3, [pc, #156]	; (8009b68 <tcp_input+0x18c>)
 8009aca:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8009ace:	e3e3      	b.n	800a298 <tcp_input+0x8bc>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	3b14      	subs	r3, #20
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	4b28      	ldr	r3, [pc, #160]	; (8009b7c <tcp_input+0x1a0>)
 8009ada:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009adc:	4b28      	ldr	r3, [pc, #160]	; (8009b80 <tcp_input+0x1a4>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	895a      	ldrh	r2, [r3, #10]
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d309      	bcc.n	8009b02 <tcp_input+0x126>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009aee:	4b23      	ldr	r3, [pc, #140]	; (8009b7c <tcp_input+0x1a0>)
 8009af0:	881a      	ldrh	r2, [r3, #0]
 8009af2:	4b24      	ldr	r3, [pc, #144]	; (8009b84 <tcp_input+0x1a8>)
 8009af4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7fd fdd8 	bl	80076b0 <pbuf_remove_header>
 8009b00:	e06e      	b.n	8009be0 <tcp_input+0x204>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <tcp_input+0x13a>
 8009b0a:	4b14      	ldr	r3, [pc, #80]	; (8009b5c <tcp_input+0x180>)
 8009b0c:	22c2      	movs	r2, #194	; 0xc2
 8009b0e:	491e      	ldr	r1, [pc, #120]	; (8009b88 <tcp_input+0x1ac>)
 8009b10:	4814      	ldr	r0, [pc, #80]	; (8009b64 <tcp_input+0x188>)
 8009b12:	f009 fd3b 	bl	801358c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009b16:	2114      	movs	r1, #20
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7fd fdc9 	bl	80076b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	895a      	ldrh	r2, [r3, #10]
 8009b22:	4b18      	ldr	r3, [pc, #96]	; (8009b84 <tcp_input+0x1a8>)
 8009b24:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009b26:	4b15      	ldr	r3, [pc, #84]	; (8009b7c <tcp_input+0x1a0>)
 8009b28:	881a      	ldrh	r2, [r3, #0]
 8009b2a:	4b16      	ldr	r3, [pc, #88]	; (8009b84 <tcp_input+0x1a8>)
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009b32:	4b14      	ldr	r3, [pc, #80]	; (8009b84 <tcp_input+0x1a8>)
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7fd fdb9 	bl	80076b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	895b      	ldrh	r3, [r3, #10]
 8009b44:	89ba      	ldrh	r2, [r7, #12]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d920      	bls.n	8009b8c <tcp_input+0x1b0>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8009b4a:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <tcp_input+0x18c>)
 8009b4c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009b50:	3301      	adds	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <tcp_input+0x18c>)
 8009b56:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8009b5a:	e39d      	b.n	800a298 <tcp_input+0x8bc>
 8009b5c:	08015d8c 	.word	0x08015d8c
 8009b60:	08015dc0 	.word	0x08015dc0
 8009b64:	08015dd8 	.word	0x08015dd8
 8009b68:	20007a48 	.word	0x20007a48
 8009b6c:	200005a4 	.word	0x200005a4
 8009b70:	20004534 	.word	0x20004534
 8009b74:	20004548 	.word	0x20004548
 8009b78:	20004544 	.word	0x20004544
 8009b7c:	200005a8 	.word	0x200005a8
 8009b80:	200005ac 	.word	0x200005ac
 8009b84:	200005aa 	.word	0x200005aa
 8009b88:	08015e00 	.word	0x08015e00
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	4a91      	ldr	r2, [pc, #580]	; (8009dd8 <tcp_input+0x3fc>)
 8009b94:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	89ba      	ldrh	r2, [r7, #12]
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fd fd86 	bl	80076b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	891a      	ldrh	r2, [r3, #8]
 8009ba8:	89bb      	ldrh	r3, [r7, #12]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	895b      	ldrh	r3, [r3, #10]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <tcp_input+0x1ea>
 8009bba:	4b88      	ldr	r3, [pc, #544]	; (8009ddc <tcp_input+0x400>)
 8009bbc:	22df      	movs	r2, #223	; 0xdf
 8009bbe:	4988      	ldr	r1, [pc, #544]	; (8009de0 <tcp_input+0x404>)
 8009bc0:	4888      	ldr	r0, [pc, #544]	; (8009de4 <tcp_input+0x408>)
 8009bc2:	f009 fce3 	bl	801358c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	891a      	ldrh	r2, [r3, #8]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	891b      	ldrh	r3, [r3, #8]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d005      	beq.n	8009be0 <tcp_input+0x204>
 8009bd4:	4b81      	ldr	r3, [pc, #516]	; (8009ddc <tcp_input+0x400>)
 8009bd6:	22e0      	movs	r2, #224	; 0xe0
 8009bd8:	4983      	ldr	r1, [pc, #524]	; (8009de8 <tcp_input+0x40c>)
 8009bda:	4882      	ldr	r0, [pc, #520]	; (8009de4 <tcp_input+0x408>)
 8009bdc:	f009 fcd6 	bl	801358c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009be0:	4b82      	ldr	r3, [pc, #520]	; (8009dec <tcp_input+0x410>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	4a80      	ldr	r2, [pc, #512]	; (8009dec <tcp_input+0x410>)
 8009bea:	6814      	ldr	r4, [r2, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fc f91b 	bl	8005e28 <lwip_htons>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009bf6:	4b7d      	ldr	r3, [pc, #500]	; (8009dec <tcp_input+0x410>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	885b      	ldrh	r3, [r3, #2]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4a7b      	ldr	r2, [pc, #492]	; (8009dec <tcp_input+0x410>)
 8009c00:	6814      	ldr	r4, [r2, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fc f910 	bl	8005e28 <lwip_htons>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009c0c:	4b77      	ldr	r3, [pc, #476]	; (8009dec <tcp_input+0x410>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	4a76      	ldr	r2, [pc, #472]	; (8009dec <tcp_input+0x410>)
 8009c14:	6814      	ldr	r4, [r2, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fc f91b 	bl	8005e52 <lwip_htonl>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	6063      	str	r3, [r4, #4]
 8009c20:	6863      	ldr	r3, [r4, #4]
 8009c22:	4a73      	ldr	r2, [pc, #460]	; (8009df0 <tcp_input+0x414>)
 8009c24:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009c26:	4b71      	ldr	r3, [pc, #452]	; (8009dec <tcp_input+0x410>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	4a6f      	ldr	r2, [pc, #444]	; (8009dec <tcp_input+0x410>)
 8009c2e:	6814      	ldr	r4, [r2, #0]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fc f90e 	bl	8005e52 <lwip_htonl>
 8009c36:	4603      	mov	r3, r0
 8009c38:	60a3      	str	r3, [r4, #8]
 8009c3a:	68a3      	ldr	r3, [r4, #8]
 8009c3c:	4a6d      	ldr	r2, [pc, #436]	; (8009df4 <tcp_input+0x418>)
 8009c3e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009c40:	4b6a      	ldr	r3, [pc, #424]	; (8009dec <tcp_input+0x410>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	89db      	ldrh	r3, [r3, #14]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	4a68      	ldr	r2, [pc, #416]	; (8009dec <tcp_input+0x410>)
 8009c4a:	6814      	ldr	r4, [r2, #0]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fc f8eb 	bl	8005e28 <lwip_htons>
 8009c52:	4603      	mov	r3, r0
 8009c54:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009c56:	4b65      	ldr	r3, [pc, #404]	; (8009dec <tcp_input+0x410>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	899b      	ldrh	r3, [r3, #12]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fc f8e2 	bl	8005e28 <lwip_htons>
 8009c64:	4603      	mov	r3, r0
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	4b62      	ldr	r3, [pc, #392]	; (8009df8 <tcp_input+0x41c>)
 8009c70:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	891a      	ldrh	r2, [r3, #8]
 8009c76:	4b61      	ldr	r3, [pc, #388]	; (8009dfc <tcp_input+0x420>)
 8009c78:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009c7a:	4b5f      	ldr	r3, [pc, #380]	; (8009df8 <tcp_input+0x41c>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d014      	beq.n	8009cb0 <tcp_input+0x2d4>
    tcplen++;
 8009c86:	4b5d      	ldr	r3, [pc, #372]	; (8009dfc <tcp_input+0x420>)
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	4b5b      	ldr	r3, [pc, #364]	; (8009dfc <tcp_input+0x420>)
 8009c90:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	891a      	ldrh	r2, [r3, #8]
 8009c96:	4b59      	ldr	r3, [pc, #356]	; (8009dfc <tcp_input+0x420>)
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d908      	bls.n	8009cb0 <tcp_input+0x2d4>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8009c9e:	4b58      	ldr	r3, [pc, #352]	; (8009e00 <tcp_input+0x424>)
 8009ca0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	4b55      	ldr	r3, [pc, #340]	; (8009e00 <tcp_input+0x424>)
 8009caa:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8009cae:	e2f3      	b.n	800a298 <tcp_input+0x8bc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009cb4:	4b53      	ldr	r3, [pc, #332]	; (8009e04 <tcp_input+0x428>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	61fb      	str	r3, [r7, #28]
 8009cba:	e07f      	b.n	8009dbc <tcp_input+0x3e0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	7d1b      	ldrb	r3, [r3, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <tcp_input+0x2f4>
 8009cc4:	4b45      	ldr	r3, [pc, #276]	; (8009ddc <tcp_input+0x400>)
 8009cc6:	22fb      	movs	r2, #251	; 0xfb
 8009cc8:	494f      	ldr	r1, [pc, #316]	; (8009e08 <tcp_input+0x42c>)
 8009cca:	4846      	ldr	r0, [pc, #280]	; (8009de4 <tcp_input+0x408>)
 8009ccc:	f009 fc5e 	bl	801358c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	7d1b      	ldrb	r3, [r3, #20]
 8009cd4:	2b0a      	cmp	r3, #10
 8009cd6:	d105      	bne.n	8009ce4 <tcp_input+0x308>
 8009cd8:	4b40      	ldr	r3, [pc, #256]	; (8009ddc <tcp_input+0x400>)
 8009cda:	22fc      	movs	r2, #252	; 0xfc
 8009cdc:	494b      	ldr	r1, [pc, #300]	; (8009e0c <tcp_input+0x430>)
 8009cde:	4841      	ldr	r0, [pc, #260]	; (8009de4 <tcp_input+0x408>)
 8009ce0:	f009 fc54 	bl	801358c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	7d1b      	ldrb	r3, [r3, #20]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d105      	bne.n	8009cf8 <tcp_input+0x31c>
 8009cec:	4b3b      	ldr	r3, [pc, #236]	; (8009ddc <tcp_input+0x400>)
 8009cee:	22fd      	movs	r2, #253	; 0xfd
 8009cf0:	4947      	ldr	r1, [pc, #284]	; (8009e10 <tcp_input+0x434>)
 8009cf2:	483c      	ldr	r0, [pc, #240]	; (8009de4 <tcp_input+0x408>)
 8009cf4:	f009 fc4a 	bl	801358c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	7a1b      	ldrb	r3, [r3, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00c      	beq.n	8009d1a <tcp_input+0x33e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	7a1a      	ldrb	r2, [r3, #8]
 8009d04:	4b43      	ldr	r3, [pc, #268]	; (8009e14 <tcp_input+0x438>)
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d002      	beq.n	8009d1a <tcp_input+0x33e>
      prev = pcb;
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	61bb      	str	r3, [r7, #24]
      continue;
 8009d18:	e04d      	b.n	8009db6 <tcp_input+0x3da>
    }

    if (pcb->remote_port == tcphdr->src &&
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	8b1a      	ldrh	r2, [r3, #24]
 8009d1e:	4b33      	ldr	r3, [pc, #204]	; (8009dec <tcp_input+0x410>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d143      	bne.n	8009db2 <tcp_input+0x3d6>
        pcb->local_port == tcphdr->dest &&
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	8ada      	ldrh	r2, [r3, #22]
 8009d2e:	4b2f      	ldr	r3, [pc, #188]	; (8009dec <tcp_input+0x410>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	885b      	ldrh	r3, [r3, #2]
 8009d34:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d13b      	bne.n	8009db2 <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	4b35      	ldr	r3, [pc, #212]	; (8009e14 <tcp_input+0x438>)
 8009d40:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d135      	bne.n	8009db2 <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b32      	ldr	r3, [pc, #200]	; (8009e14 <tcp_input+0x438>)
 8009d4c:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d12f      	bne.n	8009db2 <tcp_input+0x3d6>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d106      	bne.n	8009d6a <tcp_input+0x38e>
 8009d5c:	4b1f      	ldr	r3, [pc, #124]	; (8009ddc <tcp_input+0x400>)
 8009d5e:	f240 120d 	movw	r2, #269	; 0x10d
 8009d62:	492d      	ldr	r1, [pc, #180]	; (8009e18 <tcp_input+0x43c>)
 8009d64:	481f      	ldr	r0, [pc, #124]	; (8009de4 <tcp_input+0x408>)
 8009d66:	f009 fc11 	bl	801358c <iprintf>
      if (prev != NULL) {
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00b      	beq.n	8009d88 <tcp_input+0x3ac>
        prev->next = pcb->next;
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009d78:	4b22      	ldr	r3, [pc, #136]	; (8009e04 <tcp_input+0x428>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009d80:	4a20      	ldr	r2, [pc, #128]	; (8009e04 <tcp_input+0x428>)
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	e007      	b.n	8009d98 <tcp_input+0x3bc>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8009d88:	4b1d      	ldr	r3, [pc, #116]	; (8009e00 <tcp_input+0x424>)
 8009d8a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8009d8e:	3301      	adds	r3, #1
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <tcp_input+0x424>)
 8009d94:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d111      	bne.n	8009dc6 <tcp_input+0x3ea>
 8009da2:	4b0e      	ldr	r3, [pc, #56]	; (8009ddc <tcp_input+0x400>)
 8009da4:	f240 1215 	movw	r2, #277	; 0x115
 8009da8:	491c      	ldr	r1, [pc, #112]	; (8009e1c <tcp_input+0x440>)
 8009daa:	480e      	ldr	r0, [pc, #56]	; (8009de4 <tcp_input+0x408>)
 8009dac:	f009 fbee 	bl	801358c <iprintf>
      break;
 8009db0:	e009      	b.n	8009dc6 <tcp_input+0x3ea>
    }
    prev = pcb;
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	61fb      	str	r3, [r7, #28]
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f47f af7c 	bne.w	8009cbc <tcp_input+0x2e0>
 8009dc4:	e000      	b.n	8009dc8 <tcp_input+0x3ec>
      break;
 8009dc6:	bf00      	nop
  }

  if (pcb == NULL) {
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 80c4 	bne.w	8009f58 <tcp_input+0x57c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009dd0:	4b13      	ldr	r3, [pc, #76]	; (8009e20 <tcp_input+0x444>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	61fb      	str	r3, [r7, #28]
 8009dd6:	e065      	b.n	8009ea4 <tcp_input+0x4c8>
 8009dd8:	200005ac 	.word	0x200005ac
 8009ddc:	08015d8c 	.word	0x08015d8c
 8009de0:	08015e10 	.word	0x08015e10
 8009de4:	08015dd8 	.word	0x08015dd8
 8009de8:	08015e1c 	.word	0x08015e1c
 8009dec:	200005a4 	.word	0x200005a4
 8009df0:	200005b4 	.word	0x200005b4
 8009df4:	200005b8 	.word	0x200005b8
 8009df8:	200005c0 	.word	0x200005c0
 8009dfc:	200005be 	.word	0x200005be
 8009e00:	20007a48 	.word	0x20007a48
 8009e04:	20007b24 	.word	0x20007b24
 8009e08:	08015e3c 	.word	0x08015e3c
 8009e0c:	08015e64 	.word	0x08015e64
 8009e10:	08015e90 	.word	0x08015e90
 8009e14:	20004534 	.word	0x20004534
 8009e18:	08015eb8 	.word	0x08015eb8
 8009e1c:	08015ee4 	.word	0x08015ee4
 8009e20:	20007b34 	.word	0x20007b34
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	7d1b      	ldrb	r3, [r3, #20]
 8009e28:	2b0a      	cmp	r3, #10
 8009e2a:	d006      	beq.n	8009e3a <tcp_input+0x45e>
 8009e2c:	4b91      	ldr	r3, [pc, #580]	; (800a074 <tcp_input+0x698>)
 8009e2e:	f240 121f 	movw	r2, #287	; 0x11f
 8009e32:	4991      	ldr	r1, [pc, #580]	; (800a078 <tcp_input+0x69c>)
 8009e34:	4891      	ldr	r0, [pc, #580]	; (800a07c <tcp_input+0x6a0>)
 8009e36:	f009 fba9 	bl	801358c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	7a1b      	ldrb	r3, [r3, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d009      	beq.n	8009e56 <tcp_input+0x47a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	7a1a      	ldrb	r2, [r3, #8]
 8009e46:	4b8e      	ldr	r3, [pc, #568]	; (800a080 <tcp_input+0x6a4>)
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e4e:	3301      	adds	r3, #1
 8009e50:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d122      	bne.n	8009e9c <tcp_input+0x4c0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	8b1a      	ldrh	r2, [r3, #24]
 8009e5a:	4b8a      	ldr	r3, [pc, #552]	; (800a084 <tcp_input+0x6a8>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d11b      	bne.n	8009e9e <tcp_input+0x4c2>
          pcb->local_port == tcphdr->dest &&
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	8ada      	ldrh	r2, [r3, #22]
 8009e6a:	4b86      	ldr	r3, [pc, #536]	; (800a084 <tcp_input+0x6a8>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d113      	bne.n	8009e9e <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	4b81      	ldr	r3, [pc, #516]	; (800a080 <tcp_input+0x6a4>)
 8009e7c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d10d      	bne.n	8009e9e <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	4b7e      	ldr	r3, [pc, #504]	; (800a080 <tcp_input+0x6a4>)
 8009e88:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d107      	bne.n	8009e9e <tcp_input+0x4c2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009e8e:	69f8      	ldr	r0, [r7, #28]
 8009e90:	f000 fb78 	bl	800a584 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7fd fc91 	bl	80077bc <pbuf_free>
        return;
 8009e9a:	e20a      	b.n	800a2b2 <tcp_input+0x8d6>
        continue;
 8009e9c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1bc      	bne.n	8009e24 <tcp_input+0x448>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009eae:	4b76      	ldr	r3, [pc, #472]	; (800a088 <tcp_input+0x6ac>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	e02a      	b.n	8009f0c <tcp_input+0x530>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	7a1b      	ldrb	r3, [r3, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00c      	beq.n	8009ed8 <tcp_input+0x4fc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	7a1a      	ldrb	r2, [r3, #8]
 8009ec2:	4b6f      	ldr	r3, [pc, #444]	; (800a080 <tcp_input+0x6a4>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009eca:	3301      	adds	r3, #1
 8009ecc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d002      	beq.n	8009ed8 <tcp_input+0x4fc>
        prev = (struct tcp_pcb *)lpcb;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	61bb      	str	r3, [r7, #24]
        continue;
 8009ed6:	e016      	b.n	8009f06 <tcp_input+0x52a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	8ada      	ldrh	r2, [r3, #22]
 8009edc:	4b69      	ldr	r3, [pc, #420]	; (800a084 <tcp_input+0x6a8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	885b      	ldrh	r3, [r3, #2]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d10c      	bne.n	8009f02 <tcp_input+0x526>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	4b64      	ldr	r3, [pc, #400]	; (800a080 <tcp_input+0x6a4>)
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d00f      	beq.n	8009f14 <tcp_input+0x538>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00d      	beq.n	8009f16 <tcp_input+0x53a>
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d009      	beq.n	8009f16 <tcp_input+0x53a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1d1      	bne.n	8009eb6 <tcp_input+0x4da>
 8009f12:	e000      	b.n	8009f16 <tcp_input+0x53a>
            break;
 8009f14:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01d      	beq.n	8009f58 <tcp_input+0x57c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00b      	beq.n	8009f3a <tcp_input+0x55e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009f2a:	4b57      	ldr	r3, [pc, #348]	; (800a088 <tcp_input+0x6ac>)
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009f32:	4a55      	ldr	r2, [pc, #340]	; (800a088 <tcp_input+0x6ac>)
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	e007      	b.n	8009f4a <tcp_input+0x56e>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8009f3a:	4b54      	ldr	r3, [pc, #336]	; (800a08c <tcp_input+0x6b0>)
 8009f3c:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8009f40:	3301      	adds	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	4b51      	ldr	r3, [pc, #324]	; (800a08c <tcp_input+0x6b0>)
 8009f46:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009f4a:	6978      	ldr	r0, [r7, #20]
 8009f4c:	f000 fa12 	bl	800a374 <tcp_listen_input>
      }
      pbuf_free(p);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7fd fc33 	bl	80077bc <pbuf_free>
      return;
 8009f56:	e1ac      	b.n	800a2b2 <tcp_input+0x8d6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 8162 	beq.w	800a224 <tcp_input+0x848>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009f60:	4b4b      	ldr	r3, [pc, #300]	; (800a090 <tcp_input+0x6b4>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	891a      	ldrh	r2, [r3, #8]
 8009f6a:	4b49      	ldr	r3, [pc, #292]	; (800a090 <tcp_input+0x6b4>)
 8009f6c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009f6e:	4a48      	ldr	r2, [pc, #288]	; (800a090 <tcp_input+0x6b4>)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009f74:	4b43      	ldr	r3, [pc, #268]	; (800a084 <tcp_input+0x6a8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a45      	ldr	r2, [pc, #276]	; (800a090 <tcp_input+0x6b4>)
 8009f7a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009f7c:	4b45      	ldr	r3, [pc, #276]	; (800a094 <tcp_input+0x6b8>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009f82:	4b45      	ldr	r3, [pc, #276]	; (800a098 <tcp_input+0x6bc>)
 8009f84:	2200      	movs	r2, #0
 8009f86:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009f88:	4b44      	ldr	r3, [pc, #272]	; (800a09c <tcp_input+0x6c0>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009f8e:	4b44      	ldr	r3, [pc, #272]	; (800a0a0 <tcp_input+0x6c4>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	f003 0308 	and.w	r3, r3, #8
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d006      	beq.n	8009fa8 <tcp_input+0x5cc>
      p->flags |= PBUF_FLAG_PUSH;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	7b5b      	ldrb	r3, [r3, #13]
 8009f9e:	f043 0301 	orr.w	r3, r3, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d01e      	beq.n	8009fee <tcp_input+0x612>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009fb0:	69f8      	ldr	r0, [r7, #28]
 8009fb2:	f7fe ffb7 	bl	8008f24 <tcp_process_refused_data>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f113 0f0d 	cmn.w	r3, #13
 8009fbc:	d007      	beq.n	8009fce <tcp_input+0x5f2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d013      	beq.n	8009fee <tcp_input+0x612>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009fc6:	4b37      	ldr	r3, [pc, #220]	; (800a0a4 <tcp_input+0x6c8>)
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00f      	beq.n	8009fee <tcp_input+0x612>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <tcp_input+0x600>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009fd6:	69f8      	ldr	r0, [r7, #28]
 8009fd8:	f003 fe90 	bl	800dcfc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8009fdc:	4b2b      	ldr	r3, [pc, #172]	; (800a08c <tcp_input+0x6b0>)
 8009fde:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	4b29      	ldr	r3, [pc, #164]	; (800a08c <tcp_input+0x6b0>)
 8009fe8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009fec:	e107      	b.n	800a1fe <tcp_input+0x822>
      }
    }
    tcp_input_pcb = pcb;
 8009fee:	4a2e      	ldr	r2, [pc, #184]	; (800a0a8 <tcp_input+0x6cc>)
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009ff4:	69f8      	ldr	r0, [r7, #28]
 8009ff6:	f000 fb3f 	bl	800a678 <tcp_process>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009ffe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a002:	f113 0f0d 	cmn.w	r3, #13
 800a006:	f000 80ef 	beq.w	800a1e8 <tcp_input+0x80c>
      if (recv_flags & TF_RESET) {
 800a00a:	4b23      	ldr	r3, [pc, #140]	; (800a098 <tcp_input+0x6bc>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d015      	beq.n	800a042 <tcp_input+0x666>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d008      	beq.n	800a032 <tcp_input+0x656>
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	6912      	ldr	r2, [r2, #16]
 800a02a:	f06f 010d 	mvn.w	r1, #13
 800a02e:	4610      	mov	r0, r2
 800a030:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a032:	69f9      	ldr	r1, [r7, #28]
 800a034:	481d      	ldr	r0, [pc, #116]	; (800a0ac <tcp_input+0x6d0>)
 800a036:	f7ff fb59 	bl	80096ec <tcp_pcb_remove>
        tcp_free(pcb);
 800a03a:	69f8      	ldr	r0, [r7, #28]
 800a03c:	f7fd fe76 	bl	8007d2c <tcp_free>
 800a040:	e0dd      	b.n	800a1fe <tcp_input+0x822>
      } else {
        err = ERR_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a046:	4b15      	ldr	r3, [pc, #84]	; (800a09c <tcp_input+0x6c0>)
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d03b      	beq.n	800a0c6 <tcp_input+0x6ea>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a04e:	4b13      	ldr	r3, [pc, #76]	; (800a09c <tcp_input+0x6c0>)
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d028      	beq.n	800a0b0 <tcp_input+0x6d4>
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a064:	69fa      	ldr	r2, [r7, #28]
 800a066:	6910      	ldr	r0, [r2, #16]
 800a068:	897a      	ldrh	r2, [r7, #10]
 800a06a:	69f9      	ldr	r1, [r7, #28]
 800a06c:	4798      	blx	r3
 800a06e:	4603      	mov	r3, r0
 800a070:	74fb      	strb	r3, [r7, #19]
 800a072:	e01f      	b.n	800a0b4 <tcp_input+0x6d8>
 800a074:	08015d8c 	.word	0x08015d8c
 800a078:	08015f10 	.word	0x08015f10
 800a07c:	08015dd8 	.word	0x08015dd8
 800a080:	20004534 	.word	0x20004534
 800a084:	200005a4 	.word	0x200005a4
 800a088:	20007b2c 	.word	0x20007b2c
 800a08c:	20007a48 	.word	0x20007a48
 800a090:	20000594 	.word	0x20000594
 800a094:	200005c4 	.word	0x200005c4
 800a098:	200005c1 	.word	0x200005c1
 800a09c:	200005bc 	.word	0x200005bc
 800a0a0:	200005c0 	.word	0x200005c0
 800a0a4:	200005be 	.word	0x200005be
 800a0a8:	20007b38 	.word	0x20007b38
 800a0ac:	20007b24 	.word	0x20007b24
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a0b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0b8:	f113 0f0d 	cmn.w	r3, #13
 800a0bc:	f000 8096 	beq.w	800a1ec <tcp_input+0x810>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a0c0:	4b7d      	ldr	r3, [pc, #500]	; (800a2b8 <tcp_input+0x8dc>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a0c6:	69f8      	ldr	r0, [r7, #28]
 800a0c8:	f000 f914 	bl	800a2f4 <tcp_input_delayed_close>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f040 808e 	bne.w	800a1f0 <tcp_input+0x814>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a0d4:	4b79      	ldr	r3, [pc, #484]	; (800a2bc <tcp_input+0x8e0>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d041      	beq.n	800a160 <tcp_input+0x784>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d006      	beq.n	800a0f2 <tcp_input+0x716>
 800a0e4:	4b76      	ldr	r3, [pc, #472]	; (800a2c0 <tcp_input+0x8e4>)
 800a0e6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a0ea:	4976      	ldr	r1, [pc, #472]	; (800a2c4 <tcp_input+0x8e8>)
 800a0ec:	4876      	ldr	r0, [pc, #472]	; (800a2c8 <tcp_input+0x8ec>)
 800a0ee:	f009 fa4d 	bl	801358c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	8b5b      	ldrh	r3, [r3, #26]
 800a0f6:	f003 0310 	and.w	r3, r3, #16
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <tcp_input+0x734>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a0fe:	4b6f      	ldr	r3, [pc, #444]	; (800a2bc <tcp_input+0x8e0>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f7fd fb5a 	bl	80077bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a108:	69f8      	ldr	r0, [r7, #28]
 800a10a:	f7fe f8f7 	bl	80082fc <tcp_abort>
            goto aborted;
 800a10e:	e076      	b.n	800a1fe <tcp_input+0x822>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00c      	beq.n	800a134 <tcp_input+0x758>
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	6918      	ldr	r0, [r3, #16]
 800a124:	4b65      	ldr	r3, [pc, #404]	; (800a2bc <tcp_input+0x8e0>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	2300      	movs	r3, #0
 800a12a:	69f9      	ldr	r1, [r7, #28]
 800a12c:	47a0      	blx	r4
 800a12e:	4603      	mov	r3, r0
 800a130:	74fb      	strb	r3, [r7, #19]
 800a132:	e008      	b.n	800a146 <tcp_input+0x76a>
 800a134:	4b61      	ldr	r3, [pc, #388]	; (800a2bc <tcp_input+0x8e0>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	2300      	movs	r3, #0
 800a13a:	69f9      	ldr	r1, [r7, #28]
 800a13c:	2000      	movs	r0, #0
 800a13e:	f7fe ffe5 	bl	800910c <tcp_recv_null>
 800a142:	4603      	mov	r3, r0
 800a144:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a14a:	f113 0f0d 	cmn.w	r3, #13
 800a14e:	d051      	beq.n	800a1f4 <tcp_input+0x818>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a150:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <tcp_input+0x784>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a158:	4b58      	ldr	r3, [pc, #352]	; (800a2bc <tcp_input+0x8e0>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a160:	4b5a      	ldr	r3, [pc, #360]	; (800a2cc <tcp_input+0x8f0>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	f003 0320 	and.w	r3, r3, #32
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d030      	beq.n	800a1ce <tcp_input+0x7f2>
          if (pcb->refused_data != NULL) {
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a170:	2b00      	cmp	r3, #0
 800a172:	d009      	beq.n	800a188 <tcp_input+0x7ac>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a178:	7b5a      	ldrb	r2, [r3, #13]
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a17e:	f042 0220 	orr.w	r2, r2, #32
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	735a      	strb	r2, [r3, #13]
 800a186:	e022      	b.n	800a1ce <tcp_input+0x7f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a18c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a190:	d005      	beq.n	800a19e <tcp_input+0x7c2>
              pcb->rcv_wnd++;
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a196:	3301      	adds	r3, #1
 800a198:	b29a      	uxth	r2, r3
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00b      	beq.n	800a1c0 <tcp_input+0x7e4>
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	6918      	ldr	r0, [r3, #16]
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	69f9      	ldr	r1, [r7, #28]
 800a1b8:	47a0      	blx	r4
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	74fb      	strb	r3, [r7, #19]
 800a1be:	e001      	b.n	800a1c4 <tcp_input+0x7e8>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a1c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1c8:	f113 0f0d 	cmn.w	r3, #13
 800a1cc:	d014      	beq.n	800a1f8 <tcp_input+0x81c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a1ce:	4b40      	ldr	r3, [pc, #256]	; (800a2d0 <tcp_input+0x8f4>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a1d4:	69f8      	ldr	r0, [r7, #28]
 800a1d6:	f000 f88d 	bl	800a2f4 <tcp_input_delayed_close>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10d      	bne.n	800a1fc <tcp_input+0x820>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a1e0:	69f8      	ldr	r0, [r7, #28]
 800a1e2:	f002 ff4f 	bl	800d084 <tcp_output>
 800a1e6:	e00a      	b.n	800a1fe <tcp_input+0x822>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a1e8:	bf00      	nop
 800a1ea:	e008      	b.n	800a1fe <tcp_input+0x822>
              goto aborted;
 800a1ec:	bf00      	nop
 800a1ee:	e006      	b.n	800a1fe <tcp_input+0x822>
          goto aborted;
 800a1f0:	bf00      	nop
 800a1f2:	e004      	b.n	800a1fe <tcp_input+0x822>
            goto aborted;
 800a1f4:	bf00      	nop
 800a1f6:	e002      	b.n	800a1fe <tcp_input+0x822>
              goto aborted;
 800a1f8:	bf00      	nop
 800a1fa:	e000      	b.n	800a1fe <tcp_input+0x822>
          goto aborted;
 800a1fc:	bf00      	nop
    tcp_input_pcb = NULL;
 800a1fe:	4b34      	ldr	r3, [pc, #208]	; (800a2d0 <tcp_input+0x8f4>)
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a204:	4b2d      	ldr	r3, [pc, #180]	; (800a2bc <tcp_input+0x8e0>)
 800a206:	2200      	movs	r2, #0
 800a208:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a20a:	4b32      	ldr	r3, [pc, #200]	; (800a2d4 <tcp_input+0x8f8>)
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d04e      	beq.n	800a2b0 <tcp_input+0x8d4>
      pbuf_free(inseg.p);
 800a212:	4b30      	ldr	r3, [pc, #192]	; (800a2d4 <tcp_input+0x8f8>)
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	4618      	mov	r0, r3
 800a218:	f7fd fad0 	bl	80077bc <pbuf_free>
      inseg.p = NULL;
 800a21c:	4b2d      	ldr	r3, [pc, #180]	; (800a2d4 <tcp_input+0x8f8>)
 800a21e:	2200      	movs	r2, #0
 800a220:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a222:	e045      	b.n	800a2b0 <tcp_input+0x8d4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a224:	4b2c      	ldr	r3, [pc, #176]	; (800a2d8 <tcp_input+0x8fc>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	899b      	ldrh	r3, [r3, #12]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fb fdfb 	bl	8005e28 <lwip_htons>
 800a232:	4603      	mov	r3, r0
 800a234:	b2db      	uxtb	r3, r3
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d128      	bne.n	800a290 <tcp_input+0x8b4>
      TCP_STATS_INC(tcp.proterr);
 800a23e:	4b27      	ldr	r3, [pc, #156]	; (800a2dc <tcp_input+0x900>)
 800a240:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800a244:	3301      	adds	r3, #1
 800a246:	b29a      	uxth	r2, r3
 800a248:	4b24      	ldr	r3, [pc, #144]	; (800a2dc <tcp_input+0x900>)
 800a24a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 800a24e:	4b23      	ldr	r3, [pc, #140]	; (800a2dc <tcp_input+0x900>)
 800a250:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a254:	3301      	adds	r3, #1
 800a256:	b29a      	uxth	r2, r3
 800a258:	4b20      	ldr	r3, [pc, #128]	; (800a2dc <tcp_input+0x900>)
 800a25a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a25e:	4b20      	ldr	r3, [pc, #128]	; (800a2e0 <tcp_input+0x904>)
 800a260:	6819      	ldr	r1, [r3, #0]
 800a262:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <tcp_input+0x908>)
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	4b1f      	ldr	r3, [pc, #124]	; (800a2e8 <tcp_input+0x90c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a26e:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <tcp_input+0x8fc>)
 800a270:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a272:	885b      	ldrh	r3, [r3, #2]
 800a274:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a276:	4a18      	ldr	r2, [pc, #96]	; (800a2d8 <tcp_input+0x8fc>)
 800a278:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a27a:	8812      	ldrh	r2, [r2, #0]
 800a27c:	b292      	uxth	r2, r2
 800a27e:	9202      	str	r2, [sp, #8]
 800a280:	9301      	str	r3, [sp, #4]
 800a282:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <tcp_input+0x910>)
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <tcp_input+0x914>)
 800a288:	4602      	mov	r2, r0
 800a28a:	2000      	movs	r0, #0
 800a28c:	f003 fce4 	bl	800dc58 <tcp_rst>
    pbuf_free(p);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7fd fa93 	bl	80077bc <pbuf_free>
  return;
 800a296:	e00b      	b.n	800a2b0 <tcp_input+0x8d4>
dropped:
  TCP_STATS_INC(tcp.drop);
 800a298:	4b10      	ldr	r3, [pc, #64]	; (800a2dc <tcp_input+0x900>)
 800a29a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 800a29e:	3301      	adds	r3, #1
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	4b0e      	ldr	r3, [pc, #56]	; (800a2dc <tcp_input+0x900>)
 800a2a4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7fd fa87 	bl	80077bc <pbuf_free>
 800a2ae:	e000      	b.n	800a2b2 <tcp_input+0x8d6>
  return;
 800a2b0:	bf00      	nop
}
 800a2b2:	3724      	adds	r7, #36	; 0x24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd90      	pop	{r4, r7, pc}
 800a2b8:	200005bc 	.word	0x200005bc
 800a2bc:	200005c4 	.word	0x200005c4
 800a2c0:	08015d8c 	.word	0x08015d8c
 800a2c4:	08015f40 	.word	0x08015f40
 800a2c8:	08015dd8 	.word	0x08015dd8
 800a2cc:	200005c1 	.word	0x200005c1
 800a2d0:	20007b38 	.word	0x20007b38
 800a2d4:	20000594 	.word	0x20000594
 800a2d8:	200005a4 	.word	0x200005a4
 800a2dc:	20007a48 	.word	0x20007a48
 800a2e0:	200005b8 	.word	0x200005b8
 800a2e4:	200005be 	.word	0x200005be
 800a2e8:	200005b4 	.word	0x200005b4
 800a2ec:	20004544 	.word	0x20004544
 800a2f0:	20004548 	.word	0x20004548

0800a2f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d106      	bne.n	800a310 <tcp_input_delayed_close+0x1c>
 800a302:	4b17      	ldr	r3, [pc, #92]	; (800a360 <tcp_input_delayed_close+0x6c>)
 800a304:	f240 225a 	movw	r2, #602	; 0x25a
 800a308:	4916      	ldr	r1, [pc, #88]	; (800a364 <tcp_input_delayed_close+0x70>)
 800a30a:	4817      	ldr	r0, [pc, #92]	; (800a368 <tcp_input_delayed_close+0x74>)
 800a30c:	f009 f93e 	bl	801358c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a310:	4b16      	ldr	r3, [pc, #88]	; (800a36c <tcp_input_delayed_close+0x78>)
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	f003 0310 	and.w	r3, r3, #16
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d01c      	beq.n	800a356 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	8b5b      	ldrh	r3, [r3, #26]
 800a320:	f003 0310 	and.w	r3, r3, #16
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10d      	bne.n	800a344 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d008      	beq.n	800a344 <tcp_input_delayed_close+0x50>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	6912      	ldr	r2, [r2, #16]
 800a33c:	f06f 010e 	mvn.w	r1, #14
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	480a      	ldr	r0, [pc, #40]	; (800a370 <tcp_input_delayed_close+0x7c>)
 800a348:	f7ff f9d0 	bl	80096ec <tcp_pcb_remove>
    tcp_free(pcb);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7fd fced 	bl	8007d2c <tcp_free>
    return 1;
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	08015d8c 	.word	0x08015d8c
 800a364:	08015f5c 	.word	0x08015f5c
 800a368:	08015dd8 	.word	0x08015dd8
 800a36c:	200005c1 	.word	0x200005c1
 800a370:	20007b24 	.word	0x20007b24

0800a374 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a374:	b590      	push	{r4, r7, lr}
 800a376:	b08b      	sub	sp, #44	; 0x2c
 800a378:	af04      	add	r7, sp, #16
 800a37a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a37c:	4b73      	ldr	r3, [pc, #460]	; (800a54c <tcp_listen_input+0x1d8>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	f040 80da 	bne.w	800a53e <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d106      	bne.n	800a39e <tcp_listen_input+0x2a>
 800a390:	4b6f      	ldr	r3, [pc, #444]	; (800a550 <tcp_listen_input+0x1dc>)
 800a392:	f240 2281 	movw	r2, #641	; 0x281
 800a396:	496f      	ldr	r1, [pc, #444]	; (800a554 <tcp_listen_input+0x1e0>)
 800a398:	486f      	ldr	r0, [pc, #444]	; (800a558 <tcp_listen_input+0x1e4>)
 800a39a:	f009 f8f7 	bl	801358c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a39e:	4b6b      	ldr	r3, [pc, #428]	; (800a54c <tcp_listen_input+0x1d8>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	f003 0310 	and.w	r3, r3, #16
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d019      	beq.n	800a3de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3aa:	4b6c      	ldr	r3, [pc, #432]	; (800a55c <tcp_listen_input+0x1e8>)
 800a3ac:	6819      	ldr	r1, [r3, #0]
 800a3ae:	4b6c      	ldr	r3, [pc, #432]	; (800a560 <tcp_listen_input+0x1ec>)
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	4b6b      	ldr	r3, [pc, #428]	; (800a564 <tcp_listen_input+0x1f0>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3ba:	4b6b      	ldr	r3, [pc, #428]	; (800a568 <tcp_listen_input+0x1f4>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3be:	885b      	ldrh	r3, [r3, #2]
 800a3c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a3c2:	4a69      	ldr	r2, [pc, #420]	; (800a568 <tcp_listen_input+0x1f4>)
 800a3c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a3c6:	8812      	ldrh	r2, [r2, #0]
 800a3c8:	b292      	uxth	r2, r2
 800a3ca:	9202      	str	r2, [sp, #8]
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	4b67      	ldr	r3, [pc, #412]	; (800a56c <tcp_listen_input+0x1f8>)
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	4b67      	ldr	r3, [pc, #412]	; (800a570 <tcp_listen_input+0x1fc>)
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f003 fc3e 	bl	800dc58 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a3dc:	e0b1      	b.n	800a542 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 800a3de:	4b5b      	ldr	r3, [pc, #364]	; (800a54c <tcp_listen_input+0x1d8>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 80ab 	beq.w	800a542 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	7d5b      	ldrb	r3, [r3, #21]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fe ffaf 	bl	8009354 <tcp_alloc>
 800a3f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d119      	bne.n	800a432 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 800a3fe:	4b5d      	ldr	r3, [pc, #372]	; (800a574 <tcp_listen_input+0x200>)
 800a400:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a404:	3301      	adds	r3, #1
 800a406:	b29a      	uxth	r2, r3
 800a408:	4b5a      	ldr	r3, [pc, #360]	; (800a574 <tcp_listen_input+0x200>)
 800a40a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <tcp_listen_input+0xb8>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	6910      	ldr	r0, [r2, #16]
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295
 800a422:	2100      	movs	r1, #0
 800a424:	4798      	blx	r3
 800a426:	4603      	mov	r3, r0
 800a428:	73bb      	strb	r3, [r7, #14]
      return;
 800a42a:	e08b      	b.n	800a544 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a42c:	23f0      	movs	r3, #240	; 0xf0
 800a42e:	73bb      	strb	r3, [r7, #14]
      return;
 800a430:	e088      	b.n	800a544 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a432:	4b51      	ldr	r3, [pc, #324]	; (800a578 <tcp_listen_input+0x204>)
 800a434:	695a      	ldr	r2, [r3, #20]
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a43a:	4b4f      	ldr	r3, [pc, #316]	; (800a578 <tcp_listen_input+0x204>)
 800a43c:	691a      	ldr	r2, [r3, #16]
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	8ada      	ldrh	r2, [r3, #22]
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a44a:	4b47      	ldr	r3, [pc, #284]	; (800a568 <tcp_listen_input+0x1f4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	b29a      	uxth	r2, r3
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2203      	movs	r2, #3
 800a45a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a45c:	4b41      	ldr	r3, [pc, #260]	; (800a564 <tcp_listen_input+0x1f0>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	1c5a      	adds	r2, r3, #1
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a46e:	6978      	ldr	r0, [r7, #20]
 800a470:	f7ff f9d0 	bl	8009814 <tcp_next_iss>
 800a474:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a48e:	4b35      	ldr	r3, [pc, #212]	; (800a564 <tcp_listen_input+0x1f0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	1e5a      	subs	r2, r3, #1
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	7a5b      	ldrb	r3, [r3, #9]
 800a4aa:	f003 030c 	and.w	r3, r3, #12
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	7a1a      	ldrb	r2, [r3, #8]
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a4bc:	4b2f      	ldr	r3, [pc, #188]	; (800a57c <tcp_listen_input+0x208>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	60da      	str	r2, [r3, #12]
 800a4c4:	4a2d      	ldr	r2, [pc, #180]	; (800a57c <tcp_listen_input+0x208>)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	f003 fd87 	bl	800dfdc <tcp_timer_needed>
 800a4ce:	4b2c      	ldr	r3, [pc, #176]	; (800a580 <tcp_listen_input+0x20c>)
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a4d4:	6978      	ldr	r0, [r7, #20]
 800a4d6:	f001 fd8f 	bl	800bff8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a4da:	4b23      	ldr	r3, [pc, #140]	; (800a568 <tcp_listen_input+0x1f4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	89db      	ldrh	r3, [r3, #14]
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f007 fbe7 	bl	8011cd0 <ip4_route>
 800a502:	4601      	mov	r1, r0
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	3304      	adds	r3, #4
 800a508:	461a      	mov	r2, r3
 800a50a:	4620      	mov	r0, r4
 800a50c:	f7ff f9a8 	bl	8009860 <tcp_eff_send_mss_netif>
 800a510:	4603      	mov	r3, r0
 800a512:	461a      	mov	r2, r3
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a518:	2112      	movs	r1, #18
 800a51a:	6978      	ldr	r0, [r7, #20]
 800a51c:	f002 fcc2 	bl	800cea4 <tcp_enqueue_flags>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d004      	beq.n	800a536 <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 800a52c:	2100      	movs	r1, #0
 800a52e:	6978      	ldr	r0, [r7, #20]
 800a530:	f7fd fe26 	bl	8008180 <tcp_abandon>
      return;
 800a534:	e006      	b.n	800a544 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 800a536:	6978      	ldr	r0, [r7, #20]
 800a538:	f002 fda4 	bl	800d084 <tcp_output>
  return;
 800a53c:	e001      	b.n	800a542 <tcp_listen_input+0x1ce>
    return;
 800a53e:	bf00      	nop
 800a540:	e000      	b.n	800a544 <tcp_listen_input+0x1d0>
  return;
 800a542:	bf00      	nop
}
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd90      	pop	{r4, r7, pc}
 800a54a:	bf00      	nop
 800a54c:	200005c0 	.word	0x200005c0
 800a550:	08015d8c 	.word	0x08015d8c
 800a554:	08015f84 	.word	0x08015f84
 800a558:	08015dd8 	.word	0x08015dd8
 800a55c:	200005b8 	.word	0x200005b8
 800a560:	200005be 	.word	0x200005be
 800a564:	200005b4 	.word	0x200005b4
 800a568:	200005a4 	.word	0x200005a4
 800a56c:	20004544 	.word	0x20004544
 800a570:	20004548 	.word	0x20004548
 800a574:	20007a48 	.word	0x20007a48
 800a578:	20004534 	.word	0x20004534
 800a57c:	20007b24 	.word	0x20007b24
 800a580:	20007b20 	.word	0x20007b20

0800a584 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af04      	add	r7, sp, #16
 800a58a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a58c:	4b2f      	ldr	r3, [pc, #188]	; (800a64c <tcp_timewait_input+0xc8>)
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b00      	cmp	r3, #0
 800a596:	d153      	bne.n	800a640 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d106      	bne.n	800a5ac <tcp_timewait_input+0x28>
 800a59e:	4b2c      	ldr	r3, [pc, #176]	; (800a650 <tcp_timewait_input+0xcc>)
 800a5a0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a5a4:	492b      	ldr	r1, [pc, #172]	; (800a654 <tcp_timewait_input+0xd0>)
 800a5a6:	482c      	ldr	r0, [pc, #176]	; (800a658 <tcp_timewait_input+0xd4>)
 800a5a8:	f008 fff0 	bl	801358c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a5ac:	4b27      	ldr	r3, [pc, #156]	; (800a64c <tcp_timewait_input+0xc8>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	f003 0302 	and.w	r3, r3, #2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d02a      	beq.n	800a60e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a5b8:	4b28      	ldr	r3, [pc, #160]	; (800a65c <tcp_timewait_input+0xd8>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	db2d      	blt.n	800a622 <tcp_timewait_input+0x9e>
 800a5c6:	4b25      	ldr	r3, [pc, #148]	; (800a65c <tcp_timewait_input+0xd8>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5d2:	440b      	add	r3, r1
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	dc23      	bgt.n	800a622 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5da:	4b21      	ldr	r3, [pc, #132]	; (800a660 <tcp_timewait_input+0xdc>)
 800a5dc:	6819      	ldr	r1, [r3, #0]
 800a5de:	4b21      	ldr	r3, [pc, #132]	; (800a664 <tcp_timewait_input+0xe0>)
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <tcp_timewait_input+0xd8>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5ea:	4b1f      	ldr	r3, [pc, #124]	; (800a668 <tcp_timewait_input+0xe4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5ee:	885b      	ldrh	r3, [r3, #2]
 800a5f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5f2:	4a1d      	ldr	r2, [pc, #116]	; (800a668 <tcp_timewait_input+0xe4>)
 800a5f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5f6:	8812      	ldrh	r2, [r2, #0]
 800a5f8:	b292      	uxth	r2, r2
 800a5fa:	9202      	str	r2, [sp, #8]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	4b1b      	ldr	r3, [pc, #108]	; (800a66c <tcp_timewait_input+0xe8>)
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	4b1b      	ldr	r3, [pc, #108]	; (800a670 <tcp_timewait_input+0xec>)
 800a604:	4602      	mov	r2, r0
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f003 fb26 	bl	800dc58 <tcp_rst>
      return;
 800a60c:	e01b      	b.n	800a646 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a60e:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <tcp_timewait_input+0xc8>)
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a61a:	4b16      	ldr	r3, [pc, #88]	; (800a674 <tcp_timewait_input+0xf0>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a622:	4b10      	ldr	r3, [pc, #64]	; (800a664 <tcp_timewait_input+0xe0>)
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00c      	beq.n	800a644 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8b5b      	ldrh	r3, [r3, #26]
 800a62e:	f043 0302 	orr.w	r3, r3, #2
 800a632:	b29a      	uxth	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f002 fd23 	bl	800d084 <tcp_output>
  }
  return;
 800a63e:	e001      	b.n	800a644 <tcp_timewait_input+0xc0>
    return;
 800a640:	bf00      	nop
 800a642:	e000      	b.n	800a646 <tcp_timewait_input+0xc2>
  return;
 800a644:	bf00      	nop
}
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	200005c0 	.word	0x200005c0
 800a650:	08015d8c 	.word	0x08015d8c
 800a654:	08015fa4 	.word	0x08015fa4
 800a658:	08015dd8 	.word	0x08015dd8
 800a65c:	200005b4 	.word	0x200005b4
 800a660:	200005b8 	.word	0x200005b8
 800a664:	200005be 	.word	0x200005be
 800a668:	200005a4 	.word	0x200005a4
 800a66c:	20004544 	.word	0x20004544
 800a670:	20004548 	.word	0x20004548
 800a674:	20007b28 	.word	0x20007b28

0800a678 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a678:	b590      	push	{r4, r7, lr}
 800a67a:	b08d      	sub	sp, #52	; 0x34
 800a67c:	af04      	add	r7, sp, #16
 800a67e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d106      	bne.n	800a69c <tcp_process+0x24>
 800a68e:	4ba5      	ldr	r3, [pc, #660]	; (800a924 <tcp_process+0x2ac>)
 800a690:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a694:	49a4      	ldr	r1, [pc, #656]	; (800a928 <tcp_process+0x2b0>)
 800a696:	48a5      	ldr	r0, [pc, #660]	; (800a92c <tcp_process+0x2b4>)
 800a698:	f008 ff78 	bl	801358c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a69c:	4ba4      	ldr	r3, [pc, #656]	; (800a930 <tcp_process+0x2b8>)
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d04e      	beq.n	800a746 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	7d1b      	ldrb	r3, [r3, #20]
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d108      	bne.n	800a6c2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6b4:	4b9f      	ldr	r3, [pc, #636]	; (800a934 <tcp_process+0x2bc>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d123      	bne.n	800a704 <tcp_process+0x8c>
        acceptable = 1;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	76fb      	strb	r3, [r7, #27]
 800a6c0:	e020      	b.n	800a704 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6c6:	4b9c      	ldr	r3, [pc, #624]	; (800a938 <tcp_process+0x2c0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d102      	bne.n	800a6d4 <tcp_process+0x5c>
        acceptable = 1;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	76fb      	strb	r3, [r7, #27]
 800a6d2:	e017      	b.n	800a704 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6d4:	4b98      	ldr	r3, [pc, #608]	; (800a938 <tcp_process+0x2c0>)
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	db10      	blt.n	800a704 <tcp_process+0x8c>
 800a6e2:	4b95      	ldr	r3, [pc, #596]	; (800a938 <tcp_process+0x2c0>)
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6ee:	440b      	add	r3, r1
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dc06      	bgt.n	800a704 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	8b5b      	ldrh	r3, [r3, #26]
 800a6fa:	f043 0302 	orr.w	r3, r3, #2
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a704:	7efb      	ldrb	r3, [r7, #27]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d01b      	beq.n	800a742 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	7d1b      	ldrb	r3, [r3, #20]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d106      	bne.n	800a720 <tcp_process+0xa8>
 800a712:	4b84      	ldr	r3, [pc, #528]	; (800a924 <tcp_process+0x2ac>)
 800a714:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a718:	4988      	ldr	r1, [pc, #544]	; (800a93c <tcp_process+0x2c4>)
 800a71a:	4884      	ldr	r0, [pc, #528]	; (800a92c <tcp_process+0x2b4>)
 800a71c:	f008 ff36 	bl	801358c <iprintf>
      recv_flags |= TF_RESET;
 800a720:	4b87      	ldr	r3, [pc, #540]	; (800a940 <tcp_process+0x2c8>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	f043 0308 	orr.w	r3, r3, #8
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	4b85      	ldr	r3, [pc, #532]	; (800a940 <tcp_process+0x2c8>)
 800a72c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	8b5b      	ldrh	r3, [r3, #26]
 800a732:	f023 0301 	bic.w	r3, r3, #1
 800a736:	b29a      	uxth	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a73c:	f06f 030d 	mvn.w	r3, #13
 800a740:	e37a      	b.n	800ae38 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	e378      	b.n	800ae38 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a746:	4b7a      	ldr	r3, [pc, #488]	; (800a930 <tcp_process+0x2b8>)
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d010      	beq.n	800a774 <tcp_process+0xfc>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	7d1b      	ldrb	r3, [r3, #20]
 800a756:	2b02      	cmp	r3, #2
 800a758:	d00c      	beq.n	800a774 <tcp_process+0xfc>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	7d1b      	ldrb	r3, [r3, #20]
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d008      	beq.n	800a774 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	8b5b      	ldrh	r3, [r3, #26]
 800a766:	f043 0302 	orr.w	r3, r3, #2
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	e361      	b.n	800ae38 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	8b5b      	ldrh	r3, [r3, #26]
 800a778:	f003 0310 	and.w	r3, r3, #16
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d103      	bne.n	800a788 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a780:	4b70      	ldr	r3, [pc, #448]	; (800a944 <tcp_process+0x2cc>)
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f001 fc2d 	bl	800bff8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	7d1b      	ldrb	r3, [r3, #20]
 800a7a2:	3b02      	subs	r3, #2
 800a7a4:	2b07      	cmp	r3, #7
 800a7a6:	f200 8337 	bhi.w	800ae18 <tcp_process+0x7a0>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <tcp_process+0x138>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a7d1 	.word	0x0800a7d1
 800a7b4:	0800aa01 	.word	0x0800aa01
 800a7b8:	0800ab79 	.word	0x0800ab79
 800a7bc:	0800aba3 	.word	0x0800aba3
 800a7c0:	0800acc7 	.word	0x0800acc7
 800a7c4:	0800ab79 	.word	0x0800ab79
 800a7c8:	0800ad53 	.word	0x0800ad53
 800a7cc:	0800ade3 	.word	0x0800ade3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a7d0:	4b57      	ldr	r3, [pc, #348]	; (800a930 <tcp_process+0x2b8>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	f003 0310 	and.w	r3, r3, #16
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80e4 	beq.w	800a9a6 <tcp_process+0x32e>
 800a7de:	4b54      	ldr	r3, [pc, #336]	; (800a930 <tcp_process+0x2b8>)
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	f003 0302 	and.w	r3, r3, #2
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 80dd 	beq.w	800a9a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	4b50      	ldr	r3, [pc, #320]	; (800a934 <tcp_process+0x2bc>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	f040 80d5 	bne.w	800a9a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a7fc:	4b4e      	ldr	r3, [pc, #312]	; (800a938 <tcp_process+0x2c0>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a80e:	4b49      	ldr	r3, [pc, #292]	; (800a934 <tcp_process+0x2bc>)
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a816:	4b4c      	ldr	r3, [pc, #304]	; (800a948 <tcp_process+0x2d0>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	89db      	ldrh	r3, [r3, #14]
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a830:	4b41      	ldr	r3, [pc, #260]	; (800a938 <tcp_process+0x2c0>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	1e5a      	subs	r2, r3, #1
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2204      	movs	r2, #4
 800a83e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	3304      	adds	r3, #4
 800a848:	4618      	mov	r0, r3
 800a84a:	f007 fa41 	bl	8011cd0 <ip4_route>
 800a84e:	4601      	mov	r1, r0
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3304      	adds	r3, #4
 800a854:	461a      	mov	r2, r3
 800a856:	4620      	mov	r0, r4
 800a858:	f7ff f802 	bl	8009860 <tcp_eff_send_mss_netif>
 800a85c:	4603      	mov	r3, r0
 800a85e:	461a      	mov	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a868:	009a      	lsls	r2, r3, #2
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	f241 111c 	movw	r1, #4380	; 0x111c
 800a874:	428b      	cmp	r3, r1
 800a876:	bf38      	it	cc
 800a878:	460b      	movcc	r3, r1
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d204      	bcs.n	800a888 <tcp_process+0x210>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	b29b      	uxth	r3, r3
 800a886:	e00d      	b.n	800a8a4 <tcp_process+0x22c>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	f241 121c 	movw	r2, #4380	; 0x111c
 800a892:	4293      	cmp	r3, r2
 800a894:	d904      	bls.n	800a8a0 <tcp_process+0x228>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a89a:	005b      	lsls	r3, r3, #1
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	e001      	b.n	800a8a4 <tcp_process+0x22c>
 800a8a0:	f241 131c 	movw	r3, #4380	; 0x111c
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d106      	bne.n	800a8c2 <tcp_process+0x24a>
 800a8b4:	4b1b      	ldr	r3, [pc, #108]	; (800a924 <tcp_process+0x2ac>)
 800a8b6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a8ba:	4924      	ldr	r1, [pc, #144]	; (800a94c <tcp_process+0x2d4>)
 800a8bc:	481b      	ldr	r0, [pc, #108]	; (800a92c <tcp_process+0x2b4>)
 800a8be:	f008 fe65 	bl	801358c <iprintf>
        --pcb->snd_queuelen;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8d6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d111      	bne.n	800a902 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d106      	bne.n	800a8f8 <tcp_process+0x280>
 800a8ea:	4b0e      	ldr	r3, [pc, #56]	; (800a924 <tcp_process+0x2ac>)
 800a8ec:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a8f0:	4917      	ldr	r1, [pc, #92]	; (800a950 <tcp_process+0x2d8>)
 800a8f2:	480e      	ldr	r0, [pc, #56]	; (800a92c <tcp_process+0x2b4>)
 800a8f4:	f008 fe4a 	bl	801358c <iprintf>
          pcb->unsent = rseg->next;
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	66da      	str	r2, [r3, #108]	; 0x6c
 800a900:	e003      	b.n	800a90a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a90a:	69f8      	ldr	r0, [r7, #28]
 800a90c:	f7fe fb9b 	bl	8009046 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a914:	2b00      	cmp	r3, #0
 800a916:	d11d      	bne.n	800a954 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a91e:	861a      	strh	r2, [r3, #48]	; 0x30
 800a920:	e01f      	b.n	800a962 <tcp_process+0x2ea>
 800a922:	bf00      	nop
 800a924:	08015d8c 	.word	0x08015d8c
 800a928:	08015fc4 	.word	0x08015fc4
 800a92c:	08015dd8 	.word	0x08015dd8
 800a930:	200005c0 	.word	0x200005c0
 800a934:	200005b8 	.word	0x200005b8
 800a938:	200005b4 	.word	0x200005b4
 800a93c:	08015fe0 	.word	0x08015fe0
 800a940:	200005c1 	.word	0x200005c1
 800a944:	20007b28 	.word	0x20007b28
 800a948:	200005a4 	.word	0x200005a4
 800a94c:	08016000 	.word	0x08016000
 800a950:	08016018 	.word	0x08016018
        } else {
          pcb->rtime = 0;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00a      	beq.n	800a982 <tcp_process+0x30a>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6910      	ldr	r0, [r2, #16]
 800a976:	2200      	movs	r2, #0
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	4798      	blx	r3
 800a97c:	4603      	mov	r3, r0
 800a97e:	76bb      	strb	r3, [r7, #26]
 800a980:	e001      	b.n	800a986 <tcp_process+0x30e>
 800a982:	2300      	movs	r3, #0
 800a984:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a986:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a98a:	f113 0f0d 	cmn.w	r3, #13
 800a98e:	d102      	bne.n	800a996 <tcp_process+0x31e>
          return ERR_ABRT;
 800a990:	f06f 030c 	mvn.w	r3, #12
 800a994:	e250      	b.n	800ae38 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	8b5b      	ldrh	r3, [r3, #26]
 800a99a:	f043 0302 	orr.w	r3, r3, #2
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a9a4:	e23a      	b.n	800ae1c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a9a6:	4b9d      	ldr	r3, [pc, #628]	; (800ac1c <tcp_process+0x5a4>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	f003 0310 	and.w	r3, r3, #16
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f000 8234 	beq.w	800ae1c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9b4:	4b9a      	ldr	r3, [pc, #616]	; (800ac20 <tcp_process+0x5a8>)
 800a9b6:	6819      	ldr	r1, [r3, #0]
 800a9b8:	4b9a      	ldr	r3, [pc, #616]	; (800ac24 <tcp_process+0x5ac>)
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	4b9a      	ldr	r3, [pc, #616]	; (800ac28 <tcp_process+0x5b0>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9c4:	4b99      	ldr	r3, [pc, #612]	; (800ac2c <tcp_process+0x5b4>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9c8:	885b      	ldrh	r3, [r3, #2]
 800a9ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9cc:	4a97      	ldr	r2, [pc, #604]	; (800ac2c <tcp_process+0x5b4>)
 800a9ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9d0:	8812      	ldrh	r2, [r2, #0]
 800a9d2:	b292      	uxth	r2, r2
 800a9d4:	9202      	str	r2, [sp, #8]
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	4b95      	ldr	r3, [pc, #596]	; (800ac30 <tcp_process+0x5b8>)
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	4b95      	ldr	r3, [pc, #596]	; (800ac34 <tcp_process+0x5bc>)
 800a9de:	4602      	mov	r2, r0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f003 f939 	bl	800dc58 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9ec:	2b05      	cmp	r3, #5
 800a9ee:	f200 8215 	bhi.w	800ae1c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f002 fee9 	bl	800d7d0 <tcp_rexmit_rto>
      break;
 800a9fe:	e20d      	b.n	800ae1c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800aa00:	4b86      	ldr	r3, [pc, #536]	; (800ac1c <tcp_process+0x5a4>)
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	f003 0310 	and.w	r3, r3, #16
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 80a1 	beq.w	800ab50 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa0e:	4b84      	ldr	r3, [pc, #528]	; (800ac20 <tcp_process+0x5a8>)
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	db7e      	blt.n	800ab1c <tcp_process+0x4a4>
 800aa1e:	4b80      	ldr	r3, [pc, #512]	; (800ac20 <tcp_process+0x5a8>)
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	dc77      	bgt.n	800ab1c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2204      	movs	r2, #4
 800aa30:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d102      	bne.n	800aa40 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800aa3a:	23fa      	movs	r3, #250	; 0xfa
 800aa3c:	76bb      	strb	r3, [r7, #26]
 800aa3e:	e01d      	b.n	800aa7c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <tcp_process+0x3e0>
 800aa4a:	4b7b      	ldr	r3, [pc, #492]	; (800ac38 <tcp_process+0x5c0>)
 800aa4c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800aa50:	497a      	ldr	r1, [pc, #488]	; (800ac3c <tcp_process+0x5c4>)
 800aa52:	487b      	ldr	r0, [pc, #492]	; (800ac40 <tcp_process+0x5c8>)
 800aa54:	f008 fd9a 	bl	801358c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <tcp_process+0x400>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6910      	ldr	r0, [r2, #16]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	4798      	blx	r3
 800aa72:	4603      	mov	r3, r0
 800aa74:	76bb      	strb	r3, [r7, #26]
 800aa76:	e001      	b.n	800aa7c <tcp_process+0x404>
 800aa78:	23f0      	movs	r3, #240	; 0xf0
 800aa7a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800aa7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00a      	beq.n	800aa9a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800aa84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aa88:	f113 0f0d 	cmn.w	r3, #13
 800aa8c:	d002      	beq.n	800aa94 <tcp_process+0x41c>
              tcp_abort(pcb);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7fd fc34 	bl	80082fc <tcp_abort>
            }
            return ERR_ABRT;
 800aa94:	f06f 030c 	mvn.w	r3, #12
 800aa98:	e1ce      	b.n	800ae38 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fae0 	bl	800b060 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800aaa0:	4b68      	ldr	r3, [pc, #416]	; (800ac44 <tcp_process+0x5cc>)
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d005      	beq.n	800aab4 <tcp_process+0x43c>
            recv_acked--;
 800aaa8:	4b66      	ldr	r3, [pc, #408]	; (800ac44 <tcp_process+0x5cc>)
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	4b64      	ldr	r3, [pc, #400]	; (800ac44 <tcp_process+0x5cc>)
 800aab2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aab8:	009a      	lsls	r2, r3, #2
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	f241 111c 	movw	r1, #4380	; 0x111c
 800aac4:	428b      	cmp	r3, r1
 800aac6:	bf38      	it	cc
 800aac8:	460b      	movcc	r3, r1
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d204      	bcs.n	800aad8 <tcp_process+0x460>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	e00d      	b.n	800aaf4 <tcp_process+0x47c>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	f241 121c 	movw	r2, #4380	; 0x111c
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d904      	bls.n	800aaf0 <tcp_process+0x478>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	e001      	b.n	800aaf4 <tcp_process+0x47c>
 800aaf0:	f241 131c 	movw	r3, #4380	; 0x111c
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800aafa:	4b53      	ldr	r3, [pc, #332]	; (800ac48 <tcp_process+0x5d0>)
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	f003 0320 	and.w	r3, r3, #32
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d037      	beq.n	800ab76 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	8b5b      	ldrh	r3, [r3, #26]
 800ab0a:	f043 0302 	orr.w	r3, r3, #2
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2207      	movs	r2, #7
 800ab18:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ab1a:	e02c      	b.n	800ab76 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab1c:	4b40      	ldr	r3, [pc, #256]	; (800ac20 <tcp_process+0x5a8>)
 800ab1e:	6819      	ldr	r1, [r3, #0]
 800ab20:	4b40      	ldr	r3, [pc, #256]	; (800ac24 <tcp_process+0x5ac>)
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	461a      	mov	r2, r3
 800ab26:	4b40      	ldr	r3, [pc, #256]	; (800ac28 <tcp_process+0x5b0>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab2c:	4b3f      	ldr	r3, [pc, #252]	; (800ac2c <tcp_process+0x5b4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab30:	885b      	ldrh	r3, [r3, #2]
 800ab32:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab34:	4a3d      	ldr	r2, [pc, #244]	; (800ac2c <tcp_process+0x5b4>)
 800ab36:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab38:	8812      	ldrh	r2, [r2, #0]
 800ab3a:	b292      	uxth	r2, r2
 800ab3c:	9202      	str	r2, [sp, #8]
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	4b3b      	ldr	r3, [pc, #236]	; (800ac30 <tcp_process+0x5b8>)
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	4b3b      	ldr	r3, [pc, #236]	; (800ac34 <tcp_process+0x5bc>)
 800ab46:	4602      	mov	r2, r0
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f003 f885 	bl	800dc58 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ab4e:	e167      	b.n	800ae20 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ab50:	4b32      	ldr	r3, [pc, #200]	; (800ac1c <tcp_process+0x5a4>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 8161 	beq.w	800ae20 <tcp_process+0x7a8>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	1e5a      	subs	r2, r3, #1
 800ab64:	4b30      	ldr	r3, [pc, #192]	; (800ac28 <tcp_process+0x5b0>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	f040 8159 	bne.w	800ae20 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f002 fe50 	bl	800d814 <tcp_rexmit>
      break;
 800ab74:	e154      	b.n	800ae20 <tcp_process+0x7a8>
 800ab76:	e153      	b.n	800ae20 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fa71 	bl	800b060 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ab7e:	4b32      	ldr	r3, [pc, #200]	; (800ac48 <tcp_process+0x5d0>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	f003 0320 	and.w	r3, r3, #32
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f000 814c 	beq.w	800ae24 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	8b5b      	ldrh	r3, [r3, #26]
 800ab90:	f043 0302 	orr.w	r3, r3, #2
 800ab94:	b29a      	uxth	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2207      	movs	r2, #7
 800ab9e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aba0:	e140      	b.n	800ae24 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fa5c 	bl	800b060 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aba8:	4b27      	ldr	r3, [pc, #156]	; (800ac48 <tcp_process+0x5d0>)
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	f003 0320 	and.w	r3, r3, #32
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d071      	beq.n	800ac98 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800abb4:	4b19      	ldr	r3, [pc, #100]	; (800ac1c <tcp_process+0x5a4>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	f003 0310 	and.w	r3, r3, #16
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d060      	beq.n	800ac82 <tcp_process+0x60a>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abc4:	4b16      	ldr	r3, [pc, #88]	; (800ac20 <tcp_process+0x5a8>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d15a      	bne.n	800ac82 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d156      	bne.n	800ac82 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	8b5b      	ldrh	r3, [r3, #26]
 800abd8:	f043 0302 	orr.w	r3, r3, #2
 800abdc:	b29a      	uxth	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7fe fd32 	bl	800964c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800abe8:	4b18      	ldr	r3, [pc, #96]	; (800ac4c <tcp_process+0x5d4>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d105      	bne.n	800abfe <tcp_process+0x586>
 800abf2:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <tcp_process+0x5d4>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	4a14      	ldr	r2, [pc, #80]	; (800ac4c <tcp_process+0x5d4>)
 800abfa:	6013      	str	r3, [r2, #0]
 800abfc:	e02e      	b.n	800ac5c <tcp_process+0x5e4>
 800abfe:	4b13      	ldr	r3, [pc, #76]	; (800ac4c <tcp_process+0x5d4>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	617b      	str	r3, [r7, #20]
 800ac04:	e027      	b.n	800ac56 <tcp_process+0x5de>
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d11f      	bne.n	800ac50 <tcp_process+0x5d8>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68da      	ldr	r2, [r3, #12]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	60da      	str	r2, [r3, #12]
 800ac18:	e020      	b.n	800ac5c <tcp_process+0x5e4>
 800ac1a:	bf00      	nop
 800ac1c:	200005c0 	.word	0x200005c0
 800ac20:	200005b8 	.word	0x200005b8
 800ac24:	200005be 	.word	0x200005be
 800ac28:	200005b4 	.word	0x200005b4
 800ac2c:	200005a4 	.word	0x200005a4
 800ac30:	20004544 	.word	0x20004544
 800ac34:	20004548 	.word	0x20004548
 800ac38:	08015d8c 	.word	0x08015d8c
 800ac3c:	0801602c 	.word	0x0801602c
 800ac40:	08015dd8 	.word	0x08015dd8
 800ac44:	200005bc 	.word	0x200005bc
 800ac48:	200005c1 	.word	0x200005c1
 800ac4c:	20007b24 	.word	0x20007b24
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	617b      	str	r3, [r7, #20]
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1d4      	bne.n	800ac06 <tcp_process+0x58e>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	60da      	str	r2, [r3, #12]
 800ac62:	4b77      	ldr	r3, [pc, #476]	; (800ae40 <tcp_process+0x7c8>)
 800ac64:	2201      	movs	r2, #1
 800ac66:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	220a      	movs	r2, #10
 800ac6c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ac6e:	4b75      	ldr	r3, [pc, #468]	; (800ae44 <tcp_process+0x7cc>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	60da      	str	r2, [r3, #12]
 800ac76:	4a73      	ldr	r2, [pc, #460]	; (800ae44 <tcp_process+0x7cc>)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	f003 f9ae 	bl	800dfdc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ac80:	e0d2      	b.n	800ae28 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	8b5b      	ldrh	r3, [r3, #26]
 800ac86:	f043 0302 	orr.w	r3, r3, #2
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2208      	movs	r2, #8
 800ac94:	751a      	strb	r2, [r3, #20]
      break;
 800ac96:	e0c7      	b.n	800ae28 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ac98:	4b6b      	ldr	r3, [pc, #428]	; (800ae48 <tcp_process+0x7d0>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	f003 0310 	and.w	r3, r3, #16
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 80c1 	beq.w	800ae28 <tcp_process+0x7b0>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acaa:	4b68      	ldr	r3, [pc, #416]	; (800ae4c <tcp_process+0x7d4>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	429a      	cmp	r2, r3
 800acb0:	f040 80ba 	bne.w	800ae28 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f040 80b5 	bne.w	800ae28 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2206      	movs	r2, #6
 800acc2:	751a      	strb	r2, [r3, #20]
      break;
 800acc4:	e0b0      	b.n	800ae28 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f9ca 	bl	800b060 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800accc:	4b60      	ldr	r3, [pc, #384]	; (800ae50 <tcp_process+0x7d8>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 0320 	and.w	r3, r3, #32
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80a9 	beq.w	800ae2c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	8b5b      	ldrh	r3, [r3, #26]
 800acde:	f043 0302 	orr.w	r3, r3, #2
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7fe fcaf 	bl	800964c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800acee:	4b59      	ldr	r3, [pc, #356]	; (800ae54 <tcp_process+0x7dc>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d105      	bne.n	800ad04 <tcp_process+0x68c>
 800acf8:	4b56      	ldr	r3, [pc, #344]	; (800ae54 <tcp_process+0x7dc>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	4a55      	ldr	r2, [pc, #340]	; (800ae54 <tcp_process+0x7dc>)
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	e013      	b.n	800ad2c <tcp_process+0x6b4>
 800ad04:	4b53      	ldr	r3, [pc, #332]	; (800ae54 <tcp_process+0x7dc>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	e00c      	b.n	800ad26 <tcp_process+0x6ae>
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d104      	bne.n	800ad20 <tcp_process+0x6a8>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68da      	ldr	r2, [r3, #12]
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	60da      	str	r2, [r3, #12]
 800ad1e:	e005      	b.n	800ad2c <tcp_process+0x6b4>
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	613b      	str	r3, [r7, #16]
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1ef      	bne.n	800ad0c <tcp_process+0x694>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	60da      	str	r2, [r3, #12]
 800ad32:	4b43      	ldr	r3, [pc, #268]	; (800ae40 <tcp_process+0x7c8>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	220a      	movs	r2, #10
 800ad3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ad3e:	4b41      	ldr	r3, [pc, #260]	; (800ae44 <tcp_process+0x7cc>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	60da      	str	r2, [r3, #12]
 800ad46:	4a3f      	ldr	r2, [pc, #252]	; (800ae44 <tcp_process+0x7cc>)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	f003 f946 	bl	800dfdc <tcp_timer_needed>
      }
      break;
 800ad50:	e06c      	b.n	800ae2c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f984 	bl	800b060 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ad58:	4b3b      	ldr	r3, [pc, #236]	; (800ae48 <tcp_process+0x7d0>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	f003 0310 	and.w	r3, r3, #16
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d065      	beq.n	800ae30 <tcp_process+0x7b8>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad68:	4b38      	ldr	r3, [pc, #224]	; (800ae4c <tcp_process+0x7d4>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d15f      	bne.n	800ae30 <tcp_process+0x7b8>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d15b      	bne.n	800ae30 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7fe fc67 	bl	800964c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ad7e:	4b35      	ldr	r3, [pc, #212]	; (800ae54 <tcp_process+0x7dc>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d105      	bne.n	800ad94 <tcp_process+0x71c>
 800ad88:	4b32      	ldr	r3, [pc, #200]	; (800ae54 <tcp_process+0x7dc>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	4a31      	ldr	r2, [pc, #196]	; (800ae54 <tcp_process+0x7dc>)
 800ad90:	6013      	str	r3, [r2, #0]
 800ad92:	e013      	b.n	800adbc <tcp_process+0x744>
 800ad94:	4b2f      	ldr	r3, [pc, #188]	; (800ae54 <tcp_process+0x7dc>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60fb      	str	r3, [r7, #12]
 800ad9a:	e00c      	b.n	800adb6 <tcp_process+0x73e>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d104      	bne.n	800adb0 <tcp_process+0x738>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	60da      	str	r2, [r3, #12]
 800adae:	e005      	b.n	800adbc <tcp_process+0x744>
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	60fb      	str	r3, [r7, #12]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1ef      	bne.n	800ad9c <tcp_process+0x724>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	60da      	str	r2, [r3, #12]
 800adc2:	4b1f      	ldr	r3, [pc, #124]	; (800ae40 <tcp_process+0x7c8>)
 800adc4:	2201      	movs	r2, #1
 800adc6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	220a      	movs	r2, #10
 800adcc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800adce:	4b1d      	ldr	r3, [pc, #116]	; (800ae44 <tcp_process+0x7cc>)
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	60da      	str	r2, [r3, #12]
 800add6:	4a1b      	ldr	r2, [pc, #108]	; (800ae44 <tcp_process+0x7cc>)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6013      	str	r3, [r2, #0]
 800addc:	f003 f8fe 	bl	800dfdc <tcp_timer_needed>
      }
      break;
 800ade0:	e026      	b.n	800ae30 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f93c 	bl	800b060 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ade8:	4b17      	ldr	r3, [pc, #92]	; (800ae48 <tcp_process+0x7d0>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01f      	beq.n	800ae34 <tcp_process+0x7bc>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adf8:	4b14      	ldr	r3, [pc, #80]	; (800ae4c <tcp_process+0x7d4>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d119      	bne.n	800ae34 <tcp_process+0x7bc>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d115      	bne.n	800ae34 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ae08:	4b11      	ldr	r3, [pc, #68]	; (800ae50 <tcp_process+0x7d8>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	f043 0310 	orr.w	r3, r3, #16
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	4b0f      	ldr	r3, [pc, #60]	; (800ae50 <tcp_process+0x7d8>)
 800ae14:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ae16:	e00d      	b.n	800ae34 <tcp_process+0x7bc>
    default:
      break;
 800ae18:	bf00      	nop
 800ae1a:	e00c      	b.n	800ae36 <tcp_process+0x7be>
      break;
 800ae1c:	bf00      	nop
 800ae1e:	e00a      	b.n	800ae36 <tcp_process+0x7be>
      break;
 800ae20:	bf00      	nop
 800ae22:	e008      	b.n	800ae36 <tcp_process+0x7be>
      break;
 800ae24:	bf00      	nop
 800ae26:	e006      	b.n	800ae36 <tcp_process+0x7be>
      break;
 800ae28:	bf00      	nop
 800ae2a:	e004      	b.n	800ae36 <tcp_process+0x7be>
      break;
 800ae2c:	bf00      	nop
 800ae2e:	e002      	b.n	800ae36 <tcp_process+0x7be>
      break;
 800ae30:	bf00      	nop
 800ae32:	e000      	b.n	800ae36 <tcp_process+0x7be>
      break;
 800ae34:	bf00      	nop
  }
  return ERR_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3724      	adds	r7, #36	; 0x24
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd90      	pop	{r4, r7, pc}
 800ae40:	20007b20 	.word	0x20007b20
 800ae44:	20007b34 	.word	0x20007b34
 800ae48:	200005c0 	.word	0x200005c0
 800ae4c:	200005b8 	.word	0x200005b8
 800ae50:	200005c1 	.word	0x200005c1
 800ae54:	20007b24 	.word	0x20007b24

0800ae58 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ae58:	b590      	push	{r4, r7, lr}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <tcp_oos_insert_segment+0x1e>
 800ae68:	4b3b      	ldr	r3, [pc, #236]	; (800af58 <tcp_oos_insert_segment+0x100>)
 800ae6a:	f240 421f 	movw	r2, #1055	; 0x41f
 800ae6e:	493b      	ldr	r1, [pc, #236]	; (800af5c <tcp_oos_insert_segment+0x104>)
 800ae70:	483b      	ldr	r0, [pc, #236]	; (800af60 <tcp_oos_insert_segment+0x108>)
 800ae72:	f008 fb8b 	bl	801358c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	899b      	ldrh	r3, [r3, #12]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fa ffd2 	bl	8005e28 <lwip_htons>
 800ae84:	4603      	mov	r3, r0
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d028      	beq.n	800aee2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ae90:	6838      	ldr	r0, [r7, #0]
 800ae92:	f7fe f8c3 	bl	800901c <tcp_segs_free>
    next = NULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	603b      	str	r3, [r7, #0]
 800ae9a:	e056      	b.n	800af4a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	899b      	ldrh	r3, [r3, #12]
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fa ffbf 	bl	8005e28 <lwip_htons>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	f003 0301 	and.w	r3, r3, #1
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00d      	beq.n	800aed2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	899b      	ldrh	r3, [r3, #12]
 800aebc:	b29c      	uxth	r4, r3
 800aebe:	2001      	movs	r0, #1
 800aec0:	f7fa ffb2 	bl	8005e28 <lwip_htons>
 800aec4:	4603      	mov	r3, r0
 800aec6:	461a      	mov	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	4322      	orrs	r2, r4
 800aece:	b292      	uxth	r2, r2
 800aed0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7fe f8b2 	bl	8009046 <tcp_seg_free>
    while (next &&
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00e      	beq.n	800af06 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	891b      	ldrh	r3, [r3, #8]
 800aeec:	461a      	mov	r2, r3
 800aeee:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <tcp_oos_insert_segment+0x10c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	441a      	add	r2, r3
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	8909      	ldrh	r1, [r1, #8]
 800aefe:	440b      	add	r3, r1
 800af00:	1ad3      	subs	r3, r2, r3
    while (next &&
 800af02:	2b00      	cmp	r3, #0
 800af04:	daca      	bge.n	800ae9c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01e      	beq.n	800af4a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	891b      	ldrh	r3, [r3, #8]
 800af10:	461a      	mov	r2, r3
 800af12:	4b14      	ldr	r3, [pc, #80]	; (800af64 <tcp_oos_insert_segment+0x10c>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	441a      	add	r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd12      	ble.n	800af4a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <tcp_oos_insert_segment+0x10c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	b29b      	uxth	r3, r3
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	b29a      	uxth	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	891b      	ldrh	r3, [r3, #8]
 800af42:	4619      	mov	r1, r3
 800af44:	4610      	mov	r0, r2
 800af46:	f7fc fab3 	bl	80074b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	601a      	str	r2, [r3, #0]
}
 800af50:	bf00      	nop
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	bd90      	pop	{r4, r7, pc}
 800af58:	08015d8c 	.word	0x08015d8c
 800af5c:	0801604c 	.word	0x0801604c
 800af60:	08015dd8 	.word	0x08015dd8
 800af64:	200005b4 	.word	0x200005b4

0800af68 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800af68:	b5b0      	push	{r4, r5, r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800af76:	e03e      	b.n	800aff6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	4618      	mov	r0, r3
 800af88:	f7fc fca0 	bl	80078cc <pbuf_clen>
 800af8c:	4603      	mov	r3, r0
 800af8e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800af96:	8a7a      	ldrh	r2, [r7, #18]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d906      	bls.n	800afaa <tcp_free_acked_segments+0x42>
 800af9c:	4b2a      	ldr	r3, [pc, #168]	; (800b048 <tcp_free_acked_segments+0xe0>)
 800af9e:	f240 4257 	movw	r2, #1111	; 0x457
 800afa2:	492a      	ldr	r1, [pc, #168]	; (800b04c <tcp_free_acked_segments+0xe4>)
 800afa4:	482a      	ldr	r0, [pc, #168]	; (800b050 <tcp_free_acked_segments+0xe8>)
 800afa6:	f008 faf1 	bl	801358c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800afb0:	8a7b      	ldrh	r3, [r7, #18]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	891a      	ldrh	r2, [r3, #8]
 800afc0:	4b24      	ldr	r3, [pc, #144]	; (800b054 <tcp_free_acked_segments+0xec>)
 800afc2:	881b      	ldrh	r3, [r3, #0]
 800afc4:	4413      	add	r3, r2
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	4b22      	ldr	r3, [pc, #136]	; (800b054 <tcp_free_acked_segments+0xec>)
 800afca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800afcc:	6978      	ldr	r0, [r7, #20]
 800afce:	f7fe f83a 	bl	8009046 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00c      	beq.n	800aff6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d109      	bne.n	800aff6 <tcp_free_acked_segments+0x8e>
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d106      	bne.n	800aff6 <tcp_free_acked_segments+0x8e>
 800afe8:	4b17      	ldr	r3, [pc, #92]	; (800b048 <tcp_free_acked_segments+0xe0>)
 800afea:	f240 4261 	movw	r2, #1121	; 0x461
 800afee:	491a      	ldr	r1, [pc, #104]	; (800b058 <tcp_free_acked_segments+0xf0>)
 800aff0:	4817      	ldr	r0, [pc, #92]	; (800b050 <tcp_free_acked_segments+0xe8>)
 800aff2:	f008 facb 	bl	801358c <iprintf>
  while (seg_list != NULL &&
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d020      	beq.n	800b03e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	4618      	mov	r0, r3
 800b004:	f7fa ff25 	bl	8005e52 <lwip_htonl>
 800b008:	4604      	mov	r4, r0
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	891b      	ldrh	r3, [r3, #8]
 800b00e:	461d      	mov	r5, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	899b      	ldrh	r3, [r3, #12]
 800b016:	b29b      	uxth	r3, r3
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fa ff05 	bl	8005e28 <lwip_htons>
 800b01e:	4603      	mov	r3, r0
 800b020:	b2db      	uxtb	r3, r3
 800b022:	f003 0303 	and.w	r3, r3, #3
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <tcp_free_acked_segments+0xc6>
 800b02a:	2301      	movs	r3, #1
 800b02c:	e000      	b.n	800b030 <tcp_free_acked_segments+0xc8>
 800b02e:	2300      	movs	r3, #0
 800b030:	442b      	add	r3, r5
 800b032:	18e2      	adds	r2, r4, r3
 800b034:	4b09      	ldr	r3, [pc, #36]	; (800b05c <tcp_free_acked_segments+0xf4>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dd9c      	ble.n	800af78 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b03e:	68bb      	ldr	r3, [r7, #8]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bdb0      	pop	{r4, r5, r7, pc}
 800b048:	08015d8c 	.word	0x08015d8c
 800b04c:	08016074 	.word	0x08016074
 800b050:	08015dd8 	.word	0x08015dd8
 800b054:	200005bc 	.word	0x200005bc
 800b058:	0801609c 	.word	0x0801609c
 800b05c:	200005b8 	.word	0x200005b8

0800b060 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b060:	b5b0      	push	{r4, r5, r7, lr}
 800b062:	b094      	sub	sp, #80	; 0x50
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b068:	2300      	movs	r3, #0
 800b06a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <tcp_receive+0x20>
 800b072:	4ba6      	ldr	r3, [pc, #664]	; (800b30c <tcp_receive+0x2ac>)
 800b074:	f240 427b 	movw	r2, #1147	; 0x47b
 800b078:	49a5      	ldr	r1, [pc, #660]	; (800b310 <tcp_receive+0x2b0>)
 800b07a:	48a6      	ldr	r0, [pc, #664]	; (800b314 <tcp_receive+0x2b4>)
 800b07c:	f008 fa86 	bl	801358c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	7d1b      	ldrb	r3, [r3, #20]
 800b084:	2b03      	cmp	r3, #3
 800b086:	d806      	bhi.n	800b096 <tcp_receive+0x36>
 800b088:	4ba0      	ldr	r3, [pc, #640]	; (800b30c <tcp_receive+0x2ac>)
 800b08a:	f240 427c 	movw	r2, #1148	; 0x47c
 800b08e:	49a2      	ldr	r1, [pc, #648]	; (800b318 <tcp_receive+0x2b8>)
 800b090:	48a0      	ldr	r0, [pc, #640]	; (800b314 <tcp_receive+0x2b4>)
 800b092:	f008 fa7b 	bl	801358c <iprintf>

  if (flags & TCP_ACK) {
 800b096:	4ba1      	ldr	r3, [pc, #644]	; (800b31c <tcp_receive+0x2bc>)
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	f003 0310 	and.w	r3, r3, #16
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 8263 	beq.w	800b56a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b0:	4413      	add	r3, r2
 800b0b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0b8:	4b99      	ldr	r3, [pc, #612]	; (800b320 <tcp_receive+0x2c0>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	db1b      	blt.n	800b0fa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0c6:	4b96      	ldr	r3, [pc, #600]	; (800b320 <tcp_receive+0x2c0>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d106      	bne.n	800b0dc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0d2:	4b94      	ldr	r3, [pc, #592]	; (800b324 <tcp_receive+0x2c4>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	db0e      	blt.n	800b0fa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b0e0:	4b90      	ldr	r3, [pc, #576]	; (800b324 <tcp_receive+0x2c4>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d125      	bne.n	800b134 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b0e8:	4b8f      	ldr	r3, [pc, #572]	; (800b328 <tcp_receive+0x2c8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	89db      	ldrh	r3, [r3, #14]
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d91c      	bls.n	800b134 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b0fa:	4b8b      	ldr	r3, [pc, #556]	; (800b328 <tcp_receive+0x2c8>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	89db      	ldrh	r3, [r3, #14]
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b114:	429a      	cmp	r2, r3
 800b116:	d205      	bcs.n	800b124 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b124:	4b7e      	ldr	r3, [pc, #504]	; (800b320 <tcp_receive+0x2c0>)
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b12c:	4b7d      	ldr	r3, [pc, #500]	; (800b324 <tcp_receive+0x2c4>)
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b134:	4b7b      	ldr	r3, [pc, #492]	; (800b324 <tcp_receive+0x2c4>)
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dc58      	bgt.n	800b1f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b142:	4b7a      	ldr	r3, [pc, #488]	; (800b32c <tcp_receive+0x2cc>)
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d14b      	bne.n	800b1e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b154:	4413      	add	r3, r2
 800b156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b158:	429a      	cmp	r2, r3
 800b15a:	d142      	bne.n	800b1e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b162:	2b00      	cmp	r3, #0
 800b164:	db3d      	blt.n	800b1e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b16a:	4b6e      	ldr	r3, [pc, #440]	; (800b324 <tcp_receive+0x2c4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d137      	bne.n	800b1e2 <tcp_receive+0x182>
              found_dupack = 1;
 800b172:	2301      	movs	r3, #1
 800b174:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b17c:	2bff      	cmp	r3, #255	; 0xff
 800b17e:	d007      	beq.n	800b190 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b186:	3301      	adds	r3, #1
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b196:	2b03      	cmp	r3, #3
 800b198:	d91b      	bls.n	800b1d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1a4:	4413      	add	r3, r2
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d30a      	bcc.n	800b1c8 <tcp_receive+0x168>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1bc:	4413      	add	r3, r2
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b1c6:	e004      	b.n	800b1d2 <tcp_receive+0x172>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d902      	bls.n	800b1e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f002 fb85 	bl	800d8ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b1e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f040 8160 	bne.w	800b4aa <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1f2:	e15a      	b.n	800b4aa <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1f4:	4b4b      	ldr	r3, [pc, #300]	; (800b324 <tcp_receive+0x2c4>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	3b01      	subs	r3, #1
 800b200:	2b00      	cmp	r3, #0
 800b202:	f2c0 814d 	blt.w	800b4a0 <tcp_receive+0x440>
 800b206:	4b47      	ldr	r3, [pc, #284]	; (800b324 <tcp_receive+0x2c4>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	2b00      	cmp	r3, #0
 800b212:	f300 8145 	bgt.w	800b4a0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	8b5b      	ldrh	r3, [r3, #26]
 800b21a:	f003 0304 	and.w	r3, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d010      	beq.n	800b244 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	8b5b      	ldrh	r3, [r3, #26]
 800b226:	f023 0304 	bic.w	r3, r3, #4
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b252:	10db      	asrs	r3, r3, #3
 800b254:	b21b      	sxth	r3, r3
 800b256:	b29a      	uxth	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b25e:	b29b      	uxth	r3, r3
 800b260:	4413      	add	r3, r2
 800b262:	b29b      	uxth	r3, r3
 800b264:	b21a      	sxth	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b26c:	4b2d      	ldr	r3, [pc, #180]	; (800b324 <tcp_receive+0x2c4>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	b29a      	uxth	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b276:	b29b      	uxth	r3, r3
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b284:	4b27      	ldr	r3, [pc, #156]	; (800b324 <tcp_receive+0x2c4>)
 800b286:	681a      	ldr	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	7d1b      	ldrb	r3, [r3, #20]
 800b290:	2b03      	cmp	r3, #3
 800b292:	f240 8096 	bls.w	800b3c2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d244      	bcs.n	800b330 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	8b5b      	ldrh	r3, [r3, #26]
 800b2aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d001      	beq.n	800b2b6 <tcp_receive+0x256>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e000      	b.n	800b2b8 <tcp_receive+0x258>
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b2bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b2c6:	fb12 f303 	smulbb	r3, r2, r3
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	bf28      	it	cs
 800b2d2:	4613      	movcs	r3, r2
 800b2d4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b2de:	4413      	add	r3, r2
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d309      	bcc.n	800b300 <tcp_receive+0x2a0>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b2f4:	4413      	add	r3, r2
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b2fe:	e060      	b.n	800b3c2 <tcp_receive+0x362>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b306:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b30a:	e05a      	b.n	800b3c2 <tcp_receive+0x362>
 800b30c:	08015d8c 	.word	0x08015d8c
 800b310:	080160bc 	.word	0x080160bc
 800b314:	08015dd8 	.word	0x08015dd8
 800b318:	080160d8 	.word	0x080160d8
 800b31c:	200005c0 	.word	0x200005c0
 800b320:	200005b4 	.word	0x200005b4
 800b324:	200005b8 	.word	0x200005b8
 800b328:	200005a4 	.word	0x200005a4
 800b32c:	200005be 	.word	0x200005be
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b336:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b338:	4413      	add	r3, r2
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b342:	429a      	cmp	r2, r3
 800b344:	d309      	bcc.n	800b35a <tcp_receive+0x2fa>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b34c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b34e:	4413      	add	r3, r2
 800b350:	b29a      	uxth	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b358:	e004      	b.n	800b364 <tcp_receive+0x304>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b370:	429a      	cmp	r2, r3
 800b372:	d326      	bcc.n	800b3c2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	b29a      	uxth	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b394:	4413      	add	r3, r2
 800b396:	b29a      	uxth	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d30a      	bcc.n	800b3b8 <tcp_receive+0x358>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3ac:	4413      	add	r3, r2
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b3b6:	e004      	b.n	800b3c2 <tcp_receive+0x362>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ca:	4a98      	ldr	r2, [pc, #608]	; (800b62c <tcp_receive+0x5cc>)
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7ff fdcb 	bl	800af68 <tcp_free_acked_segments>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e0:	4a93      	ldr	r2, [pc, #588]	; (800b630 <tcp_receive+0x5d0>)
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fdc0 	bl	800af68 <tcp_free_acked_segments>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d104      	bne.n	800b400 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3fc:	861a      	strh	r2, [r3, #48]	; 0x30
 800b3fe:	e002      	b.n	800b406 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d103      	bne.n	800b41c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b422:	4b84      	ldr	r3, [pc, #528]	; (800b634 <tcp_receive+0x5d4>)
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	4413      	add	r3, r2
 800b428:	b29a      	uxth	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	8b5b      	ldrh	r3, [r3, #26]
 800b434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d035      	beq.n	800b4a8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b440:	2b00      	cmp	r3, #0
 800b442:	d118      	bne.n	800b476 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00c      	beq.n	800b466 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fa fcfa 	bl	8005e52 <lwip_htonl>
 800b45e:	4603      	mov	r3, r0
 800b460:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b462:	2b00      	cmp	r3, #0
 800b464:	dc20      	bgt.n	800b4a8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8b5b      	ldrh	r3, [r3, #26]
 800b46a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b46e:	b29a      	uxth	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b474:	e018      	b.n	800b4a8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	4618      	mov	r0, r3
 800b484:	f7fa fce5 	bl	8005e52 <lwip_htonl>
 800b488:	4603      	mov	r3, r0
 800b48a:	1ae3      	subs	r3, r4, r3
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	dc0b      	bgt.n	800b4a8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	8b5b      	ldrh	r3, [r3, #26]
 800b494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b498:	b29a      	uxth	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b49e:	e003      	b.n	800b4a8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f002 fc2b 	bl	800dcfc <tcp_send_empty_ack>
 800b4a6:	e000      	b.n	800b4aa <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b4a8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d05b      	beq.n	800b56a <tcp_receive+0x50a>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4b6:	4b60      	ldr	r3, [pc, #384]	; (800b638 <tcp_receive+0x5d8>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	da54      	bge.n	800b56a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b4c0:	4b5e      	ldr	r3, [pc, #376]	; (800b63c <tcp_receive+0x5dc>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b4d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b4de:	10db      	asrs	r3, r3, #3
 800b4e0:	b21b      	sxth	r3, r3
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	1ad3      	subs	r3, r2, r3
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	b21a      	sxth	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b502:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b506:	2b00      	cmp	r3, #0
 800b508:	da05      	bge.n	800b516 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800b50a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b50e:	425b      	negs	r3, r3
 800b510:	b29b      	uxth	r3, r3
 800b512:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b516:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b520:	109b      	asrs	r3, r3, #2
 800b522:	b21b      	sxth	r3, r3
 800b524:	b29b      	uxth	r3, r3
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	b29b      	uxth	r3, r3
 800b52a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b534:	b29a      	uxth	r2, r3
 800b536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b53a:	4413      	add	r3, r2
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	b21a      	sxth	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b54a:	10db      	asrs	r3, r3, #3
 800b54c:	b21b      	sxth	r3, r3
 800b54e:	b29a      	uxth	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b556:	b29b      	uxth	r3, r3
 800b558:	4413      	add	r3, r2
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	b21a      	sxth	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b56a:	4b35      	ldr	r3, [pc, #212]	; (800b640 <tcp_receive+0x5e0>)
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f000 84e1 	beq.w	800bf36 <tcp_receive+0xed6>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	7d1b      	ldrb	r3, [r3, #20]
 800b578:	2b06      	cmp	r3, #6
 800b57a:	f200 84dc 	bhi.w	800bf36 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b582:	4b30      	ldr	r3, [pc, #192]	; (800b644 <tcp_receive+0x5e4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	1ad3      	subs	r3, r2, r3
 800b588:	3b01      	subs	r3, #1
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f2c0 808e 	blt.w	800b6ac <tcp_receive+0x64c>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b594:	4b2a      	ldr	r3, [pc, #168]	; (800b640 <tcp_receive+0x5e0>)
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	4619      	mov	r1, r3
 800b59a:	4b2a      	ldr	r3, [pc, #168]	; (800b644 <tcp_receive+0x5e4>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	440b      	add	r3, r1
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f300 8081 	bgt.w	800b6ac <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b5aa:	4b27      	ldr	r3, [pc, #156]	; (800b648 <tcp_receive+0x5e8>)
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5b4:	4b23      	ldr	r3, [pc, #140]	; (800b644 <tcp_receive+0x5e4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b5bc:	4b22      	ldr	r3, [pc, #136]	; (800b648 <tcp_receive+0x5e8>)
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d106      	bne.n	800b5d2 <tcp_receive+0x572>
 800b5c4:	4b21      	ldr	r3, [pc, #132]	; (800b64c <tcp_receive+0x5ec>)
 800b5c6:	f240 5294 	movw	r2, #1428	; 0x594
 800b5ca:	4921      	ldr	r1, [pc, #132]	; (800b650 <tcp_receive+0x5f0>)
 800b5cc:	4821      	ldr	r0, [pc, #132]	; (800b654 <tcp_receive+0x5f4>)
 800b5ce:	f007 ffdd 	bl	801358c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d906      	bls.n	800b5ea <tcp_receive+0x58a>
 800b5dc:	4b1b      	ldr	r3, [pc, #108]	; (800b64c <tcp_receive+0x5ec>)
 800b5de:	f240 5295 	movw	r2, #1429	; 0x595
 800b5e2:	491d      	ldr	r1, [pc, #116]	; (800b658 <tcp_receive+0x5f8>)
 800b5e4:	481b      	ldr	r0, [pc, #108]	; (800b654 <tcp_receive+0x5f4>)
 800b5e6:	f007 ffd1 	bl	801358c <iprintf>
      off = (u16_t)off32;
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b5f0:	4b15      	ldr	r3, [pc, #84]	; (800b648 <tcp_receive+0x5e8>)
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	891b      	ldrh	r3, [r3, #8]
 800b5f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d906      	bls.n	800b60c <tcp_receive+0x5ac>
 800b5fe:	4b13      	ldr	r3, [pc, #76]	; (800b64c <tcp_receive+0x5ec>)
 800b600:	f240 5297 	movw	r2, #1431	; 0x597
 800b604:	4915      	ldr	r1, [pc, #84]	; (800b65c <tcp_receive+0x5fc>)
 800b606:	4813      	ldr	r0, [pc, #76]	; (800b654 <tcp_receive+0x5f4>)
 800b608:	f007 ffc0 	bl	801358c <iprintf>
      inseg.len -= off;
 800b60c:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <tcp_receive+0x5e8>)
 800b60e:	891a      	ldrh	r2, [r3, #8]
 800b610:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	b29a      	uxth	r2, r3
 800b618:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <tcp_receive+0x5e8>)
 800b61a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b61c:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <tcp_receive+0x5e8>)
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	891a      	ldrh	r2, [r3, #8]
 800b622:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b62a:	e029      	b.n	800b680 <tcp_receive+0x620>
 800b62c:	080160f4 	.word	0x080160f4
 800b630:	080160fc 	.word	0x080160fc
 800b634:	200005bc 	.word	0x200005bc
 800b638:	200005b8 	.word	0x200005b8
 800b63c:	20007b28 	.word	0x20007b28
 800b640:	200005be 	.word	0x200005be
 800b644:	200005b4 	.word	0x200005b4
 800b648:	20000594 	.word	0x20000594
 800b64c:	08015d8c 	.word	0x08015d8c
 800b650:	08016104 	.word	0x08016104
 800b654:	08015dd8 	.word	0x08015dd8
 800b658:	08016114 	.word	0x08016114
 800b65c:	08016124 	.word	0x08016124
        off -= p->len;
 800b660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b662:	895b      	ldrh	r3, [r3, #10]
 800b664:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b66e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b670:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b672:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b676:	2200      	movs	r2, #0
 800b678:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b682:	895b      	ldrh	r3, [r3, #10]
 800b684:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b688:	429a      	cmp	r2, r3
 800b68a:	d8e9      	bhi.n	800b660 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b68c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b690:	4619      	mov	r1, r3
 800b692:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b694:	f7fc f80c 	bl	80076b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	4a91      	ldr	r2, [pc, #580]	; (800b8e4 <tcp_receive+0x884>)
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	4b91      	ldr	r3, [pc, #580]	; (800b8e8 <tcp_receive+0x888>)
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	4a8f      	ldr	r2, [pc, #572]	; (800b8e4 <tcp_receive+0x884>)
 800b6a6:	6812      	ldr	r2, [r2, #0]
 800b6a8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b6aa:	e00d      	b.n	800b6c8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b6ac:	4b8d      	ldr	r3, [pc, #564]	; (800b8e4 <tcp_receive+0x884>)
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	da06      	bge.n	800b6c8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	8b5b      	ldrh	r3, [r3, #26]
 800b6be:	f043 0302 	orr.w	r3, r3, #2
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b6c8:	4b86      	ldr	r3, [pc, #536]	; (800b8e4 <tcp_receive+0x884>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f2c0 842a 	blt.w	800bf2c <tcp_receive+0xecc>
 800b6d8:	4b82      	ldr	r3, [pc, #520]	; (800b8e4 <tcp_receive+0x884>)
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b6e4:	440b      	add	r3, r1
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f300 841e 	bgt.w	800bf2c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6f4:	4b7b      	ldr	r3, [pc, #492]	; (800b8e4 <tcp_receive+0x884>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	f040 829a 	bne.w	800bc32 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b6fe:	4b7a      	ldr	r3, [pc, #488]	; (800b8e8 <tcp_receive+0x888>)
 800b700:	891c      	ldrh	r4, [r3, #8]
 800b702:	4b79      	ldr	r3, [pc, #484]	; (800b8e8 <tcp_receive+0x888>)
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	899b      	ldrh	r3, [r3, #12]
 800b708:	b29b      	uxth	r3, r3
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fa fb8c 	bl	8005e28 <lwip_htons>
 800b710:	4603      	mov	r3, r0
 800b712:	b2db      	uxtb	r3, r3
 800b714:	f003 0303 	and.w	r3, r3, #3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <tcp_receive+0x6c0>
 800b71c:	2301      	movs	r3, #1
 800b71e:	e000      	b.n	800b722 <tcp_receive+0x6c2>
 800b720:	2300      	movs	r3, #0
 800b722:	4423      	add	r3, r4
 800b724:	b29a      	uxth	r2, r3
 800b726:	4b71      	ldr	r3, [pc, #452]	; (800b8ec <tcp_receive+0x88c>)
 800b728:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b72e:	4b6f      	ldr	r3, [pc, #444]	; (800b8ec <tcp_receive+0x88c>)
 800b730:	881b      	ldrh	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d275      	bcs.n	800b822 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b736:	4b6c      	ldr	r3, [pc, #432]	; (800b8e8 <tcp_receive+0x888>)
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	899b      	ldrh	r3, [r3, #12]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fa fb72 	bl	8005e28 <lwip_htons>
 800b744:	4603      	mov	r3, r0
 800b746:	b2db      	uxtb	r3, r3
 800b748:	f003 0301 	and.w	r3, r3, #1
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d01f      	beq.n	800b790 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b750:	4b65      	ldr	r3, [pc, #404]	; (800b8e8 <tcp_receive+0x888>)
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	899b      	ldrh	r3, [r3, #12]
 800b756:	b29b      	uxth	r3, r3
 800b758:	b21b      	sxth	r3, r3
 800b75a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b75e:	b21c      	sxth	r4, r3
 800b760:	4b61      	ldr	r3, [pc, #388]	; (800b8e8 <tcp_receive+0x888>)
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	899b      	ldrh	r3, [r3, #12]
 800b766:	b29b      	uxth	r3, r3
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fa fb5d 	bl	8005e28 <lwip_htons>
 800b76e:	4603      	mov	r3, r0
 800b770:	b2db      	uxtb	r3, r3
 800b772:	b29b      	uxth	r3, r3
 800b774:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b778:	b29b      	uxth	r3, r3
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fa fb54 	bl	8005e28 <lwip_htons>
 800b780:	4603      	mov	r3, r0
 800b782:	b21b      	sxth	r3, r3
 800b784:	4323      	orrs	r3, r4
 800b786:	b21a      	sxth	r2, r3
 800b788:	4b57      	ldr	r3, [pc, #348]	; (800b8e8 <tcp_receive+0x888>)
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	b292      	uxth	r2, r2
 800b78e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b794:	4b54      	ldr	r3, [pc, #336]	; (800b8e8 <tcp_receive+0x888>)
 800b796:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b798:	4b53      	ldr	r3, [pc, #332]	; (800b8e8 <tcp_receive+0x888>)
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	899b      	ldrh	r3, [r3, #12]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fa fb41 	bl	8005e28 <lwip_htons>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	f003 0302 	and.w	r3, r3, #2
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d005      	beq.n	800b7be <tcp_receive+0x75e>
            inseg.len -= 1;
 800b7b2:	4b4d      	ldr	r3, [pc, #308]	; (800b8e8 <tcp_receive+0x888>)
 800b7b4:	891b      	ldrh	r3, [r3, #8]
 800b7b6:	3b01      	subs	r3, #1
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	4b4b      	ldr	r3, [pc, #300]	; (800b8e8 <tcp_receive+0x888>)
 800b7bc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b7be:	4b4a      	ldr	r3, [pc, #296]	; (800b8e8 <tcp_receive+0x888>)
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	4a49      	ldr	r2, [pc, #292]	; (800b8e8 <tcp_receive+0x888>)
 800b7c4:	8912      	ldrh	r2, [r2, #8]
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fb fe71 	bl	80074b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b7ce:	4b46      	ldr	r3, [pc, #280]	; (800b8e8 <tcp_receive+0x888>)
 800b7d0:	891c      	ldrh	r4, [r3, #8]
 800b7d2:	4b45      	ldr	r3, [pc, #276]	; (800b8e8 <tcp_receive+0x888>)
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	899b      	ldrh	r3, [r3, #12]
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fa fb24 	bl	8005e28 <lwip_htons>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	f003 0303 	and.w	r3, r3, #3
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <tcp_receive+0x790>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <tcp_receive+0x792>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4423      	add	r3, r4
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	4b3d      	ldr	r3, [pc, #244]	; (800b8ec <tcp_receive+0x88c>)
 800b7f8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b7fa:	4b3c      	ldr	r3, [pc, #240]	; (800b8ec <tcp_receive+0x88c>)
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	4b38      	ldr	r3, [pc, #224]	; (800b8e4 <tcp_receive+0x884>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	441a      	add	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	6879      	ldr	r1, [r7, #4]
 800b80c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b80e:	440b      	add	r3, r1
 800b810:	429a      	cmp	r2, r3
 800b812:	d006      	beq.n	800b822 <tcp_receive+0x7c2>
 800b814:	4b36      	ldr	r3, [pc, #216]	; (800b8f0 <tcp_receive+0x890>)
 800b816:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b81a:	4936      	ldr	r1, [pc, #216]	; (800b8f4 <tcp_receive+0x894>)
 800b81c:	4836      	ldr	r0, [pc, #216]	; (800b8f8 <tcp_receive+0x898>)
 800b81e:	f007 feb5 	bl	801358c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80e7 	beq.w	800b9fa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b82c:	4b2e      	ldr	r3, [pc, #184]	; (800b8e8 <tcp_receive+0x888>)
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	899b      	ldrh	r3, [r3, #12]
 800b832:	b29b      	uxth	r3, r3
 800b834:	4618      	mov	r0, r3
 800b836:	f7fa faf7 	bl	8005e28 <lwip_htons>
 800b83a:	4603      	mov	r3, r0
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d010      	beq.n	800b868 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b846:	e00a      	b.n	800b85e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b84c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f7fd fbf4 	bl	8009046 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1f0      	bne.n	800b848 <tcp_receive+0x7e8>
 800b866:	e0c8      	b.n	800b9fa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b86e:	e052      	b.n	800b916 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	899b      	ldrh	r3, [r3, #12]
 800b876:	b29b      	uxth	r3, r3
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fa fad5 	bl	8005e28 <lwip_htons>
 800b87e:	4603      	mov	r3, r0
 800b880:	b2db      	uxtb	r3, r3
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d03d      	beq.n	800b906 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b88a:	4b17      	ldr	r3, [pc, #92]	; (800b8e8 <tcp_receive+0x888>)
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	899b      	ldrh	r3, [r3, #12]
 800b890:	b29b      	uxth	r3, r3
 800b892:	4618      	mov	r0, r3
 800b894:	f7fa fac8 	bl	8005e28 <lwip_htons>
 800b898:	4603      	mov	r3, r0
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d130      	bne.n	800b906 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b8a4:	4b10      	ldr	r3, [pc, #64]	; (800b8e8 <tcp_receive+0x888>)
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	899b      	ldrh	r3, [r3, #12]
 800b8aa:	b29c      	uxth	r4, r3
 800b8ac:	2001      	movs	r0, #1
 800b8ae:	f7fa fabb 	bl	8005e28 <lwip_htons>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <tcp_receive+0x888>)
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	4322      	orrs	r2, r4
 800b8bc:	b292      	uxth	r2, r2
 800b8be:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b8c0:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <tcp_receive+0x888>)
 800b8c2:	891c      	ldrh	r4, [r3, #8]
 800b8c4:	4b08      	ldr	r3, [pc, #32]	; (800b8e8 <tcp_receive+0x888>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	899b      	ldrh	r3, [r3, #12]
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fa faab 	bl	8005e28 <lwip_htons>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	f003 0303 	and.w	r3, r3, #3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00e      	beq.n	800b8fc <tcp_receive+0x89c>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e00d      	b.n	800b8fe <tcp_receive+0x89e>
 800b8e2:	bf00      	nop
 800b8e4:	200005b4 	.word	0x200005b4
 800b8e8:	20000594 	.word	0x20000594
 800b8ec:	200005be 	.word	0x200005be
 800b8f0:	08015d8c 	.word	0x08015d8c
 800b8f4:	08016134 	.word	0x08016134
 800b8f8:	08015dd8 	.word	0x08015dd8
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	4423      	add	r3, r4
 800b900:	b29a      	uxth	r2, r3
 800b902:	4b98      	ldr	r3, [pc, #608]	; (800bb64 <tcp_receive+0xb04>)
 800b904:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b908:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b910:	6938      	ldr	r0, [r7, #16]
 800b912:	f7fd fb98 	bl	8009046 <tcp_seg_free>
            while (next &&
 800b916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00e      	beq.n	800b93a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b91c:	4b91      	ldr	r3, [pc, #580]	; (800bb64 <tcp_receive+0xb04>)
 800b91e:	881b      	ldrh	r3, [r3, #0]
 800b920:	461a      	mov	r2, r3
 800b922:	4b91      	ldr	r3, [pc, #580]	; (800bb68 <tcp_receive+0xb08>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	441a      	add	r2, r3
 800b928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b930:	8909      	ldrh	r1, [r1, #8]
 800b932:	440b      	add	r3, r1
 800b934:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b936:	2b00      	cmp	r3, #0
 800b938:	da9a      	bge.n	800b870 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d059      	beq.n	800b9f4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b940:	4b88      	ldr	r3, [pc, #544]	; (800bb64 <tcp_receive+0xb04>)
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	461a      	mov	r2, r3
 800b946:	4b88      	ldr	r3, [pc, #544]	; (800bb68 <tcp_receive+0xb08>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	441a      	add	r2, r3
 800b94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b954:	2b00      	cmp	r3, #0
 800b956:	dd4d      	ble.n	800b9f4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	b29a      	uxth	r2, r3
 800b960:	4b81      	ldr	r3, [pc, #516]	; (800bb68 <tcp_receive+0xb08>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	b29b      	uxth	r3, r3
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	b29a      	uxth	r2, r3
 800b96a:	4b80      	ldr	r3, [pc, #512]	; (800bb6c <tcp_receive+0xb0c>)
 800b96c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b96e:	4b7f      	ldr	r3, [pc, #508]	; (800bb6c <tcp_receive+0xb0c>)
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	899b      	ldrh	r3, [r3, #12]
 800b974:	b29b      	uxth	r3, r3
 800b976:	4618      	mov	r0, r3
 800b978:	f7fa fa56 	bl	8005e28 <lwip_htons>
 800b97c:	4603      	mov	r3, r0
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 0302 	and.w	r3, r3, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <tcp_receive+0x934>
                inseg.len -= 1;
 800b988:	4b78      	ldr	r3, [pc, #480]	; (800bb6c <tcp_receive+0xb0c>)
 800b98a:	891b      	ldrh	r3, [r3, #8]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	b29a      	uxth	r2, r3
 800b990:	4b76      	ldr	r3, [pc, #472]	; (800bb6c <tcp_receive+0xb0c>)
 800b992:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b994:	4b75      	ldr	r3, [pc, #468]	; (800bb6c <tcp_receive+0xb0c>)
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	4a74      	ldr	r2, [pc, #464]	; (800bb6c <tcp_receive+0xb0c>)
 800b99a:	8912      	ldrh	r2, [r2, #8]
 800b99c:	4611      	mov	r1, r2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fb fd86 	bl	80074b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b9a4:	4b71      	ldr	r3, [pc, #452]	; (800bb6c <tcp_receive+0xb0c>)
 800b9a6:	891c      	ldrh	r4, [r3, #8]
 800b9a8:	4b70      	ldr	r3, [pc, #448]	; (800bb6c <tcp_receive+0xb0c>)
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	899b      	ldrh	r3, [r3, #12]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fa fa39 	bl	8005e28 <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	f003 0303 	and.w	r3, r3, #3
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <tcp_receive+0x966>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e000      	b.n	800b9c8 <tcp_receive+0x968>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4423      	add	r3, r4
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	4b65      	ldr	r3, [pc, #404]	; (800bb64 <tcp_receive+0xb04>)
 800b9ce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b9d0:	4b64      	ldr	r3, [pc, #400]	; (800bb64 <tcp_receive+0xb04>)
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4b64      	ldr	r3, [pc, #400]	; (800bb68 <tcp_receive+0xb08>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	441a      	add	r2, r3
 800b9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d006      	beq.n	800b9f4 <tcp_receive+0x994>
 800b9e6:	4b62      	ldr	r3, [pc, #392]	; (800bb70 <tcp_receive+0xb10>)
 800b9e8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b9ec:	4961      	ldr	r1, [pc, #388]	; (800bb74 <tcp_receive+0xb14>)
 800b9ee:	4862      	ldr	r0, [pc, #392]	; (800bb78 <tcp_receive+0xb18>)
 800b9f0:	f007 fdcc 	bl	801358c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9f8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b9fa:	4b5a      	ldr	r3, [pc, #360]	; (800bb64 <tcp_receive+0xb04>)
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	4b59      	ldr	r3, [pc, #356]	; (800bb68 <tcp_receive+0xb08>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	441a      	add	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba0e:	4b55      	ldr	r3, [pc, #340]	; (800bb64 <tcp_receive+0xb04>)
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d206      	bcs.n	800ba24 <tcp_receive+0x9c4>
 800ba16:	4b56      	ldr	r3, [pc, #344]	; (800bb70 <tcp_receive+0xb10>)
 800ba18:	f240 6207 	movw	r2, #1543	; 0x607
 800ba1c:	4957      	ldr	r1, [pc, #348]	; (800bb7c <tcp_receive+0xb1c>)
 800ba1e:	4856      	ldr	r0, [pc, #344]	; (800bb78 <tcp_receive+0xb18>)
 800ba20:	f007 fdb4 	bl	801358c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba28:	4b4e      	ldr	r3, [pc, #312]	; (800bb64 <tcp_receive+0xb04>)
 800ba2a:	881b      	ldrh	r3, [r3, #0]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f7fc fde1 	bl	80085fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ba3a:	4b4c      	ldr	r3, [pc, #304]	; (800bb6c <tcp_receive+0xb0c>)
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	891b      	ldrh	r3, [r3, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d006      	beq.n	800ba52 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ba44:	4b49      	ldr	r3, [pc, #292]	; (800bb6c <tcp_receive+0xb0c>)
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	4a4d      	ldr	r2, [pc, #308]	; (800bb80 <tcp_receive+0xb20>)
 800ba4a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ba4c:	4b47      	ldr	r3, [pc, #284]	; (800bb6c <tcp_receive+0xb0c>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ba52:	4b46      	ldr	r3, [pc, #280]	; (800bb6c <tcp_receive+0xb0c>)
 800ba54:	68db      	ldr	r3, [r3, #12]
 800ba56:	899b      	ldrh	r3, [r3, #12]
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fa f9e4 	bl	8005e28 <lwip_htons>
 800ba60:	4603      	mov	r3, r0
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f000 80b8 	beq.w	800bbde <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ba6e:	4b45      	ldr	r3, [pc, #276]	; (800bb84 <tcp_receive+0xb24>)
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	f043 0320 	orr.w	r3, r3, #32
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	4b42      	ldr	r3, [pc, #264]	; (800bb84 <tcp_receive+0xb24>)
 800ba7a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ba7c:	e0af      	b.n	800bbde <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba82:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	4a36      	ldr	r2, [pc, #216]	; (800bb68 <tcp_receive+0xb08>)
 800ba8e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	891b      	ldrh	r3, [r3, #8]
 800ba94:	461c      	mov	r4, r3
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	899b      	ldrh	r3, [r3, #12]
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fa f9c2 	bl	8005e28 <lwip_htons>
 800baa4:	4603      	mov	r3, r0
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	f003 0303 	and.w	r3, r3, #3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <tcp_receive+0xa54>
 800bab0:	2301      	movs	r3, #1
 800bab2:	e000      	b.n	800bab6 <tcp_receive+0xa56>
 800bab4:	2300      	movs	r3, #0
 800bab6:	191a      	adds	r2, r3, r4
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	441a      	add	r2, r3
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac6:	461c      	mov	r4, r3
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	891b      	ldrh	r3, [r3, #8]
 800bacc:	461d      	mov	r5, r3
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	899b      	ldrh	r3, [r3, #12]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fa f9a6 	bl	8005e28 <lwip_htons>
 800badc:	4603      	mov	r3, r0
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f003 0303 	and.w	r3, r3, #3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <tcp_receive+0xa8c>
 800bae8:	2301      	movs	r3, #1
 800baea:	e000      	b.n	800baee <tcp_receive+0xa8e>
 800baec:	2300      	movs	r3, #0
 800baee:	442b      	add	r3, r5
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d206      	bcs.n	800bb02 <tcp_receive+0xaa2>
 800baf4:	4b1e      	ldr	r3, [pc, #120]	; (800bb70 <tcp_receive+0xb10>)
 800baf6:	f240 622b 	movw	r2, #1579	; 0x62b
 800bafa:	4923      	ldr	r1, [pc, #140]	; (800bb88 <tcp_receive+0xb28>)
 800bafc:	481e      	ldr	r0, [pc, #120]	; (800bb78 <tcp_receive+0xb18>)
 800bafe:	f007 fd45 	bl	801358c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	891b      	ldrh	r3, [r3, #8]
 800bb06:	461c      	mov	r4, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	899b      	ldrh	r3, [r3, #12]
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fa f989 	bl	8005e28 <lwip_htons>
 800bb16:	4603      	mov	r3, r0
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	f003 0303 	and.w	r3, r3, #3
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <tcp_receive+0xac6>
 800bb22:	2301      	movs	r3, #1
 800bb24:	e000      	b.n	800bb28 <tcp_receive+0xac8>
 800bb26:	2300      	movs	r3, #0
 800bb28:	1919      	adds	r1, r3, r4
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb2e:	b28b      	uxth	r3, r1
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f7fc fd5f 	bl	80085fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	891b      	ldrh	r3, [r3, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d028      	beq.n	800bb9a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bb48:	4b0d      	ldr	r3, [pc, #52]	; (800bb80 <tcp_receive+0xb20>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d01d      	beq.n	800bb8c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800bb50:	4b0b      	ldr	r3, [pc, #44]	; (800bb80 <tcp_receive+0xb20>)
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	f7fb fef0 	bl	8007940 <pbuf_cat>
 800bb60:	e018      	b.n	800bb94 <tcp_receive+0xb34>
 800bb62:	bf00      	nop
 800bb64:	200005be 	.word	0x200005be
 800bb68:	200005b4 	.word	0x200005b4
 800bb6c:	20000594 	.word	0x20000594
 800bb70:	08015d8c 	.word	0x08015d8c
 800bb74:	0801616c 	.word	0x0801616c
 800bb78:	08015dd8 	.word	0x08015dd8
 800bb7c:	080161a8 	.word	0x080161a8
 800bb80:	200005c4 	.word	0x200005c4
 800bb84:	200005c1 	.word	0x200005c1
 800bb88:	080161c8 	.word	0x080161c8
            } else {
              recv_data = cseg->p;
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	4a70      	ldr	r2, [pc, #448]	; (800bd54 <tcp_receive+0xcf4>)
 800bb92:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2200      	movs	r2, #0
 800bb98:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	899b      	ldrh	r3, [r3, #12]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fa f940 	bl	8005e28 <lwip_htons>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	f003 0301 	and.w	r3, r3, #1
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00d      	beq.n	800bbd0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bbb4:	4b68      	ldr	r3, [pc, #416]	; (800bd58 <tcp_receive+0xcf8>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	f043 0320 	orr.w	r3, r3, #32
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	4b66      	ldr	r3, [pc, #408]	; (800bd58 <tcp_receive+0xcf8>)
 800bbc0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	7d1b      	ldrb	r3, [r3, #20]
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	d102      	bne.n	800bbd0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2207      	movs	r2, #7
 800bbce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bbd8:	68b8      	ldr	r0, [r7, #8]
 800bbda:	f7fd fa34 	bl	8009046 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d008      	beq.n	800bbf8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	f43f af43 	beq.w	800ba7e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	8b5b      	ldrh	r3, [r3, #26]
 800bbfc:	f003 0301 	and.w	r3, r3, #1
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00e      	beq.n	800bc22 <tcp_receive+0xbc2>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	8b5b      	ldrh	r3, [r3, #26]
 800bc08:	f023 0301 	bic.w	r3, r3, #1
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	835a      	strh	r2, [r3, #26]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	8b5b      	ldrh	r3, [r3, #26]
 800bc16:	f043 0302 	orr.w	r3, r3, #2
 800bc1a:	b29a      	uxth	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bc20:	e188      	b.n	800bf34 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	8b5b      	ldrh	r3, [r3, #26]
 800bc26:	f043 0301 	orr.w	r3, r3, #1
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bc30:	e180      	b.n	800bf34 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bc3a:	4848      	ldr	r0, [pc, #288]	; (800bd5c <tcp_receive+0xcfc>)
 800bc3c:	f7fd fa3a 	bl	80090b4 <tcp_seg_copy>
 800bc40:	4602      	mov	r2, r0
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	675a      	str	r2, [r3, #116]	; 0x74
 800bc46:	e16d      	b.n	800bf24 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc50:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc52:	e157      	b.n	800bf04 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800bc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	4b41      	ldr	r3, [pc, #260]	; (800bd60 <tcp_receive+0xd00>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d11d      	bne.n	800bc9e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bc62:	4b3e      	ldr	r3, [pc, #248]	; (800bd5c <tcp_receive+0xcfc>)
 800bc64:	891a      	ldrh	r2, [r3, #8]
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	891b      	ldrh	r3, [r3, #8]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	f240 814f 	bls.w	800bf0e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bc70:	483a      	ldr	r0, [pc, #232]	; (800bd5c <tcp_receive+0xcfc>)
 800bc72:	f7fd fa1f 	bl	80090b4 <tcp_seg_copy>
 800bc76:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f000 8149 	beq.w	800bf12 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800bc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800bc86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e002      	b.n	800bc94 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	697a      	ldr	r2, [r7, #20]
 800bc92:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bc94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc96:	6978      	ldr	r0, [r7, #20]
 800bc98:	f7ff f8de 	bl	800ae58 <tcp_oos_insert_segment>
                }
                break;
 800bc9c:	e139      	b.n	800bf12 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bc9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d117      	bne.n	800bcd4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bca4:	4b2e      	ldr	r3, [pc, #184]	; (800bd60 <tcp_receive+0xd00>)
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da57      	bge.n	800bd64 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bcb4:	4829      	ldr	r0, [pc, #164]	; (800bd5c <tcp_receive+0xcfc>)
 800bcb6:	f7fd f9fd 	bl	80090b4 <tcp_seg_copy>
 800bcba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	f000 8129 	beq.w	800bf16 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	69ba      	ldr	r2, [r7, #24]
 800bcc8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bcca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bccc:	69b8      	ldr	r0, [r7, #24]
 800bcce:	f7ff f8c3 	bl	800ae58 <tcp_oos_insert_segment>
                  }
                  break;
 800bcd2:	e120      	b.n	800bf16 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bcd4:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <tcp_receive+0xd00>)
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	3b01      	subs	r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	db3e      	blt.n	800bd64 <tcp_receive+0xd04>
 800bce6:	4b1e      	ldr	r3, [pc, #120]	; (800bd60 <tcp_receive+0xd00>)
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	dc35      	bgt.n	800bd64 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bcf8:	4818      	ldr	r0, [pc, #96]	; (800bd5c <tcp_receive+0xcfc>)
 800bcfa:	f7fd f9db 	bl	80090b4 <tcp_seg_copy>
 800bcfe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 8109 	beq.w	800bf1a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd10:	8912      	ldrh	r2, [r2, #8]
 800bd12:	441a      	add	r2, r3
 800bd14:	4b12      	ldr	r3, [pc, #72]	; (800bd60 <tcp_receive+0xd00>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	dd12      	ble.n	800bd44 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bd1e:	4b10      	ldr	r3, [pc, #64]	; (800bd60 <tcp_receive+0xd00>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	b29a      	uxth	r2, r3
 800bd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd32:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bd34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd3a:	891b      	ldrh	r3, [r3, #8]
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	f7fb fbb6 	bl	80074b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd46:	69fa      	ldr	r2, [r7, #28]
 800bd48:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bd4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd4c:	69f8      	ldr	r0, [r7, #28]
 800bd4e:	f7ff f883 	bl	800ae58 <tcp_oos_insert_segment>
                  }
                  break;
 800bd52:	e0e2      	b.n	800bf1a <tcp_receive+0xeba>
 800bd54:	200005c4 	.word	0x200005c4
 800bd58:	200005c1 	.word	0x200005c1
 800bd5c:	20000594 	.word	0x20000594
 800bd60:	200005b4 	.word	0x200005b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f040 80c6 	bne.w	800befe <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bd72:	4b80      	ldr	r3, [pc, #512]	; (800bf74 <tcp_receive+0xf14>)
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f340 80bd 	ble.w	800befe <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	899b      	ldrh	r3, [r3, #12]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fa f84b 	bl	8005e28 <lwip_htons>
 800bd92:	4603      	mov	r3, r0
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f040 80bf 	bne.w	800bf1e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bda0:	4875      	ldr	r0, [pc, #468]	; (800bf78 <tcp_receive+0xf18>)
 800bda2:	f7fd f987 	bl	80090b4 <tcp_seg_copy>
 800bda6:	4602      	mov	r2, r0
 800bda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdaa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 80b6 	beq.w	800bf22 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdbe:	8912      	ldrh	r2, [r2, #8]
 800bdc0:	441a      	add	r2, r3
 800bdc2:	4b6c      	ldr	r3, [pc, #432]	; (800bf74 <tcp_receive+0xf14>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	dd12      	ble.n	800bdf2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bdcc:	4b69      	ldr	r3, [pc, #420]	; (800bf74 <tcp_receive+0xf14>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde8:	891b      	ldrh	r3, [r3, #8]
 800bdea:	4619      	mov	r1, r3
 800bdec:	4610      	mov	r0, r2
 800bdee:	f7fb fb5f 	bl	80074b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bdf2:	4b62      	ldr	r3, [pc, #392]	; (800bf7c <tcp_receive+0xf1c>)
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	4b5e      	ldr	r3, [pc, #376]	; (800bf74 <tcp_receive+0xf14>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	441a      	add	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be02:	6879      	ldr	r1, [r7, #4]
 800be04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be06:	440b      	add	r3, r1
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f340 8089 	ble.w	800bf22 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800be10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	899b      	ldrh	r3, [r3, #12]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fa f804 	bl	8005e28 <lwip_htons>
 800be20:	4603      	mov	r3, r0
 800be22:	b2db      	uxtb	r3, r3
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d022      	beq.n	800be72 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	899b      	ldrh	r3, [r3, #12]
 800be34:	b29b      	uxth	r3, r3
 800be36:	b21b      	sxth	r3, r3
 800be38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be3c:	b21c      	sxth	r4, r3
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	899b      	ldrh	r3, [r3, #12]
 800be46:	b29b      	uxth	r3, r3
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f9 ffed 	bl	8005e28 <lwip_htons>
 800be4e:	4603      	mov	r3, r0
 800be50:	b2db      	uxtb	r3, r3
 800be52:	b29b      	uxth	r3, r3
 800be54:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800be58:	b29b      	uxth	r3, r3
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7f9 ffe4 	bl	8005e28 <lwip_htons>
 800be60:	4603      	mov	r3, r0
 800be62:	b21b      	sxth	r3, r3
 800be64:	4323      	orrs	r3, r4
 800be66:	b21a      	sxth	r2, r3
 800be68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	b292      	uxth	r2, r2
 800be70:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be76:	b29a      	uxth	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7c:	4413      	add	r3, r2
 800be7e:	b299      	uxth	r1, r3
 800be80:	4b3c      	ldr	r3, [pc, #240]	; (800bf74 <tcp_receive+0xf14>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	b29a      	uxth	r2, r3
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	1a8a      	subs	r2, r1, r2
 800be8c:	b292      	uxth	r2, r2
 800be8e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800be90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	891b      	ldrh	r3, [r3, #8]
 800be9c:	4619      	mov	r1, r3
 800be9e:	4610      	mov	r0, r2
 800bea0:	f7fb fb06 	bl	80074b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	891c      	ldrh	r4, [r3, #8]
 800beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	899b      	ldrh	r3, [r3, #12]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7f9 ffb7 	bl	8005e28 <lwip_htons>
 800beba:	4603      	mov	r3, r0
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <tcp_receive+0xe6a>
 800bec6:	2301      	movs	r3, #1
 800bec8:	e000      	b.n	800becc <tcp_receive+0xe6c>
 800beca:	2300      	movs	r3, #0
 800becc:	4423      	add	r3, r4
 800bece:	b29a      	uxth	r2, r3
 800bed0:	4b2a      	ldr	r3, [pc, #168]	; (800bf7c <tcp_receive+0xf1c>)
 800bed2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bed4:	4b29      	ldr	r3, [pc, #164]	; (800bf7c <tcp_receive+0xf1c>)
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	461a      	mov	r2, r3
 800beda:	4b26      	ldr	r3, [pc, #152]	; (800bf74 <tcp_receive+0xf14>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	441a      	add	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee4:	6879      	ldr	r1, [r7, #4]
 800bee6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bee8:	440b      	add	r3, r1
 800beea:	429a      	cmp	r2, r3
 800beec:	d019      	beq.n	800bf22 <tcp_receive+0xec2>
 800beee:	4b24      	ldr	r3, [pc, #144]	; (800bf80 <tcp_receive+0xf20>)
 800bef0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bef4:	4923      	ldr	r1, [pc, #140]	; (800bf84 <tcp_receive+0xf24>)
 800bef6:	4824      	ldr	r0, [pc, #144]	; (800bf88 <tcp_receive+0xf28>)
 800bef8:	f007 fb48 	bl	801358c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800befc:	e011      	b.n	800bf22 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800befe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f47f aea4 	bne.w	800bc54 <tcp_receive+0xbf4>
 800bf0c:	e00a      	b.n	800bf24 <tcp_receive+0xec4>
                break;
 800bf0e:	bf00      	nop
 800bf10:	e008      	b.n	800bf24 <tcp_receive+0xec4>
                break;
 800bf12:	bf00      	nop
 800bf14:	e006      	b.n	800bf24 <tcp_receive+0xec4>
                  break;
 800bf16:	bf00      	nop
 800bf18:	e004      	b.n	800bf24 <tcp_receive+0xec4>
                  break;
 800bf1a:	bf00      	nop
 800bf1c:	e002      	b.n	800bf24 <tcp_receive+0xec4>
                  break;
 800bf1e:	bf00      	nop
 800bf20:	e000      	b.n	800bf24 <tcp_receive+0xec4>
                break;
 800bf22:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f001 fee9 	bl	800dcfc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bf2a:	e003      	b.n	800bf34 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 fee5 	bl	800dcfc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bf32:	e01a      	b.n	800bf6a <tcp_receive+0xf0a>
 800bf34:	e019      	b.n	800bf6a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bf36:	4b0f      	ldr	r3, [pc, #60]	; (800bf74 <tcp_receive+0xf14>)
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	db0a      	blt.n	800bf5a <tcp_receive+0xefa>
 800bf44:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <tcp_receive+0xf14>)
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf4c:	6879      	ldr	r1, [r7, #4]
 800bf4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf50:	440b      	add	r3, r1
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	3301      	adds	r3, #1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	dd07      	ble.n	800bf6a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	8b5b      	ldrh	r3, [r3, #26]
 800bf5e:	f043 0302 	orr.w	r3, r3, #2
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bf68:	e7ff      	b.n	800bf6a <tcp_receive+0xf0a>
 800bf6a:	bf00      	nop
 800bf6c:	3750      	adds	r7, #80	; 0x50
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bdb0      	pop	{r4, r5, r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200005b4 	.word	0x200005b4
 800bf78:	20000594 	.word	0x20000594
 800bf7c:	200005be 	.word	0x200005be
 800bf80:	08015d8c 	.word	0x08015d8c
 800bf84:	08016134 	.word	0x08016134
 800bf88:	08015dd8 	.word	0x08015dd8

0800bf8c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bf92:	4b15      	ldr	r3, [pc, #84]	; (800bfe8 <tcp_get_next_optbyte+0x5c>)
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	1c5a      	adds	r2, r3, #1
 800bf98:	b291      	uxth	r1, r2
 800bf9a:	4a13      	ldr	r2, [pc, #76]	; (800bfe8 <tcp_get_next_optbyte+0x5c>)
 800bf9c:	8011      	strh	r1, [r2, #0]
 800bf9e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bfa0:	4b12      	ldr	r3, [pc, #72]	; (800bfec <tcp_get_next_optbyte+0x60>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <tcp_get_next_optbyte+0x26>
 800bfa8:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <tcp_get_next_optbyte+0x64>)
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	88fa      	ldrh	r2, [r7, #6]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d208      	bcs.n	800bfc4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bfb2:	4b10      	ldr	r3, [pc, #64]	; (800bff4 <tcp_get_next_optbyte+0x68>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	3314      	adds	r3, #20
 800bfb8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bfba:	88fb      	ldrh	r3, [r7, #6]
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	e00b      	b.n	800bfdc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bfc4:	88fb      	ldrh	r3, [r7, #6]
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	4b09      	ldr	r3, [pc, #36]	; (800bff0 <tcp_get_next_optbyte+0x64>)
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bfd2:	4b06      	ldr	r3, [pc, #24]	; (800bfec <tcp_get_next_optbyte+0x60>)
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	797b      	ldrb	r3, [r7, #5]
 800bfd8:	4413      	add	r3, r2
 800bfda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	200005b0 	.word	0x200005b0
 800bfec:	200005ac 	.word	0x200005ac
 800bff0:	200005aa 	.word	0x200005aa
 800bff4:	200005a4 	.word	0x200005a4

0800bff8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d106      	bne.n	800c014 <tcp_parseopt+0x1c>
 800c006:	4b32      	ldr	r3, [pc, #200]	; (800c0d0 <tcp_parseopt+0xd8>)
 800c008:	f240 727d 	movw	r2, #1917	; 0x77d
 800c00c:	4931      	ldr	r1, [pc, #196]	; (800c0d4 <tcp_parseopt+0xdc>)
 800c00e:	4832      	ldr	r0, [pc, #200]	; (800c0d8 <tcp_parseopt+0xe0>)
 800c010:	f007 fabc 	bl	801358c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c014:	4b31      	ldr	r3, [pc, #196]	; (800c0dc <tcp_parseopt+0xe4>)
 800c016:	881b      	ldrh	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d055      	beq.n	800c0c8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c01c:	4b30      	ldr	r3, [pc, #192]	; (800c0e0 <tcp_parseopt+0xe8>)
 800c01e:	2200      	movs	r2, #0
 800c020:	801a      	strh	r2, [r3, #0]
 800c022:	e045      	b.n	800c0b0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c024:	f7ff ffb2 	bl	800bf8c <tcp_get_next_optbyte>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d006      	beq.n	800c040 <tcp_parseopt+0x48>
 800c032:	2b02      	cmp	r3, #2
 800c034:	dc2b      	bgt.n	800c08e <tcp_parseopt+0x96>
 800c036:	2b00      	cmp	r3, #0
 800c038:	d041      	beq.n	800c0be <tcp_parseopt+0xc6>
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d127      	bne.n	800c08e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c03e:	e037      	b.n	800c0b0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c040:	f7ff ffa4 	bl	800bf8c <tcp_get_next_optbyte>
 800c044:	4603      	mov	r3, r0
 800c046:	2b04      	cmp	r3, #4
 800c048:	d13b      	bne.n	800c0c2 <tcp_parseopt+0xca>
 800c04a:	4b25      	ldr	r3, [pc, #148]	; (800c0e0 <tcp_parseopt+0xe8>)
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	3301      	adds	r3, #1
 800c050:	4a22      	ldr	r2, [pc, #136]	; (800c0dc <tcp_parseopt+0xe4>)
 800c052:	8812      	ldrh	r2, [r2, #0]
 800c054:	4293      	cmp	r3, r2
 800c056:	da34      	bge.n	800c0c2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c058:	f7ff ff98 	bl	800bf8c <tcp_get_next_optbyte>
 800c05c:	4603      	mov	r3, r0
 800c05e:	b29b      	uxth	r3, r3
 800c060:	021b      	lsls	r3, r3, #8
 800c062:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c064:	f7ff ff92 	bl	800bf8c <tcp_get_next_optbyte>
 800c068:	4603      	mov	r3, r0
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	89bb      	ldrh	r3, [r7, #12]
 800c06e:	4313      	orrs	r3, r2
 800c070:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c072:	89bb      	ldrh	r3, [r7, #12]
 800c074:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c078:	d804      	bhi.n	800c084 <tcp_parseopt+0x8c>
 800c07a:	89bb      	ldrh	r3, [r7, #12]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d001      	beq.n	800c084 <tcp_parseopt+0x8c>
 800c080:	89ba      	ldrh	r2, [r7, #12]
 800c082:	e001      	b.n	800c088 <tcp_parseopt+0x90>
 800c084:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c08c:	e010      	b.n	800c0b0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c08e:	f7ff ff7d 	bl	800bf8c <tcp_get_next_optbyte>
 800c092:	4603      	mov	r3, r0
 800c094:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c096:	7afb      	ldrb	r3, [r7, #11]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d914      	bls.n	800c0c6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c09c:	7afb      	ldrb	r3, [r7, #11]
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <tcp_parseopt+0xe8>)
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	3b02      	subs	r3, #2
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	4b0c      	ldr	r3, [pc, #48]	; (800c0e0 <tcp_parseopt+0xe8>)
 800c0ae:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c0b0:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <tcp_parseopt+0xe8>)
 800c0b2:	881a      	ldrh	r2, [r3, #0]
 800c0b4:	4b09      	ldr	r3, [pc, #36]	; (800c0dc <tcp_parseopt+0xe4>)
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d3b3      	bcc.n	800c024 <tcp_parseopt+0x2c>
 800c0bc:	e004      	b.n	800c0c8 <tcp_parseopt+0xd0>
          return;
 800c0be:	bf00      	nop
 800c0c0:	e002      	b.n	800c0c8 <tcp_parseopt+0xd0>
            return;
 800c0c2:	bf00      	nop
 800c0c4:	e000      	b.n	800c0c8 <tcp_parseopt+0xd0>
            return;
 800c0c6:	bf00      	nop
      }
    }
  }
}
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	08015d8c 	.word	0x08015d8c
 800c0d4:	080161f0 	.word	0x080161f0
 800c0d8:	08015dd8 	.word	0x08015dd8
 800c0dc:	200005a8 	.word	0x200005a8
 800c0e0:	200005b0 	.word	0x200005b0

0800c0e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c0e8:	4b05      	ldr	r3, [pc, #20]	; (800c100 <tcp_trigger_input_pcb_close+0x1c>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	f043 0310 	orr.w	r3, r3, #16
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	4b03      	ldr	r3, [pc, #12]	; (800c100 <tcp_trigger_input_pcb_close+0x1c>)
 800c0f4:	701a      	strb	r2, [r3, #0]
}
 800c0f6:	bf00      	nop
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	200005c1 	.word	0x200005c1

0800c104 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00a      	beq.n	800c12c <tcp_route+0x28>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	7a1b      	ldrb	r3, [r3, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d006      	beq.n	800c12c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	7a1b      	ldrb	r3, [r3, #8]
 800c122:	4618      	mov	r0, r3
 800c124:	f7fb f82e 	bl	8007184 <netif_get_by_index>
 800c128:	4603      	mov	r3, r0
 800c12a:	e003      	b.n	800c134 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f005 fdcf 	bl	8011cd0 <ip4_route>
 800c132:	4603      	mov	r3, r0
  }
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c13c:	b590      	push	{r4, r7, lr}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	603b      	str	r3, [r7, #0]
 800c148:	4613      	mov	r3, r2
 800c14a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d105      	bne.n	800c15e <tcp_create_segment+0x22>
 800c152:	4b48      	ldr	r3, [pc, #288]	; (800c274 <tcp_create_segment+0x138>)
 800c154:	22a3      	movs	r2, #163	; 0xa3
 800c156:	4948      	ldr	r1, [pc, #288]	; (800c278 <tcp_create_segment+0x13c>)
 800c158:	4848      	ldr	r0, [pc, #288]	; (800c27c <tcp_create_segment+0x140>)
 800c15a:	f007 fa17 	bl	801358c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d105      	bne.n	800c170 <tcp_create_segment+0x34>
 800c164:	4b43      	ldr	r3, [pc, #268]	; (800c274 <tcp_create_segment+0x138>)
 800c166:	22a4      	movs	r2, #164	; 0xa4
 800c168:	4945      	ldr	r1, [pc, #276]	; (800c280 <tcp_create_segment+0x144>)
 800c16a:	4844      	ldr	r0, [pc, #272]	; (800c27c <tcp_create_segment+0x140>)
 800c16c:	f007 fa0e 	bl	801358c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c170:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	b2db      	uxtb	r3, r3
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c17e:	2003      	movs	r0, #3
 800c180:	f7fa fd04 	bl	8006b8c <memp_malloc>
 800c184:	6138      	str	r0, [r7, #16]
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d104      	bne.n	800c196 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c18c:	68b8      	ldr	r0, [r7, #8]
 800c18e:	f7fb fb15 	bl	80077bc <pbuf_free>
    return NULL;
 800c192:	2300      	movs	r3, #0
 800c194:	e069      	b.n	800c26a <tcp_create_segment+0x12e>
  }
  seg->flags = optflags;
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c19c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	891a      	ldrh	r2, [r3, #8]
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d205      	bcs.n	800c1c2 <tcp_create_segment+0x86>
 800c1b6:	4b2f      	ldr	r3, [pc, #188]	; (800c274 <tcp_create_segment+0x138>)
 800c1b8:	22b0      	movs	r2, #176	; 0xb0
 800c1ba:	4932      	ldr	r1, [pc, #200]	; (800c284 <tcp_create_segment+0x148>)
 800c1bc:	482f      	ldr	r0, [pc, #188]	; (800c27c <tcp_create_segment+0x140>)
 800c1be:	f007 f9e5 	bl	801358c <iprintf>
  seg->len = p->tot_len - optlen;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	891a      	ldrh	r2, [r3, #8]
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c1d2:	2114      	movs	r1, #20
 800c1d4:	68b8      	ldr	r0, [r7, #8]
 800c1d6:	f7fb fa5b 	bl	8007690 <pbuf_add_header>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00c      	beq.n	800c1fa <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800c1e0:	4b29      	ldr	r3, [pc, #164]	; (800c288 <tcp_create_segment+0x14c>)
 800c1e2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	4b27      	ldr	r3, [pc, #156]	; (800c288 <tcp_create_segment+0x14c>)
 800c1ec:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800c1f0:	6938      	ldr	r0, [r7, #16]
 800c1f2:	f7fc ff28 	bl	8009046 <tcp_seg_free>
    return NULL;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	e037      	b.n	800c26a <tcp_create_segment+0x12e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	8ada      	ldrh	r2, [r3, #22]
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	68dc      	ldr	r4, [r3, #12]
 800c20c:	4610      	mov	r0, r2
 800c20e:	f7f9 fe0b 	bl	8005e28 <lwip_htons>
 800c212:	4603      	mov	r3, r0
 800c214:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	8b1a      	ldrh	r2, [r3, #24]
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	68dc      	ldr	r4, [r3, #12]
 800c21e:	4610      	mov	r0, r2
 800c220:	f7f9 fe02 	bl	8005e28 <lwip_htons>
 800c224:	4603      	mov	r3, r0
 800c226:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	68dc      	ldr	r4, [r3, #12]
 800c22c:	6838      	ldr	r0, [r7, #0]
 800c22e:	f7f9 fe10 	bl	8005e52 <lwip_htonl>
 800c232:	4603      	mov	r3, r0
 800c234:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c236:	7dfb      	ldrb	r3, [r7, #23]
 800c238:	089b      	lsrs	r3, r3, #2
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	3305      	adds	r3, #5
 800c240:	b29b      	uxth	r3, r3
 800c242:	031b      	lsls	r3, r3, #12
 800c244:	b29a      	uxth	r2, r3
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	b29b      	uxth	r3, r3
 800c24a:	4313      	orrs	r3, r2
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	68dc      	ldr	r4, [r3, #12]
 800c252:	4610      	mov	r0, r2
 800c254:	f7f9 fde8 	bl	8005e28 <lwip_htons>
 800c258:	4603      	mov	r3, r0
 800c25a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	749a      	strb	r2, [r3, #18]
 800c264:	2200      	movs	r2, #0
 800c266:	74da      	strb	r2, [r3, #19]
  return seg;
 800c268:	693b      	ldr	r3, [r7, #16]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	371c      	adds	r7, #28
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd90      	pop	{r4, r7, pc}
 800c272:	bf00      	nop
 800c274:	0801620c 	.word	0x0801620c
 800c278:	08016240 	.word	0x08016240
 800c27c:	08016260 	.word	0x08016260
 800c280:	08016288 	.word	0x08016288
 800c284:	080162ac 	.word	0x080162ac
 800c288:	20007a48 	.word	0x20007a48

0800c28c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	607b      	str	r3, [r7, #4]
 800c294:	4603      	mov	r3, r0
 800c296:	73fb      	strb	r3, [r7, #15]
 800c298:	460b      	mov	r3, r1
 800c29a:	81bb      	strh	r3, [r7, #12]
 800c29c:	4613      	mov	r3, r2
 800c29e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c2a0:	89bb      	ldrh	r3, [r7, #12]
 800c2a2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d105      	bne.n	800c2b6 <tcp_pbuf_prealloc+0x2a>
 800c2aa:	4b2f      	ldr	r3, [pc, #188]	; (800c368 <tcp_pbuf_prealloc+0xdc>)
 800c2ac:	22e8      	movs	r2, #232	; 0xe8
 800c2ae:	492f      	ldr	r1, [pc, #188]	; (800c36c <tcp_pbuf_prealloc+0xe0>)
 800c2b0:	482f      	ldr	r0, [pc, #188]	; (800c370 <tcp_pbuf_prealloc+0xe4>)
 800c2b2:	f007 f96b 	bl	801358c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c2b6:	6a3b      	ldr	r3, [r7, #32]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d105      	bne.n	800c2c8 <tcp_pbuf_prealloc+0x3c>
 800c2bc:	4b2a      	ldr	r3, [pc, #168]	; (800c368 <tcp_pbuf_prealloc+0xdc>)
 800c2be:	22e9      	movs	r2, #233	; 0xe9
 800c2c0:	492c      	ldr	r1, [pc, #176]	; (800c374 <tcp_pbuf_prealloc+0xe8>)
 800c2c2:	482b      	ldr	r0, [pc, #172]	; (800c370 <tcp_pbuf_prealloc+0xe4>)
 800c2c4:	f007 f962 	bl	801358c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c2c8:	89ba      	ldrh	r2, [r7, #12]
 800c2ca:	897b      	ldrh	r3, [r7, #10]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d21f      	bcs.n	800c310 <tcp_pbuf_prealloc+0x84>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c2d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c2d4:	f003 0302 	and.w	r3, r3, #2
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d111      	bne.n	800c300 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	8b5b      	ldrh	r3, [r3, #26]
 800c2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d113      	bne.n	800c310 <tcp_pbuf_prealloc+0x84>
        (!(pcb->flags & TF_NODELAY) &&
 800c2e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d007      	beq.n	800c300 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d103      	bne.n	800c300 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d007      	beq.n	800c310 <tcp_pbuf_prealloc+0x84>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c300:	89bb      	ldrh	r3, [r7, #12]
 800c302:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800c306:	897b      	ldrh	r3, [r7, #10]
 800c308:	4293      	cmp	r3, r2
 800c30a:	bf28      	it	cs
 800c30c:	4613      	movcs	r3, r2
 800c30e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c310:	8af9      	ldrh	r1, [r7, #22]
 800c312:	7bfb      	ldrb	r3, [r7, #15]
 800c314:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fa ffaf 	bl	800727c <pbuf_alloc>
 800c31e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <tcp_pbuf_prealloc+0x9e>
    return NULL;
 800c326:	2300      	movs	r3, #0
 800c328:	e019      	b.n	800c35e <tcp_pbuf_prealloc+0xd2>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d006      	beq.n	800c340 <tcp_pbuf_prealloc+0xb4>
 800c332:	4b0d      	ldr	r3, [pc, #52]	; (800c368 <tcp_pbuf_prealloc+0xdc>)
 800c334:	f240 120b 	movw	r2, #267	; 0x10b
 800c338:	490f      	ldr	r1, [pc, #60]	; (800c378 <tcp_pbuf_prealloc+0xec>)
 800c33a:	480d      	ldr	r0, [pc, #52]	; (800c370 <tcp_pbuf_prealloc+0xe4>)
 800c33c:	f007 f926 	bl	801358c <iprintf>
  *oversize = p->len - length;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	895a      	ldrh	r2, [r3, #10]
 800c344:	89bb      	ldrh	r3, [r7, #12]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	b29a      	uxth	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	89ba      	ldrh	r2, [r7, #12]
 800c352:	811a      	strh	r2, [r3, #8]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	891a      	ldrh	r2, [r3, #8]
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	815a      	strh	r2, [r3, #10]
  return p;
 800c35c:	693b      	ldr	r3, [r7, #16]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	0801620c 	.word	0x0801620c
 800c36c:	080162c4 	.word	0x080162c4
 800c370:	08016260 	.word	0x08016260
 800c374:	080162e8 	.word	0x080162e8
 800c378:	08016308 	.word	0x08016308

0800c37c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	460b      	mov	r3, r1
 800c386:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d106      	bne.n	800c39c <tcp_write_checks+0x20>
 800c38e:	4b37      	ldr	r3, [pc, #220]	; (800c46c <tcp_write_checks+0xf0>)
 800c390:	f240 1233 	movw	r2, #307	; 0x133
 800c394:	4936      	ldr	r1, [pc, #216]	; (800c470 <tcp_write_checks+0xf4>)
 800c396:	4837      	ldr	r0, [pc, #220]	; (800c474 <tcp_write_checks+0xf8>)
 800c398:	f007 f8f8 	bl	801358c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	7d1b      	ldrb	r3, [r3, #20]
 800c3a0:	2b04      	cmp	r3, #4
 800c3a2:	d00e      	beq.n	800c3c2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c3a8:	2b07      	cmp	r3, #7
 800c3aa:	d00a      	beq.n	800c3c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d006      	beq.n	800c3c2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c3b8:	2b03      	cmp	r3, #3
 800c3ba:	d002      	beq.n	800c3c2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c3bc:	f06f 030a 	mvn.w	r3, #10
 800c3c0:	e050      	b.n	800c464 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 800c3c2:	887b      	ldrh	r3, [r7, #2]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <tcp_write_checks+0x50>
    return ERR_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	e04b      	b.n	800c464 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c3d2:	887a      	ldrh	r2, [r7, #2]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d909      	bls.n	800c3ec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	8b5b      	ldrh	r3, [r3, #26]
 800c3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ea:	e03b      	b.n	800c464 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3f2:	2b07      	cmp	r3, #7
 800c3f4:	d911      	bls.n	800c41a <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 800c3f6:	4b20      	ldr	r3, [pc, #128]	; (800c478 <tcp_write_checks+0xfc>)
 800c3f8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	4b1d      	ldr	r3, [pc, #116]	; (800c478 <tcp_write_checks+0xfc>)
 800c402:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	8b5b      	ldrh	r3, [r3, #26]
 800c40a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40e:	b29a      	uxth	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c414:	f04f 33ff 	mov.w	r3, #4294967295
 800c418:	e024      	b.n	800c464 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00f      	beq.n	800c444 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d11a      	bne.n	800c462 <tcp_write_checks+0xe6>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c430:	2b00      	cmp	r3, #0
 800c432:	d116      	bne.n	800c462 <tcp_write_checks+0xe6>
 800c434:	4b0d      	ldr	r3, [pc, #52]	; (800c46c <tcp_write_checks+0xf0>)
 800c436:	f240 1255 	movw	r2, #341	; 0x155
 800c43a:	4910      	ldr	r1, [pc, #64]	; (800c47c <tcp_write_checks+0x100>)
 800c43c:	480d      	ldr	r0, [pc, #52]	; (800c474 <tcp_write_checks+0xf8>)
 800c43e:	f007 f8a5 	bl	801358c <iprintf>
 800c442:	e00e      	b.n	800c462 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d103      	bne.n	800c454 <tcp_write_checks+0xd8>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c450:	2b00      	cmp	r3, #0
 800c452:	d006      	beq.n	800c462 <tcp_write_checks+0xe6>
 800c454:	4b05      	ldr	r3, [pc, #20]	; (800c46c <tcp_write_checks+0xf0>)
 800c456:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c45a:	4909      	ldr	r1, [pc, #36]	; (800c480 <tcp_write_checks+0x104>)
 800c45c:	4805      	ldr	r0, [pc, #20]	; (800c474 <tcp_write_checks+0xf8>)
 800c45e:	f007 f895 	bl	801358c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	0801620c 	.word	0x0801620c
 800c470:	0801631c 	.word	0x0801631c
 800c474:	08016260 	.word	0x08016260
 800c478:	20007a48 	.word	0x20007a48
 800c47c:	0801633c 	.word	0x0801633c
 800c480:	08016378 	.word	0x08016378

0800c484 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c484:	b590      	push	{r4, r7, lr}
 800c486:	b09b      	sub	sp, #108	; 0x6c
 800c488:	af04      	add	r7, sp, #16
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	4611      	mov	r1, r2
 800c490:	461a      	mov	r2, r3
 800c492:	460b      	mov	r3, r1
 800c494:	80fb      	strh	r3, [r7, #6]
 800c496:	4613      	mov	r3, r2
 800c498:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	653b      	str	r3, [r7, #80]	; 0x50
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d109      	bne.n	800c4e0 <tcp_write+0x5c>
 800c4cc:	4ba4      	ldr	r3, [pc, #656]	; (800c760 <tcp_write+0x2dc>)
 800c4ce:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c4d2:	49a4      	ldr	r1, [pc, #656]	; (800c764 <tcp_write+0x2e0>)
 800c4d4:	48a4      	ldr	r0, [pc, #656]	; (800c768 <tcp_write+0x2e4>)
 800c4d6:	f007 f859 	bl	801358c <iprintf>
 800c4da:	f06f 030f 	mvn.w	r3, #15
 800c4de:	e332      	b.n	800cb46 <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c4e6:	085b      	lsrs	r3, r3, #1
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	bf28      	it	cs
 800c4f2:	4613      	movcs	r3, r2
 800c4f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d102      	bne.n	800c502 <tcp_write+0x7e>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c500:	e000      	b.n	800c504 <tcp_write+0x80>
 800c502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c504:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d109      	bne.n	800c520 <tcp_write+0x9c>
 800c50c:	4b94      	ldr	r3, [pc, #592]	; (800c760 <tcp_write+0x2dc>)
 800c50e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c512:	4996      	ldr	r1, [pc, #600]	; (800c76c <tcp_write+0x2e8>)
 800c514:	4894      	ldr	r0, [pc, #592]	; (800c768 <tcp_write+0x2e4>)
 800c516:	f007 f839 	bl	801358c <iprintf>
 800c51a:	f06f 030f 	mvn.w	r3, #15
 800c51e:	e312      	b.n	800cb46 <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c520:	88fb      	ldrh	r3, [r7, #6]
 800c522:	4619      	mov	r1, r3
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f7ff ff29 	bl	800c37c <tcp_write_checks>
 800c52a:	4603      	mov	r3, r0
 800c52c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c530:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <tcp_write+0xba>
    return err;
 800c538:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c53c:	e303      	b.n	800cb46 <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c544:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c548:	2300      	movs	r3, #0
 800c54a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c552:	2b00      	cmp	r3, #0
 800c554:	f000 80f6 	beq.w	800c744 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c55c:	653b      	str	r3, [r7, #80]	; 0x50
 800c55e:	e002      	b.n	800c566 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1f8      	bne.n	800c560 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c570:	7a9b      	ldrb	r3, [r3, #10]
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	b29b      	uxth	r3, r3
 800c576:	f003 0304 	and.w	r3, r3, #4
 800c57a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c57c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c580:	891b      	ldrh	r3, [r3, #8]
 800c582:	4619      	mov	r1, r3
 800c584:	8c3b      	ldrh	r3, [r7, #32]
 800c586:	440b      	add	r3, r1
 800c588:	429a      	cmp	r2, r3
 800c58a:	da06      	bge.n	800c59a <tcp_write+0x116>
 800c58c:	4b74      	ldr	r3, [pc, #464]	; (800c760 <tcp_write+0x2dc>)
 800c58e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c592:	4977      	ldr	r1, [pc, #476]	; (800c770 <tcp_write+0x2ec>)
 800c594:	4874      	ldr	r0, [pc, #464]	; (800c768 <tcp_write+0x2e4>)
 800c596:	f006 fff9 	bl	801358c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c59c:	891a      	ldrh	r2, [r3, #8]
 800c59e:	8c3b      	ldrh	r3, [r7, #32]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5a6:	1ad3      	subs	r3, r2, r3
 800c5a8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c5b0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c5b2:	8a7b      	ldrh	r3, [r7, #18]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d026      	beq.n	800c606 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c5b8:	8a7b      	ldrh	r3, [r7, #18]
 800c5ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d206      	bcs.n	800c5ce <tcp_write+0x14a>
 800c5c0:	4b67      	ldr	r3, [pc, #412]	; (800c760 <tcp_write+0x2dc>)
 800c5c2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c5c6:	496b      	ldr	r1, [pc, #428]	; (800c774 <tcp_write+0x2f0>)
 800c5c8:	4867      	ldr	r0, [pc, #412]	; (800c768 <tcp_write+0x2e4>)
 800c5ca:	f006 ffdf 	bl	801358c <iprintf>
      seg = last_unsent;
 800c5ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c5d2:	8a7b      	ldrh	r3, [r7, #18]
 800c5d4:	88fa      	ldrh	r2, [r7, #6]
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	bf28      	it	cs
 800c5da:	4613      	movcs	r3, r2
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	bf28      	it	cs
 800c5e4:	4613      	movcs	r3, r2
 800c5e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c5e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c5ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c5f4:	8a7a      	ldrh	r2, [r7, #18]
 800c5f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c5fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c600:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c606:	8a7b      	ldrh	r3, [r7, #18]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00b      	beq.n	800c624 <tcp_write+0x1a0>
 800c60c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c610:	88fb      	ldrh	r3, [r7, #6]
 800c612:	429a      	cmp	r2, r3
 800c614:	d006      	beq.n	800c624 <tcp_write+0x1a0>
 800c616:	4b52      	ldr	r3, [pc, #328]	; (800c760 <tcp_write+0x2dc>)
 800c618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c61c:	4956      	ldr	r1, [pc, #344]	; (800c778 <tcp_write+0x2f4>)
 800c61e:	4852      	ldr	r0, [pc, #328]	; (800c768 <tcp_write+0x2e4>)
 800c620:	f006 ffb4 	bl	801358c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c624:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c628:	88fb      	ldrh	r3, [r7, #6]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	f080 8167 	bcs.w	800c8fe <tcp_write+0x47a>
 800c630:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 8163 	beq.w	800c8fe <tcp_write+0x47a>
 800c638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c63a:	891b      	ldrh	r3, [r3, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 815e 	beq.w	800c8fe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c642:	88fa      	ldrh	r2, [r7, #6]
 800c644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c648:	1ad2      	subs	r2, r2, r3
 800c64a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c64c:	4293      	cmp	r3, r2
 800c64e:	bfa8      	it	ge
 800c650:	4613      	movge	r3, r2
 800c652:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c656:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c658:	797b      	ldrb	r3, [r7, #5]
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d027      	beq.n	800c6b2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c662:	f107 0012 	add.w	r0, r7, #18
 800c666:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c668:	8bf9      	ldrh	r1, [r7, #30]
 800c66a:	2301      	movs	r3, #1
 800c66c:	9302      	str	r3, [sp, #8]
 800c66e:	797b      	ldrb	r3, [r7, #5]
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	4603      	mov	r3, r0
 800c678:	2000      	movs	r0, #0
 800c67a:	f7ff fe07 	bl	800c28c <tcp_pbuf_prealloc>
 800c67e:	6578      	str	r0, [r7, #84]	; 0x54
 800c680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c682:	2b00      	cmp	r3, #0
 800c684:	f000 8225 	beq.w	800cad2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c68a:	6858      	ldr	r0, [r3, #4]
 800c68c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	4413      	add	r3, r2
 800c694:	8bfa      	ldrh	r2, [r7, #30]
 800c696:	4619      	mov	r1, r3
 800c698:	f006 ff48 	bl	801352c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c69c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c69e:	f7fb f915 	bl	80078cc <pbuf_clen>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c6aa:	4413      	add	r3, r2
 800c6ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c6b0:	e041      	b.n	800c736 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c6b8:	e002      	b.n	800c6c0 <tcp_write+0x23c>
 800c6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	637b      	str	r3, [r7, #52]	; 0x34
 800c6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1f8      	bne.n	800c6ba <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ca:	7b1b      	ldrb	r3, [r3, #12]
 800c6cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d115      	bne.n	800c700 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6da:	8952      	ldrh	r2, [r2, #10]
 800c6dc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d10d      	bne.n	800c700 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c6e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d006      	beq.n	800c6fa <tcp_write+0x276>
 800c6ec:	4b1c      	ldr	r3, [pc, #112]	; (800c760 <tcp_write+0x2dc>)
 800c6ee:	f240 2231 	movw	r2, #561	; 0x231
 800c6f2:	4922      	ldr	r1, [pc, #136]	; (800c77c <tcp_write+0x2f8>)
 800c6f4:	481c      	ldr	r0, [pc, #112]	; (800c768 <tcp_write+0x2e4>)
 800c6f6:	f006 ff49 	bl	801358c <iprintf>
          extendlen = seglen;
 800c6fa:	8bfb      	ldrh	r3, [r7, #30]
 800c6fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c6fe:	e01a      	b.n	800c736 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c700:	8bfb      	ldrh	r3, [r7, #30]
 800c702:	2201      	movs	r2, #1
 800c704:	4619      	mov	r1, r3
 800c706:	2000      	movs	r0, #0
 800c708:	f7fa fdb8 	bl	800727c <pbuf_alloc>
 800c70c:	6578      	str	r0, [r7, #84]	; 0x54
 800c70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 81e0 	beq.w	800cad6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c716:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	441a      	add	r2, r3
 800c71e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c720:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c722:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c724:	f7fb f8d2 	bl	80078cc <pbuf_clen>
 800c728:	4603      	mov	r3, r0
 800c72a:	461a      	mov	r2, r3
 800c72c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c730:	4413      	add	r3, r2
 800c732:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c736:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c73a:	8bfb      	ldrh	r3, [r7, #30]
 800c73c:	4413      	add	r3, r2
 800c73e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c742:	e0dc      	b.n	800c8fe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	f000 80d7 	beq.w	800c8fe <tcp_write+0x47a>
 800c750:	4b03      	ldr	r3, [pc, #12]	; (800c760 <tcp_write+0x2dc>)
 800c752:	f240 224a 	movw	r2, #586	; 0x24a
 800c756:	490a      	ldr	r1, [pc, #40]	; (800c780 <tcp_write+0x2fc>)
 800c758:	4803      	ldr	r0, [pc, #12]	; (800c768 <tcp_write+0x2e4>)
 800c75a:	f006 ff17 	bl	801358c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c75e:	e0ce      	b.n	800c8fe <tcp_write+0x47a>
 800c760:	0801620c 	.word	0x0801620c
 800c764:	080163ac 	.word	0x080163ac
 800c768:	08016260 	.word	0x08016260
 800c76c:	080163c4 	.word	0x080163c4
 800c770:	080163f8 	.word	0x080163f8
 800c774:	08016410 	.word	0x08016410
 800c778:	08016430 	.word	0x08016430
 800c77c:	08016450 	.word	0x08016450
 800c780:	0801647c 	.word	0x0801647c
    struct pbuf *p;
    u16_t left = len - pos;
 800c784:	88fa      	ldrh	r2, [r7, #6]
 800c786:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c78e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c792:	b29b      	uxth	r3, r3
 800c794:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c79a:	8b7a      	ldrh	r2, [r7, #26]
 800c79c:	8bbb      	ldrh	r3, [r7, #28]
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	bf28      	it	cs
 800c7a2:	4613      	movcs	r3, r2
 800c7a4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c7a6:	797b      	ldrb	r3, [r7, #5]
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d036      	beq.n	800c81e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c7b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	8b3b      	ldrh	r3, [r7, #24]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	b299      	uxth	r1, r3
 800c7bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	bf0c      	ite	eq
 800c7c2:	2301      	moveq	r3, #1
 800c7c4:	2300      	movne	r3, #0
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	f107 0012 	add.w	r0, r7, #18
 800c7cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c7ce:	9302      	str	r3, [sp, #8]
 800c7d0:	797b      	ldrb	r3, [r7, #5]
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2036      	movs	r0, #54	; 0x36
 800c7dc:	f7ff fd56 	bl	800c28c <tcp_pbuf_prealloc>
 800c7e0:	6338      	str	r0, [r7, #48]	; 0x30
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8178 	beq.w	800cada <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	895b      	ldrh	r3, [r3, #10]
 800c7ee:	8b3a      	ldrh	r2, [r7, #24]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d906      	bls.n	800c802 <tcp_write+0x37e>
 800c7f4:	4b8c      	ldr	r3, [pc, #560]	; (800ca28 <tcp_write+0x5a4>)
 800c7f6:	f240 2266 	movw	r2, #614	; 0x266
 800c7fa:	498c      	ldr	r1, [pc, #560]	; (800ca2c <tcp_write+0x5a8>)
 800c7fc:	488c      	ldr	r0, [pc, #560]	; (800ca30 <tcp_write+0x5ac>)
 800c7fe:	f006 fec5 	bl	801358c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c804:	685a      	ldr	r2, [r3, #4]
 800c806:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c80a:	18d0      	adds	r0, r2, r3
 800c80c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	4413      	add	r3, r2
 800c814:	8b3a      	ldrh	r2, [r7, #24]
 800c816:	4619      	mov	r1, r3
 800c818:	f006 fe88 	bl	801352c <memcpy>
 800c81c:	e02f      	b.n	800c87e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c81e:	8a7b      	ldrh	r3, [r7, #18]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d006      	beq.n	800c832 <tcp_write+0x3ae>
 800c824:	4b80      	ldr	r3, [pc, #512]	; (800ca28 <tcp_write+0x5a4>)
 800c826:	f240 2271 	movw	r2, #625	; 0x271
 800c82a:	4982      	ldr	r1, [pc, #520]	; (800ca34 <tcp_write+0x5b0>)
 800c82c:	4880      	ldr	r0, [pc, #512]	; (800ca30 <tcp_write+0x5ac>)
 800c82e:	f006 fead 	bl	801358c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c832:	8b3b      	ldrh	r3, [r7, #24]
 800c834:	2201      	movs	r2, #1
 800c836:	4619      	mov	r1, r3
 800c838:	2036      	movs	r0, #54	; 0x36
 800c83a:	f7fa fd1f 	bl	800727c <pbuf_alloc>
 800c83e:	6178      	str	r0, [r7, #20]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	f000 814b 	beq.w	800cade <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c848:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	441a      	add	r2, r3
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c854:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c858:	b29b      	uxth	r3, r3
 800c85a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c85e:	4619      	mov	r1, r3
 800c860:	2036      	movs	r0, #54	; 0x36
 800c862:	f7fa fd0b 	bl	800727c <pbuf_alloc>
 800c866:	6338      	str	r0, [r7, #48]	; 0x30
 800c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d103      	bne.n	800c876 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c86e:	6978      	ldr	r0, [r7, #20]
 800c870:	f7fa ffa4 	bl	80077bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c874:	e136      	b.n	800cae4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c876:	6979      	ldr	r1, [r7, #20]
 800c878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c87a:	f7fb f861 	bl	8007940 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c87e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c880:	f7fb f824 	bl	80078cc <pbuf_clen>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c88c:	4413      	add	r3, r2
 800c88e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c892:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c896:	2b08      	cmp	r3, #8
 800c898:	d903      	bls.n	800c8a2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c89a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c89c:	f7fa ff8e 	bl	80077bc <pbuf_free>
      goto memerr;
 800c8a0:	e120      	b.n	800cae4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c8a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8aa:	441a      	add	r2, r3
 800c8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f7ff fc3f 	bl	800c13c <tcp_create_segment>
 800c8be:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c8c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 810d 	beq.w	800cae2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c8c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <tcp_write+0x450>
      queue = seg;
 800c8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d0:	647b      	str	r3, [r7, #68]	; 0x44
 800c8d2:	e00c      	b.n	800c8ee <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <tcp_write+0x464>
 800c8da:	4b53      	ldr	r3, [pc, #332]	; (800ca28 <tcp_write+0x5a4>)
 800c8dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c8e0:	4955      	ldr	r1, [pc, #340]	; (800ca38 <tcp_write+0x5b4>)
 800c8e2:	4853      	ldr	r0, [pc, #332]	; (800ca30 <tcp_write+0x5ac>)
 800c8e4:	f006 fe52 	bl	801358c <iprintf>
      prev_seg->next = seg;
 800c8e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8ec:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8f0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c8f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c8f6:	8b3b      	ldrh	r3, [r7, #24]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c8fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c902:	88fb      	ldrh	r3, [r7, #6]
 800c904:	429a      	cmp	r2, r3
 800c906:	f4ff af3d 	bcc.w	800c784 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c90a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d02c      	beq.n	800c96a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c916:	e01e      	b.n	800c956 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	891a      	ldrh	r2, [r3, #8]
 800c91c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c91e:	4413      	add	r3, r2
 800c920:	b29a      	uxth	r2, r3
 800c922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c924:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d110      	bne.n	800c950 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c934:	8952      	ldrh	r2, [r2, #10]
 800c936:	4413      	add	r3, r2
 800c938:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c93a:	68b9      	ldr	r1, [r7, #8]
 800c93c:	4618      	mov	r0, r3
 800c93e:	f006 fdf5 	bl	801352c <memcpy>
        p->len += oversize_used;
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	895a      	ldrh	r2, [r3, #10]
 800c946:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c948:	4413      	add	r3, r2
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1dd      	bne.n	800c918 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c95c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c95e:	891a      	ldrh	r2, [r3, #8]
 800c960:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c962:	4413      	add	r3, r2
 800c964:	b29a      	uxth	r2, r3
 800c966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c968:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c96a:	8a7a      	ldrh	r2, [r7, #18]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c974:	2b00      	cmp	r3, #0
 800c976:	d018      	beq.n	800c9aa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d106      	bne.n	800c98c <tcp_write+0x508>
 800c97e:	4b2a      	ldr	r3, [pc, #168]	; (800ca28 <tcp_write+0x5a4>)
 800c980:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c984:	492d      	ldr	r1, [pc, #180]	; (800ca3c <tcp_write+0x5b8>)
 800c986:	482a      	ldr	r0, [pc, #168]	; (800ca30 <tcp_write+0x5ac>)
 800c988:	f006 fe00 	bl	801358c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c992:	4618      	mov	r0, r3
 800c994:	f7fa ffd4 	bl	8007940 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c99a:	891a      	ldrh	r2, [r3, #8]
 800c99c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c99e:	891b      	ldrh	r3, [r3, #8]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a6:	811a      	strh	r2, [r3, #8]
 800c9a8:	e037      	b.n	800ca1a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c9aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d034      	beq.n	800ca1a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d003      	beq.n	800c9be <tcp_write+0x53a>
 800c9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d106      	bne.n	800c9cc <tcp_write+0x548>
 800c9be:	4b1a      	ldr	r3, [pc, #104]	; (800ca28 <tcp_write+0x5a4>)
 800c9c0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c9c4:	491e      	ldr	r1, [pc, #120]	; (800ca40 <tcp_write+0x5bc>)
 800c9c6:	481a      	ldr	r0, [pc, #104]	; (800ca30 <tcp_write+0x5ac>)
 800c9c8:	f006 fde0 	bl	801358c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c9cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9d2:	e009      	b.n	800c9e8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	891a      	ldrh	r2, [r3, #8]
 800c9d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c9da:	4413      	add	r3, r2
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1f1      	bne.n	800c9d4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	891a      	ldrh	r2, [r3, #8]
 800c9f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c9f6:	4413      	add	r3, r2
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	895a      	ldrh	r2, [r3, #10]
 800ca02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca04:	4413      	add	r3, r2
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ca0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca0e:	891a      	ldrh	r2, [r3, #8]
 800ca10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca12:	4413      	add	r3, r2
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca18:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ca1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d111      	bne.n	800ca44 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca24:	66da      	str	r2, [r3, #108]	; 0x6c
 800ca26:	e010      	b.n	800ca4a <tcp_write+0x5c6>
 800ca28:	0801620c 	.word	0x0801620c
 800ca2c:	080164ac 	.word	0x080164ac
 800ca30:	08016260 	.word	0x08016260
 800ca34:	080164ec 	.word	0x080164ec
 800ca38:	080164fc 	.word	0x080164fc
 800ca3c:	08016510 	.word	0x08016510
 800ca40:	08016548 	.word	0x08016548
  } else {
    last_unsent->next = queue;
 800ca44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca48:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca4e:	88fb      	ldrh	r3, [r7, #6]
 800ca50:	441a      	add	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ca5c:	88fb      	ldrh	r3, [r7, #6]
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	b29a      	uxth	r2, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ca6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00e      	beq.n	800ca9a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d10a      	bne.n	800ca9a <tcp_write+0x616>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d106      	bne.n	800ca9a <tcp_write+0x616>
 800ca8c:	4b30      	ldr	r3, [pc, #192]	; (800cb50 <tcp_write+0x6cc>)
 800ca8e:	f240 3212 	movw	r2, #786	; 0x312
 800ca92:	4930      	ldr	r1, [pc, #192]	; (800cb54 <tcp_write+0x6d0>)
 800ca94:	4830      	ldr	r0, [pc, #192]	; (800cb58 <tcp_write+0x6d4>)
 800ca96:	f006 fd79 	bl	801358c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ca9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d016      	beq.n	800cace <tcp_write+0x64a>
 800caa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d012      	beq.n	800cace <tcp_write+0x64a>
 800caa8:	797b      	ldrb	r3, [r7, #5]
 800caaa:	f003 0302 	and.w	r3, r3, #2
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10d      	bne.n	800cace <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800cab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	899b      	ldrh	r3, [r3, #12]
 800cab8:	b29c      	uxth	r4, r3
 800caba:	2008      	movs	r0, #8
 800cabc:	f7f9 f9b4 	bl	8005e28 <lwip_htons>
 800cac0:	4603      	mov	r3, r0
 800cac2:	461a      	mov	r2, r3
 800cac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	4322      	orrs	r2, r4
 800caca:	b292      	uxth	r2, r2
 800cacc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	e039      	b.n	800cb46 <tcp_write+0x6c2>
          goto memerr;
 800cad2:	bf00      	nop
 800cad4:	e006      	b.n	800cae4 <tcp_write+0x660>
            goto memerr;
 800cad6:	bf00      	nop
 800cad8:	e004      	b.n	800cae4 <tcp_write+0x660>
        goto memerr;
 800cada:	bf00      	nop
 800cadc:	e002      	b.n	800cae4 <tcp_write+0x660>
        goto memerr;
 800cade:	bf00      	nop
 800cae0:	e000      	b.n	800cae4 <tcp_write+0x660>
      goto memerr;
 800cae2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	8b5b      	ldrh	r3, [r3, #26]
 800cae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caec:	b29a      	uxth	r2, r3
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 800caf2:	4b1a      	ldr	r3, [pc, #104]	; (800cb5c <tcp_write+0x6d8>)
 800caf4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800caf8:	3301      	adds	r3, #1
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	4b17      	ldr	r3, [pc, #92]	; (800cb5c <tcp_write+0x6d8>)
 800cafe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  if (concat_p != NULL) {
 800cb02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <tcp_write+0x68a>
    pbuf_free(concat_p);
 800cb08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cb0a:	f7fa fe57 	bl	80077bc <pbuf_free>
  }
  if (queue != NULL) {
 800cb0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <tcp_write+0x696>
    tcp_segs_free(queue);
 800cb14:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cb16:	f7fc fa81 	bl	800901c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00e      	beq.n	800cb42 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d10a      	bne.n	800cb42 <tcp_write+0x6be>
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d106      	bne.n	800cb42 <tcp_write+0x6be>
 800cb34:	4b06      	ldr	r3, [pc, #24]	; (800cb50 <tcp_write+0x6cc>)
 800cb36:	f240 3227 	movw	r2, #807	; 0x327
 800cb3a:	4906      	ldr	r1, [pc, #24]	; (800cb54 <tcp_write+0x6d0>)
 800cb3c:	4806      	ldr	r0, [pc, #24]	; (800cb58 <tcp_write+0x6d4>)
 800cb3e:	f006 fd25 	bl	801358c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cb42:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	375c      	adds	r7, #92	; 0x5c
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd90      	pop	{r4, r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	0801620c 	.word	0x0801620c
 800cb54:	08016580 	.word	0x08016580
 800cb58:	08016260 	.word	0x08016260
 800cb5c:	20007a48 	.word	0x20007a48

0800cb60 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b08b      	sub	sp, #44	; 0x2c
 800cb64:	af02      	add	r7, sp, #8
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	460b      	mov	r3, r1
 800cb6a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	61fb      	str	r3, [r7, #28]
 800cb70:	2300      	movs	r3, #0
 800cb72:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cb74:	2300      	movs	r3, #0
 800cb76:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <tcp_split_unsent_seg+0x2c>
 800cb7e:	4b99      	ldr	r3, [pc, #612]	; (800cde4 <tcp_split_unsent_seg+0x284>)
 800cb80:	f240 324b 	movw	r2, #843	; 0x34b
 800cb84:	4998      	ldr	r1, [pc, #608]	; (800cde8 <tcp_split_unsent_seg+0x288>)
 800cb86:	4899      	ldr	r0, [pc, #612]	; (800cdec <tcp_split_unsent_seg+0x28c>)
 800cb88:	f006 fd00 	bl	801358c <iprintf>

  useg = pcb->unsent;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb90:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d102      	bne.n	800cb9e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800cb98:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9c:	e11e      	b.n	800cddc <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 800cb9e:	887b      	ldrh	r3, [r7, #2]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d109      	bne.n	800cbb8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cba4:	4b8f      	ldr	r3, [pc, #572]	; (800cde4 <tcp_split_unsent_seg+0x284>)
 800cba6:	f240 3253 	movw	r2, #851	; 0x353
 800cbaa:	4991      	ldr	r1, [pc, #580]	; (800cdf0 <tcp_split_unsent_seg+0x290>)
 800cbac:	488f      	ldr	r0, [pc, #572]	; (800cdec <tcp_split_unsent_seg+0x28c>)
 800cbae:	f006 fced 	bl	801358c <iprintf>
    return ERR_VAL;
 800cbb2:	f06f 0305 	mvn.w	r3, #5
 800cbb6:	e111      	b.n	800cddc <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	891b      	ldrh	r3, [r3, #8]
 800cbbc:	887a      	ldrh	r2, [r7, #2]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d301      	bcc.n	800cbc6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	e10a      	b.n	800cddc <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cbca:	887a      	ldrh	r2, [r7, #2]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d906      	bls.n	800cbde <tcp_split_unsent_seg+0x7e>
 800cbd0:	4b84      	ldr	r3, [pc, #528]	; (800cde4 <tcp_split_unsent_seg+0x284>)
 800cbd2:	f240 325b 	movw	r2, #859	; 0x35b
 800cbd6:	4987      	ldr	r1, [pc, #540]	; (800cdf4 <tcp_split_unsent_seg+0x294>)
 800cbd8:	4884      	ldr	r0, [pc, #528]	; (800cdec <tcp_split_unsent_seg+0x28c>)
 800cbda:	f006 fcd7 	bl	801358c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	891b      	ldrh	r3, [r3, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <tcp_split_unsent_seg+0x94>
 800cbe6:	4b7f      	ldr	r3, [pc, #508]	; (800cde4 <tcp_split_unsent_seg+0x284>)
 800cbe8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cbec:	4982      	ldr	r1, [pc, #520]	; (800cdf8 <tcp_split_unsent_seg+0x298>)
 800cbee:	487f      	ldr	r0, [pc, #508]	; (800cdec <tcp_split_unsent_seg+0x28c>)
 800cbf0:	f006 fccc 	bl	801358c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	7a9b      	ldrb	r3, [r3, #10]
 800cbf8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	f003 0304 	and.w	r3, r3, #4
 800cc04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	891a      	ldrh	r2, [r3, #8]
 800cc0a:	887b      	ldrh	r3, [r7, #2]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cc10:	7bbb      	ldrb	r3, [r7, #14]
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	89bb      	ldrh	r3, [r7, #12]
 800cc16:	4413      	add	r3, r2
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc1e:	4619      	mov	r1, r3
 800cc20:	2036      	movs	r0, #54	; 0x36
 800cc22:	f7fa fb2b 	bl	800727c <pbuf_alloc>
 800cc26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f000 80b7 	beq.w	800cd9e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	891a      	ldrh	r2, [r3, #8]
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	891b      	ldrh	r3, [r3, #8]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	887b      	ldrh	r3, [r7, #2]
 800cc40:	4413      	add	r3, r2
 800cc42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	6858      	ldr	r0, [r3, #4]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	7bbb      	ldrb	r3, [r7, #14]
 800cc4e:	18d1      	adds	r1, r2, r3
 800cc50:	897b      	ldrh	r3, [r7, #10]
 800cc52:	89ba      	ldrh	r2, [r7, #12]
 800cc54:	f7fa ffac 	bl	8007bb0 <pbuf_copy_partial>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	89bb      	ldrh	r3, [r7, #12]
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	f040 809f 	bne.w	800cda2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	899b      	ldrh	r3, [r3, #12]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7f9 f8db 	bl	8005e28 <lwip_htons>
 800cc72:	4603      	mov	r3, r0
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc7a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cc80:	7efb      	ldrb	r3, [r7, #27]
 800cc82:	f003 0308 	and.w	r3, r3, #8
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d007      	beq.n	800cc9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cc8a:	7efb      	ldrb	r3, [r7, #27]
 800cc8c:	f023 0308 	bic.w	r3, r3, #8
 800cc90:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cc92:	7ebb      	ldrb	r3, [r7, #26]
 800cc94:	f043 0308 	orr.w	r3, r3, #8
 800cc98:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cc9a:	7efb      	ldrb	r3, [r7, #27]
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d007      	beq.n	800ccb4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cca4:	7efb      	ldrb	r3, [r7, #27]
 800cca6:	f023 0301 	bic.w	r3, r3, #1
 800ccaa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ccac:	7ebb      	ldrb	r3, [r7, #26]
 800ccae:	f043 0301 	orr.w	r3, r3, #1
 800ccb2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7f9 f8c9 	bl	8005e52 <lwip_htonl>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	887b      	ldrh	r3, [r7, #2]
 800ccc4:	18d1      	adds	r1, r2, r3
 800ccc6:	7eba      	ldrb	r2, [r7, #26]
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	460b      	mov	r3, r1
 800ccce:	6939      	ldr	r1, [r7, #16]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7ff fa33 	bl	800c13c <tcp_create_segment>
 800ccd6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d063      	beq.n	800cda6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fa fdf2 	bl	80078cc <pbuf_clen>
 800cce8:	4603      	mov	r3, r0
 800ccea:	461a      	mov	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ccf2:	1a9b      	subs	r3, r3, r2
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	6858      	ldr	r0, [r3, #4]
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	891a      	ldrh	r2, [r3, #8]
 800cd06:	89bb      	ldrh	r3, [r7, #12]
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	f7fa fbcf 	bl	80074b0 <pbuf_realloc>
  useg->len -= remainder;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	891a      	ldrh	r2, [r3, #8]
 800cd16:	89bb      	ldrh	r3, [r7, #12]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	899b      	ldrh	r3, [r3, #12]
 800cd26:	b29c      	uxth	r4, r3
 800cd28:	7efb      	ldrb	r3, [r7, #27]
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7f9 f87b 	bl	8005e28 <lwip_htons>
 800cd32:	4603      	mov	r3, r0
 800cd34:	461a      	mov	r2, r3
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	4322      	orrs	r2, r4
 800cd3c:	b292      	uxth	r2, r2
 800cd3e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fa fdc1 	bl	80078cc <pbuf_clen>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd54:	4413      	add	r3, r2
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fa fdb2 	bl	80078cc <pbuf_clen>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd72:	4413      	add	r3, r2
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	69fa      	ldr	r2, [r7, #28]
 800cd88:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d103      	bne.n	800cd9a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e01e      	b.n	800cddc <tcp_split_unsent_seg+0x27c>
    goto memerr;
 800cd9e:	bf00      	nop
 800cda0:	e002      	b.n	800cda8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cda2:	bf00      	nop
 800cda4:	e000      	b.n	800cda8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800cda6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800cda8:	4b14      	ldr	r3, [pc, #80]	; (800cdfc <tcp_split_unsent_seg+0x29c>)
 800cdaa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cdae:	3301      	adds	r3, #1
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	4b12      	ldr	r3, [pc, #72]	; (800cdfc <tcp_split_unsent_seg+0x29c>)
 800cdb4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d006      	beq.n	800cdcc <tcp_split_unsent_seg+0x26c>
 800cdbe:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <tcp_split_unsent_seg+0x284>)
 800cdc0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800cdc4:	490e      	ldr	r1, [pc, #56]	; (800ce00 <tcp_split_unsent_seg+0x2a0>)
 800cdc6:	4809      	ldr	r0, [pc, #36]	; (800cdec <tcp_split_unsent_seg+0x28c>)
 800cdc8:	f006 fbe0 	bl	801358c <iprintf>
  if (p != NULL) {
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 800cdd2:	6938      	ldr	r0, [r7, #16]
 800cdd4:	f7fa fcf2 	bl	80077bc <pbuf_free>
  }

  return ERR_MEM;
 800cdd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3724      	adds	r7, #36	; 0x24
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd90      	pop	{r4, r7, pc}
 800cde4:	0801620c 	.word	0x0801620c
 800cde8:	080165a0 	.word	0x080165a0
 800cdec:	08016260 	.word	0x08016260
 800cdf0:	080165c4 	.word	0x080165c4
 800cdf4:	080165e8 	.word	0x080165e8
 800cdf8:	080165f8 	.word	0x080165f8
 800cdfc:	20007a48 	.word	0x20007a48
 800ce00:	08016608 	.word	0x08016608

0800ce04 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ce04:	b590      	push	{r4, r7, lr}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d106      	bne.n	800ce20 <tcp_send_fin+0x1c>
 800ce12:	4b21      	ldr	r3, [pc, #132]	; (800ce98 <tcp_send_fin+0x94>)
 800ce14:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ce18:	4920      	ldr	r1, [pc, #128]	; (800ce9c <tcp_send_fin+0x98>)
 800ce1a:	4821      	ldr	r0, [pc, #132]	; (800cea0 <tcp_send_fin+0x9c>)
 800ce1c:	f006 fbb6 	bl	801358c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d02e      	beq.n	800ce86 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce2c:	60fb      	str	r3, [r7, #12]
 800ce2e:	e002      	b.n	800ce36 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1f8      	bne.n	800ce30 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	899b      	ldrh	r3, [r3, #12]
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7f8 ffee 	bl	8005e28 <lwip_htons>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	f003 0307 	and.w	r3, r3, #7
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d116      	bne.n	800ce86 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	899b      	ldrh	r3, [r3, #12]
 800ce5e:	b29c      	uxth	r4, r3
 800ce60:	2001      	movs	r0, #1
 800ce62:	f7f8 ffe1 	bl	8005e28 <lwip_htons>
 800ce66:	4603      	mov	r3, r0
 800ce68:	461a      	mov	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	4322      	orrs	r2, r4
 800ce70:	b292      	uxth	r2, r2
 800ce72:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	8b5b      	ldrh	r3, [r3, #26]
 800ce78:	f043 0320 	orr.w	r3, r3, #32
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	e004      	b.n	800ce90 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ce86:	2101      	movs	r1, #1
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f80b 	bl	800cea4 <tcp_enqueue_flags>
 800ce8e:	4603      	mov	r3, r0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3714      	adds	r7, #20
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd90      	pop	{r4, r7, pc}
 800ce98:	0801620c 	.word	0x0801620c
 800ce9c:	08016614 	.word	0x08016614
 800cea0:	08016260 	.word	0x08016260

0800cea4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b08a      	sub	sp, #40	; 0x28
 800cea8:	af02      	add	r7, sp, #8
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ceb8:	78fb      	ldrb	r3, [r7, #3]
 800ceba:	f003 0303 	and.w	r3, r3, #3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d106      	bne.n	800ced0 <tcp_enqueue_flags+0x2c>
 800cec2:	4b68      	ldr	r3, [pc, #416]	; (800d064 <tcp_enqueue_flags+0x1c0>)
 800cec4:	f240 4211 	movw	r2, #1041	; 0x411
 800cec8:	4967      	ldr	r1, [pc, #412]	; (800d068 <tcp_enqueue_flags+0x1c4>)
 800ceca:	4868      	ldr	r0, [pc, #416]	; (800d06c <tcp_enqueue_flags+0x1c8>)
 800cecc:	f006 fb5e 	bl	801358c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <tcp_enqueue_flags+0x40>
 800ced6:	4b63      	ldr	r3, [pc, #396]	; (800d064 <tcp_enqueue_flags+0x1c0>)
 800ced8:	f240 4213 	movw	r2, #1043	; 0x413
 800cedc:	4964      	ldr	r1, [pc, #400]	; (800d070 <tcp_enqueue_flags+0x1cc>)
 800cede:	4863      	ldr	r0, [pc, #396]	; (800d06c <tcp_enqueue_flags+0x1c8>)
 800cee0:	f006 fb54 	bl	801358c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800cee4:	78fb      	ldrb	r3, [r7, #3]
 800cee6:	f003 0302 	and.w	r3, r3, #2
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d001      	beq.n	800cef2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ceee:	2301      	movs	r3, #1
 800cef0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cef2:	7ffb      	ldrb	r3, [r7, #31]
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	f003 0304 	and.w	r3, r3, #4
 800cefc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cefe:	7dfb      	ldrb	r3, [r7, #23]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf06:	4619      	mov	r1, r3
 800cf08:	2036      	movs	r0, #54	; 0x36
 800cf0a:	f7fa f9b7 	bl	800727c <pbuf_alloc>
 800cf0e:	6138      	str	r0, [r7, #16]
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d111      	bne.n	800cf3a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	8b5b      	ldrh	r3, [r3, #26]
 800cf1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf1e:	b29a      	uxth	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800cf24:	4b53      	ldr	r3, [pc, #332]	; (800d074 <tcp_enqueue_flags+0x1d0>)
 800cf26:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	4b51      	ldr	r3, [pc, #324]	; (800d074 <tcp_enqueue_flags+0x1d0>)
 800cf30:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800cf34:	f04f 33ff 	mov.w	r3, #4294967295
 800cf38:	e090      	b.n	800d05c <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	895a      	ldrh	r2, [r3, #10]
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d206      	bcs.n	800cf54 <tcp_enqueue_flags+0xb0>
 800cf46:	4b47      	ldr	r3, [pc, #284]	; (800d064 <tcp_enqueue_flags+0x1c0>)
 800cf48:	f240 4239 	movw	r2, #1081	; 0x439
 800cf4c:	494a      	ldr	r1, [pc, #296]	; (800d078 <tcp_enqueue_flags+0x1d4>)
 800cf4e:	4847      	ldr	r0, [pc, #284]	; (800d06c <tcp_enqueue_flags+0x1c8>)
 800cf50:	f006 fb1c 	bl	801358c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800cf58:	78fa      	ldrb	r2, [r7, #3]
 800cf5a:	7ffb      	ldrb	r3, [r7, #31]
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	6939      	ldr	r1, [r7, #16]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7ff f8ea 	bl	800c13c <tcp_create_segment>
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d111      	bne.n	800cf94 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	8b5b      	ldrh	r3, [r3, #26]
 800cf74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800cf7e:	4b3d      	ldr	r3, [pc, #244]	; (800d074 <tcp_enqueue_flags+0x1d0>)
 800cf80:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800cf84:	3301      	adds	r3, #1
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	4b3a      	ldr	r3, [pc, #232]	; (800d074 <tcp_enqueue_flags+0x1d0>)
 800cf8a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800cf8e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf92:	e063      	b.n	800d05c <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	891b      	ldrh	r3, [r3, #8]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d006      	beq.n	800cfaa <tcp_enqueue_flags+0x106>
 800cf9c:	4b31      	ldr	r3, [pc, #196]	; (800d064 <tcp_enqueue_flags+0x1c0>)
 800cf9e:	f240 4243 	movw	r2, #1091	; 0x443
 800cfa2:	4936      	ldr	r1, [pc, #216]	; (800d07c <tcp_enqueue_flags+0x1d8>)
 800cfa4:	4831      	ldr	r0, [pc, #196]	; (800d06c <tcp_enqueue_flags+0x1c8>)
 800cfa6:	f006 faf1 	bl	801358c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d103      	bne.n	800cfba <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	66da      	str	r2, [r3, #108]	; 0x6c
 800cfb8:	e00d      	b.n	800cfd6 <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfbe:	61bb      	str	r3, [r7, #24]
 800cfc0:	e002      	b.n	800cfc8 <tcp_enqueue_flags+0x124>
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	61bb      	str	r3, [r7, #24]
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1f8      	bne.n	800cfc2 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cfde:	78fb      	ldrb	r3, [r7, #3]
 800cfe0:	f003 0302 	and.w	r3, r3, #2
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d104      	bne.n	800cff2 <tcp_enqueue_flags+0x14e>
 800cfe8:	78fb      	ldrb	r3, [r7, #3]
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d004      	beq.n	800cffc <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cff6:	1c5a      	adds	r2, r3, #1
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cffc:	78fb      	ldrb	r3, [r7, #3]
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	2b00      	cmp	r3, #0
 800d004:	d006      	beq.n	800d014 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	8b5b      	ldrh	r3, [r3, #26]
 800d00a:	f043 0320 	orr.w	r3, r3, #32
 800d00e:	b29a      	uxth	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	4618      	mov	r0, r3
 800d01a:	f7fa fc57 	bl	80078cc <pbuf_clen>
 800d01e:	4603      	mov	r3, r0
 800d020:	461a      	mov	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d028:	4413      	add	r3, r2
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00e      	beq.n	800d05a <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10a      	bne.n	800d05a <tcp_enqueue_flags+0x1b6>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d106      	bne.n	800d05a <tcp_enqueue_flags+0x1b6>
 800d04c:	4b05      	ldr	r3, [pc, #20]	; (800d064 <tcp_enqueue_flags+0x1c0>)
 800d04e:	f240 4265 	movw	r2, #1125	; 0x465
 800d052:	490b      	ldr	r1, [pc, #44]	; (800d080 <tcp_enqueue_flags+0x1dc>)
 800d054:	4805      	ldr	r0, [pc, #20]	; (800d06c <tcp_enqueue_flags+0x1c8>)
 800d056:	f006 fa99 	bl	801358c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3720      	adds	r7, #32
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	0801620c 	.word	0x0801620c
 800d068:	08016630 	.word	0x08016630
 800d06c:	08016260 	.word	0x08016260
 800d070:	08016688 	.word	0x08016688
 800d074:	20007a48 	.word	0x20007a48
 800d078:	080166a8 	.word	0x080166a8
 800d07c:	080166e4 	.word	0x080166e4
 800d080:	08016710 	.word	0x08016710

0800d084 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d084:	b5b0      	push	{r4, r5, r7, lr}
 800d086:	b08a      	sub	sp, #40	; 0x28
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d106      	bne.n	800d0a0 <tcp_output+0x1c>
 800d092:	4b9e      	ldr	r3, [pc, #632]	; (800d30c <tcp_output+0x288>)
 800d094:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d098:	499d      	ldr	r1, [pc, #628]	; (800d310 <tcp_output+0x28c>)
 800d09a:	489e      	ldr	r0, [pc, #632]	; (800d314 <tcp_output+0x290>)
 800d09c:	f006 fa76 	bl	801358c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	7d1b      	ldrb	r3, [r3, #20]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d106      	bne.n	800d0b6 <tcp_output+0x32>
 800d0a8:	4b98      	ldr	r3, [pc, #608]	; (800d30c <tcp_output+0x288>)
 800d0aa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d0ae:	499a      	ldr	r1, [pc, #616]	; (800d318 <tcp_output+0x294>)
 800d0b0:	4898      	ldr	r0, [pc, #608]	; (800d314 <tcp_output+0x290>)
 800d0b2:	f006 fa6b 	bl	801358c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d0b6:	4b99      	ldr	r3, [pc, #612]	; (800d31c <tcp_output+0x298>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d101      	bne.n	800d0c4 <tcp_output+0x40>
    return ERR_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e1ce      	b.n	800d462 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	bf28      	it	cs
 800d0d4:	4613      	movcs	r3, r2
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0de:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d10b      	bne.n	800d0fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	8b5b      	ldrh	r3, [r3, #26]
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f000 81aa 	beq.w	800d448 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 fe01 	bl	800dcfc <tcp_send_empty_ack>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	e1b1      	b.n	800d462 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d0fe:	6879      	ldr	r1, [r7, #4]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	3304      	adds	r3, #4
 800d104:	461a      	mov	r2, r3
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f7fe fffc 	bl	800c104 <tcp_route>
 800d10c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d102      	bne.n	800d11a <tcp_output+0x96>
    return ERR_RTE;
 800d114:	f06f 0303 	mvn.w	r3, #3
 800d118:	e1a3      	b.n	800d462 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d003      	beq.n	800d128 <tcp_output+0xa4>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d111      	bne.n	800d14c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <tcp_output+0xb0>
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	3304      	adds	r3, #4
 800d132:	e000      	b.n	800d136 <tcp_output+0xb2>
 800d134:	2300      	movs	r3, #0
 800d136:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d102      	bne.n	800d144 <tcp_output+0xc0>
      return ERR_RTE;
 800d13e:	f06f 0303 	mvn.w	r3, #3
 800d142:	e18e      	b.n	800d462 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	4618      	mov	r0, r3
 800d154:	f7f8 fe7d 	bl	8005e52 <lwip_htonl>
 800d158:	4602      	mov	r2, r0
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d162:	8912      	ldrh	r2, [r2, #8]
 800d164:	4413      	add	r3, r2
 800d166:	69ba      	ldr	r2, [r7, #24]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d227      	bcs.n	800d1bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d172:	461a      	mov	r2, r3
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	4293      	cmp	r3, r2
 800d178:	d114      	bne.n	800d1a4 <tcp_output+0x120>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d110      	bne.n	800d1a4 <tcp_output+0x120>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10b      	bne.n	800d1a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	8b5b      	ldrh	r3, [r3, #26]
 800d1a8:	f003 0302 	and.w	r3, r3, #2
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 814d 	beq.w	800d44c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fda2 	bl	800dcfc <tcp_send_empty_ack>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	e152      	b.n	800d462 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d1ca:	6a3b      	ldr	r3, [r7, #32]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 811c 	beq.w	800d40a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d1d2:	e002      	b.n	800d1da <tcp_output+0x156>
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	623b      	str	r3, [r7, #32]
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d1f8      	bne.n	800d1d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d1e2:	e112      	b.n	800d40a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	899b      	ldrh	r3, [r3, #12]
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7f8 fe1b 	bl	8005e28 <lwip_htons>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	f003 0304 	and.w	r3, r3, #4
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d006      	beq.n	800d20c <tcp_output+0x188>
 800d1fe:	4b43      	ldr	r3, [pc, #268]	; (800d30c <tcp_output+0x288>)
 800d200:	f240 5236 	movw	r2, #1334	; 0x536
 800d204:	4946      	ldr	r1, [pc, #280]	; (800d320 <tcp_output+0x29c>)
 800d206:	4843      	ldr	r0, [pc, #268]	; (800d314 <tcp_output+0x290>)
 800d208:	f006 f9c0 	bl	801358c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d210:	2b00      	cmp	r3, #0
 800d212:	d01f      	beq.n	800d254 <tcp_output+0x1d0>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8b5b      	ldrh	r3, [r3, #26]
 800d218:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d119      	bne.n	800d254 <tcp_output+0x1d0>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00b      	beq.n	800d240 <tcp_output+0x1bc>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d110      	bne.n	800d254 <tcp_output+0x1d0>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d236:	891a      	ldrh	r2, [r3, #8]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d209      	bcs.n	800d254 <tcp_output+0x1d0>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d246:	2b00      	cmp	r3, #0
 800d248:	d004      	beq.n	800d254 <tcp_output+0x1d0>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d250:	2b07      	cmp	r3, #7
 800d252:	d901      	bls.n	800d258 <tcp_output+0x1d4>
 800d254:	2301      	movs	r3, #1
 800d256:	e000      	b.n	800d25a <tcp_output+0x1d6>
 800d258:	2300      	movs	r3, #0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d106      	bne.n	800d26c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	8b5b      	ldrh	r3, [r3, #26]
 800d262:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d266:	2b00      	cmp	r3, #0
 800d268:	f000 80e4 	beq.w	800d434 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	7d1b      	ldrb	r3, [r3, #20]
 800d270:	2b02      	cmp	r3, #2
 800d272:	d00d      	beq.n	800d290 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	899b      	ldrh	r3, [r3, #12]
 800d27a:	b29c      	uxth	r4, r3
 800d27c:	2010      	movs	r0, #16
 800d27e:	f7f8 fdd3 	bl	8005e28 <lwip_htons>
 800d282:	4603      	mov	r3, r0
 800d284:	461a      	mov	r2, r3
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	4322      	orrs	r2, r4
 800d28c:	b292      	uxth	r2, r2
 800d28e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d296:	f000 f909 	bl	800d4ac <tcp_output_segment>
 800d29a:	4603      	mov	r3, r0
 800d29c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d009      	beq.n	800d2ba <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	8b5b      	ldrh	r3, [r3, #26]
 800d2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	835a      	strh	r2, [r3, #26]
      return err;
 800d2b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2b8:	e0d3      	b.n	800d462 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2bc:	681a      	ldr	r2, [r3, #0]
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7d1b      	ldrb	r3, [r3, #20]
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d006      	beq.n	800d2d8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	8b5b      	ldrh	r3, [r3, #26]
 800d2ce:	f023 0303 	bic.w	r3, r3, #3
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7f8 fdb7 	bl	8005e52 <lwip_htonl>
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e8:	891b      	ldrh	r3, [r3, #8]
 800d2ea:	461d      	mov	r5, r3
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	899b      	ldrh	r3, [r3, #12]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7f8 fd97 	bl	8005e28 <lwip_htons>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	f003 0303 	and.w	r3, r3, #3
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00e      	beq.n	800d324 <tcp_output+0x2a0>
 800d306:	2301      	movs	r3, #1
 800d308:	e00d      	b.n	800d326 <tcp_output+0x2a2>
 800d30a:	bf00      	nop
 800d30c:	0801620c 	.word	0x0801620c
 800d310:	08016738 	.word	0x08016738
 800d314:	08016260 	.word	0x08016260
 800d318:	08016750 	.word	0x08016750
 800d31c:	20007b38 	.word	0x20007b38
 800d320:	08016778 	.word	0x08016778
 800d324:	2300      	movs	r3, #0
 800d326:	442b      	add	r3, r5
 800d328:	4423      	add	r3, r4
 800d32a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	2b00      	cmp	r3, #0
 800d336:	da02      	bge.n	800d33e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d340:	891b      	ldrh	r3, [r3, #8]
 800d342:	461c      	mov	r4, r3
 800d344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	899b      	ldrh	r3, [r3, #12]
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7f8 fd6b 	bl	8005e28 <lwip_htons>
 800d352:	4603      	mov	r3, r0
 800d354:	b2db      	uxtb	r3, r3
 800d356:	f003 0303 	and.w	r3, r3, #3
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <tcp_output+0x2de>
 800d35e:	2301      	movs	r3, #1
 800d360:	e000      	b.n	800d364 <tcp_output+0x2e0>
 800d362:	2300      	movs	r3, #0
 800d364:	4423      	add	r3, r4
 800d366:	2b00      	cmp	r3, #0
 800d368:	d049      	beq.n	800d3fe <tcp_output+0x37a>
      seg->next = NULL;
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	2200      	movs	r2, #0
 800d36e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d374:	2b00      	cmp	r3, #0
 800d376:	d105      	bne.n	800d384 <tcp_output+0x300>
        pcb->unacked = seg;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d380:	623b      	str	r3, [r7, #32]
 800d382:	e03f      	b.n	800d404 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f8 fd61 	bl	8005e52 <lwip_htonl>
 800d390:	4604      	mov	r4, r0
 800d392:	6a3b      	ldr	r3, [r7, #32]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7f8 fd5a 	bl	8005e52 <lwip_htonl>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	1ae3      	subs	r3, r4, r3
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	da24      	bge.n	800d3f0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3370      	adds	r3, #112	; 0x70
 800d3aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d3ac:	e002      	b.n	800d3b4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d011      	beq.n	800d3e0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7f8 fd44 	bl	8005e52 <lwip_htonl>
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7f8 fd3d 	bl	8005e52 <lwip_htonl>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	dbe6      	blt.n	800d3ae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e009      	b.n	800d404 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3f4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d3f6:	6a3b      	ldr	r3, [r7, #32]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	623b      	str	r3, [r7, #32]
 800d3fc:	e002      	b.n	800d404 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d3fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d400:	f7fb fe21 	bl	8009046 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d408:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d012      	beq.n	800d436 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	4618      	mov	r0, r3
 800d418:	f7f8 fd1b 	bl	8005e52 <lwip_htonl>
 800d41c:	4602      	mov	r2, r0
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d426:	8912      	ldrh	r2, [r2, #8]
 800d428:	4413      	add	r3, r2
  while (seg != NULL &&
 800d42a:	69ba      	ldr	r2, [r7, #24]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	f4bf aed9 	bcs.w	800d1e4 <tcp_output+0x160>
 800d432:	e000      	b.n	800d436 <tcp_output+0x3b2>
      break;
 800d434:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d108      	bne.n	800d450 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d446:	e004      	b.n	800d452 <tcp_output+0x3ce>
    goto output_done;
 800d448:	bf00      	nop
 800d44a:	e002      	b.n	800d452 <tcp_output+0x3ce>
    goto output_done;
 800d44c:	bf00      	nop
 800d44e:	e000      	b.n	800d452 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d450:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	8b5b      	ldrh	r3, [r3, #26]
 800d456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3728      	adds	r7, #40	; 0x28
 800d466:	46bd      	mov	sp, r7
 800d468:	bdb0      	pop	{r4, r5, r7, pc}
 800d46a:	bf00      	nop

0800d46c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <tcp_output_segment_busy+0x1c>
 800d47a:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <tcp_output_segment_busy+0x34>)
 800d47c:	f240 529a 	movw	r2, #1434	; 0x59a
 800d480:	4908      	ldr	r1, [pc, #32]	; (800d4a4 <tcp_output_segment_busy+0x38>)
 800d482:	4809      	ldr	r0, [pc, #36]	; (800d4a8 <tcp_output_segment_busy+0x3c>)
 800d484:	f006 f882 	bl	801358c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	7b9b      	ldrb	r3, [r3, #14]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d001      	beq.n	800d496 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d492:	2301      	movs	r3, #1
 800d494:	e000      	b.n	800d498 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	0801620c 	.word	0x0801620c
 800d4a4:	08016790 	.word	0x08016790
 800d4a8:	08016260 	.word	0x08016260

0800d4ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d4ac:	b5b0      	push	{r4, r5, r7, lr}
 800d4ae:	b08c      	sub	sp, #48	; 0x30
 800d4b0:	af04      	add	r7, sp, #16
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <tcp_output_segment+0x20>
 800d4be:	4b70      	ldr	r3, [pc, #448]	; (800d680 <tcp_output_segment+0x1d4>)
 800d4c0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d4c4:	496f      	ldr	r1, [pc, #444]	; (800d684 <tcp_output_segment+0x1d8>)
 800d4c6:	4870      	ldr	r0, [pc, #448]	; (800d688 <tcp_output_segment+0x1dc>)
 800d4c8:	f006 f860 	bl	801358c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d106      	bne.n	800d4e0 <tcp_output_segment+0x34>
 800d4d2:	4b6b      	ldr	r3, [pc, #428]	; (800d680 <tcp_output_segment+0x1d4>)
 800d4d4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d4d8:	496c      	ldr	r1, [pc, #432]	; (800d68c <tcp_output_segment+0x1e0>)
 800d4da:	486b      	ldr	r0, [pc, #428]	; (800d688 <tcp_output_segment+0x1dc>)
 800d4dc:	f006 f856 	bl	801358c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d106      	bne.n	800d4f4 <tcp_output_segment+0x48>
 800d4e6:	4b66      	ldr	r3, [pc, #408]	; (800d680 <tcp_output_segment+0x1d4>)
 800d4e8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d4ec:	4968      	ldr	r1, [pc, #416]	; (800d690 <tcp_output_segment+0x1e4>)
 800d4ee:	4866      	ldr	r0, [pc, #408]	; (800d688 <tcp_output_segment+0x1dc>)
 800d4f0:	f006 f84c 	bl	801358c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7ff ffb9 	bl	800d46c <tcp_output_segment_busy>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d001      	beq.n	800d504 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	e0b9      	b.n	800d678 <tcp_output_segment+0x1cc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	68dc      	ldr	r4, [r3, #12]
 800d50c:	4610      	mov	r0, r2
 800d50e:	f7f8 fca0 	bl	8005e52 <lwip_htonl>
 800d512:	4603      	mov	r3, r0
 800d514:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	68dc      	ldr	r4, [r3, #12]
 800d51e:	4610      	mov	r0, r2
 800d520:	f7f8 fc82 	bl	8005e28 <lwip_htons>
 800d524:	4603      	mov	r3, r0
 800d526:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d530:	441a      	add	r2, r3
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	3314      	adds	r3, #20
 800d53c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	7a9b      	ldrb	r3, [r3, #10]
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	d015      	beq.n	800d576 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	3304      	adds	r3, #4
 800d54e:	461a      	mov	r2, r3
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d556:	f7fc f983 	bl	8009860 <tcp_eff_send_mss_netif>
 800d55a:	4603      	mov	r3, r0
 800d55c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d55e:	8b7b      	ldrh	r3, [r7, #26]
 800d560:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d564:	4618      	mov	r0, r3
 800d566:	f7f8 fc74 	bl	8005e52 <lwip_htonl>
 800d56a:	4602      	mov	r2, r0
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	3304      	adds	r3, #4
 800d574:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	da02      	bge.n	800d586 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	2200      	movs	r2, #0
 800d584:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10c      	bne.n	800d5a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d58e:	4b41      	ldr	r3, [pc, #260]	; (800d694 <tcp_output_segment+0x1e8>)
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7f8 fc58 	bl	8005e52 <lwip_htonl>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	68da      	ldr	r2, [r3, #12]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	8959      	ldrh	r1, [r3, #10]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	8b3a      	ldrh	r2, [r7, #24]
 800d5c2:	1a8a      	subs	r2, r1, r2
 800d5c4:	b292      	uxth	r2, r2
 800d5c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	8919      	ldrh	r1, [r3, #8]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	8b3a      	ldrh	r2, [r7, #24]
 800d5d4:	1a8a      	subs	r2, r1, r2
 800d5d6:	b292      	uxth	r2, r2
 800d5d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	68d2      	ldr	r2, [r2, #12]
 800d5e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	741a      	strb	r2, [r3, #16]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	f103 0214 	add.w	r2, r3, #20
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	7a9b      	ldrb	r3, [r3, #10]
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	f003 0304 	and.w	r3, r3, #4
 800d602:	4413      	add	r3, r2
 800d604:	69fa      	ldr	r2, [r7, #28]
 800d606:	429a      	cmp	r2, r3
 800d608:	d006      	beq.n	800d618 <tcp_output_segment+0x16c>
 800d60a:	4b1d      	ldr	r3, [pc, #116]	; (800d680 <tcp_output_segment+0x1d4>)
 800d60c:	f240 621c 	movw	r2, #1564	; 0x61c
 800d610:	4921      	ldr	r1, [pc, #132]	; (800d698 <tcp_output_segment+0x1ec>)
 800d612:	481d      	ldr	r0, [pc, #116]	; (800d688 <tcp_output_segment+0x1dc>)
 800d614:	f005 ffba 	bl	801358c <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800d620:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800d622:	68bd      	ldr	r5, [r7, #8]
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	68d4      	ldr	r4, [r2, #12]
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	462b      	mov	r3, r5
 800d630:	460a      	mov	r2, r1
 800d632:	2106      	movs	r1, #6
 800d634:	f7f8 fd94 	bl	8006160 <ip_chksum_pseudo>
 800d638:	4603      	mov	r3, r0
 800d63a:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800d63c:	4b17      	ldr	r3, [pc, #92]	; (800d69c <tcp_output_segment+0x1f0>)
 800d63e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800d642:	3301      	adds	r3, #1
 800d644:	b29a      	uxth	r2, r3
 800d646:	4b15      	ldr	r3, [pc, #84]	; (800d69c <tcp_output_segment+0x1f0>)
 800d648:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6858      	ldr	r0, [r3, #4]
 800d650:	68b9      	ldr	r1, [r7, #8]
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	1d1c      	adds	r4, r3, #4
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	7add      	ldrb	r5, [r3, #11]
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	7a9b      	ldrb	r3, [r3, #10]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	9202      	str	r2, [sp, #8]
 800d662:	2206      	movs	r2, #6
 800d664:	9201      	str	r2, [sp, #4]
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	462b      	mov	r3, r5
 800d66a:	4622      	mov	r2, r4
 800d66c:	f004 fd82 	bl	8012174 <ip4_output_if>
 800d670:	4603      	mov	r3, r0
 800d672:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d674:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bdb0      	pop	{r4, r5, r7, pc}
 800d680:	0801620c 	.word	0x0801620c
 800d684:	080167b8 	.word	0x080167b8
 800d688:	08016260 	.word	0x08016260
 800d68c:	080167d8 	.word	0x080167d8
 800d690:	080167f8 	.word	0x080167f8
 800d694:	20007b28 	.word	0x20007b28
 800d698:	0801681c 	.word	0x0801681c
 800d69c:	20007a48 	.word	0x20007a48

0800d6a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d6a0:	b5b0      	push	{r4, r5, r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <tcp_rexmit_rto_prepare+0x1c>
 800d6ae:	4b31      	ldr	r3, [pc, #196]	; (800d774 <tcp_rexmit_rto_prepare+0xd4>)
 800d6b0:	f240 6263 	movw	r2, #1635	; 0x663
 800d6b4:	4930      	ldr	r1, [pc, #192]	; (800d778 <tcp_rexmit_rto_prepare+0xd8>)
 800d6b6:	4831      	ldr	r0, [pc, #196]	; (800d77c <tcp_rexmit_rto_prepare+0xdc>)
 800d6b8:	f005 ff68 	bl	801358c <iprintf>

  if (pcb->unacked == NULL) {
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d102      	bne.n	800d6ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d6c4:	f06f 0305 	mvn.w	r3, #5
 800d6c8:	e050      	b.n	800d76c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ce:	60fb      	str	r3, [r7, #12]
 800d6d0:	e00b      	b.n	800d6ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f7ff feca 	bl	800d46c <tcp_output_segment_busy>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d002      	beq.n	800d6e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d6de:	f06f 0305 	mvn.w	r3, #5
 800d6e2:	e043      	b.n	800d76c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1ef      	bne.n	800d6d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f7ff feba 	bl	800d46c <tcp_output_segment_busy>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d6fe:	f06f 0305 	mvn.w	r3, #5
 800d702:	e033      	b.n	800d76c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	8b5b      	ldrh	r3, [r3, #26]
 800d71e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d722:	b29a      	uxth	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	4618      	mov	r0, r3
 800d730:	f7f8 fb8f 	bl	8005e52 <lwip_htonl>
 800d734:	4604      	mov	r4, r0
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	891b      	ldrh	r3, [r3, #8]
 800d73a:	461d      	mov	r5, r3
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	899b      	ldrh	r3, [r3, #12]
 800d742:	b29b      	uxth	r3, r3
 800d744:	4618      	mov	r0, r3
 800d746:	f7f8 fb6f 	bl	8005e28 <lwip_htons>
 800d74a:	4603      	mov	r3, r0
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	f003 0303 	and.w	r3, r3, #3
 800d752:	2b00      	cmp	r3, #0
 800d754:	d001      	beq.n	800d75a <tcp_rexmit_rto_prepare+0xba>
 800d756:	2301      	movs	r3, #1
 800d758:	e000      	b.n	800d75c <tcp_rexmit_rto_prepare+0xbc>
 800d75a:	2300      	movs	r3, #0
 800d75c:	442b      	add	r3, r5
 800d75e:	18e2      	adds	r2, r4, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bdb0      	pop	{r4, r5, r7, pc}
 800d774:	0801620c 	.word	0x0801620c
 800d778:	08016830 	.word	0x08016830
 800d77c:	08016260 	.word	0x08016260

0800d780 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d106      	bne.n	800d79c <tcp_rexmit_rto_commit+0x1c>
 800d78e:	4b0d      	ldr	r3, [pc, #52]	; (800d7c4 <tcp_rexmit_rto_commit+0x44>)
 800d790:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d794:	490c      	ldr	r1, [pc, #48]	; (800d7c8 <tcp_rexmit_rto_commit+0x48>)
 800d796:	480d      	ldr	r0, [pc, #52]	; (800d7cc <tcp_rexmit_rto_commit+0x4c>)
 800d798:	f005 fef8 	bl	801358c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7a2:	2bff      	cmp	r3, #255	; 0xff
 800d7a4:	d007      	beq.n	800d7b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	b2da      	uxtb	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff fc64 	bl	800d084 <tcp_output>
}
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	0801620c 	.word	0x0801620c
 800d7c8:	08016854 	.word	0x08016854
 800d7cc:	08016260 	.word	0x08016260

0800d7d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <tcp_rexmit_rto+0x1c>
 800d7de:	4b0a      	ldr	r3, [pc, #40]	; (800d808 <tcp_rexmit_rto+0x38>)
 800d7e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d7e4:	4909      	ldr	r1, [pc, #36]	; (800d80c <tcp_rexmit_rto+0x3c>)
 800d7e6:	480a      	ldr	r0, [pc, #40]	; (800d810 <tcp_rexmit_rto+0x40>)
 800d7e8:	f005 fed0 	bl	801358c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f7ff ff57 	bl	800d6a0 <tcp_rexmit_rto_prepare>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7ff ffc1 	bl	800d780 <tcp_rexmit_rto_commit>
  }
}
 800d7fe:	bf00      	nop
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	0801620c 	.word	0x0801620c
 800d80c:	08016878 	.word	0x08016878
 800d810:	08016260 	.word	0x08016260

0800d814 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d814:	b590      	push	{r4, r7, lr}
 800d816:	b085      	sub	sp, #20
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d106      	bne.n	800d830 <tcp_rexmit+0x1c>
 800d822:	4b2f      	ldr	r3, [pc, #188]	; (800d8e0 <tcp_rexmit+0xcc>)
 800d824:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d828:	492e      	ldr	r1, [pc, #184]	; (800d8e4 <tcp_rexmit+0xd0>)
 800d82a:	482f      	ldr	r0, [pc, #188]	; (800d8e8 <tcp_rexmit+0xd4>)
 800d82c:	f005 feae 	bl	801358c <iprintf>

  if (pcb->unacked == NULL) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d838:	f06f 0305 	mvn.w	r3, #5
 800d83c:	e04c      	b.n	800d8d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d842:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d844:	68b8      	ldr	r0, [r7, #8]
 800d846:	f7ff fe11 	bl	800d46c <tcp_output_segment_busy>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d850:	f06f 0305 	mvn.w	r3, #5
 800d854:	e040      	b.n	800d8d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	336c      	adds	r3, #108	; 0x6c
 800d862:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d864:	e002      	b.n	800d86c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d011      	beq.n	800d898 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	68db      	ldr	r3, [r3, #12]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7f8 fae8 	bl	8005e52 <lwip_htonl>
 800d882:	4604      	mov	r4, r0
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7f8 fae1 	bl	8005e52 <lwip_htonl>
 800d890:	4603      	mov	r3, r0
 800d892:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d894:	2b00      	cmp	r3, #0
 800d896:	dbe6      	blt.n	800d866 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d103      	bne.n	800d8b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8bc:	2bff      	cmp	r3, #255	; 0xff
 800d8be:	d007      	beq.n	800d8d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd90      	pop	{r4, r7, pc}
 800d8e0:	0801620c 	.word	0x0801620c
 800d8e4:	08016894 	.word	0x08016894
 800d8e8:	08016260 	.word	0x08016260

0800d8ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d106      	bne.n	800d908 <tcp_rexmit_fast+0x1c>
 800d8fa:	4b2a      	ldr	r3, [pc, #168]	; (800d9a4 <tcp_rexmit_fast+0xb8>)
 800d8fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d900:	4929      	ldr	r1, [pc, #164]	; (800d9a8 <tcp_rexmit_fast+0xbc>)
 800d902:	482a      	ldr	r0, [pc, #168]	; (800d9ac <tcp_rexmit_fast+0xc0>)
 800d904:	f005 fe42 	bl	801358c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d045      	beq.n	800d99c <tcp_rexmit_fast+0xb0>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	8b5b      	ldrh	r3, [r3, #26]
 800d914:	f003 0304 	and.w	r3, r3, #4
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d13f      	bne.n	800d99c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff ff79 	bl	800d814 <tcp_rexmit>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d139      	bne.n	800d99c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d934:	4293      	cmp	r3, r2
 800d936:	bf28      	it	cs
 800d938:	4613      	movcs	r3, r2
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	da00      	bge.n	800d942 <tcp_rexmit_fast+0x56>
 800d940:	3301      	adds	r3, #1
 800d942:	105b      	asrs	r3, r3, #1
 800d944:	b29a      	uxth	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d952:	461a      	mov	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d958:	005b      	lsls	r3, r3, #1
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d206      	bcs.n	800d96c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	b29a      	uxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d976:	4619      	mov	r1, r3
 800d978:	0049      	lsls	r1, r1, #1
 800d97a:	440b      	add	r3, r1
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	4413      	add	r3, r2
 800d980:	b29a      	uxth	r2, r3
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	8b5b      	ldrh	r3, [r3, #26]
 800d98c:	f043 0304 	orr.w	r3, r3, #4
 800d990:	b29a      	uxth	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d99c:	bf00      	nop
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	0801620c 	.word	0x0801620c
 800d9a8:	080168ac 	.word	0x080168ac
 800d9ac:	08016260 	.word	0x08016260

0800d9b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	607b      	str	r3, [r7, #4]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	817b      	strh	r3, [r7, #10]
 800d9be:	4613      	mov	r3, r2
 800d9c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d9c2:	897a      	ldrh	r2, [r7, #10]
 800d9c4:	893b      	ldrh	r3, [r7, #8]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	3314      	adds	r3, #20
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	2022      	movs	r0, #34	; 0x22
 800d9d6:	f7f9 fc51 	bl	800727c <pbuf_alloc>
 800d9da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d04d      	beq.n	800da7e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d9e2:	897b      	ldrh	r3, [r7, #10]
 800d9e4:	3313      	adds	r3, #19
 800d9e6:	697a      	ldr	r2, [r7, #20]
 800d9e8:	8952      	ldrh	r2, [r2, #10]
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	db06      	blt.n	800d9fc <tcp_output_alloc_header_common+0x4c>
 800d9ee:	4b26      	ldr	r3, [pc, #152]	; (800da88 <tcp_output_alloc_header_common+0xd8>)
 800d9f0:	f240 7223 	movw	r2, #1827	; 0x723
 800d9f4:	4925      	ldr	r1, [pc, #148]	; (800da8c <tcp_output_alloc_header_common+0xdc>)
 800d9f6:	4826      	ldr	r0, [pc, #152]	; (800da90 <tcp_output_alloc_header_common+0xe0>)
 800d9f8:	f005 fdc8 	bl	801358c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800da02:	8c3b      	ldrh	r3, [r7, #32]
 800da04:	4618      	mov	r0, r3
 800da06:	f7f8 fa0f 	bl	8005e28 <lwip_htons>
 800da0a:	4603      	mov	r3, r0
 800da0c:	461a      	mov	r2, r3
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800da12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da14:	4618      	mov	r0, r3
 800da16:	f7f8 fa07 	bl	8005e28 <lwip_htons>
 800da1a:	4603      	mov	r3, r0
 800da1c:	461a      	mov	r2, r3
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f7f8 fa12 	bl	8005e52 <lwip_htonl>
 800da2e:	4602      	mov	r2, r0
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800da34:	897b      	ldrh	r3, [r7, #10]
 800da36:	089b      	lsrs	r3, r3, #2
 800da38:	b29b      	uxth	r3, r3
 800da3a:	3305      	adds	r3, #5
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	031b      	lsls	r3, r3, #12
 800da40:	b29a      	uxth	r2, r3
 800da42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da46:	b29b      	uxth	r3, r3
 800da48:	4313      	orrs	r3, r2
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7f8 f9eb 	bl	8005e28 <lwip_htons>
 800da52:	4603      	mov	r3, r0
 800da54:	461a      	mov	r2, r3
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800da5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7f8 f9e3 	bl	8005e28 <lwip_htons>
 800da62:	4603      	mov	r3, r0
 800da64:	461a      	mov	r2, r3
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	2200      	movs	r2, #0
 800da6e:	741a      	strb	r2, [r3, #16]
 800da70:	2200      	movs	r2, #0
 800da72:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	2200      	movs	r2, #0
 800da78:	749a      	strb	r2, [r3, #18]
 800da7a:	2200      	movs	r2, #0
 800da7c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800da7e:	697b      	ldr	r3, [r7, #20]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	0801620c 	.word	0x0801620c
 800da8c:	080168cc 	.word	0x080168cc
 800da90:	08016260 	.word	0x08016260

0800da94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800da94:	b5b0      	push	{r4, r5, r7, lr}
 800da96:	b08a      	sub	sp, #40	; 0x28
 800da98:	af04      	add	r7, sp, #16
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	607b      	str	r3, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	817b      	strh	r3, [r7, #10]
 800daa2:	4613      	mov	r3, r2
 800daa4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d106      	bne.n	800daba <tcp_output_alloc_header+0x26>
 800daac:	4b15      	ldr	r3, [pc, #84]	; (800db04 <tcp_output_alloc_header+0x70>)
 800daae:	f240 7242 	movw	r2, #1858	; 0x742
 800dab2:	4915      	ldr	r1, [pc, #84]	; (800db08 <tcp_output_alloc_header+0x74>)
 800dab4:	4815      	ldr	r0, [pc, #84]	; (800db0c <tcp_output_alloc_header+0x78>)
 800dab6:	f005 fd69 	bl	801358c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	8adb      	ldrh	r3, [r3, #22]
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	8b12      	ldrh	r2, [r2, #24]
 800dac6:	68f9      	ldr	r1, [r7, #12]
 800dac8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800daca:	893d      	ldrh	r5, [r7, #8]
 800dacc:	897c      	ldrh	r4, [r7, #10]
 800dace:	9103      	str	r1, [sp, #12]
 800dad0:	2110      	movs	r1, #16
 800dad2:	9102      	str	r1, [sp, #8]
 800dad4:	9201      	str	r2, [sp, #4]
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	462a      	mov	r2, r5
 800dadc:	4621      	mov	r1, r4
 800dade:	f7ff ff67 	bl	800d9b0 <tcp_output_alloc_header_common>
 800dae2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d006      	beq.n	800daf8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800daf2:	441a      	add	r2, r3
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800daf8:	697b      	ldr	r3, [r7, #20]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bdb0      	pop	{r4, r5, r7, pc}
 800db02:	bf00      	nop
 800db04:	0801620c 	.word	0x0801620c
 800db08:	080168fc 	.word	0x080168fc
 800db0c:	08016260 	.word	0x08016260

0800db10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b088      	sub	sp, #32
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	4611      	mov	r1, r2
 800db1c:	461a      	mov	r2, r3
 800db1e:	460b      	mov	r3, r1
 800db20:	71fb      	strb	r3, [r7, #7]
 800db22:	4613      	mov	r3, r2
 800db24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d106      	bne.n	800db3e <tcp_output_fill_options+0x2e>
 800db30:	4b13      	ldr	r3, [pc, #76]	; (800db80 <tcp_output_fill_options+0x70>)
 800db32:	f240 7256 	movw	r2, #1878	; 0x756
 800db36:	4913      	ldr	r1, [pc, #76]	; (800db84 <tcp_output_fill_options+0x74>)
 800db38:	4813      	ldr	r0, [pc, #76]	; (800db88 <tcp_output_fill_options+0x78>)
 800db3a:	f005 fd27 	bl	801358c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	3314      	adds	r3, #20
 800db48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	f103 0214 	add.w	r2, r3, #20
 800db50:	8bfb      	ldrh	r3, [r7, #30]
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4619      	mov	r1, r3
 800db56:	79fb      	ldrb	r3, [r7, #7]
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	f003 0304 	and.w	r3, r3, #4
 800db5e:	440b      	add	r3, r1
 800db60:	4413      	add	r3, r2
 800db62:	697a      	ldr	r2, [r7, #20]
 800db64:	429a      	cmp	r2, r3
 800db66:	d006      	beq.n	800db76 <tcp_output_fill_options+0x66>
 800db68:	4b05      	ldr	r3, [pc, #20]	; (800db80 <tcp_output_fill_options+0x70>)
 800db6a:	f240 7275 	movw	r2, #1909	; 0x775
 800db6e:	4907      	ldr	r1, [pc, #28]	; (800db8c <tcp_output_fill_options+0x7c>)
 800db70:	4805      	ldr	r0, [pc, #20]	; (800db88 <tcp_output_fill_options+0x78>)
 800db72:	f005 fd0b 	bl	801358c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800db76:	bf00      	nop
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	0801620c 	.word	0x0801620c
 800db84:	08016924 	.word	0x08016924
 800db88:	08016260 	.word	0x08016260
 800db8c:	0801681c 	.word	0x0801681c

0800db90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b08c      	sub	sp, #48	; 0x30
 800db94:	af04      	add	r7, sp, #16
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
 800db9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d106      	bne.n	800dbb2 <tcp_output_control_segment+0x22>
 800dba4:	4b28      	ldr	r3, [pc, #160]	; (800dc48 <tcp_output_control_segment+0xb8>)
 800dba6:	f240 7287 	movw	r2, #1927	; 0x787
 800dbaa:	4928      	ldr	r1, [pc, #160]	; (800dc4c <tcp_output_control_segment+0xbc>)
 800dbac:	4828      	ldr	r0, [pc, #160]	; (800dc50 <tcp_output_control_segment+0xc0>)
 800dbae:	f005 fced 	bl	801358c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f7fe faa4 	bl	800c104 <tcp_route>
 800dbbc:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d102      	bne.n	800dbca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800dbc4:	23fc      	movs	r3, #252	; 0xfc
 800dbc6:	77fb      	strb	r3, [r7, #31]
 800dbc8:	e034      	b.n	800dc34 <tcp_output_control_segment+0xa4>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	891a      	ldrh	r2, [r3, #8]
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2106      	movs	r1, #6
 800dbdc:	68b8      	ldr	r0, [r7, #8]
 800dbde:	f7f8 fabf 	bl	8006160 <ip_chksum_pseudo>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d006      	beq.n	800dbfe <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	7adb      	ldrb	r3, [r3, #11]
 800dbf4:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	7a9b      	ldrb	r3, [r3, #10]
 800dbfa:	777b      	strb	r3, [r7, #29]
 800dbfc:	e003      	b.n	800dc06 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800dbfe:	23ff      	movs	r3, #255	; 0xff
 800dc00:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800dc02:	2300      	movs	r3, #0
 800dc04:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 800dc06:	4b13      	ldr	r3, [pc, #76]	; (800dc54 <tcp_output_control_segment+0xc4>)
 800dc08:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	4b10      	ldr	r3, [pc, #64]	; (800dc54 <tcp_output_control_segment+0xc4>)
 800dc12:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dc16:	7fba      	ldrb	r2, [r7, #30]
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	9302      	str	r3, [sp, #8]
 800dc1c:	2306      	movs	r3, #6
 800dc1e:	9301      	str	r3, [sp, #4]
 800dc20:	7f7b      	ldrb	r3, [r7, #29]
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	4613      	mov	r3, r2
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	6879      	ldr	r1, [r7, #4]
 800dc2a:	68b8      	ldr	r0, [r7, #8]
 800dc2c:	f004 faa2 	bl	8012174 <ip4_output_if>
 800dc30:	4603      	mov	r3, r0
 800dc32:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dc34:	68b8      	ldr	r0, [r7, #8]
 800dc36:	f7f9 fdc1 	bl	80077bc <pbuf_free>
  return err;
 800dc3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3720      	adds	r7, #32
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	0801620c 	.word	0x0801620c
 800dc4c:	0801694c 	.word	0x0801694c
 800dc50:	08016260 	.word	0x08016260
 800dc54:	20007a48 	.word	0x20007a48

0800dc58 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800dc58:	b590      	push	{r4, r7, lr}
 800dc5a:	b08b      	sub	sp, #44	; 0x2c
 800dc5c:	af04      	add	r7, sp, #16
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
 800dc64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d106      	bne.n	800dc7a <tcp_rst+0x22>
 800dc6c:	4b1f      	ldr	r3, [pc, #124]	; (800dcec <tcp_rst+0x94>)
 800dc6e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dc72:	491f      	ldr	r1, [pc, #124]	; (800dcf0 <tcp_rst+0x98>)
 800dc74:	481f      	ldr	r0, [pc, #124]	; (800dcf4 <tcp_rst+0x9c>)
 800dc76:	f005 fc89 	bl	801358c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800dc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <tcp_rst+0x36>
 800dc80:	4b1a      	ldr	r3, [pc, #104]	; (800dcec <tcp_rst+0x94>)
 800dc82:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dc86:	491c      	ldr	r1, [pc, #112]	; (800dcf8 <tcp_rst+0xa0>)
 800dc88:	481a      	ldr	r0, [pc, #104]	; (800dcf4 <tcp_rst+0x9c>)
 800dc8a:	f005 fc7f 	bl	801358c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800dc8e:	2300      	movs	r3, #0
 800dc90:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800dc92:	f246 0308 	movw	r3, #24584	; 0x6008
 800dc96:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800dc98:	7dfb      	ldrb	r3, [r7, #23]
 800dc9a:	b29c      	uxth	r4, r3
 800dc9c:	68b8      	ldr	r0, [r7, #8]
 800dc9e:	f7f8 f8d8 	bl	8005e52 <lwip_htonl>
 800dca2:	4602      	mov	r2, r0
 800dca4:	8abb      	ldrh	r3, [r7, #20]
 800dca6:	9303      	str	r3, [sp, #12]
 800dca8:	2314      	movs	r3, #20
 800dcaa:	9302      	str	r3, [sp, #8]
 800dcac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dcae:	9301      	str	r3, [sp, #4]
 800dcb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dcb2:	9300      	str	r3, [sp, #0]
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	4621      	mov	r1, r4
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7ff fe78 	bl	800d9b0 <tcp_output_alloc_header_common>
 800dcc0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d00c      	beq.n	800dce2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dcc8:	7dfb      	ldrb	r3, [r7, #23]
 800dcca:	2200      	movs	r2, #0
 800dccc:	6939      	ldr	r1, [r7, #16]
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f7ff ff1e 	bl	800db10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	683a      	ldr	r2, [r7, #0]
 800dcd8:	6939      	ldr	r1, [r7, #16]
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f7ff ff58 	bl	800db90 <tcp_output_control_segment>
 800dce0:	e000      	b.n	800dce4 <tcp_rst+0x8c>
    return;
 800dce2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800dce4:	371c      	adds	r7, #28
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd90      	pop	{r4, r7, pc}
 800dcea:	bf00      	nop
 800dcec:	0801620c 	.word	0x0801620c
 800dcf0:	08016978 	.word	0x08016978
 800dcf4:	08016260 	.word	0x08016260
 800dcf8:	08016994 	.word	0x08016994

0800dcfc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800dcfc:	b590      	push	{r4, r7, lr}
 800dcfe:	b087      	sub	sp, #28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800dd04:	2300      	movs	r3, #0
 800dd06:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d106      	bne.n	800dd20 <tcp_send_empty_ack+0x24>
 800dd12:	4b28      	ldr	r3, [pc, #160]	; (800ddb4 <tcp_send_empty_ack+0xb8>)
 800dd14:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800dd18:	4927      	ldr	r1, [pc, #156]	; (800ddb8 <tcp_send_empty_ack+0xbc>)
 800dd1a:	4828      	ldr	r0, [pc, #160]	; (800ddbc <tcp_send_empty_ack+0xc0>)
 800dd1c:	f005 fc36 	bl	801358c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dd20:	7dfb      	ldrb	r3, [r7, #23]
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	f003 0304 	and.w	r3, r3, #4
 800dd2a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800dd2c:	7d7b      	ldrb	r3, [r7, #21]
 800dd2e:	b29c      	uxth	r4, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7f8 f88c 	bl	8005e52 <lwip_htonl>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	4621      	mov	r1, r4
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff fea7 	bl	800da94 <tcp_output_alloc_header>
 800dd46:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d109      	bne.n	800dd62 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	8b5b      	ldrh	r3, [r3, #26]
 800dd52:	f043 0303 	orr.w	r3, r3, #3
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dd5c:	f06f 0301 	mvn.w	r3, #1
 800dd60:	e023      	b.n	800ddaa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dd62:	7dbb      	ldrb	r3, [r7, #22]
 800dd64:	7dfa      	ldrb	r2, [r7, #23]
 800dd66:	6939      	ldr	r1, [r7, #16]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7ff fed1 	bl	800db10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	3304      	adds	r3, #4
 800dd74:	6939      	ldr	r1, [r7, #16]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff ff0a 	bl	800db90 <tcp_output_control_segment>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dd80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d007      	beq.n	800dd98 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	8b5b      	ldrh	r3, [r3, #26]
 800dd8c:	f043 0303 	orr.w	r3, r3, #3
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	835a      	strh	r2, [r3, #26]
 800dd96:	e006      	b.n	800dda6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	8b5b      	ldrh	r3, [r3, #26]
 800dd9c:	f023 0303 	bic.w	r3, r3, #3
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800dda6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	371c      	adds	r7, #28
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd90      	pop	{r4, r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	0801620c 	.word	0x0801620c
 800ddb8:	080169b0 	.word	0x080169b0
 800ddbc:	08016260 	.word	0x08016260

0800ddc0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ddc0:	b590      	push	{r4, r7, lr}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ddc8:	2300      	movs	r3, #0
 800ddca:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d106      	bne.n	800dde0 <tcp_keepalive+0x20>
 800ddd2:	4b18      	ldr	r3, [pc, #96]	; (800de34 <tcp_keepalive+0x74>)
 800ddd4:	f640 0224 	movw	r2, #2084	; 0x824
 800ddd8:	4917      	ldr	r1, [pc, #92]	; (800de38 <tcp_keepalive+0x78>)
 800ddda:	4818      	ldr	r0, [pc, #96]	; (800de3c <tcp_keepalive+0x7c>)
 800dddc:	f005 fbd6 	bl	801358c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dde0:	7dfb      	ldrb	r3, [r7, #23]
 800dde2:	b29c      	uxth	r4, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dde8:	3b01      	subs	r3, #1
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7f8 f831 	bl	8005e52 <lwip_htonl>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7ff fe4c 	bl	800da94 <tcp_output_alloc_header>
 800ddfc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d102      	bne.n	800de0a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800de04:	f04f 33ff 	mov.w	r3, #4294967295
 800de08:	e010      	b.n	800de2c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
 800de0c:	2200      	movs	r2, #0
 800de0e:	6939      	ldr	r1, [r7, #16]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff fe7d 	bl	800db10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	3304      	adds	r3, #4
 800de1c:	6939      	ldr	r1, [r7, #16]
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff feb6 	bl	800db90 <tcp_output_control_segment>
 800de24:	4603      	mov	r3, r0
 800de26:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800de28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	371c      	adds	r7, #28
 800de30:	46bd      	mov	sp, r7
 800de32:	bd90      	pop	{r4, r7, pc}
 800de34:	0801620c 	.word	0x0801620c
 800de38:	080169d0 	.word	0x080169d0
 800de3c:	08016260 	.word	0x08016260

0800de40 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800de40:	b590      	push	{r4, r7, lr}
 800de42:	b08b      	sub	sp, #44	; 0x2c
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800de48:	2300      	movs	r3, #0
 800de4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d106      	bne.n	800de62 <tcp_zero_window_probe+0x22>
 800de54:	4b4c      	ldr	r3, [pc, #304]	; (800df88 <tcp_zero_window_probe+0x148>)
 800de56:	f640 024f 	movw	r2, #2127	; 0x84f
 800de5a:	494c      	ldr	r1, [pc, #304]	; (800df8c <tcp_zero_window_probe+0x14c>)
 800de5c:	484c      	ldr	r0, [pc, #304]	; (800df90 <tcp_zero_window_probe+0x150>)
 800de5e:	f005 fb95 	bl	801358c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de66:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800de68:	6a3b      	ldr	r3, [r7, #32]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d101      	bne.n	800de72 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	e086      	b.n	800df80 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800de78:	2bff      	cmp	r3, #255	; 0xff
 800de7a:	d007      	beq.n	800de8c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800de82:	3301      	adds	r3, #1
 800de84:	b2da      	uxtb	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	899b      	ldrh	r3, [r3, #12]
 800de92:	b29b      	uxth	r3, r3
 800de94:	4618      	mov	r0, r3
 800de96:	f7f7 ffc7 	bl	8005e28 <lwip_htons>
 800de9a:	4603      	mov	r3, r0
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	f003 0301 	and.w	r3, r3, #1
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d005      	beq.n	800deb2 <tcp_zero_window_probe+0x72>
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	891b      	ldrh	r3, [r3, #8]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d101      	bne.n	800deb2 <tcp_zero_window_probe+0x72>
 800deae:	2301      	movs	r3, #1
 800deb0:	e000      	b.n	800deb4 <tcp_zero_window_probe+0x74>
 800deb2:	2300      	movs	r3, #0
 800deb4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800deb6:	7ffb      	ldrb	r3, [r7, #31]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	bf0c      	ite	eq
 800debc:	2301      	moveq	r3, #1
 800debe:	2300      	movne	r3, #0
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dec8:	b299      	uxth	r1, r3
 800deca:	6a3b      	ldr	r3, [r7, #32]
 800decc:	68db      	ldr	r3, [r3, #12]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	8bba      	ldrh	r2, [r7, #28]
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7ff fdde 	bl	800da94 <tcp_output_alloc_header>
 800ded8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d102      	bne.n	800dee6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800dee0:	f04f 33ff 	mov.w	r3, #4294967295
 800dee4:	e04c      	b.n	800df80 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800deec:	7ffb      	ldrb	r3, [r7, #31]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d011      	beq.n	800df16 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	899b      	ldrh	r3, [r3, #12]
 800def6:	b29b      	uxth	r3, r3
 800def8:	b21b      	sxth	r3, r3
 800defa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800defe:	b21c      	sxth	r4, r3
 800df00:	2011      	movs	r0, #17
 800df02:	f7f7 ff91 	bl	8005e28 <lwip_htons>
 800df06:	4603      	mov	r3, r0
 800df08:	b21b      	sxth	r3, r3
 800df0a:	4323      	orrs	r3, r4
 800df0c:	b21b      	sxth	r3, r3
 800df0e:	b29a      	uxth	r2, r3
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	819a      	strh	r2, [r3, #12]
 800df14:	e010      	b.n	800df38 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	3314      	adds	r3, #20
 800df1c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	6858      	ldr	r0, [r3, #4]
 800df22:	6a3b      	ldr	r3, [r7, #32]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	891a      	ldrh	r2, [r3, #8]
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	891b      	ldrh	r3, [r3, #8]
 800df2c:	1ad3      	subs	r3, r2, r3
 800df2e:	b29b      	uxth	r3, r3
 800df30:	2201      	movs	r2, #1
 800df32:	6939      	ldr	r1, [r7, #16]
 800df34:	f7f9 fe3c 	bl	8007bb0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800df38:	6a3b      	ldr	r3, [r7, #32]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	4618      	mov	r0, r3
 800df40:	f7f7 ff87 	bl	8005e52 <lwip_htonl>
 800df44:	4603      	mov	r3, r0
 800df46:	3301      	adds	r3, #1
 800df48:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	da02      	bge.n	800df5c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800df5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df60:	2200      	movs	r2, #0
 800df62:	69b9      	ldr	r1, [r7, #24]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7ff fdd3 	bl	800db10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	3304      	adds	r3, #4
 800df70:	69b9      	ldr	r1, [r7, #24]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7ff fe0c 	bl	800db90 <tcp_output_control_segment>
 800df78:	4603      	mov	r3, r0
 800df7a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800df7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800df80:	4618      	mov	r0, r3
 800df82:	372c      	adds	r7, #44	; 0x2c
 800df84:	46bd      	mov	sp, r7
 800df86:	bd90      	pop	{r4, r7, pc}
 800df88:	0801620c 	.word	0x0801620c
 800df8c:	080169ec 	.word	0x080169ec
 800df90:	08016260 	.word	0x08016260

0800df94 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800df9c:	f7f9 fefe 	bl	8007d9c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800dfa0:	4b0a      	ldr	r3, [pc, #40]	; (800dfcc <tcpip_tcp_timer+0x38>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d103      	bne.n	800dfb0 <tcpip_tcp_timer+0x1c>
 800dfa8:	4b09      	ldr	r3, [pc, #36]	; (800dfd0 <tcpip_tcp_timer+0x3c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d005      	beq.n	800dfbc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	4908      	ldr	r1, [pc, #32]	; (800dfd4 <tcpip_tcp_timer+0x40>)
 800dfb4:	20fa      	movs	r0, #250	; 0xfa
 800dfb6:	f000 f8f3 	bl	800e1a0 <sys_timeout>
 800dfba:	e003      	b.n	800dfc4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800dfbc:	4b06      	ldr	r3, [pc, #24]	; (800dfd8 <tcpip_tcp_timer+0x44>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]
  }
}
 800dfc2:	bf00      	nop
 800dfc4:	bf00      	nop
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	20007b24 	.word	0x20007b24
 800dfd0:	20007b34 	.word	0x20007b34
 800dfd4:	0800df95 	.word	0x0800df95
 800dfd8:	200005d0 	.word	0x200005d0

0800dfdc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800dfe0:	4b0a      	ldr	r3, [pc, #40]	; (800e00c <tcp_timer_needed+0x30>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d10f      	bne.n	800e008 <tcp_timer_needed+0x2c>
 800dfe8:	4b09      	ldr	r3, [pc, #36]	; (800e010 <tcp_timer_needed+0x34>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d103      	bne.n	800dff8 <tcp_timer_needed+0x1c>
 800dff0:	4b08      	ldr	r3, [pc, #32]	; (800e014 <tcp_timer_needed+0x38>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d007      	beq.n	800e008 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800dff8:	4b04      	ldr	r3, [pc, #16]	; (800e00c <tcp_timer_needed+0x30>)
 800dffa:	2201      	movs	r2, #1
 800dffc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800dffe:	2200      	movs	r2, #0
 800e000:	4905      	ldr	r1, [pc, #20]	; (800e018 <tcp_timer_needed+0x3c>)
 800e002:	20fa      	movs	r0, #250	; 0xfa
 800e004:	f000 f8cc 	bl	800e1a0 <sys_timeout>
  }
}
 800e008:	bf00      	nop
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	200005d0 	.word	0x200005d0
 800e010:	20007b24 	.word	0x20007b24
 800e014:	20007b34 	.word	0x20007b34
 800e018:	0800df95 	.word	0x0800df95

0800e01c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e028:	2006      	movs	r0, #6
 800e02a:	f7f8 fdaf 	bl	8006b8c <memp_malloc>
 800e02e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d109      	bne.n	800e04a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d151      	bne.n	800e0e0 <sys_timeout_abs+0xc4>
 800e03c:	4b2a      	ldr	r3, [pc, #168]	; (800e0e8 <sys_timeout_abs+0xcc>)
 800e03e:	22be      	movs	r2, #190	; 0xbe
 800e040:	492a      	ldr	r1, [pc, #168]	; (800e0ec <sys_timeout_abs+0xd0>)
 800e042:	482b      	ldr	r0, [pc, #172]	; (800e0f0 <sys_timeout_abs+0xd4>)
 800e044:	f005 faa2 	bl	801358c <iprintf>
    return;
 800e048:	e04a      	b.n	800e0e0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	2200      	movs	r2, #0
 800e04e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e062:	4b24      	ldr	r3, [pc, #144]	; (800e0f4 <sys_timeout_abs+0xd8>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d103      	bne.n	800e072 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e06a:	4a22      	ldr	r2, [pc, #136]	; (800e0f4 <sys_timeout_abs+0xd8>)
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	6013      	str	r3, [r2, #0]
    return;
 800e070:	e037      	b.n	800e0e2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	4b1f      	ldr	r3, [pc, #124]	; (800e0f4 <sys_timeout_abs+0xd8>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	1ad3      	subs	r3, r2, r3
 800e07e:	0fdb      	lsrs	r3, r3, #31
 800e080:	f003 0301 	and.w	r3, r3, #1
 800e084:	b2db      	uxtb	r3, r3
 800e086:	2b00      	cmp	r3, #0
 800e088:	d007      	beq.n	800e09a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e08a:	4b1a      	ldr	r3, [pc, #104]	; (800e0f4 <sys_timeout_abs+0xd8>)
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e092:	4a18      	ldr	r2, [pc, #96]	; (800e0f4 <sys_timeout_abs+0xd8>)
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	e023      	b.n	800e0e2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e09a:	4b16      	ldr	r3, [pc, #88]	; (800e0f4 <sys_timeout_abs+0xd8>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	617b      	str	r3, [r7, #20]
 800e0a0:	e01a      	b.n	800e0d8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00b      	beq.n	800e0c2 <sys_timeout_abs+0xa6>
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	0fdb      	lsrs	r3, r3, #31
 800e0b8:	f003 0301 	and.w	r3, r3, #1
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d007      	beq.n	800e0d2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	693a      	ldr	r2, [r7, #16]
 800e0ce:	601a      	str	r2, [r3, #0]
        break;
 800e0d0:	e007      	b.n	800e0e2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	617b      	str	r3, [r7, #20]
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1e1      	bne.n	800e0a2 <sys_timeout_abs+0x86>
 800e0de:	e000      	b.n	800e0e2 <sys_timeout_abs+0xc6>
    return;
 800e0e0:	bf00      	nop
      }
    }
  }
}
 800e0e2:	3718      	adds	r7, #24
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	08016a10 	.word	0x08016a10
 800e0ec:	08016a44 	.word	0x08016a44
 800e0f0:	08016a84 	.word	0x08016a84
 800e0f4:	200005c8 	.word	0x200005c8

0800e0f8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	4798      	blx	r3

  now = sys_now();
 800e10a:	f7f6 fb2b 	bl	8004764 <sys_now>
 800e10e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	4b0f      	ldr	r3, [pc, #60]	; (800e154 <lwip_cyclic_timer+0x5c>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4413      	add	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e11c:	68fa      	ldr	r2, [r7, #12]
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	1ad3      	subs	r3, r2, r3
 800e122:	0fdb      	lsrs	r3, r3, #31
 800e124:	f003 0301 	and.w	r3, r3, #1
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d009      	beq.n	800e142 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	4413      	add	r3, r2
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	4907      	ldr	r1, [pc, #28]	; (800e158 <lwip_cyclic_timer+0x60>)
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff ff6e 	bl	800e01c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e140:	e004      	b.n	800e14c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	4904      	ldr	r1, [pc, #16]	; (800e158 <lwip_cyclic_timer+0x60>)
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f7ff ff68 	bl	800e01c <sys_timeout_abs>
}
 800e14c:	bf00      	nop
 800e14e:	3718      	adds	r7, #24
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	200005cc 	.word	0x200005cc
 800e158:	0800e0f9 	.word	0x0800e0f9

0800e15c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e162:	2301      	movs	r3, #1
 800e164:	607b      	str	r3, [r7, #4]
 800e166:	e00e      	b.n	800e186 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e168:	4a0b      	ldr	r2, [pc, #44]	; (800e198 <sys_timeouts_init+0x3c>)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	00db      	lsls	r3, r3, #3
 800e174:	4a08      	ldr	r2, [pc, #32]	; (800e198 <sys_timeouts_init+0x3c>)
 800e176:	4413      	add	r3, r2
 800e178:	461a      	mov	r2, r3
 800e17a:	4908      	ldr	r1, [pc, #32]	; (800e19c <sys_timeouts_init+0x40>)
 800e17c:	f000 f810 	bl	800e1a0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	3301      	adds	r3, #1
 800e184:	607b      	str	r3, [r7, #4]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b04      	cmp	r3, #4
 800e18a:	d9ed      	bls.n	800e168 <sys_timeouts_init+0xc>
  }
}
 800e18c:	bf00      	nop
 800e18e:	bf00      	nop
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	08039718 	.word	0x08039718
 800e19c:	0800e0f9 	.word	0x0800e0f9

0800e1a0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1b2:	d306      	bcc.n	800e1c2 <sys_timeout+0x22>
 800e1b4:	4b0a      	ldr	r3, [pc, #40]	; (800e1e0 <sys_timeout+0x40>)
 800e1b6:	f240 1229 	movw	r2, #297	; 0x129
 800e1ba:	490a      	ldr	r1, [pc, #40]	; (800e1e4 <sys_timeout+0x44>)
 800e1bc:	480a      	ldr	r0, [pc, #40]	; (800e1e8 <sys_timeout+0x48>)
 800e1be:	f005 f9e5 	bl	801358c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e1c2:	f7f6 facf 	bl	8004764 <sys_now>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	68b9      	ldr	r1, [r7, #8]
 800e1d2:	6978      	ldr	r0, [r7, #20]
 800e1d4:	f7ff ff22 	bl	800e01c <sys_timeout_abs>
#endif
}
 800e1d8:	bf00      	nop
 800e1da:	3718      	adds	r7, #24
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	08016a10 	.word	0x08016a10
 800e1e4:	08016aac 	.word	0x08016aac
 800e1e8:	08016a84 	.word	0x08016a84

0800e1ec <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e1f2:	f7f6 fab7 	bl	8004764 <sys_now>
 800e1f6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e1f8:	4b1a      	ldr	r3, [pc, #104]	; (800e264 <sys_check_timeouts+0x78>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d001      	beq.n	800e206 <sys_check_timeouts+0x1a>
 800e202:	f7f8 ffe5 	bl	80071d0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e206:	4b18      	ldr	r3, [pc, #96]	; (800e268 <sys_check_timeouts+0x7c>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d022      	beq.n	800e258 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	68fa      	ldr	r2, [r7, #12]
 800e218:	1ad3      	subs	r3, r2, r3
 800e21a:	0fdb      	lsrs	r3, r3, #31
 800e21c:	f003 0301 	and.w	r3, r3, #1
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b00      	cmp	r3, #0
 800e224:	d11a      	bne.n	800e25c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a0f      	ldr	r2, [pc, #60]	; (800e268 <sys_check_timeouts+0x7c>)
 800e22c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	68db      	ldr	r3, [r3, #12]
 800e238:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	4a0b      	ldr	r2, [pc, #44]	; (800e26c <sys_check_timeouts+0x80>)
 800e240:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e242:	68b9      	ldr	r1, [r7, #8]
 800e244:	2006      	movs	r0, #6
 800e246:	f7f8 fce3 	bl	8006c10 <memp_free>
    if (handler != NULL) {
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d0d3      	beq.n	800e1f8 <sys_check_timeouts+0xc>
      handler(arg);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6838      	ldr	r0, [r7, #0]
 800e254:	4798      	blx	r3
  do {
 800e256:	e7cf      	b.n	800e1f8 <sys_check_timeouts+0xc>
      return;
 800e258:	bf00      	nop
 800e25a:	e000      	b.n	800e25e <sys_check_timeouts+0x72>
      return;
 800e25c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e25e:	3710      	adds	r7, #16
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	20007a44 	.word	0x20007a44
 800e268:	200005c8 	.word	0x200005c8
 800e26c:	200005cc 	.word	0x200005cc

0800e270 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e274:	f005 f9a2 	bl	80135bc <rand>
 800e278:	4603      	mov	r3, r0
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e280:	b29b      	uxth	r3, r3
 800e282:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e286:	b29a      	uxth	r2, r3
 800e288:	4b01      	ldr	r3, [pc, #4]	; (800e290 <udp_init+0x20>)
 800e28a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e28c:	bf00      	nop
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	2000001c 	.word	0x2000001c

0800e294 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e29e:	4b17      	ldr	r3, [pc, #92]	; (800e2fc <udp_new_port+0x68>)
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	b291      	uxth	r1, r2
 800e2a6:	4a15      	ldr	r2, [pc, #84]	; (800e2fc <udp_new_port+0x68>)
 800e2a8:	8011      	strh	r1, [r2, #0]
 800e2aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d103      	bne.n	800e2ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e2b2:	4b12      	ldr	r3, [pc, #72]	; (800e2fc <udp_new_port+0x68>)
 800e2b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e2b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2ba:	4b11      	ldr	r3, [pc, #68]	; (800e300 <udp_new_port+0x6c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	603b      	str	r3, [r7, #0]
 800e2c0:	e011      	b.n	800e2e6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	8a5a      	ldrh	r2, [r3, #18]
 800e2c6:	4b0d      	ldr	r3, [pc, #52]	; (800e2fc <udp_new_port+0x68>)
 800e2c8:	881b      	ldrh	r3, [r3, #0]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d108      	bne.n	800e2e0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e2ce:	88fb      	ldrh	r3, [r7, #6]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	80fb      	strh	r3, [r7, #6]
 800e2d4:	88fb      	ldrh	r3, [r7, #6]
 800e2d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2da:	d3e0      	bcc.n	800e29e <udp_new_port+0xa>
        return 0;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	e007      	b.n	800e2f0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	603b      	str	r3, [r7, #0]
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1ea      	bne.n	800e2c2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e2ec:	4b03      	ldr	r3, [pc, #12]	; (800e2fc <udp_new_port+0x68>)
 800e2ee:	881b      	ldrh	r3, [r3, #0]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr
 800e2fc:	2000001c 	.word	0x2000001c
 800e300:	20007b3c 	.word	0x20007b3c

0800e304 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	60b9      	str	r1, [r7, #8]
 800e30e:	4613      	mov	r3, r2
 800e310:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d105      	bne.n	800e324 <udp_input_local_match+0x20>
 800e318:	4b27      	ldr	r3, [pc, #156]	; (800e3b8 <udp_input_local_match+0xb4>)
 800e31a:	2287      	movs	r2, #135	; 0x87
 800e31c:	4927      	ldr	r1, [pc, #156]	; (800e3bc <udp_input_local_match+0xb8>)
 800e31e:	4828      	ldr	r0, [pc, #160]	; (800e3c0 <udp_input_local_match+0xbc>)
 800e320:	f005 f934 	bl	801358c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d105      	bne.n	800e336 <udp_input_local_match+0x32>
 800e32a:	4b23      	ldr	r3, [pc, #140]	; (800e3b8 <udp_input_local_match+0xb4>)
 800e32c:	2288      	movs	r2, #136	; 0x88
 800e32e:	4925      	ldr	r1, [pc, #148]	; (800e3c4 <udp_input_local_match+0xc0>)
 800e330:	4823      	ldr	r0, [pc, #140]	; (800e3c0 <udp_input_local_match+0xbc>)
 800e332:	f005 f92b 	bl	801358c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	7a1b      	ldrb	r3, [r3, #8]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00b      	beq.n	800e356 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	7a1a      	ldrb	r2, [r3, #8]
 800e342:	4b21      	ldr	r3, [pc, #132]	; (800e3c8 <udp_input_local_match+0xc4>)
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e34a:	3301      	adds	r3, #1
 800e34c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e34e:	429a      	cmp	r2, r3
 800e350:	d001      	beq.n	800e356 <udp_input_local_match+0x52>
    return 0;
 800e352:	2300      	movs	r3, #0
 800e354:	e02b      	b.n	800e3ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e356:	79fb      	ldrb	r3, [r7, #7]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d018      	beq.n	800e38e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d013      	beq.n	800e38a <udp_input_local_match+0x86>
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00f      	beq.n	800e38a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e36a:	4b17      	ldr	r3, [pc, #92]	; (800e3c8 <udp_input_local_match+0xc4>)
 800e36c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e372:	d00a      	beq.n	800e38a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	4b13      	ldr	r3, [pc, #76]	; (800e3c8 <udp_input_local_match+0xc4>)
 800e37a:	695b      	ldr	r3, [r3, #20]
 800e37c:	405a      	eors	r2, r3
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	3308      	adds	r3, #8
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e386:	2b00      	cmp	r3, #0
 800e388:	d110      	bne.n	800e3ac <udp_input_local_match+0xa8>
          return 1;
 800e38a:	2301      	movs	r3, #1
 800e38c:	e00f      	b.n	800e3ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d009      	beq.n	800e3a8 <udp_input_local_match+0xa4>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d005      	beq.n	800e3a8 <udp_input_local_match+0xa4>
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	4b09      	ldr	r3, [pc, #36]	; (800e3c8 <udp_input_local_match+0xc4>)
 800e3a2:	695b      	ldr	r3, [r3, #20]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d101      	bne.n	800e3ac <udp_input_local_match+0xa8>
        return 1;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e000      	b.n	800e3ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	08016af8 	.word	0x08016af8
 800e3bc:	08016b28 	.word	0x08016b28
 800e3c0:	08016b4c 	.word	0x08016b4c
 800e3c4:	08016b74 	.word	0x08016b74
 800e3c8:	20004534 	.word	0x20004534

0800e3cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e3cc:	b590      	push	{r4, r7, lr}
 800e3ce:	b08d      	sub	sp, #52	; 0x34
 800e3d0:	af02      	add	r7, sp, #8
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d105      	bne.n	800e3ec <udp_input+0x20>
 800e3e0:	4b9f      	ldr	r3, [pc, #636]	; (800e660 <udp_input+0x294>)
 800e3e2:	22cf      	movs	r2, #207	; 0xcf
 800e3e4:	499f      	ldr	r1, [pc, #636]	; (800e664 <udp_input+0x298>)
 800e3e6:	48a0      	ldr	r0, [pc, #640]	; (800e668 <udp_input+0x29c>)
 800e3e8:	f005 f8d0 	bl	801358c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d105      	bne.n	800e3fe <udp_input+0x32>
 800e3f2:	4b9b      	ldr	r3, [pc, #620]	; (800e660 <udp_input+0x294>)
 800e3f4:	22d0      	movs	r2, #208	; 0xd0
 800e3f6:	499d      	ldr	r1, [pc, #628]	; (800e66c <udp_input+0x2a0>)
 800e3f8:	489b      	ldr	r0, [pc, #620]	; (800e668 <udp_input+0x29c>)
 800e3fa:	f005 f8c7 	bl	801358c <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800e3fe:	4b9c      	ldr	r3, [pc, #624]	; (800e670 <udp_input+0x2a4>)
 800e400:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800e404:	3301      	adds	r3, #1
 800e406:	b29a      	uxth	r2, r3
 800e408:	4b99      	ldr	r3, [pc, #612]	; (800e670 <udp_input+0x2a4>)
 800e40a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	895b      	ldrh	r3, [r3, #10]
 800e412:	2b07      	cmp	r3, #7
 800e414:	d813      	bhi.n	800e43e <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800e416:	4b96      	ldr	r3, [pc, #600]	; (800e670 <udp_input+0x2a4>)
 800e418:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e41c:	3301      	adds	r3, #1
 800e41e:	b29a      	uxth	r2, r3
 800e420:	4b93      	ldr	r3, [pc, #588]	; (800e670 <udp_input+0x2a4>)
 800e422:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800e426:	4b92      	ldr	r3, [pc, #584]	; (800e670 <udp_input+0x2a4>)
 800e428:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e42c:	3301      	adds	r3, #1
 800e42e:	b29a      	uxth	r2, r3
 800e430:	4b8f      	ldr	r3, [pc, #572]	; (800e670 <udp_input+0x2a4>)
 800e432:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7f9 f9c0 	bl	80077bc <pbuf_free>
    goto end;
 800e43c:	e124      	b.n	800e688 <udp_input+0x2bc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e444:	4b8b      	ldr	r3, [pc, #556]	; (800e674 <udp_input+0x2a8>)
 800e446:	695b      	ldr	r3, [r3, #20]
 800e448:	4a8a      	ldr	r2, [pc, #552]	; (800e674 <udp_input+0x2a8>)
 800e44a:	6812      	ldr	r2, [r2, #0]
 800e44c:	4611      	mov	r1, r2
 800e44e:	4618      	mov	r0, r3
 800e450:	f003 ffe8 	bl	8012424 <ip4_addr_isbroadcast_u32>
 800e454:	4603      	mov	r3, r0
 800e456:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f7 fce2 	bl	8005e28 <lwip_htons>
 800e464:	4603      	mov	r3, r0
 800e466:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	885b      	ldrh	r3, [r3, #2]
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	4618      	mov	r0, r3
 800e470:	f7f7 fcda 	bl	8005e28 <lwip_htons>
 800e474:	4603      	mov	r3, r0
 800e476:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e47c:	2300      	movs	r3, #0
 800e47e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e480:	2300      	movs	r3, #0
 800e482:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e484:	4b7c      	ldr	r3, [pc, #496]	; (800e678 <udp_input+0x2ac>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	627b      	str	r3, [r7, #36]	; 0x24
 800e48a:	e05d      	b.n	800e548 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	8a5b      	ldrh	r3, [r3, #18]
 800e490:	89fa      	ldrh	r2, [r7, #14]
 800e492:	429a      	cmp	r2, r3
 800e494:	d153      	bne.n	800e53e <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e496:	7cfb      	ldrb	r3, [r7, #19]
 800e498:	461a      	mov	r2, r3
 800e49a:	6839      	ldr	r1, [r7, #0]
 800e49c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e49e:	f7ff ff31 	bl	800e304 <udp_input_local_match>
 800e4a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d04a      	beq.n	800e53e <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4aa:	7c1b      	ldrb	r3, [r3, #16]
 800e4ac:	f003 0304 	and.w	r3, r3, #4
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d11d      	bne.n	800e4f0 <udp_input+0x124>
        if (uncon_pcb == NULL) {
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d102      	bne.n	800e4c0 <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	61fb      	str	r3, [r7, #28]
 800e4be:	e017      	b.n	800e4f0 <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e4c0:	7cfb      	ldrb	r3, [r7, #19]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d014      	beq.n	800e4f0 <udp_input+0x124>
 800e4c6:	4b6b      	ldr	r3, [pc, #428]	; (800e674 <udp_input+0x2a8>)
 800e4c8:	695b      	ldr	r3, [r3, #20]
 800e4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ce:	d10f      	bne.n	800e4f0 <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	3304      	adds	r3, #4
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d008      	beq.n	800e4f0 <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	3304      	adds	r3, #4
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d101      	bne.n	800e4f0 <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	8a9b      	ldrh	r3, [r3, #20]
 800e4f4:	8a3a      	ldrh	r2, [r7, #16]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d121      	bne.n	800e53e <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d005      	beq.n	800e50e <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	685a      	ldr	r2, [r3, #4]
 800e506:	4b5b      	ldr	r3, [pc, #364]	; (800e674 <udp_input+0x2a8>)
 800e508:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d117      	bne.n	800e53e <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e50e:	6a3b      	ldr	r3, [r7, #32]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00b      	beq.n	800e52c <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	68da      	ldr	r2, [r3, #12]
 800e518:	6a3b      	ldr	r3, [r7, #32]
 800e51a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e51c:	4b56      	ldr	r3, [pc, #344]	; (800e678 <udp_input+0x2ac>)
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e524:	4a54      	ldr	r2, [pc, #336]	; (800e678 <udp_input+0x2ac>)
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e52a:	e010      	b.n	800e54e <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 800e52c:	4b50      	ldr	r3, [pc, #320]	; (800e670 <udp_input+0x2a4>)
 800e52e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800e532:	3301      	adds	r3, #1
 800e534:	b29a      	uxth	r2, r3
 800e536:	4b4e      	ldr	r3, [pc, #312]	; (800e670 <udp_input+0x2a4>)
 800e538:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800e53c:	e007      	b.n	800e54e <udp_input+0x182>
      }
    }

    prev = pcb;
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	627b      	str	r3, [r7, #36]	; 0x24
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d19e      	bne.n	800e48c <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	2b00      	cmp	r3, #0
 800e552:	d101      	bne.n	800e558 <udp_input+0x18c>
    pcb = uncon_pcb;
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d002      	beq.n	800e564 <udp_input+0x198>
    for_us = 1;
 800e55e:	2301      	movs	r3, #1
 800e560:	76fb      	strb	r3, [r7, #27]
 800e562:	e00a      	b.n	800e57a <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	3304      	adds	r3, #4
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	4b42      	ldr	r3, [pc, #264]	; (800e674 <udp_input+0x2a8>)
 800e56c:	695b      	ldr	r3, [r3, #20]
 800e56e:	429a      	cmp	r2, r3
 800e570:	bf0c      	ite	eq
 800e572:	2301      	moveq	r3, #1
 800e574:	2300      	movne	r3, #0
 800e576:	b2db      	uxtb	r3, r3
 800e578:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e57a:	7efb      	ldrb	r3, [r7, #27]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d06a      	beq.n	800e656 <udp_input+0x28a>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	88db      	ldrh	r3, [r3, #6]
 800e584:	b29b      	uxth	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00b      	beq.n	800e5a2 <udp_input+0x1d6>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	891a      	ldrh	r2, [r3, #8]
 800e58e:	4b3b      	ldr	r3, [pc, #236]	; (800e67c <udp_input+0x2b0>)
 800e590:	9300      	str	r3, [sp, #0]
 800e592:	4b3b      	ldr	r3, [pc, #236]	; (800e680 <udp_input+0x2b4>)
 800e594:	2111      	movs	r1, #17
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7f7 fde2 	bl	8006160 <ip_chksum_pseudo>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d173      	bne.n	800e68a <udp_input+0x2be>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e5a2:	2108      	movs	r1, #8
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7f9 f883 	bl	80076b0 <pbuf_remove_header>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d012      	beq.n	800e5d6 <udp_input+0x20a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e5b0:	4b2b      	ldr	r3, [pc, #172]	; (800e660 <udp_input+0x294>)
 800e5b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e5b6:	4933      	ldr	r1, [pc, #204]	; (800e684 <udp_input+0x2b8>)
 800e5b8:	482b      	ldr	r0, [pc, #172]	; (800e668 <udp_input+0x29c>)
 800e5ba:	f004 ffe7 	bl	801358c <iprintf>
      UDP_STATS_INC(udp.drop);
 800e5be:	4b2c      	ldr	r3, [pc, #176]	; (800e670 <udp_input+0x2a4>)
 800e5c0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	4b29      	ldr	r3, [pc, #164]	; (800e670 <udp_input+0x2a4>)
 800e5ca:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7f9 f8f4 	bl	80077bc <pbuf_free>
      goto end;
 800e5d4:	e058      	b.n	800e688 <udp_input+0x2bc>
    }

    if (pcb != NULL) {
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d012      	beq.n	800e602 <udp_input+0x236>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5de:	699b      	ldr	r3, [r3, #24]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00a      	beq.n	800e5fa <udp_input+0x22e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	699c      	ldr	r4, [r3, #24]
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ea:	69d8      	ldr	r0, [r3, #28]
 800e5ec:	8a3b      	ldrh	r3, [r7, #16]
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	4b23      	ldr	r3, [pc, #140]	; (800e680 <udp_input+0x2b4>)
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e5f8:	e05b      	b.n	800e6b2 <udp_input+0x2e6>
        pbuf_free(p);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f7f9 f8de 	bl	80077bc <pbuf_free>
        goto end;
 800e600:	e042      	b.n	800e688 <udp_input+0x2bc>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e602:	7cfb      	ldrb	r3, [r7, #19]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d112      	bne.n	800e62e <udp_input+0x262>
 800e608:	4b1a      	ldr	r3, [pc, #104]	; (800e674 <udp_input+0x2a8>)
 800e60a:	695b      	ldr	r3, [r3, #20]
 800e60c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e610:	2be0      	cmp	r3, #224	; 0xe0
 800e612:	d00c      	beq.n	800e62e <udp_input+0x262>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e614:	4b17      	ldr	r3, [pc, #92]	; (800e674 <udp_input+0x2a8>)
 800e616:	899b      	ldrh	r3, [r3, #12]
 800e618:	3308      	adds	r3, #8
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	b21b      	sxth	r3, r3
 800e61e:	4619      	mov	r1, r3
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7f9 f8b8 	bl	8007796 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e626:	2103      	movs	r1, #3
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f003 fab3 	bl	8011b94 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800e62e:	4b10      	ldr	r3, [pc, #64]	; (800e670 <udp_input+0x2a4>)
 800e630:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800e634:	3301      	adds	r3, #1
 800e636:	b29a      	uxth	r2, r3
 800e638:	4b0d      	ldr	r3, [pc, #52]	; (800e670 <udp_input+0x2a4>)
 800e63a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800e63e:	4b0c      	ldr	r3, [pc, #48]	; (800e670 <udp_input+0x2a4>)
 800e640:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e644:	3301      	adds	r3, #1
 800e646:	b29a      	uxth	r2, r3
 800e648:	4b09      	ldr	r3, [pc, #36]	; (800e670 <udp_input+0x2a4>)
 800e64a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7f9 f8b4 	bl	80077bc <pbuf_free>
  return;
 800e654:	e02d      	b.n	800e6b2 <udp_input+0x2e6>
    pbuf_free(p);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7f9 f8b0 	bl	80077bc <pbuf_free>
  return;
 800e65c:	e029      	b.n	800e6b2 <udp_input+0x2e6>
 800e65e:	bf00      	nop
 800e660:	08016af8 	.word	0x08016af8
 800e664:	08016b9c 	.word	0x08016b9c
 800e668:	08016b4c 	.word	0x08016b4c
 800e66c:	08016bb4 	.word	0x08016bb4
 800e670:	20007a48 	.word	0x20007a48
 800e674:	20004534 	.word	0x20004534
 800e678:	20007b3c 	.word	0x20007b3c
 800e67c:	20004548 	.word	0x20004548
 800e680:	20004544 	.word	0x20004544
 800e684:	08016bd0 	.word	0x08016bd0
 800e688:	e013      	b.n	800e6b2 <udp_input+0x2e6>
            goto chkerr;
 800e68a:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 800e68c:	4b0a      	ldr	r3, [pc, #40]	; (800e6b8 <udp_input+0x2ec>)
 800e68e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800e692:	3301      	adds	r3, #1
 800e694:	b29a      	uxth	r2, r3
 800e696:	4b08      	ldr	r3, [pc, #32]	; (800e6b8 <udp_input+0x2ec>)
 800e698:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
  UDP_STATS_INC(udp.drop);
 800e69c:	4b06      	ldr	r3, [pc, #24]	; (800e6b8 <udp_input+0x2ec>)
 800e69e:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e6a2:	3301      	adds	r3, #1
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	4b04      	ldr	r3, [pc, #16]	; (800e6b8 <udp_input+0x2ec>)
 800e6a8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7f9 f885 	bl	80077bc <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e6b2:	372c      	adds	r7, #44	; 0x2c
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd90      	pop	{r4, r7, pc}
 800e6b8:	20007a48 	.word	0x20007a48

0800e6bc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b088      	sub	sp, #32
 800e6c0:	af02      	add	r7, sp, #8
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
 800e6c8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d109      	bne.n	800e6e4 <udp_sendto_if+0x28>
 800e6d0:	4b2e      	ldr	r3, [pc, #184]	; (800e78c <udp_sendto_if+0xd0>)
 800e6d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6d6:	492e      	ldr	r1, [pc, #184]	; (800e790 <udp_sendto_if+0xd4>)
 800e6d8:	482e      	ldr	r0, [pc, #184]	; (800e794 <udp_sendto_if+0xd8>)
 800e6da:	f004 ff57 	bl	801358c <iprintf>
 800e6de:	f06f 030f 	mvn.w	r3, #15
 800e6e2:	e04f      	b.n	800e784 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d109      	bne.n	800e6fe <udp_sendto_if+0x42>
 800e6ea:	4b28      	ldr	r3, [pc, #160]	; (800e78c <udp_sendto_if+0xd0>)
 800e6ec:	f240 2281 	movw	r2, #641	; 0x281
 800e6f0:	4929      	ldr	r1, [pc, #164]	; (800e798 <udp_sendto_if+0xdc>)
 800e6f2:	4828      	ldr	r0, [pc, #160]	; (800e794 <udp_sendto_if+0xd8>)
 800e6f4:	f004 ff4a 	bl	801358c <iprintf>
 800e6f8:	f06f 030f 	mvn.w	r3, #15
 800e6fc:	e042      	b.n	800e784 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d109      	bne.n	800e718 <udp_sendto_if+0x5c>
 800e704:	4b21      	ldr	r3, [pc, #132]	; (800e78c <udp_sendto_if+0xd0>)
 800e706:	f240 2282 	movw	r2, #642	; 0x282
 800e70a:	4924      	ldr	r1, [pc, #144]	; (800e79c <udp_sendto_if+0xe0>)
 800e70c:	4821      	ldr	r0, [pc, #132]	; (800e794 <udp_sendto_if+0xd8>)
 800e70e:	f004 ff3d 	bl	801358c <iprintf>
 800e712:	f06f 030f 	mvn.w	r3, #15
 800e716:	e035      	b.n	800e784 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d109      	bne.n	800e732 <udp_sendto_if+0x76>
 800e71e:	4b1b      	ldr	r3, [pc, #108]	; (800e78c <udp_sendto_if+0xd0>)
 800e720:	f240 2283 	movw	r2, #643	; 0x283
 800e724:	491e      	ldr	r1, [pc, #120]	; (800e7a0 <udp_sendto_if+0xe4>)
 800e726:	481b      	ldr	r0, [pc, #108]	; (800e794 <udp_sendto_if+0xd8>)
 800e728:	f004 ff30 	bl	801358c <iprintf>
 800e72c:	f06f 030f 	mvn.w	r3, #15
 800e730:	e028      	b.n	800e784 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d009      	beq.n	800e74c <udp_sendto_if+0x90>
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d005      	beq.n	800e74c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e748:	2be0      	cmp	r3, #224	; 0xe0
 800e74a:	d103      	bne.n	800e754 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	3304      	adds	r3, #4
 800e750:	617b      	str	r3, [r7, #20]
 800e752:	e00b      	b.n	800e76c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	6a3b      	ldr	r3, [r7, #32]
 800e75a:	3304      	adds	r3, #4
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d002      	beq.n	800e768 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800e762:	f06f 0303 	mvn.w	r3, #3
 800e766:	e00d      	b.n	800e784 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e76c:	887a      	ldrh	r2, [r7, #2]
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	9301      	str	r3, [sp, #4]
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	4613      	mov	r3, r2
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f000 f811 	bl	800e7a4 <udp_sendto_if_src>
 800e782:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800e784:	4618      	mov	r0, r3
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	08016af8 	.word	0x08016af8
 800e790:	08016c6c 	.word	0x08016c6c
 800e794:	08016b4c 	.word	0x08016b4c
 800e798:	08016c88 	.word	0x08016c88
 800e79c:	08016ca4 	.word	0x08016ca4
 800e7a0:	08016cc4 	.word	0x08016cc4

0800e7a4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08c      	sub	sp, #48	; 0x30
 800e7a8:	af04      	add	r7, sp, #16
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d109      	bne.n	800e7cc <udp_sendto_if_src+0x28>
 800e7b8:	4b76      	ldr	r3, [pc, #472]	; (800e994 <udp_sendto_if_src+0x1f0>)
 800e7ba:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e7be:	4976      	ldr	r1, [pc, #472]	; (800e998 <udp_sendto_if_src+0x1f4>)
 800e7c0:	4876      	ldr	r0, [pc, #472]	; (800e99c <udp_sendto_if_src+0x1f8>)
 800e7c2:	f004 fee3 	bl	801358c <iprintf>
 800e7c6:	f06f 030f 	mvn.w	r3, #15
 800e7ca:	e0de      	b.n	800e98a <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d109      	bne.n	800e7e6 <udp_sendto_if_src+0x42>
 800e7d2:	4b70      	ldr	r3, [pc, #448]	; (800e994 <udp_sendto_if_src+0x1f0>)
 800e7d4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e7d8:	4971      	ldr	r1, [pc, #452]	; (800e9a0 <udp_sendto_if_src+0x1fc>)
 800e7da:	4870      	ldr	r0, [pc, #448]	; (800e99c <udp_sendto_if_src+0x1f8>)
 800e7dc:	f004 fed6 	bl	801358c <iprintf>
 800e7e0:	f06f 030f 	mvn.w	r3, #15
 800e7e4:	e0d1      	b.n	800e98a <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d109      	bne.n	800e800 <udp_sendto_if_src+0x5c>
 800e7ec:	4b69      	ldr	r3, [pc, #420]	; (800e994 <udp_sendto_if_src+0x1f0>)
 800e7ee:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e7f2:	496c      	ldr	r1, [pc, #432]	; (800e9a4 <udp_sendto_if_src+0x200>)
 800e7f4:	4869      	ldr	r0, [pc, #420]	; (800e99c <udp_sendto_if_src+0x1f8>)
 800e7f6:	f004 fec9 	bl	801358c <iprintf>
 800e7fa:	f06f 030f 	mvn.w	r3, #15
 800e7fe:	e0c4      	b.n	800e98a <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	2b00      	cmp	r3, #0
 800e804:	d109      	bne.n	800e81a <udp_sendto_if_src+0x76>
 800e806:	4b63      	ldr	r3, [pc, #396]	; (800e994 <udp_sendto_if_src+0x1f0>)
 800e808:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e80c:	4966      	ldr	r1, [pc, #408]	; (800e9a8 <udp_sendto_if_src+0x204>)
 800e80e:	4863      	ldr	r0, [pc, #396]	; (800e99c <udp_sendto_if_src+0x1f8>)
 800e810:	f004 febc 	bl	801358c <iprintf>
 800e814:	f06f 030f 	mvn.w	r3, #15
 800e818:	e0b7      	b.n	800e98a <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d109      	bne.n	800e834 <udp_sendto_if_src+0x90>
 800e820:	4b5c      	ldr	r3, [pc, #368]	; (800e994 <udp_sendto_if_src+0x1f0>)
 800e822:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e826:	4961      	ldr	r1, [pc, #388]	; (800e9ac <udp_sendto_if_src+0x208>)
 800e828:	485c      	ldr	r0, [pc, #368]	; (800e99c <udp_sendto_if_src+0x1f8>)
 800e82a:	f004 feaf 	bl	801358c <iprintf>
 800e82e:	f06f 030f 	mvn.w	r3, #15
 800e832:	e0aa      	b.n	800e98a <udp_sendto_if_src+0x1e6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	8a5b      	ldrh	r3, [r3, #18]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10f      	bne.n	800e85c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e83c:	68f9      	ldr	r1, [r7, #12]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	8a5b      	ldrh	r3, [r3, #18]
 800e842:	461a      	mov	r2, r3
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f000 f8b7 	bl	800e9b8 <udp_bind>
 800e84a:	4603      	mov	r3, r0
 800e84c:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800e84e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d002      	beq.n	800e85c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800e856:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800e85a:	e096      	b.n	800e98a <udp_sendto_if_src+0x1e6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	891b      	ldrh	r3, [r3, #8]
 800e860:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e864:	4293      	cmp	r3, r2
 800e866:	d902      	bls.n	800e86e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800e868:	f04f 33ff 	mov.w	r3, #4294967295
 800e86c:	e08d      	b.n	800e98a <udp_sendto_if_src+0x1e6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800e86e:	2108      	movs	r1, #8
 800e870:	68b8      	ldr	r0, [r7, #8]
 800e872:	f7f8 ff0d 	bl	8007690 <pbuf_add_header>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d015      	beq.n	800e8a8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e87c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e880:	2108      	movs	r1, #8
 800e882:	2022      	movs	r0, #34	; 0x22
 800e884:	f7f8 fcfa 	bl	800727c <pbuf_alloc>
 800e888:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800e88a:	69fb      	ldr	r3, [r7, #28]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d102      	bne.n	800e896 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800e890:	f04f 33ff 	mov.w	r3, #4294967295
 800e894:	e079      	b.n	800e98a <udp_sendto_if_src+0x1e6>
    }
    if (p->tot_len != 0) {
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	891b      	ldrh	r3, [r3, #8]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d006      	beq.n	800e8ac <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800e89e:	68b9      	ldr	r1, [r7, #8]
 800e8a0:	69f8      	ldr	r0, [r7, #28]
 800e8a2:	f7f9 f8a3 	bl	80079ec <pbuf_chain>
 800e8a6:	e001      	b.n	800e8ac <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	895b      	ldrh	r3, [r3, #10]
 800e8b0:	2b07      	cmp	r3, #7
 800e8b2:	d806      	bhi.n	800e8c2 <udp_sendto_if_src+0x11e>
 800e8b4:	4b37      	ldr	r3, [pc, #220]	; (800e994 <udp_sendto_if_src+0x1f0>)
 800e8b6:	f240 320d 	movw	r2, #781	; 0x30d
 800e8ba:	493d      	ldr	r1, [pc, #244]	; (800e9b0 <udp_sendto_if_src+0x20c>)
 800e8bc:	4837      	ldr	r0, [pc, #220]	; (800e99c <udp_sendto_if_src+0x1f8>)
 800e8be:	f004 fe65 	bl	801358c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	8a5b      	ldrh	r3, [r3, #18]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7f7 faab 	bl	8005e28 <lwip_htons>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e8da:	887b      	ldrh	r3, [r7, #2]
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7f7 faa3 	bl	8005e28 <lwip_htons>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	719a      	strb	r2, [r3, #6]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	891b      	ldrh	r3, [r3, #8]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7f7 fa95 	bl	8005e28 <lwip_htons>
 800e8fe:	4603      	mov	r3, r0
 800e900:	461a      	mov	r2, r3
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	7c1b      	ldrb	r3, [r3, #16]
 800e90a:	f003 0301 	and.w	r3, r3, #1
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d113      	bne.n	800e93a <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	891a      	ldrh	r2, [r3, #8]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	9300      	str	r3, [sp, #0]
 800e91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91c:	2111      	movs	r1, #17
 800e91e:	69f8      	ldr	r0, [r7, #28]
 800e920:	f7f7 fc1e 	bl	8006160 <ip_chksum_pseudo>
 800e924:	4603      	mov	r3, r0
 800e926:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800e928:	8b7b      	ldrh	r3, [r7, #26]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d102      	bne.n	800e934 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800e92e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e932:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	8b7a      	ldrh	r2, [r7, #26]
 800e938:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e93a:	2311      	movs	r3, #17
 800e93c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	7adb      	ldrb	r3, [r3, #11]
 800e942:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	7a9b      	ldrb	r3, [r3, #10]
 800e948:	7cb9      	ldrb	r1, [r7, #18]
 800e94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e94c:	9202      	str	r2, [sp, #8]
 800e94e:	7cfa      	ldrb	r2, [r7, #19]
 800e950:	9201      	str	r2, [sp, #4]
 800e952:	9300      	str	r3, [sp, #0]
 800e954:	460b      	mov	r3, r1
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e95a:	69f8      	ldr	r0, [r7, #28]
 800e95c:	f003 fc34 	bl	80121c8 <ip4_output_if_src>
 800e960:	4603      	mov	r3, r0
 800e962:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e964:	69fa      	ldr	r2, [r7, #28]
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d004      	beq.n	800e976 <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800e96c:	69f8      	ldr	r0, [r7, #28]
 800e96e:	f7f8 ff25 	bl	80077bc <pbuf_free>
    q = NULL;
 800e972:	2300      	movs	r3, #0
 800e974:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800e976:	4b0f      	ldr	r3, [pc, #60]	; (800e9b4 <udp_sendto_if_src+0x210>)
 800e978:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800e97c:	3301      	adds	r3, #1
 800e97e:	b29a      	uxth	r2, r3
 800e980:	4b0c      	ldr	r3, [pc, #48]	; (800e9b4 <udp_sendto_if_src+0x210>)
 800e982:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 800e986:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3720      	adds	r7, #32
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	08016af8 	.word	0x08016af8
 800e998:	08016ce4 	.word	0x08016ce4
 800e99c:	08016b4c 	.word	0x08016b4c
 800e9a0:	08016d04 	.word	0x08016d04
 800e9a4:	08016d24 	.word	0x08016d24
 800e9a8:	08016d48 	.word	0x08016d48
 800e9ac:	08016d6c 	.word	0x08016d6c
 800e9b0:	08016d90 	.word	0x08016d90
 800e9b4:	20007a48 	.word	0x20007a48

0800e9b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e9cc:	4b39      	ldr	r3, [pc, #228]	; (800eab4 <udp_bind+0xfc>)
 800e9ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d109      	bne.n	800e9ea <udp_bind+0x32>
 800e9d6:	4b38      	ldr	r3, [pc, #224]	; (800eab8 <udp_bind+0x100>)
 800e9d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e9dc:	4937      	ldr	r1, [pc, #220]	; (800eabc <udp_bind+0x104>)
 800e9de:	4838      	ldr	r0, [pc, #224]	; (800eac0 <udp_bind+0x108>)
 800e9e0:	f004 fdd4 	bl	801358c <iprintf>
 800e9e4:	f06f 030f 	mvn.w	r3, #15
 800e9e8:	e060      	b.n	800eaac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e9ee:	4b35      	ldr	r3, [pc, #212]	; (800eac4 <udp_bind+0x10c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	617b      	str	r3, [r7, #20]
 800e9f4:	e009      	b.n	800ea0a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d102      	bne.n	800ea04 <udp_bind+0x4c>
      rebind = 1;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	74fb      	strb	r3, [r7, #19]
      break;
 800ea02:	e005      	b.n	800ea10 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	617b      	str	r3, [r7, #20]
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1f2      	bne.n	800e9f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ea10:	88fb      	ldrh	r3, [r7, #6]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d109      	bne.n	800ea2a <udp_bind+0x72>
    port = udp_new_port();
 800ea16:	f7ff fc3d 	bl	800e294 <udp_new_port>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ea1e:	88fb      	ldrh	r3, [r7, #6]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d12c      	bne.n	800ea7e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ea24:	f06f 0307 	mvn.w	r3, #7
 800ea28:	e040      	b.n	800eaac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea2a:	4b26      	ldr	r3, [pc, #152]	; (800eac4 <udp_bind+0x10c>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	617b      	str	r3, [r7, #20]
 800ea30:	e022      	b.n	800ea78 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ea32:	68fa      	ldr	r2, [r7, #12]
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d01b      	beq.n	800ea72 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	8a5b      	ldrh	r3, [r3, #18]
 800ea3e:	88fa      	ldrh	r2, [r7, #6]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d116      	bne.n	800ea72 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d00d      	beq.n	800ea6c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00a      	beq.n	800ea6c <udp_bind+0xb4>
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d006      	beq.n	800ea6c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ea5e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d003      	beq.n	800ea6c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d102      	bne.n	800ea72 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ea6c:	f06f 0307 	mvn.w	r3, #7
 800ea70:	e01c      	b.n	800eaac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	68db      	ldr	r3, [r3, #12]
 800ea76:	617b      	str	r3, [r7, #20]
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d1d9      	bne.n	800ea32 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d002      	beq.n	800ea8a <udp_bind+0xd2>
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	e000      	b.n	800ea8c <udp_bind+0xd4>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	88fa      	ldrh	r2, [r7, #6]
 800ea94:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ea96:	7cfb      	ldrb	r3, [r7, #19]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d106      	bne.n	800eaaa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ea9c:	4b09      	ldr	r3, [pc, #36]	; (800eac4 <udp_bind+0x10c>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800eaa4:	4a07      	ldr	r2, [pc, #28]	; (800eac4 <udp_bind+0x10c>)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	08039740 	.word	0x08039740
 800eab8:	08016af8 	.word	0x08016af8
 800eabc:	08016dc0 	.word	0x08016dc0
 800eac0:	08016b4c 	.word	0x08016b4c
 800eac4:	20007b3c 	.word	0x20007b3c

0800eac8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b086      	sub	sp, #24
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	4613      	mov	r3, r2
 800ead4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d109      	bne.n	800eaf0 <udp_connect+0x28>
 800eadc:	4b2c      	ldr	r3, [pc, #176]	; (800eb90 <udp_connect+0xc8>)
 800eade:	f240 4235 	movw	r2, #1077	; 0x435
 800eae2:	492c      	ldr	r1, [pc, #176]	; (800eb94 <udp_connect+0xcc>)
 800eae4:	482c      	ldr	r0, [pc, #176]	; (800eb98 <udp_connect+0xd0>)
 800eae6:	f004 fd51 	bl	801358c <iprintf>
 800eaea:	f06f 030f 	mvn.w	r3, #15
 800eaee:	e04b      	b.n	800eb88 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d109      	bne.n	800eb0a <udp_connect+0x42>
 800eaf6:	4b26      	ldr	r3, [pc, #152]	; (800eb90 <udp_connect+0xc8>)
 800eaf8:	f240 4236 	movw	r2, #1078	; 0x436
 800eafc:	4927      	ldr	r1, [pc, #156]	; (800eb9c <udp_connect+0xd4>)
 800eafe:	4826      	ldr	r0, [pc, #152]	; (800eb98 <udp_connect+0xd0>)
 800eb00:	f004 fd44 	bl	801358c <iprintf>
 800eb04:	f06f 030f 	mvn.w	r3, #15
 800eb08:	e03e      	b.n	800eb88 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	8a5b      	ldrh	r3, [r3, #18]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d10f      	bne.n	800eb32 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800eb12:	68f9      	ldr	r1, [r7, #12]
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	8a5b      	ldrh	r3, [r3, #18]
 800eb18:	461a      	mov	r2, r3
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f7ff ff4c 	bl	800e9b8 <udp_bind>
 800eb20:	4603      	mov	r3, r0
 800eb22:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800eb24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <udp_connect+0x6a>
      return err;
 800eb2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb30:	e02a      	b.n	800eb88 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <udp_connect+0x76>
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	e000      	b.n	800eb40 <udp_connect+0x78>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	88fa      	ldrh	r2, [r7, #6]
 800eb48:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	7c1b      	ldrb	r3, [r3, #16]
 800eb4e:	f043 0304 	orr.w	r3, r3, #4
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb58:	4b11      	ldr	r3, [pc, #68]	; (800eba0 <udp_connect+0xd8>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	617b      	str	r3, [r7, #20]
 800eb5e:	e008      	b.n	800eb72 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d101      	bne.n	800eb6c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e00d      	b.n	800eb88 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	617b      	str	r3, [r7, #20]
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d1f3      	bne.n	800eb60 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800eb78:	4b09      	ldr	r3, [pc, #36]	; (800eba0 <udp_connect+0xd8>)
 800eb7a:	681a      	ldr	r2, [r3, #0]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800eb80:	4a07      	ldr	r2, [pc, #28]	; (800eba0 <udp_connect+0xd8>)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3718      	adds	r7, #24
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	08016af8 	.word	0x08016af8
 800eb94:	08016dd8 	.word	0x08016dd8
 800eb98:	08016b4c 	.word	0x08016b4c
 800eb9c:	08016df4 	.word	0x08016df4
 800eba0:	20007b3c 	.word	0x20007b3c

0800eba4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d107      	bne.n	800ebc6 <udp_recv+0x22>
 800ebb6:	4b08      	ldr	r3, [pc, #32]	; (800ebd8 <udp_recv+0x34>)
 800ebb8:	f240 428a 	movw	r2, #1162	; 0x48a
 800ebbc:	4907      	ldr	r1, [pc, #28]	; (800ebdc <udp_recv+0x38>)
 800ebbe:	4808      	ldr	r0, [pc, #32]	; (800ebe0 <udp_recv+0x3c>)
 800ebc0:	f004 fce4 	bl	801358c <iprintf>
 800ebc4:	e005      	b.n	800ebd2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	68ba      	ldr	r2, [r7, #8]
 800ebca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	61da      	str	r2, [r3, #28]
}
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	08016af8 	.word	0x08016af8
 800ebdc:	08016e2c 	.word	0x08016e2c
 800ebe0:	08016b4c 	.word	0x08016b4c

0800ebe4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d107      	bne.n	800ec02 <udp_remove+0x1e>
 800ebf2:	4b19      	ldr	r3, [pc, #100]	; (800ec58 <udp_remove+0x74>)
 800ebf4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ebf8:	4918      	ldr	r1, [pc, #96]	; (800ec5c <udp_remove+0x78>)
 800ebfa:	4819      	ldr	r0, [pc, #100]	; (800ec60 <udp_remove+0x7c>)
 800ebfc:	f004 fcc6 	bl	801358c <iprintf>
 800ec00:	e026      	b.n	800ec50 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ec02:	4b18      	ldr	r3, [pc, #96]	; (800ec64 <udp_remove+0x80>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d105      	bne.n	800ec18 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ec0c:	4b15      	ldr	r3, [pc, #84]	; (800ec64 <udp_remove+0x80>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	4a14      	ldr	r2, [pc, #80]	; (800ec64 <udp_remove+0x80>)
 800ec14:	6013      	str	r3, [r2, #0]
 800ec16:	e017      	b.n	800ec48 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ec18:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <udp_remove+0x80>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	60fb      	str	r3, [r7, #12]
 800ec1e:	e010      	b.n	800ec42 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d009      	beq.n	800ec3c <udp_remove+0x58>
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d104      	bne.n	800ec3c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68da      	ldr	r2, [r3, #12]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	60da      	str	r2, [r3, #12]
        break;
 800ec3a:	e005      	b.n	800ec48 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	60fb      	str	r3, [r7, #12]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1eb      	bne.n	800ec20 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ec48:	6879      	ldr	r1, [r7, #4]
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	f7f7 ffe0 	bl	8006c10 <memp_free>
}
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	08016af8 	.word	0x08016af8
 800ec5c:	08016e44 	.word	0x08016e44
 800ec60:	08016b4c 	.word	0x08016b4c
 800ec64:	20007b3c 	.word	0x20007b3c

0800ec68 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ec6e:	2000      	movs	r0, #0
 800ec70:	f7f7 ff8c 	bl	8006b8c <memp_malloc>
 800ec74:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d007      	beq.n	800ec8c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ec7c:	2220      	movs	r2, #32
 800ec7e:	2100      	movs	r1, #0
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f004 fc7b 	bl	801357c <memset>
    pcb->ttl = UDP_TTL;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	22ff      	movs	r2, #255	; 0xff
 800ec8a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800ec8c:	687b      	ldr	r3, [r7, #4]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d01e      	beq.n	800ece6 <udp_netif_ip_addr_changed+0x4e>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d01a      	beq.n	800ece6 <udp_netif_ip_addr_changed+0x4e>
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d017      	beq.n	800ece6 <udp_netif_ip_addr_changed+0x4e>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d013      	beq.n	800ece6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ecbe:	4b0d      	ldr	r3, [pc, #52]	; (800ecf4 <udp_netif_ip_addr_changed+0x5c>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	e00c      	b.n	800ece0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d103      	bne.n	800ecda <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1ef      	bne.n	800ecc6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ece6:	bf00      	nop
 800ece8:	3714      	adds	r7, #20
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop
 800ecf4:	20007b3c 	.word	0x20007b3c

0800ecf8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800ecfc:	4b20      	ldr	r3, [pc, #128]	; (800ed80 <dhcp_inc_pcb_refcount+0x88>)
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d133      	bne.n	800ed6c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800ed04:	4b1f      	ldr	r3, [pc, #124]	; (800ed84 <dhcp_inc_pcb_refcount+0x8c>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d005      	beq.n	800ed18 <dhcp_inc_pcb_refcount+0x20>
 800ed0c:	4b1e      	ldr	r3, [pc, #120]	; (800ed88 <dhcp_inc_pcb_refcount+0x90>)
 800ed0e:	22e5      	movs	r2, #229	; 0xe5
 800ed10:	491e      	ldr	r1, [pc, #120]	; (800ed8c <dhcp_inc_pcb_refcount+0x94>)
 800ed12:	481f      	ldr	r0, [pc, #124]	; (800ed90 <dhcp_inc_pcb_refcount+0x98>)
 800ed14:	f004 fc3a 	bl	801358c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800ed18:	f7ff ffa6 	bl	800ec68 <udp_new>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	4a19      	ldr	r2, [pc, #100]	; (800ed84 <dhcp_inc_pcb_refcount+0x8c>)
 800ed20:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800ed22:	4b18      	ldr	r3, [pc, #96]	; (800ed84 <dhcp_inc_pcb_refcount+0x8c>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d102      	bne.n	800ed30 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800ed2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed2e:	e024      	b.n	800ed7a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800ed30:	4b14      	ldr	r3, [pc, #80]	; (800ed84 <dhcp_inc_pcb_refcount+0x8c>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	7a5a      	ldrb	r2, [r3, #9]
 800ed36:	4b13      	ldr	r3, [pc, #76]	; (800ed84 <dhcp_inc_pcb_refcount+0x8c>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f042 0220 	orr.w	r2, r2, #32
 800ed3e:	b2d2      	uxtb	r2, r2
 800ed40:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800ed42:	4b10      	ldr	r3, [pc, #64]	; (800ed84 <dhcp_inc_pcb_refcount+0x8c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2244      	movs	r2, #68	; 0x44
 800ed48:	4912      	ldr	r1, [pc, #72]	; (800ed94 <dhcp_inc_pcb_refcount+0x9c>)
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff fe34 	bl	800e9b8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800ed50:	4b0c      	ldr	r3, [pc, #48]	; (800ed84 <dhcp_inc_pcb_refcount+0x8c>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2243      	movs	r2, #67	; 0x43
 800ed56:	490f      	ldr	r1, [pc, #60]	; (800ed94 <dhcp_inc_pcb_refcount+0x9c>)
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7ff feb5 	bl	800eac8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800ed5e:	4b09      	ldr	r3, [pc, #36]	; (800ed84 <dhcp_inc_pcb_refcount+0x8c>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2200      	movs	r2, #0
 800ed64:	490c      	ldr	r1, [pc, #48]	; (800ed98 <dhcp_inc_pcb_refcount+0xa0>)
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7ff ff1c 	bl	800eba4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800ed6c:	4b04      	ldr	r3, [pc, #16]	; (800ed80 <dhcp_inc_pcb_refcount+0x88>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	3301      	adds	r3, #1
 800ed72:	b2da      	uxtb	r2, r3
 800ed74:	4b02      	ldr	r3, [pc, #8]	; (800ed80 <dhcp_inc_pcb_refcount+0x88>)
 800ed76:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	200005d8 	.word	0x200005d8
 800ed84:	200005d4 	.word	0x200005d4
 800ed88:	08016e5c 	.word	0x08016e5c
 800ed8c:	08016e94 	.word	0x08016e94
 800ed90:	08016ebc 	.word	0x08016ebc
 800ed94:	08039740 	.word	0x08039740
 800ed98:	080105b9 	.word	0x080105b9

0800ed9c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800eda0:	4b0e      	ldr	r3, [pc, #56]	; (800eddc <dhcp_dec_pcb_refcount+0x40>)
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d105      	bne.n	800edb4 <dhcp_dec_pcb_refcount+0x18>
 800eda8:	4b0d      	ldr	r3, [pc, #52]	; (800ede0 <dhcp_dec_pcb_refcount+0x44>)
 800edaa:	22ff      	movs	r2, #255	; 0xff
 800edac:	490d      	ldr	r1, [pc, #52]	; (800ede4 <dhcp_dec_pcb_refcount+0x48>)
 800edae:	480e      	ldr	r0, [pc, #56]	; (800ede8 <dhcp_dec_pcb_refcount+0x4c>)
 800edb0:	f004 fbec 	bl	801358c <iprintf>
  dhcp_pcb_refcount--;
 800edb4:	4b09      	ldr	r3, [pc, #36]	; (800eddc <dhcp_dec_pcb_refcount+0x40>)
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	3b01      	subs	r3, #1
 800edba:	b2da      	uxtb	r2, r3
 800edbc:	4b07      	ldr	r3, [pc, #28]	; (800eddc <dhcp_dec_pcb_refcount+0x40>)
 800edbe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800edc0:	4b06      	ldr	r3, [pc, #24]	; (800eddc <dhcp_dec_pcb_refcount+0x40>)
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d107      	bne.n	800edd8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800edc8:	4b08      	ldr	r3, [pc, #32]	; (800edec <dhcp_dec_pcb_refcount+0x50>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff ff09 	bl	800ebe4 <udp_remove>
    dhcp_pcb = NULL;
 800edd2:	4b06      	ldr	r3, [pc, #24]	; (800edec <dhcp_dec_pcb_refcount+0x50>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	601a      	str	r2, [r3, #0]
  }
}
 800edd8:	bf00      	nop
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	200005d8 	.word	0x200005d8
 800ede0:	08016e5c 	.word	0x08016e5c
 800ede4:	08016ee4 	.word	0x08016ee4
 800ede8:	08016ebc 	.word	0x08016ebc
 800edec:	200005d4 	.word	0x200005d4

0800edf0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800edfe:	210c      	movs	r1, #12
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f001 f81b 	bl	800fe3c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ee06:	4b06      	ldr	r3, [pc, #24]	; (800ee20 <dhcp_handle_nak+0x30>)
 800ee08:	4a05      	ldr	r2, [pc, #20]	; (800ee20 <dhcp_handle_nak+0x30>)
 800ee0a:	4905      	ldr	r1, [pc, #20]	; (800ee20 <dhcp_handle_nak+0x30>)
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7f8 f8a1 	bl	8006f54 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fc0e 	bl	800f634 <dhcp_discover>
}
 800ee18:	bf00      	nop
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	08039740 	.word	0x08039740

0800ee24 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee30:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800ee32:	2108      	movs	r1, #8
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f001 f801 	bl	800fe3c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	331c      	adds	r3, #28
 800ee3e:	2200      	movs	r2, #0
 800ee40:	4619      	mov	r1, r3
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f002 fb26 	bl	8011494 <etharp_query>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	799b      	ldrb	r3, [r3, #6]
 800ee50:	2bff      	cmp	r3, #255	; 0xff
 800ee52:	d005      	beq.n	800ee60 <dhcp_check+0x3c>
    dhcp->tries++;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	799b      	ldrb	r3, [r3, #6]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	b2da      	uxtb	r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800ee60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ee64:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ee66:	893b      	ldrh	r3, [r7, #8]
 800ee68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ee6c:	4a06      	ldr	r2, [pc, #24]	; (800ee88 <dhcp_check+0x64>)
 800ee6e:	fb82 1203 	smull	r1, r2, r2, r3
 800ee72:	1152      	asrs	r2, r2, #5
 800ee74:	17db      	asrs	r3, r3, #31
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	b29a      	uxth	r2, r3
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800ee7e:	bf00      	nop
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	10624dd3 	.word	0x10624dd3

0800ee8c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800ee9c:	4b0c      	ldr	r3, [pc, #48]	; (800eed0 <dhcp_handle_offer+0x44>)
 800ee9e:	789b      	ldrb	r3, [r3, #2]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d011      	beq.n	800eec8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2200      	movs	r2, #0
 800eea8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800eeaa:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <dhcp_handle_offer+0x48>)
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f6 ffcf 	bl	8005e52 <lwip_htonl>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	691a      	ldr	r2, [r3, #16]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 f808 	bl	800eed8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800eec8:	bf00      	nop
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	20007b40 	.word	0x20007b40
 800eed4:	20007b48 	.word	0x20007b48

0800eed8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800eed8:	b5b0      	push	{r4, r5, r7, lr}
 800eeda:	b08a      	sub	sp, #40	; 0x28
 800eedc:	af02      	add	r7, sp, #8
 800eede:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d109      	bne.n	800eefa <dhcp_select+0x22>
 800eee6:	4b71      	ldr	r3, [pc, #452]	; (800f0ac <dhcp_select+0x1d4>)
 800eee8:	f240 1277 	movw	r2, #375	; 0x177
 800eeec:	4970      	ldr	r1, [pc, #448]	; (800f0b0 <dhcp_select+0x1d8>)
 800eeee:	4871      	ldr	r0, [pc, #452]	; (800f0b4 <dhcp_select+0x1dc>)
 800eef0:	f004 fb4c 	bl	801358c <iprintf>
 800eef4:	f06f 030f 	mvn.w	r3, #15
 800eef8:	e0d3      	b.n	800f0a2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eefe:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d109      	bne.n	800ef1a <dhcp_select+0x42>
 800ef06:	4b69      	ldr	r3, [pc, #420]	; (800f0ac <dhcp_select+0x1d4>)
 800ef08:	f240 1279 	movw	r2, #377	; 0x179
 800ef0c:	496a      	ldr	r1, [pc, #424]	; (800f0b8 <dhcp_select+0x1e0>)
 800ef0e:	4869      	ldr	r0, [pc, #420]	; (800f0b4 <dhcp_select+0x1dc>)
 800ef10:	f004 fb3c 	bl	801358c <iprintf>
 800ef14:	f06f 0305 	mvn.w	r3, #5
 800ef18:	e0c3      	b.n	800f0a2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	69b8      	ldr	r0, [r7, #24]
 800ef1e:	f000 ff8d 	bl	800fe3c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ef22:	f107 030c 	add.w	r3, r7, #12
 800ef26:	2203      	movs	r2, #3
 800ef28:	69b9      	ldr	r1, [r7, #24]
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f001 fc12 	bl	8010754 <dhcp_create_msg>
 800ef30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	f000 8085 	beq.w	800f044 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ef40:	89b8      	ldrh	r0, [r7, #12]
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef48:	2302      	movs	r3, #2
 800ef4a:	2239      	movs	r2, #57	; 0x39
 800ef4c:	f000 ff90 	bl	800fe70 <dhcp_option>
 800ef50:	4603      	mov	r3, r0
 800ef52:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ef54:	89b8      	ldrh	r0, [r7, #12]
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef60:	461a      	mov	r2, r3
 800ef62:	f000 ffdf 	bl	800ff24 <dhcp_option_short>
 800ef66:	4603      	mov	r3, r0
 800ef68:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ef6a:	89b8      	ldrh	r0, [r7, #12]
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef72:	2304      	movs	r3, #4
 800ef74:	2232      	movs	r2, #50	; 0x32
 800ef76:	f000 ff7b 	bl	800fe70 <dhcp_option>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ef7e:	89bc      	ldrh	r4, [r7, #12]
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	69db      	ldr	r3, [r3, #28]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7f6 ff61 	bl	8005e52 <lwip_htonl>
 800ef90:	4603      	mov	r3, r0
 800ef92:	461a      	mov	r2, r3
 800ef94:	4629      	mov	r1, r5
 800ef96:	4620      	mov	r0, r4
 800ef98:	f000 fff6 	bl	800ff88 <dhcp_option_long>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800efa0:	89b8      	ldrh	r0, [r7, #12]
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800efa8:	2304      	movs	r3, #4
 800efaa:	2236      	movs	r2, #54	; 0x36
 800efac:	f000 ff60 	bl	800fe70 <dhcp_option>
 800efb0:	4603      	mov	r3, r0
 800efb2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800efb4:	89bc      	ldrh	r4, [r7, #12]
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7f6 ff46 	bl	8005e52 <lwip_htonl>
 800efc6:	4603      	mov	r3, r0
 800efc8:	461a      	mov	r2, r3
 800efca:	4629      	mov	r1, r5
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 ffdb 	bl	800ff88 <dhcp_option_long>
 800efd2:	4603      	mov	r3, r0
 800efd4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800efd6:	89b8      	ldrh	r0, [r7, #12]
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800efde:	2303      	movs	r3, #3
 800efe0:	2237      	movs	r2, #55	; 0x37
 800efe2:	f000 ff45 	bl	800fe70 <dhcp_option>
 800efe6:	4603      	mov	r3, r0
 800efe8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800efea:	2300      	movs	r3, #0
 800efec:	77bb      	strb	r3, [r7, #30]
 800efee:	e00e      	b.n	800f00e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800eff0:	89b8      	ldrh	r0, [r7, #12]
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eff8:	7fbb      	ldrb	r3, [r7, #30]
 800effa:	4a30      	ldr	r2, [pc, #192]	; (800f0bc <dhcp_select+0x1e4>)
 800effc:	5cd3      	ldrb	r3, [r2, r3]
 800effe:	461a      	mov	r2, r3
 800f000:	f000 ff6a 	bl	800fed8 <dhcp_option_byte>
 800f004:	4603      	mov	r3, r0
 800f006:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f008:	7fbb      	ldrb	r3, [r7, #30]
 800f00a:	3301      	adds	r3, #1
 800f00c:	77bb      	strb	r3, [r7, #30]
 800f00e:	7fbb      	ldrb	r3, [r7, #30]
 800f010:	2b02      	cmp	r3, #2
 800f012:	d9ed      	bls.n	800eff0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f014:	89b8      	ldrh	r0, [r7, #12]
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	33f0      	adds	r3, #240	; 0xf0
 800f01a:	697a      	ldr	r2, [r7, #20]
 800f01c:	4619      	mov	r1, r3
 800f01e:	f001 fc6f 	bl	8010900 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f022:	4b27      	ldr	r3, [pc, #156]	; (800f0c0 <dhcp_select+0x1e8>)
 800f024:	6818      	ldr	r0, [r3, #0]
 800f026:	4b27      	ldr	r3, [pc, #156]	; (800f0c4 <dhcp_select+0x1ec>)
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	2343      	movs	r3, #67	; 0x43
 800f030:	4a25      	ldr	r2, [pc, #148]	; (800f0c8 <dhcp_select+0x1f0>)
 800f032:	6979      	ldr	r1, [r7, #20]
 800f034:	f7ff fbb6 	bl	800e7a4 <udp_sendto_if_src>
 800f038:	4603      	mov	r3, r0
 800f03a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f03c:	6978      	ldr	r0, [r7, #20]
 800f03e:	f7f8 fbbd 	bl	80077bc <pbuf_free>
 800f042:	e001      	b.n	800f048 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f044:	23ff      	movs	r3, #255	; 0xff
 800f046:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	799b      	ldrb	r3, [r3, #6]
 800f04c:	2bff      	cmp	r3, #255	; 0xff
 800f04e:	d005      	beq.n	800f05c <dhcp_select+0x184>
    dhcp->tries++;
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	799b      	ldrb	r3, [r3, #6]
 800f054:	3301      	adds	r3, #1
 800f056:	b2da      	uxtb	r2, r3
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	799b      	ldrb	r3, [r3, #6]
 800f060:	2b05      	cmp	r3, #5
 800f062:	d80d      	bhi.n	800f080 <dhcp_select+0x1a8>
 800f064:	69bb      	ldr	r3, [r7, #24]
 800f066:	799b      	ldrb	r3, [r3, #6]
 800f068:	461a      	mov	r2, r3
 800f06a:	2301      	movs	r3, #1
 800f06c:	4093      	lsls	r3, r2
 800f06e:	b29b      	uxth	r3, r3
 800f070:	461a      	mov	r2, r3
 800f072:	0152      	lsls	r2, r2, #5
 800f074:	1ad2      	subs	r2, r2, r3
 800f076:	0092      	lsls	r2, r2, #2
 800f078:	4413      	add	r3, r2
 800f07a:	00db      	lsls	r3, r3, #3
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	e001      	b.n	800f084 <dhcp_select+0x1ac>
 800f080:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f084:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f086:	89fb      	ldrh	r3, [r7, #14]
 800f088:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f08c:	4a0f      	ldr	r2, [pc, #60]	; (800f0cc <dhcp_select+0x1f4>)
 800f08e:	fb82 1203 	smull	r1, r2, r2, r3
 800f092:	1152      	asrs	r2, r2, #5
 800f094:	17db      	asrs	r3, r3, #31
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	b29a      	uxth	r2, r3
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f09e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3720      	adds	r7, #32
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bdb0      	pop	{r4, r5, r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	08016e5c 	.word	0x08016e5c
 800f0b0:	08016f08 	.word	0x08016f08
 800f0b4:	08016ebc 	.word	0x08016ebc
 800f0b8:	08016f24 	.word	0x08016f24
 800f0bc:	20000020 	.word	0x20000020
 800f0c0:	200005d4 	.word	0x200005d4
 800f0c4:	08039740 	.word	0x08039740
 800f0c8:	08039744 	.word	0x08039744
 800f0cc:	10624dd3 	.word	0x10624dd3

0800f0d0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800f0d6:	4b27      	ldr	r3, [pc, #156]	; (800f174 <dhcp_coarse_tmr+0xa4>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	607b      	str	r3, [r7, #4]
 800f0dc:	e042      	b.n	800f164 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d039      	beq.n	800f15e <dhcp_coarse_tmr+0x8e>
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	795b      	ldrb	r3, [r3, #5]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d035      	beq.n	800f15e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	8a9b      	ldrh	r3, [r3, #20]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d012      	beq.n	800f120 <dhcp_coarse_tmr+0x50>
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	8a5b      	ldrh	r3, [r3, #18]
 800f0fe:	3301      	adds	r3, #1
 800f100:	b29a      	uxth	r2, r3
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	825a      	strh	r2, [r3, #18]
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	8a5a      	ldrh	r2, [r3, #18]
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	8a9b      	ldrh	r3, [r3, #20]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d106      	bne.n	800f120 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 fdf8 	bl	800fd08 <dhcp_release_and_stop>
        dhcp_start(netif);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 f96b 	bl	800f3f4 <dhcp_start>
 800f11e:	e01e      	b.n	800f15e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	8a1b      	ldrh	r3, [r3, #16]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00b      	beq.n	800f140 <dhcp_coarse_tmr+0x70>
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	8a1b      	ldrh	r3, [r3, #16]
 800f12c:	1e5a      	subs	r2, r3, #1
 800f12e:	b291      	uxth	r1, r2
 800f130:	683a      	ldr	r2, [r7, #0]
 800f132:	8211      	strh	r1, [r2, #16]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d103      	bne.n	800f140 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 f8c7 	bl	800f2cc <dhcp_t2_timeout>
 800f13e:	e00e      	b.n	800f15e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	89db      	ldrh	r3, [r3, #14]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00a      	beq.n	800f15e <dhcp_coarse_tmr+0x8e>
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	89db      	ldrh	r3, [r3, #14]
 800f14c:	1e5a      	subs	r2, r3, #1
 800f14e:	b291      	uxth	r1, r2
 800f150:	683a      	ldr	r2, [r7, #0]
 800f152:	81d1      	strh	r1, [r2, #14]
 800f154:	2b01      	cmp	r3, #1
 800f156:	d102      	bne.n	800f15e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 f888 	bl	800f26e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	607b      	str	r3, [r7, #4]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1b9      	bne.n	800f0de <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800f16a:	bf00      	nop
 800f16c:	bf00      	nop
 800f16e:	3708      	adds	r7, #8
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	20007a3c 	.word	0x20007a3c

0800f178 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800f17e:	4b16      	ldr	r3, [pc, #88]	; (800f1d8 <dhcp_fine_tmr+0x60>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	607b      	str	r3, [r7, #4]
 800f184:	e020      	b.n	800f1c8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f18a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d017      	beq.n	800f1c2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	891b      	ldrh	r3, [r3, #8]
 800f196:	2b01      	cmp	r3, #1
 800f198:	d906      	bls.n	800f1a8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	891b      	ldrh	r3, [r3, #8]
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	811a      	strh	r2, [r3, #8]
 800f1a6:	e00c      	b.n	800f1c2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	891b      	ldrh	r3, [r3, #8]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d108      	bne.n	800f1c2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	891b      	ldrh	r3, [r3, #8]
 800f1b4:	3b01      	subs	r3, #1
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 f80d 	bl	800f1dc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	607b      	str	r3, [r7, #4]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d1db      	bne.n	800f186 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800f1ce:	bf00      	nop
 800f1d0:	bf00      	nop
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	20007a3c 	.word	0x20007a3c

0800f1dc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	795b      	ldrb	r3, [r3, #5]
 800f1ee:	2b0c      	cmp	r3, #12
 800f1f0:	d003      	beq.n	800f1fa <dhcp_timeout+0x1e>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	795b      	ldrb	r3, [r3, #5]
 800f1f6:	2b06      	cmp	r3, #6
 800f1f8:	d103      	bne.n	800f202 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 fa1a 	bl	800f634 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f200:	e031      	b.n	800f266 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	795b      	ldrb	r3, [r3, #5]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d10e      	bne.n	800f228 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	799b      	ldrb	r3, [r3, #6]
 800f20e:	2b05      	cmp	r3, #5
 800f210:	d803      	bhi.n	800f21a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7ff fe60 	bl	800eed8 <dhcp_select>
}
 800f218:	e025      	b.n	800f266 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 fd74 	bl	800fd08 <dhcp_release_and_stop>
      dhcp_start(netif);
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 f8e7 	bl	800f3f4 <dhcp_start>
}
 800f226:	e01e      	b.n	800f266 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	795b      	ldrb	r3, [r3, #5]
 800f22c:	2b08      	cmp	r3, #8
 800f22e:	d10b      	bne.n	800f248 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	799b      	ldrb	r3, [r3, #6]
 800f234:	2b01      	cmp	r3, #1
 800f236:	d803      	bhi.n	800f240 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f7ff fdf3 	bl	800ee24 <dhcp_check>
}
 800f23e:	e012      	b.n	800f266 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fa99 	bl	800f778 <dhcp_bind>
}
 800f246:	e00e      	b.n	800f266 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	795b      	ldrb	r3, [r3, #5]
 800f24c:	2b03      	cmp	r3, #3
 800f24e:	d10a      	bne.n	800f266 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	799b      	ldrb	r3, [r3, #6]
 800f254:	2b01      	cmp	r3, #1
 800f256:	d803      	bhi.n	800f260 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 fc9f 	bl	800fb9c <dhcp_reboot>
}
 800f25e:	e002      	b.n	800f266 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f000 f9e7 	bl	800f634 <dhcp_discover>
}
 800f266:	bf00      	nop
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f26e:	b580      	push	{r7, lr}
 800f270:	b084      	sub	sp, #16
 800f272:	af00      	add	r7, sp, #0
 800f274:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	795b      	ldrb	r3, [r3, #5]
 800f280:	2b01      	cmp	r3, #1
 800f282:	d007      	beq.n	800f294 <dhcp_t1_timeout+0x26>
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	795b      	ldrb	r3, [r3, #5]
 800f288:	2b0a      	cmp	r3, #10
 800f28a:	d003      	beq.n	800f294 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f290:	2b05      	cmp	r3, #5
 800f292:	d117      	bne.n	800f2c4 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 fb49 	bl	800f92c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	899b      	ldrh	r3, [r3, #12]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	8a5b      	ldrh	r3, [r3, #18]
 800f2a4:	1ad3      	subs	r3, r2, r3
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	dd0c      	ble.n	800f2c4 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	899b      	ldrh	r3, [r3, #12]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	8a5b      	ldrh	r3, [r3, #18]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	da00      	bge.n	800f2bc <dhcp_t1_timeout+0x4e>
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	105b      	asrs	r3, r3, #1
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800f2c4:	bf00      	nop
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	795b      	ldrb	r3, [r3, #5]
 800f2de:	2b01      	cmp	r3, #1
 800f2e0:	d00b      	beq.n	800f2fa <dhcp_t2_timeout+0x2e>
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	795b      	ldrb	r3, [r3, #5]
 800f2e6:	2b0a      	cmp	r3, #10
 800f2e8:	d007      	beq.n	800f2fa <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f2ee:	2b05      	cmp	r3, #5
 800f2f0:	d003      	beq.n	800f2fa <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	795b      	ldrb	r3, [r3, #5]
 800f2f6:	2b04      	cmp	r3, #4
 800f2f8:	d117      	bne.n	800f32a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 fbb2 	bl	800fa64 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	8a9b      	ldrh	r3, [r3, #20]
 800f304:	461a      	mov	r2, r3
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	8a5b      	ldrh	r3, [r3, #18]
 800f30a:	1ad3      	subs	r3, r2, r3
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	dd0c      	ble.n	800f32a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	8a9b      	ldrh	r3, [r3, #20]
 800f314:	461a      	mov	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	8a5b      	ldrh	r3, [r3, #18]
 800f31a:	1ad3      	subs	r3, r2, r3
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	da00      	bge.n	800f322 <dhcp_t2_timeout+0x56>
 800f320:	3301      	adds	r3, #1
 800f322:	105b      	asrs	r3, r3, #1
 800f324:	b29a      	uxth	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800f32a:	bf00      	nop
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
	...

0800f334 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f342:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2200      	movs	r2, #0
 800f348:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2200      	movs	r2, #0
 800f34e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f350:	4b26      	ldr	r3, [pc, #152]	; (800f3ec <dhcp_handle_ack+0xb8>)
 800f352:	78db      	ldrb	r3, [r3, #3]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d003      	beq.n	800f360 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f358:	4b25      	ldr	r3, [pc, #148]	; (800f3f0 <dhcp_handle_ack+0xbc>)
 800f35a:	68da      	ldr	r2, [r3, #12]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f360:	4b22      	ldr	r3, [pc, #136]	; (800f3ec <dhcp_handle_ack+0xb8>)
 800f362:	791b      	ldrb	r3, [r3, #4]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d004      	beq.n	800f372 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f368:	4b21      	ldr	r3, [pc, #132]	; (800f3f0 <dhcp_handle_ack+0xbc>)
 800f36a:	691a      	ldr	r2, [r3, #16]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	62da      	str	r2, [r3, #44]	; 0x2c
 800f370:	e004      	b.n	800f37c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f376:	085a      	lsrs	r2, r3, #1
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f37c:	4b1b      	ldr	r3, [pc, #108]	; (800f3ec <dhcp_handle_ack+0xb8>)
 800f37e:	795b      	ldrb	r3, [r3, #5]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d004      	beq.n	800f38e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f384:	4b1a      	ldr	r3, [pc, #104]	; (800f3f0 <dhcp_handle_ack+0xbc>)
 800f386:	695a      	ldr	r2, [r3, #20]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	631a      	str	r2, [r3, #48]	; 0x30
 800f38c:	e007      	b.n	800f39e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f392:	4613      	mov	r3, r2
 800f394:	00db      	lsls	r3, r3, #3
 800f396:	1a9b      	subs	r3, r3, r2
 800f398:	08da      	lsrs	r2, r3, #3
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	691a      	ldr	r2, [r3, #16]
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f3a6:	4b11      	ldr	r3, [pc, #68]	; (800f3ec <dhcp_handle_ack+0xb8>)
 800f3a8:	799b      	ldrb	r3, [r3, #6]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00b      	beq.n	800f3c6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f3ae:	4b10      	ldr	r3, [pc, #64]	; (800f3f0 <dhcp_handle_ack+0xbc>)
 800f3b0:	699b      	ldr	r3, [r3, #24]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7f6 fd4d 	bl	8005e52 <lwip_htonl>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	71da      	strb	r2, [r3, #7]
 800f3c4:	e002      	b.n	800f3cc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f3cc:	4b07      	ldr	r3, [pc, #28]	; (800f3ec <dhcp_handle_ack+0xb8>)
 800f3ce:	79db      	ldrb	r3, [r3, #7]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d007      	beq.n	800f3e4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f3d4:	4b06      	ldr	r3, [pc, #24]	; (800f3f0 <dhcp_handle_ack+0xbc>)
 800f3d6:	69db      	ldr	r3, [r3, #28]
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7f6 fd3a 	bl	8005e52 <lwip_htonl>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f3e4:	bf00      	nop
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	20007b40 	.word	0x20007b40
 800f3f0:	20007b48 	.word	0x20007b48

0800f3f4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d109      	bne.n	800f416 <dhcp_start+0x22>
 800f402:	4b37      	ldr	r3, [pc, #220]	; (800f4e0 <dhcp_start+0xec>)
 800f404:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f408:	4936      	ldr	r1, [pc, #216]	; (800f4e4 <dhcp_start+0xf0>)
 800f40a:	4837      	ldr	r0, [pc, #220]	; (800f4e8 <dhcp_start+0xf4>)
 800f40c:	f004 f8be 	bl	801358c <iprintf>
 800f410:	f06f 030f 	mvn.w	r3, #15
 800f414:	e060      	b.n	800f4d8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f41c:	f003 0301 	and.w	r3, r3, #1
 800f420:	2b00      	cmp	r3, #0
 800f422:	d109      	bne.n	800f438 <dhcp_start+0x44>
 800f424:	4b2e      	ldr	r3, [pc, #184]	; (800f4e0 <dhcp_start+0xec>)
 800f426:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f42a:	4930      	ldr	r1, [pc, #192]	; (800f4ec <dhcp_start+0xf8>)
 800f42c:	482e      	ldr	r0, [pc, #184]	; (800f4e8 <dhcp_start+0xf4>)
 800f42e:	f004 f8ad 	bl	801358c <iprintf>
 800f432:	f06f 030f 	mvn.w	r3, #15
 800f436:	e04f      	b.n	800f4d8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f442:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f446:	d202      	bcs.n	800f44e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f448:	f04f 33ff 	mov.w	r3, #4294967295
 800f44c:	e044      	b.n	800f4d8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d10d      	bne.n	800f470 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f454:	2034      	movs	r0, #52	; 0x34
 800f456:	f7f7 f9f1 	bl	800683c <mem_malloc>
 800f45a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d102      	bne.n	800f468 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f462:	f04f 33ff 	mov.w	r3, #4294967295
 800f466:	e037      	b.n	800f4d8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	625a      	str	r2, [r3, #36]	; 0x24
 800f46e:	e005      	b.n	800f47c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	791b      	ldrb	r3, [r3, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d001      	beq.n	800f47c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f478:	f7ff fc90 	bl	800ed9c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f47c:	2234      	movs	r2, #52	; 0x34
 800f47e:	2100      	movs	r1, #0
 800f480:	68f8      	ldr	r0, [r7, #12]
 800f482:	f004 f87b 	bl	801357c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f486:	f7ff fc37 	bl	800ecf8 <dhcp_inc_pcb_refcount>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d002      	beq.n	800f496 <dhcp_start+0xa2>
    return ERR_MEM;
 800f490:	f04f 33ff 	mov.w	r3, #4294967295
 800f494:	e020      	b.n	800f4d8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2201      	movs	r2, #1
 800f49a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f4a2:	f003 0304 	and.w	r3, r3, #4
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d105      	bne.n	800f4b6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f4aa:	2102      	movs	r1, #2
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f000 fcc5 	bl	800fe3c <dhcp_set_state>
    return ERR_OK;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	e010      	b.n	800f4d8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 f8bc 	bl	800f634 <dhcp_discover>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f4c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d005      	beq.n	800f4d4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fc1d 	bl	800fd08 <dhcp_release_and_stop>
    return ERR_MEM;
 800f4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f4d2:	e001      	b.n	800f4d8 <dhcp_start+0xe4>
  }
  return result;
 800f4d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3710      	adds	r7, #16
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	08016e5c 	.word	0x08016e5c
 800f4e4:	08016f40 	.word	0x08016f40
 800f4e8:	08016ebc 	.word	0x08016ebc
 800f4ec:	08016f84 	.word	0x08016f84

0800f4f0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d107      	bne.n	800f510 <dhcp_arp_reply+0x20>
 800f500:	4b0e      	ldr	r3, [pc, #56]	; (800f53c <dhcp_arp_reply+0x4c>)
 800f502:	f240 328b 	movw	r2, #907	; 0x38b
 800f506:	490e      	ldr	r1, [pc, #56]	; (800f540 <dhcp_arp_reply+0x50>)
 800f508:	480e      	ldr	r0, [pc, #56]	; (800f544 <dhcp_arp_reply+0x54>)
 800f50a:	f004 f83f 	bl	801358c <iprintf>
 800f50e:	e012      	b.n	800f536 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f514:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00c      	beq.n	800f536 <dhcp_arp_reply+0x46>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	795b      	ldrb	r3, [r3, #5]
 800f520:	2b08      	cmp	r3, #8
 800f522:	d108      	bne.n	800f536 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	69db      	ldr	r3, [r3, #28]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d102      	bne.n	800f536 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 f809 	bl	800f548 <dhcp_decline>
    }
  }
}
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	08016e5c 	.word	0x08016e5c
 800f540:	08016f40 	.word	0x08016f40
 800f544:	08016ebc 	.word	0x08016ebc

0800f548 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f548:	b5b0      	push	{r4, r5, r7, lr}
 800f54a:	b08a      	sub	sp, #40	; 0x28
 800f54c:	af02      	add	r7, sp, #8
 800f54e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f554:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f556:	210c      	movs	r1, #12
 800f558:	69b8      	ldr	r0, [r7, #24]
 800f55a:	f000 fc6f 	bl	800fe3c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800f55e:	f107 030c 	add.w	r3, r7, #12
 800f562:	2204      	movs	r2, #4
 800f564:	69b9      	ldr	r1, [r7, #24]
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f001 f8f4 	bl	8010754 <dhcp_create_msg>
 800f56c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d035      	beq.n	800f5e0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f57a:	89b8      	ldrh	r0, [r7, #12]
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f582:	2304      	movs	r3, #4
 800f584:	2232      	movs	r2, #50	; 0x32
 800f586:	f000 fc73 	bl	800fe70 <dhcp_option>
 800f58a:	4603      	mov	r3, r0
 800f58c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f58e:	89bc      	ldrh	r4, [r7, #12]
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	69db      	ldr	r3, [r3, #28]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7f6 fc59 	bl	8005e52 <lwip_htonl>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	4629      	mov	r1, r5
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f000 fcee 	bl	800ff88 <dhcp_option_long>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f5b0:	89b8      	ldrh	r0, [r7, #12]
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	33f0      	adds	r3, #240	; 0xf0
 800f5b6:	697a      	ldr	r2, [r7, #20]
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	f001 f9a1 	bl	8010900 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f5be:	4b19      	ldr	r3, [pc, #100]	; (800f624 <dhcp_decline+0xdc>)
 800f5c0:	6818      	ldr	r0, [r3, #0]
 800f5c2:	4b19      	ldr	r3, [pc, #100]	; (800f628 <dhcp_decline+0xe0>)
 800f5c4:	9301      	str	r3, [sp, #4]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	9300      	str	r3, [sp, #0]
 800f5ca:	2343      	movs	r3, #67	; 0x43
 800f5cc:	4a17      	ldr	r2, [pc, #92]	; (800f62c <dhcp_decline+0xe4>)
 800f5ce:	6979      	ldr	r1, [r7, #20]
 800f5d0:	f7ff f8e8 	bl	800e7a4 <udp_sendto_if_src>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f5d8:	6978      	ldr	r0, [r7, #20]
 800f5da:	f7f8 f8ef 	bl	80077bc <pbuf_free>
 800f5de:	e001      	b.n	800f5e4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f5e0:	23ff      	movs	r3, #255	; 0xff
 800f5e2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f5e4:	69bb      	ldr	r3, [r7, #24]
 800f5e6:	799b      	ldrb	r3, [r3, #6]
 800f5e8:	2bff      	cmp	r3, #255	; 0xff
 800f5ea:	d005      	beq.n	800f5f8 <dhcp_decline+0xb0>
    dhcp->tries++;
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	799b      	ldrb	r3, [r3, #6]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	b2da      	uxtb	r2, r3
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800f5f8:	f242 7310 	movw	r3, #10000	; 0x2710
 800f5fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f5fe:	89fb      	ldrh	r3, [r7, #14]
 800f600:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f604:	4a0a      	ldr	r2, [pc, #40]	; (800f630 <dhcp_decline+0xe8>)
 800f606:	fb82 1203 	smull	r1, r2, r2, r3
 800f60a:	1152      	asrs	r2, r2, #5
 800f60c:	17db      	asrs	r3, r3, #31
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	b29a      	uxth	r2, r3
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f616:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3720      	adds	r7, #32
 800f61e:	46bd      	mov	sp, r7
 800f620:	bdb0      	pop	{r4, r5, r7, pc}
 800f622:	bf00      	nop
 800f624:	200005d4 	.word	0x200005d4
 800f628:	08039740 	.word	0x08039740
 800f62c:	08039744 	.word	0x08039744
 800f630:	10624dd3 	.word	0x10624dd3

0800f634 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b08a      	sub	sp, #40	; 0x28
 800f638:	af02      	add	r7, sp, #8
 800f63a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f640:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800f642:	2300      	movs	r3, #0
 800f644:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f646:	69bb      	ldr	r3, [r7, #24]
 800f648:	2200      	movs	r2, #0
 800f64a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f64c:	2106      	movs	r1, #6
 800f64e:	69b8      	ldr	r0, [r7, #24]
 800f650:	f000 fbf4 	bl	800fe3c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800f654:	f107 0308 	add.w	r3, r7, #8
 800f658:	2201      	movs	r2, #1
 800f65a:	69b9      	ldr	r1, [r7, #24]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f001 f879 	bl	8010754 <dhcp_create_msg>
 800f662:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d04b      	beq.n	800f702 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f670:	8938      	ldrh	r0, [r7, #8]
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f678:	2302      	movs	r3, #2
 800f67a:	2239      	movs	r2, #57	; 0x39
 800f67c:	f000 fbf8 	bl	800fe70 <dhcp_option>
 800f680:	4603      	mov	r3, r0
 800f682:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f684:	8938      	ldrh	r0, [r7, #8]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f690:	461a      	mov	r2, r3
 800f692:	f000 fc47 	bl	800ff24 <dhcp_option_short>
 800f696:	4603      	mov	r3, r0
 800f698:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f69a:	8938      	ldrh	r0, [r7, #8]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f6a2:	2303      	movs	r3, #3
 800f6a4:	2237      	movs	r2, #55	; 0x37
 800f6a6:	f000 fbe3 	bl	800fe70 <dhcp_option>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	77fb      	strb	r3, [r7, #31]
 800f6b2:	e00e      	b.n	800f6d2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f6b4:	8938      	ldrh	r0, [r7, #8]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f6bc:	7ffb      	ldrb	r3, [r7, #31]
 800f6be:	4a29      	ldr	r2, [pc, #164]	; (800f764 <dhcp_discover+0x130>)
 800f6c0:	5cd3      	ldrb	r3, [r2, r3]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	f000 fc08 	bl	800fed8 <dhcp_option_byte>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f6cc:	7ffb      	ldrb	r3, [r7, #31]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	77fb      	strb	r3, [r7, #31]
 800f6d2:	7ffb      	ldrb	r3, [r7, #31]
 800f6d4:	2b02      	cmp	r3, #2
 800f6d6:	d9ed      	bls.n	800f6b4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f6d8:	8938      	ldrh	r0, [r7, #8]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	33f0      	adds	r3, #240	; 0xf0
 800f6de:	693a      	ldr	r2, [r7, #16]
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	f001 f90d 	bl	8010900 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f6e6:	4b20      	ldr	r3, [pc, #128]	; (800f768 <dhcp_discover+0x134>)
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	4b20      	ldr	r3, [pc, #128]	; (800f76c <dhcp_discover+0x138>)
 800f6ec:	9301      	str	r3, [sp, #4]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	2343      	movs	r3, #67	; 0x43
 800f6f4:	4a1e      	ldr	r2, [pc, #120]	; (800f770 <dhcp_discover+0x13c>)
 800f6f6:	6939      	ldr	r1, [r7, #16]
 800f6f8:	f7ff f854 	bl	800e7a4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800f6fc:	6938      	ldr	r0, [r7, #16]
 800f6fe:	f7f8 f85d 	bl	80077bc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	799b      	ldrb	r3, [r3, #6]
 800f706:	2bff      	cmp	r3, #255	; 0xff
 800f708:	d005      	beq.n	800f716 <dhcp_discover+0xe2>
    dhcp->tries++;
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	799b      	ldrb	r3, [r3, #6]
 800f70e:	3301      	adds	r3, #1
 800f710:	b2da      	uxtb	r2, r3
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	799b      	ldrb	r3, [r3, #6]
 800f71a:	2b05      	cmp	r3, #5
 800f71c:	d80d      	bhi.n	800f73a <dhcp_discover+0x106>
 800f71e:	69bb      	ldr	r3, [r7, #24]
 800f720:	799b      	ldrb	r3, [r3, #6]
 800f722:	461a      	mov	r2, r3
 800f724:	2301      	movs	r3, #1
 800f726:	4093      	lsls	r3, r2
 800f728:	b29b      	uxth	r3, r3
 800f72a:	461a      	mov	r2, r3
 800f72c:	0152      	lsls	r2, r2, #5
 800f72e:	1ad2      	subs	r2, r2, r3
 800f730:	0092      	lsls	r2, r2, #2
 800f732:	4413      	add	r3, r2
 800f734:	00db      	lsls	r3, r3, #3
 800f736:	b29b      	uxth	r3, r3
 800f738:	e001      	b.n	800f73e <dhcp_discover+0x10a>
 800f73a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f73e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f740:	897b      	ldrh	r3, [r7, #10]
 800f742:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f746:	4a0b      	ldr	r2, [pc, #44]	; (800f774 <dhcp_discover+0x140>)
 800f748:	fb82 1203 	smull	r1, r2, r2, r3
 800f74c:	1152      	asrs	r2, r2, #5
 800f74e:	17db      	asrs	r3, r3, #31
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	b29a      	uxth	r2, r3
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f758:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3720      	adds	r7, #32
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	20000020 	.word	0x20000020
 800f768:	200005d4 	.word	0x200005d4
 800f76c:	08039740 	.word	0x08039740
 800f770:	08039744 	.word	0x08039744
 800f774:	10624dd3 	.word	0x10624dd3

0800f778 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b088      	sub	sp, #32
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d107      	bne.n	800f796 <dhcp_bind+0x1e>
 800f786:	4b64      	ldr	r3, [pc, #400]	; (800f918 <dhcp_bind+0x1a0>)
 800f788:	f240 4215 	movw	r2, #1045	; 0x415
 800f78c:	4963      	ldr	r1, [pc, #396]	; (800f91c <dhcp_bind+0x1a4>)
 800f78e:	4864      	ldr	r0, [pc, #400]	; (800f920 <dhcp_bind+0x1a8>)
 800f790:	f003 fefc 	bl	801358c <iprintf>
 800f794:	e0bc      	b.n	800f910 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f79c:	69bb      	ldr	r3, [r7, #24]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d107      	bne.n	800f7b2 <dhcp_bind+0x3a>
 800f7a2:	4b5d      	ldr	r3, [pc, #372]	; (800f918 <dhcp_bind+0x1a0>)
 800f7a4:	f240 4217 	movw	r2, #1047	; 0x417
 800f7a8:	495e      	ldr	r1, [pc, #376]	; (800f924 <dhcp_bind+0x1ac>)
 800f7aa:	485d      	ldr	r0, [pc, #372]	; (800f920 <dhcp_bind+0x1a8>)
 800f7ac:	f003 feee 	bl	801358c <iprintf>
 800f7b0:	e0ae      	b.n	800f910 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f7b2:	69bb      	ldr	r3, [r7, #24]
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f7b8:	69bb      	ldr	r3, [r7, #24]
 800f7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c0:	d019      	beq.n	800f7f6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7c6:	331e      	adds	r3, #30
 800f7c8:	4a57      	ldr	r2, [pc, #348]	; (800f928 <dhcp_bind+0x1b0>)
 800f7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ce:	095b      	lsrs	r3, r3, #5
 800f7d0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7d8:	d302      	bcc.n	800f7e0 <dhcp_bind+0x68>
      timeout = 0xffff;
 800f7da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7de:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800f7e0:	69fb      	ldr	r3, [r7, #28]
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	8a9b      	ldrh	r3, [r3, #20]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d102      	bne.n	800f7f6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7fe:	d01d      	beq.n	800f83c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f804:	331e      	adds	r3, #30
 800f806:	4a48      	ldr	r2, [pc, #288]	; (800f928 <dhcp_bind+0x1b0>)
 800f808:	fba2 2303 	umull	r2, r3, r2, r3
 800f80c:	095b      	lsrs	r3, r3, #5
 800f80e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f816:	d302      	bcc.n	800f81e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f81c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	b29a      	uxth	r2, r3
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	895b      	ldrh	r3, [r3, #10]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d102      	bne.n	800f834 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	2201      	movs	r2, #1
 800f832:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f834:	69bb      	ldr	r3, [r7, #24]
 800f836:	895a      	ldrh	r2, [r3, #10]
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f844:	d01d      	beq.n	800f882 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f84a:	331e      	adds	r3, #30
 800f84c:	4a36      	ldr	r2, [pc, #216]	; (800f928 <dhcp_bind+0x1b0>)
 800f84e:	fba2 2303 	umull	r2, r3, r2, r3
 800f852:	095b      	lsrs	r3, r3, #5
 800f854:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f85c:	d302      	bcc.n	800f864 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f85e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f862:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	b29a      	uxth	r2, r3
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	899b      	ldrh	r3, [r3, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d102      	bne.n	800f87a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800f874:	69bb      	ldr	r3, [r7, #24]
 800f876:	2201      	movs	r2, #1
 800f878:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	899a      	ldrh	r2, [r3, #12]
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800f882:	69bb      	ldr	r3, [r7, #24]
 800f884:	895a      	ldrh	r2, [r3, #10]
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	899b      	ldrh	r3, [r3, #12]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d306      	bcc.n	800f89c <dhcp_bind+0x124>
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	899b      	ldrh	r3, [r3, #12]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d002      	beq.n	800f89c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	2200      	movs	r2, #0
 800f89a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	79db      	ldrb	r3, [r3, #7]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d003      	beq.n	800f8ac <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	6a1b      	ldr	r3, [r3, #32]
 800f8a8:	613b      	str	r3, [r7, #16]
 800f8aa:	e014      	b.n	800f8d6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	331c      	adds	r3, #28
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800f8b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	db02      	blt.n	800f8c2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800f8bc:	23ff      	movs	r3, #255	; 0xff
 800f8be:	613b      	str	r3, [r7, #16]
 800f8c0:	e009      	b.n	800f8d6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800f8c2:	7dfb      	ldrb	r3, [r7, #23]
 800f8c4:	2bbf      	cmp	r3, #191	; 0xbf
 800f8c6:	d903      	bls.n	800f8d0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800f8c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800f8cc:	613b      	str	r3, [r7, #16]
 800f8ce:	e002      	b.n	800f8d6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800f8d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8d4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8da:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d108      	bne.n	800f8f4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	69da      	ldr	r2, [r3, #28]
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	4013      	ands	r3, r2
 800f8ea:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f8f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800f8f4:	210a      	movs	r1, #10
 800f8f6:	69b8      	ldr	r0, [r7, #24]
 800f8f8:	f000 faa0 	bl	800fe3c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	f103 011c 	add.w	r1, r3, #28
 800f902:	f107 030c 	add.w	r3, r7, #12
 800f906:	f107 0210 	add.w	r2, r7, #16
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f7f7 fb22 	bl	8006f54 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800f910:	3720      	adds	r7, #32
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	08016e5c 	.word	0x08016e5c
 800f91c:	08016fbc 	.word	0x08016fbc
 800f920:	08016ebc 	.word	0x08016ebc
 800f924:	08016fd8 	.word	0x08016fd8
 800f928:	88888889 	.word	0x88888889

0800f92c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b08a      	sub	sp, #40	; 0x28
 800f930:	af02      	add	r7, sp, #8
 800f932:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f938:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f93a:	2105      	movs	r1, #5
 800f93c:	69b8      	ldr	r0, [r7, #24]
 800f93e:	f000 fa7d 	bl	800fe3c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f942:	f107 030c 	add.w	r3, r7, #12
 800f946:	2203      	movs	r2, #3
 800f948:	69b9      	ldr	r1, [r7, #24]
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 ff02 	bl	8010754 <dhcp_create_msg>
 800f950:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d04e      	beq.n	800f9f6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f95e:	89b8      	ldrh	r0, [r7, #12]
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f966:	2302      	movs	r3, #2
 800f968:	2239      	movs	r2, #57	; 0x39
 800f96a:	f000 fa81 	bl	800fe70 <dhcp_option>
 800f96e:	4603      	mov	r3, r0
 800f970:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f972:	89b8      	ldrh	r0, [r7, #12]
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f97e:	461a      	mov	r2, r3
 800f980:	f000 fad0 	bl	800ff24 <dhcp_option_short>
 800f984:	4603      	mov	r3, r0
 800f986:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f988:	89b8      	ldrh	r0, [r7, #12]
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f990:	2303      	movs	r3, #3
 800f992:	2237      	movs	r2, #55	; 0x37
 800f994:	f000 fa6c 	bl	800fe70 <dhcp_option>
 800f998:	4603      	mov	r3, r0
 800f99a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f99c:	2300      	movs	r3, #0
 800f99e:	77bb      	strb	r3, [r7, #30]
 800f9a0:	e00e      	b.n	800f9c0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f9a2:	89b8      	ldrh	r0, [r7, #12]
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f9aa:	7fbb      	ldrb	r3, [r7, #30]
 800f9ac:	4a2a      	ldr	r2, [pc, #168]	; (800fa58 <dhcp_renew+0x12c>)
 800f9ae:	5cd3      	ldrb	r3, [r2, r3]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	f000 fa91 	bl	800fed8 <dhcp_option_byte>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f9ba:	7fbb      	ldrb	r3, [r7, #30]
 800f9bc:	3301      	adds	r3, #1
 800f9be:	77bb      	strb	r3, [r7, #30]
 800f9c0:	7fbb      	ldrb	r3, [r7, #30]
 800f9c2:	2b02      	cmp	r3, #2
 800f9c4:	d9ed      	bls.n	800f9a2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f9c6:	89b8      	ldrh	r0, [r7, #12]
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	33f0      	adds	r3, #240	; 0xf0
 800f9cc:	697a      	ldr	r2, [r7, #20]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	f000 ff96 	bl	8010900 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f9d4:	4b21      	ldr	r3, [pc, #132]	; (800fa5c <dhcp_renew+0x130>)
 800f9d6:	6818      	ldr	r0, [r3, #0]
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	f103 0218 	add.w	r2, r3, #24
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	2343      	movs	r3, #67	; 0x43
 800f9e4:	6979      	ldr	r1, [r7, #20]
 800f9e6:	f7fe fe69 	bl	800e6bc <udp_sendto_if>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f9ee:	6978      	ldr	r0, [r7, #20]
 800f9f0:	f7f7 fee4 	bl	80077bc <pbuf_free>
 800f9f4:	e001      	b.n	800f9fa <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f9f6:	23ff      	movs	r3, #255	; 0xff
 800f9f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	799b      	ldrb	r3, [r3, #6]
 800f9fe:	2bff      	cmp	r3, #255	; 0xff
 800fa00:	d005      	beq.n	800fa0e <dhcp_renew+0xe2>
    dhcp->tries++;
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	799b      	ldrb	r3, [r3, #6]
 800fa06:	3301      	adds	r3, #1
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	69bb      	ldr	r3, [r7, #24]
 800fa0c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	799b      	ldrb	r3, [r3, #6]
 800fa12:	2b09      	cmp	r3, #9
 800fa14:	d80a      	bhi.n	800fa2c <dhcp_renew+0x100>
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	799b      	ldrb	r3, [r3, #6]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	0152      	lsls	r2, r2, #5
 800fa20:	1ad2      	subs	r2, r2, r3
 800fa22:	0092      	lsls	r2, r2, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	011b      	lsls	r3, r3, #4
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	e001      	b.n	800fa30 <dhcp_renew+0x104>
 800fa2c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800fa30:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fa32:	89fb      	ldrh	r3, [r7, #14]
 800fa34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fa38:	4a09      	ldr	r2, [pc, #36]	; (800fa60 <dhcp_renew+0x134>)
 800fa3a:	fb82 1203 	smull	r1, r2, r2, r3
 800fa3e:	1152      	asrs	r2, r2, #5
 800fa40:	17db      	asrs	r3, r3, #31
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	b29a      	uxth	r2, r3
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fa4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3720      	adds	r7, #32
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	20000020 	.word	0x20000020
 800fa5c:	200005d4 	.word	0x200005d4
 800fa60:	10624dd3 	.word	0x10624dd3

0800fa64 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b08a      	sub	sp, #40	; 0x28
 800fa68:	af02      	add	r7, sp, #8
 800fa6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa70:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800fa72:	2104      	movs	r1, #4
 800fa74:	69b8      	ldr	r0, [r7, #24]
 800fa76:	f000 f9e1 	bl	800fe3c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fa7a:	f107 030c 	add.w	r3, r7, #12
 800fa7e:	2203      	movs	r2, #3
 800fa80:	69b9      	ldr	r1, [r7, #24]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 fe66 	bl	8010754 <dhcp_create_msg>
 800fa88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d04c      	beq.n	800fb2a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fa96:	89b8      	ldrh	r0, [r7, #12]
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa9e:	2302      	movs	r3, #2
 800faa0:	2239      	movs	r2, #57	; 0x39
 800faa2:	f000 f9e5 	bl	800fe70 <dhcp_option>
 800faa6:	4603      	mov	r3, r0
 800faa8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800faaa:	89b8      	ldrh	r0, [r7, #12]
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fab6:	461a      	mov	r2, r3
 800fab8:	f000 fa34 	bl	800ff24 <dhcp_option_short>
 800fabc:	4603      	mov	r3, r0
 800fabe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fac0:	89b8      	ldrh	r0, [r7, #12]
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fac8:	2303      	movs	r3, #3
 800faca:	2237      	movs	r2, #55	; 0x37
 800facc:	f000 f9d0 	bl	800fe70 <dhcp_option>
 800fad0:	4603      	mov	r3, r0
 800fad2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fad4:	2300      	movs	r3, #0
 800fad6:	77bb      	strb	r3, [r7, #30]
 800fad8:	e00e      	b.n	800faf8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fada:	89b8      	ldrh	r0, [r7, #12]
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fae2:	7fbb      	ldrb	r3, [r7, #30]
 800fae4:	4a29      	ldr	r2, [pc, #164]	; (800fb8c <dhcp_rebind+0x128>)
 800fae6:	5cd3      	ldrb	r3, [r2, r3]
 800fae8:	461a      	mov	r2, r3
 800faea:	f000 f9f5 	bl	800fed8 <dhcp_option_byte>
 800faee:	4603      	mov	r3, r0
 800faf0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800faf2:	7fbb      	ldrb	r3, [r7, #30]
 800faf4:	3301      	adds	r3, #1
 800faf6:	77bb      	strb	r3, [r7, #30]
 800faf8:	7fbb      	ldrb	r3, [r7, #30]
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d9ed      	bls.n	800fada <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fafe:	89b8      	ldrh	r0, [r7, #12]
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	33f0      	adds	r3, #240	; 0xf0
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	4619      	mov	r1, r3
 800fb08:	f000 fefa 	bl	8010900 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fb0c:	4b20      	ldr	r3, [pc, #128]	; (800fb90 <dhcp_rebind+0x12c>)
 800fb0e:	6818      	ldr	r0, [r3, #0]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	2343      	movs	r3, #67	; 0x43
 800fb16:	4a1f      	ldr	r2, [pc, #124]	; (800fb94 <dhcp_rebind+0x130>)
 800fb18:	6979      	ldr	r1, [r7, #20]
 800fb1a:	f7fe fdcf 	bl	800e6bc <udp_sendto_if>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fb22:	6978      	ldr	r0, [r7, #20]
 800fb24:	f7f7 fe4a 	bl	80077bc <pbuf_free>
 800fb28:	e001      	b.n	800fb2e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fb2a:	23ff      	movs	r3, #255	; 0xff
 800fb2c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	799b      	ldrb	r3, [r3, #6]
 800fb32:	2bff      	cmp	r3, #255	; 0xff
 800fb34:	d005      	beq.n	800fb42 <dhcp_rebind+0xde>
    dhcp->tries++;
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	799b      	ldrb	r3, [r3, #6]
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	b2da      	uxtb	r2, r3
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	799b      	ldrb	r3, [r3, #6]
 800fb46:	2b09      	cmp	r3, #9
 800fb48:	d80a      	bhi.n	800fb60 <dhcp_rebind+0xfc>
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	799b      	ldrb	r3, [r3, #6]
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	461a      	mov	r2, r3
 800fb52:	0152      	lsls	r2, r2, #5
 800fb54:	1ad2      	subs	r2, r2, r3
 800fb56:	0092      	lsls	r2, r2, #2
 800fb58:	4413      	add	r3, r2
 800fb5a:	00db      	lsls	r3, r3, #3
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	e001      	b.n	800fb64 <dhcp_rebind+0x100>
 800fb60:	f242 7310 	movw	r3, #10000	; 0x2710
 800fb64:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fb66:	89fb      	ldrh	r3, [r7, #14]
 800fb68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fb6c:	4a0a      	ldr	r2, [pc, #40]	; (800fb98 <dhcp_rebind+0x134>)
 800fb6e:	fb82 1203 	smull	r1, r2, r2, r3
 800fb72:	1152      	asrs	r2, r2, #5
 800fb74:	17db      	asrs	r3, r3, #31
 800fb76:	1ad3      	subs	r3, r2, r3
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fb7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3720      	adds	r7, #32
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	20000020 	.word	0x20000020
 800fb90:	200005d4 	.word	0x200005d4
 800fb94:	08039744 	.word	0x08039744
 800fb98:	10624dd3 	.word	0x10624dd3

0800fb9c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800fb9c:	b5b0      	push	{r4, r5, r7, lr}
 800fb9e:	b08a      	sub	sp, #40	; 0x28
 800fba0:	af02      	add	r7, sp, #8
 800fba2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800fbaa:	2103      	movs	r1, #3
 800fbac:	69b8      	ldr	r0, [r7, #24]
 800fbae:	f000 f945 	bl	800fe3c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fbb2:	f107 030c 	add.w	r3, r7, #12
 800fbb6:	2203      	movs	r2, #3
 800fbb8:	69b9      	ldr	r1, [r7, #24]
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 fdca 	bl	8010754 <dhcp_create_msg>
 800fbc0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d066      	beq.n	800fc96 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fbce:	89b8      	ldrh	r0, [r7, #12]
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fbd6:	2302      	movs	r3, #2
 800fbd8:	2239      	movs	r2, #57	; 0x39
 800fbda:	f000 f949 	bl	800fe70 <dhcp_option>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800fbe2:	89b8      	ldrh	r0, [r7, #12]
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	33f0      	adds	r3, #240	; 0xf0
 800fbe8:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fbec:	4619      	mov	r1, r3
 800fbee:	f000 f999 	bl	800ff24 <dhcp_option_short>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fbf6:	89b8      	ldrh	r0, [r7, #12]
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fbfe:	2304      	movs	r3, #4
 800fc00:	2232      	movs	r2, #50	; 0x32
 800fc02:	f000 f935 	bl	800fe70 <dhcp_option>
 800fc06:	4603      	mov	r3, r0
 800fc08:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fc0a:	89bc      	ldrh	r4, [r7, #12]
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	69db      	ldr	r3, [r3, #28]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7f6 f91b 	bl	8005e52 <lwip_htonl>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	461a      	mov	r2, r3
 800fc20:	4629      	mov	r1, r5
 800fc22:	4620      	mov	r0, r4
 800fc24:	f000 f9b0 	bl	800ff88 <dhcp_option_long>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fc2c:	89b8      	ldrh	r0, [r7, #12]
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc34:	2303      	movs	r3, #3
 800fc36:	2237      	movs	r2, #55	; 0x37
 800fc38:	f000 f91a 	bl	800fe70 <dhcp_option>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc40:	2300      	movs	r3, #0
 800fc42:	77bb      	strb	r3, [r7, #30]
 800fc44:	e00e      	b.n	800fc64 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fc46:	89b8      	ldrh	r0, [r7, #12]
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc4e:	7fbb      	ldrb	r3, [r7, #30]
 800fc50:	4a29      	ldr	r2, [pc, #164]	; (800fcf8 <dhcp_reboot+0x15c>)
 800fc52:	5cd3      	ldrb	r3, [r2, r3]
 800fc54:	461a      	mov	r2, r3
 800fc56:	f000 f93f 	bl	800fed8 <dhcp_option_byte>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc5e:	7fbb      	ldrb	r3, [r7, #30]
 800fc60:	3301      	adds	r3, #1
 800fc62:	77bb      	strb	r3, [r7, #30]
 800fc64:	7fbb      	ldrb	r3, [r7, #30]
 800fc66:	2b02      	cmp	r3, #2
 800fc68:	d9ed      	bls.n	800fc46 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fc6a:	89b8      	ldrh	r0, [r7, #12]
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	33f0      	adds	r3, #240	; 0xf0
 800fc70:	697a      	ldr	r2, [r7, #20]
 800fc72:	4619      	mov	r1, r3
 800fc74:	f000 fe44 	bl	8010900 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fc78:	4b20      	ldr	r3, [pc, #128]	; (800fcfc <dhcp_reboot+0x160>)
 800fc7a:	6818      	ldr	r0, [r3, #0]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	9300      	str	r3, [sp, #0]
 800fc80:	2343      	movs	r3, #67	; 0x43
 800fc82:	4a1f      	ldr	r2, [pc, #124]	; (800fd00 <dhcp_reboot+0x164>)
 800fc84:	6979      	ldr	r1, [r7, #20]
 800fc86:	f7fe fd19 	bl	800e6bc <udp_sendto_if>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fc8e:	6978      	ldr	r0, [r7, #20]
 800fc90:	f7f7 fd94 	bl	80077bc <pbuf_free>
 800fc94:	e001      	b.n	800fc9a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fc96:	23ff      	movs	r3, #255	; 0xff
 800fc98:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	799b      	ldrb	r3, [r3, #6]
 800fc9e:	2bff      	cmp	r3, #255	; 0xff
 800fca0:	d005      	beq.n	800fcae <dhcp_reboot+0x112>
    dhcp->tries++;
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	799b      	ldrb	r3, [r3, #6]
 800fca6:	3301      	adds	r3, #1
 800fca8:	b2da      	uxtb	r2, r3
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	799b      	ldrb	r3, [r3, #6]
 800fcb2:	2b09      	cmp	r3, #9
 800fcb4:	d80a      	bhi.n	800fccc <dhcp_reboot+0x130>
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	799b      	ldrb	r3, [r3, #6]
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	0152      	lsls	r2, r2, #5
 800fcc0:	1ad2      	subs	r2, r2, r3
 800fcc2:	0092      	lsls	r2, r2, #2
 800fcc4:	4413      	add	r3, r2
 800fcc6:	00db      	lsls	r3, r3, #3
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	e001      	b.n	800fcd0 <dhcp_reboot+0x134>
 800fccc:	f242 7310 	movw	r3, #10000	; 0x2710
 800fcd0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fcd2:	89fb      	ldrh	r3, [r7, #14]
 800fcd4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fcd8:	4a0a      	ldr	r2, [pc, #40]	; (800fd04 <dhcp_reboot+0x168>)
 800fcda:	fb82 1203 	smull	r1, r2, r2, r3
 800fcde:	1152      	asrs	r2, r2, #5
 800fce0:	17db      	asrs	r3, r3, #31
 800fce2:	1ad3      	subs	r3, r2, r3
 800fce4:	b29a      	uxth	r2, r3
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fcea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fcee:	4618      	mov	r0, r3
 800fcf0:	3720      	adds	r7, #32
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bdb0      	pop	{r4, r5, r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	20000020 	.word	0x20000020
 800fcfc:	200005d4 	.word	0x200005d4
 800fd00:	08039744 	.word	0x08039744
 800fd04:	10624dd3 	.word	0x10624dd3

0800fd08 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800fd08:	b5b0      	push	{r4, r5, r7, lr}
 800fd0a:	b08a      	sub	sp, #40	; 0x28
 800fd0c:	af02      	add	r7, sp, #8
 800fd0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd14:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	f000 8084 	beq.w	800fe26 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	795b      	ldrb	r3, [r3, #5]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	f000 8081 	beq.w	800fe2a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	699b      	ldr	r3, [r3, #24]
 800fd2c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	2200      	movs	r2, #0
 800fd32:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	2200      	movs	r2, #0
 800fd38:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	2200      	movs	r2, #0
 800fd44:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	631a      	str	r2, [r3, #48]	; 0x30
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	62da      	str	r2, [r3, #44]	; 0x2c
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd58:	69fb      	ldr	r3, [r7, #28]
 800fd5a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	829a      	strh	r2, [r3, #20]
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	8a9a      	ldrh	r2, [r3, #20]
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	825a      	strh	r2, [r3, #18]
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	8a5a      	ldrh	r2, [r3, #18]
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	821a      	strh	r2, [r3, #16]
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	8a1a      	ldrh	r2, [r3, #16]
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 fdee 	bl	801095c <dhcp_supplied_address>
 800fd80:	4603      	mov	r3, r0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d03b      	beq.n	800fdfe <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800fd86:	f107 030e 	add.w	r3, r7, #14
 800fd8a:	2207      	movs	r2, #7
 800fd8c:	69f9      	ldr	r1, [r7, #28]
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 fce0 	bl	8010754 <dhcp_create_msg>
 800fd94:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d030      	beq.n	800fdfe <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fda2:	89f8      	ldrh	r0, [r7, #14]
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fdaa:	2304      	movs	r3, #4
 800fdac:	2236      	movs	r2, #54	; 0x36
 800fdae:	f000 f85f 	bl	800fe70 <dhcp_option>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800fdb6:	89fc      	ldrh	r4, [r7, #14]
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7f6 f846 	bl	8005e52 <lwip_htonl>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	461a      	mov	r2, r3
 800fdca:	4629      	mov	r1, r5
 800fdcc:	4620      	mov	r0, r4
 800fdce:	f000 f8db 	bl	800ff88 <dhcp_option_long>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fdd6:	89f8      	ldrh	r0, [r7, #14]
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	33f0      	adds	r3, #240	; 0xf0
 800fddc:	69ba      	ldr	r2, [r7, #24]
 800fdde:	4619      	mov	r1, r3
 800fde0:	f000 fd8e 	bl	8010900 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fde4:	4b13      	ldr	r3, [pc, #76]	; (800fe34 <dhcp_release_and_stop+0x12c>)
 800fde6:	6818      	ldr	r0, [r3, #0]
 800fde8:	f107 0210 	add.w	r2, r7, #16
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	2343      	movs	r3, #67	; 0x43
 800fdf2:	69b9      	ldr	r1, [r7, #24]
 800fdf4:	f7fe fc62 	bl	800e6bc <udp_sendto_if>
      pbuf_free(p_out);
 800fdf8:	69b8      	ldr	r0, [r7, #24]
 800fdfa:	f7f7 fcdf 	bl	80077bc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fdfe:	4b0e      	ldr	r3, [pc, #56]	; (800fe38 <dhcp_release_and_stop+0x130>)
 800fe00:	4a0d      	ldr	r2, [pc, #52]	; (800fe38 <dhcp_release_and_stop+0x130>)
 800fe02:	490d      	ldr	r1, [pc, #52]	; (800fe38 <dhcp_release_and_stop+0x130>)
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7f7 f8a5 	bl	8006f54 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	69f8      	ldr	r0, [r7, #28]
 800fe0e:	f000 f815 	bl	800fe3c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	791b      	ldrb	r3, [r3, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d008      	beq.n	800fe2c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fe1a:	f7fe ffbf 	bl	800ed9c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	2200      	movs	r2, #0
 800fe22:	711a      	strb	r2, [r3, #4]
 800fe24:	e002      	b.n	800fe2c <dhcp_release_and_stop+0x124>
    return;
 800fe26:	bf00      	nop
 800fe28:	e000      	b.n	800fe2c <dhcp_release_and_stop+0x124>
    return;
 800fe2a:	bf00      	nop
  }
}
 800fe2c:	3720      	adds	r7, #32
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bdb0      	pop	{r4, r5, r7, pc}
 800fe32:	bf00      	nop
 800fe34:	200005d4 	.word	0x200005d4
 800fe38:	08039740 	.word	0x08039740

0800fe3c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	460b      	mov	r3, r1
 800fe46:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	795b      	ldrb	r3, [r3, #5]
 800fe4c:	78fa      	ldrb	r2, [r7, #3]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d008      	beq.n	800fe64 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	78fa      	ldrb	r2, [r7, #3]
 800fe56:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2200      	movs	r2, #0
 800fe62:	811a      	strh	r2, [r3, #8]
  }
}
 800fe64:	bf00      	nop
 800fe66:	370c      	adds	r7, #12
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6039      	str	r1, [r7, #0]
 800fe78:	4611      	mov	r1, r2
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	80fb      	strh	r3, [r7, #6]
 800fe80:	460b      	mov	r3, r1
 800fe82:	717b      	strb	r3, [r7, #5]
 800fe84:	4613      	mov	r3, r2
 800fe86:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800fe88:	88fa      	ldrh	r2, [r7, #6]
 800fe8a:	793b      	ldrb	r3, [r7, #4]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	3302      	adds	r3, #2
 800fe90:	2b44      	cmp	r3, #68	; 0x44
 800fe92:	d906      	bls.n	800fea2 <dhcp_option+0x32>
 800fe94:	4b0d      	ldr	r3, [pc, #52]	; (800fecc <dhcp_option+0x5c>)
 800fe96:	f240 529a 	movw	r2, #1434	; 0x59a
 800fe9a:	490d      	ldr	r1, [pc, #52]	; (800fed0 <dhcp_option+0x60>)
 800fe9c:	480d      	ldr	r0, [pc, #52]	; (800fed4 <dhcp_option+0x64>)
 800fe9e:	f003 fb75 	bl	801358c <iprintf>
  options[options_out_len++] = option_type;
 800fea2:	88fb      	ldrh	r3, [r7, #6]
 800fea4:	1c5a      	adds	r2, r3, #1
 800fea6:	80fa      	strh	r2, [r7, #6]
 800fea8:	461a      	mov	r2, r3
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	4413      	add	r3, r2
 800feae:	797a      	ldrb	r2, [r7, #5]
 800feb0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800feb2:	88fb      	ldrh	r3, [r7, #6]
 800feb4:	1c5a      	adds	r2, r3, #1
 800feb6:	80fa      	strh	r2, [r7, #6]
 800feb8:	461a      	mov	r2, r3
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	4413      	add	r3, r2
 800febe:	793a      	ldrb	r2, [r7, #4]
 800fec0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fec2:	88fb      	ldrh	r3, [r7, #6]
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	08016e5c 	.word	0x08016e5c
 800fed0:	08016ff0 	.word	0x08016ff0
 800fed4:	08016ebc 	.word	0x08016ebc

0800fed8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	4603      	mov	r3, r0
 800fee0:	6039      	str	r1, [r7, #0]
 800fee2:	80fb      	strh	r3, [r7, #6]
 800fee4:	4613      	mov	r3, r2
 800fee6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800fee8:	88fb      	ldrh	r3, [r7, #6]
 800feea:	2b43      	cmp	r3, #67	; 0x43
 800feec:	d906      	bls.n	800fefc <dhcp_option_byte+0x24>
 800feee:	4b0a      	ldr	r3, [pc, #40]	; (800ff18 <dhcp_option_byte+0x40>)
 800fef0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800fef4:	4909      	ldr	r1, [pc, #36]	; (800ff1c <dhcp_option_byte+0x44>)
 800fef6:	480a      	ldr	r0, [pc, #40]	; (800ff20 <dhcp_option_byte+0x48>)
 800fef8:	f003 fb48 	bl	801358c <iprintf>
  options[options_out_len++] = value;
 800fefc:	88fb      	ldrh	r3, [r7, #6]
 800fefe:	1c5a      	adds	r2, r3, #1
 800ff00:	80fa      	strh	r2, [r7, #6]
 800ff02:	461a      	mov	r2, r3
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	4413      	add	r3, r2
 800ff08:	797a      	ldrb	r2, [r7, #5]
 800ff0a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ff0c:	88fb      	ldrh	r3, [r7, #6]
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	08016e5c 	.word	0x08016e5c
 800ff1c:	08017034 	.word	0x08017034
 800ff20:	08016ebc 	.word	0x08016ebc

0800ff24 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	6039      	str	r1, [r7, #0]
 800ff2e:	80fb      	strh	r3, [r7, #6]
 800ff30:	4613      	mov	r3, r2
 800ff32:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800ff34:	88fb      	ldrh	r3, [r7, #6]
 800ff36:	3302      	adds	r3, #2
 800ff38:	2b44      	cmp	r3, #68	; 0x44
 800ff3a:	d906      	bls.n	800ff4a <dhcp_option_short+0x26>
 800ff3c:	4b0f      	ldr	r3, [pc, #60]	; (800ff7c <dhcp_option_short+0x58>)
 800ff3e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800ff42:	490f      	ldr	r1, [pc, #60]	; (800ff80 <dhcp_option_short+0x5c>)
 800ff44:	480f      	ldr	r0, [pc, #60]	; (800ff84 <dhcp_option_short+0x60>)
 800ff46:	f003 fb21 	bl	801358c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800ff4a:	88bb      	ldrh	r3, [r7, #4]
 800ff4c:	0a1b      	lsrs	r3, r3, #8
 800ff4e:	b29a      	uxth	r2, r3
 800ff50:	88fb      	ldrh	r3, [r7, #6]
 800ff52:	1c59      	adds	r1, r3, #1
 800ff54:	80f9      	strh	r1, [r7, #6]
 800ff56:	4619      	mov	r1, r3
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	440b      	add	r3, r1
 800ff5c:	b2d2      	uxtb	r2, r2
 800ff5e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800ff60:	88fb      	ldrh	r3, [r7, #6]
 800ff62:	1c5a      	adds	r2, r3, #1
 800ff64:	80fa      	strh	r2, [r7, #6]
 800ff66:	461a      	mov	r2, r3
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	88ba      	ldrh	r2, [r7, #4]
 800ff6e:	b2d2      	uxtb	r2, r2
 800ff70:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ff72:	88fb      	ldrh	r3, [r7, #6]
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	08016e5c 	.word	0x08016e5c
 800ff80:	0801706c 	.word	0x0801706c
 800ff84:	08016ebc 	.word	0x08016ebc

0800ff88 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b084      	sub	sp, #16
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	4603      	mov	r3, r0
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
 800ff94:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800ff96:	89fb      	ldrh	r3, [r7, #14]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	2b44      	cmp	r3, #68	; 0x44
 800ff9c:	d906      	bls.n	800ffac <dhcp_option_long+0x24>
 800ff9e:	4b19      	ldr	r3, [pc, #100]	; (8010004 <dhcp_option_long+0x7c>)
 800ffa0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800ffa4:	4918      	ldr	r1, [pc, #96]	; (8010008 <dhcp_option_long+0x80>)
 800ffa6:	4819      	ldr	r0, [pc, #100]	; (801000c <dhcp_option_long+0x84>)
 800ffa8:	f003 faf0 	bl	801358c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	0e1a      	lsrs	r2, r3, #24
 800ffb0:	89fb      	ldrh	r3, [r7, #14]
 800ffb2:	1c59      	adds	r1, r3, #1
 800ffb4:	81f9      	strh	r1, [r7, #14]
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	440b      	add	r3, r1
 800ffbc:	b2d2      	uxtb	r2, r2
 800ffbe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	0c1a      	lsrs	r2, r3, #16
 800ffc4:	89fb      	ldrh	r3, [r7, #14]
 800ffc6:	1c59      	adds	r1, r3, #1
 800ffc8:	81f9      	strh	r1, [r7, #14]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	440b      	add	r3, r1
 800ffd0:	b2d2      	uxtb	r2, r2
 800ffd2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	0a1a      	lsrs	r2, r3, #8
 800ffd8:	89fb      	ldrh	r3, [r7, #14]
 800ffda:	1c59      	adds	r1, r3, #1
 800ffdc:	81f9      	strh	r1, [r7, #14]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	440b      	add	r3, r1
 800ffe4:	b2d2      	uxtb	r2, r2
 800ffe6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800ffe8:	89fb      	ldrh	r3, [r7, #14]
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	81fa      	strh	r2, [r7, #14]
 800ffee:	461a      	mov	r2, r3
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	4413      	add	r3, r2
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	b2d2      	uxtb	r2, r2
 800fff8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800fffa:	89fb      	ldrh	r3, [r7, #14]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3710      	adds	r7, #16
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	08016e5c 	.word	0x08016e5c
 8010008:	080170a8 	.word	0x080170a8
 801000c:	08016ebc 	.word	0x08016ebc

08010010 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b090      	sub	sp, #64	; 0x40
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801001a:	2300      	movs	r3, #0
 801001c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801001e:	2300      	movs	r3, #0
 8010020:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010022:	2208      	movs	r2, #8
 8010024:	2100      	movs	r1, #0
 8010026:	48be      	ldr	r0, [pc, #760]	; (8010320 <dhcp_parse_reply+0x310>)
 8010028:	f003 faa8 	bl	801357c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	895b      	ldrh	r3, [r3, #10]
 8010030:	2b2b      	cmp	r3, #43	; 0x2b
 8010032:	d802      	bhi.n	801003a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010034:	f06f 0301 	mvn.w	r3, #1
 8010038:	e2a8      	b.n	801058c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010040:	23f0      	movs	r3, #240	; 0xf0
 8010042:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	891b      	ldrh	r3, [r3, #8]
 8010048:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801004e:	e00c      	b.n	801006a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010052:	895b      	ldrh	r3, [r3, #10]
 8010054:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010056:	1ad3      	subs	r3, r2, r3
 8010058:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801005a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005c:	895b      	ldrh	r3, [r3, #10]
 801005e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801006a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006c:	2b00      	cmp	r3, #0
 801006e:	d004      	beq.n	801007a <dhcp_parse_reply+0x6a>
 8010070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010072:	895b      	ldrh	r3, [r3, #10]
 8010074:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010076:	429a      	cmp	r2, r3
 8010078:	d2ea      	bcs.n	8010050 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801007a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007c:	2b00      	cmp	r3, #0
 801007e:	d102      	bne.n	8010086 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010080:	f06f 0301 	mvn.w	r3, #1
 8010084:	e282      	b.n	801058c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8010086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010088:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801008a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801008c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801008e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010094:	e23a      	b.n	801050c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8010096:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801009a:	4413      	add	r3, r2
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80100a6:	f04f 33ff 	mov.w	r3, #4294967295
 80100aa:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80100ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80100ae:	3302      	adds	r3, #2
 80100b0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80100b2:	8bfa      	ldrh	r2, [r7, #30]
 80100b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d202      	bcs.n	80100c0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80100ba:	f06f 0301 	mvn.w	r3, #1
 80100be:	e265      	b.n	801058c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80100c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80100c2:	3301      	adds	r3, #1
 80100c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100c6:	8952      	ldrh	r2, [r2, #10]
 80100c8:	4293      	cmp	r3, r2
 80100ca:	da07      	bge.n	80100dc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80100cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80100ce:	3301      	adds	r3, #1
 80100d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100d2:	4413      	add	r3, r2
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100da:	e00b      	b.n	80100f4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d004      	beq.n	80100ee <dhcp_parse_reply+0xde>
 80100e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	e000      	b.n	80100f0 <dhcp_parse_reply+0xe0>
 80100ee:	2300      	movs	r3, #0
 80100f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80100f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80100fc:	7dfb      	ldrb	r3, [r7, #23]
 80100fe:	2b3b      	cmp	r3, #59	; 0x3b
 8010100:	f200 812d 	bhi.w	801035e <dhcp_parse_reply+0x34e>
 8010104:	a201      	add	r2, pc, #4	; (adr r2, 801010c <dhcp_parse_reply+0xfc>)
 8010106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801010a:	bf00      	nop
 801010c:	080101fd 	.word	0x080101fd
 8010110:	0801020d 	.word	0x0801020d
 8010114:	0801035f 	.word	0x0801035f
 8010118:	0801022f 	.word	0x0801022f
 801011c:	0801035f 	.word	0x0801035f
 8010120:	0801035f 	.word	0x0801035f
 8010124:	0801035f 	.word	0x0801035f
 8010128:	0801035f 	.word	0x0801035f
 801012c:	0801035f 	.word	0x0801035f
 8010130:	0801035f 	.word	0x0801035f
 8010134:	0801035f 	.word	0x0801035f
 8010138:	0801035f 	.word	0x0801035f
 801013c:	0801035f 	.word	0x0801035f
 8010140:	0801035f 	.word	0x0801035f
 8010144:	0801035f 	.word	0x0801035f
 8010148:	0801035f 	.word	0x0801035f
 801014c:	0801035f 	.word	0x0801035f
 8010150:	0801035f 	.word	0x0801035f
 8010154:	0801035f 	.word	0x0801035f
 8010158:	0801035f 	.word	0x0801035f
 801015c:	0801035f 	.word	0x0801035f
 8010160:	0801035f 	.word	0x0801035f
 8010164:	0801035f 	.word	0x0801035f
 8010168:	0801035f 	.word	0x0801035f
 801016c:	0801035f 	.word	0x0801035f
 8010170:	0801035f 	.word	0x0801035f
 8010174:	0801035f 	.word	0x0801035f
 8010178:	0801035f 	.word	0x0801035f
 801017c:	0801035f 	.word	0x0801035f
 8010180:	0801035f 	.word	0x0801035f
 8010184:	0801035f 	.word	0x0801035f
 8010188:	0801035f 	.word	0x0801035f
 801018c:	0801035f 	.word	0x0801035f
 8010190:	0801035f 	.word	0x0801035f
 8010194:	0801035f 	.word	0x0801035f
 8010198:	0801035f 	.word	0x0801035f
 801019c:	0801035f 	.word	0x0801035f
 80101a0:	0801035f 	.word	0x0801035f
 80101a4:	0801035f 	.word	0x0801035f
 80101a8:	0801035f 	.word	0x0801035f
 80101ac:	0801035f 	.word	0x0801035f
 80101b0:	0801035f 	.word	0x0801035f
 80101b4:	0801035f 	.word	0x0801035f
 80101b8:	0801035f 	.word	0x0801035f
 80101bc:	0801035f 	.word	0x0801035f
 80101c0:	0801035f 	.word	0x0801035f
 80101c4:	0801035f 	.word	0x0801035f
 80101c8:	0801035f 	.word	0x0801035f
 80101cc:	0801035f 	.word	0x0801035f
 80101d0:	0801035f 	.word	0x0801035f
 80101d4:	0801035f 	.word	0x0801035f
 80101d8:	0801025b 	.word	0x0801025b
 80101dc:	0801027d 	.word	0x0801027d
 80101e0:	080102b9 	.word	0x080102b9
 80101e4:	080102db 	.word	0x080102db
 80101e8:	0801035f 	.word	0x0801035f
 80101ec:	0801035f 	.word	0x0801035f
 80101f0:	0801035f 	.word	0x0801035f
 80101f4:	080102fd 	.word	0x080102fd
 80101f8:	0801033d 	.word	0x0801033d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80101fc:	2300      	movs	r3, #0
 80101fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010206:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801020a:	e0ac      	b.n	8010366 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801020c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010210:	2b04      	cmp	r3, #4
 8010212:	d009      	beq.n	8010228 <dhcp_parse_reply+0x218>
 8010214:	4b43      	ldr	r3, [pc, #268]	; (8010324 <dhcp_parse_reply+0x314>)
 8010216:	f240 622e 	movw	r2, #1582	; 0x62e
 801021a:	4943      	ldr	r1, [pc, #268]	; (8010328 <dhcp_parse_reply+0x318>)
 801021c:	4843      	ldr	r0, [pc, #268]	; (801032c <dhcp_parse_reply+0x31c>)
 801021e:	f003 f9b5 	bl	801358c <iprintf>
 8010222:	f06f 0305 	mvn.w	r3, #5
 8010226:	e1b1      	b.n	801058c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010228:	2306      	movs	r3, #6
 801022a:	623b      	str	r3, [r7, #32]
        break;
 801022c:	e09b      	b.n	8010366 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801022e:	2304      	movs	r3, #4
 8010230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010234:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801023c:	429a      	cmp	r2, r3
 801023e:	d209      	bcs.n	8010254 <dhcp_parse_reply+0x244>
 8010240:	4b38      	ldr	r3, [pc, #224]	; (8010324 <dhcp_parse_reply+0x314>)
 8010242:	f240 6233 	movw	r2, #1587	; 0x633
 8010246:	493a      	ldr	r1, [pc, #232]	; (8010330 <dhcp_parse_reply+0x320>)
 8010248:	4838      	ldr	r0, [pc, #224]	; (801032c <dhcp_parse_reply+0x31c>)
 801024a:	f003 f99f 	bl	801358c <iprintf>
 801024e:	f06f 0305 	mvn.w	r3, #5
 8010252:	e19b      	b.n	801058c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010254:	2307      	movs	r3, #7
 8010256:	623b      	str	r3, [r7, #32]
        break;
 8010258:	e085      	b.n	8010366 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801025a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801025e:	2b04      	cmp	r3, #4
 8010260:	d009      	beq.n	8010276 <dhcp_parse_reply+0x266>
 8010262:	4b30      	ldr	r3, [pc, #192]	; (8010324 <dhcp_parse_reply+0x314>)
 8010264:	f240 6241 	movw	r2, #1601	; 0x641
 8010268:	492f      	ldr	r1, [pc, #188]	; (8010328 <dhcp_parse_reply+0x318>)
 801026a:	4830      	ldr	r0, [pc, #192]	; (801032c <dhcp_parse_reply+0x31c>)
 801026c:	f003 f98e 	bl	801358c <iprintf>
 8010270:	f06f 0305 	mvn.w	r3, #5
 8010274:	e18a      	b.n	801058c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010276:	2303      	movs	r3, #3
 8010278:	623b      	str	r3, [r7, #32]
        break;
 801027a:	e074      	b.n	8010366 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801027c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010280:	2b01      	cmp	r3, #1
 8010282:	d009      	beq.n	8010298 <dhcp_parse_reply+0x288>
 8010284:	4b27      	ldr	r3, [pc, #156]	; (8010324 <dhcp_parse_reply+0x314>)
 8010286:	f240 624f 	movw	r2, #1615	; 0x64f
 801028a:	492a      	ldr	r1, [pc, #168]	; (8010334 <dhcp_parse_reply+0x324>)
 801028c:	4827      	ldr	r0, [pc, #156]	; (801032c <dhcp_parse_reply+0x31c>)
 801028e:	f003 f97d 	bl	801358c <iprintf>
 8010292:	f06f 0305 	mvn.w	r3, #5
 8010296:	e179      	b.n	801058c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010298:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801029a:	2bf0      	cmp	r3, #240	; 0xf0
 801029c:	d009      	beq.n	80102b2 <dhcp_parse_reply+0x2a2>
 801029e:	4b21      	ldr	r3, [pc, #132]	; (8010324 <dhcp_parse_reply+0x314>)
 80102a0:	f240 6251 	movw	r2, #1617	; 0x651
 80102a4:	4924      	ldr	r1, [pc, #144]	; (8010338 <dhcp_parse_reply+0x328>)
 80102a6:	4821      	ldr	r0, [pc, #132]	; (801032c <dhcp_parse_reply+0x31c>)
 80102a8:	f003 f970 	bl	801358c <iprintf>
 80102ac:	f06f 0305 	mvn.w	r3, #5
 80102b0:	e16c      	b.n	801058c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80102b2:	2300      	movs	r3, #0
 80102b4:	623b      	str	r3, [r7, #32]
        break;
 80102b6:	e056      	b.n	8010366 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80102b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d009      	beq.n	80102d4 <dhcp_parse_reply+0x2c4>
 80102c0:	4b18      	ldr	r3, [pc, #96]	; (8010324 <dhcp_parse_reply+0x314>)
 80102c2:	f240 6255 	movw	r2, #1621	; 0x655
 80102c6:	491b      	ldr	r1, [pc, #108]	; (8010334 <dhcp_parse_reply+0x324>)
 80102c8:	4818      	ldr	r0, [pc, #96]	; (801032c <dhcp_parse_reply+0x31c>)
 80102ca:	f003 f95f 	bl	801358c <iprintf>
 80102ce:	f06f 0305 	mvn.w	r3, #5
 80102d2:	e15b      	b.n	801058c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80102d4:	2301      	movs	r3, #1
 80102d6:	623b      	str	r3, [r7, #32]
        break;
 80102d8:	e045      	b.n	8010366 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80102da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102de:	2b04      	cmp	r3, #4
 80102e0:	d009      	beq.n	80102f6 <dhcp_parse_reply+0x2e6>
 80102e2:	4b10      	ldr	r3, [pc, #64]	; (8010324 <dhcp_parse_reply+0x314>)
 80102e4:	f240 6259 	movw	r2, #1625	; 0x659
 80102e8:	490f      	ldr	r1, [pc, #60]	; (8010328 <dhcp_parse_reply+0x318>)
 80102ea:	4810      	ldr	r0, [pc, #64]	; (801032c <dhcp_parse_reply+0x31c>)
 80102ec:	f003 f94e 	bl	801358c <iprintf>
 80102f0:	f06f 0305 	mvn.w	r3, #5
 80102f4:	e14a      	b.n	801058c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80102f6:	2302      	movs	r3, #2
 80102f8:	623b      	str	r3, [r7, #32]
        break;
 80102fa:	e034      	b.n	8010366 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80102fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010300:	2b04      	cmp	r3, #4
 8010302:	d009      	beq.n	8010318 <dhcp_parse_reply+0x308>
 8010304:	4b07      	ldr	r3, [pc, #28]	; (8010324 <dhcp_parse_reply+0x314>)
 8010306:	f240 625d 	movw	r2, #1629	; 0x65d
 801030a:	4907      	ldr	r1, [pc, #28]	; (8010328 <dhcp_parse_reply+0x318>)
 801030c:	4807      	ldr	r0, [pc, #28]	; (801032c <dhcp_parse_reply+0x31c>)
 801030e:	f003 f93d 	bl	801358c <iprintf>
 8010312:	f06f 0305 	mvn.w	r3, #5
 8010316:	e139      	b.n	801058c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010318:	2304      	movs	r3, #4
 801031a:	623b      	str	r3, [r7, #32]
        break;
 801031c:	e023      	b.n	8010366 <dhcp_parse_reply+0x356>
 801031e:	bf00      	nop
 8010320:	20007b40 	.word	0x20007b40
 8010324:	08016e5c 	.word	0x08016e5c
 8010328:	080170e4 	.word	0x080170e4
 801032c:	08016ebc 	.word	0x08016ebc
 8010330:	080170f0 	.word	0x080170f0
 8010334:	08017104 	.word	0x08017104
 8010338:	08017110 	.word	0x08017110
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801033c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010340:	2b04      	cmp	r3, #4
 8010342:	d009      	beq.n	8010358 <dhcp_parse_reply+0x348>
 8010344:	4b93      	ldr	r3, [pc, #588]	; (8010594 <dhcp_parse_reply+0x584>)
 8010346:	f240 6261 	movw	r2, #1633	; 0x661
 801034a:	4993      	ldr	r1, [pc, #588]	; (8010598 <dhcp_parse_reply+0x588>)
 801034c:	4893      	ldr	r0, [pc, #588]	; (801059c <dhcp_parse_reply+0x58c>)
 801034e:	f003 f91d 	bl	801358c <iprintf>
 8010352:	f06f 0305 	mvn.w	r3, #5
 8010356:	e119      	b.n	801058c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010358:	2305      	movs	r3, #5
 801035a:	623b      	str	r3, [r7, #32]
        break;
 801035c:	e003      	b.n	8010366 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801035e:	2300      	movs	r3, #0
 8010360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010364:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010366:	7dfb      	ldrb	r3, [r7, #23]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d103      	bne.n	8010374 <dhcp_parse_reply+0x364>
      offset++;
 801036c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801036e:	3301      	adds	r3, #1
 8010370:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010372:	e0a1      	b.n	80104b8 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010374:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801037a:	4413      	add	r3, r2
 801037c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8010380:	4293      	cmp	r3, r2
 8010382:	dd02      	ble.n	801038a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8010384:	f06f 0301 	mvn.w	r3, #1
 8010388:	e100      	b.n	801058c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801038a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801038e:	b29a      	uxth	r2, r3
 8010390:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010392:	4413      	add	r3, r2
 8010394:	b29b      	uxth	r3, r3
 8010396:	3302      	adds	r3, #2
 8010398:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801039a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 808a 	beq.w	80104b8 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80103a4:	2300      	movs	r3, #0
 80103a6:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80103a8:	6a3b      	ldr	r3, [r7, #32]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	db02      	blt.n	80103b4 <dhcp_parse_reply+0x3a4>
 80103ae:	6a3b      	ldr	r3, [r7, #32]
 80103b0:	2b07      	cmp	r3, #7
 80103b2:	dd06      	ble.n	80103c2 <dhcp_parse_reply+0x3b2>
 80103b4:	4b77      	ldr	r3, [pc, #476]	; (8010594 <dhcp_parse_reply+0x584>)
 80103b6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80103ba:	4979      	ldr	r1, [pc, #484]	; (80105a0 <dhcp_parse_reply+0x590>)
 80103bc:	4877      	ldr	r0, [pc, #476]	; (801059c <dhcp_parse_reply+0x58c>)
 80103be:	f003 f8e5 	bl	801358c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80103c2:	4a78      	ldr	r2, [pc, #480]	; (80105a4 <dhcp_parse_reply+0x594>)
 80103c4:	6a3b      	ldr	r3, [r7, #32]
 80103c6:	4413      	add	r3, r2
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d174      	bne.n	80104b8 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80103ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103d2:	2b04      	cmp	r3, #4
 80103d4:	bf28      	it	cs
 80103d6:	2304      	movcs	r3, #4
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80103dc:	8bfb      	ldrh	r3, [r7, #30]
 80103de:	8aba      	ldrh	r2, [r7, #20]
 80103e0:	f107 0108 	add.w	r1, r7, #8
 80103e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103e6:	f7f7 fbe3 	bl	8007bb0 <pbuf_copy_partial>
 80103ea:	4603      	mov	r3, r0
 80103ec:	461a      	mov	r2, r3
 80103ee:	8abb      	ldrh	r3, [r7, #20]
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d002      	beq.n	80103fa <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80103f4:	f06f 0301 	mvn.w	r3, #1
 80103f8:	e0c8      	b.n	801058c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80103fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103fe:	2b04      	cmp	r3, #4
 8010400:	d933      	bls.n	801046a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010406:	f003 0303 	and.w	r3, r3, #3
 801040a:	b2db      	uxtb	r3, r3
 801040c:	2b00      	cmp	r3, #0
 801040e:	d009      	beq.n	8010424 <dhcp_parse_reply+0x414>
 8010410:	4b60      	ldr	r3, [pc, #384]	; (8010594 <dhcp_parse_reply+0x584>)
 8010412:	f240 6281 	movw	r2, #1665	; 0x681
 8010416:	4964      	ldr	r1, [pc, #400]	; (80105a8 <dhcp_parse_reply+0x598>)
 8010418:	4860      	ldr	r0, [pc, #384]	; (801059c <dhcp_parse_reply+0x58c>)
 801041a:	f003 f8b7 	bl	801358c <iprintf>
 801041e:	f06f 0305 	mvn.w	r3, #5
 8010422:	e0b3      	b.n	801058c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8010424:	4a5f      	ldr	r2, [pc, #380]	; (80105a4 <dhcp_parse_reply+0x594>)
 8010426:	6a3b      	ldr	r3, [r7, #32]
 8010428:	4413      	add	r3, r2
 801042a:	2201      	movs	r2, #1
 801042c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	4618      	mov	r0, r3
 8010432:	f7f5 fd0e 	bl	8005e52 <lwip_htonl>
 8010436:	4602      	mov	r2, r0
 8010438:	495c      	ldr	r1, [pc, #368]	; (80105ac <dhcp_parse_reply+0x59c>)
 801043a:	6a3b      	ldr	r3, [r7, #32]
 801043c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010444:	3b04      	subs	r3, #4
 8010446:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801044a:	8bfb      	ldrh	r3, [r7, #30]
 801044c:	3304      	adds	r3, #4
 801044e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010450:	8a7a      	ldrh	r2, [r7, #18]
 8010452:	8bfb      	ldrh	r3, [r7, #30]
 8010454:	429a      	cmp	r2, r3
 8010456:	d202      	bcs.n	801045e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8010458:	f06f 0301 	mvn.w	r3, #1
 801045c:	e096      	b.n	801058c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801045e:	8a7b      	ldrh	r3, [r7, #18]
 8010460:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010462:	6a3b      	ldr	r3, [r7, #32]
 8010464:	3301      	adds	r3, #1
 8010466:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8010468:	e79e      	b.n	80103a8 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801046a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801046e:	2b04      	cmp	r3, #4
 8010470:	d106      	bne.n	8010480 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	4618      	mov	r0, r3
 8010476:	f7f5 fcec 	bl	8005e52 <lwip_htonl>
 801047a:	4603      	mov	r3, r0
 801047c:	60bb      	str	r3, [r7, #8]
 801047e:	e011      	b.n	80104a4 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010480:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010484:	2b01      	cmp	r3, #1
 8010486:	d009      	beq.n	801049c <dhcp_parse_reply+0x48c>
 8010488:	4b42      	ldr	r3, [pc, #264]	; (8010594 <dhcp_parse_reply+0x584>)
 801048a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801048e:	4948      	ldr	r1, [pc, #288]	; (80105b0 <dhcp_parse_reply+0x5a0>)
 8010490:	4842      	ldr	r0, [pc, #264]	; (801059c <dhcp_parse_reply+0x58c>)
 8010492:	f003 f87b 	bl	801358c <iprintf>
 8010496:	f06f 0305 	mvn.w	r3, #5
 801049a:	e077      	b.n	801058c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801049c:	f107 0308 	add.w	r3, r7, #8
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80104a4:	4a3f      	ldr	r2, [pc, #252]	; (80105a4 <dhcp_parse_reply+0x594>)
 80104a6:	6a3b      	ldr	r3, [r7, #32]
 80104a8:	4413      	add	r3, r2
 80104aa:	2201      	movs	r2, #1
 80104ac:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80104ae:	68ba      	ldr	r2, [r7, #8]
 80104b0:	493e      	ldr	r1, [pc, #248]	; (80105ac <dhcp_parse_reply+0x59c>)
 80104b2:	6a3b      	ldr	r3, [r7, #32]
 80104b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80104b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ba:	895b      	ldrh	r3, [r3, #10]
 80104bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80104be:	429a      	cmp	r2, r3
 80104c0:	d324      	bcc.n	801050c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80104c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c4:	895b      	ldrh	r3, [r3, #10]
 80104c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80104cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ce:	895b      	ldrh	r3, [r3, #10]
 80104d0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80104d2:	1ad3      	subs	r3, r2, r3
 80104d4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80104d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80104d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80104da:	429a      	cmp	r2, r3
 80104dc:	d213      	bcs.n	8010506 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80104de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80104e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d109      	bne.n	80104fe <dhcp_parse_reply+0x4ee>
 80104ea:	4b2a      	ldr	r3, [pc, #168]	; (8010594 <dhcp_parse_reply+0x584>)
 80104ec:	f240 629d 	movw	r2, #1693	; 0x69d
 80104f0:	4930      	ldr	r1, [pc, #192]	; (80105b4 <dhcp_parse_reply+0x5a4>)
 80104f2:	482a      	ldr	r0, [pc, #168]	; (801059c <dhcp_parse_reply+0x58c>)
 80104f4:	f003 f84a 	bl	801358c <iprintf>
 80104f8:	f06f 0305 	mvn.w	r3, #5
 80104fc:	e046      	b.n	801058c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80104fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010504:	e002      	b.n	801050c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8010506:	f06f 0301 	mvn.w	r3, #1
 801050a:	e03f      	b.n	801058c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801050c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00a      	beq.n	8010528 <dhcp_parse_reply+0x518>
 8010512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010514:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010516:	429a      	cmp	r2, r3
 8010518:	d206      	bcs.n	8010528 <dhcp_parse_reply+0x518>
 801051a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801051c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801051e:	4413      	add	r3, r2
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	2bff      	cmp	r3, #255	; 0xff
 8010524:	f47f adb7 	bne.w	8010096 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8010528:	4b1e      	ldr	r3, [pc, #120]	; (80105a4 <dhcp_parse_reply+0x594>)
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d018      	beq.n	8010562 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010530:	4b1e      	ldr	r3, [pc, #120]	; (80105ac <dhcp_parse_reply+0x59c>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010536:	4b1b      	ldr	r3, [pc, #108]	; (80105a4 <dhcp_parse_reply+0x594>)
 8010538:	2200      	movs	r2, #0
 801053a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2b01      	cmp	r3, #1
 8010540:	d102      	bne.n	8010548 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8010542:	2301      	movs	r3, #1
 8010544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010546:	e00c      	b.n	8010562 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2b02      	cmp	r3, #2
 801054c:	d102      	bne.n	8010554 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801054e:	2301      	movs	r3, #1
 8010550:	62bb      	str	r3, [r7, #40]	; 0x28
 8010552:	e006      	b.n	8010562 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2b03      	cmp	r3, #3
 8010558:	d103      	bne.n	8010562 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801055a:	2301      	movs	r3, #1
 801055c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801055e:	2301      	movs	r3, #1
 8010560:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010564:	2b00      	cmp	r3, #0
 8010566:	d006      	beq.n	8010576 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801056c:	236c      	movs	r3, #108	; 0x6c
 801056e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8010570:	23ec      	movs	r3, #236	; 0xec
 8010572:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010574:	e569      	b.n	801004a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010578:	2b00      	cmp	r3, #0
 801057a:	d006      	beq.n	801058a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801057c:	2300      	movs	r3, #0
 801057e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8010580:	232c      	movs	r3, #44	; 0x2c
 8010582:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010584:	236c      	movs	r3, #108	; 0x6c
 8010586:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8010588:	e55f      	b.n	801004a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801058a:	2300      	movs	r3, #0
}
 801058c:	4618      	mov	r0, r3
 801058e:	3740      	adds	r7, #64	; 0x40
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	08016e5c 	.word	0x08016e5c
 8010598:	080170e4 	.word	0x080170e4
 801059c:	08016ebc 	.word	0x08016ebc
 80105a0:	08017128 	.word	0x08017128
 80105a4:	20007b40 	.word	0x20007b40
 80105a8:	0801713c 	.word	0x0801713c
 80105ac:	20007b48 	.word	0x20007b48
 80105b0:	08017154 	.word	0x08017154
 80105b4:	08017168 	.word	0x08017168

080105b8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b08a      	sub	sp, #40	; 0x28
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	607a      	str	r2, [r7, #4]
 80105c4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80105c6:	4b60      	ldr	r3, [pc, #384]	; (8010748 <dhcp_recv+0x190>)
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80105cc:	6a3b      	ldr	r3, [r7, #32]
 80105ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	f000 809d 	beq.w	801071a <dhcp_recv+0x162>
 80105e0:	69fb      	ldr	r3, [r7, #28]
 80105e2:	791b      	ldrb	r3, [r3, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 8098 	beq.w	801071a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	895b      	ldrh	r3, [r3, #10]
 80105ee:	2b2b      	cmp	r3, #43	; 0x2b
 80105f0:	f240 8095 	bls.w	801071e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	f040 8092 	bne.w	8010722 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80105fe:	2300      	movs	r3, #0
 8010600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010604:	e012      	b.n	801062c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8010606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801060a:	6a3a      	ldr	r2, [r7, #32]
 801060c:	4413      	add	r3, r2
 801060e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010616:	69b9      	ldr	r1, [r7, #24]
 8010618:	440b      	add	r3, r1
 801061a:	7f1b      	ldrb	r3, [r3, #28]
 801061c:	429a      	cmp	r2, r3
 801061e:	f040 8082 	bne.w	8010726 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010626:	3301      	adds	r3, #1
 8010628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801062c:	6a3b      	ldr	r3, [r7, #32]
 801062e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010632:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010636:	429a      	cmp	r2, r3
 8010638:	d203      	bcs.n	8010642 <dhcp_recv+0x8a>
 801063a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801063e:	2b05      	cmp	r3, #5
 8010640:	d9e1      	bls.n	8010606 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	4618      	mov	r0, r3
 8010648:	f7f5 fc03 	bl	8005e52 <lwip_htonl>
 801064c:	4602      	mov	r2, r0
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	429a      	cmp	r2, r3
 8010654:	d169      	bne.n	801072a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8010656:	69f9      	ldr	r1, [r7, #28]
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7ff fcd9 	bl	8010010 <dhcp_parse_reply>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d164      	bne.n	801072e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8010664:	4b39      	ldr	r3, [pc, #228]	; (801074c <dhcp_recv+0x194>)
 8010666:	785b      	ldrb	r3, [r3, #1]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d062      	beq.n	8010732 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8010672:	4b37      	ldr	r3, [pc, #220]	; (8010750 <dhcp_recv+0x198>)
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8010678:	7cfb      	ldrb	r3, [r7, #19]
 801067a:	2b05      	cmp	r3, #5
 801067c:	d12a      	bne.n	80106d4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	795b      	ldrb	r3, [r3, #5]
 8010682:	2b01      	cmp	r3, #1
 8010684:	d112      	bne.n	80106ac <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8010686:	6979      	ldr	r1, [r7, #20]
 8010688:	6a38      	ldr	r0, [r7, #32]
 801068a:	f7fe fe53 	bl	800f334 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801068e:	6a3b      	ldr	r3, [r7, #32]
 8010690:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010694:	f003 0308 	and.w	r3, r3, #8
 8010698:	2b00      	cmp	r3, #0
 801069a:	d003      	beq.n	80106a4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801069c:	6a38      	ldr	r0, [r7, #32]
 801069e:	f7fe fbc1 	bl	800ee24 <dhcp_check>
 80106a2:	e049      	b.n	8010738 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80106a4:	6a38      	ldr	r0, [r7, #32]
 80106a6:	f7ff f867 	bl	800f778 <dhcp_bind>
 80106aa:	e045      	b.n	8010738 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	795b      	ldrb	r3, [r3, #5]
 80106b0:	2b03      	cmp	r3, #3
 80106b2:	d007      	beq.n	80106c4 <dhcp_recv+0x10c>
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	795b      	ldrb	r3, [r3, #5]
 80106b8:	2b04      	cmp	r3, #4
 80106ba:	d003      	beq.n	80106c4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80106c0:	2b05      	cmp	r3, #5
 80106c2:	d139      	bne.n	8010738 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80106c4:	6979      	ldr	r1, [r7, #20]
 80106c6:	6a38      	ldr	r0, [r7, #32]
 80106c8:	f7fe fe34 	bl	800f334 <dhcp_handle_ack>
      dhcp_bind(netif);
 80106cc:	6a38      	ldr	r0, [r7, #32]
 80106ce:	f7ff f853 	bl	800f778 <dhcp_bind>
 80106d2:	e031      	b.n	8010738 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80106d4:	7cfb      	ldrb	r3, [r7, #19]
 80106d6:	2b06      	cmp	r3, #6
 80106d8:	d113      	bne.n	8010702 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80106da:	69fb      	ldr	r3, [r7, #28]
 80106dc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80106de:	2b03      	cmp	r3, #3
 80106e0:	d00b      	beq.n	80106fa <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	795b      	ldrb	r3, [r3, #5]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d007      	beq.n	80106fa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80106ee:	2b04      	cmp	r3, #4
 80106f0:	d003      	beq.n	80106fa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	795b      	ldrb	r3, [r3, #5]
 80106f6:	2b05      	cmp	r3, #5
 80106f8:	d103      	bne.n	8010702 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80106fa:	6a38      	ldr	r0, [r7, #32]
 80106fc:	f7fe fb78 	bl	800edf0 <dhcp_handle_nak>
 8010700:	e01a      	b.n	8010738 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8010702:	7cfb      	ldrb	r3, [r7, #19]
 8010704:	2b02      	cmp	r3, #2
 8010706:	d116      	bne.n	8010736 <dhcp_recv+0x17e>
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	795b      	ldrb	r3, [r3, #5]
 801070c:	2b06      	cmp	r3, #6
 801070e:	d112      	bne.n	8010736 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010710:	6979      	ldr	r1, [r7, #20]
 8010712:	6a38      	ldr	r0, [r7, #32]
 8010714:	f7fe fbba 	bl	800ee8c <dhcp_handle_offer>
 8010718:	e00e      	b.n	8010738 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801071a:	bf00      	nop
 801071c:	e00c      	b.n	8010738 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801071e:	bf00      	nop
 8010720:	e00a      	b.n	8010738 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010722:	bf00      	nop
 8010724:	e008      	b.n	8010738 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8010726:	bf00      	nop
 8010728:	e006      	b.n	8010738 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801072a:	bf00      	nop
 801072c:	e004      	b.n	8010738 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801072e:	bf00      	nop
 8010730:	e002      	b.n	8010738 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8010732:	bf00      	nop
 8010734:	e000      	b.n	8010738 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8010736:	bf00      	nop
  pbuf_free(p);
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f7f7 f83f 	bl	80077bc <pbuf_free>
}
 801073e:	bf00      	nop
 8010740:	3728      	adds	r7, #40	; 0x28
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	20004534 	.word	0x20004534
 801074c:	20007b40 	.word	0x20007b40
 8010750:	20007b48 	.word	0x20007b48

08010754 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b088      	sub	sp, #32
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	603b      	str	r3, [r7, #0]
 8010760:	4613      	mov	r3, r2
 8010762:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d108      	bne.n	801077c <dhcp_create_msg+0x28>
 801076a:	4b5f      	ldr	r3, [pc, #380]	; (80108e8 <dhcp_create_msg+0x194>)
 801076c:	f240 7269 	movw	r2, #1897	; 0x769
 8010770:	495e      	ldr	r1, [pc, #376]	; (80108ec <dhcp_create_msg+0x198>)
 8010772:	485f      	ldr	r0, [pc, #380]	; (80108f0 <dhcp_create_msg+0x19c>)
 8010774:	f002 ff0a 	bl	801358c <iprintf>
 8010778:	2300      	movs	r3, #0
 801077a:	e0b1      	b.n	80108e0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d108      	bne.n	8010794 <dhcp_create_msg+0x40>
 8010782:	4b59      	ldr	r3, [pc, #356]	; (80108e8 <dhcp_create_msg+0x194>)
 8010784:	f240 726a 	movw	r2, #1898	; 0x76a
 8010788:	495a      	ldr	r1, [pc, #360]	; (80108f4 <dhcp_create_msg+0x1a0>)
 801078a:	4859      	ldr	r0, [pc, #356]	; (80108f0 <dhcp_create_msg+0x19c>)
 801078c:	f002 fefe 	bl	801358c <iprintf>
 8010790:	2300      	movs	r3, #0
 8010792:	e0a5      	b.n	80108e0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010794:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010798:	f44f 719a 	mov.w	r1, #308	; 0x134
 801079c:	2036      	movs	r0, #54	; 0x36
 801079e:	f7f6 fd6d 	bl	800727c <pbuf_alloc>
 80107a2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d101      	bne.n	80107ae <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80107aa:	2300      	movs	r3, #0
 80107ac:	e098      	b.n	80108e0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	895b      	ldrh	r3, [r3, #10]
 80107b2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80107b6:	d206      	bcs.n	80107c6 <dhcp_create_msg+0x72>
 80107b8:	4b4b      	ldr	r3, [pc, #300]	; (80108e8 <dhcp_create_msg+0x194>)
 80107ba:	f240 7271 	movw	r2, #1905	; 0x771
 80107be:	494e      	ldr	r1, [pc, #312]	; (80108f8 <dhcp_create_msg+0x1a4>)
 80107c0:	484b      	ldr	r0, [pc, #300]	; (80108f0 <dhcp_create_msg+0x19c>)
 80107c2:	f002 fee3 	bl	801358c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80107c6:	79fb      	ldrb	r3, [r7, #7]
 80107c8:	2b03      	cmp	r3, #3
 80107ca:	d103      	bne.n	80107d4 <dhcp_create_msg+0x80>
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	795b      	ldrb	r3, [r3, #5]
 80107d0:	2b03      	cmp	r3, #3
 80107d2:	d10d      	bne.n	80107f0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	799b      	ldrb	r3, [r3, #6]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d105      	bne.n	80107e8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80107dc:	f002 feee 	bl	80135bc <rand>
 80107e0:	4603      	mov	r3, r0
 80107e2:	461a      	mov	r2, r3
 80107e4:	4b45      	ldr	r3, [pc, #276]	; (80108fc <dhcp_create_msg+0x1a8>)
 80107e6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80107e8:	4b44      	ldr	r3, [pc, #272]	; (80108fc <dhcp_create_msg+0x1a8>)
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80107f6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80107fa:	2100      	movs	r1, #0
 80107fc:	6978      	ldr	r0, [r7, #20]
 80107fe:	f002 febd 	bl	801357c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	2201      	movs	r2, #1
 8010806:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	2201      	movs	r2, #1
 801080c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	4618      	mov	r0, r3
 801081e:	f7f5 fb18 	bl	8005e52 <lwip_htonl>
 8010822:	4602      	mov	r2, r0
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010828:	79fb      	ldrb	r3, [r7, #7]
 801082a:	2b08      	cmp	r3, #8
 801082c:	d010      	beq.n	8010850 <dhcp_create_msg+0xfc>
 801082e:	79fb      	ldrb	r3, [r7, #7]
 8010830:	2b04      	cmp	r3, #4
 8010832:	d00d      	beq.n	8010850 <dhcp_create_msg+0xfc>
 8010834:	79fb      	ldrb	r3, [r7, #7]
 8010836:	2b07      	cmp	r3, #7
 8010838:	d00a      	beq.n	8010850 <dhcp_create_msg+0xfc>
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	2b03      	cmp	r3, #3
 801083e:	d10c      	bne.n	801085a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010844:	2b05      	cmp	r3, #5
 8010846:	d003      	beq.n	8010850 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	795b      	ldrb	r3, [r3, #5]
 801084c:	2b04      	cmp	r3, #4
 801084e:	d104      	bne.n	801085a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	3304      	adds	r3, #4
 8010854:	681a      	ldr	r2, [r3, #0]
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801085a:	2300      	movs	r3, #0
 801085c:	83fb      	strh	r3, [r7, #30]
 801085e:	e00c      	b.n	801087a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010860:	8bfa      	ldrh	r2, [r7, #30]
 8010862:	8bfb      	ldrh	r3, [r7, #30]
 8010864:	68f9      	ldr	r1, [r7, #12]
 8010866:	440a      	add	r2, r1
 8010868:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801086c:	697a      	ldr	r2, [r7, #20]
 801086e:	4413      	add	r3, r2
 8010870:	460a      	mov	r2, r1
 8010872:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010874:	8bfb      	ldrh	r3, [r7, #30]
 8010876:	3301      	adds	r3, #1
 8010878:	83fb      	strh	r3, [r7, #30]
 801087a:	8bfb      	ldrh	r3, [r7, #30]
 801087c:	2b05      	cmp	r3, #5
 801087e:	d9ef      	bls.n	8010860 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	2200      	movs	r2, #0
 8010884:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010888:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801088c:	2200      	movs	r2, #0
 801088e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010892:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8010896:	2200      	movs	r2, #0
 8010898:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801089c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80108a0:	2200      	movs	r2, #0
 80108a2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80108a6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108b0:	2301      	movs	r3, #1
 80108b2:	2235      	movs	r2, #53	; 0x35
 80108b4:	2000      	movs	r0, #0
 80108b6:	f7ff fadb 	bl	800fe70 <dhcp_option>
 80108ba:	4603      	mov	r3, r0
 80108bc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108c4:	79fa      	ldrb	r2, [r7, #7]
 80108c6:	8a7b      	ldrh	r3, [r7, #18]
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7ff fb05 	bl	800fed8 <dhcp_option_byte>
 80108ce:	4603      	mov	r3, r0
 80108d0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	8a7a      	ldrh	r2, [r7, #18]
 80108dc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80108de:	69bb      	ldr	r3, [r7, #24]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3720      	adds	r7, #32
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	08016e5c 	.word	0x08016e5c
 80108ec:	0801717c 	.word	0x0801717c
 80108f0:	08016ebc 	.word	0x08016ebc
 80108f4:	0801719c 	.word	0x0801719c
 80108f8:	080171bc 	.word	0x080171bc
 80108fc:	200005dc 	.word	0x200005dc

08010900 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	4603      	mov	r3, r0
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
 801090c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801090e:	89fb      	ldrh	r3, [r7, #14]
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	81fa      	strh	r2, [r7, #14]
 8010914:	461a      	mov	r2, r3
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	4413      	add	r3, r2
 801091a:	22ff      	movs	r2, #255	; 0xff
 801091c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801091e:	e007      	b.n	8010930 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010920:	89fb      	ldrh	r3, [r7, #14]
 8010922:	1c5a      	adds	r2, r3, #1
 8010924:	81fa      	strh	r2, [r7, #14]
 8010926:	461a      	mov	r2, r3
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	4413      	add	r3, r2
 801092c:	2200      	movs	r2, #0
 801092e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010930:	89fb      	ldrh	r3, [r7, #14]
 8010932:	2b43      	cmp	r3, #67	; 0x43
 8010934:	d904      	bls.n	8010940 <dhcp_option_trailer+0x40>
 8010936:	89fb      	ldrh	r3, [r7, #14]
 8010938:	f003 0303 	and.w	r3, r3, #3
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <dhcp_option_trailer+0x46>
 8010940:	89fb      	ldrh	r3, [r7, #14]
 8010942:	2b43      	cmp	r3, #67	; 0x43
 8010944:	d9ec      	bls.n	8010920 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010946:	89fb      	ldrh	r3, [r7, #14]
 8010948:	33f0      	adds	r3, #240	; 0xf0
 801094a:	b29b      	uxth	r3, r3
 801094c:	4619      	mov	r1, r3
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f7f6 fdae 	bl	80074b0 <pbuf_realloc>
}
 8010954:	bf00      	nop
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801095c:	b480      	push	{r7}
 801095e:	b085      	sub	sp, #20
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d017      	beq.n	801099a <dhcp_supplied_address+0x3e>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801096e:	2b00      	cmp	r3, #0
 8010970:	d013      	beq.n	801099a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010976:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	795b      	ldrb	r3, [r3, #5]
 801097c:	2b0a      	cmp	r3, #10
 801097e:	d007      	beq.n	8010990 <dhcp_supplied_address+0x34>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	795b      	ldrb	r3, [r3, #5]
 8010984:	2b05      	cmp	r3, #5
 8010986:	d003      	beq.n	8010990 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801098c:	2b04      	cmp	r3, #4
 801098e:	d101      	bne.n	8010994 <dhcp_supplied_address+0x38>
 8010990:	2301      	movs	r3, #1
 8010992:	e000      	b.n	8010996 <dhcp_supplied_address+0x3a>
 8010994:	2300      	movs	r3, #0
 8010996:	b2db      	uxtb	r3, r3
 8010998:	e000      	b.n	801099c <dhcp_supplied_address+0x40>
  }
  return 0;
 801099a:	2300      	movs	r3, #0
}
 801099c:	4618      	mov	r0, r3
 801099e:	3714      	adds	r7, #20
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80109b0:	4915      	ldr	r1, [pc, #84]	; (8010a08 <etharp_free_entry+0x60>)
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	4613      	mov	r3, r2
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	4413      	add	r3, r2
 80109ba:	00db      	lsls	r3, r3, #3
 80109bc:	440b      	add	r3, r1
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d013      	beq.n	80109ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80109c4:	4910      	ldr	r1, [pc, #64]	; (8010a08 <etharp_free_entry+0x60>)
 80109c6:	687a      	ldr	r2, [r7, #4]
 80109c8:	4613      	mov	r3, r2
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4413      	add	r3, r2
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	440b      	add	r3, r1
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7f6 fef1 	bl	80077bc <pbuf_free>
    arp_table[i].q = NULL;
 80109da:	490b      	ldr	r1, [pc, #44]	; (8010a08 <etharp_free_entry+0x60>)
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	4613      	mov	r3, r2
 80109e0:	005b      	lsls	r3, r3, #1
 80109e2:	4413      	add	r3, r2
 80109e4:	00db      	lsls	r3, r3, #3
 80109e6:	440b      	add	r3, r1
 80109e8:	2200      	movs	r2, #0
 80109ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80109ec:	4906      	ldr	r1, [pc, #24]	; (8010a08 <etharp_free_entry+0x60>)
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	4613      	mov	r3, r2
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	4413      	add	r3, r2
 80109f6:	00db      	lsls	r3, r3, #3
 80109f8:	440b      	add	r3, r1
 80109fa:	3314      	adds	r3, #20
 80109fc:	2200      	movs	r2, #0
 80109fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010a00:	bf00      	nop
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	200005e0 	.word	0x200005e0

08010a0c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a12:	2300      	movs	r3, #0
 8010a14:	607b      	str	r3, [r7, #4]
 8010a16:	e096      	b.n	8010b46 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010a18:	494f      	ldr	r1, [pc, #316]	; (8010b58 <etharp_tmr+0x14c>)
 8010a1a:	687a      	ldr	r2, [r7, #4]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	005b      	lsls	r3, r3, #1
 8010a20:	4413      	add	r3, r2
 8010a22:	00db      	lsls	r3, r3, #3
 8010a24:	440b      	add	r3, r1
 8010a26:	3314      	adds	r3, #20
 8010a28:	781b      	ldrb	r3, [r3, #0]
 8010a2a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010a2c:	78fb      	ldrb	r3, [r7, #3]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	f000 8086 	beq.w	8010b40 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010a34:	4948      	ldr	r1, [pc, #288]	; (8010b58 <etharp_tmr+0x14c>)
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	005b      	lsls	r3, r3, #1
 8010a3c:	4413      	add	r3, r2
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	440b      	add	r3, r1
 8010a42:	3312      	adds	r3, #18
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	3301      	adds	r3, #1
 8010a48:	b298      	uxth	r0, r3
 8010a4a:	4943      	ldr	r1, [pc, #268]	; (8010b58 <etharp_tmr+0x14c>)
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	440b      	add	r3, r1
 8010a58:	3312      	adds	r3, #18
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010a5e:	493e      	ldr	r1, [pc, #248]	; (8010b58 <etharp_tmr+0x14c>)
 8010a60:	687a      	ldr	r2, [r7, #4]
 8010a62:	4613      	mov	r3, r2
 8010a64:	005b      	lsls	r3, r3, #1
 8010a66:	4413      	add	r3, r2
 8010a68:	00db      	lsls	r3, r3, #3
 8010a6a:	440b      	add	r3, r1
 8010a6c:	3312      	adds	r3, #18
 8010a6e:	881b      	ldrh	r3, [r3, #0]
 8010a70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010a74:	d215      	bcs.n	8010aa2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010a76:	4938      	ldr	r1, [pc, #224]	; (8010b58 <etharp_tmr+0x14c>)
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	005b      	lsls	r3, r3, #1
 8010a7e:	4413      	add	r3, r2
 8010a80:	00db      	lsls	r3, r3, #3
 8010a82:	440b      	add	r3, r1
 8010a84:	3314      	adds	r3, #20
 8010a86:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d10e      	bne.n	8010aaa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010a8c:	4932      	ldr	r1, [pc, #200]	; (8010b58 <etharp_tmr+0x14c>)
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	4613      	mov	r3, r2
 8010a92:	005b      	lsls	r3, r3, #1
 8010a94:	4413      	add	r3, r2
 8010a96:	00db      	lsls	r3, r3, #3
 8010a98:	440b      	add	r3, r1
 8010a9a:	3312      	adds	r3, #18
 8010a9c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010a9e:	2b04      	cmp	r3, #4
 8010aa0:	d903      	bls.n	8010aaa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7ff ff80 	bl	80109a8 <etharp_free_entry>
 8010aa8:	e04a      	b.n	8010b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010aaa:	492b      	ldr	r1, [pc, #172]	; (8010b58 <etharp_tmr+0x14c>)
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	4413      	add	r3, r2
 8010ab4:	00db      	lsls	r3, r3, #3
 8010ab6:	440b      	add	r3, r1
 8010ab8:	3314      	adds	r3, #20
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	2b03      	cmp	r3, #3
 8010abe:	d10a      	bne.n	8010ad6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010ac0:	4925      	ldr	r1, [pc, #148]	; (8010b58 <etharp_tmr+0x14c>)
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	005b      	lsls	r3, r3, #1
 8010ac8:	4413      	add	r3, r2
 8010aca:	00db      	lsls	r3, r3, #3
 8010acc:	440b      	add	r3, r1
 8010ace:	3314      	adds	r3, #20
 8010ad0:	2204      	movs	r2, #4
 8010ad2:	701a      	strb	r2, [r3, #0]
 8010ad4:	e034      	b.n	8010b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010ad6:	4920      	ldr	r1, [pc, #128]	; (8010b58 <etharp_tmr+0x14c>)
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	4613      	mov	r3, r2
 8010adc:	005b      	lsls	r3, r3, #1
 8010ade:	4413      	add	r3, r2
 8010ae0:	00db      	lsls	r3, r3, #3
 8010ae2:	440b      	add	r3, r1
 8010ae4:	3314      	adds	r3, #20
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b04      	cmp	r3, #4
 8010aea:	d10a      	bne.n	8010b02 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010aec:	491a      	ldr	r1, [pc, #104]	; (8010b58 <etharp_tmr+0x14c>)
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	4613      	mov	r3, r2
 8010af2:	005b      	lsls	r3, r3, #1
 8010af4:	4413      	add	r3, r2
 8010af6:	00db      	lsls	r3, r3, #3
 8010af8:	440b      	add	r3, r1
 8010afa:	3314      	adds	r3, #20
 8010afc:	2202      	movs	r2, #2
 8010afe:	701a      	strb	r2, [r3, #0]
 8010b00:	e01e      	b.n	8010b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010b02:	4915      	ldr	r1, [pc, #84]	; (8010b58 <etharp_tmr+0x14c>)
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	4613      	mov	r3, r2
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	4413      	add	r3, r2
 8010b0c:	00db      	lsls	r3, r3, #3
 8010b0e:	440b      	add	r3, r1
 8010b10:	3314      	adds	r3, #20
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d113      	bne.n	8010b40 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010b18:	490f      	ldr	r1, [pc, #60]	; (8010b58 <etharp_tmr+0x14c>)
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	005b      	lsls	r3, r3, #1
 8010b20:	4413      	add	r3, r2
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	440b      	add	r3, r1
 8010b26:	3308      	adds	r3, #8
 8010b28:	6818      	ldr	r0, [r3, #0]
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	4413      	add	r3, r2
 8010b32:	00db      	lsls	r3, r3, #3
 8010b34:	4a08      	ldr	r2, [pc, #32]	; (8010b58 <etharp_tmr+0x14c>)
 8010b36:	4413      	add	r3, r2
 8010b38:	3304      	adds	r3, #4
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	f000 feb4 	bl	80118a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	3301      	adds	r3, #1
 8010b44:	607b      	str	r3, [r7, #4]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2b09      	cmp	r3, #9
 8010b4a:	f77f af65 	ble.w	8010a18 <etharp_tmr+0xc>
      }
    }
  }
}
 8010b4e:	bf00      	nop
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	200005e0 	.word	0x200005e0

08010b5c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b08a      	sub	sp, #40	; 0x28
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	460b      	mov	r3, r1
 8010b66:	607a      	str	r2, [r7, #4]
 8010b68:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010b6a:	230a      	movs	r3, #10
 8010b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010b6e:	230a      	movs	r3, #10
 8010b70:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010b72:	230a      	movs	r3, #10
 8010b74:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010b76:	2300      	movs	r3, #0
 8010b78:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010b7a:	230a      	movs	r3, #10
 8010b7c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	83bb      	strh	r3, [r7, #28]
 8010b82:	2300      	movs	r3, #0
 8010b84:	837b      	strh	r3, [r7, #26]
 8010b86:	2300      	movs	r3, #0
 8010b88:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	843b      	strh	r3, [r7, #32]
 8010b8e:	e0ae      	b.n	8010cee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010b90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b94:	49a6      	ldr	r1, [pc, #664]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010b96:	4613      	mov	r3, r2
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	00db      	lsls	r3, r3, #3
 8010b9e:	440b      	add	r3, r1
 8010ba0:	3314      	adds	r3, #20
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010ba6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010baa:	2b0a      	cmp	r3, #10
 8010bac:	d105      	bne.n	8010bba <etharp_find_entry+0x5e>
 8010bae:	7dfb      	ldrb	r3, [r7, #23]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d102      	bne.n	8010bba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010bb4:	8c3b      	ldrh	r3, [r7, #32]
 8010bb6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010bb8:	e095      	b.n	8010ce6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010bba:	7dfb      	ldrb	r3, [r7, #23]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f000 8092 	beq.w	8010ce6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010bc2:	7dfb      	ldrb	r3, [r7, #23]
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d009      	beq.n	8010bdc <etharp_find_entry+0x80>
 8010bc8:	7dfb      	ldrb	r3, [r7, #23]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d806      	bhi.n	8010bdc <etharp_find_entry+0x80>
 8010bce:	4b99      	ldr	r3, [pc, #612]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010bd0:	f240 1223 	movw	r2, #291	; 0x123
 8010bd4:	4998      	ldr	r1, [pc, #608]	; (8010e38 <etharp_find_entry+0x2dc>)
 8010bd6:	4899      	ldr	r0, [pc, #612]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010bd8:	f002 fcd8 	bl	801358c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d020      	beq.n	8010c24 <etharp_find_entry+0xc8>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6819      	ldr	r1, [r3, #0]
 8010be6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bea:	4891      	ldr	r0, [pc, #580]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010bec:	4613      	mov	r3, r2
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	4413      	add	r3, r2
 8010bf2:	00db      	lsls	r3, r3, #3
 8010bf4:	4403      	add	r3, r0
 8010bf6:	3304      	adds	r3, #4
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	4299      	cmp	r1, r3
 8010bfc:	d112      	bne.n	8010c24 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00c      	beq.n	8010c1e <etharp_find_entry+0xc2>
 8010c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c08:	4989      	ldr	r1, [pc, #548]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	4413      	add	r3, r2
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	440b      	add	r3, r1
 8010c14:	3308      	adds	r3, #8
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d102      	bne.n	8010c24 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010c1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c22:	e100      	b.n	8010e26 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010c24:	7dfb      	ldrb	r3, [r7, #23]
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d140      	bne.n	8010cac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c2e:	4980      	ldr	r1, [pc, #512]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c30:	4613      	mov	r3, r2
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	4413      	add	r3, r2
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	440b      	add	r3, r1
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d01a      	beq.n	8010c76 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010c40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c44:	497a      	ldr	r1, [pc, #488]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c46:	4613      	mov	r3, r2
 8010c48:	005b      	lsls	r3, r3, #1
 8010c4a:	4413      	add	r3, r2
 8010c4c:	00db      	lsls	r3, r3, #3
 8010c4e:	440b      	add	r3, r1
 8010c50:	3312      	adds	r3, #18
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	8bba      	ldrh	r2, [r7, #28]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d845      	bhi.n	8010ce6 <etharp_find_entry+0x18a>
            old_queue = i;
 8010c5a:	8c3b      	ldrh	r3, [r7, #32]
 8010c5c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c62:	4973      	ldr	r1, [pc, #460]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c64:	4613      	mov	r3, r2
 8010c66:	005b      	lsls	r3, r3, #1
 8010c68:	4413      	add	r3, r2
 8010c6a:	00db      	lsls	r3, r3, #3
 8010c6c:	440b      	add	r3, r1
 8010c6e:	3312      	adds	r3, #18
 8010c70:	881b      	ldrh	r3, [r3, #0]
 8010c72:	83bb      	strh	r3, [r7, #28]
 8010c74:	e037      	b.n	8010ce6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c7a:	496d      	ldr	r1, [pc, #436]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	4413      	add	r3, r2
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	440b      	add	r3, r1
 8010c86:	3312      	adds	r3, #18
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	8b7a      	ldrh	r2, [r7, #26]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d82a      	bhi.n	8010ce6 <etharp_find_entry+0x18a>
            old_pending = i;
 8010c90:	8c3b      	ldrh	r3, [r7, #32]
 8010c92:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010c94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c98:	4965      	ldr	r1, [pc, #404]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	005b      	lsls	r3, r3, #1
 8010c9e:	4413      	add	r3, r2
 8010ca0:	00db      	lsls	r3, r3, #3
 8010ca2:	440b      	add	r3, r1
 8010ca4:	3312      	adds	r3, #18
 8010ca6:	881b      	ldrh	r3, [r3, #0]
 8010ca8:	837b      	strh	r3, [r7, #26]
 8010caa:	e01c      	b.n	8010ce6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010cac:	7dfb      	ldrb	r3, [r7, #23]
 8010cae:	2b01      	cmp	r3, #1
 8010cb0:	d919      	bls.n	8010ce6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010cb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cb6:	495e      	ldr	r1, [pc, #376]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010cb8:	4613      	mov	r3, r2
 8010cba:	005b      	lsls	r3, r3, #1
 8010cbc:	4413      	add	r3, r2
 8010cbe:	00db      	lsls	r3, r3, #3
 8010cc0:	440b      	add	r3, r1
 8010cc2:	3312      	adds	r3, #18
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	8b3a      	ldrh	r2, [r7, #24]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d80c      	bhi.n	8010ce6 <etharp_find_entry+0x18a>
            old_stable = i;
 8010ccc:	8c3b      	ldrh	r3, [r7, #32]
 8010cce:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010cd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cd4:	4956      	ldr	r1, [pc, #344]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	005b      	lsls	r3, r3, #1
 8010cda:	4413      	add	r3, r2
 8010cdc:	00db      	lsls	r3, r3, #3
 8010cde:	440b      	add	r3, r1
 8010ce0:	3312      	adds	r3, #18
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ce6:	8c3b      	ldrh	r3, [r7, #32]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	843b      	strh	r3, [r7, #32]
 8010cee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010cf2:	2b09      	cmp	r3, #9
 8010cf4:	f77f af4c 	ble.w	8010b90 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010cf8:	7afb      	ldrb	r3, [r7, #11]
 8010cfa:	f003 0302 	and.w	r3, r3, #2
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d108      	bne.n	8010d14 <etharp_find_entry+0x1b8>
 8010d02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d06:	2b0a      	cmp	r3, #10
 8010d08:	d107      	bne.n	8010d1a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010d0a:	7afb      	ldrb	r3, [r7, #11]
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d102      	bne.n	8010d1a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010d14:	f04f 33ff 	mov.w	r3, #4294967295
 8010d18:	e085      	b.n	8010e26 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010d1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d1e:	2b09      	cmp	r3, #9
 8010d20:	dc02      	bgt.n	8010d28 <etharp_find_entry+0x1cc>
    i = empty;
 8010d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d24:	843b      	strh	r3, [r7, #32]
 8010d26:	e039      	b.n	8010d9c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010d28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010d2c:	2b09      	cmp	r3, #9
 8010d2e:	dc14      	bgt.n	8010d5a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d32:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010d34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d38:	493d      	ldr	r1, [pc, #244]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010d3a:	4613      	mov	r3, r2
 8010d3c:	005b      	lsls	r3, r3, #1
 8010d3e:	4413      	add	r3, r2
 8010d40:	00db      	lsls	r3, r3, #3
 8010d42:	440b      	add	r3, r1
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d018      	beq.n	8010d7c <etharp_find_entry+0x220>
 8010d4a:	4b3a      	ldr	r3, [pc, #232]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010d4c:	f240 126d 	movw	r2, #365	; 0x16d
 8010d50:	493b      	ldr	r1, [pc, #236]	; (8010e40 <etharp_find_entry+0x2e4>)
 8010d52:	483a      	ldr	r0, [pc, #232]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010d54:	f002 fc1a 	bl	801358c <iprintf>
 8010d58:	e010      	b.n	8010d7c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010d5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010d5e:	2b09      	cmp	r3, #9
 8010d60:	dc02      	bgt.n	8010d68 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010d62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010d64:	843b      	strh	r3, [r7, #32]
 8010d66:	e009      	b.n	8010d7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010d68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010d6c:	2b09      	cmp	r3, #9
 8010d6e:	dc02      	bgt.n	8010d76 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010d70:	8bfb      	ldrh	r3, [r7, #30]
 8010d72:	843b      	strh	r3, [r7, #32]
 8010d74:	e002      	b.n	8010d7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010d76:	f04f 33ff 	mov.w	r3, #4294967295
 8010d7a:	e054      	b.n	8010e26 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010d7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d80:	2b09      	cmp	r3, #9
 8010d82:	dd06      	ble.n	8010d92 <etharp_find_entry+0x236>
 8010d84:	4b2b      	ldr	r3, [pc, #172]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010d86:	f240 127f 	movw	r2, #383	; 0x17f
 8010d8a:	492e      	ldr	r1, [pc, #184]	; (8010e44 <etharp_find_entry+0x2e8>)
 8010d8c:	482b      	ldr	r0, [pc, #172]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010d8e:	f002 fbfd 	bl	801358c <iprintf>
    etharp_free_entry(i);
 8010d92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7ff fe06 	bl	80109a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010d9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010da0:	2b09      	cmp	r3, #9
 8010da2:	dd06      	ble.n	8010db2 <etharp_find_entry+0x256>
 8010da4:	4b23      	ldr	r3, [pc, #140]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010da6:	f240 1283 	movw	r2, #387	; 0x183
 8010daa:	4926      	ldr	r1, [pc, #152]	; (8010e44 <etharp_find_entry+0x2e8>)
 8010dac:	4823      	ldr	r0, [pc, #140]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010dae:	f002 fbed 	bl	801358c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010db2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010db6:	491e      	ldr	r1, [pc, #120]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010db8:	4613      	mov	r3, r2
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	4413      	add	r3, r2
 8010dbe:	00db      	lsls	r3, r3, #3
 8010dc0:	440b      	add	r3, r1
 8010dc2:	3314      	adds	r3, #20
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d006      	beq.n	8010dd8 <etharp_find_entry+0x27c>
 8010dca:	4b1a      	ldr	r3, [pc, #104]	; (8010e34 <etharp_find_entry+0x2d8>)
 8010dcc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010dd0:	491d      	ldr	r1, [pc, #116]	; (8010e48 <etharp_find_entry+0x2ec>)
 8010dd2:	481a      	ldr	r0, [pc, #104]	; (8010e3c <etharp_find_entry+0x2e0>)
 8010dd4:	f002 fbda 	bl	801358c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00b      	beq.n	8010df6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010dde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6819      	ldr	r1, [r3, #0]
 8010de6:	4812      	ldr	r0, [pc, #72]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010de8:	4613      	mov	r3, r2
 8010dea:	005b      	lsls	r3, r3, #1
 8010dec:	4413      	add	r3, r2
 8010dee:	00db      	lsls	r3, r3, #3
 8010df0:	4403      	add	r3, r0
 8010df2:	3304      	adds	r3, #4
 8010df4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010df6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010dfa:	490d      	ldr	r1, [pc, #52]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	005b      	lsls	r3, r3, #1
 8010e00:	4413      	add	r3, r2
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	440b      	add	r3, r1
 8010e06:	3312      	adds	r3, #18
 8010e08:	2200      	movs	r2, #0
 8010e0a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010e0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e10:	4907      	ldr	r1, [pc, #28]	; (8010e30 <etharp_find_entry+0x2d4>)
 8010e12:	4613      	mov	r3, r2
 8010e14:	005b      	lsls	r3, r3, #1
 8010e16:	4413      	add	r3, r2
 8010e18:	00db      	lsls	r3, r3, #3
 8010e1a:	440b      	add	r3, r1
 8010e1c:	3308      	adds	r3, #8
 8010e1e:	687a      	ldr	r2, [r7, #4]
 8010e20:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010e22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3728      	adds	r7, #40	; 0x28
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bd80      	pop	{r7, pc}
 8010e2e:	bf00      	nop
 8010e30:	200005e0 	.word	0x200005e0
 8010e34:	080171fc 	.word	0x080171fc
 8010e38:	08017234 	.word	0x08017234
 8010e3c:	08017274 	.word	0x08017274
 8010e40:	0801729c 	.word	0x0801729c
 8010e44:	080172b4 	.word	0x080172b4
 8010e48:	080172c8 	.word	0x080172c8

08010e4c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b088      	sub	sp, #32
 8010e50:	af02      	add	r7, sp, #8
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
 8010e58:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e60:	2b06      	cmp	r3, #6
 8010e62:	d006      	beq.n	8010e72 <etharp_update_arp_entry+0x26>
 8010e64:	4b48      	ldr	r3, [pc, #288]	; (8010f88 <etharp_update_arp_entry+0x13c>)
 8010e66:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010e6a:	4948      	ldr	r1, [pc, #288]	; (8010f8c <etharp_update_arp_entry+0x140>)
 8010e6c:	4848      	ldr	r0, [pc, #288]	; (8010f90 <etharp_update_arp_entry+0x144>)
 8010e6e:	f002 fb8d 	bl	801358c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d012      	beq.n	8010e9e <etharp_update_arp_entry+0x52>
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d00e      	beq.n	8010e9e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	68f9      	ldr	r1, [r7, #12]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f001 facc 	bl	8012424 <ip4_addr_isbroadcast_u32>
 8010e8c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d105      	bne.n	8010e9e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010e9a:	2be0      	cmp	r3, #224	; 0xe0
 8010e9c:	d102      	bne.n	8010ea4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010e9e:	f06f 030f 	mvn.w	r3, #15
 8010ea2:	e06c      	b.n	8010f7e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010ea4:	78fb      	ldrb	r3, [r7, #3]
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	68b8      	ldr	r0, [r7, #8]
 8010eac:	f7ff fe56 	bl	8010b5c <etharp_find_entry>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010eb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	da02      	bge.n	8010ec2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010ebc:	8afb      	ldrh	r3, [r7, #22]
 8010ebe:	b25b      	sxtb	r3, r3
 8010ec0:	e05d      	b.n	8010f7e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010ec2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ec6:	4933      	ldr	r1, [pc, #204]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010ec8:	4613      	mov	r3, r2
 8010eca:	005b      	lsls	r3, r3, #1
 8010ecc:	4413      	add	r3, r2
 8010ece:	00db      	lsls	r3, r3, #3
 8010ed0:	440b      	add	r3, r1
 8010ed2:	3314      	adds	r3, #20
 8010ed4:	2202      	movs	r2, #2
 8010ed6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010ed8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010edc:	492d      	ldr	r1, [pc, #180]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010ede:	4613      	mov	r3, r2
 8010ee0:	005b      	lsls	r3, r3, #1
 8010ee2:	4413      	add	r3, r2
 8010ee4:	00db      	lsls	r3, r3, #3
 8010ee6:	440b      	add	r3, r1
 8010ee8:	3308      	adds	r3, #8
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010eee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	005b      	lsls	r3, r3, #1
 8010ef6:	4413      	add	r3, r2
 8010ef8:	00db      	lsls	r3, r3, #3
 8010efa:	3308      	adds	r3, #8
 8010efc:	4a25      	ldr	r2, [pc, #148]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010efe:	4413      	add	r3, r2
 8010f00:	3304      	adds	r3, #4
 8010f02:	2206      	movs	r2, #6
 8010f04:	6879      	ldr	r1, [r7, #4]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f002 fb10 	bl	801352c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010f0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f10:	4920      	ldr	r1, [pc, #128]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010f12:	4613      	mov	r3, r2
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	4413      	add	r3, r2
 8010f18:	00db      	lsls	r3, r3, #3
 8010f1a:	440b      	add	r3, r1
 8010f1c:	3312      	adds	r3, #18
 8010f1e:	2200      	movs	r2, #0
 8010f20:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010f22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f26:	491b      	ldr	r1, [pc, #108]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010f28:	4613      	mov	r3, r2
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	4413      	add	r3, r2
 8010f2e:	00db      	lsls	r3, r3, #3
 8010f30:	440b      	add	r3, r1
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d021      	beq.n	8010f7c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010f38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f3c:	4915      	ldr	r1, [pc, #84]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010f3e:	4613      	mov	r3, r2
 8010f40:	005b      	lsls	r3, r3, #1
 8010f42:	4413      	add	r3, r2
 8010f44:	00db      	lsls	r3, r3, #3
 8010f46:	440b      	add	r3, r1
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010f4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f50:	4910      	ldr	r1, [pc, #64]	; (8010f94 <etharp_update_arp_entry+0x148>)
 8010f52:	4613      	mov	r3, r2
 8010f54:	005b      	lsls	r3, r3, #1
 8010f56:	4413      	add	r3, r2
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	440b      	add	r3, r1
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6939      	ldr	r1, [r7, #16]
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f002 fa59 	bl	8013428 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010f76:	6938      	ldr	r0, [r7, #16]
 8010f78:	f7f6 fc20 	bl	80077bc <pbuf_free>
  }
  return ERR_OK;
 8010f7c:	2300      	movs	r3, #0
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	3718      	adds	r7, #24
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	080171fc 	.word	0x080171fc
 8010f8c:	080172f4 	.word	0x080172f4
 8010f90:	08017274 	.word	0x08017274
 8010f94:	200005e0 	.word	0x200005e0

08010f98 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	60fb      	str	r3, [r7, #12]
 8010fa4:	e01e      	b.n	8010fe4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010fa6:	4913      	ldr	r1, [pc, #76]	; (8010ff4 <etharp_cleanup_netif+0x5c>)
 8010fa8:	68fa      	ldr	r2, [r7, #12]
 8010faa:	4613      	mov	r3, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4413      	add	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3314      	adds	r3, #20
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010fba:	7afb      	ldrb	r3, [r7, #11]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00e      	beq.n	8010fde <etharp_cleanup_netif+0x46>
 8010fc0:	490c      	ldr	r1, [pc, #48]	; (8010ff4 <etharp_cleanup_netif+0x5c>)
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	005b      	lsls	r3, r3, #1
 8010fc8:	4413      	add	r3, r2
 8010fca:	00db      	lsls	r3, r3, #3
 8010fcc:	440b      	add	r3, r1
 8010fce:	3308      	adds	r3, #8
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d102      	bne.n	8010fde <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f7ff fce5 	bl	80109a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2b09      	cmp	r3, #9
 8010fe8:	dddd      	ble.n	8010fa6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010fea:	bf00      	nop
 8010fec:	bf00      	nop
 8010fee:	3710      	adds	r7, #16
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	200005e0 	.word	0x200005e0

08010ff8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010ff8:	b5b0      	push	{r4, r5, r7, lr}
 8010ffa:	b08a      	sub	sp, #40	; 0x28
 8010ffc:	af04      	add	r7, sp, #16
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d107      	bne.n	8011018 <etharp_input+0x20>
 8011008:	4b4c      	ldr	r3, [pc, #304]	; (801113c <etharp_input+0x144>)
 801100a:	f240 228a 	movw	r2, #650	; 0x28a
 801100e:	494c      	ldr	r1, [pc, #304]	; (8011140 <etharp_input+0x148>)
 8011010:	484c      	ldr	r0, [pc, #304]	; (8011144 <etharp_input+0x14c>)
 8011012:	f002 fabb 	bl	801358c <iprintf>
 8011016:	e08d      	b.n	8011134 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	b29b      	uxth	r3, r3
 8011024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011028:	d10c      	bne.n	8011044 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801102e:	2b06      	cmp	r3, #6
 8011030:	d108      	bne.n	8011044 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011036:	2b04      	cmp	r3, #4
 8011038:	d104      	bne.n	8011044 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	885b      	ldrh	r3, [r3, #2]
 801103e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011040:	2b08      	cmp	r3, #8
 8011042:	d00f      	beq.n	8011064 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8011044:	4b40      	ldr	r3, [pc, #256]	; (8011148 <etharp_input+0x150>)
 8011046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011048:	3301      	adds	r3, #1
 801104a:	b29a      	uxth	r2, r3
 801104c:	4b3e      	ldr	r3, [pc, #248]	; (8011148 <etharp_input+0x150>)
 801104e:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8011050:	4b3d      	ldr	r3, [pc, #244]	; (8011148 <etharp_input+0x150>)
 8011052:	8bdb      	ldrh	r3, [r3, #30]
 8011054:	3301      	adds	r3, #1
 8011056:	b29a      	uxth	r2, r3
 8011058:	4b3b      	ldr	r3, [pc, #236]	; (8011148 <etharp_input+0x150>)
 801105a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f7f6 fbad 	bl	80077bc <pbuf_free>
    return;
 8011062:	e067      	b.n	8011134 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 8011064:	4b38      	ldr	r3, [pc, #224]	; (8011148 <etharp_input+0x150>)
 8011066:	8b5b      	ldrh	r3, [r3, #26]
 8011068:	3301      	adds	r3, #1
 801106a:	b29a      	uxth	r2, r3
 801106c:	4b36      	ldr	r3, [pc, #216]	; (8011148 <etharp_input+0x150>)
 801106e:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	330e      	adds	r3, #14
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	3318      	adds	r3, #24
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	3304      	adds	r3, #4
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <etharp_input+0x98>
    for_us = 0;
 801108a:	2300      	movs	r3, #0
 801108c:	75fb      	strb	r3, [r7, #23]
 801108e:	e009      	b.n	80110a4 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	3304      	adds	r3, #4
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	429a      	cmp	r2, r3
 801109a:	bf0c      	ite	eq
 801109c:	2301      	moveq	r3, #1
 801109e:	2300      	movne	r3, #0
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	f103 0208 	add.w	r2, r3, #8
 80110aa:	7dfb      	ldrb	r3, [r7, #23]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d001      	beq.n	80110b4 <etharp_input+0xbc>
 80110b0:	2301      	movs	r3, #1
 80110b2:	e000      	b.n	80110b6 <etharp_input+0xbe>
 80110b4:	2302      	movs	r3, #2
 80110b6:	f107 010c 	add.w	r1, r7, #12
 80110ba:	6838      	ldr	r0, [r7, #0]
 80110bc:	f7ff fec6 	bl	8010e4c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	88db      	ldrh	r3, [r3, #6]
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110ca:	d003      	beq.n	80110d4 <etharp_input+0xdc>
 80110cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110d0:	d01e      	beq.n	8011110 <etharp_input+0x118>
 80110d2:	e024      	b.n	801111e <etharp_input+0x126>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 80110d4:	7dfb      	ldrb	r3, [r7, #23]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d028      	beq.n	801112c <etharp_input+0x134>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80110f0:	693a      	ldr	r2, [r7, #16]
 80110f2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80110f4:	2102      	movs	r1, #2
 80110f6:	9103      	str	r1, [sp, #12]
 80110f8:	f107 010c 	add.w	r1, r7, #12
 80110fc:	9102      	str	r1, [sp, #8]
 80110fe:	9201      	str	r2, [sp, #4]
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	462b      	mov	r3, r5
 8011104:	4622      	mov	r2, r4
 8011106:	4601      	mov	r1, r0
 8011108:	6838      	ldr	r0, [r7, #0]
 801110a:	f000 fb11 	bl	8011730 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801110e:	e00d      	b.n	801112c <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8011110:	f107 030c 	add.w	r3, r7, #12
 8011114:	4619      	mov	r1, r3
 8011116:	6838      	ldr	r0, [r7, #0]
 8011118:	f7fe f9ea 	bl	800f4f0 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 801111c:	e007      	b.n	801112e <etharp_input+0x136>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801111e:	4b0a      	ldr	r3, [pc, #40]	; (8011148 <etharp_input+0x150>)
 8011120:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011122:	3301      	adds	r3, #1
 8011124:	b29a      	uxth	r2, r3
 8011126:	4b08      	ldr	r3, [pc, #32]	; (8011148 <etharp_input+0x150>)
 8011128:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 801112a:	e000      	b.n	801112e <etharp_input+0x136>
      break;
 801112c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7f6 fb44 	bl	80077bc <pbuf_free>
}
 8011134:	3718      	adds	r7, #24
 8011136:	46bd      	mov	sp, r7
 8011138:	bdb0      	pop	{r4, r5, r7, pc}
 801113a:	bf00      	nop
 801113c:	080171fc 	.word	0x080171fc
 8011140:	0801734c 	.word	0x0801734c
 8011144:	08017274 	.word	0x08017274
 8011148:	20007a48 	.word	0x20007a48

0801114c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af02      	add	r7, sp, #8
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	4613      	mov	r3, r2
 8011158:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801115a:	79fa      	ldrb	r2, [r7, #7]
 801115c:	4944      	ldr	r1, [pc, #272]	; (8011270 <etharp_output_to_arp_index+0x124>)
 801115e:	4613      	mov	r3, r2
 8011160:	005b      	lsls	r3, r3, #1
 8011162:	4413      	add	r3, r2
 8011164:	00db      	lsls	r3, r3, #3
 8011166:	440b      	add	r3, r1
 8011168:	3314      	adds	r3, #20
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	2b01      	cmp	r3, #1
 801116e:	d806      	bhi.n	801117e <etharp_output_to_arp_index+0x32>
 8011170:	4b40      	ldr	r3, [pc, #256]	; (8011274 <etharp_output_to_arp_index+0x128>)
 8011172:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011176:	4940      	ldr	r1, [pc, #256]	; (8011278 <etharp_output_to_arp_index+0x12c>)
 8011178:	4840      	ldr	r0, [pc, #256]	; (801127c <etharp_output_to_arp_index+0x130>)
 801117a:	f002 fa07 	bl	801358c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801117e:	79fa      	ldrb	r2, [r7, #7]
 8011180:	493b      	ldr	r1, [pc, #236]	; (8011270 <etharp_output_to_arp_index+0x124>)
 8011182:	4613      	mov	r3, r2
 8011184:	005b      	lsls	r3, r3, #1
 8011186:	4413      	add	r3, r2
 8011188:	00db      	lsls	r3, r3, #3
 801118a:	440b      	add	r3, r1
 801118c:	3314      	adds	r3, #20
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	2b02      	cmp	r3, #2
 8011192:	d153      	bne.n	801123c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011194:	79fa      	ldrb	r2, [r7, #7]
 8011196:	4936      	ldr	r1, [pc, #216]	; (8011270 <etharp_output_to_arp_index+0x124>)
 8011198:	4613      	mov	r3, r2
 801119a:	005b      	lsls	r3, r3, #1
 801119c:	4413      	add	r3, r2
 801119e:	00db      	lsls	r3, r3, #3
 80111a0:	440b      	add	r3, r1
 80111a2:	3312      	adds	r3, #18
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80111aa:	d919      	bls.n	80111e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80111ac:	79fa      	ldrb	r2, [r7, #7]
 80111ae:	4613      	mov	r3, r2
 80111b0:	005b      	lsls	r3, r3, #1
 80111b2:	4413      	add	r3, r2
 80111b4:	00db      	lsls	r3, r3, #3
 80111b6:	4a2e      	ldr	r2, [pc, #184]	; (8011270 <etharp_output_to_arp_index+0x124>)
 80111b8:	4413      	add	r3, r2
 80111ba:	3304      	adds	r3, #4
 80111bc:	4619      	mov	r1, r3
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	f000 fb72 	bl	80118a8 <etharp_request>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d138      	bne.n	801123c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80111ca:	79fa      	ldrb	r2, [r7, #7]
 80111cc:	4928      	ldr	r1, [pc, #160]	; (8011270 <etharp_output_to_arp_index+0x124>)
 80111ce:	4613      	mov	r3, r2
 80111d0:	005b      	lsls	r3, r3, #1
 80111d2:	4413      	add	r3, r2
 80111d4:	00db      	lsls	r3, r3, #3
 80111d6:	440b      	add	r3, r1
 80111d8:	3314      	adds	r3, #20
 80111da:	2203      	movs	r2, #3
 80111dc:	701a      	strb	r2, [r3, #0]
 80111de:	e02d      	b.n	801123c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80111e0:	79fa      	ldrb	r2, [r7, #7]
 80111e2:	4923      	ldr	r1, [pc, #140]	; (8011270 <etharp_output_to_arp_index+0x124>)
 80111e4:	4613      	mov	r3, r2
 80111e6:	005b      	lsls	r3, r3, #1
 80111e8:	4413      	add	r3, r2
 80111ea:	00db      	lsls	r3, r3, #3
 80111ec:	440b      	add	r3, r1
 80111ee:	3312      	adds	r3, #18
 80111f0:	881b      	ldrh	r3, [r3, #0]
 80111f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80111f6:	d321      	bcc.n	801123c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80111f8:	79fa      	ldrb	r2, [r7, #7]
 80111fa:	4613      	mov	r3, r2
 80111fc:	005b      	lsls	r3, r3, #1
 80111fe:	4413      	add	r3, r2
 8011200:	00db      	lsls	r3, r3, #3
 8011202:	4a1b      	ldr	r2, [pc, #108]	; (8011270 <etharp_output_to_arp_index+0x124>)
 8011204:	4413      	add	r3, r2
 8011206:	1d19      	adds	r1, r3, #4
 8011208:	79fa      	ldrb	r2, [r7, #7]
 801120a:	4613      	mov	r3, r2
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	4413      	add	r3, r2
 8011210:	00db      	lsls	r3, r3, #3
 8011212:	3308      	adds	r3, #8
 8011214:	4a16      	ldr	r2, [pc, #88]	; (8011270 <etharp_output_to_arp_index+0x124>)
 8011216:	4413      	add	r3, r2
 8011218:	3304      	adds	r3, #4
 801121a:	461a      	mov	r2, r3
 801121c:	68f8      	ldr	r0, [r7, #12]
 801121e:	f000 fb21 	bl	8011864 <etharp_request_dst>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d109      	bne.n	801123c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011228:	79fa      	ldrb	r2, [r7, #7]
 801122a:	4911      	ldr	r1, [pc, #68]	; (8011270 <etharp_output_to_arp_index+0x124>)
 801122c:	4613      	mov	r3, r2
 801122e:	005b      	lsls	r3, r3, #1
 8011230:	4413      	add	r3, r2
 8011232:	00db      	lsls	r3, r3, #3
 8011234:	440b      	add	r3, r1
 8011236:	3314      	adds	r3, #20
 8011238:	2203      	movs	r2, #3
 801123a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011242:	79fa      	ldrb	r2, [r7, #7]
 8011244:	4613      	mov	r3, r2
 8011246:	005b      	lsls	r3, r3, #1
 8011248:	4413      	add	r3, r2
 801124a:	00db      	lsls	r3, r3, #3
 801124c:	3308      	adds	r3, #8
 801124e:	4a08      	ldr	r2, [pc, #32]	; (8011270 <etharp_output_to_arp_index+0x124>)
 8011250:	4413      	add	r3, r2
 8011252:	3304      	adds	r3, #4
 8011254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011258:	9200      	str	r2, [sp, #0]
 801125a:	460a      	mov	r2, r1
 801125c:	68b9      	ldr	r1, [r7, #8]
 801125e:	68f8      	ldr	r0, [r7, #12]
 8011260:	f002 f8e2 	bl	8013428 <ethernet_output>
 8011264:	4603      	mov	r3, r0
}
 8011266:	4618      	mov	r0, r3
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	200005e0 	.word	0x200005e0
 8011274:	080171fc 	.word	0x080171fc
 8011278:	0801736c 	.word	0x0801736c
 801127c:	08017274 	.word	0x08017274

08011280 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b08a      	sub	sp, #40	; 0x28
 8011284:	af02      	add	r7, sp, #8
 8011286:	60f8      	str	r0, [r7, #12]
 8011288:	60b9      	str	r1, [r7, #8]
 801128a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d106      	bne.n	80112a4 <etharp_output+0x24>
 8011296:	4b76      	ldr	r3, [pc, #472]	; (8011470 <etharp_output+0x1f0>)
 8011298:	f240 321e 	movw	r2, #798	; 0x31e
 801129c:	4975      	ldr	r1, [pc, #468]	; (8011474 <etharp_output+0x1f4>)
 801129e:	4876      	ldr	r0, [pc, #472]	; (8011478 <etharp_output+0x1f8>)
 80112a0:	f002 f974 	bl	801358c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d106      	bne.n	80112b8 <etharp_output+0x38>
 80112aa:	4b71      	ldr	r3, [pc, #452]	; (8011470 <etharp_output+0x1f0>)
 80112ac:	f240 321f 	movw	r2, #799	; 0x31f
 80112b0:	4972      	ldr	r1, [pc, #456]	; (801147c <etharp_output+0x1fc>)
 80112b2:	4871      	ldr	r0, [pc, #452]	; (8011478 <etharp_output+0x1f8>)
 80112b4:	f002 f96a 	bl	801358c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d106      	bne.n	80112cc <etharp_output+0x4c>
 80112be:	4b6c      	ldr	r3, [pc, #432]	; (8011470 <etharp_output+0x1f0>)
 80112c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80112c4:	496e      	ldr	r1, [pc, #440]	; (8011480 <etharp_output+0x200>)
 80112c6:	486c      	ldr	r0, [pc, #432]	; (8011478 <etharp_output+0x1f8>)
 80112c8:	f002 f960 	bl	801358c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	68f9      	ldr	r1, [r7, #12]
 80112d2:	4618      	mov	r0, r3
 80112d4:	f001 f8a6 	bl	8012424 <ip4_addr_isbroadcast_u32>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d002      	beq.n	80112e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80112de:	4b69      	ldr	r3, [pc, #420]	; (8011484 <etharp_output+0x204>)
 80112e0:	61fb      	str	r3, [r7, #28]
 80112e2:	e0b5      	b.n	8011450 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112ec:	2be0      	cmp	r3, #224	; 0xe0
 80112ee:	d118      	bne.n	8011322 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80112f0:	2301      	movs	r3, #1
 80112f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80112f4:	2300      	movs	r3, #0
 80112f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80112f8:	235e      	movs	r3, #94	; 0x5e
 80112fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	3301      	adds	r3, #1
 8011300:	781b      	ldrb	r3, [r3, #0]
 8011302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011306:	b2db      	uxtb	r3, r3
 8011308:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	3302      	adds	r3, #2
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	3303      	adds	r3, #3
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801131a:	f107 0310 	add.w	r3, r7, #16
 801131e:	61fb      	str	r3, [r7, #28]
 8011320:	e096      	b.n	8011450 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	3304      	adds	r3, #4
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	405a      	eors	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	3308      	adds	r3, #8
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4013      	ands	r3, r2
 8011336:	2b00      	cmp	r3, #0
 8011338:	d012      	beq.n	8011360 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011340:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011344:	4293      	cmp	r3, r2
 8011346:	d00b      	beq.n	8011360 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	330c      	adds	r3, #12
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d003      	beq.n	801135a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	330c      	adds	r3, #12
 8011356:	61bb      	str	r3, [r7, #24]
 8011358:	e002      	b.n	8011360 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801135a:	f06f 0303 	mvn.w	r3, #3
 801135e:	e083      	b.n	8011468 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011360:	4b49      	ldr	r3, [pc, #292]	; (8011488 <etharp_output+0x208>)
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	4619      	mov	r1, r3
 8011366:	4a49      	ldr	r2, [pc, #292]	; (801148c <etharp_output+0x20c>)
 8011368:	460b      	mov	r3, r1
 801136a:	005b      	lsls	r3, r3, #1
 801136c:	440b      	add	r3, r1
 801136e:	00db      	lsls	r3, r3, #3
 8011370:	4413      	add	r3, r2
 8011372:	3314      	adds	r3, #20
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	2b01      	cmp	r3, #1
 8011378:	d92b      	bls.n	80113d2 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801137a:	4b43      	ldr	r3, [pc, #268]	; (8011488 <etharp_output+0x208>)
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	4619      	mov	r1, r3
 8011380:	4a42      	ldr	r2, [pc, #264]	; (801148c <etharp_output+0x20c>)
 8011382:	460b      	mov	r3, r1
 8011384:	005b      	lsls	r3, r3, #1
 8011386:	440b      	add	r3, r1
 8011388:	00db      	lsls	r3, r3, #3
 801138a:	4413      	add	r3, r2
 801138c:	3308      	adds	r3, #8
 801138e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	429a      	cmp	r2, r3
 8011394:	d11d      	bne.n	80113d2 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	4b3b      	ldr	r3, [pc, #236]	; (8011488 <etharp_output+0x208>)
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	4618      	mov	r0, r3
 80113a0:	493a      	ldr	r1, [pc, #232]	; (801148c <etharp_output+0x20c>)
 80113a2:	4603      	mov	r3, r0
 80113a4:	005b      	lsls	r3, r3, #1
 80113a6:	4403      	add	r3, r0
 80113a8:	00db      	lsls	r3, r3, #3
 80113aa:	440b      	add	r3, r1
 80113ac:	3304      	adds	r3, #4
 80113ae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d10e      	bne.n	80113d2 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 80113b4:	4b36      	ldr	r3, [pc, #216]	; (8011490 <etharp_output+0x210>)
 80113b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80113b8:	3301      	adds	r3, #1
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	4b34      	ldr	r3, [pc, #208]	; (8011490 <etharp_output+0x210>)
 80113be:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80113c0:	4b31      	ldr	r3, [pc, #196]	; (8011488 <etharp_output+0x208>)
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	461a      	mov	r2, r3
 80113c6:	68b9      	ldr	r1, [r7, #8]
 80113c8:	68f8      	ldr	r0, [r7, #12]
 80113ca:	f7ff febf 	bl	801114c <etharp_output_to_arp_index>
 80113ce:	4603      	mov	r3, r0
 80113d0:	e04a      	b.n	8011468 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80113d2:	2300      	movs	r3, #0
 80113d4:	75fb      	strb	r3, [r7, #23]
 80113d6:	e031      	b.n	801143c <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80113d8:	7dfa      	ldrb	r2, [r7, #23]
 80113da:	492c      	ldr	r1, [pc, #176]	; (801148c <etharp_output+0x20c>)
 80113dc:	4613      	mov	r3, r2
 80113de:	005b      	lsls	r3, r3, #1
 80113e0:	4413      	add	r3, r2
 80113e2:	00db      	lsls	r3, r3, #3
 80113e4:	440b      	add	r3, r1
 80113e6:	3314      	adds	r3, #20
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	2b01      	cmp	r3, #1
 80113ec:	d923      	bls.n	8011436 <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80113ee:	7dfa      	ldrb	r2, [r7, #23]
 80113f0:	4926      	ldr	r1, [pc, #152]	; (801148c <etharp_output+0x20c>)
 80113f2:	4613      	mov	r3, r2
 80113f4:	005b      	lsls	r3, r3, #1
 80113f6:	4413      	add	r3, r2
 80113f8:	00db      	lsls	r3, r3, #3
 80113fa:	440b      	add	r3, r1
 80113fc:	3308      	adds	r3, #8
 80113fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011400:	68fa      	ldr	r2, [r7, #12]
 8011402:	429a      	cmp	r2, r3
 8011404:	d117      	bne.n	8011436 <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	6819      	ldr	r1, [r3, #0]
 801140a:	7dfa      	ldrb	r2, [r7, #23]
 801140c:	481f      	ldr	r0, [pc, #124]	; (801148c <etharp_output+0x20c>)
 801140e:	4613      	mov	r3, r2
 8011410:	005b      	lsls	r3, r3, #1
 8011412:	4413      	add	r3, r2
 8011414:	00db      	lsls	r3, r3, #3
 8011416:	4403      	add	r3, r0
 8011418:	3304      	adds	r3, #4
 801141a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801141c:	4299      	cmp	r1, r3
 801141e:	d10a      	bne.n	8011436 <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011420:	4a19      	ldr	r2, [pc, #100]	; (8011488 <etharp_output+0x208>)
 8011422:	7dfb      	ldrb	r3, [r7, #23]
 8011424:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011426:	7dfb      	ldrb	r3, [r7, #23]
 8011428:	461a      	mov	r2, r3
 801142a:	68b9      	ldr	r1, [r7, #8]
 801142c:	68f8      	ldr	r0, [r7, #12]
 801142e:	f7ff fe8d 	bl	801114c <etharp_output_to_arp_index>
 8011432:	4603      	mov	r3, r0
 8011434:	e018      	b.n	8011468 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011436:	7dfb      	ldrb	r3, [r7, #23]
 8011438:	3301      	adds	r3, #1
 801143a:	75fb      	strb	r3, [r7, #23]
 801143c:	7dfb      	ldrb	r3, [r7, #23]
 801143e:	2b09      	cmp	r3, #9
 8011440:	d9ca      	bls.n	80113d8 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011442:	68ba      	ldr	r2, [r7, #8]
 8011444:	69b9      	ldr	r1, [r7, #24]
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f000 f824 	bl	8011494 <etharp_query>
 801144c:	4603      	mov	r3, r0
 801144e:	e00b      	b.n	8011468 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	68b9      	ldr	r1, [r7, #8]
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f001 ffe1 	bl	8013428 <ethernet_output>
 8011466:	4603      	mov	r3, r0
}
 8011468:	4618      	mov	r0, r3
 801146a:	3720      	adds	r7, #32
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	080171fc 	.word	0x080171fc
 8011474:	0801734c 	.word	0x0801734c
 8011478:	08017274 	.word	0x08017274
 801147c:	0801739c 	.word	0x0801739c
 8011480:	0801733c 	.word	0x0801733c
 8011484:	08039748 	.word	0x08039748
 8011488:	200006d0 	.word	0x200006d0
 801148c:	200005e0 	.word	0x200005e0
 8011490:	20007a48 	.word	0x20007a48

08011494 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b08c      	sub	sp, #48	; 0x30
 8011498:	af02      	add	r7, sp, #8
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	332a      	adds	r3, #42	; 0x2a
 80114a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80114a6:	23ff      	movs	r3, #255	; 0xff
 80114a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80114ac:	2300      	movs	r3, #0
 80114ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	68f9      	ldr	r1, [r7, #12]
 80114b6:	4618      	mov	r0, r3
 80114b8:	f000 ffb4 	bl	8012424 <ip4_addr_isbroadcast_u32>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d10c      	bne.n	80114dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80114ca:	2be0      	cmp	r3, #224	; 0xe0
 80114cc:	d006      	beq.n	80114dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d003      	beq.n	80114dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d102      	bne.n	80114e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80114dc:	f06f 030f 	mvn.w	r3, #15
 80114e0:	e110      	b.n	8011704 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	2101      	movs	r1, #1
 80114e6:	68b8      	ldr	r0, [r7, #8]
 80114e8:	f7ff fb38 	bl	8010b5c <etharp_find_entry>
 80114ec:	4603      	mov	r3, r0
 80114ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80114f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	da0b      	bge.n	8011510 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d005      	beq.n	801150a <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 80114fe:	4b83      	ldr	r3, [pc, #524]	; (801170c <etharp_query+0x278>)
 8011500:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011502:	3301      	adds	r3, #1
 8011504:	b29a      	uxth	r2, r3
 8011506:	4b81      	ldr	r3, [pc, #516]	; (801170c <etharp_query+0x278>)
 8011508:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 801150a:	8a7b      	ldrh	r3, [r7, #18]
 801150c:	b25b      	sxtb	r3, r3
 801150e:	e0f9      	b.n	8011704 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011510:	8a7b      	ldrh	r3, [r7, #18]
 8011512:	2b7e      	cmp	r3, #126	; 0x7e
 8011514:	d906      	bls.n	8011524 <etharp_query+0x90>
 8011516:	4b7e      	ldr	r3, [pc, #504]	; (8011710 <etharp_query+0x27c>)
 8011518:	f240 32c1 	movw	r2, #961	; 0x3c1
 801151c:	497d      	ldr	r1, [pc, #500]	; (8011714 <etharp_query+0x280>)
 801151e:	487e      	ldr	r0, [pc, #504]	; (8011718 <etharp_query+0x284>)
 8011520:	f002 f834 	bl	801358c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011524:	8a7b      	ldrh	r3, [r7, #18]
 8011526:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011528:	7c7a      	ldrb	r2, [r7, #17]
 801152a:	497c      	ldr	r1, [pc, #496]	; (801171c <etharp_query+0x288>)
 801152c:	4613      	mov	r3, r2
 801152e:	005b      	lsls	r3, r3, #1
 8011530:	4413      	add	r3, r2
 8011532:	00db      	lsls	r3, r3, #3
 8011534:	440b      	add	r3, r1
 8011536:	3314      	adds	r3, #20
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d115      	bne.n	801156a <etharp_query+0xd6>
    is_new_entry = 1;
 801153e:	2301      	movs	r3, #1
 8011540:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011542:	7c7a      	ldrb	r2, [r7, #17]
 8011544:	4975      	ldr	r1, [pc, #468]	; (801171c <etharp_query+0x288>)
 8011546:	4613      	mov	r3, r2
 8011548:	005b      	lsls	r3, r3, #1
 801154a:	4413      	add	r3, r2
 801154c:	00db      	lsls	r3, r3, #3
 801154e:	440b      	add	r3, r1
 8011550:	3314      	adds	r3, #20
 8011552:	2201      	movs	r2, #1
 8011554:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011556:	7c7a      	ldrb	r2, [r7, #17]
 8011558:	4970      	ldr	r1, [pc, #448]	; (801171c <etharp_query+0x288>)
 801155a:	4613      	mov	r3, r2
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	4413      	add	r3, r2
 8011560:	00db      	lsls	r3, r3, #3
 8011562:	440b      	add	r3, r1
 8011564:	3308      	adds	r3, #8
 8011566:	68fa      	ldr	r2, [r7, #12]
 8011568:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801156a:	7c7a      	ldrb	r2, [r7, #17]
 801156c:	496b      	ldr	r1, [pc, #428]	; (801171c <etharp_query+0x288>)
 801156e:	4613      	mov	r3, r2
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	4413      	add	r3, r2
 8011574:	00db      	lsls	r3, r3, #3
 8011576:	440b      	add	r3, r1
 8011578:	3314      	adds	r3, #20
 801157a:	781b      	ldrb	r3, [r3, #0]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d011      	beq.n	80115a4 <etharp_query+0x110>
 8011580:	7c7a      	ldrb	r2, [r7, #17]
 8011582:	4966      	ldr	r1, [pc, #408]	; (801171c <etharp_query+0x288>)
 8011584:	4613      	mov	r3, r2
 8011586:	005b      	lsls	r3, r3, #1
 8011588:	4413      	add	r3, r2
 801158a:	00db      	lsls	r3, r3, #3
 801158c:	440b      	add	r3, r1
 801158e:	3314      	adds	r3, #20
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d806      	bhi.n	80115a4 <etharp_query+0x110>
 8011596:	4b5e      	ldr	r3, [pc, #376]	; (8011710 <etharp_query+0x27c>)
 8011598:	f240 32cd 	movw	r2, #973	; 0x3cd
 801159c:	4960      	ldr	r1, [pc, #384]	; (8011720 <etharp_query+0x28c>)
 801159e:	485e      	ldr	r0, [pc, #376]	; (8011718 <etharp_query+0x284>)
 80115a0:	f001 fff4 	bl	801358c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80115a4:	6a3b      	ldr	r3, [r7, #32]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d102      	bne.n	80115b0 <etharp_query+0x11c>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d10c      	bne.n	80115ca <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80115b0:	68b9      	ldr	r1, [r7, #8]
 80115b2:	68f8      	ldr	r0, [r7, #12]
 80115b4:	f000 f978 	bl	80118a8 <etharp_request>
 80115b8:	4603      	mov	r3, r0
 80115ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d102      	bne.n	80115ca <etharp_query+0x136>
      return result;
 80115c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80115c8:	e09c      	b.n	8011704 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d106      	bne.n	80115de <etharp_query+0x14a>
 80115d0:	4b4f      	ldr	r3, [pc, #316]	; (8011710 <etharp_query+0x27c>)
 80115d2:	f240 32e1 	movw	r2, #993	; 0x3e1
 80115d6:	4953      	ldr	r1, [pc, #332]	; (8011724 <etharp_query+0x290>)
 80115d8:	484f      	ldr	r0, [pc, #316]	; (8011718 <etharp_query+0x284>)
 80115da:	f001 ffd7 	bl	801358c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80115de:	7c7a      	ldrb	r2, [r7, #17]
 80115e0:	494e      	ldr	r1, [pc, #312]	; (801171c <etharp_query+0x288>)
 80115e2:	4613      	mov	r3, r2
 80115e4:	005b      	lsls	r3, r3, #1
 80115e6:	4413      	add	r3, r2
 80115e8:	00db      	lsls	r3, r3, #3
 80115ea:	440b      	add	r3, r1
 80115ec:	3314      	adds	r3, #20
 80115ee:	781b      	ldrb	r3, [r3, #0]
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	d917      	bls.n	8011624 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80115f4:	4a4c      	ldr	r2, [pc, #304]	; (8011728 <etharp_query+0x294>)
 80115f6:	7c7b      	ldrb	r3, [r7, #17]
 80115f8:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80115fa:	7c7a      	ldrb	r2, [r7, #17]
 80115fc:	4613      	mov	r3, r2
 80115fe:	005b      	lsls	r3, r3, #1
 8011600:	4413      	add	r3, r2
 8011602:	00db      	lsls	r3, r3, #3
 8011604:	3308      	adds	r3, #8
 8011606:	4a45      	ldr	r2, [pc, #276]	; (801171c <etharp_query+0x288>)
 8011608:	4413      	add	r3, r2
 801160a:	3304      	adds	r3, #4
 801160c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011610:	9200      	str	r2, [sp, #0]
 8011612:	697a      	ldr	r2, [r7, #20]
 8011614:	6879      	ldr	r1, [r7, #4]
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f001 ff06 	bl	8013428 <ethernet_output>
 801161c:	4603      	mov	r3, r0
 801161e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011622:	e06d      	b.n	8011700 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011624:	7c7a      	ldrb	r2, [r7, #17]
 8011626:	493d      	ldr	r1, [pc, #244]	; (801171c <etharp_query+0x288>)
 8011628:	4613      	mov	r3, r2
 801162a:	005b      	lsls	r3, r3, #1
 801162c:	4413      	add	r3, r2
 801162e:	00db      	lsls	r3, r3, #3
 8011630:	440b      	add	r3, r1
 8011632:	3314      	adds	r3, #20
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	2b01      	cmp	r3, #1
 8011638:	d162      	bne.n	8011700 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011642:	e01c      	b.n	801167e <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	895a      	ldrh	r2, [r3, #10]
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	891b      	ldrh	r3, [r3, #8]
 801164c:	429a      	cmp	r2, r3
 801164e:	d10a      	bne.n	8011666 <etharp_query+0x1d2>
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d006      	beq.n	8011666 <etharp_query+0x1d2>
 8011658:	4b2d      	ldr	r3, [pc, #180]	; (8011710 <etharp_query+0x27c>)
 801165a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801165e:	4933      	ldr	r1, [pc, #204]	; (801172c <etharp_query+0x298>)
 8011660:	482d      	ldr	r0, [pc, #180]	; (8011718 <etharp_query+0x284>)
 8011662:	f001 ff93 	bl	801358c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011666:	69fb      	ldr	r3, [r7, #28]
 8011668:	7b1b      	ldrb	r3, [r3, #12]
 801166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801166e:	2b00      	cmp	r3, #0
 8011670:	d002      	beq.n	8011678 <etharp_query+0x1e4>
        copy_needed = 1;
 8011672:	2301      	movs	r3, #1
 8011674:	61bb      	str	r3, [r7, #24]
        break;
 8011676:	e005      	b.n	8011684 <etharp_query+0x1f0>
      }
      p = p->next;
 8011678:	69fb      	ldr	r3, [r7, #28]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1df      	bne.n	8011644 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d007      	beq.n	801169a <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011690:	200e      	movs	r0, #14
 8011692:	f7f6 faff 	bl	8007c94 <pbuf_clone>
 8011696:	61f8      	str	r0, [r7, #28]
 8011698:	e004      	b.n	80116a4 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801169e:	69f8      	ldr	r0, [r7, #28]
 80116a0:	f7f6 f92c 	bl	80078fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d021      	beq.n	80116ee <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80116aa:	7c7a      	ldrb	r2, [r7, #17]
 80116ac:	491b      	ldr	r1, [pc, #108]	; (801171c <etharp_query+0x288>)
 80116ae:	4613      	mov	r3, r2
 80116b0:	005b      	lsls	r3, r3, #1
 80116b2:	4413      	add	r3, r2
 80116b4:	00db      	lsls	r3, r3, #3
 80116b6:	440b      	add	r3, r1
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d00a      	beq.n	80116d4 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80116be:	7c7a      	ldrb	r2, [r7, #17]
 80116c0:	4916      	ldr	r1, [pc, #88]	; (801171c <etharp_query+0x288>)
 80116c2:	4613      	mov	r3, r2
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	4413      	add	r3, r2
 80116c8:	00db      	lsls	r3, r3, #3
 80116ca:	440b      	add	r3, r1
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7f6 f874 	bl	80077bc <pbuf_free>
      }
      arp_table[i].q = p;
 80116d4:	7c7a      	ldrb	r2, [r7, #17]
 80116d6:	4911      	ldr	r1, [pc, #68]	; (801171c <etharp_query+0x288>)
 80116d8:	4613      	mov	r3, r2
 80116da:	005b      	lsls	r3, r3, #1
 80116dc:	4413      	add	r3, r2
 80116de:	00db      	lsls	r3, r3, #3
 80116e0:	440b      	add	r3, r1
 80116e2:	69fa      	ldr	r2, [r7, #28]
 80116e4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80116e6:	2300      	movs	r3, #0
 80116e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116ec:	e008      	b.n	8011700 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 80116ee:	4b07      	ldr	r3, [pc, #28]	; (801170c <etharp_query+0x278>)
 80116f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80116f2:	3301      	adds	r3, #1
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	4b05      	ldr	r3, [pc, #20]	; (801170c <etharp_query+0x278>)
 80116f8:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80116fa:	23ff      	movs	r3, #255	; 0xff
 80116fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011700:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011704:	4618      	mov	r0, r3
 8011706:	3728      	adds	r7, #40	; 0x28
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	20007a48 	.word	0x20007a48
 8011710:	080171fc 	.word	0x080171fc
 8011714:	080173a8 	.word	0x080173a8
 8011718:	08017274 	.word	0x08017274
 801171c:	200005e0 	.word	0x200005e0
 8011720:	080173b8 	.word	0x080173b8
 8011724:	0801739c 	.word	0x0801739c
 8011728:	200006d0 	.word	0x200006d0
 801172c:	080173e0 	.word	0x080173e0

08011730 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b08a      	sub	sp, #40	; 0x28
 8011734:	af02      	add	r7, sp, #8
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
 801173c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801173e:	2300      	movs	r3, #0
 8011740:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d106      	bne.n	8011756 <etharp_raw+0x26>
 8011748:	4b40      	ldr	r3, [pc, #256]	; (801184c <etharp_raw+0x11c>)
 801174a:	f240 4257 	movw	r2, #1111	; 0x457
 801174e:	4940      	ldr	r1, [pc, #256]	; (8011850 <etharp_raw+0x120>)
 8011750:	4840      	ldr	r0, [pc, #256]	; (8011854 <etharp_raw+0x124>)
 8011752:	f001 ff1b 	bl	801358c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011756:	f44f 7220 	mov.w	r2, #640	; 0x280
 801175a:	211c      	movs	r1, #28
 801175c:	200e      	movs	r0, #14
 801175e:	f7f5 fd8d 	bl	800727c <pbuf_alloc>
 8011762:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d108      	bne.n	801177c <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801176a:	4b3b      	ldr	r3, [pc, #236]	; (8011858 <etharp_raw+0x128>)
 801176c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801176e:	3301      	adds	r3, #1
 8011770:	b29a      	uxth	r2, r3
 8011772:	4b39      	ldr	r3, [pc, #228]	; (8011858 <etharp_raw+0x128>)
 8011774:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 8011776:	f04f 33ff 	mov.w	r3, #4294967295
 801177a:	e063      	b.n	8011844 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801177c:	69bb      	ldr	r3, [r7, #24]
 801177e:	895b      	ldrh	r3, [r3, #10]
 8011780:	2b1b      	cmp	r3, #27
 8011782:	d806      	bhi.n	8011792 <etharp_raw+0x62>
 8011784:	4b31      	ldr	r3, [pc, #196]	; (801184c <etharp_raw+0x11c>)
 8011786:	f240 4262 	movw	r2, #1122	; 0x462
 801178a:	4934      	ldr	r1, [pc, #208]	; (801185c <etharp_raw+0x12c>)
 801178c:	4831      	ldr	r0, [pc, #196]	; (8011854 <etharp_raw+0x124>)
 801178e:	f001 fefd 	bl	801358c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011792:	69bb      	ldr	r3, [r7, #24]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011798:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801179a:	4618      	mov	r0, r3
 801179c:	f7f4 fb44 	bl	8005e28 <lwip_htons>
 80117a0:	4603      	mov	r3, r0
 80117a2:	461a      	mov	r2, r3
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80117ae:	2b06      	cmp	r3, #6
 80117b0:	d006      	beq.n	80117c0 <etharp_raw+0x90>
 80117b2:	4b26      	ldr	r3, [pc, #152]	; (801184c <etharp_raw+0x11c>)
 80117b4:	f240 4269 	movw	r2, #1129	; 0x469
 80117b8:	4929      	ldr	r1, [pc, #164]	; (8011860 <etharp_raw+0x130>)
 80117ba:	4826      	ldr	r0, [pc, #152]	; (8011854 <etharp_raw+0x124>)
 80117bc:	f001 fee6 	bl	801358c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	3308      	adds	r3, #8
 80117c4:	2206      	movs	r2, #6
 80117c6:	6839      	ldr	r1, [r7, #0]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f001 feaf 	bl	801352c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	3312      	adds	r3, #18
 80117d2:	2206      	movs	r2, #6
 80117d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117d6:	4618      	mov	r0, r3
 80117d8:	f001 fea8 	bl	801352c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	330e      	adds	r3, #14
 80117e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117e2:	6812      	ldr	r2, [r2, #0]
 80117e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	3318      	adds	r3, #24
 80117ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117ec:	6812      	ldr	r2, [r2, #0]
 80117ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	2200      	movs	r2, #0
 80117f4:	701a      	strb	r2, [r3, #0]
 80117f6:	2200      	movs	r2, #0
 80117f8:	f042 0201 	orr.w	r2, r2, #1
 80117fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80117fe:	697b      	ldr	r3, [r7, #20]
 8011800:	2200      	movs	r2, #0
 8011802:	f042 0208 	orr.w	r2, r2, #8
 8011806:	709a      	strb	r2, [r3, #2]
 8011808:	2200      	movs	r2, #0
 801180a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	2206      	movs	r2, #6
 8011810:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	2204      	movs	r2, #4
 8011816:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011818:	f640 0306 	movw	r3, #2054	; 0x806
 801181c:	9300      	str	r3, [sp, #0]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	68ba      	ldr	r2, [r7, #8]
 8011822:	69b9      	ldr	r1, [r7, #24]
 8011824:	68f8      	ldr	r0, [r7, #12]
 8011826:	f001 fdff 	bl	8013428 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801182a:	4b0b      	ldr	r3, [pc, #44]	; (8011858 <etharp_raw+0x128>)
 801182c:	8b1b      	ldrh	r3, [r3, #24]
 801182e:	3301      	adds	r3, #1
 8011830:	b29a      	uxth	r2, r3
 8011832:	4b09      	ldr	r3, [pc, #36]	; (8011858 <etharp_raw+0x128>)
 8011834:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 8011836:	69b8      	ldr	r0, [r7, #24]
 8011838:	f7f5 ffc0 	bl	80077bc <pbuf_free>
  p = NULL;
 801183c:	2300      	movs	r3, #0
 801183e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011840:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3720      	adds	r7, #32
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}
 801184c:	080171fc 	.word	0x080171fc
 8011850:	0801734c 	.word	0x0801734c
 8011854:	08017274 	.word	0x08017274
 8011858:	20007a48 	.word	0x20007a48
 801185c:	080173fc 	.word	0x080173fc
 8011860:	08017430 	.word	0x08017430

08011864 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b088      	sub	sp, #32
 8011868:	af04      	add	r7, sp, #16
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011880:	2201      	movs	r2, #1
 8011882:	9203      	str	r2, [sp, #12]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	9202      	str	r2, [sp, #8]
 8011888:	4a06      	ldr	r2, [pc, #24]	; (80118a4 <etharp_request_dst+0x40>)
 801188a:	9201      	str	r2, [sp, #4]
 801188c:	9300      	str	r3, [sp, #0]
 801188e:	4603      	mov	r3, r0
 8011890:	687a      	ldr	r2, [r7, #4]
 8011892:	68f8      	ldr	r0, [r7, #12]
 8011894:	f7ff ff4c 	bl	8011730 <etharp_raw>
 8011898:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801189a:	4618      	mov	r0, r3
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	08039750 	.word	0x08039750

080118a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80118b2:	4a05      	ldr	r2, [pc, #20]	; (80118c8 <etharp_request+0x20>)
 80118b4:	6839      	ldr	r1, [r7, #0]
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f7ff ffd4 	bl	8011864 <etharp_request_dst>
 80118bc:	4603      	mov	r3, r0
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3708      	adds	r7, #8
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	08039748 	.word	0x08039748

080118cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b08e      	sub	sp, #56	; 0x38
 80118d0:	af04      	add	r7, sp, #16
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 80118d6:	4ba8      	ldr	r3, [pc, #672]	; (8011b78 <icmp_input+0x2ac>)
 80118d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80118dc:	3301      	adds	r3, #1
 80118de:	b29a      	uxth	r2, r3
 80118e0:	4ba5      	ldr	r3, [pc, #660]	; (8011b78 <icmp_input+0x2ac>)
 80118e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80118e6:	4ba5      	ldr	r3, [pc, #660]	; (8011b7c <icmp_input+0x2b0>)
 80118e8:	689b      	ldr	r3, [r3, #8]
 80118ea:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80118ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	f003 030f 	and.w	r3, r3, #15
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	009b      	lsls	r3, r3, #2
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80118fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118fe:	2b13      	cmp	r3, #19
 8011900:	f240 8112 	bls.w	8011b28 <icmp_input+0x25c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	895b      	ldrh	r3, [r3, #10]
 8011908:	2b03      	cmp	r3, #3
 801190a:	f240 810f 	bls.w	8011b2c <icmp_input+0x260>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011918:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801191c:	2b00      	cmp	r3, #0
 801191e:	f000 80fc 	beq.w	8011b1a <icmp_input+0x24e>
 8011922:	2b08      	cmp	r3, #8
 8011924:	f040 80e8 	bne.w	8011af8 <icmp_input+0x22c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011928:	4b95      	ldr	r3, [pc, #596]	; (8011b80 <icmp_input+0x2b4>)
 801192a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801192c:	4b93      	ldr	r3, [pc, #588]	; (8011b7c <icmp_input+0x2b0>)
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011934:	2be0      	cmp	r3, #224	; 0xe0
 8011936:	f000 8108 	beq.w	8011b4a <icmp_input+0x27e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801193a:	4b90      	ldr	r3, [pc, #576]	; (8011b7c <icmp_input+0x2b0>)
 801193c:	695b      	ldr	r3, [r3, #20]
 801193e:	4a8f      	ldr	r2, [pc, #572]	; (8011b7c <icmp_input+0x2b0>)
 8011940:	6812      	ldr	r2, [r2, #0]
 8011942:	4611      	mov	r1, r2
 8011944:	4618      	mov	r0, r3
 8011946:	f000 fd6d 	bl	8012424 <ip4_addr_isbroadcast_u32>
 801194a:	4603      	mov	r3, r0
 801194c:	2b00      	cmp	r3, #0
 801194e:	f040 80fe 	bne.w	8011b4e <icmp_input+0x282>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	891b      	ldrh	r3, [r3, #8]
 8011956:	2b07      	cmp	r3, #7
 8011958:	f240 80ea 	bls.w	8011b30 <icmp_input+0x264>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f7f4 fc27 	bl	80061b0 <inet_chksum_pbuf>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	d00b      	beq.n	8011980 <icmp_input+0xb4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f7f5 ff27 	bl	80077bc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 801196e:	4b82      	ldr	r3, [pc, #520]	; (8011b78 <icmp_input+0x2ac>)
 8011970:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011974:	3301      	adds	r3, #1
 8011976:	b29a      	uxth	r2, r3
 8011978:	4b7f      	ldr	r3, [pc, #508]	; (8011b78 <icmp_input+0x2ac>)
 801197a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801197e:	e0f7      	b.n	8011b70 <icmp_input+0x2a4>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011982:	330e      	adds	r3, #14
 8011984:	4619      	mov	r1, r3
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f7f5 fe82 	bl	8007690 <pbuf_add_header>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d04b      	beq.n	8011a2a <icmp_input+0x15e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	891a      	ldrh	r2, [r3, #8]
 8011996:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011998:	4413      	add	r3, r2
 801199a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	891b      	ldrh	r3, [r3, #8]
 80119a0:	8b7a      	ldrh	r2, [r7, #26]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	f0c0 80d5 	bcc.w	8011b52 <icmp_input+0x286>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80119a8:	8b7b      	ldrh	r3, [r7, #26]
 80119aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119ae:	4619      	mov	r1, r3
 80119b0:	200e      	movs	r0, #14
 80119b2:	f7f5 fc63 	bl	800727c <pbuf_alloc>
 80119b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f000 80cb 	beq.w	8011b56 <icmp_input+0x28a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	895b      	ldrh	r3, [r3, #10]
 80119c4:	461a      	mov	r2, r3
 80119c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119c8:	3308      	adds	r3, #8
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d203      	bcs.n	80119d6 <icmp_input+0x10a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80119ce:	6978      	ldr	r0, [r7, #20]
 80119d0:	f7f5 fef4 	bl	80077bc <pbuf_free>
          goto icmperr;
 80119d4:	e0c0      	b.n	8011b58 <icmp_input+0x28c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80119dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119de:	4618      	mov	r0, r3
 80119e0:	f001 fda4 	bl	801352c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80119e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119e6:	4619      	mov	r1, r3
 80119e8:	6978      	ldr	r0, [r7, #20]
 80119ea:	f7f5 fe61 	bl	80076b0 <pbuf_remove_header>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d009      	beq.n	8011a08 <icmp_input+0x13c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80119f4:	4b63      	ldr	r3, [pc, #396]	; (8011b84 <icmp_input+0x2b8>)
 80119f6:	22b6      	movs	r2, #182	; 0xb6
 80119f8:	4963      	ldr	r1, [pc, #396]	; (8011b88 <icmp_input+0x2bc>)
 80119fa:	4864      	ldr	r0, [pc, #400]	; (8011b8c <icmp_input+0x2c0>)
 80119fc:	f001 fdc6 	bl	801358c <iprintf>
          pbuf_free(r);
 8011a00:	6978      	ldr	r0, [r7, #20]
 8011a02:	f7f5 fedb 	bl	80077bc <pbuf_free>
          goto icmperr;
 8011a06:	e0a7      	b.n	8011b58 <icmp_input+0x28c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011a08:	6879      	ldr	r1, [r7, #4]
 8011a0a:	6978      	ldr	r0, [r7, #20]
 8011a0c:	f7f5 fffe 	bl	8007a0c <pbuf_copy>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d003      	beq.n	8011a1e <icmp_input+0x152>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011a16:	6978      	ldr	r0, [r7, #20]
 8011a18:	f7f5 fed0 	bl	80077bc <pbuf_free>
          goto icmperr;
 8011a1c:	e09c      	b.n	8011b58 <icmp_input+0x28c>
        }
        /* free the original p */
        pbuf_free(p);
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f7f5 fecc 	bl	80077bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	607b      	str	r3, [r7, #4]
 8011a28:	e00f      	b.n	8011a4a <icmp_input+0x17e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011a2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a2c:	330e      	adds	r3, #14
 8011a2e:	4619      	mov	r1, r3
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7f5 fe3d 	bl	80076b0 <pbuf_remove_header>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d006      	beq.n	8011a4a <icmp_input+0x17e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011a3c:	4b51      	ldr	r3, [pc, #324]	; (8011b84 <icmp_input+0x2b8>)
 8011a3e:	22c7      	movs	r2, #199	; 0xc7
 8011a40:	4953      	ldr	r1, [pc, #332]	; (8011b90 <icmp_input+0x2c4>)
 8011a42:	4852      	ldr	r0, [pc, #328]	; (8011b8c <icmp_input+0x2c0>)
 8011a44:	f001 fda2 	bl	801358c <iprintf>
          goto icmperr;
 8011a48:	e086      	b.n	8011b58 <icmp_input+0x28c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a52:	4619      	mov	r1, r3
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f7f5 fe1b 	bl	8007690 <pbuf_add_header>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d15e      	bne.n	8011b1e <icmp_input+0x252>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011a66:	69fb      	ldr	r3, [r7, #28]
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011a6e:	4b43      	ldr	r3, [pc, #268]	; (8011b7c <icmp_input+0x2b0>)
 8011a70:	691a      	ldr	r2, [r3, #16]
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011a7c:	693b      	ldr	r3, [r7, #16]
 8011a7e:	885b      	ldrh	r3, [r3, #2]
 8011a80:	b29b      	uxth	r3, r3
 8011a82:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011a86:	4293      	cmp	r3, r2
 8011a88:	d907      	bls.n	8011a9a <icmp_input+0x1ce>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	885b      	ldrh	r3, [r3, #2]
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	3309      	adds	r3, #9
 8011a92:	b29a      	uxth	r2, r3
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	805a      	strh	r2, [r3, #2]
 8011a98:	e006      	b.n	8011aa8 <icmp_input+0x1dc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	885b      	ldrh	r3, [r3, #2]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	3308      	adds	r3, #8
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	22ff      	movs	r2, #255	; 0xff
 8011aac:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	729a      	strb	r2, [r3, #10]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8011ab8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011aba:	4619      	mov	r1, r3
 8011abc:	68f8      	ldr	r0, [r7, #12]
 8011abe:	f7f4 fb65 	bl	800618c <inet_chksum>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8011aca:	4b2b      	ldr	r3, [pc, #172]	; (8011b78 <icmp_input+0x2ac>)
 8011acc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	4b28      	ldr	r3, [pc, #160]	; (8011b78 <icmp_input+0x2ac>)
 8011ad6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	9302      	str	r3, [sp, #8]
 8011ade:	2301      	movs	r3, #1
 8011ae0:	9301      	str	r3, [sp, #4]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	9300      	str	r3, [sp, #0]
 8011ae6:	23ff      	movs	r3, #255	; 0xff
 8011ae8:	2200      	movs	r2, #0
 8011aea:	69f9      	ldr	r1, [r7, #28]
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f000 fb41 	bl	8012174 <ip4_output_if>
 8011af2:	4603      	mov	r3, r0
 8011af4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011af6:	e012      	b.n	8011b1e <icmp_input+0x252>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8011af8:	4b1f      	ldr	r3, [pc, #124]	; (8011b78 <icmp_input+0x2ac>)
 8011afa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8011afe:	3301      	adds	r3, #1
 8011b00:	b29a      	uxth	r2, r3
 8011b02:	4b1d      	ldr	r3, [pc, #116]	; (8011b78 <icmp_input+0x2ac>)
 8011b04:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8011b08:	4b1b      	ldr	r3, [pc, #108]	; (8011b78 <icmp_input+0x2ac>)
 8011b0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b0e:	3301      	adds	r3, #1
 8011b10:	b29a      	uxth	r2, r3
 8011b12:	4b19      	ldr	r3, [pc, #100]	; (8011b78 <icmp_input+0x2ac>)
 8011b14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8011b18:	e002      	b.n	8011b20 <icmp_input+0x254>
      break;
 8011b1a:	bf00      	nop
 8011b1c:	e000      	b.n	8011b20 <icmp_input+0x254>
      break;
 8011b1e:	bf00      	nop
  }
  pbuf_free(p);
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7f5 fe4b 	bl	80077bc <pbuf_free>
  return;
 8011b26:	e023      	b.n	8011b70 <icmp_input+0x2a4>
    goto lenerr;
 8011b28:	bf00      	nop
 8011b2a:	e002      	b.n	8011b32 <icmp_input+0x266>
    goto lenerr;
 8011b2c:	bf00      	nop
 8011b2e:	e000      	b.n	8011b32 <icmp_input+0x266>
        goto lenerr;
 8011b30:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7f5 fe42 	bl	80077bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8011b38:	4b0f      	ldr	r3, [pc, #60]	; (8011b78 <icmp_input+0x2ac>)
 8011b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011b3e:	3301      	adds	r3, #1
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	4b0d      	ldr	r3, [pc, #52]	; (8011b78 <icmp_input+0x2ac>)
 8011b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011b48:	e012      	b.n	8011b70 <icmp_input+0x2a4>
        goto icmperr;
 8011b4a:	bf00      	nop
 8011b4c:	e004      	b.n	8011b58 <icmp_input+0x28c>
        goto icmperr;
 8011b4e:	bf00      	nop
 8011b50:	e002      	b.n	8011b58 <icmp_input+0x28c>
          goto icmperr;
 8011b52:	bf00      	nop
 8011b54:	e000      	b.n	8011b58 <icmp_input+0x28c>
          goto icmperr;
 8011b56:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f7f5 fe2f 	bl	80077bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8011b5e:	4b06      	ldr	r3, [pc, #24]	; (8011b78 <icmp_input+0x2ac>)
 8011b60:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8011b64:	3301      	adds	r3, #1
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	4b03      	ldr	r3, [pc, #12]	; (8011b78 <icmp_input+0x2ac>)
 8011b6a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011b6e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011b70:	3728      	adds	r7, #40	; 0x28
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	20007a48 	.word	0x20007a48
 8011b7c:	20004534 	.word	0x20004534
 8011b80:	20004548 	.word	0x20004548
 8011b84:	08017474 	.word	0x08017474
 8011b88:	080174ac 	.word	0x080174ac
 8011b8c:	080174e4 	.word	0x080174e4
 8011b90:	0801750c 	.word	0x0801750c

08011b94 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	460b      	mov	r3, r1
 8011b9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011ba0:	78fb      	ldrb	r3, [r7, #3]
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	2103      	movs	r1, #3
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 f814 	bl	8011bd4 <icmp_send_response>
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011bc0:	78fb      	ldrb	r3, [r7, #3]
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	210b      	movs	r1, #11
 8011bc6:	6878      	ldr	r0, [r7, #4]
 8011bc8:	f000 f804 	bl	8011bd4 <icmp_send_response>
}
 8011bcc:	bf00      	nop
 8011bce:	3708      	adds	r7, #8
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b08c      	sub	sp, #48	; 0x30
 8011bd8:	af04      	add	r7, sp, #16
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	460b      	mov	r3, r1
 8011bde:	70fb      	strb	r3, [r7, #3]
 8011be0:	4613      	mov	r3, r2
 8011be2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011be4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011be8:	2124      	movs	r1, #36	; 0x24
 8011bea:	2022      	movs	r0, #34	; 0x22
 8011bec:	f7f5 fb46 	bl	800727c <pbuf_alloc>
 8011bf0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d05e      	beq.n	8011cb6 <icmp_send_response+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	895b      	ldrh	r3, [r3, #10]
 8011bfc:	2b23      	cmp	r3, #35	; 0x23
 8011bfe:	d806      	bhi.n	8011c0e <icmp_send_response+0x3a>
 8011c00:	4b2f      	ldr	r3, [pc, #188]	; (8011cc0 <icmp_send_response+0xec>)
 8011c02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011c06:	492f      	ldr	r1, [pc, #188]	; (8011cc4 <icmp_send_response+0xf0>)
 8011c08:	482f      	ldr	r0, [pc, #188]	; (8011cc8 <icmp_send_response+0xf4>)
 8011c0a:	f001 fcbf 	bl	801358c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	78fa      	ldrb	r2, [r7, #3]
 8011c1e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	78ba      	ldrb	r2, [r7, #2]
 8011c24:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	711a      	strb	r2, [r3, #4]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	2200      	movs	r2, #0
 8011c34:	719a      	strb	r2, [r3, #6]
 8011c36:	2200      	movs	r2, #0
 8011c38:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	f103 0008 	add.w	r0, r3, #8
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	221c      	movs	r2, #28
 8011c48:	4619      	mov	r1, r3
 8011c4a:	f001 fc6f 	bl	801352c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011c4e:	69bb      	ldr	r3, [r7, #24]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011c54:	f107 030c 	add.w	r3, r7, #12
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f000 f839 	bl	8011cd0 <ip4_route>
 8011c5e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d023      	beq.n	8011cae <icmp_send_response+0xda>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	709a      	strb	r2, [r3, #2]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	895b      	ldrh	r3, [r3, #10]
 8011c74:	4619      	mov	r1, r3
 8011c76:	6978      	ldr	r0, [r7, #20]
 8011c78:	f7f4 fa88 	bl	800618c <inet_chksum>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	461a      	mov	r2, r3
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8011c84:	4b11      	ldr	r3, [pc, #68]	; (8011ccc <icmp_send_response+0xf8>)
 8011c86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	4b0f      	ldr	r3, [pc, #60]	; (8011ccc <icmp_send_response+0xf8>)
 8011c90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011c94:	f107 020c 	add.w	r2, r7, #12
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	9302      	str	r3, [sp, #8]
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	9301      	str	r3, [sp, #4]
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	23ff      	movs	r3, #255	; 0xff
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	69f8      	ldr	r0, [r7, #28]
 8011caa:	f000 fa63 	bl	8012174 <ip4_output_if>
  }
  pbuf_free(q);
 8011cae:	69f8      	ldr	r0, [r7, #28]
 8011cb0:	f7f5 fd84 	bl	80077bc <pbuf_free>
 8011cb4:	e000      	b.n	8011cb8 <icmp_send_response+0xe4>
    return;
 8011cb6:	bf00      	nop
}
 8011cb8:	3720      	adds	r7, #32
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	08017474 	.word	0x08017474
 8011cc4:	08017540 	.word	0x08017540
 8011cc8:	080174e4 	.word	0x080174e4
 8011ccc:	20007a48 	.word	0x20007a48

08011cd0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011cd8:	4b37      	ldr	r3, [pc, #220]	; (8011db8 <ip4_route+0xe8>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	60fb      	str	r3, [r7, #12]
 8011cde:	e036      	b.n	8011d4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011ce6:	f003 0301 	and.w	r3, r3, #1
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d02b      	beq.n	8011d48 <ip4_route+0x78>
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011cf6:	089b      	lsrs	r3, r3, #2
 8011cf8:	f003 0301 	and.w	r3, r3, #1
 8011cfc:	b2db      	uxtb	r3, r3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d022      	beq.n	8011d48 <ip4_route+0x78>
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	3304      	adds	r3, #4
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d01d      	beq.n	8011d48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	3304      	adds	r3, #4
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	405a      	eors	r2, r3
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	3308      	adds	r3, #8
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4013      	ands	r3, r2
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d101      	bne.n	8011d28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	e040      	b.n	8011daa <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d2e:	f003 0302 	and.w	r3, r3, #2
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d108      	bne.n	8011d48 <ip4_route+0x78>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681a      	ldr	r2, [r3, #0]
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	330c      	adds	r3, #12
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d101      	bne.n	8011d48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	e030      	b.n	8011daa <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	60fb      	str	r3, [r7, #12]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d1c5      	bne.n	8011ce0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011d54:	4b19      	ldr	r3, [pc, #100]	; (8011dbc <ip4_route+0xec>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d01a      	beq.n	8011d92 <ip4_route+0xc2>
 8011d5c:	4b17      	ldr	r3, [pc, #92]	; (8011dbc <ip4_route+0xec>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d64:	f003 0301 	and.w	r3, r3, #1
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d012      	beq.n	8011d92 <ip4_route+0xc2>
 8011d6c:	4b13      	ldr	r3, [pc, #76]	; (8011dbc <ip4_route+0xec>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d74:	f003 0304 	and.w	r3, r3, #4
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00a      	beq.n	8011d92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011d7c:	4b0f      	ldr	r3, [pc, #60]	; (8011dbc <ip4_route+0xec>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	3304      	adds	r3, #4
 8011d82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d004      	beq.n	8011d92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8011d90:	d109      	bne.n	8011da6 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8011d92:	4b0b      	ldr	r3, [pc, #44]	; (8011dc0 <ip4_route+0xf0>)
 8011d94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011d98:	3301      	adds	r3, #1
 8011d9a:	b29a      	uxth	r2, r3
 8011d9c:	4b08      	ldr	r3, [pc, #32]	; (8011dc0 <ip4_route+0xf0>)
 8011d9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011da2:	2300      	movs	r3, #0
 8011da4:	e001      	b.n	8011daa <ip4_route+0xda>
  }

  return netif_default;
 8011da6:	4b05      	ldr	r3, [pc, #20]	; (8011dbc <ip4_route+0xec>)
 8011da8:	681b      	ldr	r3, [r3, #0]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3714      	adds	r7, #20
 8011dae:	46bd      	mov	sp, r7
 8011db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db4:	4770      	bx	lr
 8011db6:	bf00      	nop
 8011db8:	20007a3c 	.word	0x20007a3c
 8011dbc:	20007a40 	.word	0x20007a40
 8011dc0:	20007a48 	.word	0x20007a48

08011dc4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011dd2:	f003 0301 	and.w	r3, r3, #1
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d016      	beq.n	8011e0a <ip4_input_accept+0x46>
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	3304      	adds	r3, #4
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d011      	beq.n	8011e0a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011de6:	4b0b      	ldr	r3, [pc, #44]	; (8011e14 <ip4_input_accept+0x50>)
 8011de8:	695a      	ldr	r2, [r3, #20]
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	3304      	adds	r3, #4
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d008      	beq.n	8011e06 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011df4:	4b07      	ldr	r3, [pc, #28]	; (8011e14 <ip4_input_accept+0x50>)
 8011df6:	695b      	ldr	r3, [r3, #20]
 8011df8:	6879      	ldr	r1, [r7, #4]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f000 fb12 	bl	8012424 <ip4_addr_isbroadcast_u32>
 8011e00:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d001      	beq.n	8011e0a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011e06:	2301      	movs	r3, #1
 8011e08:	e000      	b.n	8011e0c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	20004534 	.word	0x20004534

08011e18 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b088      	sub	sp, #32
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8011e22:	2301      	movs	r3, #1
 8011e24:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8011e26:	4b91      	ldr	r3, [pc, #580]	; (801206c <ip4_input+0x254>)
 8011e28:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	4b8e      	ldr	r3, [pc, #568]	; (801206c <ip4_input+0x254>)
 8011e32:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	091b      	lsrs	r3, r3, #4
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	2b04      	cmp	r3, #4
 8011e46:	d014      	beq.n	8011e72 <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f7f5 fcb7 	bl	80077bc <pbuf_free>
    IP_STATS_INC(ip.err);
 8011e4e:	4b87      	ldr	r3, [pc, #540]	; (801206c <ip4_input+0x254>)
 8011e50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011e54:	3301      	adds	r3, #1
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	4b84      	ldr	r3, [pc, #528]	; (801206c <ip4_input+0x254>)
 8011e5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 8011e5e:	4b83      	ldr	r3, [pc, #524]	; (801206c <ip4_input+0x254>)
 8011e60:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011e64:	3301      	adds	r3, #1
 8011e66:	b29a      	uxth	r2, r3
 8011e68:	4b80      	ldr	r3, [pc, #512]	; (801206c <ip4_input+0x254>)
 8011e6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	e177      	b.n	8012162 <ip4_input+0x34a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	f003 030f 	and.w	r3, r3, #15
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	b2db      	uxtb	r3, r3
 8011e80:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	885b      	ldrh	r3, [r3, #2]
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7f3 ffcd 	bl	8005e28 <lwip_htons>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	891b      	ldrh	r3, [r3, #8]
 8011e96:	8a3a      	ldrh	r2, [r7, #16]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d204      	bcs.n	8011ea6 <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 8011e9c:	8a3b      	ldrh	r3, [r7, #16]
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f7f5 fb05 	bl	80074b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	895b      	ldrh	r3, [r3, #10]
 8011eaa:	8a7a      	ldrh	r2, [r7, #18]
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d807      	bhi.n	8011ec0 <ip4_input+0xa8>
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	891b      	ldrh	r3, [r3, #8]
 8011eb4:	8a3a      	ldrh	r2, [r7, #16]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d802      	bhi.n	8011ec0 <ip4_input+0xa8>
 8011eba:	8a7b      	ldrh	r3, [r7, #18]
 8011ebc:	2b13      	cmp	r3, #19
 8011ebe:	d814      	bhi.n	8011eea <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7f5 fc7b 	bl	80077bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 8011ec6:	4b69      	ldr	r3, [pc, #420]	; (801206c <ip4_input+0x254>)
 8011ec8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011ecc:	3301      	adds	r3, #1
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	4b66      	ldr	r3, [pc, #408]	; (801206c <ip4_input+0x254>)
 8011ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 8011ed6:	4b65      	ldr	r3, [pc, #404]	; (801206c <ip4_input+0x254>)
 8011ed8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011edc:	3301      	adds	r3, #1
 8011ede:	b29a      	uxth	r2, r3
 8011ee0:	4b62      	ldr	r3, [pc, #392]	; (801206c <ip4_input+0x254>)
 8011ee2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	e13b      	b.n	8012162 <ip4_input+0x34a>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8011eea:	8a7b      	ldrh	r3, [r7, #18]
 8011eec:	4619      	mov	r1, r3
 8011eee:	69f8      	ldr	r0, [r7, #28]
 8011ef0:	f7f4 f94c 	bl	800618c <inet_chksum>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d014      	beq.n	8011f24 <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f7f5 fc5e 	bl	80077bc <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 8011f00:	4b5a      	ldr	r3, [pc, #360]	; (801206c <ip4_input+0x254>)
 8011f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011f06:	3301      	adds	r3, #1
 8011f08:	b29a      	uxth	r2, r3
 8011f0a:	4b58      	ldr	r3, [pc, #352]	; (801206c <ip4_input+0x254>)
 8011f0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
 8011f10:	4b56      	ldr	r3, [pc, #344]	; (801206c <ip4_input+0x254>)
 8011f12:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8011f16:	3301      	adds	r3, #1
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	4b54      	ldr	r3, [pc, #336]	; (801206c <ip4_input+0x254>)
 8011f1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8011f20:	2300      	movs	r3, #0
 8011f22:	e11e      	b.n	8012162 <ip4_input+0x34a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011f24:	69fb      	ldr	r3, [r7, #28]
 8011f26:	691b      	ldr	r3, [r3, #16]
 8011f28:	4a51      	ldr	r2, [pc, #324]	; (8012070 <ip4_input+0x258>)
 8011f2a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	4a4f      	ldr	r2, [pc, #316]	; (8012070 <ip4_input+0x258>)
 8011f32:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011f34:	4b4e      	ldr	r3, [pc, #312]	; (8012070 <ip4_input+0x258>)
 8011f36:	695b      	ldr	r3, [r3, #20]
 8011f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f3c:	2be0      	cmp	r3, #224	; 0xe0
 8011f3e:	d112      	bne.n	8011f66 <ip4_input+0x14e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f46:	f003 0301 	and.w	r3, r3, #1
 8011f4a:	b2db      	uxtb	r3, r3
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d007      	beq.n	8011f60 <ip4_input+0x148>
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	3304      	adds	r3, #4
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d002      	beq.n	8011f60 <ip4_input+0x148>
      netif = inp;
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	61bb      	str	r3, [r7, #24]
 8011f5e:	e02a      	b.n	8011fb6 <ip4_input+0x19e>
    } else {
      netif = NULL;
 8011f60:	2300      	movs	r3, #0
 8011f62:	61bb      	str	r3, [r7, #24]
 8011f64:	e027      	b.n	8011fb6 <ip4_input+0x19e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011f66:	6838      	ldr	r0, [r7, #0]
 8011f68:	f7ff ff2c 	bl	8011dc4 <ip4_input_accept>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d002      	beq.n	8011f78 <ip4_input+0x160>
      netif = inp;
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	61bb      	str	r3, [r7, #24]
 8011f76:	e01e      	b.n	8011fb6 <ip4_input+0x19e>
    } else {
      netif = NULL;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011f7c:	4b3c      	ldr	r3, [pc, #240]	; (8012070 <ip4_input+0x258>)
 8011f7e:	695b      	ldr	r3, [r3, #20]
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b7f      	cmp	r3, #127	; 0x7f
 8011f84:	d017      	beq.n	8011fb6 <ip4_input+0x19e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011f86:	4b3b      	ldr	r3, [pc, #236]	; (8012074 <ip4_input+0x25c>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	61bb      	str	r3, [r7, #24]
 8011f8c:	e00e      	b.n	8011fac <ip4_input+0x194>
          if (netif == inp) {
 8011f8e:	69ba      	ldr	r2, [r7, #24]
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d006      	beq.n	8011fa4 <ip4_input+0x18c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011f96:	69b8      	ldr	r0, [r7, #24]
 8011f98:	f7ff ff14 	bl	8011dc4 <ip4_input_accept>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d108      	bne.n	8011fb4 <ip4_input+0x19c>
 8011fa2:	e000      	b.n	8011fa6 <ip4_input+0x18e>
            continue;
 8011fa4:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	61bb      	str	r3, [r7, #24]
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d1ed      	bne.n	8011f8e <ip4_input+0x176>
 8011fb2:	e000      	b.n	8011fb6 <ip4_input+0x19e>
            break;
 8011fb4:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d111      	bne.n	8011fe0 <ip4_input+0x1c8>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8011fbc:	69fb      	ldr	r3, [r7, #28]
 8011fbe:	7a5b      	ldrb	r3, [r3, #9]
 8011fc0:	2b11      	cmp	r3, #17
 8011fc2:	d10d      	bne.n	8011fe0 <ip4_input+0x1c8>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011fc4:	8a7b      	ldrh	r3, [r7, #18]
 8011fc6:	69fa      	ldr	r2, [r7, #28]
 8011fc8:	4413      	add	r3, r2
 8011fca:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	885b      	ldrh	r3, [r3, #2]
 8011fd0:	b29b      	uxth	r3, r3
 8011fd2:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011fd6:	d103      	bne.n	8011fe0 <ip4_input+0x1c8>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d01f      	beq.n	8012026 <ip4_input+0x20e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011fe6:	4b22      	ldr	r3, [pc, #136]	; (8012070 <ip4_input+0x258>)
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d01b      	beq.n	8012026 <ip4_input+0x20e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011fee:	4b20      	ldr	r3, [pc, #128]	; (8012070 <ip4_input+0x258>)
 8011ff0:	691b      	ldr	r3, [r3, #16]
 8011ff2:	6839      	ldr	r1, [r7, #0]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f000 fa15 	bl	8012424 <ip4_addr_isbroadcast_u32>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d105      	bne.n	801200c <ip4_input+0x1f4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012000:	4b1b      	ldr	r3, [pc, #108]	; (8012070 <ip4_input+0x258>)
 8012002:	691b      	ldr	r3, [r3, #16]
 8012004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012008:	2be0      	cmp	r3, #224	; 0xe0
 801200a:	d10c      	bne.n	8012026 <ip4_input+0x20e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f7f5 fbd5 	bl	80077bc <pbuf_free>
      IP_STATS_INC(ip.drop);
 8012012:	4b16      	ldr	r3, [pc, #88]	; (801206c <ip4_input+0x254>)
 8012014:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012018:	3301      	adds	r3, #1
 801201a:	b29a      	uxth	r2, r3
 801201c:	4b13      	ldr	r3, [pc, #76]	; (801206c <ip4_input+0x254>)
 801201e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012022:	2300      	movs	r3, #0
 8012024:	e09d      	b.n	8012162 <ip4_input+0x34a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012026:	69bb      	ldr	r3, [r7, #24]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d10c      	bne.n	8012046 <ip4_input+0x22e>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801202c:	4b0f      	ldr	r3, [pc, #60]	; (801206c <ip4_input+0x254>)
 801202e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8012032:	3301      	adds	r3, #1
 8012034:	b29a      	uxth	r2, r3
 8012036:	4b0d      	ldr	r3, [pc, #52]	; (801206c <ip4_input+0x254>)
 8012038:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7f5 fbbd 	bl	80077bc <pbuf_free>
    return ERR_OK;
 8012042:	2300      	movs	r3, #0
 8012044:	e08d      	b.n	8012162 <ip4_input+0x34a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	88db      	ldrh	r3, [r3, #6]
 801204a:	b29b      	uxth	r3, r3
 801204c:	461a      	mov	r2, r3
 801204e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012052:	4013      	ands	r3, r2
 8012054:	2b00      	cmp	r3, #0
 8012056:	d012      	beq.n	801207e <ip4_input+0x266>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f000 fdc3 	bl	8012be4 <ip4_reass>
 801205e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d108      	bne.n	8012078 <ip4_input+0x260>
      return ERR_OK;
 8012066:	2300      	movs	r3, #0
 8012068:	e07b      	b.n	8012162 <ip4_input+0x34a>
 801206a:	bf00      	nop
 801206c:	20007a48 	.word	0x20007a48
 8012070:	20004534 	.word	0x20004534
 8012074:	20007a3c 	.word	0x20007a3c
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	685b      	ldr	r3, [r3, #4]
 801207c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801207e:	4a3b      	ldr	r2, [pc, #236]	; (801216c <ip4_input+0x354>)
 8012080:	69bb      	ldr	r3, [r7, #24]
 8012082:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012084:	4a39      	ldr	r2, [pc, #228]	; (801216c <ip4_input+0x354>)
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801208a:	4a38      	ldr	r2, [pc, #224]	; (801216c <ip4_input+0x354>)
 801208c:	69fb      	ldr	r3, [r7, #28]
 801208e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	f003 030f 	and.w	r3, r3, #15
 8012098:	b2db      	uxtb	r3, r3
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	b2db      	uxtb	r3, r3
 801209e:	b29a      	uxth	r2, r3
 80120a0:	4b32      	ldr	r3, [pc, #200]	; (801216c <ip4_input+0x354>)
 80120a2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80120a4:	8a7b      	ldrh	r3, [r7, #18]
 80120a6:	4619      	mov	r1, r3
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7f5 fb01 	bl	80076b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	7a5b      	ldrb	r3, [r3, #9]
 80120b2:	2b11      	cmp	r3, #17
 80120b4:	d006      	beq.n	80120c4 <ip4_input+0x2ac>
 80120b6:	2b11      	cmp	r3, #17
 80120b8:	dc13      	bgt.n	80120e2 <ip4_input+0x2ca>
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d00c      	beq.n	80120d8 <ip4_input+0x2c0>
 80120be:	2b06      	cmp	r3, #6
 80120c0:	d005      	beq.n	80120ce <ip4_input+0x2b6>
 80120c2:	e00e      	b.n	80120e2 <ip4_input+0x2ca>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80120c4:	6839      	ldr	r1, [r7, #0]
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f7fc f980 	bl	800e3cc <udp_input>
        break;
 80120cc:	e036      	b.n	801213c <ip4_input+0x324>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80120ce:	6839      	ldr	r1, [r7, #0]
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f7f7 fc83 	bl	80099dc <tcp_input>
        break;
 80120d6:	e031      	b.n	801213c <ip4_input+0x324>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80120d8:	6839      	ldr	r1, [r7, #0]
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f7ff fbf6 	bl	80118cc <icmp_input>
        break;
 80120e0:	e02c      	b.n	801213c <ip4_input+0x324>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80120e2:	4b22      	ldr	r3, [pc, #136]	; (801216c <ip4_input+0x354>)
 80120e4:	695b      	ldr	r3, [r3, #20]
 80120e6:	69b9      	ldr	r1, [r7, #24]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f000 f99b 	bl	8012424 <ip4_addr_isbroadcast_u32>
 80120ee:	4603      	mov	r3, r0
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d10f      	bne.n	8012114 <ip4_input+0x2fc>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80120f4:	4b1d      	ldr	r3, [pc, #116]	; (801216c <ip4_input+0x354>)
 80120f6:	695b      	ldr	r3, [r3, #20]
 80120f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80120fc:	2be0      	cmp	r3, #224	; 0xe0
 80120fe:	d009      	beq.n	8012114 <ip4_input+0x2fc>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012100:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012104:	4619      	mov	r1, r3
 8012106:	6878      	ldr	r0, [r7, #4]
 8012108:	f7f5 fb45 	bl	8007796 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801210c:	2102      	movs	r1, #2
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff fd40 	bl	8011b94 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 8012114:	4b16      	ldr	r3, [pc, #88]	; (8012170 <ip4_input+0x358>)
 8012116:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801211a:	3301      	adds	r3, #1
 801211c:	b29a      	uxth	r2, r3
 801211e:	4b14      	ldr	r3, [pc, #80]	; (8012170 <ip4_input+0x358>)
 8012120:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8012124:	4b12      	ldr	r3, [pc, #72]	; (8012170 <ip4_input+0x358>)
 8012126:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801212a:	3301      	adds	r3, #1
 801212c:	b29a      	uxth	r2, r3
 801212e:	4b10      	ldr	r3, [pc, #64]	; (8012170 <ip4_input+0x358>)
 8012130:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f7f5 fb41 	bl	80077bc <pbuf_free>
        break;
 801213a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801213c:	4b0b      	ldr	r3, [pc, #44]	; (801216c <ip4_input+0x354>)
 801213e:	2200      	movs	r2, #0
 8012140:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012142:	4b0a      	ldr	r3, [pc, #40]	; (801216c <ip4_input+0x354>)
 8012144:	2200      	movs	r2, #0
 8012146:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012148:	4b08      	ldr	r3, [pc, #32]	; (801216c <ip4_input+0x354>)
 801214a:	2200      	movs	r2, #0
 801214c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801214e:	4b07      	ldr	r3, [pc, #28]	; (801216c <ip4_input+0x354>)
 8012150:	2200      	movs	r2, #0
 8012152:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012154:	4b05      	ldr	r3, [pc, #20]	; (801216c <ip4_input+0x354>)
 8012156:	2200      	movs	r2, #0
 8012158:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801215a:	4b04      	ldr	r3, [pc, #16]	; (801216c <ip4_input+0x354>)
 801215c:	2200      	movs	r2, #0
 801215e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012160:	2300      	movs	r3, #0
}
 8012162:	4618      	mov	r0, r3
 8012164:	3720      	adds	r7, #32
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop
 801216c:	20004534 	.word	0x20004534
 8012170:	20007a48 	.word	0x20007a48

08012174 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b08a      	sub	sp, #40	; 0x28
 8012178:	af04      	add	r7, sp, #16
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]
 8012180:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d009      	beq.n	80121a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d003      	beq.n	801219a <ip4_output_if+0x26>
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d102      	bne.n	80121a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219c:	3304      	adds	r3, #4
 801219e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80121a0:	78fa      	ldrb	r2, [r7, #3]
 80121a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a4:	9302      	str	r3, [sp, #8]
 80121a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80121aa:	9301      	str	r3, [sp, #4]
 80121ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80121b0:	9300      	str	r3, [sp, #0]
 80121b2:	4613      	mov	r3, r2
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	6979      	ldr	r1, [r7, #20]
 80121b8:	68f8      	ldr	r0, [r7, #12]
 80121ba:	f000 f805 	bl	80121c8 <ip4_output_if_src>
 80121be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3718      	adds	r7, #24
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b088      	sub	sp, #32
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	607a      	str	r2, [r7, #4]
 80121d4:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 80121d6:	2300      	movs	r3, #0
 80121d8:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	7b9b      	ldrb	r3, [r3, #14]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d006      	beq.n	80121f0 <ip4_output_if_src+0x28>
 80121e2:	4b89      	ldr	r3, [pc, #548]	; (8012408 <ip4_output_if_src+0x240>)
 80121e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80121e8:	4988      	ldr	r1, [pc, #544]	; (801240c <ip4_output_if_src+0x244>)
 80121ea:	4889      	ldr	r0, [pc, #548]	; (8012410 <ip4_output_if_src+0x248>)
 80121ec:	f001 f9ce 	bl	801358c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	f000 80cc 	beq.w	8012390 <ip4_output_if_src+0x1c8>
    u16_t ip_hlen = IP_HLEN;
 80121f8:	2314      	movs	r3, #20
 80121fa:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80121fc:	2114      	movs	r1, #20
 80121fe:	68f8      	ldr	r0, [r7, #12]
 8012200:	f7f5 fa46 	bl	8007690 <pbuf_add_header>
 8012204:	4603      	mov	r3, r0
 8012206:	2b00      	cmp	r3, #0
 8012208:	d00a      	beq.n	8012220 <ip4_output_if_src+0x58>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801220a:	4b82      	ldr	r3, [pc, #520]	; (8012414 <ip4_output_if_src+0x24c>)
 801220c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012210:	3301      	adds	r3, #1
 8012212:	b29a      	uxth	r2, r3
 8012214:	4b7f      	ldr	r3, [pc, #508]	; (8012414 <ip4_output_if_src+0x24c>)
 8012216:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801221a:	f06f 0301 	mvn.w	r3, #1
 801221e:	e0ef      	b.n	8012400 <ip4_output_if_src+0x238>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	895b      	ldrh	r3, [r3, #10]
 801222a:	2b13      	cmp	r3, #19
 801222c:	d806      	bhi.n	801223c <ip4_output_if_src+0x74>
 801222e:	4b76      	ldr	r3, [pc, #472]	; (8012408 <ip4_output_if_src+0x240>)
 8012230:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012234:	4978      	ldr	r1, [pc, #480]	; (8012418 <ip4_output_if_src+0x250>)
 8012236:	4876      	ldr	r0, [pc, #472]	; (8012410 <ip4_output_if_src+0x248>)
 8012238:	f001 f9a8 	bl	801358c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801223c:	69bb      	ldr	r3, [r7, #24]
 801223e:	78fa      	ldrb	r2, [r7, #3]
 8012240:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012248:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801224a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801224e:	78fb      	ldrb	r3, [r7, #3]
 8012250:	021b      	lsls	r3, r3, #8
 8012252:	4313      	orrs	r3, r2
 8012254:	021b      	lsls	r3, r3, #8
 8012256:	b21a      	sxth	r2, r3
 8012258:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 801225c:	78fb      	ldrb	r3, [r7, #3]
 801225e:	021b      	lsls	r3, r3, #8
 8012260:	430b      	orrs	r3, r1
 8012262:	121b      	asrs	r3, r3, #8
 8012264:	b21b      	sxth	r3, r3
 8012266:	b2db      	uxtb	r3, r3
 8012268:	b21b      	sxth	r3, r3
 801226a:	4313      	orrs	r3, r2
 801226c:	b21b      	sxth	r3, r3
 801226e:	b29b      	uxth	r3, r3
 8012270:	461a      	mov	r2, r3
 8012272:	69fb      	ldr	r3, [r7, #28]
 8012274:	4413      	add	r3, r2
 8012276:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	691b      	ldr	r3, [r3, #16]
 8012284:	b29b      	uxth	r3, r3
 8012286:	69fa      	ldr	r2, [r7, #28]
 8012288:	4413      	add	r3, r2
 801228a:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801228c:	69bb      	ldr	r3, [r7, #24]
 801228e:	691b      	ldr	r3, [r3, #16]
 8012290:	0c1b      	lsrs	r3, r3, #16
 8012292:	69fa      	ldr	r2, [r7, #28]
 8012294:	4413      	add	r3, r2
 8012296:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012298:	8afb      	ldrh	r3, [r7, #22]
 801229a:	089b      	lsrs	r3, r3, #2
 801229c:	b29b      	uxth	r3, r3
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80122b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80122b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	021b      	lsls	r3, r3, #8
 80122bc:	4313      	orrs	r3, r2
 80122be:	021b      	lsls	r3, r3, #8
 80122c0:	b21a      	sxth	r2, r3
 80122c2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80122c6:	69bb      	ldr	r3, [r7, #24]
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	021b      	lsls	r3, r3, #8
 80122cc:	430b      	orrs	r3, r1
 80122ce:	121b      	asrs	r3, r3, #8
 80122d0:	b21b      	sxth	r3, r3
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	b21b      	sxth	r3, r3
 80122d6:	4313      	orrs	r3, r2
 80122d8:	b21b      	sxth	r3, r3
 80122da:	b29b      	uxth	r3, r3
 80122dc:	461a      	mov	r2, r3
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	4413      	add	r3, r2
 80122e2:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	891b      	ldrh	r3, [r3, #8]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7f3 fd9d 	bl	8005e28 <lwip_htons>
 80122ee:	4603      	mov	r3, r0
 80122f0:	461a      	mov	r2, r3
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	885b      	ldrh	r3, [r3, #2]
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	461a      	mov	r2, r3
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	4413      	add	r3, r2
 8012302:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	2200      	movs	r2, #0
 8012308:	719a      	strb	r2, [r3, #6]
 801230a:	2200      	movs	r2, #0
 801230c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801230e:	4b43      	ldr	r3, [pc, #268]	; (801241c <ip4_output_if_src+0x254>)
 8012310:	881b      	ldrh	r3, [r3, #0]
 8012312:	4618      	mov	r0, r3
 8012314:	f7f3 fd88 	bl	8005e28 <lwip_htons>
 8012318:	4603      	mov	r3, r0
 801231a:	461a      	mov	r2, r3
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8012320:	69bb      	ldr	r3, [r7, #24]
 8012322:	889b      	ldrh	r3, [r3, #4]
 8012324:	b29b      	uxth	r3, r3
 8012326:	461a      	mov	r2, r3
 8012328:	69fb      	ldr	r3, [r7, #28]
 801232a:	4413      	add	r3, r2
 801232c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801232e:	4b3b      	ldr	r3, [pc, #236]	; (801241c <ip4_output_if_src+0x254>)
 8012330:	881b      	ldrh	r3, [r3, #0]
 8012332:	3301      	adds	r3, #1
 8012334:	b29a      	uxth	r2, r3
 8012336:	4b39      	ldr	r3, [pc, #228]	; (801241c <ip4_output_if_src+0x254>)
 8012338:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d104      	bne.n	801234a <ip4_output_if_src+0x182>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012340:	4b37      	ldr	r3, [pc, #220]	; (8012420 <ip4_output_if_src+0x258>)
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	60da      	str	r2, [r3, #12]
 8012348:	e003      	b.n	8012352 <ip4_output_if_src+0x18a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8012352:	69bb      	ldr	r3, [r7, #24]
 8012354:	68db      	ldr	r3, [r3, #12]
 8012356:	b29b      	uxth	r3, r3
 8012358:	69fa      	ldr	r2, [r7, #28]
 801235a:	4413      	add	r3, r2
 801235c:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801235e:	69bb      	ldr	r3, [r7, #24]
 8012360:	68db      	ldr	r3, [r3, #12]
 8012362:	0c1b      	lsrs	r3, r3, #16
 8012364:	69fa      	ldr	r2, [r7, #28]
 8012366:	4413      	add	r3, r2
 8012368:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	0c1a      	lsrs	r2, r3, #16
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	b29b      	uxth	r3, r3
 8012372:	4413      	add	r3, r2
 8012374:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	0c1b      	lsrs	r3, r3, #16
 801237a:	69fa      	ldr	r2, [r7, #28]
 801237c:	4413      	add	r3, r2
 801237e:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	43db      	mvns	r3, r3
 8012384:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	b29a      	uxth	r2, r3
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	815a      	strh	r2, [r3, #10]
 801238e:	e017      	b.n	80123c0 <ip4_output_if_src+0x1f8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	895b      	ldrh	r3, [r3, #10]
 8012394:	2b13      	cmp	r3, #19
 8012396:	d80a      	bhi.n	80123ae <ip4_output_if_src+0x1e6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 8012398:	4b1e      	ldr	r3, [pc, #120]	; (8012414 <ip4_output_if_src+0x24c>)
 801239a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801239e:	3301      	adds	r3, #1
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	4b1c      	ldr	r3, [pc, #112]	; (8012414 <ip4_output_if_src+0x24c>)
 80123a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80123a8:	f06f 0301 	mvn.w	r3, #1
 80123ac:	e028      	b.n	8012400 <ip4_output_if_src+0x238>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80123b4:	69bb      	ldr	r3, [r7, #24]
 80123b6:	691b      	ldr	r3, [r3, #16]
 80123b8:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80123ba:	f107 0310 	add.w	r3, r7, #16
 80123be:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 80123c0:	4b14      	ldr	r3, [pc, #80]	; (8012414 <ip4_output_if_src+0x24c>)
 80123c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80123c6:	3301      	adds	r3, #1
 80123c8:	b29a      	uxth	r2, r3
 80123ca:	4b12      	ldr	r3, [pc, #72]	; (8012414 <ip4_output_if_src+0x24c>)
 80123cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80123d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d00c      	beq.n	80123f2 <ip4_output_if_src+0x22a>
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	891a      	ldrh	r2, [r3, #8]
 80123dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d906      	bls.n	80123f2 <ip4_output_if_src+0x22a>
    return ip4_frag(p, netif, dest);
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f000 fe15 	bl	8013018 <ip4_frag>
 80123ee:	4603      	mov	r3, r0
 80123f0:	e006      	b.n	8012400 <ip4_output_if_src+0x238>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80123f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f4:	695b      	ldr	r3, [r3, #20]
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	68f9      	ldr	r1, [r7, #12]
 80123fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123fc:	4798      	blx	r3
 80123fe:	4603      	mov	r3, r0
}
 8012400:	4618      	mov	r0, r3
 8012402:	3720      	adds	r7, #32
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	0801756c 	.word	0x0801756c
 801240c:	080175a0 	.word	0x080175a0
 8012410:	080175ac 	.word	0x080175ac
 8012414:	20007a48 	.word	0x20007a48
 8012418:	080175d4 	.word	0x080175d4
 801241c:	200006d2 	.word	0x200006d2
 8012420:	08039740 	.word	0x08039740

08012424 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012438:	d002      	beq.n	8012440 <ip4_addr_isbroadcast_u32+0x1c>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d101      	bne.n	8012444 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012440:	2301      	movs	r3, #1
 8012442:	e02a      	b.n	801249a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801244a:	f003 0302 	and.w	r3, r3, #2
 801244e:	2b00      	cmp	r3, #0
 8012450:	d101      	bne.n	8012456 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012452:	2300      	movs	r3, #0
 8012454:	e021      	b.n	801249a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	3304      	adds	r3, #4
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	687a      	ldr	r2, [r7, #4]
 801245e:	429a      	cmp	r2, r3
 8012460:	d101      	bne.n	8012466 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012462:	2300      	movs	r3, #0
 8012464:	e019      	b.n	801249a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	3304      	adds	r3, #4
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	405a      	eors	r2, r3
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	3308      	adds	r3, #8
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	4013      	ands	r3, r2
 8012478:	2b00      	cmp	r3, #0
 801247a:	d10d      	bne.n	8012498 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	3308      	adds	r3, #8
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	43da      	mvns	r2, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	3308      	adds	r3, #8
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012490:	429a      	cmp	r2, r3
 8012492:	d101      	bne.n	8012498 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012494:	2301      	movs	r3, #1
 8012496:	e000      	b.n	801249a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012498:	2300      	movs	r3, #0
  }
}
 801249a:	4618      	mov	r0, r3
 801249c:	3714      	adds	r7, #20
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr
	...

080124a8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b082      	sub	sp, #8
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80124b0:	2210      	movs	r2, #16
 80124b2:	4904      	ldr	r1, [pc, #16]	; (80124c4 <ip4addr_ntoa+0x1c>)
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f000 f807 	bl	80124c8 <ip4addr_ntoa_r>
 80124ba:	4603      	mov	r3, r0
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3708      	adds	r7, #8
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	200006d4 	.word	0x200006d4

080124c8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b08d      	sub	sp, #52	; 0x34
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80124d4:	2300      	movs	r3, #0
 80124d6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80124e2:	f107 0318 	add.w	r3, r7, #24
 80124e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80124e8:	2300      	movs	r3, #0
 80124ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80124ee:	e059      	b.n	80125a4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80124f0:	2300      	movs	r3, #0
 80124f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80124f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f8:	781a      	ldrb	r2, [r3, #0]
 80124fa:	4b33      	ldr	r3, [pc, #204]	; (80125c8 <ip4addr_ntoa_r+0x100>)
 80124fc:	fba3 1302 	umull	r1, r3, r3, r2
 8012500:	08d9      	lsrs	r1, r3, #3
 8012502:	460b      	mov	r3, r1
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	440b      	add	r3, r1
 8012508:	005b      	lsls	r3, r3, #1
 801250a:	1ad3      	subs	r3, r2, r3
 801250c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	4a2d      	ldr	r2, [pc, #180]	; (80125c8 <ip4addr_ntoa_r+0x100>)
 8012514:	fba2 2303 	umull	r2, r3, r2, r3
 8012518:	08db      	lsrs	r3, r3, #3
 801251a:	b2da      	uxtb	r2, r3
 801251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8012520:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012524:	1c5a      	adds	r2, r3, #1
 8012526:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801252a:	4619      	mov	r1, r3
 801252c:	7ffb      	ldrb	r3, [r7, #31]
 801252e:	3330      	adds	r3, #48	; 0x30
 8012530:	b2da      	uxtb	r2, r3
 8012532:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012536:	440b      	add	r3, r1
 8012538:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d1d8      	bne.n	80124f6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8012544:	e012      	b.n	801256c <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8012546:	6a3b      	ldr	r3, [r7, #32]
 8012548:	1c5a      	adds	r2, r3, #1
 801254a:	623a      	str	r2, [r7, #32]
 801254c:	687a      	ldr	r2, [r7, #4]
 801254e:	429a      	cmp	r2, r3
 8012550:	dc01      	bgt.n	8012556 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8012552:	2300      	movs	r3, #0
 8012554:	e031      	b.n	80125ba <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8012556:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801255c:	1c59      	adds	r1, r3, #1
 801255e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012560:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012564:	440a      	add	r2, r1
 8012566:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801256a:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801256c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012570:	1e5a      	subs	r2, r3, #1
 8012572:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012576:	2b00      	cmp	r3, #0
 8012578:	d1e5      	bne.n	8012546 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801257a:	6a3b      	ldr	r3, [r7, #32]
 801257c:	1c5a      	adds	r2, r3, #1
 801257e:	623a      	str	r2, [r7, #32]
 8012580:	687a      	ldr	r2, [r7, #4]
 8012582:	429a      	cmp	r2, r3
 8012584:	dc01      	bgt.n	801258a <ip4addr_ntoa_r+0xc2>
      return NULL;
 8012586:	2300      	movs	r3, #0
 8012588:	e017      	b.n	80125ba <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258c:	1c5a      	adds	r2, r3, #1
 801258e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012590:	222e      	movs	r2, #46	; 0x2e
 8012592:	701a      	strb	r2, [r3, #0]
    ap++;
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012596:	3301      	adds	r3, #1
 8012598:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801259a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801259e:	3301      	adds	r3, #1
 80125a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125a8:	2b03      	cmp	r3, #3
 80125aa:	d9a1      	bls.n	80124f0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80125ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ae:	3b01      	subs	r3, #1
 80125b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b4:	2200      	movs	r2, #0
 80125b6:	701a      	strb	r2, [r3, #0]
  return buf;
 80125b8:	68bb      	ldr	r3, [r7, #8]
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3734      	adds	r7, #52	; 0x34
 80125be:	46bd      	mov	sp, r7
 80125c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	cccccccd 	.word	0xcccccccd

080125cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80125d2:	2300      	movs	r3, #0
 80125d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80125d6:	4b12      	ldr	r3, [pc, #72]	; (8012620 <ip_reass_tmr+0x54>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80125dc:	e018      	b.n	8012610 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	7fdb      	ldrb	r3, [r3, #31]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00b      	beq.n	80125fe <ip_reass_tmr+0x32>
      r->timer--;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	7fdb      	ldrb	r3, [r3, #31]
 80125ea:	3b01      	subs	r3, #1
 80125ec:	b2da      	uxtb	r2, r3
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	60fb      	str	r3, [r7, #12]
 80125fc:	e008      	b.n	8012610 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012608:	68b9      	ldr	r1, [r7, #8]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 f80a 	bl	8012624 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1e3      	bne.n	80125de <ip_reass_tmr+0x12>
    }
  }
}
 8012616:	bf00      	nop
 8012618:	bf00      	nop
 801261a:	3710      	adds	r7, #16
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	200006e4 	.word	0x200006e4

08012624 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b088      	sub	sp, #32
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801262e:	2300      	movs	r3, #0
 8012630:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012632:	683a      	ldr	r2, [r7, #0]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	429a      	cmp	r2, r3
 8012638:	d105      	bne.n	8012646 <ip_reass_free_complete_datagram+0x22>
 801263a:	4b45      	ldr	r3, [pc, #276]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 801263c:	22ab      	movs	r2, #171	; 0xab
 801263e:	4945      	ldr	r1, [pc, #276]	; (8012754 <ip_reass_free_complete_datagram+0x130>)
 8012640:	4845      	ldr	r0, [pc, #276]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 8012642:	f000 ffa3 	bl	801358c <iprintf>
  if (prev != NULL) {
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d00a      	beq.n	8012662 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	429a      	cmp	r2, r3
 8012654:	d005      	beq.n	8012662 <ip_reass_free_complete_datagram+0x3e>
 8012656:	4b3e      	ldr	r3, [pc, #248]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 8012658:	22ad      	movs	r2, #173	; 0xad
 801265a:	4940      	ldr	r1, [pc, #256]	; (801275c <ip_reass_free_complete_datagram+0x138>)
 801265c:	483e      	ldr	r0, [pc, #248]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 801265e:	f000 ff95 	bl	801358c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	889b      	ldrh	r3, [r3, #4]
 801266e:	b29b      	uxth	r3, r3
 8012670:	2b00      	cmp	r3, #0
 8012672:	d12a      	bne.n	80126ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	681a      	ldr	r2, [r3, #0]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	6858      	ldr	r0, [r3, #4]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	3308      	adds	r3, #8
 801268a:	2214      	movs	r2, #20
 801268c:	4619      	mov	r1, r3
 801268e:	f000 ff4d 	bl	801352c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012692:	2101      	movs	r1, #1
 8012694:	69b8      	ldr	r0, [r7, #24]
 8012696:	f7ff fa8d 	bl	8011bb4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801269a:	69b8      	ldr	r0, [r7, #24]
 801269c:	f7f5 f916 	bl	80078cc <pbuf_clen>
 80126a0:	4603      	mov	r3, r0
 80126a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80126a4:	8bfa      	ldrh	r2, [r7, #30]
 80126a6:	8a7b      	ldrh	r3, [r7, #18]
 80126a8:	4413      	add	r3, r2
 80126aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126ae:	db05      	blt.n	80126bc <ip_reass_free_complete_datagram+0x98>
 80126b0:	4b27      	ldr	r3, [pc, #156]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 80126b2:	22bc      	movs	r2, #188	; 0xbc
 80126b4:	492a      	ldr	r1, [pc, #168]	; (8012760 <ip_reass_free_complete_datagram+0x13c>)
 80126b6:	4828      	ldr	r0, [pc, #160]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 80126b8:	f000 ff68 	bl	801358c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80126bc:	8bfa      	ldrh	r2, [r7, #30]
 80126be:	8a7b      	ldrh	r3, [r7, #18]
 80126c0:	4413      	add	r3, r2
 80126c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80126c4:	69b8      	ldr	r0, [r7, #24]
 80126c6:	f7f5 f879 	bl	80077bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80126d0:	e01f      	b.n	8012712 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f7f5 f8f2 	bl	80078cc <pbuf_clen>
 80126e8:	4603      	mov	r3, r0
 80126ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80126ec:	8bfa      	ldrh	r2, [r7, #30]
 80126ee:	8a7b      	ldrh	r3, [r7, #18]
 80126f0:	4413      	add	r3, r2
 80126f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126f6:	db05      	blt.n	8012704 <ip_reass_free_complete_datagram+0xe0>
 80126f8:	4b15      	ldr	r3, [pc, #84]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 80126fa:	22cc      	movs	r2, #204	; 0xcc
 80126fc:	4918      	ldr	r1, [pc, #96]	; (8012760 <ip_reass_free_complete_datagram+0x13c>)
 80126fe:	4816      	ldr	r0, [pc, #88]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 8012700:	f000 ff44 	bl	801358c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012704:	8bfa      	ldrh	r2, [r7, #30]
 8012706:	8a7b      	ldrh	r3, [r7, #18]
 8012708:	4413      	add	r3, r2
 801270a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	f7f5 f855 	bl	80077bc <pbuf_free>
  while (p != NULL) {
 8012712:	69bb      	ldr	r3, [r7, #24]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1dc      	bne.n	80126d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012718:	6839      	ldr	r1, [r7, #0]
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f000 f8ca 	bl	80128b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012720:	4b10      	ldr	r3, [pc, #64]	; (8012764 <ip_reass_free_complete_datagram+0x140>)
 8012722:	881b      	ldrh	r3, [r3, #0]
 8012724:	8bfa      	ldrh	r2, [r7, #30]
 8012726:	429a      	cmp	r2, r3
 8012728:	d905      	bls.n	8012736 <ip_reass_free_complete_datagram+0x112>
 801272a:	4b09      	ldr	r3, [pc, #36]	; (8012750 <ip_reass_free_complete_datagram+0x12c>)
 801272c:	22d2      	movs	r2, #210	; 0xd2
 801272e:	490e      	ldr	r1, [pc, #56]	; (8012768 <ip_reass_free_complete_datagram+0x144>)
 8012730:	4809      	ldr	r0, [pc, #36]	; (8012758 <ip_reass_free_complete_datagram+0x134>)
 8012732:	f000 ff2b 	bl	801358c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012736:	4b0b      	ldr	r3, [pc, #44]	; (8012764 <ip_reass_free_complete_datagram+0x140>)
 8012738:	881a      	ldrh	r2, [r3, #0]
 801273a:	8bfb      	ldrh	r3, [r7, #30]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	b29a      	uxth	r2, r3
 8012740:	4b08      	ldr	r3, [pc, #32]	; (8012764 <ip_reass_free_complete_datagram+0x140>)
 8012742:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012744:	8bfb      	ldrh	r3, [r7, #30]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3720      	adds	r7, #32
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	08017604 	.word	0x08017604
 8012754:	08017640 	.word	0x08017640
 8012758:	0801764c 	.word	0x0801764c
 801275c:	08017674 	.word	0x08017674
 8012760:	08017688 	.word	0x08017688
 8012764:	200006e8 	.word	0x200006e8
 8012768:	080176a8 	.word	0x080176a8

0801276c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b08a      	sub	sp, #40	; 0x28
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012776:	2300      	movs	r3, #0
 8012778:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801277a:	2300      	movs	r3, #0
 801277c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801277e:	2300      	movs	r3, #0
 8012780:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012782:	2300      	movs	r3, #0
 8012784:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012786:	2300      	movs	r3, #0
 8012788:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801278a:	4b28      	ldr	r3, [pc, #160]	; (801282c <ip_reass_remove_oldest_datagram+0xc0>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012790:	e030      	b.n	80127f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012794:	695a      	ldr	r2, [r3, #20]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	429a      	cmp	r2, r3
 801279c:	d10c      	bne.n	80127b8 <ip_reass_remove_oldest_datagram+0x4c>
 801279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127a0:	699a      	ldr	r2, [r3, #24]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	691b      	ldr	r3, [r3, #16]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d106      	bne.n	80127b8 <ip_reass_remove_oldest_datagram+0x4c>
 80127aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ac:	899a      	ldrh	r2, [r3, #12]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	889b      	ldrh	r3, [r3, #4]
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d014      	beq.n	80127e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	3301      	adds	r3, #1
 80127bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80127be:	6a3b      	ldr	r3, [r7, #32]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d104      	bne.n	80127ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80127c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	61bb      	str	r3, [r7, #24]
 80127cc:	e009      	b.n	80127e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80127ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127d0:	7fda      	ldrb	r2, [r3, #31]
 80127d2:	6a3b      	ldr	r3, [r7, #32]
 80127d4:	7fdb      	ldrb	r3, [r3, #31]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d803      	bhi.n	80127e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80127da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80127e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d001      	beq.n	80127ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80127ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80127ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d1cb      	bne.n	8012792 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80127fa:	6a3b      	ldr	r3, [r7, #32]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d008      	beq.n	8012812 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012800:	69b9      	ldr	r1, [r7, #24]
 8012802:	6a38      	ldr	r0, [r7, #32]
 8012804:	f7ff ff0e 	bl	8012624 <ip_reass_free_complete_datagram>
 8012808:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801280a:	697a      	ldr	r2, [r7, #20]
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	4413      	add	r3, r2
 8012810:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012812:	697a      	ldr	r2, [r7, #20]
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	429a      	cmp	r2, r3
 8012818:	da02      	bge.n	8012820 <ip_reass_remove_oldest_datagram+0xb4>
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	2b01      	cmp	r3, #1
 801281e:	dcac      	bgt.n	801277a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012820:	697b      	ldr	r3, [r7, #20]
}
 8012822:	4618      	mov	r0, r3
 8012824:	3728      	adds	r7, #40	; 0x28
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	200006e4 	.word	0x200006e4

08012830 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801283a:	2004      	movs	r0, #4
 801283c:	f7f4 f9a6 	bl	8006b8c <memp_malloc>
 8012840:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d116      	bne.n	8012876 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012848:	6839      	ldr	r1, [r7, #0]
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f7ff ff8e 	bl	801276c <ip_reass_remove_oldest_datagram>
 8012850:	4602      	mov	r2, r0
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	4293      	cmp	r3, r2
 8012856:	dc03      	bgt.n	8012860 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012858:	2004      	movs	r0, #4
 801285a:	f7f4 f997 	bl	8006b8c <memp_malloc>
 801285e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d107      	bne.n	8012876 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8012866:	4b11      	ldr	r3, [pc, #68]	; (80128ac <ip_reass_enqueue_new_datagram+0x7c>)
 8012868:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801286a:	3301      	adds	r3, #1
 801286c:	b29a      	uxth	r2, r3
 801286e:	4b0f      	ldr	r3, [pc, #60]	; (80128ac <ip_reass_enqueue_new_datagram+0x7c>)
 8012870:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012872:	2300      	movs	r3, #0
 8012874:	e016      	b.n	80128a4 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012876:	2220      	movs	r2, #32
 8012878:	2100      	movs	r1, #0
 801287a:	68f8      	ldr	r0, [r7, #12]
 801287c:	f000 fe7e 	bl	801357c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	220f      	movs	r2, #15
 8012884:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012886:	4b0a      	ldr	r3, [pc, #40]	; (80128b0 <ip_reass_enqueue_new_datagram+0x80>)
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801288e:	4a08      	ldr	r2, [pc, #32]	; (80128b0 <ip_reass_enqueue_new_datagram+0x80>)
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	3308      	adds	r3, #8
 8012898:	2214      	movs	r2, #20
 801289a:	6879      	ldr	r1, [r7, #4]
 801289c:	4618      	mov	r0, r3
 801289e:	f000 fe45 	bl	801352c <memcpy>
  return ipr;
 80128a2:	68fb      	ldr	r3, [r7, #12]
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	20007a48 	.word	0x20007a48
 80128b0:	200006e4 	.word	0x200006e4

080128b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80128be:	4b10      	ldr	r3, [pc, #64]	; (8012900 <ip_reass_dequeue_datagram+0x4c>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d104      	bne.n	80128d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	4a0c      	ldr	r2, [pc, #48]	; (8012900 <ip_reass_dequeue_datagram+0x4c>)
 80128ce:	6013      	str	r3, [r2, #0]
 80128d0:	e00d      	b.n	80128ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d106      	bne.n	80128e6 <ip_reass_dequeue_datagram+0x32>
 80128d8:	4b0a      	ldr	r3, [pc, #40]	; (8012904 <ip_reass_dequeue_datagram+0x50>)
 80128da:	f240 1245 	movw	r2, #325	; 0x145
 80128de:	490a      	ldr	r1, [pc, #40]	; (8012908 <ip_reass_dequeue_datagram+0x54>)
 80128e0:	480a      	ldr	r0, [pc, #40]	; (801290c <ip_reass_dequeue_datagram+0x58>)
 80128e2:	f000 fe53 	bl	801358c <iprintf>
    prev->next = ipr->next;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80128ee:	6879      	ldr	r1, [r7, #4]
 80128f0:	2004      	movs	r0, #4
 80128f2:	f7f4 f98d 	bl	8006c10 <memp_free>
}
 80128f6:	bf00      	nop
 80128f8:	3708      	adds	r7, #8
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	200006e4 	.word	0x200006e4
 8012904:	08017604 	.word	0x08017604
 8012908:	080176cc 	.word	0x080176cc
 801290c:	0801764c 	.word	0x0801764c

08012910 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b08c      	sub	sp, #48	; 0x30
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801291c:	2300      	movs	r3, #0
 801291e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012920:	2301      	movs	r3, #1
 8012922:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801292a:	69fb      	ldr	r3, [r7, #28]
 801292c:	885b      	ldrh	r3, [r3, #2]
 801292e:	b29b      	uxth	r3, r3
 8012930:	4618      	mov	r0, r3
 8012932:	f7f3 fa79 	bl	8005e28 <lwip_htons>
 8012936:	4603      	mov	r3, r0
 8012938:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	f003 030f 	and.w	r3, r3, #15
 8012942:	b2db      	uxtb	r3, r3
 8012944:	009b      	lsls	r3, r3, #2
 8012946:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012948:	7e7b      	ldrb	r3, [r7, #25]
 801294a:	b29b      	uxth	r3, r3
 801294c:	8b7a      	ldrh	r2, [r7, #26]
 801294e:	429a      	cmp	r2, r3
 8012950:	d202      	bcs.n	8012958 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012952:	f04f 33ff 	mov.w	r3, #4294967295
 8012956:	e135      	b.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012958:	7e7b      	ldrb	r3, [r7, #25]
 801295a:	b29b      	uxth	r3, r3
 801295c:	8b7a      	ldrh	r2, [r7, #26]
 801295e:	1ad3      	subs	r3, r2, r3
 8012960:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	88db      	ldrh	r3, [r3, #6]
 8012966:	b29b      	uxth	r3, r3
 8012968:	4618      	mov	r0, r3
 801296a:	f7f3 fa5d 	bl	8005e28 <lwip_htons>
 801296e:	4603      	mov	r3, r0
 8012970:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012974:	b29b      	uxth	r3, r3
 8012976:	00db      	lsls	r3, r3, #3
 8012978:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012982:	2200      	movs	r2, #0
 8012984:	701a      	strb	r2, [r3, #0]
 8012986:	2200      	movs	r2, #0
 8012988:	705a      	strb	r2, [r3, #1]
 801298a:	2200      	movs	r2, #0
 801298c:	709a      	strb	r2, [r3, #2]
 801298e:	2200      	movs	r2, #0
 8012990:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012994:	8afa      	ldrh	r2, [r7, #22]
 8012996:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012998:	8afa      	ldrh	r2, [r7, #22]
 801299a:	8b7b      	ldrh	r3, [r7, #26]
 801299c:	4413      	add	r3, r2
 801299e:	b29a      	uxth	r2, r3
 80129a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80129a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a6:	88db      	ldrh	r3, [r3, #6]
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	8afa      	ldrh	r2, [r7, #22]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d902      	bls.n	80129b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80129b0:	f04f 33ff 	mov.w	r3, #4294967295
 80129b4:	e106      	b.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	627b      	str	r3, [r7, #36]	; 0x24
 80129bc:	e068      	b.n	8012a90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80129be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80129c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c6:	889b      	ldrh	r3, [r3, #4]
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	889b      	ldrh	r3, [r3, #4]
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d235      	bcs.n	8012a40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80129d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80129da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d020      	beq.n	8012a22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80129e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e2:	889b      	ldrh	r3, [r3, #4]
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e8:	88db      	ldrh	r3, [r3, #6]
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d307      	bcc.n	8012a00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f2:	88db      	ldrh	r3, [r3, #6]
 80129f4:	b29a      	uxth	r2, r3
 80129f6:	693b      	ldr	r3, [r7, #16]
 80129f8:	889b      	ldrh	r3, [r3, #4]
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d902      	bls.n	8012a06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a00:	f04f 33ff 	mov.w	r3, #4294967295
 8012a04:	e0de      	b.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a08:	68ba      	ldr	r2, [r7, #8]
 8012a0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0e:	88db      	ldrh	r3, [r3, #6]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a14:	889b      	ldrh	r3, [r3, #4]
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d03d      	beq.n	8012a98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012a20:	e03a      	b.n	8012a98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a24:	88db      	ldrh	r3, [r3, #6]
 8012a26:	b29a      	uxth	r2, r3
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	889b      	ldrh	r3, [r3, #4]
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d902      	bls.n	8012a38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a32:	f04f 33ff 	mov.w	r3, #4294967295
 8012a36:	e0c5      	b.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	68ba      	ldr	r2, [r7, #8]
 8012a3c:	605a      	str	r2, [r3, #4]
      break;
 8012a3e:	e02b      	b.n	8012a98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a42:	889b      	ldrh	r3, [r3, #4]
 8012a44:	b29a      	uxth	r2, r3
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	889b      	ldrh	r3, [r3, #4]
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d102      	bne.n	8012a56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a50:	f04f 33ff 	mov.w	r3, #4294967295
 8012a54:	e0b6      	b.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a58:	889b      	ldrh	r3, [r3, #4]
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	88db      	ldrh	r3, [r3, #6]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d202      	bcs.n	8012a6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a66:	f04f 33ff 	mov.w	r3, #4294967295
 8012a6a:	e0ab      	b.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d009      	beq.n	8012a86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a74:	88db      	ldrh	r3, [r3, #6]
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	889b      	ldrh	r3, [r3, #4]
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d001      	beq.n	8012a86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a82:	2300      	movs	r3, #0
 8012a84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012a86:	693b      	ldr	r3, [r7, #16]
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d193      	bne.n	80129be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012a96:	e000      	b.n	8012a9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012a98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d12d      	bne.n	8012afc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d01c      	beq.n	8012ae0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa8:	88db      	ldrh	r3, [r3, #6]
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aae:	889b      	ldrh	r3, [r3, #4]
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d906      	bls.n	8012ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012ab6:	4b45      	ldr	r3, [pc, #276]	; (8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ab8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012abc:	4944      	ldr	r1, [pc, #272]	; (8012bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012abe:	4845      	ldr	r0, [pc, #276]	; (8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012ac0:	f000 fd64 	bl	801358c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ac6:	68ba      	ldr	r2, [r7, #8]
 8012ac8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012acc:	88db      	ldrh	r3, [r3, #6]
 8012ace:	b29a      	uxth	r2, r3
 8012ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad2:	889b      	ldrh	r3, [r3, #4]
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d010      	beq.n	8012afc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012ada:	2300      	movs	r3, #0
 8012adc:	623b      	str	r3, [r7, #32]
 8012ade:	e00d      	b.n	8012afc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	685b      	ldr	r3, [r3, #4]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d006      	beq.n	8012af6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012ae8:	4b38      	ldr	r3, [pc, #224]	; (8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012aea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8012aee:	493a      	ldr	r1, [pc, #232]	; (8012bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012af0:	4838      	ldr	r0, [pc, #224]	; (8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012af2:	f000 fd4b 	bl	801358c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	68ba      	ldr	r2, [r7, #8]
 8012afa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d105      	bne.n	8012b0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	7f9b      	ldrb	r3, [r3, #30]
 8012b06:	f003 0301 	and.w	r3, r3, #1
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d059      	beq.n	8012bc2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012b0e:	6a3b      	ldr	r3, [r7, #32]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d04f      	beq.n	8012bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d006      	beq.n	8012b2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	889b      	ldrh	r3, [r3, #4]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d002      	beq.n	8012b30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	623b      	str	r3, [r7, #32]
 8012b2e:	e041      	b.n	8012bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b32:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b3a:	e012      	b.n	8012b62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b44:	88db      	ldrh	r3, [r3, #6]
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	889b      	ldrh	r3, [r3, #4]
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d002      	beq.n	8012b58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012b52:	2300      	movs	r3, #0
 8012b54:	623b      	str	r3, [r7, #32]
            break;
 8012b56:	e007      	b.n	8012b68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d1e9      	bne.n	8012b3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012b68:	6a3b      	ldr	r3, [r7, #32]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d022      	beq.n	8012bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d106      	bne.n	8012b84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012b76:	4b15      	ldr	r3, [pc, #84]	; (8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b78:	f240 12df 	movw	r2, #479	; 0x1df
 8012b7c:	4917      	ldr	r1, [pc, #92]	; (8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012b7e:	4815      	ldr	r0, [pc, #84]	; (8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b80:	f000 fd04 	bl	801358c <iprintf>
          LWIP_ASSERT("sanity check",
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d106      	bne.n	8012b9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012b90:	4b0e      	ldr	r3, [pc, #56]	; (8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012b96:	4911      	ldr	r1, [pc, #68]	; (8012bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012b98:	480e      	ldr	r0, [pc, #56]	; (8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b9a:	f000 fcf7 	bl	801358c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d006      	beq.n	8012bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012ba6:	4b09      	ldr	r3, [pc, #36]	; (8012bcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012ba8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012bac:	490c      	ldr	r1, [pc, #48]	; (8012be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012bae:	4809      	ldr	r0, [pc, #36]	; (8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bb0:	f000 fcec 	bl	801358c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012bb4:	6a3b      	ldr	r3, [r7, #32]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	bf14      	ite	ne
 8012bba:	2301      	movne	r3, #1
 8012bbc:	2300      	moveq	r3, #0
 8012bbe:	b2db      	uxtb	r3, r3
 8012bc0:	e000      	b.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012bc2:	2300      	movs	r3, #0
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3730      	adds	r7, #48	; 0x30
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}
 8012bcc:	08017604 	.word	0x08017604
 8012bd0:	080176e8 	.word	0x080176e8
 8012bd4:	0801764c 	.word	0x0801764c
 8012bd8:	08017708 	.word	0x08017708
 8012bdc:	08017740 	.word	0x08017740
 8012be0:	08017750 	.word	0x08017750

08012be4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b08e      	sub	sp, #56	; 0x38
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 8012bec:	4ba3      	ldr	r3, [pc, #652]	; (8012e7c <ip4_reass+0x298>)
 8012bee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	b29a      	uxth	r2, r3
 8012bf4:	4ba1      	ldr	r3, [pc, #644]	; (8012e7c <ip4_reass+0x298>)
 8012bf6:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	f003 030f 	and.w	r3, r3, #15
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	009b      	lsls	r3, r3, #2
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	2b14      	cmp	r3, #20
 8012c0e:	d008      	beq.n	8012c22 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8012c10:	4b9a      	ldr	r3, [pc, #616]	; (8012e7c <ip4_reass+0x298>)
 8012c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012c16:	3301      	adds	r3, #1
 8012c18:	b29a      	uxth	r2, r3
 8012c1a:	4b98      	ldr	r3, [pc, #608]	; (8012e7c <ip4_reass+0x298>)
 8012c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 8012c20:	e184      	b.n	8012f2c <ip4_reass+0x348>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c24:	88db      	ldrh	r3, [r3, #6]
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7f3 f8fd 	bl	8005e28 <lwip_htons>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	00db      	lsls	r3, r3, #3
 8012c38:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3c:	885b      	ldrh	r3, [r3, #2]
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7f3 f8f1 	bl	8005e28 <lwip_htons>
 8012c46:	4603      	mov	r3, r0
 8012c48:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	f003 030f 	and.w	r3, r3, #15
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	009b      	lsls	r3, r3, #2
 8012c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012c5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c62:	429a      	cmp	r2, r3
 8012c64:	f0c0 815f 	bcc.w	8012f26 <ip4_reass+0x342>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f7f4 fe29 	bl	80078cc <pbuf_clen>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012c7e:	4b80      	ldr	r3, [pc, #512]	; (8012e80 <ip4_reass+0x29c>)
 8012c80:	881b      	ldrh	r3, [r3, #0]
 8012c82:	461a      	mov	r2, r3
 8012c84:	8c3b      	ldrh	r3, [r7, #32]
 8012c86:	4413      	add	r3, r2
 8012c88:	2b0a      	cmp	r3, #10
 8012c8a:	dd15      	ble.n	8012cb8 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012c8c:	8c3b      	ldrh	r3, [r7, #32]
 8012c8e:	4619      	mov	r1, r3
 8012c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c92:	f7ff fd6b 	bl	801276c <ip_reass_remove_oldest_datagram>
 8012c96:	4603      	mov	r3, r0
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d006      	beq.n	8012caa <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012c9c:	4b78      	ldr	r3, [pc, #480]	; (8012e80 <ip4_reass+0x29c>)
 8012c9e:	881b      	ldrh	r3, [r3, #0]
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	8c3b      	ldrh	r3, [r7, #32]
 8012ca4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012ca6:	2b0a      	cmp	r3, #10
 8012ca8:	dd06      	ble.n	8012cb8 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 8012caa:	4b74      	ldr	r3, [pc, #464]	; (8012e7c <ip4_reass+0x298>)
 8012cac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8012cae:	3301      	adds	r3, #1
 8012cb0:	b29a      	uxth	r2, r3
 8012cb2:	4b72      	ldr	r3, [pc, #456]	; (8012e7c <ip4_reass+0x298>)
 8012cb4:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 8012cb6:	e139      	b.n	8012f2c <ip4_reass+0x348>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012cb8:	4b72      	ldr	r3, [pc, #456]	; (8012e84 <ip4_reass+0x2a0>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8012cbe:	e01e      	b.n	8012cfe <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc2:	695a      	ldr	r2, [r3, #20]
 8012cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d115      	bne.n	8012cf8 <ip4_reass+0x114>
 8012ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cce:	699a      	ldr	r2, [r3, #24]
 8012cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd2:	691b      	ldr	r3, [r3, #16]
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d10f      	bne.n	8012cf8 <ip4_reass+0x114>
 8012cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cda:	899a      	ldrh	r2, [r3, #12]
 8012cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cde:	889b      	ldrh	r3, [r3, #4]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	429a      	cmp	r2, r3
 8012ce4:	d108      	bne.n	8012cf8 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8012ce6:	4b65      	ldr	r3, [pc, #404]	; (8012e7c <ip4_reass+0x298>)
 8012ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012cec:	3301      	adds	r3, #1
 8012cee:	b29a      	uxth	r2, r3
 8012cf0:	4b62      	ldr	r3, [pc, #392]	; (8012e7c <ip4_reass+0x298>)
 8012cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 8012cf6:	e005      	b.n	8012d04 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8012cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d1dd      	bne.n	8012cc0 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8012d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d109      	bne.n	8012d1e <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012d0a:	8c3b      	ldrh	r3, [r7, #32]
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d10:	f7ff fd8e 	bl	8012830 <ip_reass_enqueue_new_datagram>
 8012d14:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d11c      	bne.n	8012d56 <ip4_reass+0x172>
      goto nullreturn;
 8012d1c:	e106      	b.n	8012f2c <ip4_reass+0x348>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d20:	88db      	ldrh	r3, [r3, #6]
 8012d22:	b29b      	uxth	r3, r3
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7f3 f87f 	bl	8005e28 <lwip_htons>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d110      	bne.n	8012d56 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d36:	89db      	ldrh	r3, [r3, #14]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7f3 f875 	bl	8005e28 <lwip_htons>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d006      	beq.n	8012d56 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4a:	3308      	adds	r3, #8
 8012d4c:	2214      	movs	r2, #20
 8012d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d50:	4618      	mov	r0, r3
 8012d52:	f000 fbeb 	bl	801352c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d58:	88db      	ldrh	r3, [r3, #6]
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	f003 0320 	and.w	r3, r3, #32
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	bf0c      	ite	eq
 8012d64:	2301      	moveq	r3, #1
 8012d66:	2300      	movne	r3, #0
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012d6c:	69fb      	ldr	r3, [r7, #28]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d00e      	beq.n	8012d90 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8012d72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d76:	4413      	add	r3, r2
 8012d78:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012d7a:	8b7a      	ldrh	r2, [r7, #26]
 8012d7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	f0c0 80af 	bcc.w	8012ee2 <ip4_reass+0x2fe>
 8012d84:	8b7b      	ldrh	r3, [r7, #26]
 8012d86:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	f200 80a9 	bhi.w	8012ee2 <ip4_reass+0x2fe>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012d90:	69fa      	ldr	r2, [r7, #28]
 8012d92:	6879      	ldr	r1, [r7, #4]
 8012d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d96:	f7ff fdbb 	bl	8012910 <ip_reass_chain_frag_into_datagram_and_validate>
 8012d9a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012da2:	f000 80a0 	beq.w	8012ee6 <ip4_reass+0x302>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012da6:	4b36      	ldr	r3, [pc, #216]	; (8012e80 <ip4_reass+0x29c>)
 8012da8:	881a      	ldrh	r2, [r3, #0]
 8012daa:	8c3b      	ldrh	r3, [r7, #32]
 8012dac:	4413      	add	r3, r2
 8012dae:	b29a      	uxth	r2, r3
 8012db0:	4b33      	ldr	r3, [pc, #204]	; (8012e80 <ip4_reass+0x29c>)
 8012db2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012db4:	69fb      	ldr	r3, [r7, #28]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d00d      	beq.n	8012dd6 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 8012dba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dbe:	4413      	add	r3, r2
 8012dc0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc4:	8a7a      	ldrh	r2, [r7, #18]
 8012dc6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dca:	7f9b      	ldrb	r3, [r3, #30]
 8012dcc:	f043 0301 	orr.w	r3, r3, #1
 8012dd0:	b2da      	uxtb	r2, r3
 8012dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	f040 8080 	bne.w	8012ede <ip4_reass+0x2fa>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de0:	8b9b      	ldrh	r3, [r3, #28]
 8012de2:	3314      	adds	r3, #20
 8012de4:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfa:	3308      	adds	r3, #8
 8012dfc:	2214      	movs	r2, #20
 8012dfe:	4619      	mov	r1, r3
 8012e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e02:	f000 fb93 	bl	801352c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012e06:	8a3b      	ldrh	r3, [r7, #16]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7f3 f80d 	bl	8005e28 <lwip_htons>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	461a      	mov	r2, r3
 8012e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e14:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e18:	2200      	movs	r2, #0
 8012e1a:	719a      	strb	r2, [r3, #6]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e22:	2200      	movs	r2, #0
 8012e24:	729a      	strb	r2, [r3, #10]
 8012e26:	2200      	movs	r2, #0
 8012e28:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8012e2a:	2114      	movs	r1, #20
 8012e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e2e:	f7f3 f9ad 	bl	800618c <inet_chksum>
 8012e32:	4603      	mov	r3, r0
 8012e34:	461a      	mov	r2, r3
 8012e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e38:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012e40:	e00d      	b.n	8012e5e <ip4_reass+0x27a>
      iprh = (struct ip_reass_helper *)r->payload;
 8012e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012e48:	2114      	movs	r1, #20
 8012e4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e4c:	f7f4 fc30 	bl	80076b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012e50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f7f4 fd74 	bl	8007940 <pbuf_cat>
      r = iprh->next_pbuf;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d1ee      	bne.n	8012e42 <ip4_reass+0x25e>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012e64:	4b07      	ldr	r3, [pc, #28]	; (8012e84 <ip4_reass+0x2a0>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d102      	bne.n	8012e74 <ip4_reass+0x290>
      ipr_prev = NULL;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e72:	e016      	b.n	8012ea2 <ip4_reass+0x2be>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e74:	4b03      	ldr	r3, [pc, #12]	; (8012e84 <ip4_reass+0x2a0>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e7a:	e00d      	b.n	8012e98 <ip4_reass+0x2b4>
 8012e7c:	20007a48 	.word	0x20007a48
 8012e80:	200006e8 	.word	0x200006e8
 8012e84:	200006e4 	.word	0x200006e4
        if (ipr_prev->next == ipr) {
 8012e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d006      	beq.n	8012ea0 <ip4_reass+0x2bc>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d1f4      	bne.n	8012e88 <ip4_reass+0x2a4>
 8012e9e:	e000      	b.n	8012ea2 <ip4_reass+0x2be>
          break;
 8012ea0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ea6:	f7ff fd05 	bl	80128b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7f4 fd0e 	bl	80078cc <pbuf_clen>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012eb4:	4b24      	ldr	r3, [pc, #144]	; (8012f48 <ip4_reass+0x364>)
 8012eb6:	881b      	ldrh	r3, [r3, #0]
 8012eb8:	8c3a      	ldrh	r2, [r7, #32]
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d906      	bls.n	8012ecc <ip4_reass+0x2e8>
 8012ebe:	4b23      	ldr	r3, [pc, #140]	; (8012f4c <ip4_reass+0x368>)
 8012ec0:	f240 229b 	movw	r2, #667	; 0x29b
 8012ec4:	4922      	ldr	r1, [pc, #136]	; (8012f50 <ip4_reass+0x36c>)
 8012ec6:	4823      	ldr	r0, [pc, #140]	; (8012f54 <ip4_reass+0x370>)
 8012ec8:	f000 fb60 	bl	801358c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012ecc:	4b1e      	ldr	r3, [pc, #120]	; (8012f48 <ip4_reass+0x364>)
 8012ece:	881a      	ldrh	r2, [r3, #0]
 8012ed0:	8c3b      	ldrh	r3, [r7, #32]
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	b29a      	uxth	r2, r3
 8012ed6:	4b1c      	ldr	r3, [pc, #112]	; (8012f48 <ip4_reass+0x364>)
 8012ed8:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	e030      	b.n	8012f40 <ip4_reass+0x35c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	e02e      	b.n	8012f40 <ip4_reass+0x35c>
      goto nullreturn_ipr;
 8012ee2:	bf00      	nop
 8012ee4:	e000      	b.n	8012ee8 <ip4_reass+0x304>
    goto nullreturn_ipr;
 8012ee6:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d106      	bne.n	8012efc <ip4_reass+0x318>
 8012eee:	4b17      	ldr	r3, [pc, #92]	; (8012f4c <ip4_reass+0x368>)
 8012ef0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012ef4:	4918      	ldr	r1, [pc, #96]	; (8012f58 <ip4_reass+0x374>)
 8012ef6:	4817      	ldr	r0, [pc, #92]	; (8012f54 <ip4_reass+0x370>)
 8012ef8:	f000 fb48 	bl	801358c <iprintf>
  if (ipr->p == NULL) {
 8012efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efe:	685b      	ldr	r3, [r3, #4]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d112      	bne.n	8012f2a <ip4_reass+0x346>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012f04:	4b15      	ldr	r3, [pc, #84]	; (8012f5c <ip4_reass+0x378>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d006      	beq.n	8012f1c <ip4_reass+0x338>
 8012f0e:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <ip4_reass+0x368>)
 8012f10:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012f14:	4912      	ldr	r1, [pc, #72]	; (8012f60 <ip4_reass+0x37c>)
 8012f16:	480f      	ldr	r0, [pc, #60]	; (8012f54 <ip4_reass+0x370>)
 8012f18:	f000 fb38 	bl	801358c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012f1c:	2100      	movs	r1, #0
 8012f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f20:	f7ff fcc8 	bl	80128b4 <ip_reass_dequeue_datagram>
 8012f24:	e002      	b.n	8012f2c <ip4_reass+0x348>
    goto nullreturn;
 8012f26:	bf00      	nop
 8012f28:	e000      	b.n	8012f2c <ip4_reass+0x348>
  }

nullreturn:
 8012f2a:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 8012f2c:	4b0d      	ldr	r3, [pc, #52]	; (8012f64 <ip4_reass+0x380>)
 8012f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f30:	3301      	adds	r3, #1
 8012f32:	b29a      	uxth	r2, r3
 8012f34:	4b0b      	ldr	r3, [pc, #44]	; (8012f64 <ip4_reass+0x380>)
 8012f36:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f7f4 fc3f 	bl	80077bc <pbuf_free>
  return NULL;
 8012f3e:	2300      	movs	r3, #0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3738      	adds	r7, #56	; 0x38
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	200006e8 	.word	0x200006e8
 8012f4c:	08017604 	.word	0x08017604
 8012f50:	08017774 	.word	0x08017774
 8012f54:	0801764c 	.word	0x0801764c
 8012f58:	08017790 	.word	0x08017790
 8012f5c:	200006e4 	.word	0x200006e4
 8012f60:	0801779c 	.word	0x0801779c
 8012f64:	20007a48 	.word	0x20007a48

08012f68 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012f6c:	2005      	movs	r0, #5
 8012f6e:	f7f3 fe0d 	bl	8006b8c <memp_malloc>
 8012f72:	4603      	mov	r3, r0
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d106      	bne.n	8012f94 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012f86:	4b07      	ldr	r3, [pc, #28]	; (8012fa4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012f88:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012f8c:	4906      	ldr	r1, [pc, #24]	; (8012fa8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012f8e:	4807      	ldr	r0, [pc, #28]	; (8012fac <ip_frag_free_pbuf_custom_ref+0x34>)
 8012f90:	f000 fafc 	bl	801358c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012f94:	6879      	ldr	r1, [r7, #4]
 8012f96:	2005      	movs	r0, #5
 8012f98:	f7f3 fe3a 	bl	8006c10 <memp_free>
}
 8012f9c:	bf00      	nop
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	08017604 	.word	0x08017604
 8012fa8:	080177bc 	.word	0x080177bc
 8012fac:	0801764c 	.word	0x0801764c

08012fb0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d106      	bne.n	8012fd0 <ipfrag_free_pbuf_custom+0x20>
 8012fc2:	4b11      	ldr	r3, [pc, #68]	; (8013008 <ipfrag_free_pbuf_custom+0x58>)
 8012fc4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012fc8:	4910      	ldr	r1, [pc, #64]	; (801300c <ipfrag_free_pbuf_custom+0x5c>)
 8012fca:	4811      	ldr	r0, [pc, #68]	; (8013010 <ipfrag_free_pbuf_custom+0x60>)
 8012fcc:	f000 fade 	bl	801358c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012fd0:	68fa      	ldr	r2, [r7, #12]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d006      	beq.n	8012fe6 <ipfrag_free_pbuf_custom+0x36>
 8012fd8:	4b0b      	ldr	r3, [pc, #44]	; (8013008 <ipfrag_free_pbuf_custom+0x58>)
 8012fda:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012fde:	490d      	ldr	r1, [pc, #52]	; (8013014 <ipfrag_free_pbuf_custom+0x64>)
 8012fe0:	480b      	ldr	r0, [pc, #44]	; (8013010 <ipfrag_free_pbuf_custom+0x60>)
 8012fe2:	f000 fad3 	bl	801358c <iprintf>
  if (pcr->original != NULL) {
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	695b      	ldr	r3, [r3, #20]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d004      	beq.n	8012ff8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	695b      	ldr	r3, [r3, #20]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7f4 fbe2 	bl	80077bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012ff8:	68f8      	ldr	r0, [r7, #12]
 8012ffa:	f7ff ffbd 	bl	8012f78 <ip_frag_free_pbuf_custom_ref>
}
 8012ffe:	bf00      	nop
 8013000:	3710      	adds	r7, #16
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}
 8013006:	bf00      	nop
 8013008:	08017604 	.word	0x08017604
 801300c:	080177c8 	.word	0x080177c8
 8013010:	0801764c 	.word	0x0801764c
 8013014:	080177d4 	.word	0x080177d4

08013018 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b094      	sub	sp, #80	; 0x50
 801301c:	af02      	add	r7, sp, #8
 801301e:	60f8      	str	r0, [r7, #12]
 8013020:	60b9      	str	r1, [r7, #8]
 8013022:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013024:	2300      	movs	r3, #0
 8013026:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801302e:	3b14      	subs	r3, #20
 8013030:	2b00      	cmp	r3, #0
 8013032:	da00      	bge.n	8013036 <ip4_frag+0x1e>
 8013034:	3307      	adds	r3, #7
 8013036:	10db      	asrs	r3, r3, #3
 8013038:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801303a:	2314      	movs	r3, #20
 801303c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	685b      	ldr	r3, [r3, #4]
 8013042:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013046:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	f003 030f 	and.w	r3, r3, #15
 8013050:	b2db      	uxtb	r3, r3
 8013052:	009b      	lsls	r3, r3, #2
 8013054:	b2db      	uxtb	r3, r3
 8013056:	2b14      	cmp	r3, #20
 8013058:	d002      	beq.n	8013060 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801305a:	f06f 0305 	mvn.w	r3, #5
 801305e:	e11e      	b.n	801329e <ip4_frag+0x286>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	895b      	ldrh	r3, [r3, #10]
 8013064:	2b13      	cmp	r3, #19
 8013066:	d809      	bhi.n	801307c <ip4_frag+0x64>
 8013068:	4b8f      	ldr	r3, [pc, #572]	; (80132a8 <ip4_frag+0x290>)
 801306a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801306e:	498f      	ldr	r1, [pc, #572]	; (80132ac <ip4_frag+0x294>)
 8013070:	488f      	ldr	r0, [pc, #572]	; (80132b0 <ip4_frag+0x298>)
 8013072:	f000 fa8b 	bl	801358c <iprintf>
 8013076:	f06f 0305 	mvn.w	r3, #5
 801307a:	e110      	b.n	801329e <ip4_frag+0x286>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801307e:	88db      	ldrh	r3, [r3, #6]
 8013080:	b29b      	uxth	r3, r3
 8013082:	4618      	mov	r0, r3
 8013084:	f7f2 fed0 	bl	8005e28 <lwip_htons>
 8013088:	4603      	mov	r3, r0
 801308a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801308c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801308e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013092:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013096:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801309c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	891b      	ldrh	r3, [r3, #8]
 80130a2:	3b14      	subs	r3, #20
 80130a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80130a8:	e0ef      	b.n	801328a <ip4_frag+0x272>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80130aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80130ac:	00db      	lsls	r3, r3, #3
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130b4:	4293      	cmp	r3, r2
 80130b6:	bf28      	it	cs
 80130b8:	4613      	movcs	r3, r2
 80130ba:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80130bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130c0:	2114      	movs	r1, #20
 80130c2:	200e      	movs	r0, #14
 80130c4:	f7f4 f8da 	bl	800727c <pbuf_alloc>
 80130c8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80130ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f000 80e3 	beq.w	8013298 <ip4_frag+0x280>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80130d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d4:	895b      	ldrh	r3, [r3, #10]
 80130d6:	2b13      	cmp	r3, #19
 80130d8:	d806      	bhi.n	80130e8 <ip4_frag+0xd0>
 80130da:	4b73      	ldr	r3, [pc, #460]	; (80132a8 <ip4_frag+0x290>)
 80130dc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80130e0:	4974      	ldr	r1, [pc, #464]	; (80132b4 <ip4_frag+0x29c>)
 80130e2:	4873      	ldr	r0, [pc, #460]	; (80132b0 <ip4_frag+0x298>)
 80130e4:	f000 fa52 	bl	801358c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	2214      	movs	r2, #20
 80130ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80130f0:	4618      	mov	r0, r3
 80130f2:	f000 fa1b 	bl	801352c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80130f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80130fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80130fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013102:	e064      	b.n	80131ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	895a      	ldrh	r2, [r3, #10]
 8013108:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801310a:	1ad3      	subs	r3, r2, r3
 801310c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	895b      	ldrh	r3, [r3, #10]
 8013112:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013114:	429a      	cmp	r2, r3
 8013116:	d906      	bls.n	8013126 <ip4_frag+0x10e>
 8013118:	4b63      	ldr	r3, [pc, #396]	; (80132a8 <ip4_frag+0x290>)
 801311a:	f240 322d 	movw	r2, #813	; 0x32d
 801311e:	4966      	ldr	r1, [pc, #408]	; (80132b8 <ip4_frag+0x2a0>)
 8013120:	4863      	ldr	r0, [pc, #396]	; (80132b0 <ip4_frag+0x298>)
 8013122:	f000 fa33 	bl	801358c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013126:	8bfa      	ldrh	r2, [r7, #30]
 8013128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801312c:	4293      	cmp	r3, r2
 801312e:	bf28      	it	cs
 8013130:	4613      	movcs	r3, r2
 8013132:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801313a:	2b00      	cmp	r3, #0
 801313c:	d105      	bne.n	801314a <ip4_frag+0x132>
        poff = 0;
 801313e:	2300      	movs	r3, #0
 8013140:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	60fb      	str	r3, [r7, #12]
        continue;
 8013148:	e041      	b.n	80131ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801314a:	f7ff ff0d 	bl	8012f68 <ip_frag_alloc_pbuf_custom_ref>
 801314e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013150:	69bb      	ldr	r3, [r7, #24]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d103      	bne.n	801315e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013156:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013158:	f7f4 fb30 	bl	80077bc <pbuf_free>
        goto memerr;
 801315c:	e09d      	b.n	801329a <ip4_frag+0x282>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801315e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013164:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013166:	4413      	add	r3, r2
 8013168:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801316c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013170:	9201      	str	r2, [sp, #4]
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	4603      	mov	r3, r0
 8013176:	2241      	movs	r2, #65	; 0x41
 8013178:	2000      	movs	r0, #0
 801317a:	f7f4 f96b 	bl	8007454 <pbuf_alloced_custom>
 801317e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d106      	bne.n	8013194 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013186:	69b8      	ldr	r0, [r7, #24]
 8013188:	f7ff fef6 	bl	8012f78 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801318c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801318e:	f7f4 fb15 	bl	80077bc <pbuf_free>
        goto memerr;
 8013192:	e082      	b.n	801329a <ip4_frag+0x282>
      }
      pbuf_ref(p);
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f7f4 fbb1 	bl	80078fc <pbuf_ref>
      pcr->original = p;
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	68fa      	ldr	r2, [r7, #12]
 801319e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80131a0:	69bb      	ldr	r3, [r7, #24]
 80131a2:	4a46      	ldr	r2, [pc, #280]	; (80132bc <ip4_frag+0x2a4>)
 80131a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80131a6:	6979      	ldr	r1, [r7, #20]
 80131a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131aa:	f7f4 fbc9 	bl	8007940 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80131ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80131b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80131b6:	1ad3      	subs	r3, r2, r3
 80131b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80131bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d004      	beq.n	80131ce <ip4_frag+0x1b6>
        poff = 0;
 80131c4:	2300      	movs	r3, #0
 80131c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80131ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d196      	bne.n	8013104 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80131d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80131d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80131dc:	4413      	add	r3, r2
 80131de:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131e4:	f1a3 0213 	sub.w	r2, r3, #19
 80131e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80131ec:	429a      	cmp	r2, r3
 80131ee:	bfcc      	ite	gt
 80131f0:	2301      	movgt	r3, #1
 80131f2:	2300      	movle	r3, #0
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80131f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80131fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013200:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013202:	6a3b      	ldr	r3, [r7, #32]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d002      	beq.n	801320e <ip4_frag+0x1f6>
 8013208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320a:	2b00      	cmp	r3, #0
 801320c:	d003      	beq.n	8013216 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801320e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013214:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013216:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013218:	4618      	mov	r0, r3
 801321a:	f7f2 fe05 	bl	8005e28 <lwip_htons>
 801321e:	4603      	mov	r3, r0
 8013220:	461a      	mov	r2, r3
 8013222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013224:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013226:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013228:	3314      	adds	r3, #20
 801322a:	b29b      	uxth	r3, r3
 801322c:	4618      	mov	r0, r3
 801322e:	f7f2 fdfb 	bl	8005e28 <lwip_htons>
 8013232:	4603      	mov	r3, r0
 8013234:	461a      	mov	r2, r3
 8013236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013238:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801323c:	2200      	movs	r2, #0
 801323e:	729a      	strb	r2, [r3, #10]
 8013240:	2200      	movs	r2, #0
 8013242:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8013244:	2114      	movs	r1, #20
 8013246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013248:	f7f2 ffa0 	bl	800618c <inet_chksum>
 801324c:	4603      	mov	r3, r0
 801324e:	461a      	mov	r2, r3
 8013250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013252:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	695b      	ldr	r3, [r3, #20]
 8013258:	687a      	ldr	r2, [r7, #4]
 801325a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801325c:	68b8      	ldr	r0, [r7, #8]
 801325e:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8013260:	4b17      	ldr	r3, [pc, #92]	; (80132c0 <ip4_frag+0x2a8>)
 8013262:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8013264:	3301      	adds	r3, #1
 8013266:	b29a      	uxth	r2, r3
 8013268:	4b15      	ldr	r3, [pc, #84]	; (80132c0 <ip4_frag+0x2a8>)
 801326a:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801326c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801326e:	f7f4 faa5 	bl	80077bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013272:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013276:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013278:	1ad3      	subs	r3, r2, r3
 801327a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801327e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013282:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013284:	4413      	add	r3, r2
 8013286:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801328a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801328e:	2b00      	cmp	r3, #0
 8013290:	f47f af0b 	bne.w	80130aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013294:	2300      	movs	r3, #0
 8013296:	e002      	b.n	801329e <ip4_frag+0x286>
      goto memerr;
 8013298:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801329a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3748      	adds	r7, #72	; 0x48
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	08017604 	.word	0x08017604
 80132ac:	080177e0 	.word	0x080177e0
 80132b0:	0801764c 	.word	0x0801764c
 80132b4:	080177fc 	.word	0x080177fc
 80132b8:	0801781c 	.word	0x0801781c
 80132bc:	08012fb1 	.word	0x08012fb1
 80132c0:	20007a48 	.word	0x20007a48

080132c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80132ce:	230e      	movs	r3, #14
 80132d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	895b      	ldrh	r3, [r3, #10]
 80132d6:	2b0e      	cmp	r3, #14
 80132d8:	d80c      	bhi.n	80132f4 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 80132da:	4b51      	ldr	r3, [pc, #324]	; (8013420 <ethernet_input+0x15c>)
 80132dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132de:	3301      	adds	r3, #1
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	4b4f      	ldr	r3, [pc, #316]	; (8013420 <ethernet_input+0x15c>)
 80132e4:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 80132e6:	4b4e      	ldr	r3, [pc, #312]	; (8013420 <ethernet_input+0x15c>)
 80132e8:	8bdb      	ldrh	r3, [r3, #30]
 80132ea:	3301      	adds	r3, #1
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	4b4c      	ldr	r3, [pc, #304]	; (8013420 <ethernet_input+0x15c>)
 80132f0:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 80132f2:	e08d      	b.n	8013410 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	7bdb      	ldrb	r3, [r3, #15]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d106      	bne.n	801330a <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 80132fc:	683b      	ldr	r3, [r7, #0]
 80132fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013302:	3301      	adds	r3, #1
 8013304:	b2da      	uxtb	r2, r3
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	685b      	ldr	r3, [r3, #4]
 801330e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013310:	693b      	ldr	r3, [r7, #16]
 8013312:	7b1a      	ldrb	r2, [r3, #12]
 8013314:	7b5b      	ldrb	r3, [r3, #13]
 8013316:	021b      	lsls	r3, r3, #8
 8013318:	4313      	orrs	r3, r2
 801331a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	f003 0301 	and.w	r3, r3, #1
 8013324:	2b00      	cmp	r3, #0
 8013326:	d023      	beq.n	8013370 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d10f      	bne.n	8013350 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	785b      	ldrb	r3, [r3, #1]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d11b      	bne.n	8013370 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801333c:	2b5e      	cmp	r3, #94	; 0x5e
 801333e:	d117      	bne.n	8013370 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	7b5b      	ldrb	r3, [r3, #13]
 8013344:	f043 0310 	orr.w	r3, r3, #16
 8013348:	b2da      	uxtb	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	735a      	strb	r2, [r3, #13]
 801334e:	e00f      	b.n	8013370 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	2206      	movs	r2, #6
 8013354:	4933      	ldr	r1, [pc, #204]	; (8013424 <ethernet_input+0x160>)
 8013356:	4618      	mov	r0, r3
 8013358:	f000 f8da 	bl	8013510 <memcmp>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d106      	bne.n	8013370 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	7b5b      	ldrb	r3, [r3, #13]
 8013366:	f043 0308 	orr.w	r3, r3, #8
 801336a:	b2da      	uxtb	r2, r3
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013370:	89fb      	ldrh	r3, [r7, #14]
 8013372:	2b08      	cmp	r3, #8
 8013374:	d003      	beq.n	801337e <ethernet_input+0xba>
 8013376:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801337a:	d014      	beq.n	80133a6 <ethernet_input+0xe2>
 801337c:	e034      	b.n	80133e8 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013384:	f003 0308 	and.w	r3, r3, #8
 8013388:	2b00      	cmp	r3, #0
 801338a:	d03c      	beq.n	8013406 <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801338c:	8afb      	ldrh	r3, [r7, #22]
 801338e:	4619      	mov	r1, r3
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	f7f4 f98d 	bl	80076b0 <pbuf_remove_header>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d136      	bne.n	801340a <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801339c:	6839      	ldr	r1, [r7, #0]
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f7fe fd3a 	bl	8011e18 <ip4_input>
      }
      break;
 80133a4:	e02d      	b.n	8013402 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80133ac:	f003 0308 	and.w	r3, r3, #8
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d02c      	beq.n	801340e <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80133b4:	8afb      	ldrh	r3, [r7, #22]
 80133b6:	4619      	mov	r1, r3
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f7f4 f979 	bl	80076b0 <pbuf_remove_header>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d00c      	beq.n	80133de <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 80133c4:	4b16      	ldr	r3, [pc, #88]	; (8013420 <ethernet_input+0x15c>)
 80133c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80133c8:	3301      	adds	r3, #1
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	4b14      	ldr	r3, [pc, #80]	; (8013420 <ethernet_input+0x15c>)
 80133ce:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 80133d0:	4b13      	ldr	r3, [pc, #76]	; (8013420 <ethernet_input+0x15c>)
 80133d2:	8bdb      	ldrh	r3, [r3, #30]
 80133d4:	3301      	adds	r3, #1
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	4b11      	ldr	r3, [pc, #68]	; (8013420 <ethernet_input+0x15c>)
 80133da:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 80133dc:	e018      	b.n	8013410 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 80133de:	6839      	ldr	r1, [r7, #0]
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7fd fe09 	bl	8010ff8 <etharp_input>
      }
      break;
 80133e6:	e00c      	b.n	8013402 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 80133e8:	4b0d      	ldr	r3, [pc, #52]	; (8013420 <ethernet_input+0x15c>)
 80133ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133ec:	3301      	adds	r3, #1
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	4b0b      	ldr	r3, [pc, #44]	; (8013420 <ethernet_input+0x15c>)
 80133f2:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 80133f4:	4b0a      	ldr	r3, [pc, #40]	; (8013420 <ethernet_input+0x15c>)
 80133f6:	8bdb      	ldrh	r3, [r3, #30]
 80133f8:	3301      	adds	r3, #1
 80133fa:	b29a      	uxth	r2, r3
 80133fc:	4b08      	ldr	r3, [pc, #32]	; (8013420 <ethernet_input+0x15c>)
 80133fe:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013400:	e006      	b.n	8013410 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013402:	2300      	movs	r3, #0
 8013404:	e008      	b.n	8013418 <ethernet_input+0x154>
        goto free_and_return;
 8013406:	bf00      	nop
 8013408:	e002      	b.n	8013410 <ethernet_input+0x14c>
        goto free_and_return;
 801340a:	bf00      	nop
 801340c:	e000      	b.n	8013410 <ethernet_input+0x14c>
        goto free_and_return;
 801340e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7f4 f9d3 	bl	80077bc <pbuf_free>
  return ERR_OK;
 8013416:	2300      	movs	r3, #0
}
 8013418:	4618      	mov	r0, r3
 801341a:	3718      	adds	r7, #24
 801341c:	46bd      	mov	sp, r7
 801341e:	bd80      	pop	{r7, pc}
 8013420:	20007a48 	.word	0x20007a48
 8013424:	08039748 	.word	0x08039748

08013428 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013428:	b580      	push	{r7, lr}
 801342a:	b086      	sub	sp, #24
 801342c:	af00      	add	r7, sp, #0
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]
 8013434:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013436:	8c3b      	ldrh	r3, [r7, #32]
 8013438:	4618      	mov	r0, r3
 801343a:	f7f2 fcf5 	bl	8005e28 <lwip_htons>
 801343e:	4603      	mov	r3, r0
 8013440:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013442:	210e      	movs	r1, #14
 8013444:	68b8      	ldr	r0, [r7, #8]
 8013446:	f7f4 f923 	bl	8007690 <pbuf_add_header>
 801344a:	4603      	mov	r3, r0
 801344c:	2b00      	cmp	r3, #0
 801344e:	d125      	bne.n	801349c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	8afa      	ldrh	r2, [r7, #22]
 801345a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	2206      	movs	r2, #6
 8013460:	6839      	ldr	r1, [r7, #0]
 8013462:	4618      	mov	r0, r3
 8013464:	f000 f862 	bl	801352c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	3306      	adds	r3, #6
 801346c:	2206      	movs	r2, #6
 801346e:	6879      	ldr	r1, [r7, #4]
 8013470:	4618      	mov	r0, r3
 8013472:	f000 f85b 	bl	801352c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801347c:	2b06      	cmp	r3, #6
 801347e:	d006      	beq.n	801348e <ethernet_output+0x66>
 8013480:	4b0d      	ldr	r3, [pc, #52]	; (80134b8 <ethernet_output+0x90>)
 8013482:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013486:	490d      	ldr	r1, [pc, #52]	; (80134bc <ethernet_output+0x94>)
 8013488:	480d      	ldr	r0, [pc, #52]	; (80134c0 <ethernet_output+0x98>)
 801348a:	f000 f87f 	bl	801358c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	699b      	ldr	r3, [r3, #24]
 8013492:	68b9      	ldr	r1, [r7, #8]
 8013494:	68f8      	ldr	r0, [r7, #12]
 8013496:	4798      	blx	r3
 8013498:	4603      	mov	r3, r0
 801349a:	e008      	b.n	80134ae <ethernet_output+0x86>
      goto pbuf_header_failed;
 801349c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801349e:	4b09      	ldr	r3, [pc, #36]	; (80134c4 <ethernet_output+0x9c>)
 80134a0:	895b      	ldrh	r3, [r3, #10]
 80134a2:	3301      	adds	r3, #1
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	4b07      	ldr	r3, [pc, #28]	; (80134c4 <ethernet_output+0x9c>)
 80134a8:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 80134aa:	f06f 0301 	mvn.w	r3, #1
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3718      	adds	r7, #24
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	0801782c 	.word	0x0801782c
 80134bc:	08017864 	.word	0x08017864
 80134c0:	08017898 	.word	0x08017898
 80134c4:	20007a48 	.word	0x20007a48

080134c8 <__libc_init_array>:
 80134c8:	b570      	push	{r4, r5, r6, lr}
 80134ca:	4d0d      	ldr	r5, [pc, #52]	; (8013500 <__libc_init_array+0x38>)
 80134cc:	4c0d      	ldr	r4, [pc, #52]	; (8013504 <__libc_init_array+0x3c>)
 80134ce:	1b64      	subs	r4, r4, r5
 80134d0:	10a4      	asrs	r4, r4, #2
 80134d2:	2600      	movs	r6, #0
 80134d4:	42a6      	cmp	r6, r4
 80134d6:	d109      	bne.n	80134ec <__libc_init_array+0x24>
 80134d8:	4d0b      	ldr	r5, [pc, #44]	; (8013508 <__libc_init_array+0x40>)
 80134da:	4c0c      	ldr	r4, [pc, #48]	; (801350c <__libc_init_array+0x44>)
 80134dc:	f001 fa3a 	bl	8014954 <_init>
 80134e0:	1b64      	subs	r4, r4, r5
 80134e2:	10a4      	asrs	r4, r4, #2
 80134e4:	2600      	movs	r6, #0
 80134e6:	42a6      	cmp	r6, r4
 80134e8:	d105      	bne.n	80134f6 <__libc_init_array+0x2e>
 80134ea:	bd70      	pop	{r4, r5, r6, pc}
 80134ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80134f0:	4798      	blx	r3
 80134f2:	3601      	adds	r6, #1
 80134f4:	e7ee      	b.n	80134d4 <__libc_init_array+0xc>
 80134f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80134fa:	4798      	blx	r3
 80134fc:	3601      	adds	r6, #1
 80134fe:	e7f2      	b.n	80134e6 <__libc_init_array+0x1e>
 8013500:	080398ac 	.word	0x080398ac
 8013504:	080398ac 	.word	0x080398ac
 8013508:	080398ac 	.word	0x080398ac
 801350c:	080398b0 	.word	0x080398b0

08013510 <memcmp>:
 8013510:	b530      	push	{r4, r5, lr}
 8013512:	3901      	subs	r1, #1
 8013514:	2400      	movs	r4, #0
 8013516:	42a2      	cmp	r2, r4
 8013518:	d101      	bne.n	801351e <memcmp+0xe>
 801351a:	2000      	movs	r0, #0
 801351c:	e005      	b.n	801352a <memcmp+0x1a>
 801351e:	5d03      	ldrb	r3, [r0, r4]
 8013520:	3401      	adds	r4, #1
 8013522:	5d0d      	ldrb	r5, [r1, r4]
 8013524:	42ab      	cmp	r3, r5
 8013526:	d0f6      	beq.n	8013516 <memcmp+0x6>
 8013528:	1b58      	subs	r0, r3, r5
 801352a:	bd30      	pop	{r4, r5, pc}

0801352c <memcpy>:
 801352c:	440a      	add	r2, r1
 801352e:	4291      	cmp	r1, r2
 8013530:	f100 33ff 	add.w	r3, r0, #4294967295
 8013534:	d100      	bne.n	8013538 <memcpy+0xc>
 8013536:	4770      	bx	lr
 8013538:	b510      	push	{r4, lr}
 801353a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801353e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013542:	4291      	cmp	r1, r2
 8013544:	d1f9      	bne.n	801353a <memcpy+0xe>
 8013546:	bd10      	pop	{r4, pc}

08013548 <memmove>:
 8013548:	4288      	cmp	r0, r1
 801354a:	b510      	push	{r4, lr}
 801354c:	eb01 0402 	add.w	r4, r1, r2
 8013550:	d902      	bls.n	8013558 <memmove+0x10>
 8013552:	4284      	cmp	r4, r0
 8013554:	4623      	mov	r3, r4
 8013556:	d807      	bhi.n	8013568 <memmove+0x20>
 8013558:	1e43      	subs	r3, r0, #1
 801355a:	42a1      	cmp	r1, r4
 801355c:	d008      	beq.n	8013570 <memmove+0x28>
 801355e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013566:	e7f8      	b.n	801355a <memmove+0x12>
 8013568:	4402      	add	r2, r0
 801356a:	4601      	mov	r1, r0
 801356c:	428a      	cmp	r2, r1
 801356e:	d100      	bne.n	8013572 <memmove+0x2a>
 8013570:	bd10      	pop	{r4, pc}
 8013572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801357a:	e7f7      	b.n	801356c <memmove+0x24>

0801357c <memset>:
 801357c:	4402      	add	r2, r0
 801357e:	4603      	mov	r3, r0
 8013580:	4293      	cmp	r3, r2
 8013582:	d100      	bne.n	8013586 <memset+0xa>
 8013584:	4770      	bx	lr
 8013586:	f803 1b01 	strb.w	r1, [r3], #1
 801358a:	e7f9      	b.n	8013580 <memset+0x4>

0801358c <iprintf>:
 801358c:	b40f      	push	{r0, r1, r2, r3}
 801358e:	4b0a      	ldr	r3, [pc, #40]	; (80135b8 <iprintf+0x2c>)
 8013590:	b513      	push	{r0, r1, r4, lr}
 8013592:	681c      	ldr	r4, [r3, #0]
 8013594:	b124      	cbz	r4, 80135a0 <iprintf+0x14>
 8013596:	69a3      	ldr	r3, [r4, #24]
 8013598:	b913      	cbnz	r3, 80135a0 <iprintf+0x14>
 801359a:	4620      	mov	r0, r4
 801359c:	f000 f904 	bl	80137a8 <__sinit>
 80135a0:	ab05      	add	r3, sp, #20
 80135a2:	9a04      	ldr	r2, [sp, #16]
 80135a4:	68a1      	ldr	r1, [r4, #8]
 80135a6:	9301      	str	r3, [sp, #4]
 80135a8:	4620      	mov	r0, r4
 80135aa:	f000 fbe7 	bl	8013d7c <_vfiprintf_r>
 80135ae:	b002      	add	sp, #8
 80135b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135b4:	b004      	add	sp, #16
 80135b6:	4770      	bx	lr
 80135b8:	20000024 	.word	0x20000024

080135bc <rand>:
 80135bc:	4b17      	ldr	r3, [pc, #92]	; (801361c <rand+0x60>)
 80135be:	b510      	push	{r4, lr}
 80135c0:	681c      	ldr	r4, [r3, #0]
 80135c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80135c4:	b9b3      	cbnz	r3, 80135f4 <rand+0x38>
 80135c6:	2018      	movs	r0, #24
 80135c8:	f000 f9a0 	bl	801390c <malloc>
 80135cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80135ce:	b928      	cbnz	r0, 80135dc <rand+0x20>
 80135d0:	4602      	mov	r2, r0
 80135d2:	4b13      	ldr	r3, [pc, #76]	; (8013620 <rand+0x64>)
 80135d4:	4813      	ldr	r0, [pc, #76]	; (8013624 <rand+0x68>)
 80135d6:	214e      	movs	r1, #78	; 0x4e
 80135d8:	f000 f870 	bl	80136bc <__assert_func>
 80135dc:	4a12      	ldr	r2, [pc, #72]	; (8013628 <rand+0x6c>)
 80135de:	4b13      	ldr	r3, [pc, #76]	; (801362c <rand+0x70>)
 80135e0:	e9c0 2300 	strd	r2, r3, [r0]
 80135e4:	4b12      	ldr	r3, [pc, #72]	; (8013630 <rand+0x74>)
 80135e6:	6083      	str	r3, [r0, #8]
 80135e8:	230b      	movs	r3, #11
 80135ea:	8183      	strh	r3, [r0, #12]
 80135ec:	2201      	movs	r2, #1
 80135ee:	2300      	movs	r3, #0
 80135f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80135f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80135f6:	480f      	ldr	r0, [pc, #60]	; (8013634 <rand+0x78>)
 80135f8:	690a      	ldr	r2, [r1, #16]
 80135fa:	694b      	ldr	r3, [r1, #20]
 80135fc:	4c0e      	ldr	r4, [pc, #56]	; (8013638 <rand+0x7c>)
 80135fe:	4350      	muls	r0, r2
 8013600:	fb04 0003 	mla	r0, r4, r3, r0
 8013604:	fba2 3404 	umull	r3, r4, r2, r4
 8013608:	1c5a      	adds	r2, r3, #1
 801360a:	4404      	add	r4, r0
 801360c:	f144 0000 	adc.w	r0, r4, #0
 8013610:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013614:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013618:	bd10      	pop	{r4, pc}
 801361a:	bf00      	nop
 801361c:	20000024 	.word	0x20000024
 8013620:	0803975c 	.word	0x0803975c
 8013624:	08039773 	.word	0x08039773
 8013628:	abcd330e 	.word	0xabcd330e
 801362c:	e66d1234 	.word	0xe66d1234
 8013630:	0005deec 	.word	0x0005deec
 8013634:	5851f42d 	.word	0x5851f42d
 8013638:	4c957f2d 	.word	0x4c957f2d

0801363c <siprintf>:
 801363c:	b40e      	push	{r1, r2, r3}
 801363e:	b500      	push	{lr}
 8013640:	b09c      	sub	sp, #112	; 0x70
 8013642:	ab1d      	add	r3, sp, #116	; 0x74
 8013644:	9002      	str	r0, [sp, #8]
 8013646:	9006      	str	r0, [sp, #24]
 8013648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801364c:	4809      	ldr	r0, [pc, #36]	; (8013674 <siprintf+0x38>)
 801364e:	9107      	str	r1, [sp, #28]
 8013650:	9104      	str	r1, [sp, #16]
 8013652:	4909      	ldr	r1, [pc, #36]	; (8013678 <siprintf+0x3c>)
 8013654:	f853 2b04 	ldr.w	r2, [r3], #4
 8013658:	9105      	str	r1, [sp, #20]
 801365a:	6800      	ldr	r0, [r0, #0]
 801365c:	9301      	str	r3, [sp, #4]
 801365e:	a902      	add	r1, sp, #8
 8013660:	f000 fa62 	bl	8013b28 <_svfiprintf_r>
 8013664:	9b02      	ldr	r3, [sp, #8]
 8013666:	2200      	movs	r2, #0
 8013668:	701a      	strb	r2, [r3, #0]
 801366a:	b01c      	add	sp, #112	; 0x70
 801366c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013670:	b003      	add	sp, #12
 8013672:	4770      	bx	lr
 8013674:	20000024 	.word	0x20000024
 8013678:	ffff0208 	.word	0xffff0208

0801367c <strchr>:
 801367c:	b2c9      	uxtb	r1, r1
 801367e:	4603      	mov	r3, r0
 8013680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013684:	b11a      	cbz	r2, 801368e <strchr+0x12>
 8013686:	428a      	cmp	r2, r1
 8013688:	d1f9      	bne.n	801367e <strchr+0x2>
 801368a:	4618      	mov	r0, r3
 801368c:	4770      	bx	lr
 801368e:	2900      	cmp	r1, #0
 8013690:	bf18      	it	ne
 8013692:	2300      	movne	r3, #0
 8013694:	e7f9      	b.n	801368a <strchr+0xe>

08013696 <strncmp>:
 8013696:	b510      	push	{r4, lr}
 8013698:	b16a      	cbz	r2, 80136b6 <strncmp+0x20>
 801369a:	3901      	subs	r1, #1
 801369c:	1884      	adds	r4, r0, r2
 801369e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80136a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80136a6:	4293      	cmp	r3, r2
 80136a8:	d103      	bne.n	80136b2 <strncmp+0x1c>
 80136aa:	42a0      	cmp	r0, r4
 80136ac:	d001      	beq.n	80136b2 <strncmp+0x1c>
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d1f5      	bne.n	801369e <strncmp+0x8>
 80136b2:	1a98      	subs	r0, r3, r2
 80136b4:	bd10      	pop	{r4, pc}
 80136b6:	4610      	mov	r0, r2
 80136b8:	e7fc      	b.n	80136b4 <strncmp+0x1e>
	...

080136bc <__assert_func>:
 80136bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136be:	4614      	mov	r4, r2
 80136c0:	461a      	mov	r2, r3
 80136c2:	4b09      	ldr	r3, [pc, #36]	; (80136e8 <__assert_func+0x2c>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	4605      	mov	r5, r0
 80136c8:	68d8      	ldr	r0, [r3, #12]
 80136ca:	b14c      	cbz	r4, 80136e0 <__assert_func+0x24>
 80136cc:	4b07      	ldr	r3, [pc, #28]	; (80136ec <__assert_func+0x30>)
 80136ce:	9100      	str	r1, [sp, #0]
 80136d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80136d4:	4906      	ldr	r1, [pc, #24]	; (80136f0 <__assert_func+0x34>)
 80136d6:	462b      	mov	r3, r5
 80136d8:	f000 f8e4 	bl	80138a4 <fiprintf>
 80136dc:	f000 ff38 	bl	8014550 <abort>
 80136e0:	4b04      	ldr	r3, [pc, #16]	; (80136f4 <__assert_func+0x38>)
 80136e2:	461c      	mov	r4, r3
 80136e4:	e7f3      	b.n	80136ce <__assert_func+0x12>
 80136e6:	bf00      	nop
 80136e8:	20000024 	.word	0x20000024
 80136ec:	080397d2 	.word	0x080397d2
 80136f0:	080397df 	.word	0x080397df
 80136f4:	0803980d 	.word	0x0803980d

080136f8 <std>:
 80136f8:	2300      	movs	r3, #0
 80136fa:	b510      	push	{r4, lr}
 80136fc:	4604      	mov	r4, r0
 80136fe:	e9c0 3300 	strd	r3, r3, [r0]
 8013702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013706:	6083      	str	r3, [r0, #8]
 8013708:	8181      	strh	r1, [r0, #12]
 801370a:	6643      	str	r3, [r0, #100]	; 0x64
 801370c:	81c2      	strh	r2, [r0, #14]
 801370e:	6183      	str	r3, [r0, #24]
 8013710:	4619      	mov	r1, r3
 8013712:	2208      	movs	r2, #8
 8013714:	305c      	adds	r0, #92	; 0x5c
 8013716:	f7ff ff31 	bl	801357c <memset>
 801371a:	4b05      	ldr	r3, [pc, #20]	; (8013730 <std+0x38>)
 801371c:	6263      	str	r3, [r4, #36]	; 0x24
 801371e:	4b05      	ldr	r3, [pc, #20]	; (8013734 <std+0x3c>)
 8013720:	62a3      	str	r3, [r4, #40]	; 0x28
 8013722:	4b05      	ldr	r3, [pc, #20]	; (8013738 <std+0x40>)
 8013724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013726:	4b05      	ldr	r3, [pc, #20]	; (801373c <std+0x44>)
 8013728:	6224      	str	r4, [r4, #32]
 801372a:	6323      	str	r3, [r4, #48]	; 0x30
 801372c:	bd10      	pop	{r4, pc}
 801372e:	bf00      	nop
 8013730:	08014325 	.word	0x08014325
 8013734:	08014347 	.word	0x08014347
 8013738:	0801437f 	.word	0x0801437f
 801373c:	080143a3 	.word	0x080143a3

08013740 <_cleanup_r>:
 8013740:	4901      	ldr	r1, [pc, #4]	; (8013748 <_cleanup_r+0x8>)
 8013742:	f000 b8c1 	b.w	80138c8 <_fwalk_reent>
 8013746:	bf00      	nop
 8013748:	0801468d 	.word	0x0801468d

0801374c <__sfmoreglue>:
 801374c:	b570      	push	{r4, r5, r6, lr}
 801374e:	1e4a      	subs	r2, r1, #1
 8013750:	2568      	movs	r5, #104	; 0x68
 8013752:	4355      	muls	r5, r2
 8013754:	460e      	mov	r6, r1
 8013756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801375a:	f000 f92f 	bl	80139bc <_malloc_r>
 801375e:	4604      	mov	r4, r0
 8013760:	b140      	cbz	r0, 8013774 <__sfmoreglue+0x28>
 8013762:	2100      	movs	r1, #0
 8013764:	e9c0 1600 	strd	r1, r6, [r0]
 8013768:	300c      	adds	r0, #12
 801376a:	60a0      	str	r0, [r4, #8]
 801376c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013770:	f7ff ff04 	bl	801357c <memset>
 8013774:	4620      	mov	r0, r4
 8013776:	bd70      	pop	{r4, r5, r6, pc}

08013778 <__sfp_lock_acquire>:
 8013778:	4801      	ldr	r0, [pc, #4]	; (8013780 <__sfp_lock_acquire+0x8>)
 801377a:	f000 b8c5 	b.w	8013908 <__retarget_lock_acquire_recursive>
 801377e:	bf00      	nop
 8013780:	20007b74 	.word	0x20007b74

08013784 <__sfp_lock_release>:
 8013784:	4801      	ldr	r0, [pc, #4]	; (801378c <__sfp_lock_release+0x8>)
 8013786:	f000 b8c0 	b.w	801390a <__retarget_lock_release_recursive>
 801378a:	bf00      	nop
 801378c:	20007b74 	.word	0x20007b74

08013790 <__sinit_lock_acquire>:
 8013790:	4801      	ldr	r0, [pc, #4]	; (8013798 <__sinit_lock_acquire+0x8>)
 8013792:	f000 b8b9 	b.w	8013908 <__retarget_lock_acquire_recursive>
 8013796:	bf00      	nop
 8013798:	20007b6f 	.word	0x20007b6f

0801379c <__sinit_lock_release>:
 801379c:	4801      	ldr	r0, [pc, #4]	; (80137a4 <__sinit_lock_release+0x8>)
 801379e:	f000 b8b4 	b.w	801390a <__retarget_lock_release_recursive>
 80137a2:	bf00      	nop
 80137a4:	20007b6f 	.word	0x20007b6f

080137a8 <__sinit>:
 80137a8:	b510      	push	{r4, lr}
 80137aa:	4604      	mov	r4, r0
 80137ac:	f7ff fff0 	bl	8013790 <__sinit_lock_acquire>
 80137b0:	69a3      	ldr	r3, [r4, #24]
 80137b2:	b11b      	cbz	r3, 80137bc <__sinit+0x14>
 80137b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137b8:	f7ff bff0 	b.w	801379c <__sinit_lock_release>
 80137bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80137c0:	6523      	str	r3, [r4, #80]	; 0x50
 80137c2:	4b13      	ldr	r3, [pc, #76]	; (8013810 <__sinit+0x68>)
 80137c4:	4a13      	ldr	r2, [pc, #76]	; (8013814 <__sinit+0x6c>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80137ca:	42a3      	cmp	r3, r4
 80137cc:	bf04      	itt	eq
 80137ce:	2301      	moveq	r3, #1
 80137d0:	61a3      	streq	r3, [r4, #24]
 80137d2:	4620      	mov	r0, r4
 80137d4:	f000 f820 	bl	8013818 <__sfp>
 80137d8:	6060      	str	r0, [r4, #4]
 80137da:	4620      	mov	r0, r4
 80137dc:	f000 f81c 	bl	8013818 <__sfp>
 80137e0:	60a0      	str	r0, [r4, #8]
 80137e2:	4620      	mov	r0, r4
 80137e4:	f000 f818 	bl	8013818 <__sfp>
 80137e8:	2200      	movs	r2, #0
 80137ea:	60e0      	str	r0, [r4, #12]
 80137ec:	2104      	movs	r1, #4
 80137ee:	6860      	ldr	r0, [r4, #4]
 80137f0:	f7ff ff82 	bl	80136f8 <std>
 80137f4:	68a0      	ldr	r0, [r4, #8]
 80137f6:	2201      	movs	r2, #1
 80137f8:	2109      	movs	r1, #9
 80137fa:	f7ff ff7d 	bl	80136f8 <std>
 80137fe:	68e0      	ldr	r0, [r4, #12]
 8013800:	2202      	movs	r2, #2
 8013802:	2112      	movs	r1, #18
 8013804:	f7ff ff78 	bl	80136f8 <std>
 8013808:	2301      	movs	r3, #1
 801380a:	61a3      	str	r3, [r4, #24]
 801380c:	e7d2      	b.n	80137b4 <__sinit+0xc>
 801380e:	bf00      	nop
 8013810:	08039758 	.word	0x08039758
 8013814:	08013741 	.word	0x08013741

08013818 <__sfp>:
 8013818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801381a:	4607      	mov	r7, r0
 801381c:	f7ff ffac 	bl	8013778 <__sfp_lock_acquire>
 8013820:	4b1e      	ldr	r3, [pc, #120]	; (801389c <__sfp+0x84>)
 8013822:	681e      	ldr	r6, [r3, #0]
 8013824:	69b3      	ldr	r3, [r6, #24]
 8013826:	b913      	cbnz	r3, 801382e <__sfp+0x16>
 8013828:	4630      	mov	r0, r6
 801382a:	f7ff ffbd 	bl	80137a8 <__sinit>
 801382e:	3648      	adds	r6, #72	; 0x48
 8013830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013834:	3b01      	subs	r3, #1
 8013836:	d503      	bpl.n	8013840 <__sfp+0x28>
 8013838:	6833      	ldr	r3, [r6, #0]
 801383a:	b30b      	cbz	r3, 8013880 <__sfp+0x68>
 801383c:	6836      	ldr	r6, [r6, #0]
 801383e:	e7f7      	b.n	8013830 <__sfp+0x18>
 8013840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013844:	b9d5      	cbnz	r5, 801387c <__sfp+0x64>
 8013846:	4b16      	ldr	r3, [pc, #88]	; (80138a0 <__sfp+0x88>)
 8013848:	60e3      	str	r3, [r4, #12]
 801384a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801384e:	6665      	str	r5, [r4, #100]	; 0x64
 8013850:	f000 f859 	bl	8013906 <__retarget_lock_init_recursive>
 8013854:	f7ff ff96 	bl	8013784 <__sfp_lock_release>
 8013858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801385c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013860:	6025      	str	r5, [r4, #0]
 8013862:	61a5      	str	r5, [r4, #24]
 8013864:	2208      	movs	r2, #8
 8013866:	4629      	mov	r1, r5
 8013868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801386c:	f7ff fe86 	bl	801357c <memset>
 8013870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013878:	4620      	mov	r0, r4
 801387a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801387c:	3468      	adds	r4, #104	; 0x68
 801387e:	e7d9      	b.n	8013834 <__sfp+0x1c>
 8013880:	2104      	movs	r1, #4
 8013882:	4638      	mov	r0, r7
 8013884:	f7ff ff62 	bl	801374c <__sfmoreglue>
 8013888:	4604      	mov	r4, r0
 801388a:	6030      	str	r0, [r6, #0]
 801388c:	2800      	cmp	r0, #0
 801388e:	d1d5      	bne.n	801383c <__sfp+0x24>
 8013890:	f7ff ff78 	bl	8013784 <__sfp_lock_release>
 8013894:	230c      	movs	r3, #12
 8013896:	603b      	str	r3, [r7, #0]
 8013898:	e7ee      	b.n	8013878 <__sfp+0x60>
 801389a:	bf00      	nop
 801389c:	08039758 	.word	0x08039758
 80138a0:	ffff0001 	.word	0xffff0001

080138a4 <fiprintf>:
 80138a4:	b40e      	push	{r1, r2, r3}
 80138a6:	b503      	push	{r0, r1, lr}
 80138a8:	4601      	mov	r1, r0
 80138aa:	ab03      	add	r3, sp, #12
 80138ac:	4805      	ldr	r0, [pc, #20]	; (80138c4 <fiprintf+0x20>)
 80138ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80138b2:	6800      	ldr	r0, [r0, #0]
 80138b4:	9301      	str	r3, [sp, #4]
 80138b6:	f000 fa61 	bl	8013d7c <_vfiprintf_r>
 80138ba:	b002      	add	sp, #8
 80138bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80138c0:	b003      	add	sp, #12
 80138c2:	4770      	bx	lr
 80138c4:	20000024 	.word	0x20000024

080138c8 <_fwalk_reent>:
 80138c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138cc:	4606      	mov	r6, r0
 80138ce:	4688      	mov	r8, r1
 80138d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80138d4:	2700      	movs	r7, #0
 80138d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80138da:	f1b9 0901 	subs.w	r9, r9, #1
 80138de:	d505      	bpl.n	80138ec <_fwalk_reent+0x24>
 80138e0:	6824      	ldr	r4, [r4, #0]
 80138e2:	2c00      	cmp	r4, #0
 80138e4:	d1f7      	bne.n	80138d6 <_fwalk_reent+0xe>
 80138e6:	4638      	mov	r0, r7
 80138e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138ec:	89ab      	ldrh	r3, [r5, #12]
 80138ee:	2b01      	cmp	r3, #1
 80138f0:	d907      	bls.n	8013902 <_fwalk_reent+0x3a>
 80138f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80138f6:	3301      	adds	r3, #1
 80138f8:	d003      	beq.n	8013902 <_fwalk_reent+0x3a>
 80138fa:	4629      	mov	r1, r5
 80138fc:	4630      	mov	r0, r6
 80138fe:	47c0      	blx	r8
 8013900:	4307      	orrs	r7, r0
 8013902:	3568      	adds	r5, #104	; 0x68
 8013904:	e7e9      	b.n	80138da <_fwalk_reent+0x12>

08013906 <__retarget_lock_init_recursive>:
 8013906:	4770      	bx	lr

08013908 <__retarget_lock_acquire_recursive>:
 8013908:	4770      	bx	lr

0801390a <__retarget_lock_release_recursive>:
 801390a:	4770      	bx	lr

0801390c <malloc>:
 801390c:	4b02      	ldr	r3, [pc, #8]	; (8013918 <malloc+0xc>)
 801390e:	4601      	mov	r1, r0
 8013910:	6818      	ldr	r0, [r3, #0]
 8013912:	f000 b853 	b.w	80139bc <_malloc_r>
 8013916:	bf00      	nop
 8013918:	20000024 	.word	0x20000024

0801391c <_free_r>:
 801391c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801391e:	2900      	cmp	r1, #0
 8013920:	d048      	beq.n	80139b4 <_free_r+0x98>
 8013922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013926:	9001      	str	r0, [sp, #4]
 8013928:	2b00      	cmp	r3, #0
 801392a:	f1a1 0404 	sub.w	r4, r1, #4
 801392e:	bfb8      	it	lt
 8013930:	18e4      	addlt	r4, r4, r3
 8013932:	f000 ff5d 	bl	80147f0 <__malloc_lock>
 8013936:	4a20      	ldr	r2, [pc, #128]	; (80139b8 <_free_r+0x9c>)
 8013938:	9801      	ldr	r0, [sp, #4]
 801393a:	6813      	ldr	r3, [r2, #0]
 801393c:	4615      	mov	r5, r2
 801393e:	b933      	cbnz	r3, 801394e <_free_r+0x32>
 8013940:	6063      	str	r3, [r4, #4]
 8013942:	6014      	str	r4, [r2, #0]
 8013944:	b003      	add	sp, #12
 8013946:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801394a:	f000 bf57 	b.w	80147fc <__malloc_unlock>
 801394e:	42a3      	cmp	r3, r4
 8013950:	d90b      	bls.n	801396a <_free_r+0x4e>
 8013952:	6821      	ldr	r1, [r4, #0]
 8013954:	1862      	adds	r2, r4, r1
 8013956:	4293      	cmp	r3, r2
 8013958:	bf04      	itt	eq
 801395a:	681a      	ldreq	r2, [r3, #0]
 801395c:	685b      	ldreq	r3, [r3, #4]
 801395e:	6063      	str	r3, [r4, #4]
 8013960:	bf04      	itt	eq
 8013962:	1852      	addeq	r2, r2, r1
 8013964:	6022      	streq	r2, [r4, #0]
 8013966:	602c      	str	r4, [r5, #0]
 8013968:	e7ec      	b.n	8013944 <_free_r+0x28>
 801396a:	461a      	mov	r2, r3
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	b10b      	cbz	r3, 8013974 <_free_r+0x58>
 8013970:	42a3      	cmp	r3, r4
 8013972:	d9fa      	bls.n	801396a <_free_r+0x4e>
 8013974:	6811      	ldr	r1, [r2, #0]
 8013976:	1855      	adds	r5, r2, r1
 8013978:	42a5      	cmp	r5, r4
 801397a:	d10b      	bne.n	8013994 <_free_r+0x78>
 801397c:	6824      	ldr	r4, [r4, #0]
 801397e:	4421      	add	r1, r4
 8013980:	1854      	adds	r4, r2, r1
 8013982:	42a3      	cmp	r3, r4
 8013984:	6011      	str	r1, [r2, #0]
 8013986:	d1dd      	bne.n	8013944 <_free_r+0x28>
 8013988:	681c      	ldr	r4, [r3, #0]
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	6053      	str	r3, [r2, #4]
 801398e:	4421      	add	r1, r4
 8013990:	6011      	str	r1, [r2, #0]
 8013992:	e7d7      	b.n	8013944 <_free_r+0x28>
 8013994:	d902      	bls.n	801399c <_free_r+0x80>
 8013996:	230c      	movs	r3, #12
 8013998:	6003      	str	r3, [r0, #0]
 801399a:	e7d3      	b.n	8013944 <_free_r+0x28>
 801399c:	6825      	ldr	r5, [r4, #0]
 801399e:	1961      	adds	r1, r4, r5
 80139a0:	428b      	cmp	r3, r1
 80139a2:	bf04      	itt	eq
 80139a4:	6819      	ldreq	r1, [r3, #0]
 80139a6:	685b      	ldreq	r3, [r3, #4]
 80139a8:	6063      	str	r3, [r4, #4]
 80139aa:	bf04      	itt	eq
 80139ac:	1949      	addeq	r1, r1, r5
 80139ae:	6021      	streq	r1, [r4, #0]
 80139b0:	6054      	str	r4, [r2, #4]
 80139b2:	e7c7      	b.n	8013944 <_free_r+0x28>
 80139b4:	b003      	add	sp, #12
 80139b6:	bd30      	pop	{r4, r5, pc}
 80139b8:	200006ec 	.word	0x200006ec

080139bc <_malloc_r>:
 80139bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139be:	1ccd      	adds	r5, r1, #3
 80139c0:	f025 0503 	bic.w	r5, r5, #3
 80139c4:	3508      	adds	r5, #8
 80139c6:	2d0c      	cmp	r5, #12
 80139c8:	bf38      	it	cc
 80139ca:	250c      	movcc	r5, #12
 80139cc:	2d00      	cmp	r5, #0
 80139ce:	4606      	mov	r6, r0
 80139d0:	db01      	blt.n	80139d6 <_malloc_r+0x1a>
 80139d2:	42a9      	cmp	r1, r5
 80139d4:	d903      	bls.n	80139de <_malloc_r+0x22>
 80139d6:	230c      	movs	r3, #12
 80139d8:	6033      	str	r3, [r6, #0]
 80139da:	2000      	movs	r0, #0
 80139dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139de:	f000 ff07 	bl	80147f0 <__malloc_lock>
 80139e2:	4921      	ldr	r1, [pc, #132]	; (8013a68 <_malloc_r+0xac>)
 80139e4:	680a      	ldr	r2, [r1, #0]
 80139e6:	4614      	mov	r4, r2
 80139e8:	b99c      	cbnz	r4, 8013a12 <_malloc_r+0x56>
 80139ea:	4f20      	ldr	r7, [pc, #128]	; (8013a6c <_malloc_r+0xb0>)
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	b923      	cbnz	r3, 80139fa <_malloc_r+0x3e>
 80139f0:	4621      	mov	r1, r4
 80139f2:	4630      	mov	r0, r6
 80139f4:	f000 fc86 	bl	8014304 <_sbrk_r>
 80139f8:	6038      	str	r0, [r7, #0]
 80139fa:	4629      	mov	r1, r5
 80139fc:	4630      	mov	r0, r6
 80139fe:	f000 fc81 	bl	8014304 <_sbrk_r>
 8013a02:	1c43      	adds	r3, r0, #1
 8013a04:	d123      	bne.n	8013a4e <_malloc_r+0x92>
 8013a06:	230c      	movs	r3, #12
 8013a08:	6033      	str	r3, [r6, #0]
 8013a0a:	4630      	mov	r0, r6
 8013a0c:	f000 fef6 	bl	80147fc <__malloc_unlock>
 8013a10:	e7e3      	b.n	80139da <_malloc_r+0x1e>
 8013a12:	6823      	ldr	r3, [r4, #0]
 8013a14:	1b5b      	subs	r3, r3, r5
 8013a16:	d417      	bmi.n	8013a48 <_malloc_r+0x8c>
 8013a18:	2b0b      	cmp	r3, #11
 8013a1a:	d903      	bls.n	8013a24 <_malloc_r+0x68>
 8013a1c:	6023      	str	r3, [r4, #0]
 8013a1e:	441c      	add	r4, r3
 8013a20:	6025      	str	r5, [r4, #0]
 8013a22:	e004      	b.n	8013a2e <_malloc_r+0x72>
 8013a24:	6863      	ldr	r3, [r4, #4]
 8013a26:	42a2      	cmp	r2, r4
 8013a28:	bf0c      	ite	eq
 8013a2a:	600b      	streq	r3, [r1, #0]
 8013a2c:	6053      	strne	r3, [r2, #4]
 8013a2e:	4630      	mov	r0, r6
 8013a30:	f000 fee4 	bl	80147fc <__malloc_unlock>
 8013a34:	f104 000b 	add.w	r0, r4, #11
 8013a38:	1d23      	adds	r3, r4, #4
 8013a3a:	f020 0007 	bic.w	r0, r0, #7
 8013a3e:	1ac2      	subs	r2, r0, r3
 8013a40:	d0cc      	beq.n	80139dc <_malloc_r+0x20>
 8013a42:	1a1b      	subs	r3, r3, r0
 8013a44:	50a3      	str	r3, [r4, r2]
 8013a46:	e7c9      	b.n	80139dc <_malloc_r+0x20>
 8013a48:	4622      	mov	r2, r4
 8013a4a:	6864      	ldr	r4, [r4, #4]
 8013a4c:	e7cc      	b.n	80139e8 <_malloc_r+0x2c>
 8013a4e:	1cc4      	adds	r4, r0, #3
 8013a50:	f024 0403 	bic.w	r4, r4, #3
 8013a54:	42a0      	cmp	r0, r4
 8013a56:	d0e3      	beq.n	8013a20 <_malloc_r+0x64>
 8013a58:	1a21      	subs	r1, r4, r0
 8013a5a:	4630      	mov	r0, r6
 8013a5c:	f000 fc52 	bl	8014304 <_sbrk_r>
 8013a60:	3001      	adds	r0, #1
 8013a62:	d1dd      	bne.n	8013a20 <_malloc_r+0x64>
 8013a64:	e7cf      	b.n	8013a06 <_malloc_r+0x4a>
 8013a66:	bf00      	nop
 8013a68:	200006ec 	.word	0x200006ec
 8013a6c:	200006f0 	.word	0x200006f0

08013a70 <__ssputs_r>:
 8013a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a74:	688e      	ldr	r6, [r1, #8]
 8013a76:	429e      	cmp	r6, r3
 8013a78:	4682      	mov	sl, r0
 8013a7a:	460c      	mov	r4, r1
 8013a7c:	4690      	mov	r8, r2
 8013a7e:	461f      	mov	r7, r3
 8013a80:	d838      	bhi.n	8013af4 <__ssputs_r+0x84>
 8013a82:	898a      	ldrh	r2, [r1, #12]
 8013a84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a88:	d032      	beq.n	8013af0 <__ssputs_r+0x80>
 8013a8a:	6825      	ldr	r5, [r4, #0]
 8013a8c:	6909      	ldr	r1, [r1, #16]
 8013a8e:	eba5 0901 	sub.w	r9, r5, r1
 8013a92:	6965      	ldr	r5, [r4, #20]
 8013a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	444b      	add	r3, r9
 8013aa0:	106d      	asrs	r5, r5, #1
 8013aa2:	429d      	cmp	r5, r3
 8013aa4:	bf38      	it	cc
 8013aa6:	461d      	movcc	r5, r3
 8013aa8:	0553      	lsls	r3, r2, #21
 8013aaa:	d531      	bpl.n	8013b10 <__ssputs_r+0xa0>
 8013aac:	4629      	mov	r1, r5
 8013aae:	f7ff ff85 	bl	80139bc <_malloc_r>
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	b950      	cbnz	r0, 8013acc <__ssputs_r+0x5c>
 8013ab6:	230c      	movs	r3, #12
 8013ab8:	f8ca 3000 	str.w	r3, [sl]
 8013abc:	89a3      	ldrh	r3, [r4, #12]
 8013abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ac2:	81a3      	strh	r3, [r4, #12]
 8013ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013acc:	6921      	ldr	r1, [r4, #16]
 8013ace:	464a      	mov	r2, r9
 8013ad0:	f7ff fd2c 	bl	801352c <memcpy>
 8013ad4:	89a3      	ldrh	r3, [r4, #12]
 8013ad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ade:	81a3      	strh	r3, [r4, #12]
 8013ae0:	6126      	str	r6, [r4, #16]
 8013ae2:	6165      	str	r5, [r4, #20]
 8013ae4:	444e      	add	r6, r9
 8013ae6:	eba5 0509 	sub.w	r5, r5, r9
 8013aea:	6026      	str	r6, [r4, #0]
 8013aec:	60a5      	str	r5, [r4, #8]
 8013aee:	463e      	mov	r6, r7
 8013af0:	42be      	cmp	r6, r7
 8013af2:	d900      	bls.n	8013af6 <__ssputs_r+0x86>
 8013af4:	463e      	mov	r6, r7
 8013af6:	4632      	mov	r2, r6
 8013af8:	6820      	ldr	r0, [r4, #0]
 8013afa:	4641      	mov	r1, r8
 8013afc:	f7ff fd24 	bl	8013548 <memmove>
 8013b00:	68a3      	ldr	r3, [r4, #8]
 8013b02:	6822      	ldr	r2, [r4, #0]
 8013b04:	1b9b      	subs	r3, r3, r6
 8013b06:	4432      	add	r2, r6
 8013b08:	60a3      	str	r3, [r4, #8]
 8013b0a:	6022      	str	r2, [r4, #0]
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	e7db      	b.n	8013ac8 <__ssputs_r+0x58>
 8013b10:	462a      	mov	r2, r5
 8013b12:	f000 fe79 	bl	8014808 <_realloc_r>
 8013b16:	4606      	mov	r6, r0
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	d1e1      	bne.n	8013ae0 <__ssputs_r+0x70>
 8013b1c:	6921      	ldr	r1, [r4, #16]
 8013b1e:	4650      	mov	r0, sl
 8013b20:	f7ff fefc 	bl	801391c <_free_r>
 8013b24:	e7c7      	b.n	8013ab6 <__ssputs_r+0x46>
	...

08013b28 <_svfiprintf_r>:
 8013b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b2c:	4698      	mov	r8, r3
 8013b2e:	898b      	ldrh	r3, [r1, #12]
 8013b30:	061b      	lsls	r3, r3, #24
 8013b32:	b09d      	sub	sp, #116	; 0x74
 8013b34:	4607      	mov	r7, r0
 8013b36:	460d      	mov	r5, r1
 8013b38:	4614      	mov	r4, r2
 8013b3a:	d50e      	bpl.n	8013b5a <_svfiprintf_r+0x32>
 8013b3c:	690b      	ldr	r3, [r1, #16]
 8013b3e:	b963      	cbnz	r3, 8013b5a <_svfiprintf_r+0x32>
 8013b40:	2140      	movs	r1, #64	; 0x40
 8013b42:	f7ff ff3b 	bl	80139bc <_malloc_r>
 8013b46:	6028      	str	r0, [r5, #0]
 8013b48:	6128      	str	r0, [r5, #16]
 8013b4a:	b920      	cbnz	r0, 8013b56 <_svfiprintf_r+0x2e>
 8013b4c:	230c      	movs	r3, #12
 8013b4e:	603b      	str	r3, [r7, #0]
 8013b50:	f04f 30ff 	mov.w	r0, #4294967295
 8013b54:	e0d1      	b.n	8013cfa <_svfiprintf_r+0x1d2>
 8013b56:	2340      	movs	r3, #64	; 0x40
 8013b58:	616b      	str	r3, [r5, #20]
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013b5e:	2320      	movs	r3, #32
 8013b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b68:	2330      	movs	r3, #48	; 0x30
 8013b6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013d14 <_svfiprintf_r+0x1ec>
 8013b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b72:	f04f 0901 	mov.w	r9, #1
 8013b76:	4623      	mov	r3, r4
 8013b78:	469a      	mov	sl, r3
 8013b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b7e:	b10a      	cbz	r2, 8013b84 <_svfiprintf_r+0x5c>
 8013b80:	2a25      	cmp	r2, #37	; 0x25
 8013b82:	d1f9      	bne.n	8013b78 <_svfiprintf_r+0x50>
 8013b84:	ebba 0b04 	subs.w	fp, sl, r4
 8013b88:	d00b      	beq.n	8013ba2 <_svfiprintf_r+0x7a>
 8013b8a:	465b      	mov	r3, fp
 8013b8c:	4622      	mov	r2, r4
 8013b8e:	4629      	mov	r1, r5
 8013b90:	4638      	mov	r0, r7
 8013b92:	f7ff ff6d 	bl	8013a70 <__ssputs_r>
 8013b96:	3001      	adds	r0, #1
 8013b98:	f000 80aa 	beq.w	8013cf0 <_svfiprintf_r+0x1c8>
 8013b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b9e:	445a      	add	r2, fp
 8013ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8013ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	f000 80a2 	beq.w	8013cf0 <_svfiprintf_r+0x1c8>
 8013bac:	2300      	movs	r3, #0
 8013bae:	f04f 32ff 	mov.w	r2, #4294967295
 8013bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bb6:	f10a 0a01 	add.w	sl, sl, #1
 8013bba:	9304      	str	r3, [sp, #16]
 8013bbc:	9307      	str	r3, [sp, #28]
 8013bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8013bc4:	4654      	mov	r4, sl
 8013bc6:	2205      	movs	r2, #5
 8013bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bcc:	4851      	ldr	r0, [pc, #324]	; (8013d14 <_svfiprintf_r+0x1ec>)
 8013bce:	f7ec fb4f 	bl	8000270 <memchr>
 8013bd2:	9a04      	ldr	r2, [sp, #16]
 8013bd4:	b9d8      	cbnz	r0, 8013c0e <_svfiprintf_r+0xe6>
 8013bd6:	06d0      	lsls	r0, r2, #27
 8013bd8:	bf44      	itt	mi
 8013bda:	2320      	movmi	r3, #32
 8013bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013be0:	0711      	lsls	r1, r2, #28
 8013be2:	bf44      	itt	mi
 8013be4:	232b      	movmi	r3, #43	; 0x2b
 8013be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bea:	f89a 3000 	ldrb.w	r3, [sl]
 8013bee:	2b2a      	cmp	r3, #42	; 0x2a
 8013bf0:	d015      	beq.n	8013c1e <_svfiprintf_r+0xf6>
 8013bf2:	9a07      	ldr	r2, [sp, #28]
 8013bf4:	4654      	mov	r4, sl
 8013bf6:	2000      	movs	r0, #0
 8013bf8:	f04f 0c0a 	mov.w	ip, #10
 8013bfc:	4621      	mov	r1, r4
 8013bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c02:	3b30      	subs	r3, #48	; 0x30
 8013c04:	2b09      	cmp	r3, #9
 8013c06:	d94e      	bls.n	8013ca6 <_svfiprintf_r+0x17e>
 8013c08:	b1b0      	cbz	r0, 8013c38 <_svfiprintf_r+0x110>
 8013c0a:	9207      	str	r2, [sp, #28]
 8013c0c:	e014      	b.n	8013c38 <_svfiprintf_r+0x110>
 8013c0e:	eba0 0308 	sub.w	r3, r0, r8
 8013c12:	fa09 f303 	lsl.w	r3, r9, r3
 8013c16:	4313      	orrs	r3, r2
 8013c18:	9304      	str	r3, [sp, #16]
 8013c1a:	46a2      	mov	sl, r4
 8013c1c:	e7d2      	b.n	8013bc4 <_svfiprintf_r+0x9c>
 8013c1e:	9b03      	ldr	r3, [sp, #12]
 8013c20:	1d19      	adds	r1, r3, #4
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	9103      	str	r1, [sp, #12]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	bfbb      	ittet	lt
 8013c2a:	425b      	neglt	r3, r3
 8013c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8013c30:	9307      	strge	r3, [sp, #28]
 8013c32:	9307      	strlt	r3, [sp, #28]
 8013c34:	bfb8      	it	lt
 8013c36:	9204      	strlt	r2, [sp, #16]
 8013c38:	7823      	ldrb	r3, [r4, #0]
 8013c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8013c3c:	d10c      	bne.n	8013c58 <_svfiprintf_r+0x130>
 8013c3e:	7863      	ldrb	r3, [r4, #1]
 8013c40:	2b2a      	cmp	r3, #42	; 0x2a
 8013c42:	d135      	bne.n	8013cb0 <_svfiprintf_r+0x188>
 8013c44:	9b03      	ldr	r3, [sp, #12]
 8013c46:	1d1a      	adds	r2, r3, #4
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	9203      	str	r2, [sp, #12]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	bfb8      	it	lt
 8013c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c54:	3402      	adds	r4, #2
 8013c56:	9305      	str	r3, [sp, #20]
 8013c58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013d24 <_svfiprintf_r+0x1fc>
 8013c5c:	7821      	ldrb	r1, [r4, #0]
 8013c5e:	2203      	movs	r2, #3
 8013c60:	4650      	mov	r0, sl
 8013c62:	f7ec fb05 	bl	8000270 <memchr>
 8013c66:	b140      	cbz	r0, 8013c7a <_svfiprintf_r+0x152>
 8013c68:	2340      	movs	r3, #64	; 0x40
 8013c6a:	eba0 000a 	sub.w	r0, r0, sl
 8013c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8013c72:	9b04      	ldr	r3, [sp, #16]
 8013c74:	4303      	orrs	r3, r0
 8013c76:	3401      	adds	r4, #1
 8013c78:	9304      	str	r3, [sp, #16]
 8013c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c7e:	4826      	ldr	r0, [pc, #152]	; (8013d18 <_svfiprintf_r+0x1f0>)
 8013c80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c84:	2206      	movs	r2, #6
 8013c86:	f7ec faf3 	bl	8000270 <memchr>
 8013c8a:	2800      	cmp	r0, #0
 8013c8c:	d038      	beq.n	8013d00 <_svfiprintf_r+0x1d8>
 8013c8e:	4b23      	ldr	r3, [pc, #140]	; (8013d1c <_svfiprintf_r+0x1f4>)
 8013c90:	bb1b      	cbnz	r3, 8013cda <_svfiprintf_r+0x1b2>
 8013c92:	9b03      	ldr	r3, [sp, #12]
 8013c94:	3307      	adds	r3, #7
 8013c96:	f023 0307 	bic.w	r3, r3, #7
 8013c9a:	3308      	adds	r3, #8
 8013c9c:	9303      	str	r3, [sp, #12]
 8013c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ca0:	4433      	add	r3, r6
 8013ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8013ca4:	e767      	b.n	8013b76 <_svfiprintf_r+0x4e>
 8013ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013caa:	460c      	mov	r4, r1
 8013cac:	2001      	movs	r0, #1
 8013cae:	e7a5      	b.n	8013bfc <_svfiprintf_r+0xd4>
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	3401      	adds	r4, #1
 8013cb4:	9305      	str	r3, [sp, #20]
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	f04f 0c0a 	mov.w	ip, #10
 8013cbc:	4620      	mov	r0, r4
 8013cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cc2:	3a30      	subs	r2, #48	; 0x30
 8013cc4:	2a09      	cmp	r2, #9
 8013cc6:	d903      	bls.n	8013cd0 <_svfiprintf_r+0x1a8>
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d0c5      	beq.n	8013c58 <_svfiprintf_r+0x130>
 8013ccc:	9105      	str	r1, [sp, #20]
 8013cce:	e7c3      	b.n	8013c58 <_svfiprintf_r+0x130>
 8013cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	e7f0      	b.n	8013cbc <_svfiprintf_r+0x194>
 8013cda:	ab03      	add	r3, sp, #12
 8013cdc:	9300      	str	r3, [sp, #0]
 8013cde:	462a      	mov	r2, r5
 8013ce0:	4b0f      	ldr	r3, [pc, #60]	; (8013d20 <_svfiprintf_r+0x1f8>)
 8013ce2:	a904      	add	r1, sp, #16
 8013ce4:	4638      	mov	r0, r7
 8013ce6:	f3af 8000 	nop.w
 8013cea:	1c42      	adds	r2, r0, #1
 8013cec:	4606      	mov	r6, r0
 8013cee:	d1d6      	bne.n	8013c9e <_svfiprintf_r+0x176>
 8013cf0:	89ab      	ldrh	r3, [r5, #12]
 8013cf2:	065b      	lsls	r3, r3, #25
 8013cf4:	f53f af2c 	bmi.w	8013b50 <_svfiprintf_r+0x28>
 8013cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cfa:	b01d      	add	sp, #116	; 0x74
 8013cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d00:	ab03      	add	r3, sp, #12
 8013d02:	9300      	str	r3, [sp, #0]
 8013d04:	462a      	mov	r2, r5
 8013d06:	4b06      	ldr	r3, [pc, #24]	; (8013d20 <_svfiprintf_r+0x1f8>)
 8013d08:	a904      	add	r1, sp, #16
 8013d0a:	4638      	mov	r0, r7
 8013d0c:	f000 f9d4 	bl	80140b8 <_printf_i>
 8013d10:	e7eb      	b.n	8013cea <_svfiprintf_r+0x1c2>
 8013d12:	bf00      	nop
 8013d14:	08039870 	.word	0x08039870
 8013d18:	0803987a 	.word	0x0803987a
 8013d1c:	00000000 	.word	0x00000000
 8013d20:	08013a71 	.word	0x08013a71
 8013d24:	08039876 	.word	0x08039876

08013d28 <__sfputc_r>:
 8013d28:	6893      	ldr	r3, [r2, #8]
 8013d2a:	3b01      	subs	r3, #1
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	b410      	push	{r4}
 8013d30:	6093      	str	r3, [r2, #8]
 8013d32:	da08      	bge.n	8013d46 <__sfputc_r+0x1e>
 8013d34:	6994      	ldr	r4, [r2, #24]
 8013d36:	42a3      	cmp	r3, r4
 8013d38:	db01      	blt.n	8013d3e <__sfputc_r+0x16>
 8013d3a:	290a      	cmp	r1, #10
 8013d3c:	d103      	bne.n	8013d46 <__sfputc_r+0x1e>
 8013d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d42:	f000 bb33 	b.w	80143ac <__swbuf_r>
 8013d46:	6813      	ldr	r3, [r2, #0]
 8013d48:	1c58      	adds	r0, r3, #1
 8013d4a:	6010      	str	r0, [r2, #0]
 8013d4c:	7019      	strb	r1, [r3, #0]
 8013d4e:	4608      	mov	r0, r1
 8013d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d54:	4770      	bx	lr

08013d56 <__sfputs_r>:
 8013d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d58:	4606      	mov	r6, r0
 8013d5a:	460f      	mov	r7, r1
 8013d5c:	4614      	mov	r4, r2
 8013d5e:	18d5      	adds	r5, r2, r3
 8013d60:	42ac      	cmp	r4, r5
 8013d62:	d101      	bne.n	8013d68 <__sfputs_r+0x12>
 8013d64:	2000      	movs	r0, #0
 8013d66:	e007      	b.n	8013d78 <__sfputs_r+0x22>
 8013d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d6c:	463a      	mov	r2, r7
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f7ff ffda 	bl	8013d28 <__sfputc_r>
 8013d74:	1c43      	adds	r3, r0, #1
 8013d76:	d1f3      	bne.n	8013d60 <__sfputs_r+0xa>
 8013d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d7c <_vfiprintf_r>:
 8013d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d80:	460d      	mov	r5, r1
 8013d82:	b09d      	sub	sp, #116	; 0x74
 8013d84:	4614      	mov	r4, r2
 8013d86:	4698      	mov	r8, r3
 8013d88:	4606      	mov	r6, r0
 8013d8a:	b118      	cbz	r0, 8013d94 <_vfiprintf_r+0x18>
 8013d8c:	6983      	ldr	r3, [r0, #24]
 8013d8e:	b90b      	cbnz	r3, 8013d94 <_vfiprintf_r+0x18>
 8013d90:	f7ff fd0a 	bl	80137a8 <__sinit>
 8013d94:	4b89      	ldr	r3, [pc, #548]	; (8013fbc <_vfiprintf_r+0x240>)
 8013d96:	429d      	cmp	r5, r3
 8013d98:	d11b      	bne.n	8013dd2 <_vfiprintf_r+0x56>
 8013d9a:	6875      	ldr	r5, [r6, #4]
 8013d9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d9e:	07d9      	lsls	r1, r3, #31
 8013da0:	d405      	bmi.n	8013dae <_vfiprintf_r+0x32>
 8013da2:	89ab      	ldrh	r3, [r5, #12]
 8013da4:	059a      	lsls	r2, r3, #22
 8013da6:	d402      	bmi.n	8013dae <_vfiprintf_r+0x32>
 8013da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013daa:	f7ff fdad 	bl	8013908 <__retarget_lock_acquire_recursive>
 8013dae:	89ab      	ldrh	r3, [r5, #12]
 8013db0:	071b      	lsls	r3, r3, #28
 8013db2:	d501      	bpl.n	8013db8 <_vfiprintf_r+0x3c>
 8013db4:	692b      	ldr	r3, [r5, #16]
 8013db6:	b9eb      	cbnz	r3, 8013df4 <_vfiprintf_r+0x78>
 8013db8:	4629      	mov	r1, r5
 8013dba:	4630      	mov	r0, r6
 8013dbc:	f000 fb5a 	bl	8014474 <__swsetup_r>
 8013dc0:	b1c0      	cbz	r0, 8013df4 <_vfiprintf_r+0x78>
 8013dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dc4:	07dc      	lsls	r4, r3, #31
 8013dc6:	d50e      	bpl.n	8013de6 <_vfiprintf_r+0x6a>
 8013dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8013dcc:	b01d      	add	sp, #116	; 0x74
 8013dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd2:	4b7b      	ldr	r3, [pc, #492]	; (8013fc0 <_vfiprintf_r+0x244>)
 8013dd4:	429d      	cmp	r5, r3
 8013dd6:	d101      	bne.n	8013ddc <_vfiprintf_r+0x60>
 8013dd8:	68b5      	ldr	r5, [r6, #8]
 8013dda:	e7df      	b.n	8013d9c <_vfiprintf_r+0x20>
 8013ddc:	4b79      	ldr	r3, [pc, #484]	; (8013fc4 <_vfiprintf_r+0x248>)
 8013dde:	429d      	cmp	r5, r3
 8013de0:	bf08      	it	eq
 8013de2:	68f5      	ldreq	r5, [r6, #12]
 8013de4:	e7da      	b.n	8013d9c <_vfiprintf_r+0x20>
 8013de6:	89ab      	ldrh	r3, [r5, #12]
 8013de8:	0598      	lsls	r0, r3, #22
 8013dea:	d4ed      	bmi.n	8013dc8 <_vfiprintf_r+0x4c>
 8013dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dee:	f7ff fd8c 	bl	801390a <__retarget_lock_release_recursive>
 8013df2:	e7e9      	b.n	8013dc8 <_vfiprintf_r+0x4c>
 8013df4:	2300      	movs	r3, #0
 8013df6:	9309      	str	r3, [sp, #36]	; 0x24
 8013df8:	2320      	movs	r3, #32
 8013dfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e02:	2330      	movs	r3, #48	; 0x30
 8013e04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013fc8 <_vfiprintf_r+0x24c>
 8013e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e0c:	f04f 0901 	mov.w	r9, #1
 8013e10:	4623      	mov	r3, r4
 8013e12:	469a      	mov	sl, r3
 8013e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e18:	b10a      	cbz	r2, 8013e1e <_vfiprintf_r+0xa2>
 8013e1a:	2a25      	cmp	r2, #37	; 0x25
 8013e1c:	d1f9      	bne.n	8013e12 <_vfiprintf_r+0x96>
 8013e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8013e22:	d00b      	beq.n	8013e3c <_vfiprintf_r+0xc0>
 8013e24:	465b      	mov	r3, fp
 8013e26:	4622      	mov	r2, r4
 8013e28:	4629      	mov	r1, r5
 8013e2a:	4630      	mov	r0, r6
 8013e2c:	f7ff ff93 	bl	8013d56 <__sfputs_r>
 8013e30:	3001      	adds	r0, #1
 8013e32:	f000 80aa 	beq.w	8013f8a <_vfiprintf_r+0x20e>
 8013e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e38:	445a      	add	r2, fp
 8013e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8013e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f000 80a2 	beq.w	8013f8a <_vfiprintf_r+0x20e>
 8013e46:	2300      	movs	r3, #0
 8013e48:	f04f 32ff 	mov.w	r2, #4294967295
 8013e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e50:	f10a 0a01 	add.w	sl, sl, #1
 8013e54:	9304      	str	r3, [sp, #16]
 8013e56:	9307      	str	r3, [sp, #28]
 8013e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8013e5e:	4654      	mov	r4, sl
 8013e60:	2205      	movs	r2, #5
 8013e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e66:	4858      	ldr	r0, [pc, #352]	; (8013fc8 <_vfiprintf_r+0x24c>)
 8013e68:	f7ec fa02 	bl	8000270 <memchr>
 8013e6c:	9a04      	ldr	r2, [sp, #16]
 8013e6e:	b9d8      	cbnz	r0, 8013ea8 <_vfiprintf_r+0x12c>
 8013e70:	06d1      	lsls	r1, r2, #27
 8013e72:	bf44      	itt	mi
 8013e74:	2320      	movmi	r3, #32
 8013e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e7a:	0713      	lsls	r3, r2, #28
 8013e7c:	bf44      	itt	mi
 8013e7e:	232b      	movmi	r3, #43	; 0x2b
 8013e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e84:	f89a 3000 	ldrb.w	r3, [sl]
 8013e88:	2b2a      	cmp	r3, #42	; 0x2a
 8013e8a:	d015      	beq.n	8013eb8 <_vfiprintf_r+0x13c>
 8013e8c:	9a07      	ldr	r2, [sp, #28]
 8013e8e:	4654      	mov	r4, sl
 8013e90:	2000      	movs	r0, #0
 8013e92:	f04f 0c0a 	mov.w	ip, #10
 8013e96:	4621      	mov	r1, r4
 8013e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e9c:	3b30      	subs	r3, #48	; 0x30
 8013e9e:	2b09      	cmp	r3, #9
 8013ea0:	d94e      	bls.n	8013f40 <_vfiprintf_r+0x1c4>
 8013ea2:	b1b0      	cbz	r0, 8013ed2 <_vfiprintf_r+0x156>
 8013ea4:	9207      	str	r2, [sp, #28]
 8013ea6:	e014      	b.n	8013ed2 <_vfiprintf_r+0x156>
 8013ea8:	eba0 0308 	sub.w	r3, r0, r8
 8013eac:	fa09 f303 	lsl.w	r3, r9, r3
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	9304      	str	r3, [sp, #16]
 8013eb4:	46a2      	mov	sl, r4
 8013eb6:	e7d2      	b.n	8013e5e <_vfiprintf_r+0xe2>
 8013eb8:	9b03      	ldr	r3, [sp, #12]
 8013eba:	1d19      	adds	r1, r3, #4
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	9103      	str	r1, [sp, #12]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	bfbb      	ittet	lt
 8013ec4:	425b      	neglt	r3, r3
 8013ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8013eca:	9307      	strge	r3, [sp, #28]
 8013ecc:	9307      	strlt	r3, [sp, #28]
 8013ece:	bfb8      	it	lt
 8013ed0:	9204      	strlt	r2, [sp, #16]
 8013ed2:	7823      	ldrb	r3, [r4, #0]
 8013ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8013ed6:	d10c      	bne.n	8013ef2 <_vfiprintf_r+0x176>
 8013ed8:	7863      	ldrb	r3, [r4, #1]
 8013eda:	2b2a      	cmp	r3, #42	; 0x2a
 8013edc:	d135      	bne.n	8013f4a <_vfiprintf_r+0x1ce>
 8013ede:	9b03      	ldr	r3, [sp, #12]
 8013ee0:	1d1a      	adds	r2, r3, #4
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	9203      	str	r2, [sp, #12]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	bfb8      	it	lt
 8013eea:	f04f 33ff 	movlt.w	r3, #4294967295
 8013eee:	3402      	adds	r4, #2
 8013ef0:	9305      	str	r3, [sp, #20]
 8013ef2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013fd8 <_vfiprintf_r+0x25c>
 8013ef6:	7821      	ldrb	r1, [r4, #0]
 8013ef8:	2203      	movs	r2, #3
 8013efa:	4650      	mov	r0, sl
 8013efc:	f7ec f9b8 	bl	8000270 <memchr>
 8013f00:	b140      	cbz	r0, 8013f14 <_vfiprintf_r+0x198>
 8013f02:	2340      	movs	r3, #64	; 0x40
 8013f04:	eba0 000a 	sub.w	r0, r0, sl
 8013f08:	fa03 f000 	lsl.w	r0, r3, r0
 8013f0c:	9b04      	ldr	r3, [sp, #16]
 8013f0e:	4303      	orrs	r3, r0
 8013f10:	3401      	adds	r4, #1
 8013f12:	9304      	str	r3, [sp, #16]
 8013f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f18:	482c      	ldr	r0, [pc, #176]	; (8013fcc <_vfiprintf_r+0x250>)
 8013f1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f1e:	2206      	movs	r2, #6
 8013f20:	f7ec f9a6 	bl	8000270 <memchr>
 8013f24:	2800      	cmp	r0, #0
 8013f26:	d03f      	beq.n	8013fa8 <_vfiprintf_r+0x22c>
 8013f28:	4b29      	ldr	r3, [pc, #164]	; (8013fd0 <_vfiprintf_r+0x254>)
 8013f2a:	bb1b      	cbnz	r3, 8013f74 <_vfiprintf_r+0x1f8>
 8013f2c:	9b03      	ldr	r3, [sp, #12]
 8013f2e:	3307      	adds	r3, #7
 8013f30:	f023 0307 	bic.w	r3, r3, #7
 8013f34:	3308      	adds	r3, #8
 8013f36:	9303      	str	r3, [sp, #12]
 8013f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f3a:	443b      	add	r3, r7
 8013f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8013f3e:	e767      	b.n	8013e10 <_vfiprintf_r+0x94>
 8013f40:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f44:	460c      	mov	r4, r1
 8013f46:	2001      	movs	r0, #1
 8013f48:	e7a5      	b.n	8013e96 <_vfiprintf_r+0x11a>
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	3401      	adds	r4, #1
 8013f4e:	9305      	str	r3, [sp, #20]
 8013f50:	4619      	mov	r1, r3
 8013f52:	f04f 0c0a 	mov.w	ip, #10
 8013f56:	4620      	mov	r0, r4
 8013f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f5c:	3a30      	subs	r2, #48	; 0x30
 8013f5e:	2a09      	cmp	r2, #9
 8013f60:	d903      	bls.n	8013f6a <_vfiprintf_r+0x1ee>
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d0c5      	beq.n	8013ef2 <_vfiprintf_r+0x176>
 8013f66:	9105      	str	r1, [sp, #20]
 8013f68:	e7c3      	b.n	8013ef2 <_vfiprintf_r+0x176>
 8013f6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f6e:	4604      	mov	r4, r0
 8013f70:	2301      	movs	r3, #1
 8013f72:	e7f0      	b.n	8013f56 <_vfiprintf_r+0x1da>
 8013f74:	ab03      	add	r3, sp, #12
 8013f76:	9300      	str	r3, [sp, #0]
 8013f78:	462a      	mov	r2, r5
 8013f7a:	4b16      	ldr	r3, [pc, #88]	; (8013fd4 <_vfiprintf_r+0x258>)
 8013f7c:	a904      	add	r1, sp, #16
 8013f7e:	4630      	mov	r0, r6
 8013f80:	f3af 8000 	nop.w
 8013f84:	4607      	mov	r7, r0
 8013f86:	1c78      	adds	r0, r7, #1
 8013f88:	d1d6      	bne.n	8013f38 <_vfiprintf_r+0x1bc>
 8013f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f8c:	07d9      	lsls	r1, r3, #31
 8013f8e:	d405      	bmi.n	8013f9c <_vfiprintf_r+0x220>
 8013f90:	89ab      	ldrh	r3, [r5, #12]
 8013f92:	059a      	lsls	r2, r3, #22
 8013f94:	d402      	bmi.n	8013f9c <_vfiprintf_r+0x220>
 8013f96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f98:	f7ff fcb7 	bl	801390a <__retarget_lock_release_recursive>
 8013f9c:	89ab      	ldrh	r3, [r5, #12]
 8013f9e:	065b      	lsls	r3, r3, #25
 8013fa0:	f53f af12 	bmi.w	8013dc8 <_vfiprintf_r+0x4c>
 8013fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fa6:	e711      	b.n	8013dcc <_vfiprintf_r+0x50>
 8013fa8:	ab03      	add	r3, sp, #12
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	462a      	mov	r2, r5
 8013fae:	4b09      	ldr	r3, [pc, #36]	; (8013fd4 <_vfiprintf_r+0x258>)
 8013fb0:	a904      	add	r1, sp, #16
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f000 f880 	bl	80140b8 <_printf_i>
 8013fb8:	e7e4      	b.n	8013f84 <_vfiprintf_r+0x208>
 8013fba:	bf00      	nop
 8013fbc:	08039830 	.word	0x08039830
 8013fc0:	08039850 	.word	0x08039850
 8013fc4:	08039810 	.word	0x08039810
 8013fc8:	08039870 	.word	0x08039870
 8013fcc:	0803987a 	.word	0x0803987a
 8013fd0:	00000000 	.word	0x00000000
 8013fd4:	08013d57 	.word	0x08013d57
 8013fd8:	08039876 	.word	0x08039876

08013fdc <_printf_common>:
 8013fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fe0:	4616      	mov	r6, r2
 8013fe2:	4699      	mov	r9, r3
 8013fe4:	688a      	ldr	r2, [r1, #8]
 8013fe6:	690b      	ldr	r3, [r1, #16]
 8013fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013fec:	4293      	cmp	r3, r2
 8013fee:	bfb8      	it	lt
 8013ff0:	4613      	movlt	r3, r2
 8013ff2:	6033      	str	r3, [r6, #0]
 8013ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013ff8:	4607      	mov	r7, r0
 8013ffa:	460c      	mov	r4, r1
 8013ffc:	b10a      	cbz	r2, 8014002 <_printf_common+0x26>
 8013ffe:	3301      	adds	r3, #1
 8014000:	6033      	str	r3, [r6, #0]
 8014002:	6823      	ldr	r3, [r4, #0]
 8014004:	0699      	lsls	r1, r3, #26
 8014006:	bf42      	ittt	mi
 8014008:	6833      	ldrmi	r3, [r6, #0]
 801400a:	3302      	addmi	r3, #2
 801400c:	6033      	strmi	r3, [r6, #0]
 801400e:	6825      	ldr	r5, [r4, #0]
 8014010:	f015 0506 	ands.w	r5, r5, #6
 8014014:	d106      	bne.n	8014024 <_printf_common+0x48>
 8014016:	f104 0a19 	add.w	sl, r4, #25
 801401a:	68e3      	ldr	r3, [r4, #12]
 801401c:	6832      	ldr	r2, [r6, #0]
 801401e:	1a9b      	subs	r3, r3, r2
 8014020:	42ab      	cmp	r3, r5
 8014022:	dc26      	bgt.n	8014072 <_printf_common+0x96>
 8014024:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014028:	1e13      	subs	r3, r2, #0
 801402a:	6822      	ldr	r2, [r4, #0]
 801402c:	bf18      	it	ne
 801402e:	2301      	movne	r3, #1
 8014030:	0692      	lsls	r2, r2, #26
 8014032:	d42b      	bmi.n	801408c <_printf_common+0xb0>
 8014034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014038:	4649      	mov	r1, r9
 801403a:	4638      	mov	r0, r7
 801403c:	47c0      	blx	r8
 801403e:	3001      	adds	r0, #1
 8014040:	d01e      	beq.n	8014080 <_printf_common+0xa4>
 8014042:	6823      	ldr	r3, [r4, #0]
 8014044:	68e5      	ldr	r5, [r4, #12]
 8014046:	6832      	ldr	r2, [r6, #0]
 8014048:	f003 0306 	and.w	r3, r3, #6
 801404c:	2b04      	cmp	r3, #4
 801404e:	bf08      	it	eq
 8014050:	1aad      	subeq	r5, r5, r2
 8014052:	68a3      	ldr	r3, [r4, #8]
 8014054:	6922      	ldr	r2, [r4, #16]
 8014056:	bf0c      	ite	eq
 8014058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801405c:	2500      	movne	r5, #0
 801405e:	4293      	cmp	r3, r2
 8014060:	bfc4      	itt	gt
 8014062:	1a9b      	subgt	r3, r3, r2
 8014064:	18ed      	addgt	r5, r5, r3
 8014066:	2600      	movs	r6, #0
 8014068:	341a      	adds	r4, #26
 801406a:	42b5      	cmp	r5, r6
 801406c:	d11a      	bne.n	80140a4 <_printf_common+0xc8>
 801406e:	2000      	movs	r0, #0
 8014070:	e008      	b.n	8014084 <_printf_common+0xa8>
 8014072:	2301      	movs	r3, #1
 8014074:	4652      	mov	r2, sl
 8014076:	4649      	mov	r1, r9
 8014078:	4638      	mov	r0, r7
 801407a:	47c0      	blx	r8
 801407c:	3001      	adds	r0, #1
 801407e:	d103      	bne.n	8014088 <_printf_common+0xac>
 8014080:	f04f 30ff 	mov.w	r0, #4294967295
 8014084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014088:	3501      	adds	r5, #1
 801408a:	e7c6      	b.n	801401a <_printf_common+0x3e>
 801408c:	18e1      	adds	r1, r4, r3
 801408e:	1c5a      	adds	r2, r3, #1
 8014090:	2030      	movs	r0, #48	; 0x30
 8014092:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014096:	4422      	add	r2, r4
 8014098:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801409c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80140a0:	3302      	adds	r3, #2
 80140a2:	e7c7      	b.n	8014034 <_printf_common+0x58>
 80140a4:	2301      	movs	r3, #1
 80140a6:	4622      	mov	r2, r4
 80140a8:	4649      	mov	r1, r9
 80140aa:	4638      	mov	r0, r7
 80140ac:	47c0      	blx	r8
 80140ae:	3001      	adds	r0, #1
 80140b0:	d0e6      	beq.n	8014080 <_printf_common+0xa4>
 80140b2:	3601      	adds	r6, #1
 80140b4:	e7d9      	b.n	801406a <_printf_common+0x8e>
	...

080140b8 <_printf_i>:
 80140b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80140bc:	460c      	mov	r4, r1
 80140be:	4691      	mov	r9, r2
 80140c0:	7e27      	ldrb	r7, [r4, #24]
 80140c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80140c4:	2f78      	cmp	r7, #120	; 0x78
 80140c6:	4680      	mov	r8, r0
 80140c8:	469a      	mov	sl, r3
 80140ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80140ce:	d807      	bhi.n	80140e0 <_printf_i+0x28>
 80140d0:	2f62      	cmp	r7, #98	; 0x62
 80140d2:	d80a      	bhi.n	80140ea <_printf_i+0x32>
 80140d4:	2f00      	cmp	r7, #0
 80140d6:	f000 80d8 	beq.w	801428a <_printf_i+0x1d2>
 80140da:	2f58      	cmp	r7, #88	; 0x58
 80140dc:	f000 80a3 	beq.w	8014226 <_printf_i+0x16e>
 80140e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80140e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80140e8:	e03a      	b.n	8014160 <_printf_i+0xa8>
 80140ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80140ee:	2b15      	cmp	r3, #21
 80140f0:	d8f6      	bhi.n	80140e0 <_printf_i+0x28>
 80140f2:	a001      	add	r0, pc, #4	; (adr r0, 80140f8 <_printf_i+0x40>)
 80140f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80140f8:	08014151 	.word	0x08014151
 80140fc:	08014165 	.word	0x08014165
 8014100:	080140e1 	.word	0x080140e1
 8014104:	080140e1 	.word	0x080140e1
 8014108:	080140e1 	.word	0x080140e1
 801410c:	080140e1 	.word	0x080140e1
 8014110:	08014165 	.word	0x08014165
 8014114:	080140e1 	.word	0x080140e1
 8014118:	080140e1 	.word	0x080140e1
 801411c:	080140e1 	.word	0x080140e1
 8014120:	080140e1 	.word	0x080140e1
 8014124:	08014271 	.word	0x08014271
 8014128:	08014195 	.word	0x08014195
 801412c:	08014253 	.word	0x08014253
 8014130:	080140e1 	.word	0x080140e1
 8014134:	080140e1 	.word	0x080140e1
 8014138:	08014293 	.word	0x08014293
 801413c:	080140e1 	.word	0x080140e1
 8014140:	08014195 	.word	0x08014195
 8014144:	080140e1 	.word	0x080140e1
 8014148:	080140e1 	.word	0x080140e1
 801414c:	0801425b 	.word	0x0801425b
 8014150:	680b      	ldr	r3, [r1, #0]
 8014152:	1d1a      	adds	r2, r3, #4
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	600a      	str	r2, [r1, #0]
 8014158:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801415c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014160:	2301      	movs	r3, #1
 8014162:	e0a3      	b.n	80142ac <_printf_i+0x1f4>
 8014164:	6825      	ldr	r5, [r4, #0]
 8014166:	6808      	ldr	r0, [r1, #0]
 8014168:	062e      	lsls	r6, r5, #24
 801416a:	f100 0304 	add.w	r3, r0, #4
 801416e:	d50a      	bpl.n	8014186 <_printf_i+0xce>
 8014170:	6805      	ldr	r5, [r0, #0]
 8014172:	600b      	str	r3, [r1, #0]
 8014174:	2d00      	cmp	r5, #0
 8014176:	da03      	bge.n	8014180 <_printf_i+0xc8>
 8014178:	232d      	movs	r3, #45	; 0x2d
 801417a:	426d      	negs	r5, r5
 801417c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014180:	485e      	ldr	r0, [pc, #376]	; (80142fc <_printf_i+0x244>)
 8014182:	230a      	movs	r3, #10
 8014184:	e019      	b.n	80141ba <_printf_i+0x102>
 8014186:	f015 0f40 	tst.w	r5, #64	; 0x40
 801418a:	6805      	ldr	r5, [r0, #0]
 801418c:	600b      	str	r3, [r1, #0]
 801418e:	bf18      	it	ne
 8014190:	b22d      	sxthne	r5, r5
 8014192:	e7ef      	b.n	8014174 <_printf_i+0xbc>
 8014194:	680b      	ldr	r3, [r1, #0]
 8014196:	6825      	ldr	r5, [r4, #0]
 8014198:	1d18      	adds	r0, r3, #4
 801419a:	6008      	str	r0, [r1, #0]
 801419c:	0628      	lsls	r0, r5, #24
 801419e:	d501      	bpl.n	80141a4 <_printf_i+0xec>
 80141a0:	681d      	ldr	r5, [r3, #0]
 80141a2:	e002      	b.n	80141aa <_printf_i+0xf2>
 80141a4:	0669      	lsls	r1, r5, #25
 80141a6:	d5fb      	bpl.n	80141a0 <_printf_i+0xe8>
 80141a8:	881d      	ldrh	r5, [r3, #0]
 80141aa:	4854      	ldr	r0, [pc, #336]	; (80142fc <_printf_i+0x244>)
 80141ac:	2f6f      	cmp	r7, #111	; 0x6f
 80141ae:	bf0c      	ite	eq
 80141b0:	2308      	moveq	r3, #8
 80141b2:	230a      	movne	r3, #10
 80141b4:	2100      	movs	r1, #0
 80141b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80141ba:	6866      	ldr	r6, [r4, #4]
 80141bc:	60a6      	str	r6, [r4, #8]
 80141be:	2e00      	cmp	r6, #0
 80141c0:	bfa2      	ittt	ge
 80141c2:	6821      	ldrge	r1, [r4, #0]
 80141c4:	f021 0104 	bicge.w	r1, r1, #4
 80141c8:	6021      	strge	r1, [r4, #0]
 80141ca:	b90d      	cbnz	r5, 80141d0 <_printf_i+0x118>
 80141cc:	2e00      	cmp	r6, #0
 80141ce:	d04d      	beq.n	801426c <_printf_i+0x1b4>
 80141d0:	4616      	mov	r6, r2
 80141d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80141d6:	fb03 5711 	mls	r7, r3, r1, r5
 80141da:	5dc7      	ldrb	r7, [r0, r7]
 80141dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80141e0:	462f      	mov	r7, r5
 80141e2:	42bb      	cmp	r3, r7
 80141e4:	460d      	mov	r5, r1
 80141e6:	d9f4      	bls.n	80141d2 <_printf_i+0x11a>
 80141e8:	2b08      	cmp	r3, #8
 80141ea:	d10b      	bne.n	8014204 <_printf_i+0x14c>
 80141ec:	6823      	ldr	r3, [r4, #0]
 80141ee:	07df      	lsls	r7, r3, #31
 80141f0:	d508      	bpl.n	8014204 <_printf_i+0x14c>
 80141f2:	6923      	ldr	r3, [r4, #16]
 80141f4:	6861      	ldr	r1, [r4, #4]
 80141f6:	4299      	cmp	r1, r3
 80141f8:	bfde      	ittt	le
 80141fa:	2330      	movle	r3, #48	; 0x30
 80141fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014200:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014204:	1b92      	subs	r2, r2, r6
 8014206:	6122      	str	r2, [r4, #16]
 8014208:	f8cd a000 	str.w	sl, [sp]
 801420c:	464b      	mov	r3, r9
 801420e:	aa03      	add	r2, sp, #12
 8014210:	4621      	mov	r1, r4
 8014212:	4640      	mov	r0, r8
 8014214:	f7ff fee2 	bl	8013fdc <_printf_common>
 8014218:	3001      	adds	r0, #1
 801421a:	d14c      	bne.n	80142b6 <_printf_i+0x1fe>
 801421c:	f04f 30ff 	mov.w	r0, #4294967295
 8014220:	b004      	add	sp, #16
 8014222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014226:	4835      	ldr	r0, [pc, #212]	; (80142fc <_printf_i+0x244>)
 8014228:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801422c:	6823      	ldr	r3, [r4, #0]
 801422e:	680e      	ldr	r6, [r1, #0]
 8014230:	061f      	lsls	r7, r3, #24
 8014232:	f856 5b04 	ldr.w	r5, [r6], #4
 8014236:	600e      	str	r6, [r1, #0]
 8014238:	d514      	bpl.n	8014264 <_printf_i+0x1ac>
 801423a:	07d9      	lsls	r1, r3, #31
 801423c:	bf44      	itt	mi
 801423e:	f043 0320 	orrmi.w	r3, r3, #32
 8014242:	6023      	strmi	r3, [r4, #0]
 8014244:	b91d      	cbnz	r5, 801424e <_printf_i+0x196>
 8014246:	6823      	ldr	r3, [r4, #0]
 8014248:	f023 0320 	bic.w	r3, r3, #32
 801424c:	6023      	str	r3, [r4, #0]
 801424e:	2310      	movs	r3, #16
 8014250:	e7b0      	b.n	80141b4 <_printf_i+0xfc>
 8014252:	6823      	ldr	r3, [r4, #0]
 8014254:	f043 0320 	orr.w	r3, r3, #32
 8014258:	6023      	str	r3, [r4, #0]
 801425a:	2378      	movs	r3, #120	; 0x78
 801425c:	4828      	ldr	r0, [pc, #160]	; (8014300 <_printf_i+0x248>)
 801425e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014262:	e7e3      	b.n	801422c <_printf_i+0x174>
 8014264:	065e      	lsls	r6, r3, #25
 8014266:	bf48      	it	mi
 8014268:	b2ad      	uxthmi	r5, r5
 801426a:	e7e6      	b.n	801423a <_printf_i+0x182>
 801426c:	4616      	mov	r6, r2
 801426e:	e7bb      	b.n	80141e8 <_printf_i+0x130>
 8014270:	680b      	ldr	r3, [r1, #0]
 8014272:	6826      	ldr	r6, [r4, #0]
 8014274:	6960      	ldr	r0, [r4, #20]
 8014276:	1d1d      	adds	r5, r3, #4
 8014278:	600d      	str	r5, [r1, #0]
 801427a:	0635      	lsls	r5, r6, #24
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	d501      	bpl.n	8014284 <_printf_i+0x1cc>
 8014280:	6018      	str	r0, [r3, #0]
 8014282:	e002      	b.n	801428a <_printf_i+0x1d2>
 8014284:	0671      	lsls	r1, r6, #25
 8014286:	d5fb      	bpl.n	8014280 <_printf_i+0x1c8>
 8014288:	8018      	strh	r0, [r3, #0]
 801428a:	2300      	movs	r3, #0
 801428c:	6123      	str	r3, [r4, #16]
 801428e:	4616      	mov	r6, r2
 8014290:	e7ba      	b.n	8014208 <_printf_i+0x150>
 8014292:	680b      	ldr	r3, [r1, #0]
 8014294:	1d1a      	adds	r2, r3, #4
 8014296:	600a      	str	r2, [r1, #0]
 8014298:	681e      	ldr	r6, [r3, #0]
 801429a:	6862      	ldr	r2, [r4, #4]
 801429c:	2100      	movs	r1, #0
 801429e:	4630      	mov	r0, r6
 80142a0:	f7eb ffe6 	bl	8000270 <memchr>
 80142a4:	b108      	cbz	r0, 80142aa <_printf_i+0x1f2>
 80142a6:	1b80      	subs	r0, r0, r6
 80142a8:	6060      	str	r0, [r4, #4]
 80142aa:	6863      	ldr	r3, [r4, #4]
 80142ac:	6123      	str	r3, [r4, #16]
 80142ae:	2300      	movs	r3, #0
 80142b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80142b4:	e7a8      	b.n	8014208 <_printf_i+0x150>
 80142b6:	6923      	ldr	r3, [r4, #16]
 80142b8:	4632      	mov	r2, r6
 80142ba:	4649      	mov	r1, r9
 80142bc:	4640      	mov	r0, r8
 80142be:	47d0      	blx	sl
 80142c0:	3001      	adds	r0, #1
 80142c2:	d0ab      	beq.n	801421c <_printf_i+0x164>
 80142c4:	6823      	ldr	r3, [r4, #0]
 80142c6:	079b      	lsls	r3, r3, #30
 80142c8:	d413      	bmi.n	80142f2 <_printf_i+0x23a>
 80142ca:	68e0      	ldr	r0, [r4, #12]
 80142cc:	9b03      	ldr	r3, [sp, #12]
 80142ce:	4298      	cmp	r0, r3
 80142d0:	bfb8      	it	lt
 80142d2:	4618      	movlt	r0, r3
 80142d4:	e7a4      	b.n	8014220 <_printf_i+0x168>
 80142d6:	2301      	movs	r3, #1
 80142d8:	4632      	mov	r2, r6
 80142da:	4649      	mov	r1, r9
 80142dc:	4640      	mov	r0, r8
 80142de:	47d0      	blx	sl
 80142e0:	3001      	adds	r0, #1
 80142e2:	d09b      	beq.n	801421c <_printf_i+0x164>
 80142e4:	3501      	adds	r5, #1
 80142e6:	68e3      	ldr	r3, [r4, #12]
 80142e8:	9903      	ldr	r1, [sp, #12]
 80142ea:	1a5b      	subs	r3, r3, r1
 80142ec:	42ab      	cmp	r3, r5
 80142ee:	dcf2      	bgt.n	80142d6 <_printf_i+0x21e>
 80142f0:	e7eb      	b.n	80142ca <_printf_i+0x212>
 80142f2:	2500      	movs	r5, #0
 80142f4:	f104 0619 	add.w	r6, r4, #25
 80142f8:	e7f5      	b.n	80142e6 <_printf_i+0x22e>
 80142fa:	bf00      	nop
 80142fc:	08039881 	.word	0x08039881
 8014300:	08039892 	.word	0x08039892

08014304 <_sbrk_r>:
 8014304:	b538      	push	{r3, r4, r5, lr}
 8014306:	4d06      	ldr	r5, [pc, #24]	; (8014320 <_sbrk_r+0x1c>)
 8014308:	2300      	movs	r3, #0
 801430a:	4604      	mov	r4, r0
 801430c:	4608      	mov	r0, r1
 801430e:	602b      	str	r3, [r5, #0]
 8014310:	f7ec fbfe 	bl	8000b10 <_sbrk>
 8014314:	1c43      	adds	r3, r0, #1
 8014316:	d102      	bne.n	801431e <_sbrk_r+0x1a>
 8014318:	682b      	ldr	r3, [r5, #0]
 801431a:	b103      	cbz	r3, 801431e <_sbrk_r+0x1a>
 801431c:	6023      	str	r3, [r4, #0]
 801431e:	bd38      	pop	{r3, r4, r5, pc}
 8014320:	20007b68 	.word	0x20007b68

08014324 <__sread>:
 8014324:	b510      	push	{r4, lr}
 8014326:	460c      	mov	r4, r1
 8014328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801432c:	f000 fa92 	bl	8014854 <_read_r>
 8014330:	2800      	cmp	r0, #0
 8014332:	bfab      	itete	ge
 8014334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014336:	89a3      	ldrhlt	r3, [r4, #12]
 8014338:	181b      	addge	r3, r3, r0
 801433a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801433e:	bfac      	ite	ge
 8014340:	6563      	strge	r3, [r4, #84]	; 0x54
 8014342:	81a3      	strhlt	r3, [r4, #12]
 8014344:	bd10      	pop	{r4, pc}

08014346 <__swrite>:
 8014346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801434a:	461f      	mov	r7, r3
 801434c:	898b      	ldrh	r3, [r1, #12]
 801434e:	05db      	lsls	r3, r3, #23
 8014350:	4605      	mov	r5, r0
 8014352:	460c      	mov	r4, r1
 8014354:	4616      	mov	r6, r2
 8014356:	d505      	bpl.n	8014364 <__swrite+0x1e>
 8014358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801435c:	2302      	movs	r3, #2
 801435e:	2200      	movs	r2, #0
 8014360:	f000 f9d0 	bl	8014704 <_lseek_r>
 8014364:	89a3      	ldrh	r3, [r4, #12]
 8014366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801436a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801436e:	81a3      	strh	r3, [r4, #12]
 8014370:	4632      	mov	r2, r6
 8014372:	463b      	mov	r3, r7
 8014374:	4628      	mov	r0, r5
 8014376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801437a:	f000 b869 	b.w	8014450 <_write_r>

0801437e <__sseek>:
 801437e:	b510      	push	{r4, lr}
 8014380:	460c      	mov	r4, r1
 8014382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014386:	f000 f9bd 	bl	8014704 <_lseek_r>
 801438a:	1c43      	adds	r3, r0, #1
 801438c:	89a3      	ldrh	r3, [r4, #12]
 801438e:	bf15      	itete	ne
 8014390:	6560      	strne	r0, [r4, #84]	; 0x54
 8014392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801439a:	81a3      	strheq	r3, [r4, #12]
 801439c:	bf18      	it	ne
 801439e:	81a3      	strhne	r3, [r4, #12]
 80143a0:	bd10      	pop	{r4, pc}

080143a2 <__sclose>:
 80143a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143a6:	f000 b8db 	b.w	8014560 <_close_r>
	...

080143ac <__swbuf_r>:
 80143ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ae:	460e      	mov	r6, r1
 80143b0:	4614      	mov	r4, r2
 80143b2:	4605      	mov	r5, r0
 80143b4:	b118      	cbz	r0, 80143be <__swbuf_r+0x12>
 80143b6:	6983      	ldr	r3, [r0, #24]
 80143b8:	b90b      	cbnz	r3, 80143be <__swbuf_r+0x12>
 80143ba:	f7ff f9f5 	bl	80137a8 <__sinit>
 80143be:	4b21      	ldr	r3, [pc, #132]	; (8014444 <__swbuf_r+0x98>)
 80143c0:	429c      	cmp	r4, r3
 80143c2:	d12b      	bne.n	801441c <__swbuf_r+0x70>
 80143c4:	686c      	ldr	r4, [r5, #4]
 80143c6:	69a3      	ldr	r3, [r4, #24]
 80143c8:	60a3      	str	r3, [r4, #8]
 80143ca:	89a3      	ldrh	r3, [r4, #12]
 80143cc:	071a      	lsls	r2, r3, #28
 80143ce:	d52f      	bpl.n	8014430 <__swbuf_r+0x84>
 80143d0:	6923      	ldr	r3, [r4, #16]
 80143d2:	b36b      	cbz	r3, 8014430 <__swbuf_r+0x84>
 80143d4:	6923      	ldr	r3, [r4, #16]
 80143d6:	6820      	ldr	r0, [r4, #0]
 80143d8:	1ac0      	subs	r0, r0, r3
 80143da:	6963      	ldr	r3, [r4, #20]
 80143dc:	b2f6      	uxtb	r6, r6
 80143de:	4283      	cmp	r3, r0
 80143e0:	4637      	mov	r7, r6
 80143e2:	dc04      	bgt.n	80143ee <__swbuf_r+0x42>
 80143e4:	4621      	mov	r1, r4
 80143e6:	4628      	mov	r0, r5
 80143e8:	f000 f950 	bl	801468c <_fflush_r>
 80143ec:	bb30      	cbnz	r0, 801443c <__swbuf_r+0x90>
 80143ee:	68a3      	ldr	r3, [r4, #8]
 80143f0:	3b01      	subs	r3, #1
 80143f2:	60a3      	str	r3, [r4, #8]
 80143f4:	6823      	ldr	r3, [r4, #0]
 80143f6:	1c5a      	adds	r2, r3, #1
 80143f8:	6022      	str	r2, [r4, #0]
 80143fa:	701e      	strb	r6, [r3, #0]
 80143fc:	6963      	ldr	r3, [r4, #20]
 80143fe:	3001      	adds	r0, #1
 8014400:	4283      	cmp	r3, r0
 8014402:	d004      	beq.n	801440e <__swbuf_r+0x62>
 8014404:	89a3      	ldrh	r3, [r4, #12]
 8014406:	07db      	lsls	r3, r3, #31
 8014408:	d506      	bpl.n	8014418 <__swbuf_r+0x6c>
 801440a:	2e0a      	cmp	r6, #10
 801440c:	d104      	bne.n	8014418 <__swbuf_r+0x6c>
 801440e:	4621      	mov	r1, r4
 8014410:	4628      	mov	r0, r5
 8014412:	f000 f93b 	bl	801468c <_fflush_r>
 8014416:	b988      	cbnz	r0, 801443c <__swbuf_r+0x90>
 8014418:	4638      	mov	r0, r7
 801441a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801441c:	4b0a      	ldr	r3, [pc, #40]	; (8014448 <__swbuf_r+0x9c>)
 801441e:	429c      	cmp	r4, r3
 8014420:	d101      	bne.n	8014426 <__swbuf_r+0x7a>
 8014422:	68ac      	ldr	r4, [r5, #8]
 8014424:	e7cf      	b.n	80143c6 <__swbuf_r+0x1a>
 8014426:	4b09      	ldr	r3, [pc, #36]	; (801444c <__swbuf_r+0xa0>)
 8014428:	429c      	cmp	r4, r3
 801442a:	bf08      	it	eq
 801442c:	68ec      	ldreq	r4, [r5, #12]
 801442e:	e7ca      	b.n	80143c6 <__swbuf_r+0x1a>
 8014430:	4621      	mov	r1, r4
 8014432:	4628      	mov	r0, r5
 8014434:	f000 f81e 	bl	8014474 <__swsetup_r>
 8014438:	2800      	cmp	r0, #0
 801443a:	d0cb      	beq.n	80143d4 <__swbuf_r+0x28>
 801443c:	f04f 37ff 	mov.w	r7, #4294967295
 8014440:	e7ea      	b.n	8014418 <__swbuf_r+0x6c>
 8014442:	bf00      	nop
 8014444:	08039830 	.word	0x08039830
 8014448:	08039850 	.word	0x08039850
 801444c:	08039810 	.word	0x08039810

08014450 <_write_r>:
 8014450:	b538      	push	{r3, r4, r5, lr}
 8014452:	4d07      	ldr	r5, [pc, #28]	; (8014470 <_write_r+0x20>)
 8014454:	4604      	mov	r4, r0
 8014456:	4608      	mov	r0, r1
 8014458:	4611      	mov	r1, r2
 801445a:	2200      	movs	r2, #0
 801445c:	602a      	str	r2, [r5, #0]
 801445e:	461a      	mov	r2, r3
 8014460:	f7ec fb05 	bl	8000a6e <_write>
 8014464:	1c43      	adds	r3, r0, #1
 8014466:	d102      	bne.n	801446e <_write_r+0x1e>
 8014468:	682b      	ldr	r3, [r5, #0]
 801446a:	b103      	cbz	r3, 801446e <_write_r+0x1e>
 801446c:	6023      	str	r3, [r4, #0]
 801446e:	bd38      	pop	{r3, r4, r5, pc}
 8014470:	20007b68 	.word	0x20007b68

08014474 <__swsetup_r>:
 8014474:	4b32      	ldr	r3, [pc, #200]	; (8014540 <__swsetup_r+0xcc>)
 8014476:	b570      	push	{r4, r5, r6, lr}
 8014478:	681d      	ldr	r5, [r3, #0]
 801447a:	4606      	mov	r6, r0
 801447c:	460c      	mov	r4, r1
 801447e:	b125      	cbz	r5, 801448a <__swsetup_r+0x16>
 8014480:	69ab      	ldr	r3, [r5, #24]
 8014482:	b913      	cbnz	r3, 801448a <__swsetup_r+0x16>
 8014484:	4628      	mov	r0, r5
 8014486:	f7ff f98f 	bl	80137a8 <__sinit>
 801448a:	4b2e      	ldr	r3, [pc, #184]	; (8014544 <__swsetup_r+0xd0>)
 801448c:	429c      	cmp	r4, r3
 801448e:	d10f      	bne.n	80144b0 <__swsetup_r+0x3c>
 8014490:	686c      	ldr	r4, [r5, #4]
 8014492:	89a3      	ldrh	r3, [r4, #12]
 8014494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014498:	0719      	lsls	r1, r3, #28
 801449a:	d42c      	bmi.n	80144f6 <__swsetup_r+0x82>
 801449c:	06dd      	lsls	r5, r3, #27
 801449e:	d411      	bmi.n	80144c4 <__swsetup_r+0x50>
 80144a0:	2309      	movs	r3, #9
 80144a2:	6033      	str	r3, [r6, #0]
 80144a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80144a8:	81a3      	strh	r3, [r4, #12]
 80144aa:	f04f 30ff 	mov.w	r0, #4294967295
 80144ae:	e03e      	b.n	801452e <__swsetup_r+0xba>
 80144b0:	4b25      	ldr	r3, [pc, #148]	; (8014548 <__swsetup_r+0xd4>)
 80144b2:	429c      	cmp	r4, r3
 80144b4:	d101      	bne.n	80144ba <__swsetup_r+0x46>
 80144b6:	68ac      	ldr	r4, [r5, #8]
 80144b8:	e7eb      	b.n	8014492 <__swsetup_r+0x1e>
 80144ba:	4b24      	ldr	r3, [pc, #144]	; (801454c <__swsetup_r+0xd8>)
 80144bc:	429c      	cmp	r4, r3
 80144be:	bf08      	it	eq
 80144c0:	68ec      	ldreq	r4, [r5, #12]
 80144c2:	e7e6      	b.n	8014492 <__swsetup_r+0x1e>
 80144c4:	0758      	lsls	r0, r3, #29
 80144c6:	d512      	bpl.n	80144ee <__swsetup_r+0x7a>
 80144c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144ca:	b141      	cbz	r1, 80144de <__swsetup_r+0x6a>
 80144cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144d0:	4299      	cmp	r1, r3
 80144d2:	d002      	beq.n	80144da <__swsetup_r+0x66>
 80144d4:	4630      	mov	r0, r6
 80144d6:	f7ff fa21 	bl	801391c <_free_r>
 80144da:	2300      	movs	r3, #0
 80144dc:	6363      	str	r3, [r4, #52]	; 0x34
 80144de:	89a3      	ldrh	r3, [r4, #12]
 80144e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144e4:	81a3      	strh	r3, [r4, #12]
 80144e6:	2300      	movs	r3, #0
 80144e8:	6063      	str	r3, [r4, #4]
 80144ea:	6923      	ldr	r3, [r4, #16]
 80144ec:	6023      	str	r3, [r4, #0]
 80144ee:	89a3      	ldrh	r3, [r4, #12]
 80144f0:	f043 0308 	orr.w	r3, r3, #8
 80144f4:	81a3      	strh	r3, [r4, #12]
 80144f6:	6923      	ldr	r3, [r4, #16]
 80144f8:	b94b      	cbnz	r3, 801450e <__swsetup_r+0x9a>
 80144fa:	89a3      	ldrh	r3, [r4, #12]
 80144fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014504:	d003      	beq.n	801450e <__swsetup_r+0x9a>
 8014506:	4621      	mov	r1, r4
 8014508:	4630      	mov	r0, r6
 801450a:	f000 f931 	bl	8014770 <__smakebuf_r>
 801450e:	89a0      	ldrh	r0, [r4, #12]
 8014510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014514:	f010 0301 	ands.w	r3, r0, #1
 8014518:	d00a      	beq.n	8014530 <__swsetup_r+0xbc>
 801451a:	2300      	movs	r3, #0
 801451c:	60a3      	str	r3, [r4, #8]
 801451e:	6963      	ldr	r3, [r4, #20]
 8014520:	425b      	negs	r3, r3
 8014522:	61a3      	str	r3, [r4, #24]
 8014524:	6923      	ldr	r3, [r4, #16]
 8014526:	b943      	cbnz	r3, 801453a <__swsetup_r+0xc6>
 8014528:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801452c:	d1ba      	bne.n	80144a4 <__swsetup_r+0x30>
 801452e:	bd70      	pop	{r4, r5, r6, pc}
 8014530:	0781      	lsls	r1, r0, #30
 8014532:	bf58      	it	pl
 8014534:	6963      	ldrpl	r3, [r4, #20]
 8014536:	60a3      	str	r3, [r4, #8]
 8014538:	e7f4      	b.n	8014524 <__swsetup_r+0xb0>
 801453a:	2000      	movs	r0, #0
 801453c:	e7f7      	b.n	801452e <__swsetup_r+0xba>
 801453e:	bf00      	nop
 8014540:	20000024 	.word	0x20000024
 8014544:	08039830 	.word	0x08039830
 8014548:	08039850 	.word	0x08039850
 801454c:	08039810 	.word	0x08039810

08014550 <abort>:
 8014550:	b508      	push	{r3, lr}
 8014552:	2006      	movs	r0, #6
 8014554:	f000 f9b8 	bl	80148c8 <raise>
 8014558:	2001      	movs	r0, #1
 801455a:	f7ec fa61 	bl	8000a20 <_exit>
	...

08014560 <_close_r>:
 8014560:	b538      	push	{r3, r4, r5, lr}
 8014562:	4d06      	ldr	r5, [pc, #24]	; (801457c <_close_r+0x1c>)
 8014564:	2300      	movs	r3, #0
 8014566:	4604      	mov	r4, r0
 8014568:	4608      	mov	r0, r1
 801456a:	602b      	str	r3, [r5, #0]
 801456c:	f7ec fa9b 	bl	8000aa6 <_close>
 8014570:	1c43      	adds	r3, r0, #1
 8014572:	d102      	bne.n	801457a <_close_r+0x1a>
 8014574:	682b      	ldr	r3, [r5, #0]
 8014576:	b103      	cbz	r3, 801457a <_close_r+0x1a>
 8014578:	6023      	str	r3, [r4, #0]
 801457a:	bd38      	pop	{r3, r4, r5, pc}
 801457c:	20007b68 	.word	0x20007b68

08014580 <__sflush_r>:
 8014580:	898a      	ldrh	r2, [r1, #12]
 8014582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014586:	4605      	mov	r5, r0
 8014588:	0710      	lsls	r0, r2, #28
 801458a:	460c      	mov	r4, r1
 801458c:	d458      	bmi.n	8014640 <__sflush_r+0xc0>
 801458e:	684b      	ldr	r3, [r1, #4]
 8014590:	2b00      	cmp	r3, #0
 8014592:	dc05      	bgt.n	80145a0 <__sflush_r+0x20>
 8014594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014596:	2b00      	cmp	r3, #0
 8014598:	dc02      	bgt.n	80145a0 <__sflush_r+0x20>
 801459a:	2000      	movs	r0, #0
 801459c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145a2:	2e00      	cmp	r6, #0
 80145a4:	d0f9      	beq.n	801459a <__sflush_r+0x1a>
 80145a6:	2300      	movs	r3, #0
 80145a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80145ac:	682f      	ldr	r7, [r5, #0]
 80145ae:	602b      	str	r3, [r5, #0]
 80145b0:	d032      	beq.n	8014618 <__sflush_r+0x98>
 80145b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80145b4:	89a3      	ldrh	r3, [r4, #12]
 80145b6:	075a      	lsls	r2, r3, #29
 80145b8:	d505      	bpl.n	80145c6 <__sflush_r+0x46>
 80145ba:	6863      	ldr	r3, [r4, #4]
 80145bc:	1ac0      	subs	r0, r0, r3
 80145be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80145c0:	b10b      	cbz	r3, 80145c6 <__sflush_r+0x46>
 80145c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80145c4:	1ac0      	subs	r0, r0, r3
 80145c6:	2300      	movs	r3, #0
 80145c8:	4602      	mov	r2, r0
 80145ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145cc:	6a21      	ldr	r1, [r4, #32]
 80145ce:	4628      	mov	r0, r5
 80145d0:	47b0      	blx	r6
 80145d2:	1c43      	adds	r3, r0, #1
 80145d4:	89a3      	ldrh	r3, [r4, #12]
 80145d6:	d106      	bne.n	80145e6 <__sflush_r+0x66>
 80145d8:	6829      	ldr	r1, [r5, #0]
 80145da:	291d      	cmp	r1, #29
 80145dc:	d82c      	bhi.n	8014638 <__sflush_r+0xb8>
 80145de:	4a2a      	ldr	r2, [pc, #168]	; (8014688 <__sflush_r+0x108>)
 80145e0:	40ca      	lsrs	r2, r1
 80145e2:	07d6      	lsls	r6, r2, #31
 80145e4:	d528      	bpl.n	8014638 <__sflush_r+0xb8>
 80145e6:	2200      	movs	r2, #0
 80145e8:	6062      	str	r2, [r4, #4]
 80145ea:	04d9      	lsls	r1, r3, #19
 80145ec:	6922      	ldr	r2, [r4, #16]
 80145ee:	6022      	str	r2, [r4, #0]
 80145f0:	d504      	bpl.n	80145fc <__sflush_r+0x7c>
 80145f2:	1c42      	adds	r2, r0, #1
 80145f4:	d101      	bne.n	80145fa <__sflush_r+0x7a>
 80145f6:	682b      	ldr	r3, [r5, #0]
 80145f8:	b903      	cbnz	r3, 80145fc <__sflush_r+0x7c>
 80145fa:	6560      	str	r0, [r4, #84]	; 0x54
 80145fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145fe:	602f      	str	r7, [r5, #0]
 8014600:	2900      	cmp	r1, #0
 8014602:	d0ca      	beq.n	801459a <__sflush_r+0x1a>
 8014604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014608:	4299      	cmp	r1, r3
 801460a:	d002      	beq.n	8014612 <__sflush_r+0x92>
 801460c:	4628      	mov	r0, r5
 801460e:	f7ff f985 	bl	801391c <_free_r>
 8014612:	2000      	movs	r0, #0
 8014614:	6360      	str	r0, [r4, #52]	; 0x34
 8014616:	e7c1      	b.n	801459c <__sflush_r+0x1c>
 8014618:	6a21      	ldr	r1, [r4, #32]
 801461a:	2301      	movs	r3, #1
 801461c:	4628      	mov	r0, r5
 801461e:	47b0      	blx	r6
 8014620:	1c41      	adds	r1, r0, #1
 8014622:	d1c7      	bne.n	80145b4 <__sflush_r+0x34>
 8014624:	682b      	ldr	r3, [r5, #0]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d0c4      	beq.n	80145b4 <__sflush_r+0x34>
 801462a:	2b1d      	cmp	r3, #29
 801462c:	d001      	beq.n	8014632 <__sflush_r+0xb2>
 801462e:	2b16      	cmp	r3, #22
 8014630:	d101      	bne.n	8014636 <__sflush_r+0xb6>
 8014632:	602f      	str	r7, [r5, #0]
 8014634:	e7b1      	b.n	801459a <__sflush_r+0x1a>
 8014636:	89a3      	ldrh	r3, [r4, #12]
 8014638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801463c:	81a3      	strh	r3, [r4, #12]
 801463e:	e7ad      	b.n	801459c <__sflush_r+0x1c>
 8014640:	690f      	ldr	r7, [r1, #16]
 8014642:	2f00      	cmp	r7, #0
 8014644:	d0a9      	beq.n	801459a <__sflush_r+0x1a>
 8014646:	0793      	lsls	r3, r2, #30
 8014648:	680e      	ldr	r6, [r1, #0]
 801464a:	bf08      	it	eq
 801464c:	694b      	ldreq	r3, [r1, #20]
 801464e:	600f      	str	r7, [r1, #0]
 8014650:	bf18      	it	ne
 8014652:	2300      	movne	r3, #0
 8014654:	eba6 0807 	sub.w	r8, r6, r7
 8014658:	608b      	str	r3, [r1, #8]
 801465a:	f1b8 0f00 	cmp.w	r8, #0
 801465e:	dd9c      	ble.n	801459a <__sflush_r+0x1a>
 8014660:	6a21      	ldr	r1, [r4, #32]
 8014662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014664:	4643      	mov	r3, r8
 8014666:	463a      	mov	r2, r7
 8014668:	4628      	mov	r0, r5
 801466a:	47b0      	blx	r6
 801466c:	2800      	cmp	r0, #0
 801466e:	dc06      	bgt.n	801467e <__sflush_r+0xfe>
 8014670:	89a3      	ldrh	r3, [r4, #12]
 8014672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014676:	81a3      	strh	r3, [r4, #12]
 8014678:	f04f 30ff 	mov.w	r0, #4294967295
 801467c:	e78e      	b.n	801459c <__sflush_r+0x1c>
 801467e:	4407      	add	r7, r0
 8014680:	eba8 0800 	sub.w	r8, r8, r0
 8014684:	e7e9      	b.n	801465a <__sflush_r+0xda>
 8014686:	bf00      	nop
 8014688:	20400001 	.word	0x20400001

0801468c <_fflush_r>:
 801468c:	b538      	push	{r3, r4, r5, lr}
 801468e:	690b      	ldr	r3, [r1, #16]
 8014690:	4605      	mov	r5, r0
 8014692:	460c      	mov	r4, r1
 8014694:	b913      	cbnz	r3, 801469c <_fflush_r+0x10>
 8014696:	2500      	movs	r5, #0
 8014698:	4628      	mov	r0, r5
 801469a:	bd38      	pop	{r3, r4, r5, pc}
 801469c:	b118      	cbz	r0, 80146a6 <_fflush_r+0x1a>
 801469e:	6983      	ldr	r3, [r0, #24]
 80146a0:	b90b      	cbnz	r3, 80146a6 <_fflush_r+0x1a>
 80146a2:	f7ff f881 	bl	80137a8 <__sinit>
 80146a6:	4b14      	ldr	r3, [pc, #80]	; (80146f8 <_fflush_r+0x6c>)
 80146a8:	429c      	cmp	r4, r3
 80146aa:	d11b      	bne.n	80146e4 <_fflush_r+0x58>
 80146ac:	686c      	ldr	r4, [r5, #4]
 80146ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d0ef      	beq.n	8014696 <_fflush_r+0xa>
 80146b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80146b8:	07d0      	lsls	r0, r2, #31
 80146ba:	d404      	bmi.n	80146c6 <_fflush_r+0x3a>
 80146bc:	0599      	lsls	r1, r3, #22
 80146be:	d402      	bmi.n	80146c6 <_fflush_r+0x3a>
 80146c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146c2:	f7ff f921 	bl	8013908 <__retarget_lock_acquire_recursive>
 80146c6:	4628      	mov	r0, r5
 80146c8:	4621      	mov	r1, r4
 80146ca:	f7ff ff59 	bl	8014580 <__sflush_r>
 80146ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80146d0:	07da      	lsls	r2, r3, #31
 80146d2:	4605      	mov	r5, r0
 80146d4:	d4e0      	bmi.n	8014698 <_fflush_r+0xc>
 80146d6:	89a3      	ldrh	r3, [r4, #12]
 80146d8:	059b      	lsls	r3, r3, #22
 80146da:	d4dd      	bmi.n	8014698 <_fflush_r+0xc>
 80146dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146de:	f7ff f914 	bl	801390a <__retarget_lock_release_recursive>
 80146e2:	e7d9      	b.n	8014698 <_fflush_r+0xc>
 80146e4:	4b05      	ldr	r3, [pc, #20]	; (80146fc <_fflush_r+0x70>)
 80146e6:	429c      	cmp	r4, r3
 80146e8:	d101      	bne.n	80146ee <_fflush_r+0x62>
 80146ea:	68ac      	ldr	r4, [r5, #8]
 80146ec:	e7df      	b.n	80146ae <_fflush_r+0x22>
 80146ee:	4b04      	ldr	r3, [pc, #16]	; (8014700 <_fflush_r+0x74>)
 80146f0:	429c      	cmp	r4, r3
 80146f2:	bf08      	it	eq
 80146f4:	68ec      	ldreq	r4, [r5, #12]
 80146f6:	e7da      	b.n	80146ae <_fflush_r+0x22>
 80146f8:	08039830 	.word	0x08039830
 80146fc:	08039850 	.word	0x08039850
 8014700:	08039810 	.word	0x08039810

08014704 <_lseek_r>:
 8014704:	b538      	push	{r3, r4, r5, lr}
 8014706:	4d07      	ldr	r5, [pc, #28]	; (8014724 <_lseek_r+0x20>)
 8014708:	4604      	mov	r4, r0
 801470a:	4608      	mov	r0, r1
 801470c:	4611      	mov	r1, r2
 801470e:	2200      	movs	r2, #0
 8014710:	602a      	str	r2, [r5, #0]
 8014712:	461a      	mov	r2, r3
 8014714:	f7ec f9ee 	bl	8000af4 <_lseek>
 8014718:	1c43      	adds	r3, r0, #1
 801471a:	d102      	bne.n	8014722 <_lseek_r+0x1e>
 801471c:	682b      	ldr	r3, [r5, #0]
 801471e:	b103      	cbz	r3, 8014722 <_lseek_r+0x1e>
 8014720:	6023      	str	r3, [r4, #0]
 8014722:	bd38      	pop	{r3, r4, r5, pc}
 8014724:	20007b68 	.word	0x20007b68

08014728 <__swhatbuf_r>:
 8014728:	b570      	push	{r4, r5, r6, lr}
 801472a:	460e      	mov	r6, r1
 801472c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014730:	2900      	cmp	r1, #0
 8014732:	b096      	sub	sp, #88	; 0x58
 8014734:	4614      	mov	r4, r2
 8014736:	461d      	mov	r5, r3
 8014738:	da07      	bge.n	801474a <__swhatbuf_r+0x22>
 801473a:	2300      	movs	r3, #0
 801473c:	602b      	str	r3, [r5, #0]
 801473e:	89b3      	ldrh	r3, [r6, #12]
 8014740:	061a      	lsls	r2, r3, #24
 8014742:	d410      	bmi.n	8014766 <__swhatbuf_r+0x3e>
 8014744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014748:	e00e      	b.n	8014768 <__swhatbuf_r+0x40>
 801474a:	466a      	mov	r2, sp
 801474c:	f000 f8d8 	bl	8014900 <_fstat_r>
 8014750:	2800      	cmp	r0, #0
 8014752:	dbf2      	blt.n	801473a <__swhatbuf_r+0x12>
 8014754:	9a01      	ldr	r2, [sp, #4]
 8014756:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801475a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801475e:	425a      	negs	r2, r3
 8014760:	415a      	adcs	r2, r3
 8014762:	602a      	str	r2, [r5, #0]
 8014764:	e7ee      	b.n	8014744 <__swhatbuf_r+0x1c>
 8014766:	2340      	movs	r3, #64	; 0x40
 8014768:	2000      	movs	r0, #0
 801476a:	6023      	str	r3, [r4, #0]
 801476c:	b016      	add	sp, #88	; 0x58
 801476e:	bd70      	pop	{r4, r5, r6, pc}

08014770 <__smakebuf_r>:
 8014770:	898b      	ldrh	r3, [r1, #12]
 8014772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014774:	079d      	lsls	r5, r3, #30
 8014776:	4606      	mov	r6, r0
 8014778:	460c      	mov	r4, r1
 801477a:	d507      	bpl.n	801478c <__smakebuf_r+0x1c>
 801477c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014780:	6023      	str	r3, [r4, #0]
 8014782:	6123      	str	r3, [r4, #16]
 8014784:	2301      	movs	r3, #1
 8014786:	6163      	str	r3, [r4, #20]
 8014788:	b002      	add	sp, #8
 801478a:	bd70      	pop	{r4, r5, r6, pc}
 801478c:	ab01      	add	r3, sp, #4
 801478e:	466a      	mov	r2, sp
 8014790:	f7ff ffca 	bl	8014728 <__swhatbuf_r>
 8014794:	9900      	ldr	r1, [sp, #0]
 8014796:	4605      	mov	r5, r0
 8014798:	4630      	mov	r0, r6
 801479a:	f7ff f90f 	bl	80139bc <_malloc_r>
 801479e:	b948      	cbnz	r0, 80147b4 <__smakebuf_r+0x44>
 80147a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147a4:	059a      	lsls	r2, r3, #22
 80147a6:	d4ef      	bmi.n	8014788 <__smakebuf_r+0x18>
 80147a8:	f023 0303 	bic.w	r3, r3, #3
 80147ac:	f043 0302 	orr.w	r3, r3, #2
 80147b0:	81a3      	strh	r3, [r4, #12]
 80147b2:	e7e3      	b.n	801477c <__smakebuf_r+0xc>
 80147b4:	4b0d      	ldr	r3, [pc, #52]	; (80147ec <__smakebuf_r+0x7c>)
 80147b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80147b8:	89a3      	ldrh	r3, [r4, #12]
 80147ba:	6020      	str	r0, [r4, #0]
 80147bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147c0:	81a3      	strh	r3, [r4, #12]
 80147c2:	9b00      	ldr	r3, [sp, #0]
 80147c4:	6163      	str	r3, [r4, #20]
 80147c6:	9b01      	ldr	r3, [sp, #4]
 80147c8:	6120      	str	r0, [r4, #16]
 80147ca:	b15b      	cbz	r3, 80147e4 <__smakebuf_r+0x74>
 80147cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147d0:	4630      	mov	r0, r6
 80147d2:	f000 f8a7 	bl	8014924 <_isatty_r>
 80147d6:	b128      	cbz	r0, 80147e4 <__smakebuf_r+0x74>
 80147d8:	89a3      	ldrh	r3, [r4, #12]
 80147da:	f023 0303 	bic.w	r3, r3, #3
 80147de:	f043 0301 	orr.w	r3, r3, #1
 80147e2:	81a3      	strh	r3, [r4, #12]
 80147e4:	89a0      	ldrh	r0, [r4, #12]
 80147e6:	4305      	orrs	r5, r0
 80147e8:	81a5      	strh	r5, [r4, #12]
 80147ea:	e7cd      	b.n	8014788 <__smakebuf_r+0x18>
 80147ec:	08013741 	.word	0x08013741

080147f0 <__malloc_lock>:
 80147f0:	4801      	ldr	r0, [pc, #4]	; (80147f8 <__malloc_lock+0x8>)
 80147f2:	f7ff b889 	b.w	8013908 <__retarget_lock_acquire_recursive>
 80147f6:	bf00      	nop
 80147f8:	20007b70 	.word	0x20007b70

080147fc <__malloc_unlock>:
 80147fc:	4801      	ldr	r0, [pc, #4]	; (8014804 <__malloc_unlock+0x8>)
 80147fe:	f7ff b884 	b.w	801390a <__retarget_lock_release_recursive>
 8014802:	bf00      	nop
 8014804:	20007b70 	.word	0x20007b70

08014808 <_realloc_r>:
 8014808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480a:	4607      	mov	r7, r0
 801480c:	4614      	mov	r4, r2
 801480e:	460e      	mov	r6, r1
 8014810:	b921      	cbnz	r1, 801481c <_realloc_r+0x14>
 8014812:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014816:	4611      	mov	r1, r2
 8014818:	f7ff b8d0 	b.w	80139bc <_malloc_r>
 801481c:	b922      	cbnz	r2, 8014828 <_realloc_r+0x20>
 801481e:	f7ff f87d 	bl	801391c <_free_r>
 8014822:	4625      	mov	r5, r4
 8014824:	4628      	mov	r0, r5
 8014826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014828:	f000 f88c 	bl	8014944 <_malloc_usable_size_r>
 801482c:	42a0      	cmp	r0, r4
 801482e:	d20f      	bcs.n	8014850 <_realloc_r+0x48>
 8014830:	4621      	mov	r1, r4
 8014832:	4638      	mov	r0, r7
 8014834:	f7ff f8c2 	bl	80139bc <_malloc_r>
 8014838:	4605      	mov	r5, r0
 801483a:	2800      	cmp	r0, #0
 801483c:	d0f2      	beq.n	8014824 <_realloc_r+0x1c>
 801483e:	4631      	mov	r1, r6
 8014840:	4622      	mov	r2, r4
 8014842:	f7fe fe73 	bl	801352c <memcpy>
 8014846:	4631      	mov	r1, r6
 8014848:	4638      	mov	r0, r7
 801484a:	f7ff f867 	bl	801391c <_free_r>
 801484e:	e7e9      	b.n	8014824 <_realloc_r+0x1c>
 8014850:	4635      	mov	r5, r6
 8014852:	e7e7      	b.n	8014824 <_realloc_r+0x1c>

08014854 <_read_r>:
 8014854:	b538      	push	{r3, r4, r5, lr}
 8014856:	4d07      	ldr	r5, [pc, #28]	; (8014874 <_read_r+0x20>)
 8014858:	4604      	mov	r4, r0
 801485a:	4608      	mov	r0, r1
 801485c:	4611      	mov	r1, r2
 801485e:	2200      	movs	r2, #0
 8014860:	602a      	str	r2, [r5, #0]
 8014862:	461a      	mov	r2, r3
 8014864:	f7ec f8e6 	bl	8000a34 <_read>
 8014868:	1c43      	adds	r3, r0, #1
 801486a:	d102      	bne.n	8014872 <_read_r+0x1e>
 801486c:	682b      	ldr	r3, [r5, #0]
 801486e:	b103      	cbz	r3, 8014872 <_read_r+0x1e>
 8014870:	6023      	str	r3, [r4, #0]
 8014872:	bd38      	pop	{r3, r4, r5, pc}
 8014874:	20007b68 	.word	0x20007b68

08014878 <_raise_r>:
 8014878:	291f      	cmp	r1, #31
 801487a:	b538      	push	{r3, r4, r5, lr}
 801487c:	4604      	mov	r4, r0
 801487e:	460d      	mov	r5, r1
 8014880:	d904      	bls.n	801488c <_raise_r+0x14>
 8014882:	2316      	movs	r3, #22
 8014884:	6003      	str	r3, [r0, #0]
 8014886:	f04f 30ff 	mov.w	r0, #4294967295
 801488a:	bd38      	pop	{r3, r4, r5, pc}
 801488c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801488e:	b112      	cbz	r2, 8014896 <_raise_r+0x1e>
 8014890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014894:	b94b      	cbnz	r3, 80148aa <_raise_r+0x32>
 8014896:	4620      	mov	r0, r4
 8014898:	f000 f830 	bl	80148fc <_getpid_r>
 801489c:	462a      	mov	r2, r5
 801489e:	4601      	mov	r1, r0
 80148a0:	4620      	mov	r0, r4
 80148a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148a6:	f000 b817 	b.w	80148d8 <_kill_r>
 80148aa:	2b01      	cmp	r3, #1
 80148ac:	d00a      	beq.n	80148c4 <_raise_r+0x4c>
 80148ae:	1c59      	adds	r1, r3, #1
 80148b0:	d103      	bne.n	80148ba <_raise_r+0x42>
 80148b2:	2316      	movs	r3, #22
 80148b4:	6003      	str	r3, [r0, #0]
 80148b6:	2001      	movs	r0, #1
 80148b8:	e7e7      	b.n	801488a <_raise_r+0x12>
 80148ba:	2400      	movs	r4, #0
 80148bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80148c0:	4628      	mov	r0, r5
 80148c2:	4798      	blx	r3
 80148c4:	2000      	movs	r0, #0
 80148c6:	e7e0      	b.n	801488a <_raise_r+0x12>

080148c8 <raise>:
 80148c8:	4b02      	ldr	r3, [pc, #8]	; (80148d4 <raise+0xc>)
 80148ca:	4601      	mov	r1, r0
 80148cc:	6818      	ldr	r0, [r3, #0]
 80148ce:	f7ff bfd3 	b.w	8014878 <_raise_r>
 80148d2:	bf00      	nop
 80148d4:	20000024 	.word	0x20000024

080148d8 <_kill_r>:
 80148d8:	b538      	push	{r3, r4, r5, lr}
 80148da:	4d07      	ldr	r5, [pc, #28]	; (80148f8 <_kill_r+0x20>)
 80148dc:	2300      	movs	r3, #0
 80148de:	4604      	mov	r4, r0
 80148e0:	4608      	mov	r0, r1
 80148e2:	4611      	mov	r1, r2
 80148e4:	602b      	str	r3, [r5, #0]
 80148e6:	f7ec f889 	bl	80009fc <_kill>
 80148ea:	1c43      	adds	r3, r0, #1
 80148ec:	d102      	bne.n	80148f4 <_kill_r+0x1c>
 80148ee:	682b      	ldr	r3, [r5, #0]
 80148f0:	b103      	cbz	r3, 80148f4 <_kill_r+0x1c>
 80148f2:	6023      	str	r3, [r4, #0]
 80148f4:	bd38      	pop	{r3, r4, r5, pc}
 80148f6:	bf00      	nop
 80148f8:	20007b68 	.word	0x20007b68

080148fc <_getpid_r>:
 80148fc:	f7ec b876 	b.w	80009ec <_getpid>

08014900 <_fstat_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	4d07      	ldr	r5, [pc, #28]	; (8014920 <_fstat_r+0x20>)
 8014904:	2300      	movs	r3, #0
 8014906:	4604      	mov	r4, r0
 8014908:	4608      	mov	r0, r1
 801490a:	4611      	mov	r1, r2
 801490c:	602b      	str	r3, [r5, #0]
 801490e:	f7ec f8d6 	bl	8000abe <_fstat>
 8014912:	1c43      	adds	r3, r0, #1
 8014914:	d102      	bne.n	801491c <_fstat_r+0x1c>
 8014916:	682b      	ldr	r3, [r5, #0]
 8014918:	b103      	cbz	r3, 801491c <_fstat_r+0x1c>
 801491a:	6023      	str	r3, [r4, #0]
 801491c:	bd38      	pop	{r3, r4, r5, pc}
 801491e:	bf00      	nop
 8014920:	20007b68 	.word	0x20007b68

08014924 <_isatty_r>:
 8014924:	b538      	push	{r3, r4, r5, lr}
 8014926:	4d06      	ldr	r5, [pc, #24]	; (8014940 <_isatty_r+0x1c>)
 8014928:	2300      	movs	r3, #0
 801492a:	4604      	mov	r4, r0
 801492c:	4608      	mov	r0, r1
 801492e:	602b      	str	r3, [r5, #0]
 8014930:	f7ec f8d5 	bl	8000ade <_isatty>
 8014934:	1c43      	adds	r3, r0, #1
 8014936:	d102      	bne.n	801493e <_isatty_r+0x1a>
 8014938:	682b      	ldr	r3, [r5, #0]
 801493a:	b103      	cbz	r3, 801493e <_isatty_r+0x1a>
 801493c:	6023      	str	r3, [r4, #0]
 801493e:	bd38      	pop	{r3, r4, r5, pc}
 8014940:	20007b68 	.word	0x20007b68

08014944 <_malloc_usable_size_r>:
 8014944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014948:	1f18      	subs	r0, r3, #4
 801494a:	2b00      	cmp	r3, #0
 801494c:	bfbc      	itt	lt
 801494e:	580b      	ldrlt	r3, [r1, r0]
 8014950:	18c0      	addlt	r0, r0, r3
 8014952:	4770      	bx	lr

08014954 <_init>:
 8014954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014956:	bf00      	nop
 8014958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801495a:	bc08      	pop	{r3}
 801495c:	469e      	mov	lr, r3
 801495e:	4770      	bx	lr

08014960 <_fini>:
 8014960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014962:	bf00      	nop
 8014964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014966:	bc08      	pop	{r3}
 8014968:	469e      	mov	lr, r3
 801496a:	4770      	bx	lr
