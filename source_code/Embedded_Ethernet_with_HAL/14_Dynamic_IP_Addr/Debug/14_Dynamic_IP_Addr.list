
14_Dynamic_IP_Addr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cc4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ed4  08011ec4  08011ec4  00021ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d98  08014d98  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08014d98  08014d98  00024d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014da0  08014da0  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014da0  08014da0  00024da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014da4  08014da4  00024da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08014da8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000076a4  2000007c  08014e24  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007720  08014e24  00037720  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000347d4  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006321  00000000  00000000  0006487e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0006aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0006c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033a0d  00000000  00000000  0006d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a2e  00000000  00000000  000a0ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119965  00000000  00000000  000c7923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e1288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d2c  00000000  00000000  001e12dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08011eac 	.word	0x08011eac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08011eac 	.word	0x08011eac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <adc1_pa4_init>:

ADC_HandleTypeDef hadc1;


void adc1_pa4_init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
    ADC_ChannelConfTypeDef sConfig 	  = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <adc1_pa4_init+0xe0>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a2d      	ldr	r2, [pc, #180]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <adc1_pa4_init+0xe0>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <adc1_pa4_init+0xe0>)
 800061a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061e:	6453      	str	r3, [r2, #68]	; 0x44
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

	/*Set PA4 as analog pin*/
	GPIO_InitStruct.Pin  = SENSOR_PIN;
 800062c:	2310      	movs	r3, #16
 800062e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000630:	2303      	movs	r3, #3
 8000632:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(SENSOR_PORT,&GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	481f      	ldr	r0, [pc, #124]	; (80006bc <adc1_pa4_init+0xe4>)
 8000640:	f002 f8c0 	bl	80027c4 <HAL_GPIO_Init>


	/*Configure ADC parameters*/

	hadc1.Instance =  ADC1;
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <adc1_pa4_init+0xec>)
 8000648:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler =  ADC_CLOCK_SYNC_PCLK_DIV8;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <adc1_pa4_init+0xe8>)
 800064c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000650:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution	  =  ADC_RESOLUTION_12B;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode   =  ADC_SCAN_DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <adc1_pa4_init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode	= DISABLE;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <adc1_pa4_init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <adc1_pa4_init+0xf0>)
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <adc1_pa4_init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000680:	2201      	movs	r2, #1
 8000682:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <adc1_pa4_init+0xe8>)
 800068e:	2201      	movs	r2, #1
 8000690:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000694:	f000 fb68 	bl	8000d68 <HAL_ADC_Init>

	sConfig.Channel = ADC_CHANNEL_4;
 8000698:	2304      	movs	r3, #4
 800069a:	60fb      	str	r3, [r7, #12]
	sConfig.Rank    = ADC_REGULAR_RANK_1;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime =  ADC_SAMPLETIME_480CYCLES;
 80006a0:	2307      	movs	r3, #7
 80006a2:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1,&sConfig);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <adc1_pa4_init+0xe8>)
 80006ac:	f000 fbaa 	bl	8000e04 <HAL_ADC_ConfigChannel>


}
 80006b0:	bf00      	nop
 80006b2:	3730      	adds	r7, #48	; 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000
 80006c0:	2000029c 	.word	0x2000029c
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <leds_init>:
#include "leds.h"



void leds_init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef   GPIO_InitStruct = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <leds_init+0x4c>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <leds_init+0x4c>)
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	6313      	str	r3, [r2, #48]	; 0x30
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <leds_init+0x4c>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	f003 0302 	and.w	r3, r3, #2
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStruct.Pin  = GREEN_LED | BLUE_LED | RED_LED | CUSTOM_LED;
 80006f8:	f24c 0381 	movw	r3, #49281	; 0xc081
 80006fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull =  GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(LEDS_PORT,&GPIO_InitStruct);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <leds_init+0x50>)
 800070c:	f002 f85a 	bl	80027c4 <HAL_GPIO_Init>
}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020400 	.word	0x40020400

08000720 <led_on>:


void led_on(uint32_t led)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	switch(led)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800072e:	d025      	beq.n	800077c <led_on+0x5c>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000736:	d828      	bhi.n	800078a <led_on+0x6a>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800073e:	d016      	beq.n	800076e <led_on+0x4e>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000746:	d820      	bhi.n	800078a <led_on+0x6a>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d003      	beq.n	8000756 <led_on+0x36>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b80      	cmp	r3, #128	; 0x80
 8000752:	d006      	beq.n	8000762 <led_on+0x42>
		case CUSTOM_LED:
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
			break;

	}
}
 8000754:	e019      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,GREEN_LED,GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <led_on+0x74>)
 800075c:	f002 f9de 	bl	8002b1c <HAL_GPIO_WritePin>
			break;
 8000760:	e013      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,BLUE_LED,GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <led_on+0x74>)
 8000768:	f002 f9d8 	bl	8002b1c <HAL_GPIO_WritePin>
			break;
 800076c:	e00d      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,RED_LED,GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <led_on+0x74>)
 8000776:	f002 f9d1 	bl	8002b1c <HAL_GPIO_WritePin>
			break;
 800077a:	e006      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <led_on+0x74>)
 8000784:	f002 f9ca 	bl	8002b1c <HAL_GPIO_WritePin>
			break;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020400 	.word	0x40020400

08000798 <main>:
extern struct netif gnetif;



int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_Init();
 800079c:	f000 fa5b 	bl	8000c56 <HAL_Init>
	sysclock_config();
 80007a0:	f000 f83c 	bl	800081c <sysclock_config>
	leds_init();
 80007a4:	f7ff ff92 	bl	80006cc <leds_init>
	uart3_tx_init();
 80007a8:	f000 f99e 	bl	8000ae8 <uart3_tx_init>
	adc1_pa4_init();
 80007ac:	f7ff ff14 	bl	80005d8 <adc1_pa4_init>

	lwip_lib_init();
 80007b0:	f003 fb58 	bl	8003e64 <lwip_lib_init>

	g_hclk_freq = HAL_RCC_GetHCLKFreq();
 80007b4:	f002 fe6c 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <main+0x6c>)
 80007bc:	6013      	str	r3, [r2, #0]
	g_pclk1_freq = HAL_RCC_GetPCLK1Freq();
 80007be:	f002 fe73 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a10      	ldr	r2, [pc, #64]	; (8000808 <main+0x70>)
 80007c6:	6013      	str	r3, [r2, #0]
	g_pclk2_freq = HAL_RCC_GetPCLK2Freq();
 80007c8:	f002 fe82 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <main+0x74>)
 80007d0:	6013      	str	r3, [r2, #0]

	led_on(GREEN_LED);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff ffa4 	bl	8000720 <led_on>
	led_on(BLUE_LED);
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	f7ff ffa1 	bl	8000720 <led_on>
	led_on(RED_LED);
 80007de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007e2:	f7ff ff9d 	bl	8000720 <led_on>

	ethernetif_notify_conn_changed(&gnetif);
 80007e6:	480a      	ldr	r0, [pc, #40]	; (8000810 <main+0x78>)
 80007e8:	f000 f876 	bl	80008d8 <ethernetif_notify_conn_changed>
	while(1)
	{

		lwip_process();
 80007ec:	f003 fb80 	bl	8003ef0 <lwip_process>

		printf("IP address from DHCP :  %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <main+0x7c>)
 80007f2:	f00f fae9 	bl	800fdc8 <ip4addr_ntoa>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <main+0x80>)
 80007fc:	f010 fb3c 	bl	8010e78 <iprintf>
		lwip_process();
 8000800:	e7f4      	b.n	80007ec <main+0x54>
 8000802:	bf00      	nop
 8000804:	200002f0 	.word	0x200002f0
 8000808:	200002e4 	.word	0x200002e4
 800080c:	200002ec 	.word	0x200002ec
 8000810:	20000380 	.word	0x20000380
 8000814:	20000384 	.word	0x20000384
 8000818:	08011ec4 	.word	0x08011ec4

0800081c <sysclock_config>:




void sysclock_config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	; 0x50
 8000820:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef		RCC_OscInitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2234      	movs	r2, #52	; 0x34
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f010 fb1c 	bl	8010e68 <memset>
	RCC_ClkInitTypeDef		RCC_ClkInitStruct = {0};
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <sysclock_config+0xb4>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <sysclock_config+0xb4>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <sysclock_config+0xb4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <sysclock_config+0xb8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1d      	ldr	r2, [pc, #116]	; (80008d4 <sysclock_config+0xb8>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <sysclock_config+0xb8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState		 = RCC_HSE_BYPASS;
 8000874:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000878:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM		 = 12;
 8000884:	230c      	movs	r3, #12
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN		 = 192;
 8000888:	23c0      	movs	r3, #192	; 0xc0
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ		 = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP		 = RCC_PLLP_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4618      	mov	r0, r3
 800089a:	f002 f9a9 	bl	8002bf0 <HAL_RCC_OscConfig>

	/*Activate the over drive mode */
	HAL_PWREx_EnableOverDrive();
 800089e:	f002 f957 	bl	8002b50 <HAL_PWREx_EnableOverDrive>


	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	60bb      	str	r3, [r7, #8]
								  |RCC_CLOCKTYPE_PCLK1 |RCC_CLOCKTYPE_PCLK2;

	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2302      	movs	r3, #2
 80008a8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61bb      	str	r3, [r7, #24]

	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_6);
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2106      	movs	r1, #6
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fc43 	bl	800314c <HAL_RCC_ClockConfig>

}
 80008c6:	bf00      	nop
 80008c8:	3750      	adds	r7, #80	; 0x50
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <ethernetif_notify_conn_changed>:

 void ethernetif_notify_conn_changed(struct netif *netif)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

	  if(netif_is_link_up(netif))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d003      	beq.n	80008fa <ethernetif_notify_conn_changed+0x22>
	  {
		  printf("Cable Connected !!\n\r");
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <ethernetif_notify_conn_changed+0x30>)
 80008f4:	f010 fac0 	bl	8010e78 <iprintf>
	  }
	  else
	  {
		  printf("ERR : Cable not connected !!\n\r");
	  }
}
 80008f8:	e002      	b.n	8000900 <ethernetif_notify_conn_changed+0x28>
		  printf("ERR : Cable not connected !!\n\r");
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <ethernetif_notify_conn_changed+0x34>)
 80008fc:	f010 fabc 	bl	8010e78 <iprintf>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	08011ee4 	.word	0x08011ee4
 800090c:	08011efc 	.word	0x08011efc

08000910 <SysTick_Handler>:


extern ETH_HandleTypeDef heth;

void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000914:	f000 f9e4 	bl	8000ce0 <HAL_IncTick>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <ETH_IRQHandler>:


void ETH_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	HAL_ETH_IRQHandler(&heth);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <ETH_IRQHandler+0x10>)
 8000922:	f001 f9a3 	bl	8001c6c <HAL_ETH_IRQHandler>
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200022d0 	.word	0x200022d0

08000930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
	return 1;
 8000934:	2301      	movs	r3, #1
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <_kill>:

int _kill(int pid, int sig)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <_kill+0x20>)
 800094c:	2216      	movs	r2, #22
 800094e:	601a      	str	r2, [r3, #0]
	return -1;
 8000950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	20007710 	.word	0x20007710

08000964 <_exit>:

void _exit (int status)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ffe5 	bl	8000940 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000976:	e7fe      	b.n	8000976 <_exit+0x12>

08000978 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e00a      	b.n	80009a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800098a:	f3af 8000 	nop.w
 800098e:	4601      	mov	r1, r0
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf0      	blt.n	800098a <_read+0x12>
	}

return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b086      	sub	sp, #24
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e009      	b.n	80009d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	60ba      	str	r2, [r7, #8]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f879 	bl	8000ac4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf1      	blt.n	80009c4 <_write+0x12>
	}
	return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_close>:

int _close(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a12:	605a      	str	r2, [r3, #4]
	return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_isatty>:

int _isatty(int file)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	return 1;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
	...

08000a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <_sbrk+0x5c>)
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <_sbrk+0x60>)
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <_sbrk+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d102      	bne.n	8000a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <_sbrk+0x64>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <_sbrk+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d205      	bcs.n	8000a90 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <_sbrk+0x6c>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	371c      	adds	r7, #28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20080000 	.word	0x20080000
 8000ab4:	00000400 	.word	0x00000400
 8000ab8:	20000098 	.word	0x20000098
 8000abc:	20007720 	.word	0x20007720
 8000ac0:	20007710 	.word	0x20007710

08000ac4 <__io_putchar>:

static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate);


int __io_putchar(int ch)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,10);
 8000acc:	1d39      	adds	r1, r7, #4
 8000ace:	230a      	movs	r3, #10
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <__io_putchar+0x20>)
 8000ad4:	f002 fd68 	bl	80035a8 <HAL_UART_Transmit>
	return ch;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200002f4 	.word	0x200002f4

08000ae8 <uart3_tx_init>:

void uart3_tx_init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <uart3_tx_init+0xb8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <uart3_tx_init+0xb8>)
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <uart3_tx_init+0xb8>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]


	GPIO_InitStruct.Pin  = GPIO_PIN_8;
 8000b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b1a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOD,&GPIO_InitStruct);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <uart3_tx_init+0xbc>)
 8000b34:	f001 fe46 	bl	80027c4 <HAL_GPIO_Init>


	__HAL_RCC_USART3_CLK_ENABLE();
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <uart3_tx_init+0xb8>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <uart3_tx_init+0xb8>)
 8000b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <uart3_tx_init+0xb8>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]


	huart3.Instance = USART3;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <uart3_tx_init+0xc4>)
 8000b54:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits   = UART_STOPBITS_1;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity	= UART_PARITY_NONE;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling =  UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]

	HAL_UART_Init(&huart3);
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <uart3_tx_init+0xc0>)
 8000b8a:	f002 fcb5 	bl	80034f8 <HAL_UART_Init>

   /*Set baudrate fix*/
	uart3_set_baudrate(16000000,115200);
 8000b8e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <uart3_tx_init+0xc8>)
 8000b94:	f000 f822 	bl	8000bdc <uart3_set_baudrate>
}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	200002f4 	.word	0x200002f4
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	00f42400 	.word	0x00f42400

08000bb4 <compute_uart_div>:



static uint16_t compute_uart_div(uint32_t periph_clock, uint32_t baudrate)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	return ((periph_clock + (baudrate/2U))/baudrate);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	085a      	lsrs	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bcc:	b29b      	uxth	r3, r3
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <uart3_set_baudrate>:


static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	USART3->BRR  = compute_uart_div(periph_clock,baudrate);
 8000be6:	6839      	ldr	r1, [r7, #0]
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ffe3 	bl	8000bb4 <compute_uart_div>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <uart3_set_baudrate+0x24>)
 8000bf4:	60da      	str	r2, [r3, #12]
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40004800 	.word	0x40004800

08000c04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c06:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c32:	f010 f8d9 	bl	8010de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c36:	f7ff fdaf 	bl	8000798 <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   r0, =_estack
 8000c3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c48:	08014da8 	.word	0x08014da8
  ldr r2, =_sbss
 8000c4c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c50:	20007720 	.word	0x20007720

08000c54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>

08000c56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 fbe6 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 f80d 	bl	8000c80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c66:	f000 f803 	bl	8000c70 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fbf9 	bl	8001496 <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 fbc1 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000378 	.word	0x20000378

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000378 	.word	0x20000378

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff ffee 	bl	8000d08 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d46:	bf00      	nop
 8000d48:	f7ff ffde 	bl	8000d08 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e031      	b.n	8000de2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f832 	bl	8000df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d116      	bne.n	8000dd4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_ADC_Init+0x84>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	f043 0202 	orr.w	r2, r3, #2
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f96e 	bl	8001098 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	f043 0201 	orr.w	r2, r3, #1
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd2:	e001      	b.n	8000dd8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	ffffeefd 	.word	0xffffeefd

08000df0 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d101      	bne.n	8000e20 <HAL_ADC_ConfigChannel+0x1c>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	e12a      	b.n	8001076 <HAL_ADC_ConfigChannel+0x272>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b09      	cmp	r3, #9
 8000e2e:	d93a      	bls.n	8000ea6 <HAL_ADC_ConfigChannel+0xa2>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e38:	d035      	beq.n	8000ea6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68d9      	ldr	r1, [r3, #12]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3b1e      	subs	r3, #30
 8000e50:	2207      	movs	r2, #7
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a87      	ldr	r2, [pc, #540]	; (8001084 <HAL_ADC_ConfigChannel+0x280>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10a      	bne.n	8000e80 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68d9      	ldr	r1, [r3, #12]
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	061a      	lsls	r2, r3, #24
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e7e:	e035      	b.n	8000eec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68d9      	ldr	r1, [r3, #12]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	4603      	mov	r3, r0
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4403      	add	r3, r0
 8000e98:	3b1e      	subs	r3, #30
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ea4:	e022      	b.n	8000eec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6919      	ldr	r1, [r3, #16]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	2207      	movs	r2, #7
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6919      	ldr	r1, [r3, #16]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	4603      	mov	r3, r0
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4403      	add	r3, r0
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b06      	cmp	r3, #6
 8000ef2:	d824      	bhi.n	8000f3e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	3b05      	subs	r3, #5
 8000f06:	221f      	movs	r2, #31
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	400a      	ands	r2, r1
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3b05      	subs	r3, #5
 8000f30:	fa00 f203 	lsl.w	r2, r0, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f3c:	e04c      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d824      	bhi.n	8000f90 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3b23      	subs	r3, #35	; 0x23
 8000f58:	221f      	movs	r2, #31
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	400a      	ands	r2, r1
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	3b23      	subs	r3, #35	; 0x23
 8000f82:	fa00 f203 	lsl.w	r2, r0, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8e:	e023      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3b41      	subs	r3, #65	; 0x41
 8000fa2:	221f      	movs	r2, #31
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43da      	mvns	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	400a      	ands	r2, r1
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	3b41      	subs	r3, #65	; 0x41
 8000fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <HAL_ADC_ConfigChannel+0x284>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10a      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1f4>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000fea:	d105      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <HAL_ADC_ConfigChannel+0x288>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_ADC_ConfigChannel+0x288>)
 8000ff2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000ff6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a22      	ldr	r2, [pc, #136]	; (8001088 <HAL_ADC_ConfigChannel+0x284>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d109      	bne.n	8001016 <HAL_ADC_ConfigChannel+0x212>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b12      	cmp	r3, #18
 8001008:	d105      	bne.n	8001016 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_ADC_ConfigChannel+0x288>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <HAL_ADC_ConfigChannel+0x288>)
 8001010:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001014:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1b      	ldr	r2, [pc, #108]	; (8001088 <HAL_ADC_ConfigChannel+0x284>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d125      	bne.n	800106c <HAL_ADC_ConfigChannel+0x268>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a17      	ldr	r2, [pc, #92]	; (8001084 <HAL_ADC_ConfigChannel+0x280>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d003      	beq.n	8001032 <HAL_ADC_ConfigChannel+0x22e>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b11      	cmp	r3, #17
 8001030:	d11c      	bne.n	800106c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_ADC_ConfigChannel+0x288>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <HAL_ADC_ConfigChannel+0x288>)
 8001038:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800103c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <HAL_ADC_ConfigChannel+0x280>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d111      	bne.n	800106c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_ADC_ConfigChannel+0x28c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a11      	ldr	r2, [pc, #68]	; (8001094 <HAL_ADC_ConfigChannel+0x290>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9a      	lsrs	r2, r3, #18
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800105e:	e002      	b.n	8001066 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3b01      	subs	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f9      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	10000012 	.word	0x10000012
 8001088:	40012000 	.word	0x40012000
 800108c:	40012300 	.word	0x40012300
 8001090:	20000000 	.word	0x20000000
 8001094:	431bde83 	.word	0x431bde83

08001098 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80010a0:	4b78      	ldr	r3, [pc, #480]	; (8001284 <ADC_Init+0x1ec>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	4a77      	ldr	r2, [pc, #476]	; (8001284 <ADC_Init+0x1ec>)
 80010a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80010aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80010ac:	4b75      	ldr	r3, [pc, #468]	; (8001284 <ADC_Init+0x1ec>)
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4973      	ldr	r1, [pc, #460]	; (8001284 <ADC_Init+0x1ec>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6859      	ldr	r1, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	021a      	lsls	r2, r3, #8
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800110e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6899      	ldr	r1, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	4a58      	ldr	r2, [pc, #352]	; (8001288 <ADC_Init+0x1f0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d022      	beq.n	8001172 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689a      	ldr	r2, [r3, #8]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800113a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6899      	ldr	r1, [r3, #8]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800115c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6899      	ldr	r1, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	430a      	orrs	r2, r1
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	e00f      	b.n	8001192 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001190:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0202 	bic.w	r2, r2, #2
 80011a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6899      	ldr	r1, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	005a      	lsls	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01b      	beq.n	80011f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80011de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6859      	ldr	r1, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	3b01      	subs	r3, #1
 80011ec:	035a      	lsls	r2, r3, #13
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	e007      	b.n	8001208 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001206:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	3b01      	subs	r3, #1
 8001224:	051a      	lsls	r2, r3, #20
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800123c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6899      	ldr	r1, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800124a:	025a      	lsls	r2, r3, #9
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001262:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6899      	ldr	r1, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	029a      	lsls	r2, r3, #10
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	609a      	str	r2, [r3, #8]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40012300 	.word	0x40012300
 8001288:	0f000001 	.word	0x0f000001

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <__NVIC_SetPriorityGrouping+0x40>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x40>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00
 80012d0:	05fa0000 	.word	0x05fa0000

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	; (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff29 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff3e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff8e 	bl	8001380 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff31 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80014c0:	4ba9      	ldr	r3, [pc, #676]	; (8001768 <HAL_ETH_Init+0x2b8>)
 80014c2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e181      	b.n	80017da <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f002 fd0c 	bl	8003f08 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f0:	4b9e      	ldr	r3, [pc, #632]	; (800176c <HAL_ETH_Init+0x2bc>)
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	4a9d      	ldr	r2, [pc, #628]	; (800176c <HAL_ETH_Init+0x2bc>)
 80014f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fa:	6453      	str	r3, [r2, #68]	; 0x44
 80014fc:	4b9b      	ldr	r3, [pc, #620]	; (800176c <HAL_ETH_Init+0x2bc>)
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001508:	4b99      	ldr	r3, [pc, #612]	; (8001770 <HAL_ETH_Init+0x2c0>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a98      	ldr	r2, [pc, #608]	; (8001770 <HAL_ETH_Init+0x2c0>)
 800150e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001512:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001514:	4b96      	ldr	r3, [pc, #600]	; (8001770 <HAL_ETH_Init+0x2c0>)
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4994      	ldr	r1, [pc, #592]	; (8001770 <HAL_ETH_Init+0x2c0>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0201 	orr.w	r2, r2, #1
 8001534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001538:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800153a:	f7ff fbe5 	bl	8000d08 <HAL_GetTick>
 800153e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001540:	e011      	b.n	8001566 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001542:	f7ff fbe1 	bl	8000d08 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001550:	d909      	bls.n	8001566 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e139      	b.n	80017da <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e4      	bne.n	8001542 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f023 031c 	bic.w	r3, r3, #28
 8001586:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001588:	f001 ff82 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 800158c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4a78      	ldr	r2, [pc, #480]	; (8001774 <HAL_ETH_Init+0x2c4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d908      	bls.n	80015a8 <HAL_ETH_Init+0xf8>
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4a77      	ldr	r2, [pc, #476]	; (8001778 <HAL_ETH_Init+0x2c8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d804      	bhi.n	80015a8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e027      	b.n	80015f8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	4a73      	ldr	r2, [pc, #460]	; (8001778 <HAL_ETH_Init+0x2c8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d908      	bls.n	80015c2 <HAL_ETH_Init+0x112>
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	4a6d      	ldr	r2, [pc, #436]	; (8001768 <HAL_ETH_Init+0x2b8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d204      	bcs.n	80015c2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f043 030c 	orr.w	r3, r3, #12
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	e01a      	b.n	80015f8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4a68      	ldr	r2, [pc, #416]	; (8001768 <HAL_ETH_Init+0x2b8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d303      	bcc.n	80015d2 <HAL_ETH_Init+0x122>
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4a6b      	ldr	r2, [pc, #428]	; (800177c <HAL_ETH_Init+0x2cc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d911      	bls.n	80015f6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4a69      	ldr	r2, [pc, #420]	; (800177c <HAL_ETH_Init+0x2cc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d908      	bls.n	80015ec <HAL_ETH_Init+0x13c>
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4a68      	ldr	r2, [pc, #416]	; (8001780 <HAL_ETH_Init+0x2d0>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d804      	bhi.n	80015ec <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	e005      	b.n	80015f8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	e000      	b.n	80015f8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80015f6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001600:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001604:	2100      	movs	r1, #0
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fc1d 	bl	8001e46 <HAL_ETH_WritePHYRegister>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001616:	6939      	ldr	r1, [r7, #16]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fdd3 	bl	80021c4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0d7      	b.n	80017da <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800162a:	20ff      	movs	r0, #255	; 0xff
 800162c:	f7ff fb78 	bl	8000d20 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80a5 	beq.w	8001784 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800163a:	f7ff fb65 	bl	8000d08 <HAL_GetTick>
 800163e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	461a      	mov	r2, r3
 8001646:	2101      	movs	r1, #1
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fb94 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800164e:	f7ff fb5b 	bl	8000d08 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d90f      	bls.n	8001680 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001664:	6939      	ldr	r1, [r7, #16]
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fdac 	bl	80021c4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0ac      	b.n	80017da <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0da      	beq.n	8001640 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800168a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168e:	2100      	movs	r1, #0
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fbd8 	bl	8001e46 <HAL_ETH_WritePHYRegister>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00b      	beq.n	80016b4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016a0:	6939      	ldr	r1, [r7, #16]
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 fd8e 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80016b0:	2301      	movs	r3, #1
 80016b2:	e092      	b.n	80017da <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80016b4:	f7ff fb28 	bl	8000d08 <HAL_GetTick>
 80016b8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	461a      	mov	r2, r3
 80016c0:	2101      	movs	r1, #1
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fb57 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80016c8:	f7ff fb1e 	bl	8000d08 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d90f      	bls.n	80016fa <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016de:	6939      	ldr	r1, [r7, #16]
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fd6f 	bl	80021c4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e06f      	b.n	80017da <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f003 0320 	and.w	r3, r3, #32
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0da      	beq.n	80016ba <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	461a      	mov	r2, r3
 800170a:	2110      	movs	r1, #16
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 fb32 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00b      	beq.n	8001730 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fd50 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800172c:	2301      	movs	r3, #1
 800172e:	e054      	b.n	80017da <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d004      	beq.n	8001744 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	e002      	b.n	800174a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	e035      	b.n	80017c8 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e030      	b.n	80017c8 <HAL_ETH_Init+0x318>
 8001766:	bf00      	nop
 8001768:	03938700 	.word	0x03938700
 800176c:	40023800 	.word	0x40023800
 8001770:	40013800 	.word	0x40013800
 8001774:	01312cff 	.word	0x01312cff
 8001778:	02160ebf 	.word	0x02160ebf
 800177c:	05f5e0ff 	.word	0x05f5e0ff
 8001780:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001794:	4313      	orrs	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	2100      	movs	r1, #0
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fb52 	bl	8001e46 <HAL_ETH_WritePHYRegister>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017ac:	6939      	ldr	r1, [r7, #16]
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fd08 	bl	80021c4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e00c      	b.n	80017da <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80017c0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80017c4:	f7ff faac 	bl	8000d20 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80017c8:	6939      	ldr	r1, [r7, #16]
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fcfa 	bl	80021c4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop

080017e4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_ETH_DMATxDescListInit+0x20>
 8001800:	2302      	movs	r3, #2
 8001802:	e052      	b.n	80018aa <HAL_ETH_DMATxDescListInit+0xc6>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e030      	b.n	8001882 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	015b      	lsls	r3, r3, #5
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001830:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	461a      	mov	r2, r3
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	429a      	cmp	r2, r3
 8001862:	d208      	bcs.n	8001876 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	015b      	lsls	r3, r3, #5
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4413      	add	r3, r2
 800186e:	461a      	mov	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	e002      	b.n	800187c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d3ca      	bcc.n	8001820 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6819      	ldr	r1, [r3, #0]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f241 0310 	movw	r3, #4112	; 0x1010
 8001894:	440b      	add	r3, r1
 8001896:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b087      	sub	sp, #28
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ETH_DMARxDescListInit+0x20>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e056      	b.n	8001984 <HAL_ETH_DMARxDescListInit+0xce>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e034      	b.n	800195c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	015b      	lsls	r3, r3, #5
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	4413      	add	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001902:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800190a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	461a      	mov	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3b01      	subs	r3, #1
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	429a      	cmp	r2, r3
 800193c:	d208      	bcs.n	8001950 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	015b      	lsls	r3, r3, #5
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	4413      	add	r3, r2
 8001948:	461a      	mov	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	e002      	b.n	8001956 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d3c6      	bcc.n	80018f2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	f241 030c 	movw	r3, #4108	; 0x100c
 800196e:	440b      	add	r3, r1
 8001970:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_ETH_TransmitFrame+0x24>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e0cd      	b.n	8001b50 <HAL_ETH_TransmitFrame+0x1c0>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80019da:	2301      	movs	r3, #1
 80019dc:	e0b8      	b.n	8001b50 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da09      	bge.n	80019fc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2212      	movs	r2, #18
 80019ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0a9      	b.n	8001b50 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d915      	bls.n	8001a32 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	4a54      	ldr	r2, [pc, #336]	; (8001b5c <HAL_ETH_TransmitFrame+0x1cc>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0a9b      	lsrs	r3, r3, #10
 8001a10:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <HAL_ETH_TransmitFrame+0x1cc>)
 8001a16:	fba3 1302 	umull	r1, r3, r3, r2
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e001      	b.n	8001a36 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d11c      	bne.n	8001a76 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001a4a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a56:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a66:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a74:	e04b      	b.n	8001b0e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e044      	b.n	8001b06 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a8a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aa0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001aaa:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d116      	bne.n	8001ae4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ac4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <HAL_ETH_TransmitFrame+0x1d0>)
 8001aca:	fb02 f203 	mul.w	r2, r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001ad6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ae2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001af2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	461a      	mov	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	3301      	adds	r3, #1
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3b6      	bcc.n	8001a7c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b16:	4413      	add	r3, r2
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00d      	beq.n	8001b3e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	f241 0304 	movw	r3, #4100	; 0x1004
 8001b38:	4413      	add	r3, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	ac02b00b 	.word	0xac02b00b
 8001b60:	fffffa0c 	.word	0xfffffa0c

08001b64 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_ETH_GetReceivedFrame+0x1a>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e070      	b.n	8001c60 <HAL_ETH_GetReceivedFrame+0xfc>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2202      	movs	r2, #2
 8001b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db5a      	blt.n	8001c4e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d030      	beq.n	8001c08 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d103      	bne.n	8001bc0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	0c1b      	lsrs	r3, r3, #16
 8001bd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bd4:	3b04      	subs	r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e02b      	b.n	8001c60 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	461a      	mov	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
 8001c36:	e00a      	b.n	8001c4e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b40      	cmp	r3, #64	; 0x40
 8001c86:	d112      	bne.n	8001cae <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f860 	bl	8001d4e <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c96:	4413      	add	r3, r2
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cac:	e01b      	b.n	8001ce6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001cb6:	4413      	add	r3, r2
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d111      	bne.n	8001ce6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f839 	bl	8001d3a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f241 0314 	movw	r3, #4116	; 0x1014
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	f241 0314 	movw	r3, #4116	; 0x1014
 8001cee:	4413      	add	r3, r2
 8001cf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f241 0314 	movw	r3, #4116	; 0x1014
 8001cfe:	4413      	add	r3, r2
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d0a:	d112      	bne.n	8001d32 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f828 	bl	8001d62 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d20:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b82      	cmp	r3, #130	; 0x82
 8001d96:	d101      	bne.n	8001d9c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e050      	b.n	8001e3e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2282      	movs	r2, #130	; 0x82
 8001da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 031c 	and.w	r3, r3, #28
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8a1b      	ldrh	r3, [r3, #16]
 8001db8:	02db      	lsls	r3, r3, #11
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001dc2:	897b      	ldrh	r3, [r7, #10]
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f023 0302 	bic.w	r3, r3, #2
 8001dd6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001de8:	f7fe ff8e 	bl	8000d08 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dee:	e015      	b.n	8001e1c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001df0:	f7fe ff8a 	bl	8000d08 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfe:	d309      	bcc.n	8001e14 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e014      	b.n	8001e3e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e4      	bne.n	8001df0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b42      	cmp	r3, #66	; 0x42
 8001e66:	d101      	bne.n	8001e6c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e04e      	b.n	8001f0a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2242      	movs	r2, #66	; 0x42
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 031c 	and.w	r3, r3, #28
 8001e82:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8a1b      	ldrh	r3, [r3, #16]
 8001e88:	02db      	lsls	r3, r3, #11
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec2:	f7fe ff21 	bl	8000d08 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ec8:	e015      	b.n	8001ef6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001eca:	f7fe ff1d 	bl	8000d08 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d309      	bcc.n	8001eee <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e00d      	b.n	8001f0a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1e4      	bne.n	8001eca <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_ETH_Start+0x16>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e01f      	b.n	8001f68 <HAL_ETH_Start+0x56>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb45 	bl	80025c8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fb7c 	bl	800263c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fc13 	bl	8002770 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fbb0 	bl	80026b0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fbdd 	bl	8002710 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ETH_Stop+0x16>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e01f      	b.n	8001fc6 <HAL_ETH_Stop+0x56>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fba2 	bl	80026e0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fbcf 	bl	8002740 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fb67 	bl	8002676 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fbe1 	bl	8002770 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fb27 	bl	8002602 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ETH_ConfigMAC+0x1c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e0e4      	b.n	80021b6 <HAL_ETH_ConfigMAC+0x1e6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80b1 	beq.w	8002166 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <HAL_ETH_ConfigMAC+0x1f0>)
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800201c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002022:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002028:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800202e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002034:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800203a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002040:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002046:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800204c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002052:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002058:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800205e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002076:	2001      	movs	r0, #1
 8002078:	f7fe fe52 	bl	8000d20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800208c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002092:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002098:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800209e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80020a4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80020aa:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80020b6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80020b8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7fe fe2c 	bl	8000d20 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020d8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020e2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020f2:	4013      	ands	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002100:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002106:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800210c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002112:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002118:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002130:	2001      	movs	r0, #1
 8002132:	f7fe fdf5 	bl	8000d20 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002156:	2001      	movs	r0, #1
 8002158:	f7fe fde2 	bl	8000d20 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	61da      	str	r2, [r3, #28]
 8002164:	e01e      	b.n	80021a4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002174:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002196:	2001      	movs	r0, #1
 8002198:	f7fe fdc2 	bl	8000d20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	ff20810f 	.word	0xff20810f

080021c4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0b0      	sub	sp, #192	; 0xc0
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021f2:	2300      	movs	r3, #0
 80021f4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800220a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800220e:	663b      	str	r3, [r7, #96]	; 0x60
 8002210:	e001      	b.n	8002216 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002220:	2300      	movs	r3, #0
 8002222:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002230:	2340      	movs	r3, #64	; 0x40
 8002232:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002298:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229c:	4bab      	ldr	r3, [pc, #684]	; (800254c <ETH_MACDMAConfig+0x388>)
 800229e:	4013      	ands	r3, r2
 80022a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022a8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80022aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80022ac:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80022ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80022b0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80022b6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80022b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80022ba:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80022be:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80022c4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80022c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80022c8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80022ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80022cc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80022ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80022d0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80022d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022d4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80022d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f8:	2001      	movs	r0, #1
 80022fa:	f7fe fd11 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002306:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002308:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800230a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800230c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800230e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002310:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002316:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800231c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800231e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002322:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002328:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800232c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002334:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002336:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002342:	2001      	movs	r0, #1
 8002344:	f7fe fcec 	bl	8000d20 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002350:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800235a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002364:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002370:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002374:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002378:	4013      	ands	r3, r2
 800237a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800237e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002382:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002388:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800238a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800238e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002394:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800239a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800239c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80023a0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80023a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7fe fcad 	bl	8000d20 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ce:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023d0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80023d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7fe fc98 	bl	8000d20 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002402:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800240c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800241e:	2304      	movs	r3, #4
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800242e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002438:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800243e:	2300      	movs	r3, #0
 8002440:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002442:	2300      	movs	r3, #0
 8002444:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f241 0318 	movw	r3, #4120	; 0x1018
 800244e:	4413      	add	r3, r2
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002456:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <ETH_MACDMAConfig+0x38c>)
 800245c:	4013      	ands	r3, r2
 800245e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002462:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002464:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002466:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002468:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800246a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800246c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800246e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002470:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002472:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002474:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002476:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002478:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800247a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800247e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002482:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002484:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	f241 0318 	movw	r3, #4120	; 0x1018
 8002496:	4413      	add	r3, r2
 8002498:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800249c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	f241 0318 	movw	r3, #4120	; 0x1018
 80024a6:	4413      	add	r3, r2
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7fe fc36 	bl	8000d20 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80024bc:	4413      	add	r3, r2
 80024be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024c2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80024cc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024d0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80024d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80024d4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80024d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024d8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024da:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80024de:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ec:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7fe fc0f 	bl	8000d20 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800250e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10d      	bne.n	8002534 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002520:	4413      	add	r3, r2
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6811      	ldr	r1, [r2, #0]
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <ETH_MACDMAConfig+0x390>)
 800252a:	431a      	orrs	r2, r3
 800252c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002530:	440b      	add	r3, r1
 8002532:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	461a      	mov	r2, r3
 800253a:	2100      	movs	r1, #0
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f80b 	bl	8002558 <ETH_MACAddressConfig>
}
 8002542:	bf00      	nop
 8002544:	37c0      	adds	r7, #192	; 0xc0
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	ff20810f 	.word	0xff20810f
 8002550:	f8de3f23 	.word	0xf8de3f23
 8002554:	00010040 	.word	0x00010040

08002558 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3305      	adds	r3, #5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	3204      	adds	r2, #4
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <ETH_MACAddressConfig+0x68>)
 800257a:	4413      	add	r3, r2
 800257c:	461a      	mov	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3303      	adds	r3, #3
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	061a      	lsls	r2, r3, #24
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3302      	adds	r3, #2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	4313      	orrs	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <ETH_MACAddressConfig+0x6c>)
 80025aa:	4413      	add	r3, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	6013      	str	r3, [r2, #0]
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40028040 	.word	0x40028040
 80025c4:	40028044 	.word	0x40028044

080025c8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7fe fb97 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b084      	sub	sp, #16
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0208 	bic.w	r2, r2, #8
 800261c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002626:	2001      	movs	r0, #1
 8002628:	f7fe fb7a 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0204 	orr.w	r2, r2, #4
 8002656:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002660:	2001      	movs	r0, #1
 8002662:	f7fe fb5d 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0204 	bic.w	r2, r2, #4
 8002690:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800269a:	2001      	movs	r0, #1
 800269c:	f7fe fb40 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80026c0:	4413      	add	r3, r2
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80026d0:	440b      	add	r3, r1
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80026f0:	4413      	add	r3, r2
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6811      	ldr	r1, [r2, #0]
 80026f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002700:	440b      	add	r3, r1
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002720:	4413      	add	r3, r2
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6811      	ldr	r1, [r2, #0]
 8002728:	f043 0202 	orr.w	r2, r3, #2
 800272c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002730:	440b      	add	r3, r1
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002750:	4413      	add	r3, r2
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6811      	ldr	r1, [r2, #0]
 8002758:	f023 0202 	bic.w	r2, r3, #2
 800275c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002760:	440b      	add	r3, r1
 8002762:	601a      	str	r2, [r3, #0]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	f241 0318 	movw	r3, #4120	; 0x1018
 8002784:	4413      	add	r3, r2
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6811      	ldr	r1, [r2, #0]
 800278c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002790:	f241 0318 	movw	r3, #4120	; 0x1018
 8002794:	440b      	add	r3, r1
 8002796:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	f241 0318 	movw	r3, #4120	; 0x1018
 80027a0:	4413      	add	r3, r2
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7fe faba 	bl	8000d20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6819      	ldr	r1, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80027b6:	440b      	add	r3, r1
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e175      	b.n	8002ad0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8164 	bne.w	8002aca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d00b      	beq.n	8002822 <HAL_GPIO_Init+0x5e>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002816:	2b11      	cmp	r3, #17
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b12      	cmp	r3, #18
 8002820:	d130      	bne.n	8002884 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 0201 	and.w	r2, r3, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x100>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b12      	cmp	r3, #18
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80be 	beq.w	8002aca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 8002954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002958:	6453      	str	r3, [r2, #68]	; 0x44
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_GPIO_Init+0x324>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002966:	4a61      	ldr	r2, [pc, #388]	; (8002aec <HAL_GPIO_Init+0x328>)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a58      	ldr	r2, [pc, #352]	; (8002af0 <HAL_GPIO_Init+0x32c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d037      	beq.n	8002a02 <HAL_GPIO_Init+0x23e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <HAL_GPIO_Init+0x330>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_GPIO_Init+0x23a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a56      	ldr	r2, [pc, #344]	; (8002af8 <HAL_GPIO_Init+0x334>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02b      	beq.n	80029fa <HAL_GPIO_Init+0x236>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a55      	ldr	r2, [pc, #340]	; (8002afc <HAL_GPIO_Init+0x338>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d025      	beq.n	80029f6 <HAL_GPIO_Init+0x232>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a54      	ldr	r2, [pc, #336]	; (8002b00 <HAL_GPIO_Init+0x33c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <HAL_GPIO_Init+0x22e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a53      	ldr	r2, [pc, #332]	; (8002b04 <HAL_GPIO_Init+0x340>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x22a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x344>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x226>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_GPIO_Init+0x348>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x222>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a50      	ldr	r2, [pc, #320]	; (8002b10 <HAL_GPIO_Init+0x34c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x21e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <HAL_GPIO_Init+0x350>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x21a>
 80029da:	2309      	movs	r3, #9
 80029dc:	e012      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029de:	230a      	movs	r3, #10
 80029e0:	e010      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029e2:	2308      	movs	r3, #8
 80029e4:	e00e      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e00c      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029ea:	2306      	movs	r3, #6
 80029ec:	e00a      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e008      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e004      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_GPIO_Init+0x240>
 8002a02:	2300      	movs	r3, #0
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	f002 0203 	and.w	r2, r2, #3
 8002a0a:	0092      	lsls	r2, r2, #2
 8002a0c:	4093      	lsls	r3, r2
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a14:	4935      	ldr	r1, [pc, #212]	; (8002aec <HAL_GPIO_Init+0x328>)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a46:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <HAL_GPIO_Init+0x354>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3301      	adds	r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b0f      	cmp	r3, #15
 8002ad4:	f67f ae86 	bls.w	80027e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40013800 	.word	0x40013800
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020400 	.word	0x40020400
 8002af8:	40020800 	.word	0x40020800
 8002afc:	40020c00 	.word	0x40020c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40021400 	.word	0x40021400
 8002b08:	40021800 	.word	0x40021800
 8002b0c:	40021c00 	.word	0x40021c00
 8002b10:	40022000 	.word	0x40022000
 8002b14:	40022400 	.word	0x40022400
 8002b18:	40013c00 	.word	0x40013c00

08002b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b38:	e003      	b.n	8002b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	041a      	lsls	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a22      	ldr	r2, [pc, #136]	; (8002be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7e:	f7fe f8c3 	bl	8000d08 <HAL_GetTick>
 8002b82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b84:	e009      	b.n	8002b9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b86:	f7fe f8bf 	bl	8000d08 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b94:	d901      	bls.n	8002b9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e022      	b.n	8002be0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d1ee      	bne.n	8002b86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb4:	f7fe f8a8 	bl	8000d08 <HAL_GetTick>
 8002bb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bba:	e009      	b.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bbc:	f7fe f8a4 	bl	8000d08 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bca:	d901      	bls.n	8002bd0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e007      	b.n	8002be0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bdc:	d1ee      	bne.n	8002bbc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40007000 	.word	0x40007000

08002bf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e29b      	b.n	800313e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8087 	beq.w	8002d22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c14:	4b96      	ldr	r3, [pc, #600]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d00c      	beq.n	8002c3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c20:	4b93      	ldr	r3, [pc, #588]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d112      	bne.n	8002c52 <HAL_RCC_OscConfig+0x62>
 8002c2c:	4b90      	ldr	r3, [pc, #576]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c38:	d10b      	bne.n	8002c52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c3a:	4b8d      	ldr	r3, [pc, #564]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d06c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x130>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d168      	bne.n	8002d20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e275      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x7a>
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a83      	ldr	r2, [pc, #524]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e02e      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x9c>
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b7c      	ldr	r3, [pc, #496]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e01d      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xc0>
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a75      	ldr	r2, [pc, #468]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a72      	ldr	r2, [pc, #456]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCC_OscConfig+0xd8>
 8002cb0:	4b6f      	ldr	r3, [pc, #444]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a6b      	ldr	r2, [pc, #428]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f81a 	bl	8000d08 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe f816 	bl	8000d08 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e229      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0xe8>
 8002cf6:	e014      	b.n	8002d22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f806 	bl	8000d08 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe f802 	bl	8000d08 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e215      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x110>
 8002d1e:	e000      	b.n	8002d22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d069      	beq.n	8002e02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d2e:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x190>
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_RCC_OscConfig+0x17a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d001      	beq.n	8002d6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e1e9      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	493d      	ldr	r1, [pc, #244]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e040      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d023      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a38      	ldr	r2, [pc, #224]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fd ffb8 	bl	8000d08 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fd ffb4 	bl	8000d08 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e1c7      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4929      	ldr	r1, [pc, #164]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
 8002dce:	e018      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fd ff94 	bl	8000d08 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fd ff90 	bl	8000d08 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1a3      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d038      	beq.n	8002e80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d019      	beq.n	8002e4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fd ff71 	bl	8000d08 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7fd ff6d 	bl	8000d08 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e180      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x23a>
 8002e48:	e01a      	b.n	8002e80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <HAL_RCC_OscConfig+0x280>)
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fd ff57 	bl	8000d08 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e5e:	f7fd ff53 	bl	8000d08 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d903      	bls.n	8002e74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e166      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
 8002e70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	4b92      	ldr	r3, [pc, #584]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ee      	bne.n	8002e5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a4 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b8c      	ldr	r3, [pc, #560]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b89      	ldr	r3, [pc, #548]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a88      	ldr	r2, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b86      	ldr	r3, [pc, #536]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb6:	4b83      	ldr	r3, [pc, #524]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ec2:	4b80      	ldr	r3, [pc, #512]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7f      	ldr	r2, [pc, #508]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7fd ff1b 	bl	8000d08 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7fd ff17 	bl	8000d08 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b64      	cmp	r3, #100	; 0x64
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e12a      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee8:	4b76      	ldr	r3, [pc, #472]	; (80030c4 <HAL_RCC_OscConfig+0x4d4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x31a>
 8002efc:	4b70      	ldr	r3, [pc, #448]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a6f      	ldr	r2, [pc, #444]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	e02d      	b.n	8002f66 <HAL_RCC_OscConfig+0x376>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x33c>
 8002f12:	4b6b      	ldr	r3, [pc, #428]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a6a      	ldr	r2, [pc, #424]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	4b68      	ldr	r3, [pc, #416]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a67      	ldr	r2, [pc, #412]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	e01c      	b.n	8002f66 <HAL_RCC_OscConfig+0x376>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x35e>
 8002f34:	4b62      	ldr	r3, [pc, #392]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a61      	ldr	r2, [pc, #388]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a5e      	ldr	r2, [pc, #376]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	e00b      	b.n	8002f66 <HAL_RCC_OscConfig+0x376>
 8002f4e:	4b5c      	ldr	r3, [pc, #368]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a5b      	ldr	r2, [pc, #364]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f60:	f023 0304 	bic.w	r3, r3, #4
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fd fecb 	bl	8000d08 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fd fec7 	bl	8000d08 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0d8      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RCC_OscConfig+0x386>
 8002f98:	e014      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fd feb5 	bl	8000d08 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fd feb1 	bl	8000d08 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0c2      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb8:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fca:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80ae 	beq.w	800313c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe0:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d06d      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d14b      	bne.n	800308c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a31      	ldr	r2, [pc, #196]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8002ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd fe82 	bl	8000d08 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fd fe7e 	bl	8000d08 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e091      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	071b      	lsls	r3, r3, #28
 8003052:	491b      	ldr	r1, [pc, #108]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003058:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 800305e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fd fe50 	bl	8000d08 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fd fe4c 	bl	8000d08 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e05f      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x47c>
 800308a:	e057      	b.n	800313c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 8003092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fd fe36 	bl	8000d08 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fd fe32 	bl	8000d08 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e045      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_RCC_OscConfig+0x4d0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4b0>
 80030be:	e03d      	b.n	800313c <HAL_RCC_OscConfig+0x54c>
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <HAL_RCC_OscConfig+0x558>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d030      	beq.n	8003138 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d129      	bne.n	8003138 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d122      	bne.n	8003138 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f8:	4013      	ands	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003100:	4293      	cmp	r3, r2
 8003102:	d119      	bne.n	8003138 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	3b01      	subs	r3, #1
 8003112:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d10f      	bne.n	8003138 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0d0      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4965      	ldr	r1, [pc, #404]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80031ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d040      	beq.n	8003270 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d115      	bne.n	800322e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e073      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06b      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b39      	ldr	r3, [pc, #228]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4936      	ldr	r1, [pc, #216]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003240:	f7fd fd62 	bl	8000d08 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fd fd5e 	bl	8000d08 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e053      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d210      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	4922      	ldr	r1, [pc, #136]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f821 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	490a      	ldr	r1, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1cc>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1d0>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1d4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fcbe 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00
 8003314:	40023800 	.word	0x40023800
 8003318:	08014b18 	.word	0x08014b18
 800331c:	20000000 	.word	0x20000000
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b5b0      	push	{r4, r5, r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800332a:	2100      	movs	r1, #0
 800332c:	6079      	str	r1, [r7, #4]
 800332e:	2100      	movs	r1, #0
 8003330:	60f9      	str	r1, [r7, #12]
 8003332:	2100      	movs	r1, #0
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003336:	2100      	movs	r1, #0
 8003338:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800333a:	4952      	ldr	r1, [pc, #328]	; (8003484 <HAL_RCC_GetSysClockFreq+0x160>)
 800333c:	6889      	ldr	r1, [r1, #8]
 800333e:	f001 010c 	and.w	r1, r1, #12
 8003342:	2908      	cmp	r1, #8
 8003344:	d00d      	beq.n	8003362 <HAL_RCC_GetSysClockFreq+0x3e>
 8003346:	2908      	cmp	r1, #8
 8003348:	f200 8094 	bhi.w	8003474 <HAL_RCC_GetSysClockFreq+0x150>
 800334c:	2900      	cmp	r1, #0
 800334e:	d002      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x32>
 8003350:	2904      	cmp	r1, #4
 8003352:	d003      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x38>
 8003354:	e08e      	b.n	8003474 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003356:	4b4c      	ldr	r3, [pc, #304]	; (8003488 <HAL_RCC_GetSysClockFreq+0x164>)
 8003358:	60bb      	str	r3, [r7, #8]
      break;
 800335a:	e08e      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800335c:	4b4b      	ldr	r3, [pc, #300]	; (800348c <HAL_RCC_GetSysClockFreq+0x168>)
 800335e:	60bb      	str	r3, [r7, #8]
      break;
 8003360:	e08b      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003362:	4948      	ldr	r1, [pc, #288]	; (8003484 <HAL_RCC_GetSysClockFreq+0x160>)
 8003364:	6849      	ldr	r1, [r1, #4]
 8003366:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800336a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800336c:	4945      	ldr	r1, [pc, #276]	; (8003484 <HAL_RCC_GetSysClockFreq+0x160>)
 800336e:	6849      	ldr	r1, [r1, #4]
 8003370:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003374:	2900      	cmp	r1, #0
 8003376:	d024      	beq.n	80033c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	4942      	ldr	r1, [pc, #264]	; (8003484 <HAL_RCC_GetSysClockFreq+0x160>)
 800337a:	6849      	ldr	r1, [r1, #4]
 800337c:	0989      	lsrs	r1, r1, #6
 800337e:	4608      	mov	r0, r1
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003388:	f04f 0500 	mov.w	r5, #0
 800338c:	ea00 0204 	and.w	r2, r0, r4
 8003390:	ea01 0305 	and.w	r3, r1, r5
 8003394:	493d      	ldr	r1, [pc, #244]	; (800348c <HAL_RCC_GetSysClockFreq+0x168>)
 8003396:	fb01 f003 	mul.w	r0, r1, r3
 800339a:	2100      	movs	r1, #0
 800339c:	fb01 f102 	mul.w	r1, r1, r2
 80033a0:	1844      	adds	r4, r0, r1
 80033a2:	493a      	ldr	r1, [pc, #232]	; (800348c <HAL_RCC_GetSysClockFreq+0x168>)
 80033a4:	fba2 0101 	umull	r0, r1, r2, r1
 80033a8:	1863      	adds	r3, r4, r1
 80033aa:	4619      	mov	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f7fc ff94 	bl	80002e0 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e04a      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <HAL_RCC_GetSysClockFreq+0x160>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	461a      	mov	r2, r3
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	ea02 0400 	and.w	r4, r2, r0
 80033da:	ea03 0501 	and.w	r5, r3, r1
 80033de:	4620      	mov	r0, r4
 80033e0:	4629      	mov	r1, r5
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	014b      	lsls	r3, r1, #5
 80033ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033f0:	0142      	lsls	r2, r0, #5
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	1b00      	subs	r0, r0, r4
 80033f8:	eb61 0105 	sbc.w	r1, r1, r5
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	018b      	lsls	r3, r1, #6
 8003406:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800340a:	0182      	lsls	r2, r0, #6
 800340c:	1a12      	subs	r2, r2, r0
 800340e:	eb63 0301 	sbc.w	r3, r3, r1
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	00d9      	lsls	r1, r3, #3
 800341c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003420:	00d0      	lsls	r0, r2, #3
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	1912      	adds	r2, r2, r4
 8003428:	eb45 0303 	adc.w	r3, r5, r3
 800342c:	f04f 0000 	mov.w	r0, #0
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	0299      	lsls	r1, r3, #10
 8003436:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800343a:	0290      	lsls	r0, r2, #10
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	f7fc ff48 	bl	80002e0 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_GetSysClockFreq+0x160>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	3301      	adds	r3, #1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	60bb      	str	r3, [r7, #8]
      break;
 8003472:	e002      	b.n	800347a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <HAL_RCC_GetSysClockFreq+0x164>)
 8003476:	60bb      	str	r3, [r7, #8]
      break;
 8003478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347a:	68bb      	ldr	r3, [r7, #8]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bdb0      	pop	{r4, r5, r7, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400
 800348c:	017d7840 	.word	0x017d7840

08003490 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a9b      	lsrs	r3, r3, #10
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08014b28 	.word	0x08014b28

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffdc 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0b5b      	lsrs	r3, r3, #13
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08014b28 	.word	0x08014b28

080034f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e040      	b.n	800358c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f83a 	bl	8003594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8ca 	bl	80036d0 <UART_SetConfig>
 800353c:	4603      	mov	r3, r0
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e022      	b.n	800358c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fb20 	bl	8003b94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fba7 	bl	8003cd8 <UART_CheckIdleState>
 800358a:	4603      	mov	r3, r0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035bc:	2b20      	cmp	r3, #32
 80035be:	f040 8081 	bne.w	80036c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Transmit+0x26>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e079      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x38>
 80035dc:	2302      	movs	r3, #2
 80035de:	e072      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2221      	movs	r2, #33	; 0x21
 80035f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f6:	f7fd fb87 	bl	8000d08 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d108      	bne.n	8003628 <HAL_UART_Transmit+0x80>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	e003      	b.n	8003630 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003638:	e02c      	b.n	8003694 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fb90 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e038      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3302      	adds	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e007      	b.n	8003682 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1cc      	bne.n	800363a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	2140      	movs	r1, #64	; 0x40
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fb5d 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e005      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4ba7      	ldr	r3, [pc, #668]	; (8003998 <UART_SetConfig+0x2c8>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	430b      	orrs	r3, r1
 8003706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	430a      	orrs	r2, r1
 8003740:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a95      	ldr	r2, [pc, #596]	; (800399c <UART_SetConfig+0x2cc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d120      	bne.n	800378e <UART_SetConfig+0xbe>
 800374c:	4b94      	ldr	r3, [pc, #592]	; (80039a0 <UART_SetConfig+0x2d0>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b03      	cmp	r3, #3
 8003758:	d816      	bhi.n	8003788 <UART_SetConfig+0xb8>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0x90>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003771 	.word	0x08003771
 8003764:	0800377d 	.word	0x0800377d
 8003768:	08003777 	.word	0x08003777
 800376c:	08003783 	.word	0x08003783
 8003770:	2301      	movs	r3, #1
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e14f      	b.n	8003a16 <UART_SetConfig+0x346>
 8003776:	2302      	movs	r3, #2
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e14c      	b.n	8003a16 <UART_SetConfig+0x346>
 800377c:	2304      	movs	r3, #4
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e149      	b.n	8003a16 <UART_SetConfig+0x346>
 8003782:	2308      	movs	r3, #8
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e146      	b.n	8003a16 <UART_SetConfig+0x346>
 8003788:	2310      	movs	r3, #16
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e143      	b.n	8003a16 <UART_SetConfig+0x346>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a84      	ldr	r2, [pc, #528]	; (80039a4 <UART_SetConfig+0x2d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d132      	bne.n	80037fe <UART_SetConfig+0x12e>
 8003798:	4b81      	ldr	r3, [pc, #516]	; (80039a0 <UART_SetConfig+0x2d0>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d828      	bhi.n	80037f8 <UART_SetConfig+0x128>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <UART_SetConfig+0xdc>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037e1 	.word	0x080037e1
 80037b0:	080037f9 	.word	0x080037f9
 80037b4:	080037f9 	.word	0x080037f9
 80037b8:	080037f9 	.word	0x080037f9
 80037bc:	080037ed 	.word	0x080037ed
 80037c0:	080037f9 	.word	0x080037f9
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	080037f9 	.word	0x080037f9
 80037cc:	080037e7 	.word	0x080037e7
 80037d0:	080037f9 	.word	0x080037f9
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	080037f9 	.word	0x080037f9
 80037dc:	080037f3 	.word	0x080037f3
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e117      	b.n	8003a16 <UART_SetConfig+0x346>
 80037e6:	2302      	movs	r3, #2
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e114      	b.n	8003a16 <UART_SetConfig+0x346>
 80037ec:	2304      	movs	r3, #4
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e111      	b.n	8003a16 <UART_SetConfig+0x346>
 80037f2:	2308      	movs	r3, #8
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e10e      	b.n	8003a16 <UART_SetConfig+0x346>
 80037f8:	2310      	movs	r3, #16
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e10b      	b.n	8003a16 <UART_SetConfig+0x346>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <UART_SetConfig+0x2d8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d120      	bne.n	800384a <UART_SetConfig+0x17a>
 8003808:	4b65      	ldr	r3, [pc, #404]	; (80039a0 <UART_SetConfig+0x2d0>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d013      	beq.n	800383e <UART_SetConfig+0x16e>
 8003816:	2b30      	cmp	r3, #48	; 0x30
 8003818:	d814      	bhi.n	8003844 <UART_SetConfig+0x174>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d009      	beq.n	8003832 <UART_SetConfig+0x162>
 800381e:	2b20      	cmp	r3, #32
 8003820:	d810      	bhi.n	8003844 <UART_SetConfig+0x174>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <UART_SetConfig+0x15c>
 8003826:	2b10      	cmp	r3, #16
 8003828:	d006      	beq.n	8003838 <UART_SetConfig+0x168>
 800382a:	e00b      	b.n	8003844 <UART_SetConfig+0x174>
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0f1      	b.n	8003a16 <UART_SetConfig+0x346>
 8003832:	2302      	movs	r3, #2
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e0ee      	b.n	8003a16 <UART_SetConfig+0x346>
 8003838:	2304      	movs	r3, #4
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e0eb      	b.n	8003a16 <UART_SetConfig+0x346>
 800383e:	2308      	movs	r3, #8
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e0e8      	b.n	8003a16 <UART_SetConfig+0x346>
 8003844:	2310      	movs	r3, #16
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e0e5      	b.n	8003a16 <UART_SetConfig+0x346>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a57      	ldr	r2, [pc, #348]	; (80039ac <UART_SetConfig+0x2dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d120      	bne.n	8003896 <UART_SetConfig+0x1c6>
 8003854:	4b52      	ldr	r3, [pc, #328]	; (80039a0 <UART_SetConfig+0x2d0>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800385e:	2bc0      	cmp	r3, #192	; 0xc0
 8003860:	d013      	beq.n	800388a <UART_SetConfig+0x1ba>
 8003862:	2bc0      	cmp	r3, #192	; 0xc0
 8003864:	d814      	bhi.n	8003890 <UART_SetConfig+0x1c0>
 8003866:	2b80      	cmp	r3, #128	; 0x80
 8003868:	d009      	beq.n	800387e <UART_SetConfig+0x1ae>
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d810      	bhi.n	8003890 <UART_SetConfig+0x1c0>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <UART_SetConfig+0x1a8>
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d006      	beq.n	8003884 <UART_SetConfig+0x1b4>
 8003876:	e00b      	b.n	8003890 <UART_SetConfig+0x1c0>
 8003878:	2300      	movs	r3, #0
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e0cb      	b.n	8003a16 <UART_SetConfig+0x346>
 800387e:	2302      	movs	r3, #2
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e0c8      	b.n	8003a16 <UART_SetConfig+0x346>
 8003884:	2304      	movs	r3, #4
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e0c5      	b.n	8003a16 <UART_SetConfig+0x346>
 800388a:	2308      	movs	r3, #8
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e0c2      	b.n	8003a16 <UART_SetConfig+0x346>
 8003890:	2310      	movs	r3, #16
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e0bf      	b.n	8003a16 <UART_SetConfig+0x346>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a45      	ldr	r2, [pc, #276]	; (80039b0 <UART_SetConfig+0x2e0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d125      	bne.n	80038ec <UART_SetConfig+0x21c>
 80038a0:	4b3f      	ldr	r3, [pc, #252]	; (80039a0 <UART_SetConfig+0x2d0>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ae:	d017      	beq.n	80038e0 <UART_SetConfig+0x210>
 80038b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038b4:	d817      	bhi.n	80038e6 <UART_SetConfig+0x216>
 80038b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ba:	d00b      	beq.n	80038d4 <UART_SetConfig+0x204>
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c0:	d811      	bhi.n	80038e6 <UART_SetConfig+0x216>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <UART_SetConfig+0x1fe>
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d006      	beq.n	80038da <UART_SetConfig+0x20a>
 80038cc:	e00b      	b.n	80038e6 <UART_SetConfig+0x216>
 80038ce:	2300      	movs	r3, #0
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e0a0      	b.n	8003a16 <UART_SetConfig+0x346>
 80038d4:	2302      	movs	r3, #2
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e09d      	b.n	8003a16 <UART_SetConfig+0x346>
 80038da:	2304      	movs	r3, #4
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e09a      	b.n	8003a16 <UART_SetConfig+0x346>
 80038e0:	2308      	movs	r3, #8
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e097      	b.n	8003a16 <UART_SetConfig+0x346>
 80038e6:	2310      	movs	r3, #16
 80038e8:	77fb      	strb	r3, [r7, #31]
 80038ea:	e094      	b.n	8003a16 <UART_SetConfig+0x346>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a30      	ldr	r2, [pc, #192]	; (80039b4 <UART_SetConfig+0x2e4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d125      	bne.n	8003942 <UART_SetConfig+0x272>
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <UART_SetConfig+0x2d0>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003904:	d017      	beq.n	8003936 <UART_SetConfig+0x266>
 8003906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800390a:	d817      	bhi.n	800393c <UART_SetConfig+0x26c>
 800390c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003910:	d00b      	beq.n	800392a <UART_SetConfig+0x25a>
 8003912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003916:	d811      	bhi.n	800393c <UART_SetConfig+0x26c>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <UART_SetConfig+0x254>
 800391c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003920:	d006      	beq.n	8003930 <UART_SetConfig+0x260>
 8003922:	e00b      	b.n	800393c <UART_SetConfig+0x26c>
 8003924:	2301      	movs	r3, #1
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e075      	b.n	8003a16 <UART_SetConfig+0x346>
 800392a:	2302      	movs	r3, #2
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e072      	b.n	8003a16 <UART_SetConfig+0x346>
 8003930:	2304      	movs	r3, #4
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e06f      	b.n	8003a16 <UART_SetConfig+0x346>
 8003936:	2308      	movs	r3, #8
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e06c      	b.n	8003a16 <UART_SetConfig+0x346>
 800393c:	2310      	movs	r3, #16
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e069      	b.n	8003a16 <UART_SetConfig+0x346>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <UART_SetConfig+0x2e8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d137      	bne.n	80039bc <UART_SetConfig+0x2ec>
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <UART_SetConfig+0x2d0>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800395a:	d017      	beq.n	800398c <UART_SetConfig+0x2bc>
 800395c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003960:	d817      	bhi.n	8003992 <UART_SetConfig+0x2c2>
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003966:	d00b      	beq.n	8003980 <UART_SetConfig+0x2b0>
 8003968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396c:	d811      	bhi.n	8003992 <UART_SetConfig+0x2c2>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <UART_SetConfig+0x2aa>
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d006      	beq.n	8003986 <UART_SetConfig+0x2b6>
 8003978:	e00b      	b.n	8003992 <UART_SetConfig+0x2c2>
 800397a:	2300      	movs	r3, #0
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e04a      	b.n	8003a16 <UART_SetConfig+0x346>
 8003980:	2302      	movs	r3, #2
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e047      	b.n	8003a16 <UART_SetConfig+0x346>
 8003986:	2304      	movs	r3, #4
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e044      	b.n	8003a16 <UART_SetConfig+0x346>
 800398c:	2308      	movs	r3, #8
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e041      	b.n	8003a16 <UART_SetConfig+0x346>
 8003992:	2310      	movs	r3, #16
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e03e      	b.n	8003a16 <UART_SetConfig+0x346>
 8003998:	efff69f3 	.word	0xefff69f3
 800399c:	40011000 	.word	0x40011000
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40004400 	.word	0x40004400
 80039a8:	40004800 	.word	0x40004800
 80039ac:	40004c00 	.word	0x40004c00
 80039b0:	40005000 	.word	0x40005000
 80039b4:	40011400 	.word	0x40011400
 80039b8:	40007800 	.word	0x40007800
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a71      	ldr	r2, [pc, #452]	; (8003b88 <UART_SetConfig+0x4b8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d125      	bne.n	8003a12 <UART_SetConfig+0x342>
 80039c6:	4b71      	ldr	r3, [pc, #452]	; (8003b8c <UART_SetConfig+0x4bc>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039d4:	d017      	beq.n	8003a06 <UART_SetConfig+0x336>
 80039d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039da:	d817      	bhi.n	8003a0c <UART_SetConfig+0x33c>
 80039dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e0:	d00b      	beq.n	80039fa <UART_SetConfig+0x32a>
 80039e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e6:	d811      	bhi.n	8003a0c <UART_SetConfig+0x33c>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <UART_SetConfig+0x324>
 80039ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f0:	d006      	beq.n	8003a00 <UART_SetConfig+0x330>
 80039f2:	e00b      	b.n	8003a0c <UART_SetConfig+0x33c>
 80039f4:	2300      	movs	r3, #0
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e00d      	b.n	8003a16 <UART_SetConfig+0x346>
 80039fa:	2302      	movs	r3, #2
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e00a      	b.n	8003a16 <UART_SetConfig+0x346>
 8003a00:	2304      	movs	r3, #4
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	e007      	b.n	8003a16 <UART_SetConfig+0x346>
 8003a06:	2308      	movs	r3, #8
 8003a08:	77fb      	strb	r3, [r7, #31]
 8003a0a:	e004      	b.n	8003a16 <UART_SetConfig+0x346>
 8003a0c:	2310      	movs	r3, #16
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e001      	b.n	8003a16 <UART_SetConfig+0x346>
 8003a12:	2310      	movs	r3, #16
 8003a14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1e:	d15b      	bne.n	8003ad8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003a20:	7ffb      	ldrb	r3, [r7, #31]
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d827      	bhi.n	8003a76 <UART_SetConfig+0x3a6>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <UART_SetConfig+0x35c>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a61 	.word	0x08003a61
 8003a38:	08003a77 	.word	0x08003a77
 8003a3c:	08003a67 	.word	0x08003a67
 8003a40:	08003a77 	.word	0x08003a77
 8003a44:	08003a77 	.word	0x08003a77
 8003a48:	08003a77 	.word	0x08003a77
 8003a4c:	08003a6f 	.word	0x08003a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a50:	f7ff fd2a 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8003a54:	61b8      	str	r0, [r7, #24]
        break;
 8003a56:	e013      	b.n	8003a80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7ff fd3a 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	61b8      	str	r0, [r7, #24]
        break;
 8003a5e:	e00f      	b.n	8003a80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <UART_SetConfig+0x4c0>)
 8003a62:	61bb      	str	r3, [r7, #24]
        break;
 8003a64:	e00c      	b.n	8003a80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a66:	f7ff fc5d 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 8003a6a:	61b8      	str	r0, [r7, #24]
        break;
 8003a6c:	e008      	b.n	8003a80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	61bb      	str	r3, [r7, #24]
        break;
 8003a74:	e004      	b.n	8003a80 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d074      	beq.n	8003b70 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	005a      	lsls	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	441a      	add	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b0f      	cmp	r3, #15
 8003aa2:	d916      	bls.n	8003ad2 <UART_SetConfig+0x402>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aaa:	d212      	bcs.n	8003ad2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f023 030f 	bic.w	r3, r3, #15
 8003ab4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	89fb      	ldrh	r3, [r7, #14]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	89fa      	ldrh	r2, [r7, #14]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	e04e      	b.n	8003b70 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77bb      	strb	r3, [r7, #30]
 8003ad6:	e04b      	b.n	8003b70 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad8:	7ffb      	ldrb	r3, [r7, #31]
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d827      	bhi.n	8003b2e <UART_SetConfig+0x45e>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <UART_SetConfig+0x414>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b11 	.word	0x08003b11
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b1f 	.word	0x08003b1f
 8003af8:	08003b2f 	.word	0x08003b2f
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7ff fcce 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	61b8      	str	r0, [r7, #24]
        break;
 8003b0e:	e013      	b.n	8003b38 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7ff fcde 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8003b14:	61b8      	str	r0, [r7, #24]
        break;
 8003b16:	e00f      	b.n	8003b38 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <UART_SetConfig+0x4c0>)
 8003b1a:	61bb      	str	r3, [r7, #24]
        break;
 8003b1c:	e00c      	b.n	8003b38 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7ff fc01 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 8003b22:	61b8      	str	r0, [r7, #24]
        break;
 8003b24:	e008      	b.n	8003b38 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2a:	61bb      	str	r3, [r7, #24]
        break;
 8003b2c:	e004      	b.n	8003b38 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	77bb      	strb	r3, [r7, #30]
        break;
 8003b36:	bf00      	nop
    }

    if (pclk != 0U)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d018      	beq.n	8003b70 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	085a      	lsrs	r2, r3, #1
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	441a      	add	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b0f      	cmp	r3, #15
 8003b58:	d908      	bls.n	8003b6c <UART_SetConfig+0x49c>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b60:	d204      	bcs.n	8003b6c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	e001      	b.n	8003b70 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40007c00 	.word	0x40007c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400

08003b94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01a      	beq.n	8003caa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c92:	d10a      	bne.n	8003caa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
  }
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce8:	f7fd f80e 	bl	8000d08 <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d10e      	bne.n	8003d1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f82d 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e023      	b.n	8003d62 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d10e      	bne.n	8003d46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f817 	bl	8003d6a <UART_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e00d      	b.n	8003d62 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	4613      	mov	r3, r2
 8003d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7a:	e05e      	b.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d05a      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fc ffc0 	bl	8000d08 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11b      	bne.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003da8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e043      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02c      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dee:	d124      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e00f      	b.n	8003e5a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d091      	beq.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <lwip_lib_init>:
uint8_t GATEWAY_ADDRESS[4];



void lwip_lib_init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af04      	add	r7, sp, #16

	 ipaddr.addr = 0;
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <lwip_lib_init+0x70>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
	 netmask.addr = 0;
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <lwip_lib_init+0x74>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
	 gw.addr = 0;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <lwip_lib_init+0x78>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]


	 /*Initialize lwip stack  without RTOS*/
	 lwip_init();
 8003e7c:	f000 fd85 	bl	800498a <lwip_init>
//	 /*Initialize gateway address*/
//	 IP4_ADDR(&gw,GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1] , GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);


	 /*Add network interface without using RTOS*/
	 netif_add(&gnetif,&ipaddr,&netmask,&gw,NULL,&ethernetif_init,&ethernet_input);
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <lwip_lib_init+0x7c>)
 8003e82:	9302      	str	r3, [sp, #8]
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <lwip_lib_init+0x80>)
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <lwip_lib_init+0x78>)
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <lwip_lib_init+0x74>)
 8003e90:	4910      	ldr	r1, [pc, #64]	; (8003ed4 <lwip_lib_init+0x70>)
 8003e92:	4815      	ldr	r0, [pc, #84]	; (8003ee8 <lwip_lib_init+0x84>)
 8003e94:	f001 fa8e 	bl	80053b4 <netif_add>

	 /*Register default netif */
	 netif_set_default(&gnetif);
 8003e98:	4813      	ldr	r0, [pc, #76]	; (8003ee8 <lwip_lib_init+0x84>)
 8003e9a:	f001 fc45 	bl	8005728 <netif_set_default>

	 /*Check if link is up*/
	 if(netif_is_link_up(&gnetif))
 8003e9e:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <lwip_lib_init+0x84>)
 8003ea0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ea4:	089b      	lsrs	r3, r3, #2
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <lwip_lib_init+0x54>
	 {
		 netif_set_up(&gnetif);
 8003eb0:	480d      	ldr	r0, [pc, #52]	; (8003ee8 <lwip_lib_init+0x84>)
 8003eb2:	f001 fc49 	bl	8005748 <netif_set_up>
 8003eb6:	e002      	b.n	8003ebe <lwip_lib_init+0x5a>
	 }
	 else
	 {
		 netif_set_down(&gnetif);
 8003eb8:	480b      	ldr	r0, [pc, #44]	; (8003ee8 <lwip_lib_init+0x84>)
 8003eba:	f001 fcb1 	bl	8005820 <netif_set_down>
	 }


	 /*Set link change callback*/
	 netif_set_link_callback(&gnetif,ethernetif_update_config);
 8003ebe:	490b      	ldr	r1, [pc, #44]	; (8003eec <lwip_lib_init+0x88>)
 8003ec0:	4809      	ldr	r0, [pc, #36]	; (8003ee8 <lwip_lib_init+0x84>)
 8003ec2:	f001 fcdf 	bl	8005884 <netif_set_link_callback>

	 /*Enable DHCP*/
	 dhcp_start(&gnetif);
 8003ec6:	4808      	ldr	r0, [pc, #32]	; (8003ee8 <lwip_lib_init+0x84>)
 8003ec8:	f008 ff24 	bl	800cd14 <dhcp_start>

}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	200003b8 	.word	0x200003b8
 8003ed8:	200003c4 	.word	0x200003c4
 8003edc:	200003c8 	.word	0x200003c8
 8003ee0:	08010be5 	.word	0x08010be5
 8003ee4:	08004501 	.word	0x08004501
 8003ee8:	20000380 	.word	0x20000380
 8003eec:	0800453d 	.word	0x0800453d

08003ef0 <lwip_process>:



void lwip_process(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
	ethernetif_input(&gnetif);
 8003ef4:	4803      	ldr	r0, [pc, #12]	; (8003f04 <lwip_process+0x14>)
 8003ef6:	f000 fadb 	bl	80044b0 <ethernetif_input>
	sys_check_timeouts();
 8003efa:	f007 fe07 	bl	800bb0c <sys_check_timeouts>
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000380 	.word	0x20000380

08003f08 <HAL_ETH_MspInit>:

		void);


void HAL_ETH_MspInit( ETH_HandleTypeDef * ethHandle )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08e      	sub	sp, #56	; 0x38
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]

	if(ethHandle->Instance ==  ETH)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a4e      	ldr	r2, [pc, #312]	; (8004060 <HAL_ETH_MspInit+0x158>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	f040 8096 	bne.w	8004058 <HAL_ETH_MspInit+0x150>
		PB13     ------> ETH_TXD1
		PG11     ------> ETH_TX_EN
		PG13     ------> ETH_TXD0
		*/

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	4a4c      	ldr	r2, [pc, #304]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6313      	str	r3, [r2, #48]	; 0x30
 8003f38:	4b4a      	ldr	r3, [pc, #296]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f44:	4b47      	ldr	r3, [pc, #284]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4a46      	ldr	r2, [pc, #280]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f50:	4b44      	ldr	r3, [pc, #272]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5c:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	4a40      	ldr	r2, [pc, #256]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	6313      	str	r3, [r2, #48]	; 0x30
 8003f68:	4b3e      	ldr	r3, [pc, #248]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8003f74:	4b3b      	ldr	r3, [pc, #236]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_ETH_CLK_ENABLE();
 8003f8c:	4b35      	ldr	r3, [pc, #212]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	4a34      	ldr	r2, [pc, #208]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f96:	6313      	str	r3, [r2, #48]	; 0x30
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	4a2e      	ldr	r2, [pc, #184]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003faa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fae:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb0:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	4a28      	ldr	r2, [pc, #160]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003fc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_ETH_MspInit+0x15c>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]


		GPIO_InitStruct.Pin   = GPIO_PIN_1 |GPIO_PIN_4|GPIO_PIN_5;
 8003fd4:	2332      	movs	r3, #50	; 0x32
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fe0:	230b      	movs	r3, #11
 8003fe2:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fe8:	4619      	mov	r1, r3
 8003fea:	481f      	ldr	r0, [pc, #124]	; (8004068 <HAL_ETH_MspInit+0x160>)
 8003fec:	f7fe fbea 	bl	80027c4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin   = GPIO_PIN_1 |GPIO_PIN_2|GPIO_PIN_7;
 8003ff0:	2386      	movs	r3, #134	; 0x86
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ffc:	230b      	movs	r3, #11
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004004:	4619      	mov	r1, r3
 8004006:	4819      	ldr	r0, [pc, #100]	; (800406c <HAL_ETH_MspInit+0x164>)
 8004008:	f7fe fbdc 	bl	80027c4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin   = GPIO_PIN_13;
 800400c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004016:	2303      	movs	r3, #3
 8004018:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800401a:	230b      	movs	r3, #11
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004022:	4619      	mov	r1, r3
 8004024:	4812      	ldr	r0, [pc, #72]	; (8004070 <HAL_ETH_MspInit+0x168>)
 8004026:	f7fe fbcd 	bl	80027c4 <HAL_GPIO_Init>


		GPIO_InitStruct.Pin   = GPIO_PIN_11 |GPIO_PIN_13;
 800402a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004034:	2303      	movs	r3, #3
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004038:	230b      	movs	r3, #11
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800403c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004040:	4619      	mov	r1, r3
 8004042:	480c      	ldr	r0, [pc, #48]	; (8004074 <HAL_ETH_MspInit+0x16c>)
 8004044:	f7fe fbbe 	bl	80027c4 <HAL_GPIO_Init>

		/*Set ETH interrupt priority*/

		HAL_NVIC_SetPriority(ETH_IRQn,0,0);
 8004048:	2200      	movs	r2, #0
 800404a:	2100      	movs	r1, #0
 800404c:	203d      	movs	r0, #61	; 0x3d
 800404e:	f7fd f9f8 	bl	8001442 <HAL_NVIC_SetPriority>

		/*Enable ETH interrupt*/
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004052:	203d      	movs	r0, #61	; 0x3d
 8004054:	f7fd fa11 	bl	800147a <HAL_NVIC_EnableIRQ>

	}

}
 8004058:	bf00      	nop
 800405a:	3738      	adds	r7, #56	; 0x38
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40028000 	.word	0x40028000
 8004064:	40023800 	.word	0x40023800
 8004068:	40020800 	.word	0x40020800
 800406c:	40020000 	.word	0x40020000
 8004070:	40020400 	.word	0x40020400
 8004074:	40021800 	.word	0x40021800

08004078 <low_level_init>:



static void low_level_init(struct netif *netif)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]

  HAL_StatusTypeDef 	hal_eth_init_status;

  uint8_t MACAddr[6];

  heth.Instance = ETH;
 8004084:	4b4d      	ldr	r3, [pc, #308]	; (80041bc <low_level_init+0x144>)
 8004086:	4a4e      	ldr	r2, [pc, #312]	; (80041c0 <low_level_init+0x148>)
 8004088:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation =  ETH_AUTONEGOTIATION_ENABLE;
 800408a:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <low_level_init+0x144>)
 800408c:	2201      	movs	r2, #1
 800408e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed =  ETH_SPEED_100M;
 8004090:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <low_level_init+0x144>)
 8004092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004096:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode =  ETH_MODE_FULLDUPLEX;
 8004098:	4b48      	ldr	r3, [pc, #288]	; (80041bc <low_level_init+0x144>)
 800409a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800409e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80040a0:	4b46      	ldr	r3, [pc, #280]	; (80041bc <low_level_init+0x144>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	821a      	strh	r2, [r3, #16]

  MACAddr[0] = 0x00;
 80040a6:	2300      	movs	r3, #0
 80040a8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xAB;
 80040aa:	23ab      	movs	r3, #171	; 0xab
 80040ac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xCD;
 80040ae:	23cd      	movs	r3, #205	; 0xcd
 80040b0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80040b2:	2300      	movs	r3, #0
 80040b4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80040b6:	2300      	movs	r3, #0
 80040b8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80040ba:	2300      	movs	r3, #0
 80040bc:	737b      	strb	r3, [r7, #13]

  heth.Init.MACAddr = &MACAddr[0];
 80040be:	4a3f      	ldr	r2, [pc, #252]	; (80041bc <low_level_init+0x144>)
 80040c0:	f107 0308 	add.w	r3, r7, #8
 80040c4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode  =  ETH_RXPOLLING_MODE;
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <low_level_init+0x144>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]

  heth.Init.ChecksumMode =  ETH_CHECKSUM_BY_HARDWARE;
 80040cc:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <low_level_init+0x144>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface =  ETH_MEDIA_INTERFACE_RMII;
 80040d2:	4b3a      	ldr	r3, [pc, #232]	; (80041bc <low_level_init+0x144>)
 80040d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040d8:	621a      	str	r2, [r3, #32]

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80040da:	4838      	ldr	r0, [pc, #224]	; (80041bc <low_level_init+0x144>)
 80040dc:	f7fd f9e8 	bl	80014b0 <HAL_ETH_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]

  if(hal_eth_init_status ==  HAL_OK)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d108      	bne.n	80040fc <low_level_init+0x84>
  {
	  netif->flags |= NETIF_FLAG_LINK_UP;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040f0:	f043 0304 	orr.w	r3, r3, #4
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0],ETH_TXBUFNB);
 80040fc:	2305      	movs	r3, #5
 80040fe:	4a31      	ldr	r2, [pc, #196]	; (80041c4 <low_level_init+0x14c>)
 8004100:	4931      	ldr	r1, [pc, #196]	; (80041c8 <low_level_init+0x150>)
 8004102:	482e      	ldr	r0, [pc, #184]	; (80041bc <low_level_init+0x144>)
 8004104:	f7fd fb6e 	bl	80017e4 <HAL_ETH_DMATxDescListInit>

  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0],ETH_RXBUFNB);
 8004108:	2305      	movs	r3, #5
 800410a:	4a30      	ldr	r2, [pc, #192]	; (80041cc <low_level_init+0x154>)
 800410c:	4930      	ldr	r1, [pc, #192]	; (80041d0 <low_level_init+0x158>)
 800410e:	482b      	ldr	r0, [pc, #172]	; (80041bc <low_level_init+0x144>)
 8004110:	f7fd fbd1 	bl	80018b6 <HAL_ETH_DMARxDescListInit>

  /*set MAC address len*/
  netif->hwaddr_len =  ETH_HWADDR_LEN;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2206      	movs	r2, #6
 8004118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  netif->hwaddr[0] = heth.Init.MACAddr[0];
 800411c:	4b27      	ldr	r3, [pc, #156]	; (80041bc <low_level_init+0x144>)
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] = heth.Init.MACAddr[1];
 8004128:	4b24      	ldr	r3, [pc, #144]	; (80041bc <low_level_init+0x144>)
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	785a      	ldrb	r2, [r3, #1]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] = heth.Init.MACAddr[2];
 8004134:	4b21      	ldr	r3, [pc, #132]	; (80041bc <low_level_init+0x144>)
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	789a      	ldrb	r2, [r3, #2]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] = heth.Init.MACAddr[3];
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <low_level_init+0x144>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	78da      	ldrb	r2, [r3, #3]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] = heth.Init.MACAddr[4];
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <low_level_init+0x144>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	791a      	ldrb	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] = heth.Init.MACAddr[5];
 8004158:	4b18      	ldr	r3, [pc, #96]	; (80041bc <low_level_init+0x144>)
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	795a      	ldrb	r2, [r3, #5]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f


   /*Set MTU : Maximum transfer unit*/
  netif->mtu = 1500;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800416a:	851a      	strh	r2, [r3, #40]	; 0x28

  /*Enable broadcasting and ARP*/
  netif->flags  |= NETIF_FLAG_BROADCAST |NETIF_FLAG_ETHARP;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004172:	f043 030a 	orr.w	r3, r3, #10
 8004176:	b2da      	uxtb	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /*Start MAC and DMA transmission and reception*/

  HAL_ETH_Start(&heth);
 800417e:	480f      	ldr	r0, [pc, #60]	; (80041bc <low_level_init+0x144>)
 8004180:	f7fd fec7 	bl	8001f12 <HAL_ETH_Start>


  /*Enable link down interupt*/
  HAL_ETH_ReadPHYRegister(&heth,PHY_ISFR,&regvalue);
 8004184:	f107 0310 	add.w	r3, r7, #16
 8004188:	461a      	mov	r2, r3
 800418a:	211d      	movs	r1, #29
 800418c:	480b      	ldr	r0, [pc, #44]	; (80041bc <low_level_init+0x144>)
 800418e:	f7fd fdf2 	bl	8001d76 <HAL_ETH_ReadPHYRegister>
  regvalue |= PHY_ISFR_INT4;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f043 030b 	orr.w	r3, r3, #11
 8004198:	613b      	str	r3, [r7, #16]

  HAL_ETH_WritePHYRegister(&heth,PHY_ISFR,regvalue);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	461a      	mov	r2, r3
 800419e:	211d      	movs	r1, #29
 80041a0:	4806      	ldr	r0, [pc, #24]	; (80041bc <low_level_init+0x144>)
 80041a2:	f7fd fe50 	bl	8001e46 <HAL_ETH_WritePHYRegister>

  HAL_ETH_ReadPHYRegister(&heth,PHY_ISFR,&regvalue);
 80041a6:	f107 0310 	add.w	r3, r7, #16
 80041aa:	461a      	mov	r2, r3
 80041ac:	211d      	movs	r1, #29
 80041ae:	4803      	ldr	r0, [pc, #12]	; (80041bc <low_level_init+0x144>)
 80041b0:	f7fd fde1 	bl	8001d76 <HAL_ETH_ReadPHYRegister>



}
 80041b4:	bf00      	nop
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	200022d0 	.word	0x200022d0
 80041c0:	40028000 	.word	0x40028000
 80041c4:	20002318 	.word	0x20002318
 80041c8:	200003cc 	.word	0x200003cc
 80041cc:	2000046c 	.word	0x2000046c
 80041d0:	20002230 	.word	0x20002230

080041d4 <low_level_output>:


static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
	err_t errval;
	struct pbuf *q;
	__IO ETH_DMADescTypeDef	*DmaTxDesc;
	uint8_t *buffer =  (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <low_level_output+0x134>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	61fb      	str	r3, [r7, #28]
	DmaTxDesc  = heth.TxDesc;
 80041e6:	4b48      	ldr	r3, [pc, #288]	; (8004308 <low_level_output+0x134>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	623b      	str	r3, [r7, #32]

	uint32_t framelength = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
	uint32_t bufferoffset = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	617b      	str	r3, [r7, #20]
	uint32_t byteslefttocopy = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
	uint32_t payloadoffset = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]


	/*Copy frames from pbufs ro ETH buff*/

	for(q = p; q != NULL; q =  q->next )
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004200:	e05a      	b.n	80042b8 <low_level_output+0xe4>
	{
		/*Check if buffer is available*/
		if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) !=  (uint32_t)RESET)
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	da03      	bge.n	8004212 <low_level_output+0x3e>
		{
			errval =  ERR_USE;
 800420a:	23f8      	movs	r3, #248	; 0xf8
 800420c:	72fb      	strb	r3, [r7, #11]
			process_error();
 800420e:	f000 f87d 	bl	800430c <process_error>
		}

	    byteslefttocopy = q->len;
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	895b      	ldrh	r3, [r3, #10]
 8004216:	613b      	str	r3, [r7, #16]
	    payloadoffset = 0;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]

	    /*Copy and update size variables when data length is larger than TX BUFF Size*/
	    while((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 800421c:	e02f      	b.n	800427e <low_level_output+0xaa>
	    {
	    	/*Copy data to TX buffer*/
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	18d0      	adds	r0, r2, r3
	    			(uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	685a      	ldr	r2, [r3, #4]
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	18d1      	adds	r1, r2, r3
					(ETH_TX_BUF_SIZE - bufferoffset));
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004232:	1a9b      	subs	r3, r3, r2
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 8004234:	461a      	mov	r2, r3
 8004236:	f00c fe09 	bl	8010e4c <memcpy>

	    	/*Point to the next descriptor*/
	    	DmaTxDesc  =  (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	623b      	str	r3, [r7, #32]

			/*Check if buffer is available*/
			if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) !=  (uint32_t)RESET)
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da03      	bge.n	8004250 <low_level_output+0x7c>
			{
				errval =  ERR_USE;
 8004248:	23f8      	movs	r3, #248	; 0xf8
 800424a:	72fb      	strb	r3, [r7, #11]
				process_error();
 800424c:	f000 f85e 	bl	800430c <process_error>
			}

			buffer  =  (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	61fb      	str	r3, [r7, #28]

			byteslefttocopy  = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset );
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4413      	add	r3, r2
 800425c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004260:	613b      	str	r3, [r7, #16]
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset );
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800426c:	60fb      	str	r3, [r7, #12]
			framelength =  framelength + (ETH_TX_BUF_SIZE - bufferoffset );
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004278:	61bb      	str	r3, [r7, #24]

			bufferoffset = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
	    while((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	4413      	add	r3, r2
 8004284:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004288:	4293      	cmp	r3, r2
 800428a:	d8c8      	bhi.n	800421e <low_level_output+0x4a>
	    }

	    /*Copy the rest of bytes*/
	    memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	18d0      	adds	r0, r2, r3
    			(uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	685a      	ldr	r2, [r3, #4]
	    memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4619      	mov	r1, r3
 800429e:	f00c fdd5 	bl	8010e4c <memcpy>
				byteslefttocopy);

    	bufferoffset  =  bufferoffset + byteslefttocopy;
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4413      	add	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
    	framelength   =  framelength + byteslefttocopy;
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
	for(q = p; q != NULL; q =  q->next )
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1a1      	bne.n	8004202 <low_level_output+0x2e>


	}

	/*Prep TX descriptors to give to DMA*/
	HAL_ETH_TransmitFrame(&heth,framelength);
 80042be:	69b9      	ldr	r1, [r7, #24]
 80042c0:	4811      	ldr	r0, [pc, #68]	; (8004308 <low_level_output+0x134>)
 80042c2:	f7fd fb65 	bl	8001990 <HAL_ETH_TransmitFrame>

	errval = ERR_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	72fb      	strb	r3, [r7, #11]

	/*Check if Transmit Underflow Status (TUS) is set*/
	if((heth.Instance->DMASR & ETH_DMASR_TUS) !=  (uint32_t)RESET)
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <low_level_output+0x134>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80042d2:	4413      	add	r3, r2
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <low_level_output+0x126>
	{
		 /*Clear  Transmit Underflow Status (TUS)*/
		heth.Instance->DMASR =  ETH_DMASR_TUS;
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <low_level_output+0x134>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	f241 0314 	movw	r3, #4116	; 0x1014
 80042e6:	4413      	add	r3, r2
 80042e8:	2220      	movs	r2, #32
 80042ea:	601a      	str	r2, [r3, #0]

		/*Resume DMA Transmission*/
		heth.Instance->DMATPDR = 0;
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <low_level_output+0x134>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	f241 0304 	movw	r3, #4100	; 0x1004
 80042f4:	4413      	add	r3, r2
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
	}


	return errval;
 80042fa:	f997 300b 	ldrsb.w	r3, [r7, #11]


}
 80042fe:	4618      	mov	r0, r3
 8004300:	3728      	adds	r7, #40	; 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200022d0 	.word	0x200022d0

0800430c <process_error>:



static void process_error(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0

	/*Check if Transmit Underflow Status (TUS) is set*/
	if((heth.Instance->DMASR & ETH_DMASR_TUS) !=  (uint32_t)RESET)
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <process_error+0x40>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	f241 0314 	movw	r3, #4116	; 0x1014
 8004318:	4413      	add	r3, r2
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <process_error+0x34>
	{
		 /*Clear  Transmit Underflow Status (TUS)*/
		heth.Instance->DMASR =  ETH_DMASR_TUS;
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <process_error+0x40>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	f241 0314 	movw	r3, #4116	; 0x1014
 800432c:	4413      	add	r3, r2
 800432e:	2220      	movs	r2, #32
 8004330:	601a      	str	r2, [r3, #0]

		/*Resume DMA Transmission*/
		heth.Instance->DMATPDR = 0;
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <process_error+0x40>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f241 0304 	movw	r3, #4100	; 0x1004
 800433a:	4413      	add	r3, r2
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
	}
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	200022d0 	.word	0x200022d0

08004350 <low_level_input>:



static struct pbuf * low_level_input(struct netif * netif)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08c      	sub	sp, #48	; 0x30
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	__IO ETH_DMADescTypeDef  *dmarxdesc;
	uint8_t * buffer;
	struct pbuf *p = NULL;
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
	struct pbuf *q = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	623b      	str	r3, [r7, #32]
	uint16_t len   = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	81fb      	strh	r3, [r7, #14]

	uint32_t bufferoffset    =  0;
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
	uint32_t payloadoffset   =  0;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]
	uint32_t byteslefttocopy = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]


	/*Get received frame*/
	if(HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004370:	484e      	ldr	r0, [pc, #312]	; (80044ac <low_level_input+0x15c>)
 8004372:	f7fd fbf7 	bl	8001b64 <HAL_ETH_GetReceivedFrame>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <low_level_input+0x30>
	{
		return NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	e090      	b.n	80044a2 <low_level_input+0x152>
	}


	/*Get size of packet*/
	len =  heth.RxFrameInfos.length;
 8004380:	4b4a      	ldr	r3, [pc, #296]	; (80044ac <low_level_input+0x15c>)
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	81fb      	strh	r3, [r7, #14]

	buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004386:	4b49      	ldr	r3, [pc, #292]	; (80044ac <low_level_input+0x15c>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	62bb      	str	r3, [r7, #40]	; 0x28

	if( len > 0)
 800438c:	89fb      	ldrh	r3, [r7, #14]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <low_level_input+0x52>
	{
		/*Allocate pbuf from lwip buffer pool*/
		p  = pbuf_alloc(PBUF_RAW,len,PBUF_POOL);
 8004392:	89fb      	ldrh	r3, [r7, #14]
 8004394:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004398:	4619      	mov	r1, r3
 800439a:	2000      	movs	r0, #0
 800439c:	f001 fb0e 	bl	80059bc <pbuf_alloc>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24

	}
		if( p != NULL)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d049      	beq.n	800443c <low_level_input+0xec>
		{
			dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80043a8:	4b40      	ldr	r3, [pc, #256]	; (80044ac <low_level_input+0x15c>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
			bufferoffset =  0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]

			for( q = p; q != NULL; q = q->next)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	623b      	str	r3, [r7, #32]
 80043b6:	e03e      	b.n	8004436 <low_level_input+0xe6>
			{
				byteslefttocopy =  q->len;
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	895b      	ldrh	r3, [r3, #10]
 80043bc:	617b      	str	r3, [r7, #20]
				payloadoffset = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]

			    /*Copy and update size variables when data length is larger than RX BUFF Size*/


				while( (byteslefttocopy + bufferoffset) >  ETH_RX_BUF_SIZE)
 80043c2:	e01f      	b.n	8004404 <low_level_input+0xb4>
				{

					/*Copy data to pbuf*/

					memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	18d0      	adds	r0, r2, r3
							((uint8_t *)((uint8_t *)buffer +  bufferoffset)),
 80043cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	18d1      	adds	r1, r2, r3
							(ETH_RX_BUF_SIZE -  bufferoffset));
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80043d8:	1a9b      	subs	r3, r3, r2
					memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 80043da:	461a      	mov	r2, r3
 80043dc:	f00c fd36 	bl	8010e4c <memcpy>

					/*Poin to the next descriptor*/
					dmarxdesc =  (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c

					buffer = (uint8_t *) dmarxdesc->Buffer1Addr;
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28

					byteslefttocopy =  byteslefttocopy - (ETH_RX_BUF_SIZE -  bufferoffset);
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4413      	add	r3, r2
 80043f2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80043f6:	617b      	str	r3, [r7, #20]

					payloadoffset =  payloadoffset + (ETH_RX_BUF_SIZE -  bufferoffset);
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004402:	61bb      	str	r3, [r7, #24]
				while( (byteslefttocopy + bufferoffset) >  ETH_RX_BUF_SIZE)
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	4413      	add	r3, r2
 800440a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800440e:	4293      	cmp	r3, r2
 8004410:	d8d8      	bhi.n	80043c4 <low_level_input+0x74>

				}

				/*Copy remaining dat in pbuf*/

				memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	18d0      	adds	r0, r2, r3
						((uint8_t *)((uint8_t *)buffer +  bufferoffset)),
 800441a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	4413      	add	r3, r2
				memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4619      	mov	r1, r3
 8004424:	f00c fd12 	bl	8010e4c <memcpy>
						byteslefttocopy);


				bufferoffset  = bufferoffset + byteslefttocopy;
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	61fb      	str	r3, [r7, #28]
			for( q = p; q != NULL; q = q->next)
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1bd      	bne.n	80043b8 <low_level_input+0x68>



		/*Point to first descriptor*/

		dmarxdesc =  heth.RxFrameInfos.FSRxDesc;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <low_level_input+0x15c>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c

		/*Set OWN bit in RX descriptors*/
		for(int i = 0; i<heth.RxFrameInfos.SegCount; i++)
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e00b      	b.n	8004460 <low_level_input+0x110>
		{
			dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	601a      	str	r2, [r3, #0]
			dmarxdesc =  (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i = 0; i<heth.RxFrameInfos.SegCount; i++)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3301      	adds	r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <low_level_input+0x15c>)
 8004462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	429a      	cmp	r2, r3
 8004468:	d8ee      	bhi.n	8004448 <low_level_input+0xf8>
		}

		/*Clear Segment Count*/

		heth.RxFrameInfos.SegCount =  0;
 800446a:	4b10      	ldr	r3, [pc, #64]	; (80044ac <low_level_input+0x15c>)
 800446c:	2200      	movs	r2, #0
 800446e:	639a      	str	r2, [r3, #56]	; 0x38

		/*Check if RX Buffer unavailable flag is set,
		 * if so, clear and resume reception*/

		if((heth.Instance->DMASR & ETH_DMASR_RBUS) !=  (uint32_t)RESET)
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <low_level_input+0x15c>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	f241 0314 	movw	r3, #4116	; 0x1014
 8004478:	4413      	add	r3, r2
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00d      	beq.n	80044a0 <low_level_input+0x150>
		{
			/*Clear the RBUS flag*/
			heth.Instance->DMASR  = ETH_DMASR_RBUS;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <low_level_input+0x15c>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	f241 0314 	movw	r3, #4116	; 0x1014
 800448c:	4413      	add	r3, r2
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	601a      	str	r2, [r3, #0]

			/*Resume reception*/
			heth.Instance->DMARPDR = 0;
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <low_level_input+0x15c>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	f241 0308 	movw	r3, #4104	; 0x1008
 800449a:	4413      	add	r3, r2
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
		}

	return p;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3730      	adds	r7, #48	; 0x30
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	200022d0 	.word	0x200022d0

080044b0 <ethernetif_input>:



void ethernetif_input(struct netif * netif)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	err_t err;
	struct pbuf *p;

	/*Move received pcket into new pbuf*/
	p = low_level_input(netif);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ff49 	bl	8004350 <low_level_input>
 80044be:	60f8      	str	r0, [r7, #12]

	if( p == NULL)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d010      	beq.n	80044e8 <ethernetif_input+0x38>

	{
		return;
	}
	/*Entry point into LWIP stack*/
	err = netif->input(p,netif);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	4798      	blx	r3
 80044d0:	4603      	mov	r3, r0
 80044d2:	72fb      	strb	r3, [r7, #11]

	if(err != ERR_OK)
 80044d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <ethernetif_input+0x3a>
	{
		pbuf_free(p);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f001 fd0d 	bl	8005efc <pbuf_free>

		p =NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e000      	b.n	80044ea <ethernetif_input+0x3a>
		return;
 80044e8:	bf00      	nop
	}
}
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <sys_now>:


u32_t sys_now(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80044f4:	f7fc fc08 	bl	8000d08 <HAL_GetTick>
 80044f8:	4603      	mov	r3, r0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <ethernetif_init>:



err_t ethernetif_init(struct netif * netif)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	/*Set netif name*/
	netif->name[0] =  IFNAME0;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2245      	movs	r2, #69	; 0x45
 800450c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	netif->name[1] =  IFNAME1;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2258      	movs	r2, #88	; 0x58
 8004514:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	/*Set netif output function*/
	netif->output = etharp_output;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a06      	ldr	r2, [pc, #24]	; (8004534 <ethernetif_init+0x34>)
 800451c:	615a      	str	r2, [r3, #20]

	/*Set netif link output function*/
	netif->linkoutput =  low_level_output;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a05      	ldr	r2, [pc, #20]	; (8004538 <ethernetif_init+0x38>)
 8004522:	619a      	str	r2, [r3, #24]

	/*Init hardware*/
	low_level_init(netif);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff fda7 	bl	8004078 <low_level_init>

	return ERR_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	0800eba1 	.word	0x0800eba1
 8004538:	080041d5 	.word	0x080041d5

0800453c <ethernetif_update_config>:



void ethernetif_update_config(struct netif *netif)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	 __IO uint32_t tickstart = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
	 uint32_t regvalue = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	60bb      	str	r3, [r7, #8]

	 /*Check if link is up*/
	  if(netif_is_link_up(netif))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d062      	beq.n	8004624 <ethernetif_update_config+0xe8>
	  {
		 /*Check if auto-negotiation is enabled*/
		  if(heth.Init.AutoNegotiation  != ETH_AUTONEGOTIATION_DISABLE)
 800455e:	4b36      	ldr	r3, [pc, #216]	; (8004638 <ethernetif_update_config+0xfc>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d047      	beq.n	80045f6 <ethernetif_update_config+0xba>
		  {
			/*Enable Auto-negotiation*/
			  HAL_ETH_WritePHYRegister(&heth,PHY_BCR, PHY_AUTONEGOTIATION);
 8004566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800456a:	2100      	movs	r1, #0
 800456c:	4832      	ldr	r0, [pc, #200]	; (8004638 <ethernetif_update_config+0xfc>)
 800456e:	f7fd fc6a 	bl	8001e46 <HAL_ETH_WritePHYRegister>

			  /*Get current tick value*/
			  tickstart =  HAL_GetTick();
 8004572:	f7fc fbc9 	bl	8000d08 <HAL_GetTick>
 8004576:	4603      	mov	r3, r0
 8004578:	60fb      	str	r3, [r7, #12]

			  /*Wait for auto-negotiation to complete*/
			  do
			  {
				HAL_ETH_ReadPHYRegister(&heth,PHY_BSR,&regvalue);
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	461a      	mov	r2, r3
 8004580:	2101      	movs	r1, #1
 8004582:	482d      	ldr	r0, [pc, #180]	; (8004638 <ethernetif_update_config+0xfc>)
 8004584:	f7fd fbf7 	bl	8001d76 <HAL_ETH_ReadPHYRegister>

				if((HAL_GetTick() - tickstart) > 1000 )
 8004588:	f7fc fbbe 	bl	8000d08 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004596:	d90e      	bls.n	80045b6 <ethernetif_update_config+0x7a>
				{
					/*Set MAC speed and Duplex Mode to PHY*/
					HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <ethernetif_update_config+0xfc>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	08db      	lsrs	r3, r3, #3
 800459e:	b29a      	uxth	r2, r3
																(uint16_t)(heth.Init.Speed>>1));
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <ethernetif_update_config+0xfc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	b29b      	uxth	r3, r3
					HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 80045a8:	4313      	orrs	r3, r2
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	2100      	movs	r1, #0
 80045b0:	4821      	ldr	r0, [pc, #132]	; (8004638 <ethernetif_update_config+0xfc>)
 80045b2:	f7fd fc48 	bl	8001e46 <HAL_ETH_WritePHYRegister>
				}

			  }while((regvalue & PHY_AUTONEGO_COMPLETE) !=  PHY_AUTONEGO_COMPLETE);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0dc      	beq.n	800457a <ethernetif_update_config+0x3e>

			  /*Read the results of the auto-negotiation*/

			  if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d004      	beq.n	80045d4 <ethernetif_update_config+0x98>
			  {
				  /*Set ETH duplex to full-duplex*/
				  heth.Init.DuplexMode =  ETH_MODE_FULLDUPLEX;
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <ethernetif_update_config+0xfc>)
 80045cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e002      	b.n	80045da <ethernetif_update_config+0x9e>
			  }
			  else
			  {
				  /*Set ETH duplex to half-duplex*/
				  heth.Init.DuplexMode =  ETH_MODE_HALFDUPLEX;
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <ethernetif_update_config+0xfc>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	60da      	str	r2, [r3, #12]
			  }

			  if(regvalue & PHY_SPEED_STATUS)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <ethernetif_update_config+0xb0>
			  {
				  /*Set ETH speed 10M*/
				  heth.Init.Speed  =  ETH_SPEED_10M;
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <ethernetif_update_config+0xfc>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]
 80045ea:	e013      	b.n	8004614 <ethernetif_update_config+0xd8>
			  }
			  else
			  {
				  /*Set ETH speed 100M*/
				  heth.Init.Speed  =  ETH_SPEED_100M;
 80045ec:	4b12      	ldr	r3, [pc, #72]	; (8004638 <ethernetif_update_config+0xfc>)
 80045ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	e00e      	b.n	8004614 <ethernetif_update_config+0xd8>
			  }
		  }
		  else
		  {
				/*Set MAC speed and Duplex Mode to PHY*/
				HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <ethernetif_update_config+0xfc>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	08db      	lsrs	r3, r3, #3
 80045fc:	b29a      	uxth	r2, r3
															(uint16_t)(heth.Init.Speed>>1));
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <ethernetif_update_config+0xfc>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	b29b      	uxth	r3, r3
				HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 8004606:	4313      	orrs	r3, r2
 8004608:	b29b      	uxth	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	2100      	movs	r1, #0
 800460e:	480a      	ldr	r0, [pc, #40]	; (8004638 <ethernetif_update_config+0xfc>)
 8004610:	f7fd fc19 	bl	8001e46 <HAL_ETH_WritePHYRegister>
		  }


		  /*Re-configure ETH MAC*/
		  HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *)NULL);
 8004614:	2100      	movs	r1, #0
 8004616:	4808      	ldr	r0, [pc, #32]	; (8004638 <ethernetif_update_config+0xfc>)
 8004618:	f7fd fcda 	bl	8001fd0 <HAL_ETH_ConfigMAC>

		  /*Restart MAC interface*/
		  HAL_ETH_Start(&heth);
 800461c:	4806      	ldr	r0, [pc, #24]	; (8004638 <ethernetif_update_config+0xfc>)
 800461e:	f7fd fc78 	bl	8001f12 <HAL_ETH_Start>
 8004622:	e002      	b.n	800462a <ethernetif_update_config+0xee>

	  }
	  else
	  {
		  /*Stop MAC*/
		  HAL_ETH_Stop(&heth);
 8004624:	4804      	ldr	r0, [pc, #16]	; (8004638 <ethernetif_update_config+0xfc>)
 8004626:	f7fd fca3 	bl	8001f70 <HAL_ETH_Stop>
	  }

	  ethernetif_notify_conn_changed(netif);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc f954 	bl	80008d8 <ethernetif_notify_conn_changed>
}
 8004630:	bf00      	nop
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	200022d0 	.word	0x200022d0

0800463c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	b21a      	sxth	r2, r3
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b29b      	uxth	r3, r3
 8004652:	b21b      	sxth	r3, r3
 8004654:	4313      	orrs	r3, r2
 8004656:	b21b      	sxth	r3, r3
 8004658:	b29b      	uxth	r3, r3
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	061a      	lsls	r2, r3, #24
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	0e1b      	lsrs	r3, r3, #24
 800468a:	4313      	orrs	r3, r2
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00d      	beq.n	80046d8 <lwip_standard_chksum+0x40>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	dd0a      	ble.n	80046d8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	1c53      	adds	r3, r2, #1
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	f107 030e 	add.w	r3, r7, #14
 80046cc:	3301      	adds	r3, #1
 80046ce:	7812      	ldrb	r2, [r2, #0]
 80046d0:	701a      	strb	r2, [r3, #0]
    len--;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80046dc:	e00a      	b.n	80046f4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	61ba      	str	r2, [r7, #24]
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4413      	add	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    len -= 2;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	3b02      	subs	r3, #2
 80046f2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	dcf1      	bgt.n	80046de <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dd04      	ble.n	800470a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004700:	f107 030e 	add.w	r3, r7, #14
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800470a:	89fb      	ldrh	r3, [r7, #14]
 800470c:	461a      	mov	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4413      	add	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	0c1a      	lsrs	r2, r3, #16
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	b29b      	uxth	r3, r3
 800471c:	4413      	add	r3, r2
 800471e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	0c1a      	lsrs	r2, r3, #16
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	b29b      	uxth	r3, r3
 8004728:	4413      	add	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	b29a      	uxth	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	b2db      	uxtb	r3, r3
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	b29b      	uxth	r3, r3
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	72fb      	strb	r3, [r7, #11]
 8004760:	4613      	mov	r3, r2
 8004762:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e02b      	b.n	80047c6 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	895b      	ldrh	r3, [r3, #10]
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7ff ff8d 	bl	8004698 <lwip_standard_chksum>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0c1a      	lsrs	r2, r3, #16
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	b29b      	uxth	r3, r3
 8004790:	4413      	add	r3, r2
 8004792:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	895b      	ldrh	r3, [r3, #10]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00e      	beq.n	80047c0 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf0c      	ite	eq
 80047a8:	2301      	moveq	r3, #1
 80047aa:	2300      	movne	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	4313      	orrs	r3, r2
 80047be:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1d0      	bne.n	800476e <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	4313      	orrs	r3, r2
 80047e0:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff ff28 	bl	800463c <lwip_htons>
 80047ec:	4603      	mov	r3, r0
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 80047f6:	893b      	ldrh	r3, [r7, #8]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff1f 	bl	800463c <lwip_htons>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	0c1a      	lsrs	r2, r3, #16
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	b29b      	uxth	r3, r3
 8004810:	4413      	add	r3, r2
 8004812:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	0c1a      	lsrs	r2, r3, #16
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	b29b      	uxth	r3, r3
 800481c:	4413      	add	r3, r2
 800481e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	b29b      	uxth	r3, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	b29b      	uxth	r3, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	460b      	mov	r3, r1
 800483c:	72fb      	strb	r3, [r7, #11]
 800483e:	4613      	mov	r3, r2
 8004840:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	b29b      	uxth	r3, r3
 800484c:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	b29b      	uxth	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	0c1a      	lsrs	r2, r3, #16
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	b29b      	uxth	r3, r3
 800487a:	4413      	add	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	0c1a      	lsrs	r2, r3, #16
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	b29b      	uxth	r3, r3
 8004886:	4413      	add	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800488a:	893a      	ldrh	r2, [r7, #8]
 800488c:	7af9      	ldrb	r1, [r7, #11]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff ff5e 	bl	8004752 <inet_cksum_pseudo_base>
 8004896:	4603      	mov	r3, r0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	72fb      	strb	r3, [r7, #11]
 80048ae:	4613      	mov	r3, r2
 80048b0:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80048b2:	893a      	ldrh	r2, [r7, #8]
 80048b4:	7af9      	ldrb	r1, [r7, #11]
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff ffb7 	bl	8004830 <inet_chksum_pseudo>
 80048c2:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff fedb 	bl	8004698 <lwip_standard_chksum>
 80048e2:	4603      	mov	r3, r0
 80048e4:	43db      	mvns	r3, r3
 80048e6:	b29b      	uxth	r3, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e02b      	b.n	800495e <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	895b      	ldrh	r3, [r3, #10]
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7ff fec1 	bl	8004698 <lwip_standard_chksum>
 8004916:	4603      	mov	r3, r0
 8004918:	461a      	mov	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	4413      	add	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	0c1a      	lsrs	r2, r3, #16
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	b29b      	uxth	r3, r3
 8004928:	4413      	add	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	895b      	ldrh	r3, [r3, #10]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	b29a      	uxth	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1d0      	bne.n	8004906 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	b29a      	uxth	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	b2db      	uxtb	r3, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	b29b      	uxth	r3, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	b29b      	uxth	r3, r3
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8004994:	f001 fd50 	bl	8006438 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004998:	f000 f8d4 	bl	8004b44 <mem_init>
  memp_init();
 800499c:	f000 fc3a 	bl	8005214 <memp_init>
  pbuf_init();
  netif_init();
 80049a0:	f000 fd00 	bl	80053a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80049a4:	f007 f8f4 	bl	800bb90 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80049a8:	f001 fd4e 	bl	8006448 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80049ac:	f007 f866 	bl	800ba7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <ptr_to_mem+0x20>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	4413      	add	r3, r2
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	2000009c 	.word	0x2000009c

080049dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80049e4:	4b05      	ldr	r3, [pc, #20]	; (80049fc <mem_to_ptr+0x20>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	b29b      	uxth	r3, r3
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	2000009c 	.word	0x2000009c

08004a00 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004a08:	4b45      	ldr	r3, [pc, #276]	; (8004b20 <plug_holes+0x120>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d206      	bcs.n	8004a20 <plug_holes+0x20>
 8004a12:	4b44      	ldr	r3, [pc, #272]	; (8004b24 <plug_holes+0x124>)
 8004a14:	f240 12df 	movw	r2, #479	; 0x1df
 8004a18:	4943      	ldr	r1, [pc, #268]	; (8004b28 <plug_holes+0x128>)
 8004a1a:	4844      	ldr	r0, [pc, #272]	; (8004b2c <plug_holes+0x12c>)
 8004a1c:	f00c fa2c 	bl	8010e78 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004a20:	4b43      	ldr	r3, [pc, #268]	; (8004b30 <plug_holes+0x130>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d306      	bcc.n	8004a38 <plug_holes+0x38>
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <plug_holes+0x124>)
 8004a2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a30:	4940      	ldr	r1, [pc, #256]	; (8004b34 <plug_holes+0x134>)
 8004a32:	483e      	ldr	r0, [pc, #248]	; (8004b2c <plug_holes+0x12c>)
 8004a34:	f00c fa20 	bl	8010e78 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	791b      	ldrb	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d006      	beq.n	8004a4e <plug_holes+0x4e>
 8004a40:	4b38      	ldr	r3, [pc, #224]	; (8004b24 <plug_holes+0x124>)
 8004a42:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004a46:	493c      	ldr	r1, [pc, #240]	; (8004b38 <plug_holes+0x138>)
 8004a48:	4838      	ldr	r0, [pc, #224]	; (8004b2c <plug_holes+0x12c>)
 8004a4a:	f00c fa15 	bl	8010e78 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a56:	d906      	bls.n	8004a66 <plug_holes+0x66>
 8004a58:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <plug_holes+0x124>)
 8004a5a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004a5e:	4937      	ldr	r1, [pc, #220]	; (8004b3c <plug_holes+0x13c>)
 8004a60:	4832      	ldr	r0, [pc, #200]	; (8004b2c <plug_holes+0x12c>)
 8004a62:	f00c fa09 	bl	8010e78 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ffa4 	bl	80049b8 <ptr_to_mem>
 8004a70:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d024      	beq.n	8004ac4 <plug_holes+0xc4>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	791b      	ldrb	r3, [r3, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d120      	bne.n	8004ac4 <plug_holes+0xc4>
 8004a82:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <plug_holes+0x130>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d01b      	beq.n	8004ac4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004a8c:	4b2c      	ldr	r3, [pc, #176]	; (8004b40 <plug_holes+0x140>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d102      	bne.n	8004a9c <plug_holes+0x9c>
      lfree = mem;
 8004a96:	4a2a      	ldr	r2, [pc, #168]	; (8004b40 <plug_holes+0x140>)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004aac:	d00a      	beq.n	8004ac4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ff80 	bl	80049b8 <ptr_to_mem>
 8004ab8:	4604      	mov	r4, r0
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ff8e 	bl	80049dc <mem_to_ptr>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	885b      	ldrh	r3, [r3, #2]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ff75 	bl	80049b8 <ptr_to_mem>
 8004ace:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d01f      	beq.n	8004b18 <plug_holes+0x118>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	791b      	ldrb	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d11b      	bne.n	8004b18 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <plug_holes+0x140>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d102      	bne.n	8004af0 <plug_holes+0xf0>
      lfree = pmem;
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <plug_holes+0x140>)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	881a      	ldrh	r2, [r3, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b00:	d00a      	beq.n	8004b18 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff ff56 	bl	80049b8 <ptr_to_mem>
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	68b8      	ldr	r0, [r7, #8]
 8004b10:	f7ff ff64 	bl	80049dc <mem_to_ptr>
 8004b14:	4603      	mov	r3, r0
 8004b16:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd90      	pop	{r4, r7, pc}
 8004b20:	2000009c 	.word	0x2000009c
 8004b24:	08011f1c 	.word	0x08011f1c
 8004b28:	08011f4c 	.word	0x08011f4c
 8004b2c:	08011f64 	.word	0x08011f64
 8004b30:	200000a0 	.word	0x200000a0
 8004b34:	08011f8c 	.word	0x08011f8c
 8004b38:	08011fa8 	.word	0x08011fa8
 8004b3c:	08011fc4 	.word	0x08011fc4
 8004b40:	200000a4 	.word	0x200000a4

08004b44 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b4a:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <mem_init+0x6c>)
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <mem_init+0x70>)
 8004b4e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004b50:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <mem_init+0x6c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b5c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004b6a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b6e:	f7ff ff23 	bl	80049b8 <ptr_to_mem>
 8004b72:	4603      	mov	r3, r0
 8004b74:	4a10      	ldr	r2, [pc, #64]	; (8004bb8 <mem_init+0x74>)
 8004b76:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <mem_init+0x74>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <mem_init+0x74>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b88:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <mem_init+0x74>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b92:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <mem_init+0x6c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <mem_init+0x78>)
 8004b9a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8004b9c:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <mem_init+0x7c>)
 8004b9e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004ba2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	2000009c 	.word	0x2000009c
 8004bb4:	200040f4 	.word	0x200040f4
 8004bb8:	200000a0 	.word	0x200000a0
 8004bbc:	200000a4 	.word	0x200000a4
 8004bc0:	200075f0 	.word	0x200075f0

08004bc4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff05 	bl	80049dc <mem_to_ptr>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff feec 	bl	80049b8 <ptr_to_mem>
 8004be0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	885b      	ldrh	r3, [r3, #2]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fee6 	bl	80049b8 <ptr_to_mem>
 8004bec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bf6:	d818      	bhi.n	8004c2a <mem_link_valid+0x66>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	885b      	ldrh	r3, [r3, #2]
 8004bfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c00:	d813      	bhi.n	8004c2a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c06:	8afa      	ldrh	r2, [r7, #22]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d004      	beq.n	8004c16 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	8afa      	ldrh	r2, [r7, #22]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d109      	bne.n	8004c2a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <mem_link_valid+0x74>)
 8004c18:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d006      	beq.n	8004c2e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	885b      	ldrh	r3, [r3, #2]
 8004c24:	8afa      	ldrh	r2, [r7, #22]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d001      	beq.n	8004c2e <mem_link_valid+0x6a>
    return 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e000      	b.n	8004c30 <mem_link_valid+0x6c>
  }
  return 1;
 8004c2e:	2301      	movs	r3, #1
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	200000a0 	.word	0x200000a0

08004c3c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d068      	beq.n	8004d1c <mem_free+0xe0>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3b06      	subs	r3, #6
 8004c4e:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004c50:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <mem_free+0xe8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d306      	bcc.n	8004c68 <mem_free+0x2c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f103 020c 	add.w	r2, r3, #12
 8004c60:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <mem_free+0xec>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d90f      	bls.n	8004c88 <mem_free+0x4c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c68:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <mem_free+0xf0>)
 8004c6a:	f240 227f 	movw	r2, #639	; 0x27f
 8004c6e:	4930      	ldr	r1, [pc, #192]	; (8004d30 <mem_free+0xf4>)
 8004c70:	4830      	ldr	r0, [pc, #192]	; (8004d34 <mem_free+0xf8>)
 8004c72:	f00c f901 	bl	8010e78 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004c76:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <mem_free+0xfc>)
 8004c78:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <mem_free+0xfc>)
 8004c82:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 8004c86:	e04a      	b.n	8004d1e <mem_free+0xe2>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	791b      	ldrb	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10f      	bne.n	8004cb0 <mem_free+0x74>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004c90:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <mem_free+0xf0>)
 8004c92:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004c96:	4929      	ldr	r1, [pc, #164]	; (8004d3c <mem_free+0x100>)
 8004c98:	4826      	ldr	r0, [pc, #152]	; (8004d34 <mem_free+0xf8>)
 8004c9a:	f00c f8ed 	bl	8010e78 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004c9e:	4b26      	ldr	r3, [pc, #152]	; (8004d38 <mem_free+0xfc>)
 8004ca0:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <mem_free+0xfc>)
 8004caa:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 8004cae:	e036      	b.n	8004d1e <mem_free+0xe2>
  }

  if (!mem_link_valid(mem)) {
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff ff87 	bl	8004bc4 <mem_link_valid>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10f      	bne.n	8004cdc <mem_free+0xa0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004cbc:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <mem_free+0xf0>)
 8004cbe:	f240 2295 	movw	r2, #661	; 0x295
 8004cc2:	491f      	ldr	r1, [pc, #124]	; (8004d40 <mem_free+0x104>)
 8004cc4:	481b      	ldr	r0, [pc, #108]	; (8004d34 <mem_free+0xf8>)
 8004cc6:	f00c f8d7 	bl	8010e78 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <mem_free+0xfc>)
 8004ccc:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <mem_free+0xfc>)
 8004cd6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 8004cda:	e020      	b.n	8004d1e <mem_free+0xe2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <mem_free+0x108>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d202      	bcs.n	8004cf2 <mem_free+0xb6>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004cec:	4a15      	ldr	r2, [pc, #84]	; (8004d44 <mem_free+0x108>)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004cf2:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <mem_free+0xfc>)
 8004cf4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <mem_free+0xe8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68f9      	ldr	r1, [r7, #12]
 8004cfe:	1acb      	subs	r3, r1, r3
 8004d00:	b299      	uxth	r1, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	1acb      	subs	r3, r1, r3
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <mem_free+0xfc>)
 8004d10:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff fe73 	bl	8004a00 <plug_holes>
 8004d1a:	e000      	b.n	8004d1e <mem_free+0xe2>
    return;
 8004d1c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	2000009c 	.word	0x2000009c
 8004d28:	200000a0 	.word	0x200000a0
 8004d2c:	08011f1c 	.word	0x08011f1c
 8004d30:	08011ff0 	.word	0x08011ff0
 8004d34:	08011f64 	.word	0x08011f64
 8004d38:	200075f0 	.word	0x200075f0
 8004d3c:	0801200c 	.word	0x0801200c
 8004d40:	08012034 	.word	0x08012034
 8004d44:	200000a4 	.word	0x200000a4

08004d48 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004d54:	887b      	ldrh	r3, [r7, #2]
 8004d56:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004d58:	8bfb      	ldrh	r3, [r7, #30]
 8004d5a:	2b0b      	cmp	r3, #11
 8004d5c:	d801      	bhi.n	8004d62 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004d5e:	230c      	movs	r3, #12
 8004d60:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004d62:	8bfb      	ldrh	r3, [r7, #30]
 8004d64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d68:	d803      	bhi.n	8004d72 <mem_trim+0x2a>
 8004d6a:	8bfa      	ldrh	r2, [r7, #30]
 8004d6c:	887b      	ldrh	r3, [r7, #2]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d201      	bcs.n	8004d76 <mem_trim+0x2e>
    return NULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e0ec      	b.n	8004f50 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d76:	4b78      	ldr	r3, [pc, #480]	; (8004f58 <mem_trim+0x210>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d304      	bcc.n	8004d8a <mem_trim+0x42>
 8004d80:	4b76      	ldr	r3, [pc, #472]	; (8004f5c <mem_trim+0x214>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d306      	bcc.n	8004d98 <mem_trim+0x50>
 8004d8a:	4b75      	ldr	r3, [pc, #468]	; (8004f60 <mem_trim+0x218>)
 8004d8c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004d90:	4974      	ldr	r1, [pc, #464]	; (8004f64 <mem_trim+0x21c>)
 8004d92:	4875      	ldr	r0, [pc, #468]	; (8004f68 <mem_trim+0x220>)
 8004d94:	f00c f870 	bl	8010e78 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d98:	4b6f      	ldr	r3, [pc, #444]	; (8004f58 <mem_trim+0x210>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d304      	bcc.n	8004dac <mem_trim+0x64>
 8004da2:	4b6e      	ldr	r3, [pc, #440]	; (8004f5c <mem_trim+0x214>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d309      	bcc.n	8004dc0 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <mem_trim+0x224>)
 8004dae:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004db2:	3301      	adds	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	4b6d      	ldr	r3, [pc, #436]	; (8004f6c <mem_trim+0x224>)
 8004db8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return rmem;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	e0c7      	b.n	8004f50 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3b06      	subs	r3, #6
 8004dc4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004dc6:	69b8      	ldr	r0, [r7, #24]
 8004dc8:	f7ff fe08 	bl	80049dc <mem_to_ptr>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	881a      	ldrh	r2, [r3, #0]
 8004dd4:	8afb      	ldrh	r3, [r7, #22]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b06      	subs	r3, #6
 8004ddc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004dde:	8bfa      	ldrh	r2, [r7, #30]
 8004de0:	8abb      	ldrh	r3, [r7, #20]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d906      	bls.n	8004df4 <mem_trim+0xac>
 8004de6:	4b5e      	ldr	r3, [pc, #376]	; (8004f60 <mem_trim+0x218>)
 8004de8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004dec:	4960      	ldr	r1, [pc, #384]	; (8004f70 <mem_trim+0x228>)
 8004dee:	485e      	ldr	r0, [pc, #376]	; (8004f68 <mem_trim+0x220>)
 8004df0:	f00c f842 	bl	8010e78 <iprintf>
  if (newsize > size) {
 8004df4:	8bfa      	ldrh	r2, [r7, #30]
 8004df6:	8abb      	ldrh	r3, [r7, #20]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d901      	bls.n	8004e00 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e0a7      	b.n	8004f50 <mem_trim+0x208>
  }
  if (newsize == size) {
 8004e00:	8bfa      	ldrh	r2, [r7, #30]
 8004e02:	8abb      	ldrh	r3, [r7, #20]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d101      	bne.n	8004e0c <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	e0a1      	b.n	8004f50 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fdd1 	bl	80049b8 <ptr_to_mem>
 8004e16:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	791b      	ldrb	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d14b      	bne.n	8004eb8 <mem_trim+0x170>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e28:	d106      	bne.n	8004e38 <mem_trim+0xf0>
 8004e2a:	4b4d      	ldr	r3, [pc, #308]	; (8004f60 <mem_trim+0x218>)
 8004e2c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004e30:	4950      	ldr	r1, [pc, #320]	; (8004f74 <mem_trim+0x22c>)
 8004e32:	484d      	ldr	r0, [pc, #308]	; (8004f68 <mem_trim+0x220>)
 8004e34:	f00c f820 	bl	8010e78 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e3e:	8afa      	ldrh	r2, [r7, #22]
 8004e40:	8bfb      	ldrh	r3, [r7, #30]
 8004e42:	4413      	add	r3, r2
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3306      	adds	r3, #6
 8004e48:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004e4a:	4b4b      	ldr	r3, [pc, #300]	; (8004f78 <mem_trim+0x230>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d106      	bne.n	8004e62 <mem_trim+0x11a>
      lfree = ptr_to_mem(ptr2);
 8004e54:	89fb      	ldrh	r3, [r7, #14]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fdae 	bl	80049b8 <ptr_to_mem>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4a46      	ldr	r2, [pc, #280]	; (8004f78 <mem_trim+0x230>)
 8004e60:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004e62:	89fb      	ldrh	r3, [r7, #14]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fda7 	bl	80049b8 <ptr_to_mem>
 8004e6a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	89ba      	ldrh	r2, [r7, #12]
 8004e76:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	8afa      	ldrh	r2, [r7, #22]
 8004e7c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	89fa      	ldrh	r2, [r7, #14]
 8004e82:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e8c:	d007      	beq.n	8004e9e <mem_trim+0x156>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fd90 	bl	80049b8 <ptr_to_mem>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	89fb      	ldrh	r3, [r7, #14]
 8004e9c:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004e9e:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <mem_trim+0x224>)
 8004ea0:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8004ea4:	8bf9      	ldrh	r1, [r7, #30]
 8004ea6:	8abb      	ldrh	r3, [r7, #20]
 8004ea8:	1acb      	subs	r3, r1, r3
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <mem_trim+0x224>)
 8004eb2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8004eb6:	e04a      	b.n	8004f4e <mem_trim+0x206>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004eb8:	8bfb      	ldrh	r3, [r7, #30]
 8004eba:	f103 0212 	add.w	r2, r3, #18
 8004ebe:	8abb      	ldrh	r3, [r7, #20]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d844      	bhi.n	8004f4e <mem_trim+0x206>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ec4:	8afa      	ldrh	r2, [r7, #22]
 8004ec6:	8bfb      	ldrh	r3, [r7, #30]
 8004ec8:	4413      	add	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3306      	adds	r3, #6
 8004ece:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ed8:	d106      	bne.n	8004ee8 <mem_trim+0x1a0>
 8004eda:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <mem_trim+0x218>)
 8004edc:	f240 3216 	movw	r2, #790	; 0x316
 8004ee0:	4924      	ldr	r1, [pc, #144]	; (8004f74 <mem_trim+0x22c>)
 8004ee2:	4821      	ldr	r0, [pc, #132]	; (8004f68 <mem_trim+0x220>)
 8004ee4:	f00b ffc8 	bl	8010e78 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004ee8:	89fb      	ldrh	r3, [r7, #14]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fd64 	bl	80049b8 <ptr_to_mem>
 8004ef0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004ef2:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <mem_trim+0x230>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d202      	bcs.n	8004f02 <mem_trim+0x1ba>
      lfree = mem2;
 8004efc:	4a1e      	ldr	r2, [pc, #120]	; (8004f78 <mem_trim+0x230>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2200      	movs	r2, #0
 8004f06:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	8afa      	ldrh	r2, [r7, #22]
 8004f14:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	89fa      	ldrh	r2, [r7, #14]
 8004f1a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f24:	d007      	beq.n	8004f36 <mem_trim+0x1ee>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fd44 	bl	80049b8 <ptr_to_mem>
 8004f30:	4602      	mov	r2, r0
 8004f32:	89fb      	ldrh	r3, [r7, #14]
 8004f34:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8004f36:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <mem_trim+0x224>)
 8004f38:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8004f3c:	8bf9      	ldrh	r1, [r7, #30]
 8004f3e:	8abb      	ldrh	r3, [r7, #20]
 8004f40:	1acb      	subs	r3, r1, r3
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	4413      	add	r3, r2
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <mem_trim+0x224>)
 8004f4a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004f4e:	687b      	ldr	r3, [r7, #4]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	2000009c 	.word	0x2000009c
 8004f5c:	200000a0 	.word	0x200000a0
 8004f60:	08011f1c 	.word	0x08011f1c
 8004f64:	08012068 	.word	0x08012068
 8004f68:	08011f64 	.word	0x08011f64
 8004f6c:	200075f0 	.word	0x200075f0
 8004f70:	08012080 	.word	0x08012080
 8004f74:	080120a0 	.word	0x080120a0
 8004f78:	200000a4 	.word	0x200000a4

08004f7c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <mem_malloc+0x14>
    return NULL;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e0fa      	b.n	8005186 <mem_malloc+0x20a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004f94:	8bbb      	ldrh	r3, [r7, #28]
 8004f96:	2b0b      	cmp	r3, #11
 8004f98:	d801      	bhi.n	8004f9e <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004f9e:	8bbb      	ldrh	r3, [r7, #28]
 8004fa0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fa4:	d803      	bhi.n	8004fae <mem_malloc+0x32>
 8004fa6:	8bba      	ldrh	r2, [r7, #28]
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d201      	bcs.n	8004fb2 <mem_malloc+0x36>
    return NULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e0e9      	b.n	8005186 <mem_malloc+0x20a>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004fb2:	4b77      	ldr	r3, [pc, #476]	; (8005190 <mem_malloc+0x214>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fd10 	bl	80049dc <mem_to_ptr>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	83fb      	strh	r3, [r7, #30]
 8004fc0:	e0d1      	b.n	8005166 <mem_malloc+0x1ea>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004fc2:	8bfb      	ldrh	r3, [r7, #30]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fcf7 	bl	80049b8 <ptr_to_mem>
 8004fca:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	791b      	ldrb	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 80c1 	bne.w	8005158 <mem_malloc+0x1dc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	8bfb      	ldrh	r3, [r7, #30]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	1f9a      	subs	r2, r3, #6
 8004fe2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	f0c0 80b7 	bcc.w	8005158 <mem_malloc+0x1dc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	8bfb      	ldrh	r3, [r7, #30]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	1f9a      	subs	r2, r3, #6
 8004ff6:	8bbb      	ldrh	r3, [r7, #28]
 8004ff8:	3312      	adds	r3, #18
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d34c      	bcc.n	8005098 <mem_malloc+0x11c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004ffe:	8bfa      	ldrh	r2, [r7, #30]
 8005000:	8bbb      	ldrh	r3, [r7, #28]
 8005002:	4413      	add	r3, r2
 8005004:	b29b      	uxth	r3, r3
 8005006:	3306      	adds	r3, #6
 8005008:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800500a:	8a7b      	ldrh	r3, [r7, #18]
 800500c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005010:	d106      	bne.n	8005020 <mem_malloc+0xa4>
 8005012:	4b60      	ldr	r3, [pc, #384]	; (8005194 <mem_malloc+0x218>)
 8005014:	f240 3287 	movw	r2, #903	; 0x387
 8005018:	495f      	ldr	r1, [pc, #380]	; (8005198 <mem_malloc+0x21c>)
 800501a:	4860      	ldr	r0, [pc, #384]	; (800519c <mem_malloc+0x220>)
 800501c:	f00b ff2c 	bl	8010e78 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005020:	8a7b      	ldrh	r3, [r7, #18]
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fcc8 	bl	80049b8 <ptr_to_mem>
 8005028:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8bfa      	ldrh	r2, [r7, #30]
 800503c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	8a7a      	ldrh	r2, [r7, #18]
 8005042:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2201      	movs	r2, #1
 8005048:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005052:	d007      	beq.n	8005064 <mem_malloc+0xe8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fcad 	bl	80049b8 <ptr_to_mem>
 800505e:	4602      	mov	r2, r0
 8005060:	8a7b      	ldrh	r3, [r7, #18]
 8005062:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8005064:	4b4e      	ldr	r3, [pc, #312]	; (80051a0 <mem_malloc+0x224>)
 8005066:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800506a:	8bbb      	ldrh	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	b29b      	uxth	r3, r3
 8005070:	3306      	adds	r3, #6
 8005072:	b29a      	uxth	r2, r3
 8005074:	4b4a      	ldr	r3, [pc, #296]	; (80051a0 <mem_malloc+0x224>)
 8005076:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800507a:	4b49      	ldr	r3, [pc, #292]	; (80051a0 <mem_malloc+0x224>)
 800507c:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8005080:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <mem_malloc+0x224>)
 8005082:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8005086:	429a      	cmp	r2, r3
 8005088:	d227      	bcs.n	80050da <mem_malloc+0x15e>
 800508a:	4b45      	ldr	r3, [pc, #276]	; (80051a0 <mem_malloc+0x224>)
 800508c:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8005090:	4b43      	ldr	r3, [pc, #268]	; (80051a0 <mem_malloc+0x224>)
 8005092:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005096:	e020      	b.n	80050da <mem_malloc+0x15e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2201      	movs	r2, #1
 800509c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800509e:	4b40      	ldr	r3, [pc, #256]	; (80051a0 <mem_malloc+0x224>)
 80050a0:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	4413      	add	r3, r2
 80050aa:	b29c      	uxth	r4, r3
 80050ac:	6978      	ldr	r0, [r7, #20]
 80050ae:	f7ff fc95 	bl	80049dc <mem_to_ptr>
 80050b2:	4603      	mov	r3, r0
 80050b4:	1ae3      	subs	r3, r4, r3
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <mem_malloc+0x224>)
 80050ba:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80050be:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <mem_malloc+0x224>)
 80050c0:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 80050c4:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <mem_malloc+0x224>)
 80050c6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d205      	bcs.n	80050da <mem_malloc+0x15e>
 80050ce:	4b34      	ldr	r3, [pc, #208]	; (80051a0 <mem_malloc+0x224>)
 80050d0:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80050d4:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <mem_malloc+0x224>)
 80050d6:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80050da:	4b2d      	ldr	r3, [pc, #180]	; (8005190 <mem_malloc+0x214>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d127      	bne.n	8005134 <mem_malloc+0x1b8>
          struct mem *cur = lfree;
 80050e4:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <mem_malloc+0x214>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80050ea:	e005      	b.n	80050f8 <mem_malloc+0x17c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fc61 	bl	80049b8 <ptr_to_mem>
 80050f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	791b      	ldrb	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <mem_malloc+0x18e>
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <mem_malloc+0x228>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	429a      	cmp	r2, r3
 8005108:	d1f0      	bne.n	80050ec <mem_malloc+0x170>
          }
          lfree = cur;
 800510a:	4a21      	ldr	r2, [pc, #132]	; (8005190 <mem_malloc+0x214>)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005110:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <mem_malloc+0x214>)
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <mem_malloc+0x228>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d00b      	beq.n	8005134 <mem_malloc+0x1b8>
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <mem_malloc+0x214>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	791b      	ldrb	r3, [r3, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d006      	beq.n	8005134 <mem_malloc+0x1b8>
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <mem_malloc+0x218>)
 8005128:	f240 32b5 	movw	r2, #949	; 0x3b5
 800512c:	491e      	ldr	r1, [pc, #120]	; (80051a8 <mem_malloc+0x22c>)
 800512e:	481b      	ldr	r0, [pc, #108]	; (800519c <mem_malloc+0x220>)
 8005130:	f00b fea2 	bl	8010e78 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005134:	8bba      	ldrh	r2, [r7, #28]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4413      	add	r3, r2
 800513a:	3306      	adds	r3, #6
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <mem_malloc+0x228>)
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	4293      	cmp	r3, r2
 8005142:	d906      	bls.n	8005152 <mem_malloc+0x1d6>
 8005144:	4b13      	ldr	r3, [pc, #76]	; (8005194 <mem_malloc+0x218>)
 8005146:	f240 32b9 	movw	r2, #953	; 0x3b9
 800514a:	4918      	ldr	r1, [pc, #96]	; (80051ac <mem_malloc+0x230>)
 800514c:	4813      	ldr	r0, [pc, #76]	; (800519c <mem_malloc+0x220>)
 800514e:	f00b fe93 	bl	8010e78 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	3306      	adds	r3, #6
 8005156:	e016      	b.n	8005186 <mem_malloc+0x20a>
         ptr = ptr_to_mem(ptr)->next) {
 8005158:	8bfb      	ldrh	r3, [r7, #30]
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff fc2c 	bl	80049b8 <ptr_to_mem>
 8005160:	4603      	mov	r3, r0
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005166:	8bfa      	ldrh	r2, [r7, #30]
 8005168:	8bbb      	ldrh	r3, [r7, #28]
 800516a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800516e:	429a      	cmp	r2, r3
 8005170:	f4ff af27 	bcc.w	8004fc2 <mem_malloc+0x46>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <mem_malloc+0x224>)
 8005176:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800517a:	3301      	adds	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <mem_malloc+0x224>)
 8005180:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3724      	adds	r7, #36	; 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}
 800518e:	bf00      	nop
 8005190:	200000a4 	.word	0x200000a4
 8005194:	08011f1c 	.word	0x08011f1c
 8005198:	080120a0 	.word	0x080120a0
 800519c:	08011f64 	.word	0x08011f64
 80051a0:	200075f0 	.word	0x200075f0
 80051a4:	200000a0 	.word	0x200000a0
 80051a8:	080120b4 	.word	0x080120b4
 80051ac:	080120d0 	.word	0x080120d0

080051b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e011      	b.n	80051f0 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	889b      	ldrh	r3, [r3, #4]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4413      	add	r3, r2
 80051e8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	88db      	ldrh	r3, [r3, #6]
 80051f4:	461a      	mov	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4293      	cmp	r3, r2
 80051fa:	dbe7      	blt.n	80051cc <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	88d2      	ldrh	r2, [r2, #6]
 8005204:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800521a:	2300      	movs	r3, #0
 800521c:	80fb      	strh	r3, [r7, #6]
 800521e:	e014      	b.n	800524a <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	4a0e      	ldr	r2, [pc, #56]	; (800525c <memp_init+0x48>)
 8005224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff ffc1 	bl	80051b0 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	4a0a      	ldr	r2, [pc, #40]	; (800525c <memp_init+0x48>)
 8005232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	4909      	ldr	r1, [pc, #36]	; (8005260 <memp_init+0x4c>)
 800523c:	332c      	adds	r3, #44	; 0x2c
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	3301      	adds	r3, #1
 8005248:	80fb      	strh	r3, [r7, #6]
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d9e7      	bls.n	8005220 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	08014bc0 	.word	0x08014bc0
 8005260:	200075f0 	.word	0x200075f0

08005264 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01a      	beq.n	80052b0 <do_memp_malloc_pool+0x4c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	889a      	ldrh	r2, [r3, #4]
 800528a:	3201      	adds	r2, #1
 800528c:	b292      	uxth	r2, r2
 800528e:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	889a      	ldrh	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	88db      	ldrh	r3, [r3, #6]
 800529c:	429a      	cmp	r2, r3
 800529e:	d905      	bls.n	80052ac <do_memp_malloc_pool+0x48>
      desc->stats->max = desc->stats->used;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	8892      	ldrh	r2, [r2, #4]
 80052aa:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	e006      	b.n	80052be <do_memp_malloc_pool+0x5a>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	881a      	ldrh	r2, [r3, #0]
 80052b6:	3201      	adds	r2, #1
 80052b8:	b292      	uxth	r2, r2
 80052ba:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d908      	bls.n	80052ee <memp_malloc+0x22>
 80052dc:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <memp_malloc+0x3c>)
 80052de:	f240 1257 	movw	r2, #343	; 0x157
 80052e2:	490a      	ldr	r1, [pc, #40]	; (800530c <memp_malloc+0x40>)
 80052e4:	480a      	ldr	r0, [pc, #40]	; (8005310 <memp_malloc+0x44>)
 80052e6:	f00b fdc7 	bl	8010e78 <iprintf>
 80052ea:	2300      	movs	r3, #0
 80052ec:	e008      	b.n	8005300 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	4a08      	ldr	r2, [pc, #32]	; (8005314 <memp_malloc+0x48>)
 80052f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff ffb4 	bl	8005264 <do_memp_malloc_pool>
 80052fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80052fe:	68fb      	ldr	r3, [r7, #12]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08012100 	.word	0x08012100
 800530c:	0801216c 	.word	0x0801216c
 8005310:	08012144 	.word	0x08012144
 8005314:	08014bc0 	.word	0x08014bc0

08005318 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	60fb      	str	r3, [r7, #12]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	889a      	ldrh	r2, [r3, #4]
 800532c:	3a01      	subs	r2, #1
 800532e:	b292      	uxth	r2, r2
 8005330:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	6039      	str	r1, [r7, #0]
 800535a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	2b08      	cmp	r3, #8
 8005360:	d907      	bls.n	8005372 <memp_free+0x22>
 8005362:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <memp_free+0x44>)
 8005364:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005368:	490b      	ldr	r1, [pc, #44]	; (8005398 <memp_free+0x48>)
 800536a:	480c      	ldr	r0, [pc, #48]	; (800539c <memp_free+0x4c>)
 800536c:	f00b fd84 	bl	8010e78 <iprintf>
 8005370:	e00c      	b.n	800538c <memp_free+0x3c>

  if (mem == NULL) {
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <memp_free+0x50>)
 800537c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ffc8 	bl	8005318 <do_memp_free_pool>
 8005388:	e000      	b.n	800538c <memp_free+0x3c>
    return;
 800538a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	08012100 	.word	0x08012100
 8005398:	0801218c 	.word	0x0801218c
 800539c:	08012144 	.word	0x08012144
 80053a0:	08014bc0 	.word	0x08014bc0

080053a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d108      	bne.n	80053da <netif_add+0x26>
 80053c8:	4b5b      	ldr	r3, [pc, #364]	; (8005538 <netif_add+0x184>)
 80053ca:	f240 1227 	movw	r2, #295	; 0x127
 80053ce:	495b      	ldr	r1, [pc, #364]	; (800553c <netif_add+0x188>)
 80053d0:	485b      	ldr	r0, [pc, #364]	; (8005540 <netif_add+0x18c>)
 80053d2:	f00b fd51 	bl	8010e78 <iprintf>
 80053d6:	2300      	movs	r3, #0
 80053d8:	e0a9      	b.n	800552e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d108      	bne.n	80053f2 <netif_add+0x3e>
 80053e0:	4b55      	ldr	r3, [pc, #340]	; (8005538 <netif_add+0x184>)
 80053e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80053e6:	4957      	ldr	r1, [pc, #348]	; (8005544 <netif_add+0x190>)
 80053e8:	4855      	ldr	r0, [pc, #340]	; (8005540 <netif_add+0x18c>)
 80053ea:	f00b fd45 	bl	8010e78 <iprintf>
 80053ee:	2300      	movs	r3, #0
 80053f0:	e09d      	b.n	800552e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80053f8:	4b53      	ldr	r3, [pc, #332]	; (8005548 <netif_add+0x194>)
 80053fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005402:	4b51      	ldr	r3, [pc, #324]	; (8005548 <netif_add+0x194>)
 8005404:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800540c:	4b4e      	ldr	r3, [pc, #312]	; (8005548 <netif_add+0x194>)
 800540e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a49      	ldr	r2, [pc, #292]	; (800554c <netif_add+0x198>)
 8005426:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3324      	adds	r3, #36	; 0x24
 800543a:	2204      	movs	r2, #4
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f00b fd12 	bl	8010e68 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005450:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <netif_add+0x19c>)
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f914 	bl	8005694 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	4798      	blx	r3
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <netif_add+0xc8>
    return NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	e058      	b.n	800552e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005482:	2bff      	cmp	r3, #255	; 0xff
 8005484:	d103      	bne.n	800548e <netif_add+0xda>
        netif->num = 0;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005492:	4b30      	ldr	r3, [pc, #192]	; (8005554 <netif_add+0x1a0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e02b      	b.n	80054f2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d106      	bne.n	80054b0 <netif_add+0xfc>
 80054a2:	4b25      	ldr	r3, [pc, #148]	; (8005538 <netif_add+0x184>)
 80054a4:	f240 128b 	movw	r2, #395	; 0x18b
 80054a8:	492b      	ldr	r1, [pc, #172]	; (8005558 <netif_add+0x1a4>)
 80054aa:	4825      	ldr	r0, [pc, #148]	; (8005540 <netif_add+0x18c>)
 80054ac:	f00b fce4 	bl	8010e78 <iprintf>
        num_netifs++;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	3301      	adds	r3, #1
 80054b4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2bff      	cmp	r3, #255	; 0xff
 80054ba:	dd06      	ble.n	80054ca <netif_add+0x116>
 80054bc:	4b1e      	ldr	r3, [pc, #120]	; (8005538 <netif_add+0x184>)
 80054be:	f240 128d 	movw	r2, #397	; 0x18d
 80054c2:	4926      	ldr	r1, [pc, #152]	; (800555c <netif_add+0x1a8>)
 80054c4:	481e      	ldr	r0, [pc, #120]	; (8005540 <netif_add+0x18c>)
 80054c6:	f00b fcd7 	bl	8010e78 <iprintf>
        if (netif2->num == netif->num) {
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d108      	bne.n	80054ec <netif_add+0x138>
          netif->num++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80054e0:	3301      	adds	r3, #1
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80054ea:	e005      	b.n	80054f8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1d0      	bne.n	800549a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1be      	bne.n	800547c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005504:	2bfe      	cmp	r3, #254	; 0xfe
 8005506:	d103      	bne.n	8005510 <netif_add+0x15c>
    netif_num = 0;
 8005508:	4b11      	ldr	r3, [pc, #68]	; (8005550 <netif_add+0x19c>)
 800550a:	2200      	movs	r2, #0
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e006      	b.n	800551e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005516:	3301      	adds	r3, #1
 8005518:	b2da      	uxtb	r2, r3
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <netif_add+0x19c>)
 800551c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800551e:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <netif_add+0x1a0>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005526:	4a0b      	ldr	r2, [pc, #44]	; (8005554 <netif_add+0x1a0>)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	080121a8 	.word	0x080121a8
 800553c:	0801223c 	.word	0x0801223c
 8005540:	080121f8 	.word	0x080121f8
 8005544:	08012258 	.word	0x08012258
 8005548:	08014c34 	.word	0x08014c34
 800554c:	080058a7 	.word	0x080058a7
 8005550:	20000138 	.word	0x20000138
 8005554:	200075e4 	.word	0x200075e4
 8005558:	0801227c 	.word	0x0801227c
 800555c:	08012290 	.word	0x08012290

08005560 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f002 fadd 	bl	8007b2c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f007 f81f 	bl	800c5b8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <netif_do_set_ipaddr+0x20>
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <netif_do_set_ipaddr+0x88>)
 8005598:	f240 12cb 	movw	r2, #459	; 0x1cb
 800559c:	491c      	ldr	r1, [pc, #112]	; (8005610 <netif_do_set_ipaddr+0x8c>)
 800559e:	481d      	ldr	r0, [pc, #116]	; (8005614 <netif_do_set_ipaddr+0x90>)
 80055a0:	f00b fc6a 	bl	8010e78 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <netif_do_set_ipaddr+0x34>
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <netif_do_set_ipaddr+0x88>)
 80055ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80055b0:	4917      	ldr	r1, [pc, #92]	; (8005610 <netif_do_set_ipaddr+0x8c>)
 80055b2:	4818      	ldr	r0, [pc, #96]	; (8005614 <netif_do_set_ipaddr+0x90>)
 80055b4:	f00b fc60 	bl	8010e78 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3304      	adds	r3, #4
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d01c      	beq.n	8005600 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3304      	adds	r3, #4
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ffbf 	bl	8005560 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <netif_do_set_ipaddr+0x6a>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	e000      	b.n	80055f0 <netif_do_set_ipaddr+0x6c>
 80055ee:	2300      	movs	r3, #0
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80055f4:	2101      	movs	r1, #1
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f8d2 	bl	80057a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	080121a8 	.word	0x080121a8
 8005610:	080122c0 	.word	0x080122c0
 8005614:	080121f8 	.word	0x080121f8

08005618 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3308      	adds	r3, #8
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d00a      	beq.n	8005648 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <netif_do_set_netmask+0x26>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	e000      	b.n	8005640 <netif_do_set_netmask+0x28>
 800563e:	2300      	movs	r3, #0
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005656:	b480      	push	{r7}
 8005658:	b085      	sub	sp, #20
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	330c      	adds	r3, #12
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	429a      	cmp	r2, r3
 800566e:	d00a      	beq.n	8005686 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <netif_do_set_gw+0x26>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	e000      	b.n	800567e <netif_do_set_gw+0x28>
 800567c:	2300      	movs	r3, #0
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80056b0:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <netif_set_addr+0x90>)
 80056b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <netif_set_addr+0x90>)
 80056bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80056c4:	4b17      	ldr	r3, [pc, #92]	; (8005724 <netif_set_addr+0x90>)
 80056c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <netif_set_addr+0x42>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <netif_set_addr+0x46>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <netif_set_addr+0x48>
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d006      	beq.n	80056f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056e4:	f107 0310 	add.w	r3, r7, #16
 80056e8:	461a      	mov	r2, r3
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff ff49 	bl	8005584 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff ff8e 	bl	8005618 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ffa8 	bl	8005656 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800570c:	f107 0310 	add.w	r3, r7, #16
 8005710:	461a      	mov	r2, r3
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff ff35 	bl	8005584 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800571a:	bf00      	nop
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	08014c34 	.word	0x08014c34

08005728 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <netif_set_default+0x1c>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	200075e8 	.word	0x200075e8

08005748 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d107      	bne.n	8005766 <netif_set_up+0x1e>
 8005756:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <netif_set_up+0x4c>)
 8005758:	f44f 7254 	mov.w	r2, #848	; 0x350
 800575c:	490e      	ldr	r1, [pc, #56]	; (8005798 <netif_set_up+0x50>)
 800575e:	480f      	ldr	r0, [pc, #60]	; (800579c <netif_set_up+0x54>)
 8005760:	f00b fb8a 	bl	8010e78 <iprintf>
 8005764:	e013      	b.n	800578e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10c      	bne.n	800578e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	b2da      	uxtb	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005786:	2103      	movs	r1, #3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f809 	bl	80057a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	080121a8 	.word	0x080121a8
 8005798:	08012330 	.word	0x08012330
 800579c:	080121f8 	.word	0x080121f8

080057a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <netif_issue_reports+0x20>
 80057b2:	4b18      	ldr	r3, [pc, #96]	; (8005814 <netif_issue_reports+0x74>)
 80057b4:	f240 326d 	movw	r2, #877	; 0x36d
 80057b8:	4917      	ldr	r1, [pc, #92]	; (8005818 <netif_issue_reports+0x78>)
 80057ba:	4818      	ldr	r0, [pc, #96]	; (800581c <netif_issue_reports+0x7c>)
 80057bc:	f00b fb5c 	bl	8010e78 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01e      	beq.n	800580c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d017      	beq.n	800580c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d013      	beq.n	800580e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00e      	beq.n	800580e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f009 fcdf 	bl	800f1c8 <etharp_request>
 800580a:	e000      	b.n	800580e <netif_issue_reports+0x6e>
    return;
 800580c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	080121a8 	.word	0x080121a8
 8005818:	0801234c 	.word	0x0801234c
 800581c:	080121f8 	.word	0x080121f8

08005820 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d107      	bne.n	800583e <netif_set_down+0x1e>
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <netif_set_down+0x58>)
 8005830:	f240 329b 	movw	r2, #923	; 0x39b
 8005834:	4911      	ldr	r1, [pc, #68]	; (800587c <netif_set_down+0x5c>)
 8005836:	4812      	ldr	r0, [pc, #72]	; (8005880 <netif_set_down+0x60>)
 8005838:	f00b fb1e 	bl	8010e78 <iprintf>
 800583c:	e019      	b.n	8005872 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d012      	beq.n	8005872 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f009 f823 	bl	800e8b8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	080121a8 	.word	0x080121a8
 800587c:	08012370 	.word	0x08012370
 8005880:	080121f8 	.word	0x080121f8

08005884 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	61da      	str	r2, [r3, #28]
  }
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80058b2:	f06f 030b 	mvn.w	r3, #11
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
	...

080058c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <netif_get_by_index+0x48>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e00c      	b.n	80058f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058e2:	3301      	adds	r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	79fa      	ldrb	r2, [r7, #7]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d101      	bne.n	80058f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	e006      	b.n	80058fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ef      	bne.n	80058dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	200075e4 	.word	0x200075e4

08005910 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005916:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <pbuf_free_ooseq+0x38>)
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <pbuf_free_ooseq+0x3c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	e00a      	b.n	800593a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f002 f93b 	bl	8007ba8 <tcp_free_ooseq>
      return;
 8005932:	e005      	b.n	8005940 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	607b      	str	r3, [r7, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f1      	bne.n	8005924 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200075ec 	.word	0x200075ec
 800594c:	200076cc 	.word	0x200076cc

08005950 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005954:	4b03      	ldr	r3, [pc, #12]	; (8005964 <pbuf_pool_is_empty+0x14>)
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800595a:	bf00      	nop
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	200075ec 	.word	0x200075ec

08005968 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4611      	mov	r1, r2
 8005974:	461a      	mov	r2, r3
 8005976:	460b      	mov	r3, r1
 8005978:	80fb      	strh	r3, [r7, #6]
 800597a:	4613      	mov	r3, r2
 800597c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	88ba      	ldrh	r2, [r7, #4]
 8005994:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005996:	8b3b      	ldrh	r3, [r7, #24]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	7f3a      	ldrb	r2, [r7, #28]
 80059a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	73da      	strb	r2, [r3, #15]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08c      	sub	sp, #48	; 0x30
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	4603      	mov	r3, r0
 80059c4:	71fb      	strb	r3, [r7, #7]
 80059c6:	460b      	mov	r3, r1
 80059c8:	80bb      	strh	r3, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80059d2:	887b      	ldrh	r3, [r7, #2]
 80059d4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80059d8:	d067      	beq.n	8005aaa <pbuf_alloc+0xee>
 80059da:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80059de:	f300 808e 	bgt.w	8005afe <pbuf_alloc+0x142>
 80059e2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80059e6:	d010      	beq.n	8005a0a <pbuf_alloc+0x4e>
 80059e8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80059ec:	f300 8087 	bgt.w	8005afe <pbuf_alloc+0x142>
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d002      	beq.n	80059fa <pbuf_alloc+0x3e>
 80059f4:	2b41      	cmp	r3, #65	; 0x41
 80059f6:	f040 8082 	bne.w	8005afe <pbuf_alloc+0x142>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	88bb      	ldrh	r3, [r7, #4]
 80059fe:	4619      	mov	r1, r3
 8005a00:	2000      	movs	r0, #0
 8005a02:	f000 f893 	bl	8005b2c <pbuf_alloc_reference>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005a08:	e082      	b.n	8005b10 <pbuf_alloc+0x154>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005a12:	88bb      	ldrh	r3, [r7, #4]
 8005a14:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005a16:	2008      	movs	r0, #8
 8005a18:	f7ff fc58 	bl	80052cc <memp_malloc>
 8005a1c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005a24:	f7ff ff94 	bl	8005950 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a30:	f000 fa64 	bl	8005efc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e06c      	b.n	8005b12 <pbuf_alloc+0x156>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005a38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a3a:	f5c3 7313 	rsb	r3, r3, #588	; 0x24c
 8005a3e:	3302      	adds	r3, #2
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	8b7a      	ldrh	r2, [r7, #26]
 8005a44:	4293      	cmp	r3, r2
 8005a46:	bf28      	it	cs
 8005a48:	4613      	movcs	r3, r2
 8005a4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a4e:	3310      	adds	r3, #16
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	18d1      	adds	r1, r2, r3
 8005a54:	89f8      	ldrh	r0, [r7, #14]
 8005a56:	8b7a      	ldrh	r2, [r7, #26]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	887b      	ldrh	r3, [r7, #2]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	4603      	mov	r3, r0
 8005a62:	6938      	ldr	r0, [r7, #16]
 8005a64:	f7ff ff80 	bl	8005968 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005a68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a6a:	f240 224e 	movw	r2, #590	; 0x24e
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d106      	bne.n	8005a80 <pbuf_alloc+0xc4>
 8005a72:	4b2a      	ldr	r3, [pc, #168]	; (8005b1c <pbuf_alloc+0x160>)
 8005a74:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005a78:	4929      	ldr	r1, [pc, #164]	; (8005b20 <pbuf_alloc+0x164>)
 8005a7a:	482a      	ldr	r0, [pc, #168]	; (8005b24 <pbuf_alloc+0x168>)
 8005a7c:	f00b f9fc 	bl	8010e78 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <pbuf_alloc+0xd0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8a:	e002      	b.n	8005a92 <pbuf_alloc+0xd6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005a96:	8b7a      	ldrh	r2, [r7, #26]
 8005a98:	89fb      	ldrh	r3, [r7, #14]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005aa2:	8b7b      	ldrh	r3, [r7, #26]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1b6      	bne.n	8005a16 <pbuf_alloc+0x5a>
      break;
 8005aa8:	e032      	b.n	8005b10 <pbuf_alloc+0x154>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005aaa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005aac:	88bb      	ldrh	r3, [r7, #4]
 8005aae:	4413      	add	r3, r2
 8005ab0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005ab2:	8b3b      	ldrh	r3, [r7, #24]
 8005ab4:	3310      	adds	r3, #16
 8005ab6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ab8:	8b3a      	ldrh	r2, [r7, #24]
 8005aba:	88bb      	ldrh	r3, [r7, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d303      	bcc.n	8005ac8 <pbuf_alloc+0x10c>
 8005ac0:	8afa      	ldrh	r2, [r7, #22]
 8005ac2:	88bb      	ldrh	r3, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d201      	bcs.n	8005acc <pbuf_alloc+0x110>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e022      	b.n	8005b12 <pbuf_alloc+0x156>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005acc:	8afb      	ldrh	r3, [r7, #22]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fa54 	bl	8004f7c <mem_malloc>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <pbuf_alloc+0x124>
        return NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	e018      	b.n	8005b12 <pbuf_alloc+0x156>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005ae0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ae2:	3310      	adds	r3, #16
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	18d1      	adds	r1, r2, r3
 8005ae8:	88b8      	ldrh	r0, [r7, #4]
 8005aea:	88ba      	ldrh	r2, [r7, #4]
 8005aec:	2300      	movs	r3, #0
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	887b      	ldrh	r3, [r7, #2]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	4603      	mov	r3, r0
 8005af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005af8:	f7ff ff36 	bl	8005968 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005afc:	e008      	b.n	8005b10 <pbuf_alloc+0x154>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <pbuf_alloc+0x160>)
 8005b00:	f240 1227 	movw	r2, #295	; 0x127
 8005b04:	4908      	ldr	r1, [pc, #32]	; (8005b28 <pbuf_alloc+0x16c>)
 8005b06:	4807      	ldr	r0, [pc, #28]	; (8005b24 <pbuf_alloc+0x168>)
 8005b08:	f00b f9b6 	bl	8010e78 <iprintf>
      return NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <pbuf_alloc+0x156>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	080123d8 	.word	0x080123d8
 8005b20:	08012408 	.word	0x08012408
 8005b24:	0801243c 	.word	0x0801243c
 8005b28:	08012464 	.word	0x08012464

08005b2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	807b      	strh	r3, [r7, #2]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005b3c:	883b      	ldrh	r3, [r7, #0]
 8005b3e:	2b41      	cmp	r3, #65	; 0x41
 8005b40:	d009      	beq.n	8005b56 <pbuf_alloc_reference+0x2a>
 8005b42:	883b      	ldrh	r3, [r7, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d006      	beq.n	8005b56 <pbuf_alloc_reference+0x2a>
 8005b48:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <pbuf_alloc_reference+0x5c>)
 8005b4a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005b4e:	490f      	ldr	r1, [pc, #60]	; (8005b8c <pbuf_alloc_reference+0x60>)
 8005b50:	480f      	ldr	r0, [pc, #60]	; (8005b90 <pbuf_alloc_reference+0x64>)
 8005b52:	f00b f991 	bl	8010e78 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005b56:	2007      	movs	r0, #7
 8005b58:	f7ff fbb8 	bl	80052cc <memp_malloc>
 8005b5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e00b      	b.n	8005b80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005b68:	8879      	ldrh	r1, [r7, #2]
 8005b6a:	887a      	ldrh	r2, [r7, #2]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	883b      	ldrh	r3, [r7, #0]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	460b      	mov	r3, r1
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fef5 	bl	8005968 <pbuf_init_alloced_pbuf>
  return p;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	080123d8 	.word	0x080123d8
 8005b8c:	08012480 	.word	0x08012480
 8005b90:	0801243c 	.word	0x0801243c

08005b94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	73fb      	strb	r3, [r7, #15]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	81bb      	strh	r3, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005bac:	8a7a      	ldrh	r2, [r7, #18]
 8005bae:	89bb      	ldrh	r3, [r7, #12]
 8005bb0:	441a      	add	r2, r3
 8005bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d901      	bls.n	8005bbc <pbuf_alloced_custom+0x28>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e015      	b.n	8005be8 <pbuf_alloced_custom+0x54>
  }

  if (payload_mem != NULL) {
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <pbuf_alloced_custom+0x38>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005bc2:	8a7b      	ldrh	r3, [r7, #18]
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e001      	b.n	8005bd0 <pbuf_alloced_custom+0x3c>
  } else {
    payload = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	89b9      	ldrh	r1, [r7, #12]
 8005bd4:	89ba      	ldrh	r2, [r7, #12]
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	460b      	mov	r3, r1
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	f7ff fec1 	bl	8005968 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005be6:	687b      	ldr	r3, [r7, #4]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <pbuf_realloc+0x20>
 8005c02:	4b3a      	ldr	r3, [pc, #232]	; (8005cec <pbuf_realloc+0xfc>)
 8005c04:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005c08:	4939      	ldr	r1, [pc, #228]	; (8005cf0 <pbuf_realloc+0x100>)
 8005c0a:	483a      	ldr	r0, [pc, #232]	; (8005cf4 <pbuf_realloc+0x104>)
 8005c0c:	f00b f934 	bl	8010e78 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	891b      	ldrh	r3, [r3, #8]
 8005c14:	887a      	ldrh	r2, [r7, #2]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d263      	bcs.n	8005ce2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	891a      	ldrh	r2, [r3, #8]
 8005c1e:	887b      	ldrh	r3, [r7, #2]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	817b      	strh	r3, [r7, #10]
  q = p;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005c2c:	e018      	b.n	8005c60 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	895b      	ldrh	r3, [r3, #10]
 8005c32:	897a      	ldrh	r2, [r7, #10]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	891a      	ldrh	r2, [r3, #8]
 8005c3c:	893b      	ldrh	r3, [r7, #8]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <pbuf_realloc+0x70>
 8005c52:	4b26      	ldr	r3, [pc, #152]	; (8005cec <pbuf_realloc+0xfc>)
 8005c54:	f240 12af 	movw	r2, #431	; 0x1af
 8005c58:	4927      	ldr	r1, [pc, #156]	; (8005cf8 <pbuf_realloc+0x108>)
 8005c5a:	4826      	ldr	r0, [pc, #152]	; (8005cf4 <pbuf_realloc+0x104>)
 8005c5c:	f00b f90c 	bl	8010e78 <iprintf>
  while (rem_len > q->len) {
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	895b      	ldrh	r3, [r3, #10]
 8005c64:	897a      	ldrh	r2, [r7, #10]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d8e1      	bhi.n	8005c2e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	7b1b      	ldrb	r3, [r3, #12]
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d121      	bne.n	8005cba <pbuf_realloc+0xca>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	895b      	ldrh	r3, [r3, #10]
 8005c7a:	897a      	ldrh	r2, [r7, #10]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d01c      	beq.n	8005cba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	7b5b      	ldrb	r3, [r3, #13]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d116      	bne.n	8005cba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	897b      	ldrh	r3, [r7, #10]
 8005c98:	4413      	add	r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff f852 	bl	8004d48 <mem_trim>
 8005ca4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <pbuf_realloc+0xca>
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <pbuf_realloc+0xfc>)
 8005cae:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005cb2:	4912      	ldr	r1, [pc, #72]	; (8005cfc <pbuf_realloc+0x10c>)
 8005cb4:	480f      	ldr	r0, [pc, #60]	; (8005cf4 <pbuf_realloc+0x104>)
 8005cb6:	f00b f8df 	bl	8010e78 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	897a      	ldrh	r2, [r7, #10]
 8005cbe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	895a      	ldrh	r2, [r3, #10]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d004      	beq.n	8005cda <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f911 	bl	8005efc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e000      	b.n	8005ce4 <pbuf_realloc+0xf4>
    return;
 8005ce2:	bf00      	nop

}
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	080123d8 	.word	0x080123d8
 8005cf0:	08012494 	.word	0x08012494
 8005cf4:	0801243c 	.word	0x0801243c
 8005cf8:	080124ac 	.word	0x080124ac
 8005cfc:	080124c4 	.word	0x080124c4

08005d00 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d106      	bne.n	8005d22 <pbuf_add_header_impl+0x22>
 8005d14:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <pbuf_add_header_impl+0xc4>)
 8005d16:	f240 12df 	movw	r2, #479	; 0x1df
 8005d1a:	492b      	ldr	r1, [pc, #172]	; (8005dc8 <pbuf_add_header_impl+0xc8>)
 8005d1c:	482b      	ldr	r0, [pc, #172]	; (8005dcc <pbuf_add_header_impl+0xcc>)
 8005d1e:	f00b f8ab 	bl	8010e78 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <pbuf_add_header_impl+0x30>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2e:	d301      	bcc.n	8005d34 <pbuf_add_header_impl+0x34>
    return 1;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e043      	b.n	8005dbc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <pbuf_add_header_impl+0x3e>
    return 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e03e      	b.n	8005dbc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	891a      	ldrh	r2, [r3, #8]
 8005d46:	8a7b      	ldrh	r3, [r7, #18]
 8005d48:	4413      	add	r3, r2
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	8a7a      	ldrh	r2, [r7, #18]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d901      	bls.n	8005d56 <pbuf_add_header_impl+0x56>
    return 1;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e032      	b.n	8005dbc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	7b1b      	ldrb	r3, [r3, #12]
 8005d5a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005d5c:	8a3b      	ldrh	r3, [r7, #16]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00c      	beq.n	8005d80 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	425b      	negs	r3, r3
 8005d6e:	4413      	add	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3310      	adds	r3, #16
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d20d      	bcs.n	8005d98 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e01d      	b.n	8005dbc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005d80:	79fb      	ldrb	r3, [r7, #7]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d006      	beq.n	8005d94 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	425b      	negs	r3, r3
 8005d8e:	4413      	add	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e001      	b.n	8005d98 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e011      	b.n	8005dbc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	895a      	ldrh	r2, [r3, #10]
 8005da2:	8a7b      	ldrh	r3, [r7, #18]
 8005da4:	4413      	add	r3, r2
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	891a      	ldrh	r2, [r3, #8]
 8005db0:	8a7b      	ldrh	r3, [r7, #18]
 8005db2:	4413      	add	r3, r2
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	811a      	strh	r2, [r3, #8]


  return 0;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	080123d8 	.word	0x080123d8
 8005dc8:	080124e0 	.word	0x080124e0
 8005dcc:	0801243c 	.word	0x0801243c

08005dd0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ff8e 	bl	8005d00 <pbuf_add_header_impl>
 8005de4:	4603      	mov	r3, r0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d106      	bne.n	8005e0e <pbuf_remove_header+0x1e>
 8005e00:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <pbuf_remove_header+0x94>)
 8005e02:	f240 224b 	movw	r2, #587	; 0x24b
 8005e06:	4920      	ldr	r1, [pc, #128]	; (8005e88 <pbuf_remove_header+0x98>)
 8005e08:	4820      	ldr	r0, [pc, #128]	; (8005e8c <pbuf_remove_header+0x9c>)
 8005e0a:	f00b f835 	bl	8010e78 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <pbuf_remove_header+0x2c>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1a:	d301      	bcc.n	8005e20 <pbuf_remove_header+0x30>
    return 1;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e02c      	b.n	8005e7a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <pbuf_remove_header+0x3a>
    return 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e027      	b.n	8005e7a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	895b      	ldrh	r3, [r3, #10]
 8005e32:	89fa      	ldrh	r2, [r7, #14]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d908      	bls.n	8005e4a <pbuf_remove_header+0x5a>
 8005e38:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <pbuf_remove_header+0x94>)
 8005e3a:	f240 2255 	movw	r2, #597	; 0x255
 8005e3e:	4914      	ldr	r1, [pc, #80]	; (8005e90 <pbuf_remove_header+0xa0>)
 8005e40:	4812      	ldr	r0, [pc, #72]	; (8005e8c <pbuf_remove_header+0x9c>)
 8005e42:	f00b f819 	bl	8010e78 <iprintf>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e017      	b.n	8005e7a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	441a      	add	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	895a      	ldrh	r2, [r3, #10]
 8005e60:	89fb      	ldrh	r3, [r7, #14]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	891a      	ldrh	r2, [r3, #8]
 8005e6e:	89fb      	ldrh	r3, [r7, #14]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	080123d8 	.word	0x080123d8
 8005e88:	080124e0 	.word	0x080124e0
 8005e8c:	0801243c 	.word	0x0801243c
 8005e90:	080124ec 	.word	0x080124ec

08005e94 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	807b      	strh	r3, [r7, #2]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005ea4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da08      	bge.n	8005ebe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005eb0:	425b      	negs	r3, r3
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff9b 	bl	8005df0 <pbuf_remove_header>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	e007      	b.n	8005ece <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005ebe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ec2:	787a      	ldrb	r2, [r7, #1]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff ff1a 	bl	8005d00 <pbuf_add_header_impl>
 8005ecc:	4603      	mov	r3, r0
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005ee2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ffd2 	bl	8005e94 <pbuf_header_impl>
 8005ef0:	4603      	mov	r3, r0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <pbuf_free+0x22>
 8005f10:	4b38      	ldr	r3, [pc, #224]	; (8005ff4 <pbuf_free+0xf8>)
 8005f12:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005f16:	4938      	ldr	r1, [pc, #224]	; (8005ff8 <pbuf_free+0xfc>)
 8005f18:	4838      	ldr	r0, [pc, #224]	; (8005ffc <pbuf_free+0x100>)
 8005f1a:	f00a ffad 	bl	8010e78 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e063      	b.n	8005fea <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005f26:	e05c      	b.n	8005fe2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	7b9b      	ldrb	r3, [r3, #14]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <pbuf_free+0x42>
 8005f30:	4b30      	ldr	r3, [pc, #192]	; (8005ff4 <pbuf_free+0xf8>)
 8005f32:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005f36:	4932      	ldr	r1, [pc, #200]	; (8006000 <pbuf_free+0x104>)
 8005f38:	4830      	ldr	r0, [pc, #192]	; (8005ffc <pbuf_free+0x100>)
 8005f3a:	f00a ff9d 	bl	8010e78 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	7b9b      	ldrb	r3, [r3, #14]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	739a      	strb	r2, [r3, #14]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7b9b      	ldrb	r3, [r3, #14]
 8005f4e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005f50:	7dbb      	ldrb	r3, [r7, #22]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d143      	bne.n	8005fde <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7b1b      	ldrb	r3, [r3, #12]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	7b5b      	ldrb	r3, [r3, #13]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d011      	beq.n	8005f96 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <pbuf_free+0x90>
 8005f7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <pbuf_free+0xf8>)
 8005f80:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005f84:	491f      	ldr	r1, [pc, #124]	; (8006004 <pbuf_free+0x108>)
 8005f86:	481d      	ldr	r0, [pc, #116]	; (8005ffc <pbuf_free+0x100>)
 8005f88:	f00a ff76 	bl	8010e78 <iprintf>
        pc->custom_free_function(p);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
 8005f94:	e01d      	b.n	8005fd2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d104      	bne.n	8005fa6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	2008      	movs	r0, #8
 8005fa0:	f7ff f9d6 	bl	8005350 <memp_free>
 8005fa4:	e015      	b.n	8005fd2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d104      	bne.n	8005fb6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	2007      	movs	r0, #7
 8005fb0:	f7ff f9ce 	bl	8005350 <memp_free>
 8005fb4:	e00d      	b.n	8005fd2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <pbuf_free+0xc8>
          mem_free(p);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fe fe3d 	bl	8004c3c <mem_free>
 8005fc2:	e006      	b.n	8005fd2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005fc4:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <pbuf_free+0xf8>)
 8005fc6:	f240 320f 	movw	r2, #783	; 0x30f
 8005fca:	490f      	ldr	r1, [pc, #60]	; (8006008 <pbuf_free+0x10c>)
 8005fcc:	480b      	ldr	r0, [pc, #44]	; (8005ffc <pbuf_free+0x100>)
 8005fce:	f00a ff53 	bl	8010e78 <iprintf>
        }
      }
      count++;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	e001      	b.n	8005fe2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d19f      	bne.n	8005f28 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	080123d8 	.word	0x080123d8
 8005ff8:	080124e0 	.word	0x080124e0
 8005ffc:	0801243c 	.word	0x0801243c
 8006000:	0801250c 	.word	0x0801250c
 8006004:	08012524 	.word	0x08012524
 8006008:	08012548 	.word	0x08012548

0800600c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006014:	2300      	movs	r3, #0
 8006016:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006018:	e005      	b.n	8006026 <pbuf_clen+0x1a>
    ++len;
 800601a:	89fb      	ldrh	r3, [r7, #14]
 800601c:	3301      	adds	r3, #1
 800601e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f6      	bne.n	800601a <pbuf_clen+0xe>
  }
  return len;
 800602c:	89fb      	ldrh	r3, [r7, #14]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d010      	beq.n	800606c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7b9b      	ldrb	r3, [r3, #14]
 800604e:	3301      	adds	r3, #1
 8006050:	b2da      	uxtb	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	7b9b      	ldrb	r3, [r3, #14]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <pbuf_ref+0x30>
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <pbuf_ref+0x38>)
 8006060:	f240 3242 	movw	r2, #834	; 0x342
 8006064:	4904      	ldr	r1, [pc, #16]	; (8006078 <pbuf_ref+0x3c>)
 8006066:	4805      	ldr	r0, [pc, #20]	; (800607c <pbuf_ref+0x40>)
 8006068:	f00a ff06 	bl	8010e78 <iprintf>
  }
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	080123d8 	.word	0x080123d8
 8006078:	0801255c 	.word	0x0801255c
 800607c:	0801243c 	.word	0x0801243c

08006080 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <pbuf_cat+0x16>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d107      	bne.n	80060a6 <pbuf_cat+0x26>
 8006096:	4b20      	ldr	r3, [pc, #128]	; (8006118 <pbuf_cat+0x98>)
 8006098:	f240 3259 	movw	r2, #857	; 0x359
 800609c:	491f      	ldr	r1, [pc, #124]	; (800611c <pbuf_cat+0x9c>)
 800609e:	4820      	ldr	r0, [pc, #128]	; (8006120 <pbuf_cat+0xa0>)
 80060a0:	f00a feea 	bl	8010e78 <iprintf>
 80060a4:	e034      	b.n	8006110 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	e00a      	b.n	80060c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	891a      	ldrh	r2, [r3, #8]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	891b      	ldrh	r3, [r3, #8]
 80060b4:	4413      	add	r3, r2
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	891a      	ldrh	r2, [r3, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	895b      	ldrh	r3, [r3, #10]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d006      	beq.n	80060e4 <pbuf_cat+0x64>
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <pbuf_cat+0x98>)
 80060d8:	f240 3262 	movw	r2, #866	; 0x362
 80060dc:	4911      	ldr	r1, [pc, #68]	; (8006124 <pbuf_cat+0xa4>)
 80060de:	4810      	ldr	r0, [pc, #64]	; (8006120 <pbuf_cat+0xa0>)
 80060e0:	f00a feca 	bl	8010e78 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d006      	beq.n	80060fa <pbuf_cat+0x7a>
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <pbuf_cat+0x98>)
 80060ee:	f240 3263 	movw	r2, #867	; 0x363
 80060f2:	490d      	ldr	r1, [pc, #52]	; (8006128 <pbuf_cat+0xa8>)
 80060f4:	480a      	ldr	r0, [pc, #40]	; (8006120 <pbuf_cat+0xa0>)
 80060f6:	f00a febf 	bl	8010e78 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	891a      	ldrh	r2, [r3, #8]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	891b      	ldrh	r3, [r3, #8]
 8006102:	4413      	add	r3, r2
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	080123d8 	.word	0x080123d8
 800611c:	08012570 	.word	0x08012570
 8006120:	0801243c 	.word	0x0801243c
 8006124:	080125a8 	.word	0x080125a8
 8006128:	080125d8 	.word	0x080125d8

0800612c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ffa1 	bl	8006080 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800613e:	6838      	ldr	r0, [r7, #0]
 8006140:	f7ff ff7c 	bl	800603c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006156:	2300      	movs	r3, #0
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <pbuf_copy+0x2a>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <pbuf_copy+0x2a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	891a      	ldrh	r2, [r3, #8]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	891b      	ldrh	r3, [r3, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	d209      	bcs.n	800618a <pbuf_copy+0x3e>
 8006176:	4b57      	ldr	r3, [pc, #348]	; (80062d4 <pbuf_copy+0x188>)
 8006178:	f240 32c9 	movw	r2, #969	; 0x3c9
 800617c:	4956      	ldr	r1, [pc, #344]	; (80062d8 <pbuf_copy+0x18c>)
 800617e:	4857      	ldr	r0, [pc, #348]	; (80062dc <pbuf_copy+0x190>)
 8006180:	f00a fe7a 	bl	8010e78 <iprintf>
 8006184:	f06f 030f 	mvn.w	r3, #15
 8006188:	e09f      	b.n	80062ca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	895b      	ldrh	r3, [r3, #10]
 800618e:	461a      	mov	r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	1ad2      	subs	r2, r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	895b      	ldrh	r3, [r3, #10]
 8006198:	4619      	mov	r1, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1acb      	subs	r3, r1, r3
 800619e:	429a      	cmp	r2, r3
 80061a0:	d306      	bcc.n	80061b0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	895b      	ldrh	r3, [r3, #10]
 80061a6:	461a      	mov	r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e005      	b.n	80061bc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	895b      	ldrh	r3, [r3, #10]
 80061b4:	461a      	mov	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	18d0      	adds	r0, r2, r3
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4619      	mov	r1, r3
 80061d0:	f00a fe3c 	bl	8010e4c <memcpy>
    offset_to += len;
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	895b      	ldrh	r3, [r3, #10]
 80061e8:	461a      	mov	r2, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d906      	bls.n	80061fe <pbuf_copy+0xb2>
 80061f0:	4b38      	ldr	r3, [pc, #224]	; (80062d4 <pbuf_copy+0x188>)
 80061f2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80061f6:	493a      	ldr	r1, [pc, #232]	; (80062e0 <pbuf_copy+0x194>)
 80061f8:	4838      	ldr	r0, [pc, #224]	; (80062dc <pbuf_copy+0x190>)
 80061fa:	f00a fe3d 	bl	8010e78 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	895b      	ldrh	r3, [r3, #10]
 8006202:	461a      	mov	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	4293      	cmp	r3, r2
 8006208:	d906      	bls.n	8006218 <pbuf_copy+0xcc>
 800620a:	4b32      	ldr	r3, [pc, #200]	; (80062d4 <pbuf_copy+0x188>)
 800620c:	f240 32da 	movw	r2, #986	; 0x3da
 8006210:	4934      	ldr	r1, [pc, #208]	; (80062e4 <pbuf_copy+0x198>)
 8006212:	4832      	ldr	r0, [pc, #200]	; (80062dc <pbuf_copy+0x190>)
 8006214:	f00a fe30 	bl	8010e78 <iprintf>
    if (offset_from >= p_from->len) {
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	895b      	ldrh	r3, [r3, #10]
 800621c:	461a      	mov	r2, r3
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4293      	cmp	r3, r2
 8006222:	d304      	bcc.n	800622e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	895b      	ldrh	r3, [r3, #10]
 8006232:	461a      	mov	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4293      	cmp	r3, r2
 8006238:	d114      	bne.n	8006264 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10c      	bne.n	8006264 <pbuf_copy+0x118>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d009      	beq.n	8006264 <pbuf_copy+0x118>
 8006250:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <pbuf_copy+0x188>)
 8006252:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006256:	4924      	ldr	r1, [pc, #144]	; (80062e8 <pbuf_copy+0x19c>)
 8006258:	4820      	ldr	r0, [pc, #128]	; (80062dc <pbuf_copy+0x190>)
 800625a:	f00a fe0d 	bl	8010e78 <iprintf>
 800625e:	f06f 030f 	mvn.w	r3, #15
 8006262:	e032      	b.n	80062ca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d013      	beq.n	8006292 <pbuf_copy+0x146>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	895a      	ldrh	r2, [r3, #10]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	891b      	ldrh	r3, [r3, #8]
 8006272:	429a      	cmp	r2, r3
 8006274:	d10d      	bne.n	8006292 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <pbuf_copy+0x146>
 800627e:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <pbuf_copy+0x188>)
 8006280:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006284:	4919      	ldr	r1, [pc, #100]	; (80062ec <pbuf_copy+0x1a0>)
 8006286:	4815      	ldr	r0, [pc, #84]	; (80062dc <pbuf_copy+0x190>)
 8006288:	f00a fdf6 	bl	8010e78 <iprintf>
 800628c:	f06f 0305 	mvn.w	r3, #5
 8006290:	e01b      	b.n	80062ca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d013      	beq.n	80062c0 <pbuf_copy+0x174>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	895a      	ldrh	r2, [r3, #10]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	891b      	ldrh	r3, [r3, #8]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d10d      	bne.n	80062c0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d009      	beq.n	80062c0 <pbuf_copy+0x174>
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <pbuf_copy+0x188>)
 80062ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80062b2:	490e      	ldr	r1, [pc, #56]	; (80062ec <pbuf_copy+0x1a0>)
 80062b4:	4809      	ldr	r0, [pc, #36]	; (80062dc <pbuf_copy+0x190>)
 80062b6:	f00a fddf 	bl	8010e78 <iprintf>
 80062ba:	f06f 0305 	mvn.w	r3, #5
 80062be:	e004      	b.n	80062ca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f47f af61 	bne.w	800618a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	080123d8 	.word	0x080123d8
 80062d8:	08012624 	.word	0x08012624
 80062dc:	0801243c 	.word	0x0801243c
 80062e0:	08012654 	.word	0x08012654
 80062e4:	0801266c 	.word	0x0801266c
 80062e8:	08012688 	.word	0x08012688
 80062ec:	08012698 	.word	0x08012698

080062f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	4611      	mov	r1, r2
 80062fc:	461a      	mov	r2, r3
 80062fe:	460b      	mov	r3, r1
 8006300:	80fb      	strh	r3, [r7, #6]
 8006302:	4613      	mov	r3, r2
 8006304:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d108      	bne.n	8006326 <pbuf_copy_partial+0x36>
 8006314:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <pbuf_copy_partial+0xd4>)
 8006316:	f240 420a 	movw	r2, #1034	; 0x40a
 800631a:	492b      	ldr	r1, [pc, #172]	; (80063c8 <pbuf_copy_partial+0xd8>)
 800631c:	482b      	ldr	r0, [pc, #172]	; (80063cc <pbuf_copy_partial+0xdc>)
 800631e:	f00a fdab 	bl	8010e78 <iprintf>
 8006322:	2300      	movs	r3, #0
 8006324:	e04a      	b.n	80063bc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d108      	bne.n	800633e <pbuf_copy_partial+0x4e>
 800632c:	4b25      	ldr	r3, [pc, #148]	; (80063c4 <pbuf_copy_partial+0xd4>)
 800632e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006332:	4927      	ldr	r1, [pc, #156]	; (80063d0 <pbuf_copy_partial+0xe0>)
 8006334:	4825      	ldr	r0, [pc, #148]	; (80063cc <pbuf_copy_partial+0xdc>)
 8006336:	f00a fd9f 	bl	8010e78 <iprintf>
 800633a:	2300      	movs	r3, #0
 800633c:	e03e      	b.n	80063bc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	e034      	b.n	80063ae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006344:	88bb      	ldrh	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <pbuf_copy_partial+0x70>
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	895b      	ldrh	r3, [r3, #10]
 800634e:	88ba      	ldrh	r2, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d305      	bcc.n	8006360 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	895b      	ldrh	r3, [r3, #10]
 8006358:	88ba      	ldrh	r2, [r7, #4]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	80bb      	strh	r3, [r7, #4]
 800635e:	e023      	b.n	80063a8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	895a      	ldrh	r2, [r3, #10]
 8006364:	88bb      	ldrh	r3, [r7, #4]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800636a:	8b3a      	ldrh	r2, [r7, #24]
 800636c:	88fb      	ldrh	r3, [r7, #6]
 800636e:	429a      	cmp	r2, r3
 8006370:	d901      	bls.n	8006376 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006372:	88fb      	ldrh	r3, [r7, #6]
 8006374:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006376:	8b7b      	ldrh	r3, [r7, #26]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	18d0      	adds	r0, r2, r3
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	88bb      	ldrh	r3, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	8b3a      	ldrh	r2, [r7, #24]
 8006386:	4619      	mov	r1, r3
 8006388:	f00a fd60 	bl	8010e4c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800638c:	8afa      	ldrh	r2, [r7, #22]
 800638e:	8b3b      	ldrh	r3, [r7, #24]
 8006390:	4413      	add	r3, r2
 8006392:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006394:	8b7a      	ldrh	r2, [r7, #26]
 8006396:	8b3b      	ldrh	r3, [r7, #24]
 8006398:	4413      	add	r3, r2
 800639a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800639c:	88fa      	ldrh	r2, [r7, #6]
 800639e:	8b3b      	ldrh	r3, [r7, #24]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <pbuf_copy_partial+0xca>
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1c4      	bne.n	8006344 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80063ba:	8afb      	ldrh	r3, [r7, #22]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	080123d8 	.word	0x080123d8
 80063c8:	080126c4 	.word	0x080126c4
 80063cc:	0801243c 	.word	0x0801243c
 80063d0:	080126e4 	.word	0x080126e4

080063d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	603a      	str	r2, [r7, #0]
 80063de:	71fb      	strb	r3, [r7, #7]
 80063e0:	460b      	mov	r3, r1
 80063e2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	8919      	ldrh	r1, [r3, #8]
 80063e8:	88ba      	ldrh	r2, [r7, #4]
 80063ea:	79fb      	ldrb	r3, [r7, #7]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fae5 	bl	80059bc <pbuf_alloc>
 80063f2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <pbuf_clone+0x2a>
    return NULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e011      	b.n	8006422 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f7ff fea3 	bl	800614c <pbuf_copy>
 8006406:	4603      	mov	r3, r0
 8006408:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800640a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d006      	beq.n	8006420 <pbuf_clone+0x4c>
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <pbuf_clone+0x58>)
 8006414:	f240 5224 	movw	r2, #1316	; 0x524
 8006418:	4905      	ldr	r1, [pc, #20]	; (8006430 <pbuf_clone+0x5c>)
 800641a:	4806      	ldr	r0, [pc, #24]	; (8006434 <pbuf_clone+0x60>)
 800641c:	f00a fd2c 	bl	8010e78 <iprintf>
  return q;
 8006420:	68fb      	ldr	r3, [r7, #12]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	080123d8 	.word	0x080123d8
 8006430:	080127f0 	.word	0x080127f0
 8006434:	0801243c 	.word	0x0801243c

08006438 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 800643c:	bf00      	nop
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800644c:	f00a fd2c 	bl	8010ea8 <rand>
 8006450:	4603      	mov	r3, r0
 8006452:	b29b      	uxth	r3, r3
 8006454:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006458:	b29b      	uxth	r3, r3
 800645a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800645e:	b29a      	uxth	r2, r3
 8006460:	4b01      	ldr	r3, [pc, #4]	; (8006468 <tcp_init+0x20>)
 8006462:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006464:	bf00      	nop
 8006466:	bd80      	pop	{r7, pc}
 8006468:	2000000a 	.word	0x2000000a

0800646c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	7d1b      	ldrb	r3, [r3, #20]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d105      	bne.n	8006488 <tcp_free+0x1c>
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <tcp_free+0x2c>)
 800647e:	22d4      	movs	r2, #212	; 0xd4
 8006480:	4906      	ldr	r1, [pc, #24]	; (800649c <tcp_free+0x30>)
 8006482:	4807      	ldr	r0, [pc, #28]	; (80064a0 <tcp_free+0x34>)
 8006484:	f00a fcf8 	bl	8010e78 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	2001      	movs	r0, #1
 800648c:	f7fe ff60 	bl	8005350 <memp_free>
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	0801287c 	.word	0x0801287c
 800649c:	080128ac 	.word	0x080128ac
 80064a0:	080128c0 	.word	0x080128c0

080064a4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	7d1b      	ldrb	r3, [r3, #20]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d105      	bne.n	80064c0 <tcp_free_listen+0x1c>
 80064b4:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <tcp_free_listen+0x2c>)
 80064b6:	22df      	movs	r2, #223	; 0xdf
 80064b8:	4906      	ldr	r1, [pc, #24]	; (80064d4 <tcp_free_listen+0x30>)
 80064ba:	4807      	ldr	r0, [pc, #28]	; (80064d8 <tcp_free_listen+0x34>)
 80064bc:	f00a fcdc 	bl	8010e78 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	2002      	movs	r0, #2
 80064c4:	f7fe ff44 	bl	8005350 <memp_free>
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	0801287c 	.word	0x0801287c
 80064d4:	080128e8 	.word	0x080128e8
 80064d8:	080128c0 	.word	0x080128c0

080064dc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80064e0:	f000 fea2 	bl	8007228 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80064e4:	4b07      	ldr	r3, [pc, #28]	; (8006504 <tcp_tmr+0x28>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <tcp_tmr+0x28>)
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	4b04      	ldr	r3, [pc, #16]	; (8006504 <tcp_tmr+0x28>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80064fc:	f000 fb54 	bl	8006ba8 <tcp_slowtmr>
  }
}
 8006500:	bf00      	nop
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000139 	.word	0x20000139

08006508 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d105      	bne.n	8006524 <tcp_remove_listener+0x1c>
 8006518:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <tcp_remove_listener+0x48>)
 800651a:	22ff      	movs	r2, #255	; 0xff
 800651c:	490d      	ldr	r1, [pc, #52]	; (8006554 <tcp_remove_listener+0x4c>)
 800651e:	480e      	ldr	r0, [pc, #56]	; (8006558 <tcp_remove_listener+0x50>)
 8006520:	f00a fcaa 	bl	8010e78 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e00a      	b.n	8006540 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d102      	bne.n	800653a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f1      	bne.n	800652a <tcp_remove_listener+0x22>
    }
  }
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	0801287c 	.word	0x0801287c
 8006554:	08012904 	.word	0x08012904
 8006558:	080128c0 	.word	0x080128c0

0800655c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <tcp_listen_closed+0x1c>
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <tcp_listen_closed+0x60>)
 800656c:	f240 1211 	movw	r2, #273	; 0x111
 8006570:	4913      	ldr	r1, [pc, #76]	; (80065c0 <tcp_listen_closed+0x64>)
 8006572:	4814      	ldr	r0, [pc, #80]	; (80065c4 <tcp_listen_closed+0x68>)
 8006574:	f00a fc80 	bl	8010e78 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7d1b      	ldrb	r3, [r3, #20]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d006      	beq.n	800658e <tcp_listen_closed+0x32>
 8006580:	4b0e      	ldr	r3, [pc, #56]	; (80065bc <tcp_listen_closed+0x60>)
 8006582:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006586:	4910      	ldr	r1, [pc, #64]	; (80065c8 <tcp_listen_closed+0x6c>)
 8006588:	480e      	ldr	r0, [pc, #56]	; (80065c4 <tcp_listen_closed+0x68>)
 800658a:	f00a fc75 	bl	8010e78 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800658e:	2301      	movs	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	e00b      	b.n	80065ac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006594:	4a0d      	ldr	r2, [pc, #52]	; (80065cc <tcp_listen_closed+0x70>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff ffb1 	bl	8006508 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3301      	adds	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b03      	cmp	r3, #3
 80065b0:	d9f0      	bls.n	8006594 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80065b2:	bf00      	nop
 80065b4:	bf00      	nop
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	0801287c 	.word	0x0801287c
 80065c0:	0801292c 	.word	0x0801292c
 80065c4:	080128c0 	.word	0x080128c0
 80065c8:	08012938 	.word	0x08012938
 80065cc:	08014bfc 	.word	0x08014bfc

080065d0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80065d0:	b5b0      	push	{r4, r5, r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af04      	add	r7, sp, #16
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <tcp_close_shutdown+0x20>
 80065e2:	4b63      	ldr	r3, [pc, #396]	; (8006770 <tcp_close_shutdown+0x1a0>)
 80065e4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80065e8:	4962      	ldr	r1, [pc, #392]	; (8006774 <tcp_close_shutdown+0x1a4>)
 80065ea:	4863      	ldr	r0, [pc, #396]	; (8006778 <tcp_close_shutdown+0x1a8>)
 80065ec:	f00a fc44 	bl	8010e78 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d066      	beq.n	80066c4 <tcp_close_shutdown+0xf4>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	7d1b      	ldrb	r3, [r3, #20]
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d003      	beq.n	8006606 <tcp_close_shutdown+0x36>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	7d1b      	ldrb	r3, [r3, #20]
 8006602:	2b07      	cmp	r3, #7
 8006604:	d15e      	bne.n	80066c4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <tcp_close_shutdown+0x48>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006612:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006616:	d055      	beq.n	80066c4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8b5b      	ldrh	r3, [r3, #26]
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <tcp_close_shutdown+0x62>
 8006624:	4b52      	ldr	r3, [pc, #328]	; (8006770 <tcp_close_shutdown+0x1a0>)
 8006626:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800662a:	4954      	ldr	r1, [pc, #336]	; (800677c <tcp_close_shutdown+0x1ac>)
 800662c:	4852      	ldr	r0, [pc, #328]	; (8006778 <tcp_close_shutdown+0x1a8>)
 800662e:	f00a fc23 	bl	8010e78 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800663a:	687d      	ldr	r5, [r7, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	8ad2      	ldrh	r2, [r2, #22]
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	8b09      	ldrh	r1, [r1, #24]
 8006648:	9102      	str	r1, [sp, #8]
 800664a:	9201      	str	r2, [sp, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	462b      	mov	r3, r5
 8006650:	4622      	mov	r2, r4
 8006652:	4601      	mov	r1, r0
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f004 ff8f 	bl	800b578 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 f8f0 	bl	8007840 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006660:	4b47      	ldr	r3, [pc, #284]	; (8006780 <tcp_close_shutdown+0x1b0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d105      	bne.n	8006676 <tcp_close_shutdown+0xa6>
 800666a:	4b45      	ldr	r3, [pc, #276]	; (8006780 <tcp_close_shutdown+0x1b0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a43      	ldr	r2, [pc, #268]	; (8006780 <tcp_close_shutdown+0x1b0>)
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	e013      	b.n	800669e <tcp_close_shutdown+0xce>
 8006676:	4b42      	ldr	r3, [pc, #264]	; (8006780 <tcp_close_shutdown+0x1b0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e00c      	b.n	8006698 <tcp_close_shutdown+0xc8>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d104      	bne.n	8006692 <tcp_close_shutdown+0xc2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	60da      	str	r2, [r3, #12]
 8006690:	e005      	b.n	800669e <tcp_close_shutdown+0xce>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1ef      	bne.n	800667e <tcp_close_shutdown+0xae>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	4b37      	ldr	r3, [pc, #220]	; (8006784 <tcp_close_shutdown+0x1b4>)
 80066a6:	2201      	movs	r2, #1
 80066a8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80066aa:	4b37      	ldr	r3, [pc, #220]	; (8006788 <tcp_close_shutdown+0x1b8>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d102      	bne.n	80066ba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80066b4:	f003 fe10 	bl	800a2d8 <tcp_trigger_input_pcb_close>
 80066b8:	e002      	b.n	80066c0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fed6 	bl	800646c <tcp_free>
      }
      return ERR_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e050      	b.n	8006766 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	7d1b      	ldrb	r3, [r3, #20]
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d03b      	beq.n	8006744 <tcp_close_shutdown+0x174>
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	dc44      	bgt.n	800675a <tcp_close_shutdown+0x18a>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <tcp_close_shutdown+0x10a>
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d02a      	beq.n	800672e <tcp_close_shutdown+0x15e>
 80066d8:	e03f      	b.n	800675a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	8adb      	ldrh	r3, [r3, #22]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d021      	beq.n	8006726 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80066e2:	4b2a      	ldr	r3, [pc, #168]	; (800678c <tcp_close_shutdown+0x1bc>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d105      	bne.n	80066f8 <tcp_close_shutdown+0x128>
 80066ec:	4b27      	ldr	r3, [pc, #156]	; (800678c <tcp_close_shutdown+0x1bc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	4a26      	ldr	r2, [pc, #152]	; (800678c <tcp_close_shutdown+0x1bc>)
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	e013      	b.n	8006720 <tcp_close_shutdown+0x150>
 80066f8:	4b24      	ldr	r3, [pc, #144]	; (800678c <tcp_close_shutdown+0x1bc>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60bb      	str	r3, [r7, #8]
 80066fe:	e00c      	b.n	800671a <tcp_close_shutdown+0x14a>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d104      	bne.n	8006714 <tcp_close_shutdown+0x144>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	60da      	str	r2, [r3, #12]
 8006712:	e005      	b.n	8006720 <tcp_close_shutdown+0x150>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1ef      	bne.n	8006700 <tcp_close_shutdown+0x130>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff fea0 	bl	800646c <tcp_free>
      break;
 800672c:	e01a      	b.n	8006764 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff ff14 	bl	800655c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4816      	ldr	r0, [pc, #88]	; (8006790 <tcp_close_shutdown+0x1c0>)
 8006738:	f001 f8d2 	bl	80078e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff feb1 	bl	80064a4 <tcp_free_listen>
      break;
 8006742:	e00f      	b.n	8006764 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	480e      	ldr	r0, [pc, #56]	; (8006780 <tcp_close_shutdown+0x1b0>)
 8006748:	f001 f8ca 	bl	80078e0 <tcp_pcb_remove>
 800674c:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <tcp_close_shutdown+0x1b4>)
 800674e:	2201      	movs	r2, #1
 8006750:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fe8a 	bl	800646c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006758:	e004      	b.n	8006764 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f81a 	bl	8006794 <tcp_close_shutdown_fin>
 8006760:	4603      	mov	r3, r0
 8006762:	e000      	b.n	8006766 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bdb0      	pop	{r4, r5, r7, pc}
 800676e:	bf00      	nop
 8006770:	0801287c 	.word	0x0801287c
 8006774:	08012950 	.word	0x08012950
 8006778:	080128c0 	.word	0x080128c0
 800677c:	08012970 	.word	0x08012970
 8006780:	200076cc 	.word	0x200076cc
 8006784:	200076c8 	.word	0x200076c8
 8006788:	200076e0 	.word	0x200076e0
 800678c:	200076d8 	.word	0x200076d8
 8006790:	200076d4 	.word	0x200076d4

08006794 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <tcp_close_shutdown_fin+0x1c>
 80067a2:	4b2e      	ldr	r3, [pc, #184]	; (800685c <tcp_close_shutdown_fin+0xc8>)
 80067a4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80067a8:	492d      	ldr	r1, [pc, #180]	; (8006860 <tcp_close_shutdown_fin+0xcc>)
 80067aa:	482e      	ldr	r0, [pc, #184]	; (8006864 <tcp_close_shutdown_fin+0xd0>)
 80067ac:	f00a fb64 	bl	8010e78 <iprintf>

  switch (pcb->state) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	7d1b      	ldrb	r3, [r3, #20]
 80067b4:	2b07      	cmp	r3, #7
 80067b6:	d020      	beq.n	80067fa <tcp_close_shutdown_fin+0x66>
 80067b8:	2b07      	cmp	r3, #7
 80067ba:	dc2b      	bgt.n	8006814 <tcp_close_shutdown_fin+0x80>
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d002      	beq.n	80067c6 <tcp_close_shutdown_fin+0x32>
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d00d      	beq.n	80067e0 <tcp_close_shutdown_fin+0x4c>
 80067c4:	e026      	b.n	8006814 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f003 ffac 	bl	800a724 <tcp_send_fin>
 80067cc:	4603      	mov	r3, r0
 80067ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80067d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d11f      	bne.n	8006818 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2205      	movs	r2, #5
 80067dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80067de:	e01b      	b.n	8006818 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f003 ff9f 	bl	800a724 <tcp_send_fin>
 80067e6:	4603      	mov	r3, r0
 80067e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80067ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d114      	bne.n	800681c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2205      	movs	r2, #5
 80067f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80067f8:	e010      	b.n	800681c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f003 ff92 	bl	800a724 <tcp_send_fin>
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d109      	bne.n	8006820 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2209      	movs	r2, #9
 8006810:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006812:	e005      	b.n	8006820 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	e01c      	b.n	8006852 <tcp_close_shutdown_fin+0xbe>
      break;
 8006818:	bf00      	nop
 800681a:	e002      	b.n	8006822 <tcp_close_shutdown_fin+0x8e>
      break;
 800681c:	bf00      	nop
 800681e:	e000      	b.n	8006822 <tcp_close_shutdown_fin+0x8e>
      break;
 8006820:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d103      	bne.n	8006832 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f004 f8ba 	bl	800a9a4 <tcp_output>
 8006830:	e00d      	b.n	800684e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d108      	bne.n	800684e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8b5b      	ldrh	r3, [r3, #26]
 8006840:	f043 0308 	orr.w	r3, r3, #8
 8006844:	b29a      	uxth	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e001      	b.n	8006852 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800684e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	0801287c 	.word	0x0801287c
 8006860:	0801292c 	.word	0x0801292c
 8006864:	080128c0 	.word	0x080128c0

08006868 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <tcp_close+0x22>
 8006876:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <tcp_close+0x4c>)
 8006878:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800687c:	490e      	ldr	r1, [pc, #56]	; (80068b8 <tcp_close+0x50>)
 800687e:	480f      	ldr	r0, [pc, #60]	; (80068bc <tcp_close+0x54>)
 8006880:	f00a fafa 	bl	8010e78 <iprintf>
 8006884:	f06f 030f 	mvn.w	r3, #15
 8006888:	e00f      	b.n	80068aa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7d1b      	ldrb	r3, [r3, #20]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d006      	beq.n	80068a0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	8b5b      	ldrh	r3, [r3, #26]
 8006896:	f043 0310 	orr.w	r3, r3, #16
 800689a:	b29a      	uxth	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80068a0:	2101      	movs	r1, #1
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fe94 	bl	80065d0 <tcp_close_shutdown>
 80068a8:	4603      	mov	r3, r0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	0801287c 	.word	0x0801287c
 80068b8:	0801298c 	.word	0x0801298c
 80068bc:	080128c0 	.word	0x080128c0

080068c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	; 0x38
 80068c4:	af04      	add	r7, sp, #16
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d107      	bne.n	80068e0 <tcp_abandon+0x20>
 80068d0:	4b52      	ldr	r3, [pc, #328]	; (8006a1c <tcp_abandon+0x15c>)
 80068d2:	f240 223d 	movw	r2, #573	; 0x23d
 80068d6:	4952      	ldr	r1, [pc, #328]	; (8006a20 <tcp_abandon+0x160>)
 80068d8:	4852      	ldr	r0, [pc, #328]	; (8006a24 <tcp_abandon+0x164>)
 80068da:	f00a facd 	bl	8010e78 <iprintf>
 80068de:	e099      	b.n	8006a14 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	7d1b      	ldrb	r3, [r3, #20]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d106      	bne.n	80068f6 <tcp_abandon+0x36>
 80068e8:	4b4c      	ldr	r3, [pc, #304]	; (8006a1c <tcp_abandon+0x15c>)
 80068ea:	f44f 7210 	mov.w	r2, #576	; 0x240
 80068ee:	494e      	ldr	r1, [pc, #312]	; (8006a28 <tcp_abandon+0x168>)
 80068f0:	484c      	ldr	r0, [pc, #304]	; (8006a24 <tcp_abandon+0x164>)
 80068f2:	f00a fac1 	bl	8010e78 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	7d1b      	ldrb	r3, [r3, #20]
 80068fa:	2b0a      	cmp	r3, #10
 80068fc:	d107      	bne.n	800690e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	484a      	ldr	r0, [pc, #296]	; (8006a2c <tcp_abandon+0x16c>)
 8006902:	f000 ffed 	bl	80078e0 <tcp_pcb_remove>
    tcp_free(pcb);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff fdb0 	bl	800646c <tcp_free>
 800690c:	e082      	b.n	8006a14 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	7d1b      	ldrb	r3, [r3, #20]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d126      	bne.n	8006986 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	8adb      	ldrh	r3, [r3, #22]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d02e      	beq.n	800699e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006940:	4b3b      	ldr	r3, [pc, #236]	; (8006a30 <tcp_abandon+0x170>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d105      	bne.n	8006956 <tcp_abandon+0x96>
 800694a:	4b39      	ldr	r3, [pc, #228]	; (8006a30 <tcp_abandon+0x170>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	4a37      	ldr	r2, [pc, #220]	; (8006a30 <tcp_abandon+0x170>)
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	e013      	b.n	800697e <tcp_abandon+0xbe>
 8006956:	4b36      	ldr	r3, [pc, #216]	; (8006a30 <tcp_abandon+0x170>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e00c      	b.n	8006978 <tcp_abandon+0xb8>
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d104      	bne.n	8006972 <tcp_abandon+0xb2>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	60da      	str	r2, [r3, #12]
 8006970:	e005      	b.n	800697e <tcp_abandon+0xbe>
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1ef      	bne.n	800695e <tcp_abandon+0x9e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	60da      	str	r2, [r3, #12]
 8006984:	e00b      	b.n	800699e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8adb      	ldrh	r3, [r3, #22]
 800698e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4828      	ldr	r0, [pc, #160]	; (8006a34 <tcp_abandon+0x174>)
 8006994:	f000 ffa4 	bl	80078e0 <tcp_pcb_remove>
 8006998:	4b27      	ldr	r3, [pc, #156]	; (8006a38 <tcp_abandon+0x178>)
 800699a:	2201      	movs	r2, #1
 800699c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fd1c 	bl	80073e8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fd13 	bl	80073e8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fd0a 	bl	80073e8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00e      	beq.n	80069f8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3304      	adds	r3, #4
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	8b12      	ldrh	r2, [r2, #24]
 80069e4:	9202      	str	r2, [sp, #8]
 80069e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069e8:	9201      	str	r2, [sp, #4]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	460b      	mov	r3, r1
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	69b9      	ldr	r1, [r7, #24]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f004 fdc0 	bl	800b578 <tcp_rst>
    }
    last_state = pcb->state;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	7d1b      	ldrb	r3, [r3, #20]
 80069fc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fd34 	bl	800646c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <tcp_abandon+0x154>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f06f 010c 	mvn.w	r1, #12
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	4798      	blx	r3
  }
}
 8006a14:	3728      	adds	r7, #40	; 0x28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	0801287c 	.word	0x0801287c
 8006a20:	080129c0 	.word	0x080129c0
 8006a24:	080128c0 	.word	0x080128c0
 8006a28:	080129dc 	.word	0x080129dc
 8006a2c:	200076dc 	.word	0x200076dc
 8006a30:	200076d8 	.word	0x200076d8
 8006a34:	200076cc 	.word	0x200076cc
 8006a38:	200076c8 	.word	0x200076c8

08006a3c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006a44:	2101      	movs	r1, #1
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff ff3a 	bl	80068c0 <tcp_abandon>
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <tcp_update_rcv_ann_wnd+0x1c>
 8006a62:	4b25      	ldr	r3, [pc, #148]	; (8006af8 <tcp_update_rcv_ann_wnd+0xa4>)
 8006a64:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006a68:	4924      	ldr	r1, [pc, #144]	; (8006afc <tcp_update_rcv_ann_wnd+0xa8>)
 8006a6a:	4825      	ldr	r0, [pc, #148]	; (8006b00 <tcp_update_rcv_ann_wnd+0xac>)
 8006a6c:	f00a fa04 	bl	8010e78 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006a78:	4413      	add	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006a84:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006a88:	bf28      	it	cs
 8006a8a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006a8e:	b292      	uxth	r2, r2
 8006a90:	4413      	add	r3, r2
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	db08      	blt.n	8006aac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	e020      	b.n	8006aee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	dd03      	ble.n	8006ac2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ac0:	e014      	b.n	8006aec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad4:	d306      	bcc.n	8006ae4 <tcp_update_rcv_ann_wnd+0x90>
 8006ad6:	4b08      	ldr	r3, [pc, #32]	; (8006af8 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ad8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006adc:	4909      	ldr	r1, [pc, #36]	; (8006b04 <tcp_update_rcv_ann_wnd+0xb0>)
 8006ade:	4808      	ldr	r0, [pc, #32]	; (8006b00 <tcp_update_rcv_ann_wnd+0xac>)
 8006ae0:	f00a f9ca 	bl	8010e78 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006aec:	2300      	movs	r3, #0
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	0801287c 	.word	0x0801287c
 8006afc:	08012ad8 	.word	0x08012ad8
 8006b00:	080128c0 	.word	0x080128c0
 8006b04:	08012afc 	.word	0x08012afc

08006b08 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <tcp_recved+0x22>
 8006b1a:	4b1f      	ldr	r3, [pc, #124]	; (8006b98 <tcp_recved+0x90>)
 8006b1c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006b20:	491e      	ldr	r1, [pc, #120]	; (8006b9c <tcp_recved+0x94>)
 8006b22:	481f      	ldr	r0, [pc, #124]	; (8006ba0 <tcp_recved+0x98>)
 8006b24:	f00a f9a8 	bl	8010e78 <iprintf>
 8006b28:	e032      	b.n	8006b90 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7d1b      	ldrb	r3, [r3, #20]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d106      	bne.n	8006b40 <tcp_recved+0x38>
 8006b32:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <tcp_recved+0x90>)
 8006b34:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006b38:	491a      	ldr	r1, [pc, #104]	; (8006ba4 <tcp_recved+0x9c>)
 8006b3a:	4819      	ldr	r0, [pc, #100]	; (8006ba0 <tcp_recved+0x98>)
 8006b3c:	f00a f99c 	bl	8010e78 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006b44:	887b      	ldrh	r3, [r7, #2]
 8006b46:	4413      	add	r3, r2
 8006b48:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006b4a:	89fb      	ldrh	r3, [r7, #14]
 8006b4c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006b50:	d804      	bhi.n	8006b5c <tcp_recved+0x54>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b56:	89fa      	ldrh	r2, [r7, #14]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d204      	bcs.n	8006b66 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006b62:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b64:	e002      	b.n	8006b6c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	89fa      	ldrh	r2, [r7, #14]
 8006b6a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff ff71 	bl	8006a54 <tcp_update_rcv_ann_wnd>
 8006b72:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006b7a:	d309      	bcc.n	8006b90 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8b5b      	ldrh	r3, [r3, #26]
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f003 ff0a 	bl	800a9a4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	0801287c 	.word	0x0801287c
 8006b9c:	08012b18 	.word	0x08012b18
 8006ba0:	080128c0 	.word	0x080128c0
 8006ba4:	08012b30 	.word	0x08012b30

08006ba8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006ba8:	b5b0      	push	{r4, r5, r7, lr}
 8006baa:	b090      	sub	sp, #64	; 0x40
 8006bac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006bb4:	4b94      	ldr	r3, [pc, #592]	; (8006e08 <tcp_slowtmr+0x260>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	4a93      	ldr	r2, [pc, #588]	; (8006e08 <tcp_slowtmr+0x260>)
 8006bbc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006bbe:	4b93      	ldr	r3, [pc, #588]	; (8006e0c <tcp_slowtmr+0x264>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	4b91      	ldr	r3, [pc, #580]	; (8006e0c <tcp_slowtmr+0x264>)
 8006bc8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006bce:	4b90      	ldr	r3, [pc, #576]	; (8006e10 <tcp_slowtmr+0x268>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006bd4:	e29d      	b.n	8007112 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	7d1b      	ldrb	r3, [r3, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <tcp_slowtmr+0x44>
 8006bde:	4b8d      	ldr	r3, [pc, #564]	; (8006e14 <tcp_slowtmr+0x26c>)
 8006be0:	f240 42be 	movw	r2, #1214	; 0x4be
 8006be4:	498c      	ldr	r1, [pc, #560]	; (8006e18 <tcp_slowtmr+0x270>)
 8006be6:	488d      	ldr	r0, [pc, #564]	; (8006e1c <tcp_slowtmr+0x274>)
 8006be8:	f00a f946 	bl	8010e78 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	7d1b      	ldrb	r3, [r3, #20]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d106      	bne.n	8006c02 <tcp_slowtmr+0x5a>
 8006bf4:	4b87      	ldr	r3, [pc, #540]	; (8006e14 <tcp_slowtmr+0x26c>)
 8006bf6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006bfa:	4989      	ldr	r1, [pc, #548]	; (8006e20 <tcp_slowtmr+0x278>)
 8006bfc:	4887      	ldr	r0, [pc, #540]	; (8006e1c <tcp_slowtmr+0x274>)
 8006bfe:	f00a f93b 	bl	8010e78 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	7d1b      	ldrb	r3, [r3, #20]
 8006c06:	2b0a      	cmp	r3, #10
 8006c08:	d106      	bne.n	8006c18 <tcp_slowtmr+0x70>
 8006c0a:	4b82      	ldr	r3, [pc, #520]	; (8006e14 <tcp_slowtmr+0x26c>)
 8006c0c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006c10:	4984      	ldr	r1, [pc, #528]	; (8006e24 <tcp_slowtmr+0x27c>)
 8006c12:	4882      	ldr	r0, [pc, #520]	; (8006e1c <tcp_slowtmr+0x274>)
 8006c14:	f00a f930 	bl	8010e78 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	7f9a      	ldrb	r2, [r3, #30]
 8006c1c:	4b7b      	ldr	r3, [pc, #492]	; (8006e0c <tcp_slowtmr+0x264>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d105      	bne.n	8006c30 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006c2e:	e270      	b.n	8007112 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006c30:	4b76      	ldr	r3, [pc, #472]	; (8006e0c <tcp_slowtmr+0x264>)
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	7d1b      	ldrb	r3, [r3, #20]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d10a      	bne.n	8006c62 <tcp_slowtmr+0xba>
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d905      	bls.n	8006c62 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006c56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c60:	e11e      	b.n	8006ea0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c68:	2b0b      	cmp	r3, #11
 8006c6a:	d905      	bls.n	8006c78 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c70:	3301      	adds	r3, #1
 8006c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c76:	e113      	b.n	8006ea0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d075      	beq.n	8006d6e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d006      	beq.n	8006c98 <tcp_slowtmr+0xf0>
 8006c8a:	4b62      	ldr	r3, [pc, #392]	; (8006e14 <tcp_slowtmr+0x26c>)
 8006c8c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006c90:	4965      	ldr	r1, [pc, #404]	; (8006e28 <tcp_slowtmr+0x280>)
 8006c92:	4862      	ldr	r0, [pc, #392]	; (8006e1c <tcp_slowtmr+0x274>)
 8006c94:	f00a f8f0 	bl	8010e78 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d106      	bne.n	8006cae <tcp_slowtmr+0x106>
 8006ca0:	4b5c      	ldr	r3, [pc, #368]	; (8006e14 <tcp_slowtmr+0x26c>)
 8006ca2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006ca6:	4961      	ldr	r1, [pc, #388]	; (8006e2c <tcp_slowtmr+0x284>)
 8006ca8:	485c      	ldr	r0, [pc, #368]	; (8006e1c <tcp_slowtmr+0x274>)
 8006caa:	f00a f8e5 	bl	8010e78 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006cb4:	2b0b      	cmp	r3, #11
 8006cb6:	d905      	bls.n	8006cc4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006cc2:	e0ed      	b.n	8006ea0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	4a58      	ldr	r2, [pc, #352]	; (8006e30 <tcp_slowtmr+0x288>)
 8006cce:	5cd3      	ldrb	r3, [r2, r3]
 8006cd0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006cd8:	7c7a      	ldrb	r2, [r7, #17]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d907      	bls.n	8006cee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006cf4:	7c7a      	ldrb	r2, [r7, #17]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	f200 80d2 	bhi.w	8006ea0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d0c:	f004 fd28 	bl	800b760 <tcp_zero_window_probe>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d014      	beq.n	8006d40 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006d16:	2300      	movs	r3, #0
 8006d18:	623b      	str	r3, [r7, #32]
 8006d1a:	e011      	b.n	8006d40 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d22:	4619      	mov	r1, r3
 8006d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d26:	f003 fbab 	bl	800a480 <tcp_split_unsent_seg>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d107      	bne.n	8006d40 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006d30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d32:	f003 fe37 	bl	800a9a4 <tcp_output>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80ac 	beq.w	8006ea0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d56:	2b06      	cmp	r3, #6
 8006d58:	f200 80a2 	bhi.w	8006ea0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d62:	3301      	adds	r3, #1
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006d6c:	e098      	b.n	8006ea0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	db0f      	blt.n	8006d98 <tcp_slowtmr+0x1f0>
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006d7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d008      	beq.n	8006d98 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3301      	adds	r3, #1
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	b21a      	sxth	r2, r3
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006da4:	429a      	cmp	r2, r3
 8006da6:	db7b      	blt.n	8006ea0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006daa:	f004 f909 	bl	800afc0 <tcp_rexmit_rto_prepare>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <tcp_slowtmr+0x21c>
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d171      	bne.n	8006ea0 <tcp_slowtmr+0x2f8>
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d06d      	beq.n	8006ea0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	7d1b      	ldrb	r3, [r3, #20]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d03a      	beq.n	8006e42 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dd2:	2b0c      	cmp	r3, #12
 8006dd4:	bf28      	it	cs
 8006dd6:	230c      	movcs	r3, #12
 8006dd8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006de0:	10db      	asrs	r3, r3, #3
 8006de2:	b21b      	sxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006dec:	4413      	add	r3, r2
 8006dee:	7efa      	ldrb	r2, [r7, #27]
 8006df0:	4910      	ldr	r1, [pc, #64]	; (8006e34 <tcp_slowtmr+0x28c>)
 8006df2:	5c8a      	ldrb	r2, [r1, r2]
 8006df4:	4093      	lsls	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	dc1a      	bgt.n	8006e38 <tcp_slowtmr+0x290>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	b21a      	sxth	r2, r3
 8006e06:	e019      	b.n	8006e3c <tcp_slowtmr+0x294>
 8006e08:	200076d0 	.word	0x200076d0
 8006e0c:	2000013a 	.word	0x2000013a
 8006e10:	200076cc 	.word	0x200076cc
 8006e14:	0801287c 	.word	0x0801287c
 8006e18:	08012bc0 	.word	0x08012bc0
 8006e1c:	080128c0 	.word	0x080128c0
 8006e20:	08012bec 	.word	0x08012bec
 8006e24:	08012c18 	.word	0x08012c18
 8006e28:	08012c48 	.word	0x08012c48
 8006e2c:	08012c7c 	.word	0x08012c7c
 8006e30:	08014bf4 	.word	0x08014bf4
 8006e34:	08014be4 	.word	0x08014be4
 8006e38:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	2200      	movs	r2, #0
 8006e46:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006e54:	4293      	cmp	r3, r2
 8006e56:	bf28      	it	cs
 8006e58:	4613      	movcs	r3, r2
 8006e5a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006e5c:	8a7b      	ldrh	r3, [r7, #18]
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d206      	bcs.n	8006e88 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e9c:	f004 f900 	bl	800b0a0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	7d1b      	ldrb	r3, [r3, #20]
 8006ea4:	2b06      	cmp	r3, #6
 8006ea6:	d111      	bne.n	8006ecc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	8b5b      	ldrh	r3, [r3, #26]
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006eb4:	4b9c      	ldr	r3, [pc, #624]	; (8007128 <tcp_slowtmr+0x580>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b28      	cmp	r3, #40	; 0x28
 8006ec0:	d904      	bls.n	8006ecc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	7a5b      	ldrb	r3, [r3, #9]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d04a      	beq.n	8006f6e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d003      	beq.n	8006ee8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006ee4:	2b07      	cmp	r3, #7
 8006ee6:	d142      	bne.n	8006f6e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ee8:	4b8f      	ldr	r3, [pc, #572]	; (8007128 <tcp_slowtmr+0x580>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006ef8:	4b8c      	ldr	r3, [pc, #560]	; (800712c <tcp_slowtmr+0x584>)
 8006efa:	440b      	add	r3, r1
 8006efc:	498c      	ldr	r1, [pc, #560]	; (8007130 <tcp_slowtmr+0x588>)
 8006efe:	fba1 1303 	umull	r1, r3, r1, r3
 8006f02:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d90a      	bls.n	8006f1e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f16:	3301      	adds	r3, #1
 8006f18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006f1c:	e027      	b.n	8006f6e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f1e:	4b82      	ldr	r3, [pc, #520]	; (8007128 <tcp_slowtmr+0x580>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006f34:	4618      	mov	r0, r3
 8006f36:	4b7f      	ldr	r3, [pc, #508]	; (8007134 <tcp_slowtmr+0x58c>)
 8006f38:	fb03 f300 	mul.w	r3, r3, r0
 8006f3c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006f3e:	497c      	ldr	r1, [pc, #496]	; (8007130 <tcp_slowtmr+0x588>)
 8006f40:	fba1 1303 	umull	r1, r3, r1, r3
 8006f44:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d911      	bls.n	8006f6e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8006f4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f4c:	f004 fbc8 	bl	800b6e0 <tcp_keepalive>
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006f56:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d107      	bne.n	8006f6e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006f64:	3301      	adds	r3, #1
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d011      	beq.n	8006f9a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006f76:	4b6c      	ldr	r3, [pc, #432]	; (8007128 <tcp_slowtmr+0x580>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006f86:	4619      	mov	r1, r3
 8006f88:	460b      	mov	r3, r1
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	440b      	add	r3, r1
 8006f8e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d302      	bcc.n	8006f9a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f96:	f000 fe07 	bl	8007ba8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	7d1b      	ldrb	r3, [r3, #20]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d10b      	bne.n	8006fba <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fa2:	4b61      	ldr	r3, [pc, #388]	; (8007128 <tcp_slowtmr+0x580>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b28      	cmp	r3, #40	; 0x28
 8006fae:	d904      	bls.n	8006fba <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	7d1b      	ldrb	r3, [r3, #20]
 8006fbe:	2b09      	cmp	r3, #9
 8006fc0:	d10b      	bne.n	8006fda <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006fc2:	4b59      	ldr	r3, [pc, #356]	; (8007128 <tcp_slowtmr+0x580>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2bf0      	cmp	r3, #240	; 0xf0
 8006fce:	d904      	bls.n	8006fda <tcp_slowtmr+0x432>
        ++pcb_remove;
 8006fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d060      	beq.n	80070a4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fec:	f000 fc28 	bl	8007840 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d010      	beq.n	8007018 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006ff6:	4b50      	ldr	r3, [pc, #320]	; (8007138 <tcp_slowtmr+0x590>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d106      	bne.n	800700e <tcp_slowtmr+0x466>
 8007000:	4b4e      	ldr	r3, [pc, #312]	; (800713c <tcp_slowtmr+0x594>)
 8007002:	f240 526d 	movw	r2, #1389	; 0x56d
 8007006:	494e      	ldr	r1, [pc, #312]	; (8007140 <tcp_slowtmr+0x598>)
 8007008:	484e      	ldr	r0, [pc, #312]	; (8007144 <tcp_slowtmr+0x59c>)
 800700a:	f009 ff35 	bl	8010e78 <iprintf>
        prev->next = pcb->next;
 800700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	60da      	str	r2, [r3, #12]
 8007016:	e00f      	b.n	8007038 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007018:	4b47      	ldr	r3, [pc, #284]	; (8007138 <tcp_slowtmr+0x590>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800701e:	429a      	cmp	r2, r3
 8007020:	d006      	beq.n	8007030 <tcp_slowtmr+0x488>
 8007022:	4b46      	ldr	r3, [pc, #280]	; (800713c <tcp_slowtmr+0x594>)
 8007024:	f240 5271 	movw	r2, #1393	; 0x571
 8007028:	4947      	ldr	r1, [pc, #284]	; (8007148 <tcp_slowtmr+0x5a0>)
 800702a:	4846      	ldr	r0, [pc, #280]	; (8007144 <tcp_slowtmr+0x59c>)
 800702c:	f009 ff24 	bl	8010e78 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4a40      	ldr	r2, [pc, #256]	; (8007138 <tcp_slowtmr+0x590>)
 8007036:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800703c:	2b00      	cmp	r3, #0
 800703e:	d013      	beq.n	8007068 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007048:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800704a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704c:	3304      	adds	r3, #4
 800704e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007050:	8ad2      	ldrh	r2, [r2, #22]
 8007052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007054:	8b09      	ldrh	r1, [r1, #24]
 8007056:	9102      	str	r1, [sp, #8]
 8007058:	9201      	str	r2, [sp, #4]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	462b      	mov	r3, r5
 800705e:	4622      	mov	r2, r4
 8007060:	4601      	mov	r1, r0
 8007062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007064:	f004 fa88 	bl	800b578 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	7d1b      	ldrb	r3, [r3, #20]
 8007072:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800707e:	6838      	ldr	r0, [r7, #0]
 8007080:	f7ff f9f4 	bl	800646c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007084:	4b31      	ldr	r3, [pc, #196]	; (800714c <tcp_slowtmr+0x5a4>)
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <tcp_slowtmr+0x4f2>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f06f 010c 	mvn.w	r1, #12
 8007096:	68b8      	ldr	r0, [r7, #8]
 8007098:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800709a:	4b2c      	ldr	r3, [pc, #176]	; (800714c <tcp_slowtmr+0x5a4>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d037      	beq.n	8007112 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80070a2:	e592      	b.n	8006bca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	7f1b      	ldrb	r3, [r3, #28]
 80070b2:	3301      	adds	r3, #1
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	7f1a      	ldrb	r2, [r3, #28]
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	7f5b      	ldrb	r3, [r3, #29]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d325      	bcc.n	8007112 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	2200      	movs	r2, #0
 80070ca:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80070cc:	4b1f      	ldr	r3, [pc, #124]	; (800714c <tcp_slowtmr+0x5a4>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80070d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <tcp_slowtmr+0x54c>
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070e4:	6912      	ldr	r2, [r2, #16]
 80070e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070e8:	4610      	mov	r0, r2
 80070ea:	4798      	blx	r3
 80070ec:	4603      	mov	r3, r0
 80070ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80070f2:	e002      	b.n	80070fa <tcp_slowtmr+0x552>
 80070f4:	2300      	movs	r3, #0
 80070f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80070fa:	4b14      	ldr	r3, [pc, #80]	; (800714c <tcp_slowtmr+0x5a4>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d000      	beq.n	8007104 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007102:	e562      	b.n	8006bca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007104:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007108:	2b00      	cmp	r3, #0
 800710a:	d102      	bne.n	8007112 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800710c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710e:	f003 fc49 	bl	800a9a4 <tcp_output>
  while (pcb != NULL) {
 8007112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007114:	2b00      	cmp	r3, #0
 8007116:	f47f ad5e 	bne.w	8006bd6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800711a:	2300      	movs	r3, #0
 800711c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800711e:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <tcp_slowtmr+0x5a8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007124:	e069      	b.n	80071fa <tcp_slowtmr+0x652>
 8007126:	bf00      	nop
 8007128:	200076d0 	.word	0x200076d0
 800712c:	000a4cb8 	.word	0x000a4cb8
 8007130:	10624dd3 	.word	0x10624dd3
 8007134:	000124f8 	.word	0x000124f8
 8007138:	200076cc 	.word	0x200076cc
 800713c:	0801287c 	.word	0x0801287c
 8007140:	08012cb4 	.word	0x08012cb4
 8007144:	080128c0 	.word	0x080128c0
 8007148:	08012ce0 	.word	0x08012ce0
 800714c:	200076c8 	.word	0x200076c8
 8007150:	200076dc 	.word	0x200076dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	7d1b      	ldrb	r3, [r3, #20]
 8007158:	2b0a      	cmp	r3, #10
 800715a:	d006      	beq.n	800716a <tcp_slowtmr+0x5c2>
 800715c:	4b2b      	ldr	r3, [pc, #172]	; (800720c <tcp_slowtmr+0x664>)
 800715e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007162:	492b      	ldr	r1, [pc, #172]	; (8007210 <tcp_slowtmr+0x668>)
 8007164:	482b      	ldr	r0, [pc, #172]	; (8007214 <tcp_slowtmr+0x66c>)
 8007166:	f009 fe87 	bl	8010e78 <iprintf>
    pcb_remove = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007170:	4b29      	ldr	r3, [pc, #164]	; (8007218 <tcp_slowtmr+0x670>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2bf0      	cmp	r3, #240	; 0xf0
 800717c:	d904      	bls.n	8007188 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800717e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007182:	3301      	adds	r3, #1
 8007184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800718c:	2b00      	cmp	r3, #0
 800718e:	d02f      	beq.n	80071f0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007192:	f000 fb55 	bl	8007840 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	2b00      	cmp	r3, #0
 800719a:	d010      	beq.n	80071be <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800719c:	4b1f      	ldr	r3, [pc, #124]	; (800721c <tcp_slowtmr+0x674>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d106      	bne.n	80071b4 <tcp_slowtmr+0x60c>
 80071a6:	4b19      	ldr	r3, [pc, #100]	; (800720c <tcp_slowtmr+0x664>)
 80071a8:	f240 52af 	movw	r2, #1455	; 0x5af
 80071ac:	491c      	ldr	r1, [pc, #112]	; (8007220 <tcp_slowtmr+0x678>)
 80071ae:	4819      	ldr	r0, [pc, #100]	; (8007214 <tcp_slowtmr+0x66c>)
 80071b0:	f009 fe62 	bl	8010e78 <iprintf>
        prev->next = pcb->next;
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	60da      	str	r2, [r3, #12]
 80071bc:	e00f      	b.n	80071de <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80071be:	4b17      	ldr	r3, [pc, #92]	; (800721c <tcp_slowtmr+0x674>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d006      	beq.n	80071d6 <tcp_slowtmr+0x62e>
 80071c8:	4b10      	ldr	r3, [pc, #64]	; (800720c <tcp_slowtmr+0x664>)
 80071ca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80071ce:	4915      	ldr	r1, [pc, #84]	; (8007224 <tcp_slowtmr+0x67c>)
 80071d0:	4810      	ldr	r0, [pc, #64]	; (8007214 <tcp_slowtmr+0x66c>)
 80071d2:	f009 fe51 	bl	8010e78 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	4a10      	ldr	r2, [pc, #64]	; (800721c <tcp_slowtmr+0x674>)
 80071dc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80071de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80071e8:	69f8      	ldr	r0, [r7, #28]
 80071ea:	f7ff f93f 	bl	800646c <tcp_free>
 80071ee:	e004      	b.n	80071fa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1a9      	bne.n	8007154 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	3730      	adds	r7, #48	; 0x30
 8007206:	46bd      	mov	sp, r7
 8007208:	bdb0      	pop	{r4, r5, r7, pc}
 800720a:	bf00      	nop
 800720c:	0801287c 	.word	0x0801287c
 8007210:	08012d0c 	.word	0x08012d0c
 8007214:	080128c0 	.word	0x080128c0
 8007218:	200076d0 	.word	0x200076d0
 800721c:	200076dc 	.word	0x200076dc
 8007220:	08012d3c 	.word	0x08012d3c
 8007224:	08012d64 	.word	0x08012d64

08007228 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800722e:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <tcp_fasttmr+0xbc>)
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	3301      	adds	r3, #1
 8007234:	b2da      	uxtb	r2, r3
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <tcp_fasttmr+0xbc>)
 8007238:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800723a:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <tcp_fasttmr+0xc0>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007240:	e048      	b.n	80072d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	7f9a      	ldrb	r2, [r3, #30]
 8007246:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <tcp_fasttmr+0xbc>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	d03f      	beq.n	80072ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800724e:	4b25      	ldr	r3, [pc, #148]	; (80072e4 <tcp_fasttmr+0xbc>)
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	8b5b      	ldrh	r3, [r3, #26]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d010      	beq.n	8007284 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	8b5b      	ldrh	r3, [r3, #26]
 8007266:	f043 0302 	orr.w	r3, r3, #2
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f003 fb97 	bl	800a9a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	8b5b      	ldrh	r3, [r3, #26]
 800727a:	f023 0303 	bic.w	r3, r3, #3
 800727e:	b29a      	uxth	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	8b5b      	ldrh	r3, [r3, #26]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b00      	cmp	r3, #0
 800728e:	d009      	beq.n	80072a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8b5b      	ldrh	r3, [r3, #26]
 8007294:	f023 0308 	bic.w	r3, r3, #8
 8007298:	b29a      	uxth	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff fa78 	bl	8006794 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80072b2:	4b0e      	ldr	r3, [pc, #56]	; (80072ec <tcp_fasttmr+0xc4>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f819 	bl	80072f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80072be:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <tcp_fasttmr+0xc4>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d000      	beq.n	80072c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80072c6:	e7b8      	b.n	800723a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	607b      	str	r3, [r7, #4]
 80072cc:	e002      	b.n	80072d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1b3      	bne.n	8007242 <tcp_fasttmr+0x1a>
    }
  }
}
 80072da:	bf00      	nop
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	2000013a 	.word	0x2000013a
 80072e8:	200076cc 	.word	0x200076cc
 80072ec:	200076c8 	.word	0x200076c8

080072f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80072f0:	b590      	push	{r4, r7, lr}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <tcp_process_refused_data+0x22>
 80072fe:	4b37      	ldr	r3, [pc, #220]	; (80073dc <tcp_process_refused_data+0xec>)
 8007300:	f240 6209 	movw	r2, #1545	; 0x609
 8007304:	4936      	ldr	r1, [pc, #216]	; (80073e0 <tcp_process_refused_data+0xf0>)
 8007306:	4837      	ldr	r0, [pc, #220]	; (80073e4 <tcp_process_refused_data+0xf4>)
 8007308:	f009 fdb6 	bl	8010e78 <iprintf>
 800730c:	f06f 030f 	mvn.w	r3, #15
 8007310:	e060      	b.n	80073d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007316:	7b5b      	ldrb	r3, [r3, #13]
 8007318:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800731e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00b      	beq.n	8007348 <tcp_process_refused_data+0x58>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6918      	ldr	r0, [r3, #16]
 800733a:	2300      	movs	r3, #0
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	47a0      	blx	r4
 8007342:	4603      	mov	r3, r0
 8007344:	73fb      	strb	r3, [r7, #15]
 8007346:	e007      	b.n	8007358 <tcp_process_refused_data+0x68>
 8007348:	2300      	movs	r3, #0
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	2000      	movs	r0, #0
 8007350:	f000 f8a4 	bl	800749c <tcp_recv_null>
 8007354:	4603      	mov	r3, r0
 8007356:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d12a      	bne.n	80073b6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	f003 0320 	and.w	r3, r3, #32
 8007366:	2b00      	cmp	r3, #0
 8007368:	d033      	beq.n	80073d2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800736e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007372:	d005      	beq.n	8007380 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007378:	3301      	adds	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <tcp_process_refused_data+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6918      	ldr	r0, [r3, #16]
 8007394:	2300      	movs	r3, #0
 8007396:	2200      	movs	r2, #0
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	47a0      	blx	r4
 800739c:	4603      	mov	r3, r0
 800739e:	73fb      	strb	r3, [r7, #15]
 80073a0:	e001      	b.n	80073a6 <tcp_process_refused_data+0xb6>
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80073a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073aa:	f113 0f0d 	cmn.w	r3, #13
 80073ae:	d110      	bne.n	80073d2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80073b0:	f06f 030c 	mvn.w	r3, #12
 80073b4:	e00e      	b.n	80073d4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80073b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ba:	f113 0f0d 	cmn.w	r3, #13
 80073be:	d102      	bne.n	80073c6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80073c0:	f06f 030c 	mvn.w	r3, #12
 80073c4:	e006      	b.n	80073d4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80073cc:	f06f 0304 	mvn.w	r3, #4
 80073d0:	e000      	b.n	80073d4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd90      	pop	{r4, r7, pc}
 80073dc:	0801287c 	.word	0x0801287c
 80073e0:	08012d8c 	.word	0x08012d8c
 80073e4:	080128c0 	.word	0x080128c0

080073e8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80073f0:	e007      	b.n	8007402 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f80a 	bl	8007412 <tcp_seg_free>
    seg = next;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f4      	bne.n	80073f2 <tcp_segs_free+0xa>
  }
}
 8007408:	bf00      	nop
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00c      	beq.n	800743a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe fd65 	bl	8005efc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	2003      	movs	r0, #3
 8007436:	f7fd ff8b 	bl	8005350 <memp_free>
  }
}
 800743a:	bf00      	nop
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <tcp_seg_copy+0x1c>
 8007452:	4b0f      	ldr	r3, [pc, #60]	; (8007490 <tcp_seg_copy+0x4c>)
 8007454:	f240 6282 	movw	r2, #1666	; 0x682
 8007458:	490e      	ldr	r1, [pc, #56]	; (8007494 <tcp_seg_copy+0x50>)
 800745a:	480f      	ldr	r0, [pc, #60]	; (8007498 <tcp_seg_copy+0x54>)
 800745c:	f009 fd0c 	bl	8010e78 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007460:	2003      	movs	r0, #3
 8007462:	f7fd ff33 	bl	80052cc <memp_malloc>
 8007466:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <tcp_seg_copy+0x2e>
    return NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	e00a      	b.n	8007488 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007472:	2210      	movs	r2, #16
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f009 fce8 	bl	8010e4c <memcpy>
  pbuf_ref(cseg->p);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fddb 	bl	800603c <pbuf_ref>
  return cseg;
 8007486:	68fb      	ldr	r3, [r7, #12]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	0801287c 	.word	0x0801287c
 8007494:	08012dd0 	.word	0x08012dd0
 8007498:	080128c0 	.word	0x080128c0

0800749c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d109      	bne.n	80074c4 <tcp_recv_null+0x28>
 80074b0:	4b12      	ldr	r3, [pc, #72]	; (80074fc <tcp_recv_null+0x60>)
 80074b2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80074b6:	4912      	ldr	r1, [pc, #72]	; (8007500 <tcp_recv_null+0x64>)
 80074b8:	4812      	ldr	r0, [pc, #72]	; (8007504 <tcp_recv_null+0x68>)
 80074ba:	f009 fcdd 	bl	8010e78 <iprintf>
 80074be:	f06f 030f 	mvn.w	r3, #15
 80074c2:	e016      	b.n	80074f2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	891b      	ldrh	r3, [r3, #8]
 80074ce:	4619      	mov	r1, r3
 80074d0:	68b8      	ldr	r0, [r7, #8]
 80074d2:	f7ff fb19 	bl	8006b08 <tcp_recved>
    pbuf_free(p);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fe fd10 	bl	8005efc <pbuf_free>
 80074dc:	e008      	b.n	80074f0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80074de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d104      	bne.n	80074f0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80074e6:	68b8      	ldr	r0, [r7, #8]
 80074e8:	f7ff f9be 	bl	8006868 <tcp_close>
 80074ec:	4603      	mov	r3, r0
 80074ee:	e000      	b.n	80074f2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	0801287c 	.word	0x0801287c
 8007500:	08012dec 	.word	0x08012dec
 8007504:	080128c0 	.word	0x080128c0

08007508 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007516:	2b00      	cmp	r3, #0
 8007518:	db01      	blt.n	800751e <tcp_kill_prio+0x16>
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	e000      	b.n	8007520 <tcp_kill_prio+0x18>
 800751e:	237f      	movs	r3, #127	; 0x7f
 8007520:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d034      	beq.n	8007592 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	3b01      	subs	r3, #1
 800752c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007536:	4b19      	ldr	r3, [pc, #100]	; (800759c <tcp_kill_prio+0x94>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	e01f      	b.n	800757e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	7d5b      	ldrb	r3, [r3, #21]
 8007542:	7afa      	ldrb	r2, [r7, #11]
 8007544:	429a      	cmp	r2, r3
 8007546:	d80c      	bhi.n	8007562 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800754c:	7afa      	ldrb	r2, [r7, #11]
 800754e:	429a      	cmp	r2, r3
 8007550:	d112      	bne.n	8007578 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <tcp_kill_prio+0x98>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	429a      	cmp	r2, r3
 8007560:	d80a      	bhi.n	8007578 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007562:	4b0f      	ldr	r3, [pc, #60]	; (80075a0 <tcp_kill_prio+0x98>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	7d5b      	ldrb	r3, [r3, #21]
 8007576:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	617b      	str	r3, [r7, #20]
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1dc      	bne.n	800753e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d004      	beq.n	8007594 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800758a:	6938      	ldr	r0, [r7, #16]
 800758c:	f7ff fa56 	bl	8006a3c <tcp_abort>
 8007590:	e000      	b.n	8007594 <tcp_kill_prio+0x8c>
    return;
 8007592:	bf00      	nop
  }
}
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200076cc 	.word	0x200076cc
 80075a0:	200076d0 	.word	0x200076d0

080075a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	4603      	mov	r3, r0
 80075ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	2b08      	cmp	r3, #8
 80075b2:	d009      	beq.n	80075c8 <tcp_kill_state+0x24>
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b09      	cmp	r3, #9
 80075b8:	d006      	beq.n	80075c8 <tcp_kill_state+0x24>
 80075ba:	4b1a      	ldr	r3, [pc, #104]	; (8007624 <tcp_kill_state+0x80>)
 80075bc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80075c0:	4919      	ldr	r1, [pc, #100]	; (8007628 <tcp_kill_state+0x84>)
 80075c2:	481a      	ldr	r0, [pc, #104]	; (800762c <tcp_kill_state+0x88>)
 80075c4:	f009 fc58 	bl	8010e78 <iprintf>

  inactivity = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075d0:	4b17      	ldr	r3, [pc, #92]	; (8007630 <tcp_kill_state+0x8c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e017      	b.n	8007608 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	7d1b      	ldrb	r3, [r3, #20]
 80075dc:	79fa      	ldrb	r2, [r7, #7]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d10f      	bne.n	8007602 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80075e2:	4b14      	ldr	r3, [pc, #80]	; (8007634 <tcp_kill_state+0x90>)
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d807      	bhi.n	8007602 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80075f2:	4b10      	ldr	r3, [pc, #64]	; (8007634 <tcp_kill_state+0x90>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e4      	bne.n	80075d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007614:	2100      	movs	r1, #0
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f7ff f952 	bl	80068c0 <tcp_abandon>
  }
}
 800761c:	bf00      	nop
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	0801287c 	.word	0x0801287c
 8007628:	08012e08 	.word	0x08012e08
 800762c:	080128c0 	.word	0x080128c0
 8007630:	200076cc 	.word	0x200076cc
 8007634:	200076d0 	.word	0x200076d0

08007638 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007646:	4b12      	ldr	r3, [pc, #72]	; (8007690 <tcp_kill_timewait+0x58>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e012      	b.n	8007674 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800764e:	4b11      	ldr	r3, [pc, #68]	; (8007694 <tcp_kill_timewait+0x5c>)
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	429a      	cmp	r2, r3
 800765c:	d807      	bhi.n	800766e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800765e:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <tcp_kill_timewait+0x5c>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e9      	bne.n	800764e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	f7ff f9db 	bl	8006a3c <tcp_abort>
  }
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	200076dc 	.word	0x200076dc
 8007694:	200076d0 	.word	0x200076d0

08007698 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800769e:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <tcp_handle_closepend+0x48>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80076a4:	e014      	b.n	80076d0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8b5b      	ldrh	r3, [r3, #26]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8b5b      	ldrh	r3, [r3, #26]
 80076bc:	f023 0308 	bic.w	r3, r3, #8
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff f864 	bl	8006794 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e7      	bne.n	80076a6 <tcp_handle_closepend+0xe>
  }
}
 80076d6:	bf00      	nop
 80076d8:	bf00      	nop
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	200076cc 	.word	0x200076cc

080076e4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80076ee:	2001      	movs	r0, #1
 80076f0:	f7fd fdec 	bl	80052cc <memp_malloc>
 80076f4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d14e      	bne.n	800779a <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80076fc:	f7ff ffcc 	bl	8007698 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007700:	f7ff ff9a 	bl	8007638 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007704:	2001      	movs	r0, #1
 8007706:	f7fd fde1 	bl	80052cc <memp_malloc>
 800770a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d139      	bne.n	8007786 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007712:	2009      	movs	r0, #9
 8007714:	f7ff ff46 	bl	80075a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007718:	2001      	movs	r0, #1
 800771a:	f7fd fdd7 	bl	80052cc <memp_malloc>
 800771e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d125      	bne.n	8007772 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007726:	2008      	movs	r0, #8
 8007728:	f7ff ff3c 	bl	80075a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800772c:	2001      	movs	r0, #1
 800772e:	f7fd fdcd 	bl	80052cc <memp_malloc>
 8007732:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d111      	bne.n	800775e <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fee3 	bl	8007508 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007742:	2001      	movs	r0, #1
 8007744:	f7fd fdc2 	bl	80052cc <memp_malloc>
 8007748:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d006      	beq.n	800775e <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8007750:	4b36      	ldr	r3, [pc, #216]	; (800782c <tcp_alloc+0x148>)
 8007752:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007756:	881a      	ldrh	r2, [r3, #0]
 8007758:	3a01      	subs	r2, #1
 800775a:	b292      	uxth	r2, r2
 800775c:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d006      	beq.n	8007772 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8007764:	4b31      	ldr	r3, [pc, #196]	; (800782c <tcp_alloc+0x148>)
 8007766:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800776a:	881a      	ldrh	r2, [r3, #0]
 800776c:	3a01      	subs	r2, #1
 800776e:	b292      	uxth	r2, r2
 8007770:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d006      	beq.n	8007786 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8007778:	4b2c      	ldr	r3, [pc, #176]	; (800782c <tcp_alloc+0x148>)
 800777a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800777e:	881a      	ldrh	r2, [r3, #0]
 8007780:	3a01      	subs	r2, #1
 8007782:	b292      	uxth	r2, r2
 8007784:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d006      	beq.n	800779a <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800778c:	4b27      	ldr	r3, [pc, #156]	; (800782c <tcp_alloc+0x148>)
 800778e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007792:	881a      	ldrh	r2, [r3, #0]
 8007794:	3a01      	subs	r2, #1
 8007796:	b292      	uxth	r2, r2
 8007798:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d03f      	beq.n	8007820 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80077a0:	229c      	movs	r2, #156	; 0x9c
 80077a2:	2100      	movs	r1, #0
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f009 fb5f 	bl	8010e68 <memset>
    pcb->prio = prio;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	79fa      	ldrb	r2, [r7, #7]
 80077ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80077b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80077c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	22ff      	movs	r2, #255	; 0xff
 80077ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80077d6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2206      	movs	r2, #6
 80077dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2206      	movs	r2, #6
 80077e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80077f6:	4b0e      	ldr	r3, [pc, #56]	; (8007830 <tcp_alloc+0x14c>)
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <tcp_alloc+0x150>)
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800780c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a09      	ldr	r2, [pc, #36]	; (8007838 <tcp_alloc+0x154>)
 8007814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4a08      	ldr	r2, [pc, #32]	; (800783c <tcp_alloc+0x158>)
 800781c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007820:	68fb      	ldr	r3, [r7, #12]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	200075f0 	.word	0x200075f0
 8007830:	200076d0 	.word	0x200076d0
 8007834:	2000013a 	.word	0x2000013a
 8007838:	0800749d 	.word	0x0800749d
 800783c:	006ddd00 	.word	0x006ddd00

08007840 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d107      	bne.n	800785e <tcp_pcb_purge+0x1e>
 800784e:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <tcp_pcb_purge+0x94>)
 8007850:	f640 0251 	movw	r2, #2129	; 0x851
 8007854:	4920      	ldr	r1, [pc, #128]	; (80078d8 <tcp_pcb_purge+0x98>)
 8007856:	4821      	ldr	r0, [pc, #132]	; (80078dc <tcp_pcb_purge+0x9c>)
 8007858:	f009 fb0e 	bl	8010e78 <iprintf>
 800785c:	e037      	b.n	80078ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7d1b      	ldrb	r3, [r3, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d033      	beq.n	80078ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800786a:	2b0a      	cmp	r3, #10
 800786c:	d02f      	beq.n	80078ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007872:	2b01      	cmp	r3, #1
 8007874:	d02b      	beq.n	80078ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fb3a 	bl	8005efc <pbuf_free>
      pcb->refused_data = NULL;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f986 	bl	8007ba8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078a2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff fd9d 	bl	80073e8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7ff fd98 	bl	80073e8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	0801287c 	.word	0x0801287c
 80078d8:	08012ec8 	.word	0x08012ec8
 80078dc:	080128c0 	.word	0x080128c0

080078e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <tcp_pcb_remove+0x1e>
 80078f0:	4b3e      	ldr	r3, [pc, #248]	; (80079ec <tcp_pcb_remove+0x10c>)
 80078f2:	f640 0283 	movw	r2, #2179	; 0x883
 80078f6:	493e      	ldr	r1, [pc, #248]	; (80079f0 <tcp_pcb_remove+0x110>)
 80078f8:	483e      	ldr	r0, [pc, #248]	; (80079f4 <tcp_pcb_remove+0x114>)
 80078fa:	f009 fabd 	bl	8010e78 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d106      	bne.n	8007912 <tcp_pcb_remove+0x32>
 8007904:	4b39      	ldr	r3, [pc, #228]	; (80079ec <tcp_pcb_remove+0x10c>)
 8007906:	f640 0284 	movw	r2, #2180	; 0x884
 800790a:	493b      	ldr	r1, [pc, #236]	; (80079f8 <tcp_pcb_remove+0x118>)
 800790c:	4839      	ldr	r0, [pc, #228]	; (80079f4 <tcp_pcb_remove+0x114>)
 800790e:	f009 fab3 	bl	8010e78 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d105      	bne.n	8007928 <tcp_pcb_remove+0x48>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	e013      	b.n	8007950 <tcp_pcb_remove+0x70>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]
 800792e:	e00c      	b.n	800794a <tcp_pcb_remove+0x6a>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	429a      	cmp	r2, r3
 8007938:	d104      	bne.n	8007944 <tcp_pcb_remove+0x64>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	60da      	str	r2, [r3, #12]
 8007942:	e005      	b.n	8007950 <tcp_pcb_remove+0x70>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	60fb      	str	r3, [r7, #12]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1ef      	bne.n	8007930 <tcp_pcb_remove+0x50>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007956:	6838      	ldr	r0, [r7, #0]
 8007958:	f7ff ff72 	bl	8007840 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	7d1b      	ldrb	r3, [r3, #20]
 8007960:	2b0a      	cmp	r3, #10
 8007962:	d013      	beq.n	800798c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007968:	2b01      	cmp	r3, #1
 800796a:	d00f      	beq.n	800798c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	8b5b      	ldrh	r3, [r3, #26]
 8007970:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007974:	2b00      	cmp	r3, #0
 8007976:	d009      	beq.n	800798c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	8b5b      	ldrh	r3, [r3, #26]
 800797c:	f043 0302 	orr.w	r3, r3, #2
 8007980:	b29a      	uxth	r2, r3
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007986:	6838      	ldr	r0, [r7, #0]
 8007988:	f003 f80c 	bl	800a9a4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	7d1b      	ldrb	r3, [r3, #20]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d020      	beq.n	80079d6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d006      	beq.n	80079aa <tcp_pcb_remove+0xca>
 800799c:	4b13      	ldr	r3, [pc, #76]	; (80079ec <tcp_pcb_remove+0x10c>)
 800799e:	f640 0293 	movw	r2, #2195	; 0x893
 80079a2:	4916      	ldr	r1, [pc, #88]	; (80079fc <tcp_pcb_remove+0x11c>)
 80079a4:	4813      	ldr	r0, [pc, #76]	; (80079f4 <tcp_pcb_remove+0x114>)
 80079a6:	f009 fa67 	bl	8010e78 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d006      	beq.n	80079c0 <tcp_pcb_remove+0xe0>
 80079b2:	4b0e      	ldr	r3, [pc, #56]	; (80079ec <tcp_pcb_remove+0x10c>)
 80079b4:	f640 0294 	movw	r2, #2196	; 0x894
 80079b8:	4911      	ldr	r1, [pc, #68]	; (8007a00 <tcp_pcb_remove+0x120>)
 80079ba:	480e      	ldr	r0, [pc, #56]	; (80079f4 <tcp_pcb_remove+0x114>)
 80079bc:	f009 fa5c 	bl	8010e78 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d006      	beq.n	80079d6 <tcp_pcb_remove+0xf6>
 80079c8:	4b08      	ldr	r3, [pc, #32]	; (80079ec <tcp_pcb_remove+0x10c>)
 80079ca:	f640 0296 	movw	r2, #2198	; 0x896
 80079ce:	490d      	ldr	r1, [pc, #52]	; (8007a04 <tcp_pcb_remove+0x124>)
 80079d0:	4808      	ldr	r0, [pc, #32]	; (80079f4 <tcp_pcb_remove+0x114>)
 80079d2:	f009 fa51 	bl	8010e78 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2200      	movs	r2, #0
 80079da:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2200      	movs	r2, #0
 80079e0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80079e2:	bf00      	nop
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	0801287c 	.word	0x0801287c
 80079f0:	08012ee4 	.word	0x08012ee4
 80079f4:	080128c0 	.word	0x080128c0
 80079f8:	08012f00 	.word	0x08012f00
 80079fc:	08012f20 	.word	0x08012f20
 8007a00:	08012f38 	.word	0x08012f38
 8007a04:	08012f54 	.word	0x08012f54

08007a08 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <tcp_next_iss+0x1c>
 8007a16:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <tcp_next_iss+0x38>)
 8007a18:	f640 02af 	movw	r2, #2223	; 0x8af
 8007a1c:	4909      	ldr	r1, [pc, #36]	; (8007a44 <tcp_next_iss+0x3c>)
 8007a1e:	480a      	ldr	r0, [pc, #40]	; (8007a48 <tcp_next_iss+0x40>)
 8007a20:	f009 fa2a 	bl	8010e78 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <tcp_next_iss+0x44>)
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <tcp_next_iss+0x48>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	4a07      	ldr	r2, [pc, #28]	; (8007a4c <tcp_next_iss+0x44>)
 8007a30:	6013      	str	r3, [r2, #0]
  return iss;
 8007a32:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <tcp_next_iss+0x44>)
 8007a34:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	0801287c 	.word	0x0801287c
 8007a44:	08012f6c 	.word	0x08012f6c
 8007a48:	080128c0 	.word	0x080128c0
 8007a4c:	2000000c 	.word	0x2000000c
 8007a50:	200076d0 	.word	0x200076d0

08007a54 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d106      	bne.n	8007a76 <tcp_eff_send_mss_netif+0x22>
 8007a68:	4b14      	ldr	r3, [pc, #80]	; (8007abc <tcp_eff_send_mss_netif+0x68>)
 8007a6a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007a6e:	4914      	ldr	r1, [pc, #80]	; (8007ac0 <tcp_eff_send_mss_netif+0x6c>)
 8007a70:	4814      	ldr	r0, [pc, #80]	; (8007ac4 <tcp_eff_send_mss_netif+0x70>)
 8007a72:	f009 fa01 	bl	8010e78 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007a7c:	89fb      	ldrh	r3, [r7, #14]
 8007a7e:	e019      	b.n	8007ab4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007a86:	8afb      	ldrh	r3, [r7, #22]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d012      	beq.n	8007ab2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007a8c:	2328      	movs	r3, #40	; 0x28
 8007a8e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007a90:	8afa      	ldrh	r2, [r7, #22]
 8007a92:	8abb      	ldrh	r3, [r7, #20]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d904      	bls.n	8007aa2 <tcp_eff_send_mss_netif+0x4e>
 8007a98:	8afa      	ldrh	r2, [r7, #22]
 8007a9a:	8abb      	ldrh	r3, [r7, #20]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	e000      	b.n	8007aa4 <tcp_eff_send_mss_netif+0x50>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007aa6:	8a7a      	ldrh	r2, [r7, #18]
 8007aa8:	89fb      	ldrh	r3, [r7, #14]
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	bf28      	it	cs
 8007aae:	4613      	movcs	r3, r2
 8007ab0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007ab2:	89fb      	ldrh	r3, [r7, #14]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	0801287c 	.word	0x0801287c
 8007ac0:	08012f88 	.word	0x08012f88
 8007ac4:	080128c0 	.word	0x080128c0

08007ac8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d119      	bne.n	8007b10 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007adc:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007ade:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007ae2:	4910      	ldr	r1, [pc, #64]	; (8007b24 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007ae4:	4810      	ldr	r0, [pc, #64]	; (8007b28 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007ae6:	f009 f9c7 	bl	8010e78 <iprintf>

  while (pcb != NULL) {
 8007aea:	e011      	b.n	8007b10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d108      	bne.n	8007b0a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7fe ff9c 	bl	8006a3c <tcp_abort>
      pcb = next;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e002      	b.n	8007b10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1ea      	bne.n	8007aec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	0801287c 	.word	0x0801287c
 8007b24:	08012fb0 	.word	0x08012fb0
 8007b28:	080128c0 	.word	0x080128c0

08007b2c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d02a      	beq.n	8007b92 <tcp_netif_ip_addr_changed+0x66>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d026      	beq.n	8007b92 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007b44:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <tcp_netif_ip_addr_changed+0x70>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff ffbc 	bl	8007ac8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007b50:	4b13      	ldr	r3, [pc, #76]	; (8007ba0 <tcp_netif_ip_addr_changed+0x74>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff ffb6 	bl	8007ac8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d017      	beq.n	8007b92 <tcp_netif_ip_addr_changed+0x66>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d013      	beq.n	8007b92 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ba4 <tcp_netif_ip_addr_changed+0x78>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	e00c      	b.n	8007b8c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d103      	bne.n	8007b86 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1ef      	bne.n	8007b72 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	200076cc 	.word	0x200076cc
 8007ba0:	200076d8 	.word	0x200076d8
 8007ba4:	200076d4 	.word	0x200076d4

08007ba8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d007      	beq.n	8007bc8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff fc13 	bl	80073e8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007bd0:	b590      	push	{r4, r7, lr}
 8007bd2:	b08d      	sub	sp, #52	; 0x34
 8007bd4:	af04      	add	r7, sp, #16
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d105      	bne.n	8007bec <tcp_input+0x1c>
 8007be0:	4b5b      	ldr	r3, [pc, #364]	; (8007d50 <tcp_input+0x180>)
 8007be2:	2283      	movs	r2, #131	; 0x83
 8007be4:	495b      	ldr	r1, [pc, #364]	; (8007d54 <tcp_input+0x184>)
 8007be6:	485c      	ldr	r0, [pc, #368]	; (8007d58 <tcp_input+0x188>)
 8007be8:	f009 f946 	bl	8010e78 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8007bec:	4b5b      	ldr	r3, [pc, #364]	; (8007d5c <tcp_input+0x18c>)
 8007bee:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	4b59      	ldr	r3, [pc, #356]	; (8007d5c <tcp_input+0x18c>)
 8007bf8:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	4a57      	ldr	r2, [pc, #348]	; (8007d60 <tcp_input+0x190>)
 8007c02:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	895b      	ldrh	r3, [r3, #10]
 8007c08:	2b13      	cmp	r3, #19
 8007c0a:	d809      	bhi.n	8007c20 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8007c0c:	4b53      	ldr	r3, [pc, #332]	; (8007d5c <tcp_input+0x18c>)
 8007c0e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8007c12:	3301      	adds	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	4b51      	ldr	r3, [pc, #324]	; (8007d5c <tcp_input+0x18c>)
 8007c18:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8007c1c:	f000 bc36 	b.w	800848c <tcp_input+0x8bc>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c20:	4b50      	ldr	r3, [pc, #320]	; (8007d64 <tcp_input+0x194>)
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	4a4f      	ldr	r2, [pc, #316]	; (8007d64 <tcp_input+0x194>)
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	4611      	mov	r1, r2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f008 f88a 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d105      	bne.n	8007c42 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007c36:	4b4b      	ldr	r3, [pc, #300]	; (8007d64 <tcp_input+0x194>)
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c3e:	2be0      	cmp	r3, #224	; 0xe0
 8007c40:	d109      	bne.n	8007c56 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8007c42:	4b46      	ldr	r3, [pc, #280]	; (8007d5c <tcp_input+0x18c>)
 8007c44:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007c48:	3301      	adds	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	4b43      	ldr	r3, [pc, #268]	; (8007d5c <tcp_input+0x18c>)
 8007c4e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 8007c52:	f000 bc1b 	b.w	800848c <tcp_input+0x8bc>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	891a      	ldrh	r2, [r3, #8]
 8007c5a:	4b43      	ldr	r3, [pc, #268]	; (8007d68 <tcp_input+0x198>)
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	4b43      	ldr	r3, [pc, #268]	; (8007d6c <tcp_input+0x19c>)
 8007c60:	2106      	movs	r1, #6
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7fc fe1c 	bl	80048a0 <ip_chksum_pseudo>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8007c6c:	8a3b      	ldrh	r3, [r7, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <tcp_input+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 8007c72:	4b3a      	ldr	r3, [pc, #232]	; (8007d5c <tcp_input+0x18c>)
 8007c74:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007c78:	3301      	adds	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	4b37      	ldr	r3, [pc, #220]	; (8007d5c <tcp_input+0x18c>)
 8007c7e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      goto dropped;
 8007c82:	f000 bc03 	b.w	800848c <tcp_input+0x8bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007c86:	4b36      	ldr	r3, [pc, #216]	; (8007d60 <tcp_input+0x190>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	899b      	ldrh	r3, [r3, #12]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fc fcd4 	bl	800463c <lwip_htons>
 8007c94:	4603      	mov	r3, r0
 8007c96:	0b1b      	lsrs	r3, r3, #12
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b13      	cmp	r3, #19
 8007ca4:	d905      	bls.n	8007cb2 <tcp_input+0xe2>
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	891b      	ldrh	r3, [r3, #8]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d908      	bls.n	8007cc4 <tcp_input+0xf4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8007cb2:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <tcp_input+0x18c>)
 8007cb4:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8007cb8:	3301      	adds	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	4b27      	ldr	r3, [pc, #156]	; (8007d5c <tcp_input+0x18c>)
 8007cbe:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8007cc2:	e3e3      	b.n	800848c <tcp_input+0x8bc>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	3b14      	subs	r3, #20
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	4b28      	ldr	r3, [pc, #160]	; (8007d70 <tcp_input+0x1a0>)
 8007cce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007cd0:	4b28      	ldr	r3, [pc, #160]	; (8007d74 <tcp_input+0x1a4>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	895a      	ldrh	r2, [r3, #10]
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d309      	bcc.n	8007cf6 <tcp_input+0x126>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007ce2:	4b23      	ldr	r3, [pc, #140]	; (8007d70 <tcp_input+0x1a0>)
 8007ce4:	881a      	ldrh	r2, [r3, #0]
 8007ce6:	4b24      	ldr	r3, [pc, #144]	; (8007d78 <tcp_input+0x1a8>)
 8007ce8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7fe f87e 	bl	8005df0 <pbuf_remove_header>
 8007cf4:	e06e      	b.n	8007dd4 <tcp_input+0x204>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d105      	bne.n	8007d0a <tcp_input+0x13a>
 8007cfe:	4b14      	ldr	r3, [pc, #80]	; (8007d50 <tcp_input+0x180>)
 8007d00:	22c2      	movs	r2, #194	; 0xc2
 8007d02:	491e      	ldr	r1, [pc, #120]	; (8007d7c <tcp_input+0x1ac>)
 8007d04:	4814      	ldr	r0, [pc, #80]	; (8007d58 <tcp_input+0x188>)
 8007d06:	f009 f8b7 	bl	8010e78 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007d0a:	2114      	movs	r1, #20
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fe f86f 	bl	8005df0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	895a      	ldrh	r2, [r3, #10]
 8007d16:	4b18      	ldr	r3, [pc, #96]	; (8007d78 <tcp_input+0x1a8>)
 8007d18:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007d1a:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <tcp_input+0x1a0>)
 8007d1c:	881a      	ldrh	r2, [r3, #0]
 8007d1e:	4b16      	ldr	r3, [pc, #88]	; (8007d78 <tcp_input+0x1a8>)
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007d26:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <tcp_input+0x1a8>)
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7fe f85f 	bl	8005df0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	895b      	ldrh	r3, [r3, #10]
 8007d38:	89ba      	ldrh	r2, [r7, #12]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d920      	bls.n	8007d80 <tcp_input+0x1b0>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8007d3e:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <tcp_input+0x18c>)
 8007d40:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8007d44:	3301      	adds	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <tcp_input+0x18c>)
 8007d4a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8007d4e:	e39d      	b.n	800848c <tcp_input+0x8bc>
 8007d50:	08012fe4 	.word	0x08012fe4
 8007d54:	08013018 	.word	0x08013018
 8007d58:	08013030 	.word	0x08013030
 8007d5c:	200075f0 	.word	0x200075f0
 8007d60:	2000014c 	.word	0x2000014c
 8007d64:	200040dc 	.word	0x200040dc
 8007d68:	200040f0 	.word	0x200040f0
 8007d6c:	200040ec 	.word	0x200040ec
 8007d70:	20000150 	.word	0x20000150
 8007d74:	20000154 	.word	0x20000154
 8007d78:	20000152 	.word	0x20000152
 8007d7c:	08013058 	.word	0x08013058
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4a91      	ldr	r2, [pc, #580]	; (8007fcc <tcp_input+0x3fc>)
 8007d88:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	89ba      	ldrh	r2, [r7, #12]
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe f82c 	bl	8005df0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	891a      	ldrh	r2, [r3, #8]
 8007d9c:	89bb      	ldrh	r3, [r7, #12]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	895b      	ldrh	r3, [r3, #10]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <tcp_input+0x1ea>
 8007dae:	4b88      	ldr	r3, [pc, #544]	; (8007fd0 <tcp_input+0x400>)
 8007db0:	22df      	movs	r2, #223	; 0xdf
 8007db2:	4988      	ldr	r1, [pc, #544]	; (8007fd4 <tcp_input+0x404>)
 8007db4:	4888      	ldr	r0, [pc, #544]	; (8007fd8 <tcp_input+0x408>)
 8007db6:	f009 f85f 	bl	8010e78 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	891a      	ldrh	r2, [r3, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	891b      	ldrh	r3, [r3, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d005      	beq.n	8007dd4 <tcp_input+0x204>
 8007dc8:	4b81      	ldr	r3, [pc, #516]	; (8007fd0 <tcp_input+0x400>)
 8007dca:	22e0      	movs	r2, #224	; 0xe0
 8007dcc:	4983      	ldr	r1, [pc, #524]	; (8007fdc <tcp_input+0x40c>)
 8007dce:	4882      	ldr	r0, [pc, #520]	; (8007fd8 <tcp_input+0x408>)
 8007dd0:	f009 f852 	bl	8010e78 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007dd4:	4b82      	ldr	r3, [pc, #520]	; (8007fe0 <tcp_input+0x410>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	4a80      	ldr	r2, [pc, #512]	; (8007fe0 <tcp_input+0x410>)
 8007dde:	6814      	ldr	r4, [r2, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fc fc2b 	bl	800463c <lwip_htons>
 8007de6:	4603      	mov	r3, r0
 8007de8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007dea:	4b7d      	ldr	r3, [pc, #500]	; (8007fe0 <tcp_input+0x410>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	885b      	ldrh	r3, [r3, #2]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4a7b      	ldr	r2, [pc, #492]	; (8007fe0 <tcp_input+0x410>)
 8007df4:	6814      	ldr	r4, [r2, #0]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fc fc20 	bl	800463c <lwip_htons>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007e00:	4b77      	ldr	r3, [pc, #476]	; (8007fe0 <tcp_input+0x410>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	4a76      	ldr	r2, [pc, #472]	; (8007fe0 <tcp_input+0x410>)
 8007e08:	6814      	ldr	r4, [r2, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fc fc2b 	bl	8004666 <lwip_htonl>
 8007e10:	4603      	mov	r3, r0
 8007e12:	6063      	str	r3, [r4, #4]
 8007e14:	6863      	ldr	r3, [r4, #4]
 8007e16:	4a73      	ldr	r2, [pc, #460]	; (8007fe4 <tcp_input+0x414>)
 8007e18:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007e1a:	4b71      	ldr	r3, [pc, #452]	; (8007fe0 <tcp_input+0x410>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	4a6f      	ldr	r2, [pc, #444]	; (8007fe0 <tcp_input+0x410>)
 8007e22:	6814      	ldr	r4, [r2, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fc fc1e 	bl	8004666 <lwip_htonl>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	60a3      	str	r3, [r4, #8]
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	4a6d      	ldr	r2, [pc, #436]	; (8007fe8 <tcp_input+0x418>)
 8007e32:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007e34:	4b6a      	ldr	r3, [pc, #424]	; (8007fe0 <tcp_input+0x410>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	89db      	ldrh	r3, [r3, #14]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	4a68      	ldr	r2, [pc, #416]	; (8007fe0 <tcp_input+0x410>)
 8007e3e:	6814      	ldr	r4, [r2, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fc fbfb 	bl	800463c <lwip_htons>
 8007e46:	4603      	mov	r3, r0
 8007e48:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007e4a:	4b65      	ldr	r3, [pc, #404]	; (8007fe0 <tcp_input+0x410>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	899b      	ldrh	r3, [r3, #12]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fc fbf2 	bl	800463c <lwip_htons>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	4b62      	ldr	r3, [pc, #392]	; (8007fec <tcp_input+0x41c>)
 8007e64:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	891a      	ldrh	r2, [r3, #8]
 8007e6a:	4b61      	ldr	r3, [pc, #388]	; (8007ff0 <tcp_input+0x420>)
 8007e6c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007e6e:	4b5f      	ldr	r3, [pc, #380]	; (8007fec <tcp_input+0x41c>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d014      	beq.n	8007ea4 <tcp_input+0x2d4>
    tcplen++;
 8007e7a:	4b5d      	ldr	r3, [pc, #372]	; (8007ff0 <tcp_input+0x420>)
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	4b5b      	ldr	r3, [pc, #364]	; (8007ff0 <tcp_input+0x420>)
 8007e84:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	891a      	ldrh	r2, [r3, #8]
 8007e8a:	4b59      	ldr	r3, [pc, #356]	; (8007ff0 <tcp_input+0x420>)
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d908      	bls.n	8007ea4 <tcp_input+0x2d4>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8007e92:	4b58      	ldr	r3, [pc, #352]	; (8007ff4 <tcp_input+0x424>)
 8007e94:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8007e98:	3301      	adds	r3, #1
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	4b55      	ldr	r3, [pc, #340]	; (8007ff4 <tcp_input+0x424>)
 8007e9e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8007ea2:	e2f3      	b.n	800848c <tcp_input+0x8bc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ea8:	4b53      	ldr	r3, [pc, #332]	; (8007ff8 <tcp_input+0x428>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e07f      	b.n	8007fb0 <tcp_input+0x3e0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	7d1b      	ldrb	r3, [r3, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d105      	bne.n	8007ec4 <tcp_input+0x2f4>
 8007eb8:	4b45      	ldr	r3, [pc, #276]	; (8007fd0 <tcp_input+0x400>)
 8007eba:	22fb      	movs	r2, #251	; 0xfb
 8007ebc:	494f      	ldr	r1, [pc, #316]	; (8007ffc <tcp_input+0x42c>)
 8007ebe:	4846      	ldr	r0, [pc, #280]	; (8007fd8 <tcp_input+0x408>)
 8007ec0:	f008 ffda 	bl	8010e78 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	7d1b      	ldrb	r3, [r3, #20]
 8007ec8:	2b0a      	cmp	r3, #10
 8007eca:	d105      	bne.n	8007ed8 <tcp_input+0x308>
 8007ecc:	4b40      	ldr	r3, [pc, #256]	; (8007fd0 <tcp_input+0x400>)
 8007ece:	22fc      	movs	r2, #252	; 0xfc
 8007ed0:	494b      	ldr	r1, [pc, #300]	; (8008000 <tcp_input+0x430>)
 8007ed2:	4841      	ldr	r0, [pc, #260]	; (8007fd8 <tcp_input+0x408>)
 8007ed4:	f008 ffd0 	bl	8010e78 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	7d1b      	ldrb	r3, [r3, #20]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d105      	bne.n	8007eec <tcp_input+0x31c>
 8007ee0:	4b3b      	ldr	r3, [pc, #236]	; (8007fd0 <tcp_input+0x400>)
 8007ee2:	22fd      	movs	r2, #253	; 0xfd
 8007ee4:	4947      	ldr	r1, [pc, #284]	; (8008004 <tcp_input+0x434>)
 8007ee6:	483c      	ldr	r0, [pc, #240]	; (8007fd8 <tcp_input+0x408>)
 8007ee8:	f008 ffc6 	bl	8010e78 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	7a1b      	ldrb	r3, [r3, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <tcp_input+0x33e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	7a1a      	ldrb	r2, [r3, #8]
 8007ef8:	4b43      	ldr	r3, [pc, #268]	; (8008008 <tcp_input+0x438>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f00:	3301      	adds	r3, #1
 8007f02:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d002      	beq.n	8007f0e <tcp_input+0x33e>
      prev = pcb;
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	61bb      	str	r3, [r7, #24]
      continue;
 8007f0c:	e04d      	b.n	8007faa <tcp_input+0x3da>
    }

    if (pcb->remote_port == tcphdr->src &&
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	8b1a      	ldrh	r2, [r3, #24]
 8007f12:	4b33      	ldr	r3, [pc, #204]	; (8007fe0 <tcp_input+0x410>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d143      	bne.n	8007fa6 <tcp_input+0x3d6>
        pcb->local_port == tcphdr->dest &&
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	8ada      	ldrh	r2, [r3, #22]
 8007f22:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <tcp_input+0x410>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	885b      	ldrh	r3, [r3, #2]
 8007f28:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d13b      	bne.n	8007fa6 <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	4b35      	ldr	r3, [pc, #212]	; (8008008 <tcp_input+0x438>)
 8007f34:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d135      	bne.n	8007fa6 <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b32      	ldr	r3, [pc, #200]	; (8008008 <tcp_input+0x438>)
 8007f40:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d12f      	bne.n	8007fa6 <tcp_input+0x3d6>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d106      	bne.n	8007f5e <tcp_input+0x38e>
 8007f50:	4b1f      	ldr	r3, [pc, #124]	; (8007fd0 <tcp_input+0x400>)
 8007f52:	f240 120d 	movw	r2, #269	; 0x10d
 8007f56:	492d      	ldr	r1, [pc, #180]	; (800800c <tcp_input+0x43c>)
 8007f58:	481f      	ldr	r0, [pc, #124]	; (8007fd8 <tcp_input+0x408>)
 8007f5a:	f008 ff8d 	bl	8010e78 <iprintf>
      if (prev != NULL) {
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <tcp_input+0x3ac>
        prev->next = pcb->next;
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007f6c:	4b22      	ldr	r3, [pc, #136]	; (8007ff8 <tcp_input+0x428>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007f74:	4a20      	ldr	r2, [pc, #128]	; (8007ff8 <tcp_input+0x428>)
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	e007      	b.n	8007f8c <tcp_input+0x3bc>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8007f7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <tcp_input+0x424>)
 8007f7e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8007f82:	3301      	adds	r3, #1
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <tcp_input+0x424>)
 8007f88:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d111      	bne.n	8007fba <tcp_input+0x3ea>
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <tcp_input+0x400>)
 8007f98:	f240 1215 	movw	r2, #277	; 0x115
 8007f9c:	491c      	ldr	r1, [pc, #112]	; (8008010 <tcp_input+0x440>)
 8007f9e:	480e      	ldr	r0, [pc, #56]	; (8007fd8 <tcp_input+0x408>)
 8007fa0:	f008 ff6a 	bl	8010e78 <iprintf>
      break;
 8007fa4:	e009      	b.n	8007fba <tcp_input+0x3ea>
    }
    prev = pcb;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f47f af7c 	bne.w	8007eb0 <tcp_input+0x2e0>
 8007fb8:	e000      	b.n	8007fbc <tcp_input+0x3ec>
      break;
 8007fba:	bf00      	nop
  }

  if (pcb == NULL) {
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f040 80c4 	bne.w	800814c <tcp_input+0x57c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fc4:	4b13      	ldr	r3, [pc, #76]	; (8008014 <tcp_input+0x444>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	e065      	b.n	8008098 <tcp_input+0x4c8>
 8007fcc:	20000154 	.word	0x20000154
 8007fd0:	08012fe4 	.word	0x08012fe4
 8007fd4:	08013068 	.word	0x08013068
 8007fd8:	08013030 	.word	0x08013030
 8007fdc:	08013074 	.word	0x08013074
 8007fe0:	2000014c 	.word	0x2000014c
 8007fe4:	2000015c 	.word	0x2000015c
 8007fe8:	20000160 	.word	0x20000160
 8007fec:	20000168 	.word	0x20000168
 8007ff0:	20000166 	.word	0x20000166
 8007ff4:	200075f0 	.word	0x200075f0
 8007ff8:	200076cc 	.word	0x200076cc
 8007ffc:	08013094 	.word	0x08013094
 8008000:	080130bc 	.word	0x080130bc
 8008004:	080130e8 	.word	0x080130e8
 8008008:	200040dc 	.word	0x200040dc
 800800c:	08013110 	.word	0x08013110
 8008010:	0801313c 	.word	0x0801313c
 8008014:	200076dc 	.word	0x200076dc
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	7d1b      	ldrb	r3, [r3, #20]
 800801c:	2b0a      	cmp	r3, #10
 800801e:	d006      	beq.n	800802e <tcp_input+0x45e>
 8008020:	4b91      	ldr	r3, [pc, #580]	; (8008268 <tcp_input+0x698>)
 8008022:	f240 121f 	movw	r2, #287	; 0x11f
 8008026:	4991      	ldr	r1, [pc, #580]	; (800826c <tcp_input+0x69c>)
 8008028:	4891      	ldr	r0, [pc, #580]	; (8008270 <tcp_input+0x6a0>)
 800802a:	f008 ff25 	bl	8010e78 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	7a1b      	ldrb	r3, [r3, #8]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <tcp_input+0x47a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	7a1a      	ldrb	r2, [r3, #8]
 800803a:	4b8e      	ldr	r3, [pc, #568]	; (8008274 <tcp_input+0x6a4>)
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008042:	3301      	adds	r3, #1
 8008044:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008046:	429a      	cmp	r2, r3
 8008048:	d122      	bne.n	8008090 <tcp_input+0x4c0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	8b1a      	ldrh	r2, [r3, #24]
 800804e:	4b8a      	ldr	r3, [pc, #552]	; (8008278 <tcp_input+0x6a8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	b29b      	uxth	r3, r3
 8008056:	429a      	cmp	r2, r3
 8008058:	d11b      	bne.n	8008092 <tcp_input+0x4c2>
          pcb->local_port == tcphdr->dest &&
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	8ada      	ldrh	r2, [r3, #22]
 800805e:	4b86      	ldr	r3, [pc, #536]	; (8008278 <tcp_input+0x6a8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008066:	429a      	cmp	r2, r3
 8008068:	d113      	bne.n	8008092 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	4b81      	ldr	r3, [pc, #516]	; (8008274 <tcp_input+0x6a4>)
 8008070:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008072:	429a      	cmp	r2, r3
 8008074:	d10d      	bne.n	8008092 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4b7e      	ldr	r3, [pc, #504]	; (8008274 <tcp_input+0x6a4>)
 800807c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800807e:	429a      	cmp	r2, r3
 8008080:	d107      	bne.n	8008092 <tcp_input+0x4c2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008082:	69f8      	ldr	r0, [r7, #28]
 8008084:	f000 fb78 	bl	8008778 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7fd ff37 	bl	8005efc <pbuf_free>
        return;
 800808e:	e20a      	b.n	80084a6 <tcp_input+0x8d6>
        continue;
 8008090:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	61fb      	str	r3, [r7, #28]
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1bc      	bne.n	8008018 <tcp_input+0x448>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080a2:	4b76      	ldr	r3, [pc, #472]	; (800827c <tcp_input+0x6ac>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	e02a      	b.n	8008100 <tcp_input+0x530>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	7a1b      	ldrb	r3, [r3, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00c      	beq.n	80080cc <tcp_input+0x4fc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	7a1a      	ldrb	r2, [r3, #8]
 80080b6:	4b6f      	ldr	r3, [pc, #444]	; (8008274 <tcp_input+0x6a4>)
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080be:	3301      	adds	r3, #1
 80080c0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d002      	beq.n	80080cc <tcp_input+0x4fc>
        prev = (struct tcp_pcb *)lpcb;
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	61bb      	str	r3, [r7, #24]
        continue;
 80080ca:	e016      	b.n	80080fa <tcp_input+0x52a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	8ada      	ldrh	r2, [r3, #22]
 80080d0:	4b69      	ldr	r3, [pc, #420]	; (8008278 <tcp_input+0x6a8>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	429a      	cmp	r2, r3
 80080da:	d10c      	bne.n	80080f6 <tcp_input+0x526>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	4b64      	ldr	r3, [pc, #400]	; (8008274 <tcp_input+0x6a4>)
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d00f      	beq.n	8008108 <tcp_input+0x538>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00d      	beq.n	800810a <tcp_input+0x53a>
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <tcp_input+0x53a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1d1      	bne.n	80080aa <tcp_input+0x4da>
 8008106:	e000      	b.n	800810a <tcp_input+0x53a>
            break;
 8008108:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01d      	beq.n	800814c <tcp_input+0x57c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00b      	beq.n	800812e <tcp_input+0x55e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800811e:	4b57      	ldr	r3, [pc, #348]	; (800827c <tcp_input+0x6ac>)
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008126:	4a55      	ldr	r2, [pc, #340]	; (800827c <tcp_input+0x6ac>)
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	e007      	b.n	800813e <tcp_input+0x56e>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800812e:	4b54      	ldr	r3, [pc, #336]	; (8008280 <tcp_input+0x6b0>)
 8008130:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8008134:	3301      	adds	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	4b51      	ldr	r3, [pc, #324]	; (8008280 <tcp_input+0x6b0>)
 800813a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800813e:	6978      	ldr	r0, [r7, #20]
 8008140:	f000 fa12 	bl	8008568 <tcp_listen_input>
      }
      pbuf_free(p);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7fd fed9 	bl	8005efc <pbuf_free>
      return;
 800814a:	e1ac      	b.n	80084a6 <tcp_input+0x8d6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8162 	beq.w	8008418 <tcp_input+0x848>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008154:	4b4b      	ldr	r3, [pc, #300]	; (8008284 <tcp_input+0x6b4>)
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	891a      	ldrh	r2, [r3, #8]
 800815e:	4b49      	ldr	r3, [pc, #292]	; (8008284 <tcp_input+0x6b4>)
 8008160:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008162:	4a48      	ldr	r2, [pc, #288]	; (8008284 <tcp_input+0x6b4>)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008168:	4b43      	ldr	r3, [pc, #268]	; (8008278 <tcp_input+0x6a8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a45      	ldr	r2, [pc, #276]	; (8008284 <tcp_input+0x6b4>)
 800816e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008170:	4b45      	ldr	r3, [pc, #276]	; (8008288 <tcp_input+0x6b8>)
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008176:	4b45      	ldr	r3, [pc, #276]	; (800828c <tcp_input+0x6bc>)
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800817c:	4b44      	ldr	r3, [pc, #272]	; (8008290 <tcp_input+0x6c0>)
 800817e:	2200      	movs	r2, #0
 8008180:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008182:	4b44      	ldr	r3, [pc, #272]	; (8008294 <tcp_input+0x6c4>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d006      	beq.n	800819c <tcp_input+0x5cc>
      p->flags |= PBUF_FLAG_PUSH;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	7b5b      	ldrb	r3, [r3, #13]
 8008192:	f043 0301 	orr.w	r3, r3, #1
 8008196:	b2da      	uxtb	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d01e      	beq.n	80081e2 <tcp_input+0x612>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80081a4:	69f8      	ldr	r0, [r7, #28]
 80081a6:	f7ff f8a3 	bl	80072f0 <tcp_process_refused_data>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f113 0f0d 	cmn.w	r3, #13
 80081b0:	d007      	beq.n	80081c2 <tcp_input+0x5f2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d013      	beq.n	80081e2 <tcp_input+0x612>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80081ba:	4b37      	ldr	r3, [pc, #220]	; (8008298 <tcp_input+0x6c8>)
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00f      	beq.n	80081e2 <tcp_input+0x612>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d102      	bne.n	80081d0 <tcp_input+0x600>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80081ca:	69f8      	ldr	r0, [r7, #28]
 80081cc:	f003 fa26 	bl	800b61c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 80081d0:	4b2b      	ldr	r3, [pc, #172]	; (8008280 <tcp_input+0x6b0>)
 80081d2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80081d6:	3301      	adds	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	4b29      	ldr	r3, [pc, #164]	; (8008280 <tcp_input+0x6b0>)
 80081dc:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80081e0:	e107      	b.n	80083f2 <tcp_input+0x822>
      }
    }
    tcp_input_pcb = pcb;
 80081e2:	4a2e      	ldr	r2, [pc, #184]	; (800829c <tcp_input+0x6cc>)
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80081e8:	69f8      	ldr	r0, [r7, #28]
 80081ea:	f000 fb3f 	bl	800886c <tcp_process>
 80081ee:	4603      	mov	r3, r0
 80081f0:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80081f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081f6:	f113 0f0d 	cmn.w	r3, #13
 80081fa:	f000 80ef 	beq.w	80083dc <tcp_input+0x80c>
      if (recv_flags & TF_RESET) {
 80081fe:	4b23      	ldr	r3, [pc, #140]	; (800828c <tcp_input+0x6bc>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	f003 0308 	and.w	r3, r3, #8
 8008206:	2b00      	cmp	r3, #0
 8008208:	d015      	beq.n	8008236 <tcp_input+0x666>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008210:	2b00      	cmp	r3, #0
 8008212:	d008      	beq.n	8008226 <tcp_input+0x656>
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821a:	69fa      	ldr	r2, [r7, #28]
 800821c:	6912      	ldr	r2, [r2, #16]
 800821e:	f06f 010d 	mvn.w	r1, #13
 8008222:	4610      	mov	r0, r2
 8008224:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008226:	69f9      	ldr	r1, [r7, #28]
 8008228:	481d      	ldr	r0, [pc, #116]	; (80082a0 <tcp_input+0x6d0>)
 800822a:	f7ff fb59 	bl	80078e0 <tcp_pcb_remove>
        tcp_free(pcb);
 800822e:	69f8      	ldr	r0, [r7, #28]
 8008230:	f7fe f91c 	bl	800646c <tcp_free>
 8008234:	e0dd      	b.n	80083f2 <tcp_input+0x822>
      } else {
        err = ERR_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800823a:	4b15      	ldr	r3, [pc, #84]	; (8008290 <tcp_input+0x6c0>)
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d03b      	beq.n	80082ba <tcp_input+0x6ea>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008242:	4b13      	ldr	r3, [pc, #76]	; (8008290 <tcp_input+0x6c0>)
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d028      	beq.n	80082a4 <tcp_input+0x6d4>
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008258:	69fa      	ldr	r2, [r7, #28]
 800825a:	6910      	ldr	r0, [r2, #16]
 800825c:	897a      	ldrh	r2, [r7, #10]
 800825e:	69f9      	ldr	r1, [r7, #28]
 8008260:	4798      	blx	r3
 8008262:	4603      	mov	r3, r0
 8008264:	74fb      	strb	r3, [r7, #19]
 8008266:	e01f      	b.n	80082a8 <tcp_input+0x6d8>
 8008268:	08012fe4 	.word	0x08012fe4
 800826c:	08013168 	.word	0x08013168
 8008270:	08013030 	.word	0x08013030
 8008274:	200040dc 	.word	0x200040dc
 8008278:	2000014c 	.word	0x2000014c
 800827c:	200076d4 	.word	0x200076d4
 8008280:	200075f0 	.word	0x200075f0
 8008284:	2000013c 	.word	0x2000013c
 8008288:	2000016c 	.word	0x2000016c
 800828c:	20000169 	.word	0x20000169
 8008290:	20000164 	.word	0x20000164
 8008294:	20000168 	.word	0x20000168
 8008298:	20000166 	.word	0x20000166
 800829c:	200076e0 	.word	0x200076e0
 80082a0:	200076cc 	.word	0x200076cc
 80082a4:	2300      	movs	r3, #0
 80082a6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80082a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082ac:	f113 0f0d 	cmn.w	r3, #13
 80082b0:	f000 8096 	beq.w	80083e0 <tcp_input+0x810>
              goto aborted;
            }
          }
          recv_acked = 0;
 80082b4:	4b7d      	ldr	r3, [pc, #500]	; (80084ac <tcp_input+0x8dc>)
 80082b6:	2200      	movs	r2, #0
 80082b8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80082ba:	69f8      	ldr	r0, [r7, #28]
 80082bc:	f000 f914 	bl	80084e8 <tcp_input_delayed_close>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f040 808e 	bne.w	80083e4 <tcp_input+0x814>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80082c8:	4b79      	ldr	r3, [pc, #484]	; (80084b0 <tcp_input+0x8e0>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d041      	beq.n	8008354 <tcp_input+0x784>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d006      	beq.n	80082e6 <tcp_input+0x716>
 80082d8:	4b76      	ldr	r3, [pc, #472]	; (80084b4 <tcp_input+0x8e4>)
 80082da:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80082de:	4976      	ldr	r1, [pc, #472]	; (80084b8 <tcp_input+0x8e8>)
 80082e0:	4876      	ldr	r0, [pc, #472]	; (80084bc <tcp_input+0x8ec>)
 80082e2:	f008 fdc9 	bl	8010e78 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	8b5b      	ldrh	r3, [r3, #26]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d008      	beq.n	8008304 <tcp_input+0x734>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80082f2:	4b6f      	ldr	r3, [pc, #444]	; (80084b0 <tcp_input+0x8e0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fd fe00 	bl	8005efc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80082fc:	69f8      	ldr	r0, [r7, #28]
 80082fe:	f7fe fb9d 	bl	8006a3c <tcp_abort>
            goto aborted;
 8008302:	e076      	b.n	80083f2 <tcp_input+0x822>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00c      	beq.n	8008328 <tcp_input+0x758>
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	6918      	ldr	r0, [r3, #16]
 8008318:	4b65      	ldr	r3, [pc, #404]	; (80084b0 <tcp_input+0x8e0>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	2300      	movs	r3, #0
 800831e:	69f9      	ldr	r1, [r7, #28]
 8008320:	47a0      	blx	r4
 8008322:	4603      	mov	r3, r0
 8008324:	74fb      	strb	r3, [r7, #19]
 8008326:	e008      	b.n	800833a <tcp_input+0x76a>
 8008328:	4b61      	ldr	r3, [pc, #388]	; (80084b0 <tcp_input+0x8e0>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	2300      	movs	r3, #0
 800832e:	69f9      	ldr	r1, [r7, #28]
 8008330:	2000      	movs	r0, #0
 8008332:	f7ff f8b3 	bl	800749c <tcp_recv_null>
 8008336:	4603      	mov	r3, r0
 8008338:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800833a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800833e:	f113 0f0d 	cmn.w	r3, #13
 8008342:	d051      	beq.n	80083e8 <tcp_input+0x818>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008344:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <tcp_input+0x784>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800834c:	4b58      	ldr	r3, [pc, #352]	; (80084b0 <tcp_input+0x8e0>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008354:	4b5a      	ldr	r3, [pc, #360]	; (80084c0 <tcp_input+0x8f0>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d030      	beq.n	80083c2 <tcp_input+0x7f2>
          if (pcb->refused_data != NULL) {
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <tcp_input+0x7ac>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800836c:	7b5a      	ldrb	r2, [r3, #13]
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008372:	f042 0220 	orr.w	r2, r2, #32
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	735a      	strb	r2, [r3, #13]
 800837a:	e022      	b.n	80083c2 <tcp_input+0x7f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008380:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008384:	d005      	beq.n	8008392 <tcp_input+0x7c2>
              pcb->rcv_wnd++;
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838a:	3301      	adds	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <tcp_input+0x7e4>
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	6918      	ldr	r0, [r3, #16]
 80083a6:	2300      	movs	r3, #0
 80083a8:	2200      	movs	r2, #0
 80083aa:	69f9      	ldr	r1, [r7, #28]
 80083ac:	47a0      	blx	r4
 80083ae:	4603      	mov	r3, r0
 80083b0:	74fb      	strb	r3, [r7, #19]
 80083b2:	e001      	b.n	80083b8 <tcp_input+0x7e8>
 80083b4:	2300      	movs	r3, #0
 80083b6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80083b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083bc:	f113 0f0d 	cmn.w	r3, #13
 80083c0:	d014      	beq.n	80083ec <tcp_input+0x81c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80083c2:	4b40      	ldr	r3, [pc, #256]	; (80084c4 <tcp_input+0x8f4>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80083c8:	69f8      	ldr	r0, [r7, #28]
 80083ca:	f000 f88d 	bl	80084e8 <tcp_input_delayed_close>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10d      	bne.n	80083f0 <tcp_input+0x820>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80083d4:	69f8      	ldr	r0, [r7, #28]
 80083d6:	f002 fae5 	bl	800a9a4 <tcp_output>
 80083da:	e00a      	b.n	80083f2 <tcp_input+0x822>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80083dc:	bf00      	nop
 80083de:	e008      	b.n	80083f2 <tcp_input+0x822>
              goto aborted;
 80083e0:	bf00      	nop
 80083e2:	e006      	b.n	80083f2 <tcp_input+0x822>
          goto aborted;
 80083e4:	bf00      	nop
 80083e6:	e004      	b.n	80083f2 <tcp_input+0x822>
            goto aborted;
 80083e8:	bf00      	nop
 80083ea:	e002      	b.n	80083f2 <tcp_input+0x822>
              goto aborted;
 80083ec:	bf00      	nop
 80083ee:	e000      	b.n	80083f2 <tcp_input+0x822>
          goto aborted;
 80083f0:	bf00      	nop
    tcp_input_pcb = NULL;
 80083f2:	4b34      	ldr	r3, [pc, #208]	; (80084c4 <tcp_input+0x8f4>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80083f8:	4b2d      	ldr	r3, [pc, #180]	; (80084b0 <tcp_input+0x8e0>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80083fe:	4b32      	ldr	r3, [pc, #200]	; (80084c8 <tcp_input+0x8f8>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d04e      	beq.n	80084a4 <tcp_input+0x8d4>
      pbuf_free(inseg.p);
 8008406:	4b30      	ldr	r3, [pc, #192]	; (80084c8 <tcp_input+0x8f8>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	4618      	mov	r0, r3
 800840c:	f7fd fd76 	bl	8005efc <pbuf_free>
      inseg.p = NULL;
 8008410:	4b2d      	ldr	r3, [pc, #180]	; (80084c8 <tcp_input+0x8f8>)
 8008412:	2200      	movs	r2, #0
 8008414:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008416:	e045      	b.n	80084a4 <tcp_input+0x8d4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008418:	4b2c      	ldr	r3, [pc, #176]	; (80084cc <tcp_input+0x8fc>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	899b      	ldrh	r3, [r3, #12]
 800841e:	b29b      	uxth	r3, r3
 8008420:	4618      	mov	r0, r3
 8008422:	f7fc f90b 	bl	800463c <lwip_htons>
 8008426:	4603      	mov	r3, r0
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b00      	cmp	r3, #0
 8008430:	d128      	bne.n	8008484 <tcp_input+0x8b4>
      TCP_STATS_INC(tcp.proterr);
 8008432:	4b27      	ldr	r3, [pc, #156]	; (80084d0 <tcp_input+0x900>)
 8008434:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8008438:	3301      	adds	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	4b24      	ldr	r3, [pc, #144]	; (80084d0 <tcp_input+0x900>)
 800843e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 8008442:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <tcp_input+0x900>)
 8008444:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8008448:	3301      	adds	r3, #1
 800844a:	b29a      	uxth	r2, r3
 800844c:	4b20      	ldr	r3, [pc, #128]	; (80084d0 <tcp_input+0x900>)
 800844e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008452:	4b20      	ldr	r3, [pc, #128]	; (80084d4 <tcp_input+0x904>)
 8008454:	6819      	ldr	r1, [r3, #0]
 8008456:	4b20      	ldr	r3, [pc, #128]	; (80084d8 <tcp_input+0x908>)
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	4b1f      	ldr	r3, [pc, #124]	; (80084dc <tcp_input+0x90c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008462:	4b1a      	ldr	r3, [pc, #104]	; (80084cc <tcp_input+0x8fc>)
 8008464:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008466:	885b      	ldrh	r3, [r3, #2]
 8008468:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800846a:	4a18      	ldr	r2, [pc, #96]	; (80084cc <tcp_input+0x8fc>)
 800846c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800846e:	8812      	ldrh	r2, [r2, #0]
 8008470:	b292      	uxth	r2, r2
 8008472:	9202      	str	r2, [sp, #8]
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <tcp_input+0x910>)
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	4b1a      	ldr	r3, [pc, #104]	; (80084e4 <tcp_input+0x914>)
 800847c:	4602      	mov	r2, r0
 800847e:	2000      	movs	r0, #0
 8008480:	f003 f87a 	bl	800b578 <tcp_rst>
    pbuf_free(p);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7fd fd39 	bl	8005efc <pbuf_free>
  return;
 800848a:	e00b      	b.n	80084a4 <tcp_input+0x8d4>
dropped:
  TCP_STATS_INC(tcp.drop);
 800848c:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <tcp_input+0x900>)
 800848e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8008492:	3301      	adds	r3, #1
 8008494:	b29a      	uxth	r2, r3
 8008496:	4b0e      	ldr	r3, [pc, #56]	; (80084d0 <tcp_input+0x900>)
 8008498:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fd fd2d 	bl	8005efc <pbuf_free>
 80084a2:	e000      	b.n	80084a6 <tcp_input+0x8d6>
  return;
 80084a4:	bf00      	nop
}
 80084a6:	3724      	adds	r7, #36	; 0x24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd90      	pop	{r4, r7, pc}
 80084ac:	20000164 	.word	0x20000164
 80084b0:	2000016c 	.word	0x2000016c
 80084b4:	08012fe4 	.word	0x08012fe4
 80084b8:	08013198 	.word	0x08013198
 80084bc:	08013030 	.word	0x08013030
 80084c0:	20000169 	.word	0x20000169
 80084c4:	200076e0 	.word	0x200076e0
 80084c8:	2000013c 	.word	0x2000013c
 80084cc:	2000014c 	.word	0x2000014c
 80084d0:	200075f0 	.word	0x200075f0
 80084d4:	20000160 	.word	0x20000160
 80084d8:	20000166 	.word	0x20000166
 80084dc:	2000015c 	.word	0x2000015c
 80084e0:	200040ec 	.word	0x200040ec
 80084e4:	200040f0 	.word	0x200040f0

080084e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d106      	bne.n	8008504 <tcp_input_delayed_close+0x1c>
 80084f6:	4b17      	ldr	r3, [pc, #92]	; (8008554 <tcp_input_delayed_close+0x6c>)
 80084f8:	f240 225a 	movw	r2, #602	; 0x25a
 80084fc:	4916      	ldr	r1, [pc, #88]	; (8008558 <tcp_input_delayed_close+0x70>)
 80084fe:	4817      	ldr	r0, [pc, #92]	; (800855c <tcp_input_delayed_close+0x74>)
 8008500:	f008 fcba 	bl	8010e78 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008504:	4b16      	ldr	r3, [pc, #88]	; (8008560 <tcp_input_delayed_close+0x78>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01c      	beq.n	800854a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	8b5b      	ldrh	r3, [r3, #26]
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10d      	bne.n	8008538 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008522:	2b00      	cmp	r3, #0
 8008524:	d008      	beq.n	8008538 <tcp_input_delayed_close+0x50>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6912      	ldr	r2, [r2, #16]
 8008530:	f06f 010e 	mvn.w	r1, #14
 8008534:	4610      	mov	r0, r2
 8008536:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	480a      	ldr	r0, [pc, #40]	; (8008564 <tcp_input_delayed_close+0x7c>)
 800853c:	f7ff f9d0 	bl	80078e0 <tcp_pcb_remove>
    tcp_free(pcb);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7fd ff93 	bl	800646c <tcp_free>
    return 1;
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	08012fe4 	.word	0x08012fe4
 8008558:	080131b4 	.word	0x080131b4
 800855c:	08013030 	.word	0x08013030
 8008560:	20000169 	.word	0x20000169
 8008564:	200076cc 	.word	0x200076cc

08008568 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008568:	b590      	push	{r4, r7, lr}
 800856a:	b08b      	sub	sp, #44	; 0x2c
 800856c:	af04      	add	r7, sp, #16
 800856e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008570:	4b73      	ldr	r3, [pc, #460]	; (8008740 <tcp_listen_input+0x1d8>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	f040 80da 	bne.w	8008732 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d106      	bne.n	8008592 <tcp_listen_input+0x2a>
 8008584:	4b6f      	ldr	r3, [pc, #444]	; (8008744 <tcp_listen_input+0x1dc>)
 8008586:	f240 2281 	movw	r2, #641	; 0x281
 800858a:	496f      	ldr	r1, [pc, #444]	; (8008748 <tcp_listen_input+0x1e0>)
 800858c:	486f      	ldr	r0, [pc, #444]	; (800874c <tcp_listen_input+0x1e4>)
 800858e:	f008 fc73 	bl	8010e78 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008592:	4b6b      	ldr	r3, [pc, #428]	; (8008740 <tcp_listen_input+0x1d8>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b00      	cmp	r3, #0
 800859c:	d019      	beq.n	80085d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800859e:	4b6c      	ldr	r3, [pc, #432]	; (8008750 <tcp_listen_input+0x1e8>)
 80085a0:	6819      	ldr	r1, [r3, #0]
 80085a2:	4b6c      	ldr	r3, [pc, #432]	; (8008754 <tcp_listen_input+0x1ec>)
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	4b6b      	ldr	r3, [pc, #428]	; (8008758 <tcp_listen_input+0x1f0>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085ae:	4b6b      	ldr	r3, [pc, #428]	; (800875c <tcp_listen_input+0x1f4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085b2:	885b      	ldrh	r3, [r3, #2]
 80085b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085b6:	4a69      	ldr	r2, [pc, #420]	; (800875c <tcp_listen_input+0x1f4>)
 80085b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085ba:	8812      	ldrh	r2, [r2, #0]
 80085bc:	b292      	uxth	r2, r2
 80085be:	9202      	str	r2, [sp, #8]
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	4b67      	ldr	r3, [pc, #412]	; (8008760 <tcp_listen_input+0x1f8>)
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	4b67      	ldr	r3, [pc, #412]	; (8008764 <tcp_listen_input+0x1fc>)
 80085c8:	4602      	mov	r2, r0
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f002 ffd4 	bl	800b578 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80085d0:	e0b1      	b.n	8008736 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 80085d2:	4b5b      	ldr	r3, [pc, #364]	; (8008740 <tcp_listen_input+0x1d8>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80ab 	beq.w	8008736 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	7d5b      	ldrb	r3, [r3, #21]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff f87d 	bl	80076e4 <tcp_alloc>
 80085ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d119      	bne.n	8008626 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 80085f2:	4b5d      	ldr	r3, [pc, #372]	; (8008768 <tcp_listen_input+0x200>)
 80085f4:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80085f8:	3301      	adds	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	4b5a      	ldr	r3, [pc, #360]	; (8008768 <tcp_listen_input+0x200>)
 80085fe:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <tcp_listen_input+0xb8>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	6910      	ldr	r0, [r2, #16]
 8008612:	f04f 32ff 	mov.w	r2, #4294967295
 8008616:	2100      	movs	r1, #0
 8008618:	4798      	blx	r3
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]
      return;
 800861e:	e08b      	b.n	8008738 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008620:	23f0      	movs	r3, #240	; 0xf0
 8008622:	73bb      	strb	r3, [r7, #14]
      return;
 8008624:	e088      	b.n	8008738 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008626:	4b51      	ldr	r3, [pc, #324]	; (800876c <tcp_listen_input+0x204>)
 8008628:	695a      	ldr	r2, [r3, #20]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800862e:	4b4f      	ldr	r3, [pc, #316]	; (800876c <tcp_listen_input+0x204>)
 8008630:	691a      	ldr	r2, [r3, #16]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8ada      	ldrh	r2, [r3, #22]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800863e:	4b47      	ldr	r3, [pc, #284]	; (800875c <tcp_listen_input+0x1f4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29a      	uxth	r2, r3
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2203      	movs	r2, #3
 800864e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008650:	4b41      	ldr	r3, [pc, #260]	; (8008758 <tcp_listen_input+0x1f0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008662:	6978      	ldr	r0, [r7, #20]
 8008664:	f7ff f9d0 	bl	8007a08 <tcp_next_iss>
 8008668:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008682:	4b35      	ldr	r3, [pc, #212]	; (8008758 <tcp_listen_input+0x1f0>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	1e5a      	subs	r2, r3, #1
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691a      	ldr	r2, [r3, #16]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7a5b      	ldrb	r3, [r3, #9]
 800869e:	f003 030c 	and.w	r3, r3, #12
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	7a1a      	ldrb	r2, [r3, #8]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80086b0:	4b2f      	ldr	r3, [pc, #188]	; (8008770 <tcp_listen_input+0x208>)
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	60da      	str	r2, [r3, #12]
 80086b8:	4a2d      	ldr	r2, [pc, #180]	; (8008770 <tcp_listen_input+0x208>)
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	6013      	str	r3, [r2, #0]
 80086be:	f003 f91d 	bl	800b8fc <tcp_timer_needed>
 80086c2:	4b2c      	ldr	r3, [pc, #176]	; (8008774 <tcp_listen_input+0x20c>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80086c8:	6978      	ldr	r0, [r7, #20]
 80086ca:	f001 fd8f 	bl	800a1ec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80086ce:	4b23      	ldr	r3, [pc, #140]	; (800875c <tcp_listen_input+0x1f4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	89db      	ldrh	r3, [r3, #14]
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	3304      	adds	r3, #4
 80086f0:	4618      	mov	r0, r3
 80086f2:	f006 ff7d 	bl	800f5f0 <ip4_route>
 80086f6:	4601      	mov	r1, r0
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3304      	adds	r3, #4
 80086fc:	461a      	mov	r2, r3
 80086fe:	4620      	mov	r0, r4
 8008700:	f7ff f9a8 	bl	8007a54 <tcp_eff_send_mss_netif>
 8008704:	4603      	mov	r3, r0
 8008706:	461a      	mov	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800870c:	2112      	movs	r1, #18
 800870e:	6978      	ldr	r0, [r7, #20]
 8008710:	f002 f858 	bl	800a7c4 <tcp_enqueue_flags>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d004      	beq.n	800872a <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8008720:	2100      	movs	r1, #0
 8008722:	6978      	ldr	r0, [r7, #20]
 8008724:	f7fe f8cc 	bl	80068c0 <tcp_abandon>
      return;
 8008728:	e006      	b.n	8008738 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 800872a:	6978      	ldr	r0, [r7, #20]
 800872c:	f002 f93a 	bl	800a9a4 <tcp_output>
  return;
 8008730:	e001      	b.n	8008736 <tcp_listen_input+0x1ce>
    return;
 8008732:	bf00      	nop
 8008734:	e000      	b.n	8008738 <tcp_listen_input+0x1d0>
  return;
 8008736:	bf00      	nop
}
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	bd90      	pop	{r4, r7, pc}
 800873e:	bf00      	nop
 8008740:	20000168 	.word	0x20000168
 8008744:	08012fe4 	.word	0x08012fe4
 8008748:	080131dc 	.word	0x080131dc
 800874c:	08013030 	.word	0x08013030
 8008750:	20000160 	.word	0x20000160
 8008754:	20000166 	.word	0x20000166
 8008758:	2000015c 	.word	0x2000015c
 800875c:	2000014c 	.word	0x2000014c
 8008760:	200040ec 	.word	0x200040ec
 8008764:	200040f0 	.word	0x200040f0
 8008768:	200075f0 	.word	0x200075f0
 800876c:	200040dc 	.word	0x200040dc
 8008770:	200076cc 	.word	0x200076cc
 8008774:	200076c8 	.word	0x200076c8

08008778 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af04      	add	r7, sp, #16
 800877e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008780:	4b2f      	ldr	r3, [pc, #188]	; (8008840 <tcp_timewait_input+0xc8>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d153      	bne.n	8008834 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d106      	bne.n	80087a0 <tcp_timewait_input+0x28>
 8008792:	4b2c      	ldr	r3, [pc, #176]	; (8008844 <tcp_timewait_input+0xcc>)
 8008794:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008798:	492b      	ldr	r1, [pc, #172]	; (8008848 <tcp_timewait_input+0xd0>)
 800879a:	482c      	ldr	r0, [pc, #176]	; (800884c <tcp_timewait_input+0xd4>)
 800879c:	f008 fb6c 	bl	8010e78 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80087a0:	4b27      	ldr	r3, [pc, #156]	; (8008840 <tcp_timewait_input+0xc8>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d02a      	beq.n	8008802 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80087ac:	4b28      	ldr	r3, [pc, #160]	; (8008850 <tcp_timewait_input+0xd8>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	db2d      	blt.n	8008816 <tcp_timewait_input+0x9e>
 80087ba:	4b25      	ldr	r3, [pc, #148]	; (8008850 <tcp_timewait_input+0xd8>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087c6:	440b      	add	r3, r1
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	dc23      	bgt.n	8008816 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087ce:	4b21      	ldr	r3, [pc, #132]	; (8008854 <tcp_timewait_input+0xdc>)
 80087d0:	6819      	ldr	r1, [r3, #0]
 80087d2:	4b21      	ldr	r3, [pc, #132]	; (8008858 <tcp_timewait_input+0xe0>)
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	4b1d      	ldr	r3, [pc, #116]	; (8008850 <tcp_timewait_input+0xd8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087de:	4b1f      	ldr	r3, [pc, #124]	; (800885c <tcp_timewait_input+0xe4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087e2:	885b      	ldrh	r3, [r3, #2]
 80087e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087e6:	4a1d      	ldr	r2, [pc, #116]	; (800885c <tcp_timewait_input+0xe4>)
 80087e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087ea:	8812      	ldrh	r2, [r2, #0]
 80087ec:	b292      	uxth	r2, r2
 80087ee:	9202      	str	r2, [sp, #8]
 80087f0:	9301      	str	r3, [sp, #4]
 80087f2:	4b1b      	ldr	r3, [pc, #108]	; (8008860 <tcp_timewait_input+0xe8>)
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <tcp_timewait_input+0xec>)
 80087f8:	4602      	mov	r2, r0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f002 febc 	bl	800b578 <tcp_rst>
      return;
 8008800:	e01b      	b.n	800883a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008802:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <tcp_timewait_input+0xc8>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800880e:	4b16      	ldr	r3, [pc, #88]	; (8008868 <tcp_timewait_input+0xf0>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <tcp_timewait_input+0xe0>)
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00c      	beq.n	8008838 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	8b5b      	ldrh	r3, [r3, #26]
 8008822:	f043 0302 	orr.w	r3, r3, #2
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f002 f8b9 	bl	800a9a4 <tcp_output>
  }
  return;
 8008832:	e001      	b.n	8008838 <tcp_timewait_input+0xc0>
    return;
 8008834:	bf00      	nop
 8008836:	e000      	b.n	800883a <tcp_timewait_input+0xc2>
  return;
 8008838:	bf00      	nop
}
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000168 	.word	0x20000168
 8008844:	08012fe4 	.word	0x08012fe4
 8008848:	080131fc 	.word	0x080131fc
 800884c:	08013030 	.word	0x08013030
 8008850:	2000015c 	.word	0x2000015c
 8008854:	20000160 	.word	0x20000160
 8008858:	20000166 	.word	0x20000166
 800885c:	2000014c 	.word	0x2000014c
 8008860:	200040ec 	.word	0x200040ec
 8008864:	200040f0 	.word	0x200040f0
 8008868:	200076d0 	.word	0x200076d0

0800886c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b08d      	sub	sp, #52	; 0x34
 8008870:	af04      	add	r7, sp, #16
 8008872:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <tcp_process+0x24>
 8008882:	4ba5      	ldr	r3, [pc, #660]	; (8008b18 <tcp_process+0x2ac>)
 8008884:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008888:	49a4      	ldr	r1, [pc, #656]	; (8008b1c <tcp_process+0x2b0>)
 800888a:	48a5      	ldr	r0, [pc, #660]	; (8008b20 <tcp_process+0x2b4>)
 800888c:	f008 faf4 	bl	8010e78 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008890:	4ba4      	ldr	r3, [pc, #656]	; (8008b24 <tcp_process+0x2b8>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b00      	cmp	r3, #0
 800889a:	d04e      	beq.n	800893a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7d1b      	ldrb	r3, [r3, #20]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d108      	bne.n	80088b6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088a8:	4b9f      	ldr	r3, [pc, #636]	; (8008b28 <tcp_process+0x2bc>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d123      	bne.n	80088f8 <tcp_process+0x8c>
        acceptable = 1;
 80088b0:	2301      	movs	r3, #1
 80088b2:	76fb      	strb	r3, [r7, #27]
 80088b4:	e020      	b.n	80088f8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088ba:	4b9c      	ldr	r3, [pc, #624]	; (8008b2c <tcp_process+0x2c0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d102      	bne.n	80088c8 <tcp_process+0x5c>
        acceptable = 1;
 80088c2:	2301      	movs	r3, #1
 80088c4:	76fb      	strb	r3, [r7, #27]
 80088c6:	e017      	b.n	80088f8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80088c8:	4b98      	ldr	r3, [pc, #608]	; (8008b2c <tcp_process+0x2c0>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	db10      	blt.n	80088f8 <tcp_process+0x8c>
 80088d6:	4b95      	ldr	r3, [pc, #596]	; (8008b2c <tcp_process+0x2c0>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80088e2:	440b      	add	r3, r1
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dc06      	bgt.n	80088f8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	8b5b      	ldrh	r3, [r3, #26]
 80088ee:	f043 0302 	orr.w	r3, r3, #2
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80088f8:	7efb      	ldrb	r3, [r7, #27]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d01b      	beq.n	8008936 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7d1b      	ldrb	r3, [r3, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d106      	bne.n	8008914 <tcp_process+0xa8>
 8008906:	4b84      	ldr	r3, [pc, #528]	; (8008b18 <tcp_process+0x2ac>)
 8008908:	f44f 724e 	mov.w	r2, #824	; 0x338
 800890c:	4988      	ldr	r1, [pc, #544]	; (8008b30 <tcp_process+0x2c4>)
 800890e:	4884      	ldr	r0, [pc, #528]	; (8008b20 <tcp_process+0x2b4>)
 8008910:	f008 fab2 	bl	8010e78 <iprintf>
      recv_flags |= TF_RESET;
 8008914:	4b87      	ldr	r3, [pc, #540]	; (8008b34 <tcp_process+0x2c8>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f043 0308 	orr.w	r3, r3, #8
 800891c:	b2da      	uxtb	r2, r3
 800891e:	4b85      	ldr	r3, [pc, #532]	; (8008b34 <tcp_process+0x2c8>)
 8008920:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	8b5b      	ldrh	r3, [r3, #26]
 8008926:	f023 0301 	bic.w	r3, r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008930:	f06f 030d 	mvn.w	r3, #13
 8008934:	e37a      	b.n	800902c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	e378      	b.n	800902c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800893a:	4b7a      	ldr	r3, [pc, #488]	; (8008b24 <tcp_process+0x2b8>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d010      	beq.n	8008968 <tcp_process+0xfc>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7d1b      	ldrb	r3, [r3, #20]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d00c      	beq.n	8008968 <tcp_process+0xfc>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7d1b      	ldrb	r3, [r3, #20]
 8008952:	2b03      	cmp	r3, #3
 8008954:	d008      	beq.n	8008968 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8b5b      	ldrh	r3, [r3, #26]
 800895a:	f043 0302 	orr.w	r3, r3, #2
 800895e:	b29a      	uxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	e361      	b.n	800902c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	8b5b      	ldrh	r3, [r3, #26]
 800896c:	f003 0310 	and.w	r3, r3, #16
 8008970:	2b00      	cmp	r3, #0
 8008972:	d103      	bne.n	800897c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008974:	4b70      	ldr	r3, [pc, #448]	; (8008b38 <tcp_process+0x2cc>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 fc2d 	bl	800a1ec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	7d1b      	ldrb	r3, [r3, #20]
 8008996:	3b02      	subs	r3, #2
 8008998:	2b07      	cmp	r3, #7
 800899a:	f200 8337 	bhi.w	800900c <tcp_process+0x7a0>
 800899e:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <tcp_process+0x138>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	080089c5 	.word	0x080089c5
 80089a8:	08008bf5 	.word	0x08008bf5
 80089ac:	08008d6d 	.word	0x08008d6d
 80089b0:	08008d97 	.word	0x08008d97
 80089b4:	08008ebb 	.word	0x08008ebb
 80089b8:	08008d6d 	.word	0x08008d6d
 80089bc:	08008f47 	.word	0x08008f47
 80089c0:	08008fd7 	.word	0x08008fd7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80089c4:	4b57      	ldr	r3, [pc, #348]	; (8008b24 <tcp_process+0x2b8>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 80e4 	beq.w	8008b9a <tcp_process+0x32e>
 80089d2:	4b54      	ldr	r3, [pc, #336]	; (8008b24 <tcp_process+0x2b8>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 80dd 	beq.w	8008b9a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	4b50      	ldr	r3, [pc, #320]	; (8008b28 <tcp_process+0x2bc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	f040 80d5 	bne.w	8008b9a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80089f0:	4b4e      	ldr	r3, [pc, #312]	; (8008b2c <tcp_process+0x2c0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008a02:	4b49      	ldr	r3, [pc, #292]	; (8008b28 <tcp_process+0x2bc>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008a0a:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <tcp_process+0x2d0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	89db      	ldrh	r3, [r3, #14]
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008a24:	4b41      	ldr	r3, [pc, #260]	; (8008b2c <tcp_process+0x2c0>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	1e5a      	subs	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2204      	movs	r2, #4
 8008a32:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f006 fdd7 	bl	800f5f0 <ip4_route>
 8008a42:	4601      	mov	r1, r0
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3304      	adds	r3, #4
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7ff f802 	bl	8007a54 <tcp_eff_send_mss_netif>
 8008a50:	4603      	mov	r3, r0
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a5c:	009a      	lsls	r2, r3, #2
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	f241 111c 	movw	r1, #4380	; 0x111c
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	bf38      	it	cc
 8008a6c:	460b      	movcc	r3, r1
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d204      	bcs.n	8008a7c <tcp_process+0x210>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	e00d      	b.n	8008a98 <tcp_process+0x22c>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	f241 121c 	movw	r2, #4380	; 0x111c
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d904      	bls.n	8008a94 <tcp_process+0x228>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a8e:	005b      	lsls	r3, r3, #1
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	e001      	b.n	8008a98 <tcp_process+0x22c>
 8008a94:	f241 131c 	movw	r3, #4380	; 0x111c
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <tcp_process+0x24a>
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <tcp_process+0x2ac>)
 8008aaa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008aae:	4924      	ldr	r1, [pc, #144]	; (8008b40 <tcp_process+0x2d4>)
 8008ab0:	481b      	ldr	r0, [pc, #108]	; (8008b20 <tcp_process+0x2b4>)
 8008ab2:	f008 f9e1 	bl	8010e78 <iprintf>
        --pcb->snd_queuelen;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d111      	bne.n	8008af6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <tcp_process+0x280>
 8008ade:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <tcp_process+0x2ac>)
 8008ae0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008ae4:	4917      	ldr	r1, [pc, #92]	; (8008b44 <tcp_process+0x2d8>)
 8008ae6:	480e      	ldr	r0, [pc, #56]	; (8008b20 <tcp_process+0x2b4>)
 8008ae8:	f008 f9c6 	bl	8010e78 <iprintf>
          pcb->unsent = rseg->next;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	66da      	str	r2, [r3, #108]	; 0x6c
 8008af4:	e003      	b.n	8008afe <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008afe:	69f8      	ldr	r0, [r7, #28]
 8008b00:	f7fe fc87 	bl	8007412 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d11d      	bne.n	8008b48 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b12:	861a      	strh	r2, [r3, #48]	; 0x30
 8008b14:	e01f      	b.n	8008b56 <tcp_process+0x2ea>
 8008b16:	bf00      	nop
 8008b18:	08012fe4 	.word	0x08012fe4
 8008b1c:	0801321c 	.word	0x0801321c
 8008b20:	08013030 	.word	0x08013030
 8008b24:	20000168 	.word	0x20000168
 8008b28:	20000160 	.word	0x20000160
 8008b2c:	2000015c 	.word	0x2000015c
 8008b30:	08013238 	.word	0x08013238
 8008b34:	20000169 	.word	0x20000169
 8008b38:	200076d0 	.word	0x200076d0
 8008b3c:	2000014c 	.word	0x2000014c
 8008b40:	08013258 	.word	0x08013258
 8008b44:	08013270 	.word	0x08013270
        } else {
          pcb->rtime = 0;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00a      	beq.n	8008b76 <tcp_process+0x30a>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6910      	ldr	r0, [r2, #16]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	4798      	blx	r3
 8008b70:	4603      	mov	r3, r0
 8008b72:	76bb      	strb	r3, [r7, #26]
 8008b74:	e001      	b.n	8008b7a <tcp_process+0x30e>
 8008b76:	2300      	movs	r3, #0
 8008b78:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008b7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008b7e:	f113 0f0d 	cmn.w	r3, #13
 8008b82:	d102      	bne.n	8008b8a <tcp_process+0x31e>
          return ERR_ABRT;
 8008b84:	f06f 030c 	mvn.w	r3, #12
 8008b88:	e250      	b.n	800902c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	8b5b      	ldrh	r3, [r3, #26]
 8008b8e:	f043 0302 	orr.w	r3, r3, #2
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008b98:	e23a      	b.n	8009010 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008b9a:	4b9d      	ldr	r3, [pc, #628]	; (8008e10 <tcp_process+0x5a4>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	f003 0310 	and.w	r3, r3, #16
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 8234 	beq.w	8009010 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ba8:	4b9a      	ldr	r3, [pc, #616]	; (8008e14 <tcp_process+0x5a8>)
 8008baa:	6819      	ldr	r1, [r3, #0]
 8008bac:	4b9a      	ldr	r3, [pc, #616]	; (8008e18 <tcp_process+0x5ac>)
 8008bae:	881b      	ldrh	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4b9a      	ldr	r3, [pc, #616]	; (8008e1c <tcp_process+0x5b0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bb8:	4b99      	ldr	r3, [pc, #612]	; (8008e20 <tcp_process+0x5b4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bbc:	885b      	ldrh	r3, [r3, #2]
 8008bbe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bc0:	4a97      	ldr	r2, [pc, #604]	; (8008e20 <tcp_process+0x5b4>)
 8008bc2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bc4:	8812      	ldrh	r2, [r2, #0]
 8008bc6:	b292      	uxth	r2, r2
 8008bc8:	9202      	str	r2, [sp, #8]
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	4b95      	ldr	r3, [pc, #596]	; (8008e24 <tcp_process+0x5b8>)
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	4b95      	ldr	r3, [pc, #596]	; (8008e28 <tcp_process+0x5bc>)
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f002 fccf 	bl	800b578 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008be0:	2b05      	cmp	r3, #5
 8008be2:	f200 8215 	bhi.w	8009010 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f002 fa7f 	bl	800b0f0 <tcp_rexmit_rto>
      break;
 8008bf2:	e20d      	b.n	8009010 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008bf4:	4b86      	ldr	r3, [pc, #536]	; (8008e10 <tcp_process+0x5a4>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80a1 	beq.w	8008d44 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008c02:	4b84      	ldr	r3, [pc, #528]	; (8008e14 <tcp_process+0x5a8>)
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	db7e      	blt.n	8008d10 <tcp_process+0x4a4>
 8008c12:	4b80      	ldr	r3, [pc, #512]	; (8008e14 <tcp_process+0x5a8>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	dc77      	bgt.n	8008d10 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2204      	movs	r2, #4
 8008c24:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008c2e:	23fa      	movs	r3, #250	; 0xfa
 8008c30:	76bb      	strb	r3, [r7, #26]
 8008c32:	e01d      	b.n	8008c70 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d106      	bne.n	8008c4c <tcp_process+0x3e0>
 8008c3e:	4b7b      	ldr	r3, [pc, #492]	; (8008e2c <tcp_process+0x5c0>)
 8008c40:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008c44:	497a      	ldr	r1, [pc, #488]	; (8008e30 <tcp_process+0x5c4>)
 8008c46:	487b      	ldr	r0, [pc, #492]	; (8008e34 <tcp_process+0x5c8>)
 8008c48:	f008 f916 	bl	8010e78 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <tcp_process+0x400>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6910      	ldr	r0, [r2, #16]
 8008c60:	2200      	movs	r2, #0
 8008c62:	6879      	ldr	r1, [r7, #4]
 8008c64:	4798      	blx	r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	76bb      	strb	r3, [r7, #26]
 8008c6a:	e001      	b.n	8008c70 <tcp_process+0x404>
 8008c6c:	23f0      	movs	r3, #240	; 0xf0
 8008c6e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008c70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008c78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008c7c:	f113 0f0d 	cmn.w	r3, #13
 8008c80:	d002      	beq.n	8008c88 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7fd feda 	bl	8006a3c <tcp_abort>
            }
            return ERR_ABRT;
 8008c88:	f06f 030c 	mvn.w	r3, #12
 8008c8c:	e1ce      	b.n	800902c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fae0 	bl	8009254 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008c94:	4b68      	ldr	r3, [pc, #416]	; (8008e38 <tcp_process+0x5cc>)
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <tcp_process+0x43c>
            recv_acked--;
 8008c9c:	4b66      	ldr	r3, [pc, #408]	; (8008e38 <tcp_process+0x5cc>)
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	4b64      	ldr	r3, [pc, #400]	; (8008e38 <tcp_process+0x5cc>)
 8008ca6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cac:	009a      	lsls	r2, r3, #2
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	f241 111c 	movw	r1, #4380	; 0x111c
 8008cb8:	428b      	cmp	r3, r1
 8008cba:	bf38      	it	cc
 8008cbc:	460b      	movcc	r3, r1
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d204      	bcs.n	8008ccc <tcp_process+0x460>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	e00d      	b.n	8008ce8 <tcp_process+0x47c>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	f241 121c 	movw	r2, #4380	; 0x111c
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d904      	bls.n	8008ce4 <tcp_process+0x478>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	e001      	b.n	8008ce8 <tcp_process+0x47c>
 8008ce4:	f241 131c 	movw	r3, #4380	; 0x111c
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008cee:	4b53      	ldr	r3, [pc, #332]	; (8008e3c <tcp_process+0x5d0>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f003 0320 	and.w	r3, r3, #32
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d037      	beq.n	8008d6a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	8b5b      	ldrh	r3, [r3, #26]
 8008cfe:	f043 0302 	orr.w	r3, r3, #2
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2207      	movs	r2, #7
 8008d0c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008d0e:	e02c      	b.n	8008d6a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d10:	4b40      	ldr	r3, [pc, #256]	; (8008e14 <tcp_process+0x5a8>)
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	4b40      	ldr	r3, [pc, #256]	; (8008e18 <tcp_process+0x5ac>)
 8008d16:	881b      	ldrh	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	4b40      	ldr	r3, [pc, #256]	; (8008e1c <tcp_process+0x5b0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d20:	4b3f      	ldr	r3, [pc, #252]	; (8008e20 <tcp_process+0x5b4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d24:	885b      	ldrh	r3, [r3, #2]
 8008d26:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d28:	4a3d      	ldr	r2, [pc, #244]	; (8008e20 <tcp_process+0x5b4>)
 8008d2a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d2c:	8812      	ldrh	r2, [r2, #0]
 8008d2e:	b292      	uxth	r2, r2
 8008d30:	9202      	str	r2, [sp, #8]
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	4b3b      	ldr	r3, [pc, #236]	; (8008e24 <tcp_process+0x5b8>)
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	4b3b      	ldr	r3, [pc, #236]	; (8008e28 <tcp_process+0x5bc>)
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f002 fc1b 	bl	800b578 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008d42:	e167      	b.n	8009014 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008d44:	4b32      	ldr	r3, [pc, #200]	; (8008e10 <tcp_process+0x5a4>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8161 	beq.w	8009014 <tcp_process+0x7a8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	1e5a      	subs	r2, r3, #1
 8008d58:	4b30      	ldr	r3, [pc, #192]	; (8008e1c <tcp_process+0x5b0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	f040 8159 	bne.w	8009014 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f002 f9e6 	bl	800b134 <tcp_rexmit>
      break;
 8008d68:	e154      	b.n	8009014 <tcp_process+0x7a8>
 8008d6a:	e153      	b.n	8009014 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa71 	bl	8009254 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008d72:	4b32      	ldr	r3, [pc, #200]	; (8008e3c <tcp_process+0x5d0>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 814c 	beq.w	8009018 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	8b5b      	ldrh	r3, [r3, #26]
 8008d84:	f043 0302 	orr.w	r3, r3, #2
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2207      	movs	r2, #7
 8008d92:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d94:	e140      	b.n	8009018 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fa5c 	bl	8009254 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008d9c:	4b27      	ldr	r3, [pc, #156]	; (8008e3c <tcp_process+0x5d0>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d071      	beq.n	8008e8c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008da8:	4b19      	ldr	r3, [pc, #100]	; (8008e10 <tcp_process+0x5a4>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d060      	beq.n	8008e76 <tcp_process+0x60a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008db8:	4b16      	ldr	r3, [pc, #88]	; (8008e14 <tcp_process+0x5a8>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d15a      	bne.n	8008e76 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d156      	bne.n	8008e76 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	8b5b      	ldrh	r3, [r3, #26]
 8008dcc:	f043 0302 	orr.w	r3, r3, #2
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7fe fd32 	bl	8007840 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008ddc:	4b18      	ldr	r3, [pc, #96]	; (8008e40 <tcp_process+0x5d4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d105      	bne.n	8008df2 <tcp_process+0x586>
 8008de6:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <tcp_process+0x5d4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	4a14      	ldr	r2, [pc, #80]	; (8008e40 <tcp_process+0x5d4>)
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	e02e      	b.n	8008e50 <tcp_process+0x5e4>
 8008df2:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <tcp_process+0x5d4>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e027      	b.n	8008e4a <tcp_process+0x5de>
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d11f      	bne.n	8008e44 <tcp_process+0x5d8>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	60da      	str	r2, [r3, #12]
 8008e0c:	e020      	b.n	8008e50 <tcp_process+0x5e4>
 8008e0e:	bf00      	nop
 8008e10:	20000168 	.word	0x20000168
 8008e14:	20000160 	.word	0x20000160
 8008e18:	20000166 	.word	0x20000166
 8008e1c:	2000015c 	.word	0x2000015c
 8008e20:	2000014c 	.word	0x2000014c
 8008e24:	200040ec 	.word	0x200040ec
 8008e28:	200040f0 	.word	0x200040f0
 8008e2c:	08012fe4 	.word	0x08012fe4
 8008e30:	08013284 	.word	0x08013284
 8008e34:	08013030 	.word	0x08013030
 8008e38:	20000164 	.word	0x20000164
 8008e3c:	20000169 	.word	0x20000169
 8008e40:	200076cc 	.word	0x200076cc
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1d4      	bne.n	8008dfa <tcp_process+0x58e>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	60da      	str	r2, [r3, #12]
 8008e56:	4b77      	ldr	r3, [pc, #476]	; (8009034 <tcp_process+0x7c8>)
 8008e58:	2201      	movs	r2, #1
 8008e5a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	220a      	movs	r2, #10
 8008e60:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008e62:	4b75      	ldr	r3, [pc, #468]	; (8009038 <tcp_process+0x7cc>)
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	60da      	str	r2, [r3, #12]
 8008e6a:	4a73      	ldr	r2, [pc, #460]	; (8009038 <tcp_process+0x7cc>)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	f002 fd44 	bl	800b8fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008e74:	e0d2      	b.n	800901c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8b5b      	ldrh	r3, [r3, #26]
 8008e7a:	f043 0302 	orr.w	r3, r3, #2
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2208      	movs	r2, #8
 8008e88:	751a      	strb	r2, [r3, #20]
      break;
 8008e8a:	e0c7      	b.n	800901c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008e8c:	4b6b      	ldr	r3, [pc, #428]	; (800903c <tcp_process+0x7d0>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	f003 0310 	and.w	r3, r3, #16
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 80c1 	beq.w	800901c <tcp_process+0x7b0>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e9e:	4b68      	ldr	r3, [pc, #416]	; (8009040 <tcp_process+0x7d4>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	f040 80ba 	bne.w	800901c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f040 80b5 	bne.w	800901c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2206      	movs	r2, #6
 8008eb6:	751a      	strb	r2, [r3, #20]
      break;
 8008eb8:	e0b0      	b.n	800901c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f9ca 	bl	8009254 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008ec0:	4b60      	ldr	r3, [pc, #384]	; (8009044 <tcp_process+0x7d8>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 80a9 	beq.w	8009020 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	8b5b      	ldrh	r3, [r3, #26]
 8008ed2:	f043 0302 	orr.w	r3, r3, #2
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7fe fcaf 	bl	8007840 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008ee2:	4b59      	ldr	r3, [pc, #356]	; (8009048 <tcp_process+0x7dc>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d105      	bne.n	8008ef8 <tcp_process+0x68c>
 8008eec:	4b56      	ldr	r3, [pc, #344]	; (8009048 <tcp_process+0x7dc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	4a55      	ldr	r2, [pc, #340]	; (8009048 <tcp_process+0x7dc>)
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	e013      	b.n	8008f20 <tcp_process+0x6b4>
 8008ef8:	4b53      	ldr	r3, [pc, #332]	; (8009048 <tcp_process+0x7dc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	613b      	str	r3, [r7, #16]
 8008efe:	e00c      	b.n	8008f1a <tcp_process+0x6ae>
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d104      	bne.n	8008f14 <tcp_process+0x6a8>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	60da      	str	r2, [r3, #12]
 8008f12:	e005      	b.n	8008f20 <tcp_process+0x6b4>
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	613b      	str	r3, [r7, #16]
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1ef      	bne.n	8008f00 <tcp_process+0x694>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	60da      	str	r2, [r3, #12]
 8008f26:	4b43      	ldr	r3, [pc, #268]	; (8009034 <tcp_process+0x7c8>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	220a      	movs	r2, #10
 8008f30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008f32:	4b41      	ldr	r3, [pc, #260]	; (8009038 <tcp_process+0x7cc>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	4a3f      	ldr	r2, [pc, #252]	; (8009038 <tcp_process+0x7cc>)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	f002 fcdc 	bl	800b8fc <tcp_timer_needed>
      }
      break;
 8008f44:	e06c      	b.n	8009020 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f984 	bl	8009254 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008f4c:	4b3b      	ldr	r3, [pc, #236]	; (800903c <tcp_process+0x7d0>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d065      	beq.n	8009024 <tcp_process+0x7b8>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f5c:	4b38      	ldr	r3, [pc, #224]	; (8009040 <tcp_process+0x7d4>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d15f      	bne.n	8009024 <tcp_process+0x7b8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d15b      	bne.n	8009024 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7fe fc67 	bl	8007840 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008f72:	4b35      	ldr	r3, [pc, #212]	; (8009048 <tcp_process+0x7dc>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d105      	bne.n	8008f88 <tcp_process+0x71c>
 8008f7c:	4b32      	ldr	r3, [pc, #200]	; (8009048 <tcp_process+0x7dc>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	4a31      	ldr	r2, [pc, #196]	; (8009048 <tcp_process+0x7dc>)
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	e013      	b.n	8008fb0 <tcp_process+0x744>
 8008f88:	4b2f      	ldr	r3, [pc, #188]	; (8009048 <tcp_process+0x7dc>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	e00c      	b.n	8008faa <tcp_process+0x73e>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d104      	bne.n	8008fa4 <tcp_process+0x738>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	60da      	str	r2, [r3, #12]
 8008fa2:	e005      	b.n	8008fb0 <tcp_process+0x744>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1ef      	bne.n	8008f90 <tcp_process+0x724>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	4b1f      	ldr	r3, [pc, #124]	; (8009034 <tcp_process+0x7c8>)
 8008fb8:	2201      	movs	r2, #1
 8008fba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	220a      	movs	r2, #10
 8008fc0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008fc2:	4b1d      	ldr	r3, [pc, #116]	; (8009038 <tcp_process+0x7cc>)
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60da      	str	r2, [r3, #12]
 8008fca:	4a1b      	ldr	r2, [pc, #108]	; (8009038 <tcp_process+0x7cc>)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	f002 fc94 	bl	800b8fc <tcp_timer_needed>
      }
      break;
 8008fd4:	e026      	b.n	8009024 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f93c 	bl	8009254 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008fdc:	4b17      	ldr	r3, [pc, #92]	; (800903c <tcp_process+0x7d0>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d01f      	beq.n	8009028 <tcp_process+0x7bc>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fec:	4b14      	ldr	r3, [pc, #80]	; (8009040 <tcp_process+0x7d4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d119      	bne.n	8009028 <tcp_process+0x7bc>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d115      	bne.n	8009028 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008ffc:	4b11      	ldr	r3, [pc, #68]	; (8009044 <tcp_process+0x7d8>)
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f043 0310 	orr.w	r3, r3, #16
 8009004:	b2da      	uxtb	r2, r3
 8009006:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <tcp_process+0x7d8>)
 8009008:	701a      	strb	r2, [r3, #0]
      }
      break;
 800900a:	e00d      	b.n	8009028 <tcp_process+0x7bc>
    default:
      break;
 800900c:	bf00      	nop
 800900e:	e00c      	b.n	800902a <tcp_process+0x7be>
      break;
 8009010:	bf00      	nop
 8009012:	e00a      	b.n	800902a <tcp_process+0x7be>
      break;
 8009014:	bf00      	nop
 8009016:	e008      	b.n	800902a <tcp_process+0x7be>
      break;
 8009018:	bf00      	nop
 800901a:	e006      	b.n	800902a <tcp_process+0x7be>
      break;
 800901c:	bf00      	nop
 800901e:	e004      	b.n	800902a <tcp_process+0x7be>
      break;
 8009020:	bf00      	nop
 8009022:	e002      	b.n	800902a <tcp_process+0x7be>
      break;
 8009024:	bf00      	nop
 8009026:	e000      	b.n	800902a <tcp_process+0x7be>
      break;
 8009028:	bf00      	nop
  }
  return ERR_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3724      	adds	r7, #36	; 0x24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd90      	pop	{r4, r7, pc}
 8009034:	200076c8 	.word	0x200076c8
 8009038:	200076dc 	.word	0x200076dc
 800903c:	20000168 	.word	0x20000168
 8009040:	20000160 	.word	0x20000160
 8009044:	20000169 	.word	0x20000169
 8009048:	200076cc 	.word	0x200076cc

0800904c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800904c:	b590      	push	{r4, r7, lr}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d106      	bne.n	800906a <tcp_oos_insert_segment+0x1e>
 800905c:	4b3b      	ldr	r3, [pc, #236]	; (800914c <tcp_oos_insert_segment+0x100>)
 800905e:	f240 421f 	movw	r2, #1055	; 0x41f
 8009062:	493b      	ldr	r1, [pc, #236]	; (8009150 <tcp_oos_insert_segment+0x104>)
 8009064:	483b      	ldr	r0, [pc, #236]	; (8009154 <tcp_oos_insert_segment+0x108>)
 8009066:	f007 ff07 	bl	8010e78 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	899b      	ldrh	r3, [r3, #12]
 8009070:	b29b      	uxth	r3, r3
 8009072:	4618      	mov	r0, r3
 8009074:	f7fb fae2 	bl	800463c <lwip_htons>
 8009078:	4603      	mov	r3, r0
 800907a:	b2db      	uxtb	r3, r3
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d028      	beq.n	80090d6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009084:	6838      	ldr	r0, [r7, #0]
 8009086:	f7fe f9af 	bl	80073e8 <tcp_segs_free>
    next = NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	603b      	str	r3, [r7, #0]
 800908e:	e056      	b.n	800913e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	899b      	ldrh	r3, [r3, #12]
 8009096:	b29b      	uxth	r3, r3
 8009098:	4618      	mov	r0, r3
 800909a:	f7fb facf 	bl	800463c <lwip_htons>
 800909e:	4603      	mov	r3, r0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00d      	beq.n	80090c6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	899b      	ldrh	r3, [r3, #12]
 80090b0:	b29c      	uxth	r4, r3
 80090b2:	2001      	movs	r0, #1
 80090b4:	f7fb fac2 	bl	800463c <lwip_htons>
 80090b8:	4603      	mov	r3, r0
 80090ba:	461a      	mov	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	4322      	orrs	r2, r4
 80090c2:	b292      	uxth	r2, r2
 80090c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f7fe f99e 	bl	8007412 <tcp_seg_free>
    while (next &&
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00e      	beq.n	80090fa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	891b      	ldrh	r3, [r3, #8]
 80090e0:	461a      	mov	r2, r3
 80090e2:	4b1d      	ldr	r3, [pc, #116]	; (8009158 <tcp_oos_insert_segment+0x10c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	441a      	add	r2, r3
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	8909      	ldrh	r1, [r1, #8]
 80090f2:	440b      	add	r3, r1
 80090f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	daca      	bge.n	8009090 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01e      	beq.n	800913e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	891b      	ldrh	r3, [r3, #8]
 8009104:	461a      	mov	r2, r3
 8009106:	4b14      	ldr	r3, [pc, #80]	; (8009158 <tcp_oos_insert_segment+0x10c>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	441a      	add	r2, r3
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009114:	2b00      	cmp	r3, #0
 8009116:	dd12      	ble.n	800913e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	b29a      	uxth	r2, r3
 8009120:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <tcp_oos_insert_segment+0x10c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	b29b      	uxth	r3, r3
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	b29a      	uxth	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	891b      	ldrh	r3, [r3, #8]
 8009136:	4619      	mov	r1, r3
 8009138:	4610      	mov	r0, r2
 800913a:	f7fc fd59 	bl	8005bf0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	601a      	str	r2, [r3, #0]
}
 8009144:	bf00      	nop
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	bd90      	pop	{r4, r7, pc}
 800914c:	08012fe4 	.word	0x08012fe4
 8009150:	080132a4 	.word	0x080132a4
 8009154:	08013030 	.word	0x08013030
 8009158:	2000015c 	.word	0x2000015c

0800915c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800915c:	b5b0      	push	{r4, r5, r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800916a:	e03e      	b.n	80091ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	4618      	mov	r0, r3
 800917c:	f7fc ff46 	bl	800600c <pbuf_clen>
 8009180:	4603      	mov	r3, r0
 8009182:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800918a:	8a7a      	ldrh	r2, [r7, #18]
 800918c:	429a      	cmp	r2, r3
 800918e:	d906      	bls.n	800919e <tcp_free_acked_segments+0x42>
 8009190:	4b2a      	ldr	r3, [pc, #168]	; (800923c <tcp_free_acked_segments+0xe0>)
 8009192:	f240 4257 	movw	r2, #1111	; 0x457
 8009196:	492a      	ldr	r1, [pc, #168]	; (8009240 <tcp_free_acked_segments+0xe4>)
 8009198:	482a      	ldr	r0, [pc, #168]	; (8009244 <tcp_free_acked_segments+0xe8>)
 800919a:	f007 fe6d 	bl	8010e78 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80091a4:	8a7b      	ldrh	r3, [r7, #18]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	891a      	ldrh	r2, [r3, #8]
 80091b4:	4b24      	ldr	r3, [pc, #144]	; (8009248 <tcp_free_acked_segments+0xec>)
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	4413      	add	r3, r2
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	4b22      	ldr	r3, [pc, #136]	; (8009248 <tcp_free_acked_segments+0xec>)
 80091be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80091c0:	6978      	ldr	r0, [r7, #20]
 80091c2:	f7fe f926 	bl	8007412 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00c      	beq.n	80091ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d109      	bne.n	80091ea <tcp_free_acked_segments+0x8e>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d106      	bne.n	80091ea <tcp_free_acked_segments+0x8e>
 80091dc:	4b17      	ldr	r3, [pc, #92]	; (800923c <tcp_free_acked_segments+0xe0>)
 80091de:	f240 4261 	movw	r2, #1121	; 0x461
 80091e2:	491a      	ldr	r1, [pc, #104]	; (800924c <tcp_free_acked_segments+0xf0>)
 80091e4:	4817      	ldr	r0, [pc, #92]	; (8009244 <tcp_free_acked_segments+0xe8>)
 80091e6:	f007 fe47 	bl	8010e78 <iprintf>
  while (seg_list != NULL &&
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d020      	beq.n	8009232 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fb fa35 	bl	8004666 <lwip_htonl>
 80091fc:	4604      	mov	r4, r0
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	891b      	ldrh	r3, [r3, #8]
 8009202:	461d      	mov	r5, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	899b      	ldrh	r3, [r3, #12]
 800920a:	b29b      	uxth	r3, r3
 800920c:	4618      	mov	r0, r3
 800920e:	f7fb fa15 	bl	800463c <lwip_htons>
 8009212:	4603      	mov	r3, r0
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <tcp_free_acked_segments+0xc6>
 800921e:	2301      	movs	r3, #1
 8009220:	e000      	b.n	8009224 <tcp_free_acked_segments+0xc8>
 8009222:	2300      	movs	r3, #0
 8009224:	442b      	add	r3, r5
 8009226:	18e2      	adds	r2, r4, r3
 8009228:	4b09      	ldr	r3, [pc, #36]	; (8009250 <tcp_free_acked_segments+0xf4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800922e:	2b00      	cmp	r3, #0
 8009230:	dd9c      	ble.n	800916c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009232:	68bb      	ldr	r3, [r7, #8]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bdb0      	pop	{r4, r5, r7, pc}
 800923c:	08012fe4 	.word	0x08012fe4
 8009240:	080132cc 	.word	0x080132cc
 8009244:	08013030 	.word	0x08013030
 8009248:	20000164 	.word	0x20000164
 800924c:	080132f4 	.word	0x080132f4
 8009250:	20000160 	.word	0x20000160

08009254 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009254:	b5b0      	push	{r4, r5, r7, lr}
 8009256:	b094      	sub	sp, #80	; 0x50
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d106      	bne.n	8009274 <tcp_receive+0x20>
 8009266:	4ba6      	ldr	r3, [pc, #664]	; (8009500 <tcp_receive+0x2ac>)
 8009268:	f240 427b 	movw	r2, #1147	; 0x47b
 800926c:	49a5      	ldr	r1, [pc, #660]	; (8009504 <tcp_receive+0x2b0>)
 800926e:	48a6      	ldr	r0, [pc, #664]	; (8009508 <tcp_receive+0x2b4>)
 8009270:	f007 fe02 	bl	8010e78 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7d1b      	ldrb	r3, [r3, #20]
 8009278:	2b03      	cmp	r3, #3
 800927a:	d806      	bhi.n	800928a <tcp_receive+0x36>
 800927c:	4ba0      	ldr	r3, [pc, #640]	; (8009500 <tcp_receive+0x2ac>)
 800927e:	f240 427c 	movw	r2, #1148	; 0x47c
 8009282:	49a2      	ldr	r1, [pc, #648]	; (800950c <tcp_receive+0x2b8>)
 8009284:	48a0      	ldr	r0, [pc, #640]	; (8009508 <tcp_receive+0x2b4>)
 8009286:	f007 fdf7 	bl	8010e78 <iprintf>

  if (flags & TCP_ACK) {
 800928a:	4ba1      	ldr	r3, [pc, #644]	; (8009510 <tcp_receive+0x2bc>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	f003 0310 	and.w	r3, r3, #16
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 8263 	beq.w	800975e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800929e:	461a      	mov	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092a4:	4413      	add	r3, r2
 80092a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ac:	4b99      	ldr	r3, [pc, #612]	; (8009514 <tcp_receive+0x2c0>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	db1b      	blt.n	80092ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092ba:	4b96      	ldr	r3, [pc, #600]	; (8009514 <tcp_receive+0x2c0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80092be:	429a      	cmp	r2, r3
 80092c0:	d106      	bne.n	80092d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092c6:	4b94      	ldr	r3, [pc, #592]	; (8009518 <tcp_receive+0x2c4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	db0e      	blt.n	80092ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092d4:	4b90      	ldr	r3, [pc, #576]	; (8009518 <tcp_receive+0x2c4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092d8:	429a      	cmp	r2, r3
 80092da:	d125      	bne.n	8009328 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80092dc:	4b8f      	ldr	r3, [pc, #572]	; (800951c <tcp_receive+0x2c8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	89db      	ldrh	r3, [r3, #14]
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d91c      	bls.n	8009328 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80092ee:	4b8b      	ldr	r3, [pc, #556]	; (800951c <tcp_receive+0x2c8>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	89db      	ldrh	r3, [r3, #14]
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009308:	429a      	cmp	r2, r3
 800930a:	d205      	bcs.n	8009318 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009318:	4b7e      	ldr	r3, [pc, #504]	; (8009514 <tcp_receive+0x2c0>)
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009320:	4b7d      	ldr	r3, [pc, #500]	; (8009518 <tcp_receive+0x2c4>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009328:	4b7b      	ldr	r3, [pc, #492]	; (8009518 <tcp_receive+0x2c4>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	dc58      	bgt.n	80093e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009336:	4b7a      	ldr	r3, [pc, #488]	; (8009520 <tcp_receive+0x2cc>)
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d14b      	bne.n	80093d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009348:	4413      	add	r3, r2
 800934a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934c:	429a      	cmp	r2, r3
 800934e:	d142      	bne.n	80093d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009356:	2b00      	cmp	r3, #0
 8009358:	db3d      	blt.n	80093d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800935e:	4b6e      	ldr	r3, [pc, #440]	; (8009518 <tcp_receive+0x2c4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d137      	bne.n	80093d6 <tcp_receive+0x182>
              found_dupack = 1;
 8009366:	2301      	movs	r3, #1
 8009368:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009370:	2bff      	cmp	r3, #255	; 0xff
 8009372:	d007      	beq.n	8009384 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800937a:	3301      	adds	r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800938a:	2b03      	cmp	r3, #3
 800938c:	d91b      	bls.n	80093c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009398:	4413      	add	r3, r2
 800939a:	b29a      	uxth	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d30a      	bcc.n	80093bc <tcp_receive+0x168>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093b0:	4413      	add	r3, r2
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80093ba:	e004      	b.n	80093c6 <tcp_receive+0x172>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d902      	bls.n	80093d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 ff1b 	bl	800b20c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80093d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f040 8160 	bne.w	800969e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093e6:	e15a      	b.n	800969e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093e8:	4b4b      	ldr	r3, [pc, #300]	; (8009518 <tcp_receive+0x2c4>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	3b01      	subs	r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f2c0 814d 	blt.w	8009694 <tcp_receive+0x440>
 80093fa:	4b47      	ldr	r3, [pc, #284]	; (8009518 <tcp_receive+0x2c4>)
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	2b00      	cmp	r3, #0
 8009406:	f300 8145 	bgt.w	8009694 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	8b5b      	ldrh	r3, [r3, #26]
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d010      	beq.n	8009438 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	8b5b      	ldrh	r3, [r3, #26]
 800941a:	f023 0304 	bic.w	r3, r3, #4
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009446:	10db      	asrs	r3, r3, #3
 8009448:	b21b      	sxth	r3, r3
 800944a:	b29a      	uxth	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009452:	b29b      	uxth	r3, r3
 8009454:	4413      	add	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	b21a      	sxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009460:	4b2d      	ldr	r3, [pc, #180]	; (8009518 <tcp_receive+0x2c4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	b29b      	uxth	r3, r3
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009478:	4b27      	ldr	r3, [pc, #156]	; (8009518 <tcp_receive+0x2c4>)
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	7d1b      	ldrb	r3, [r3, #20]
 8009484:	2b03      	cmp	r3, #3
 8009486:	f240 8096 	bls.w	80095b6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009496:	429a      	cmp	r2, r3
 8009498:	d244      	bcs.n	8009524 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	8b5b      	ldrh	r3, [r3, #26]
 800949e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <tcp_receive+0x256>
 80094a6:	2301      	movs	r3, #1
 80094a8:	e000      	b.n	80094ac <tcp_receive+0x258>
 80094aa:	2302      	movs	r3, #2
 80094ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80094b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094ba:	fb12 f303 	smulbb	r3, r2, r3
 80094be:	b29b      	uxth	r3, r3
 80094c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bf28      	it	cs
 80094c6:	4613      	movcs	r3, r2
 80094c8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094d2:	4413      	add	r3, r2
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094dc:	429a      	cmp	r2, r3
 80094de:	d309      	bcc.n	80094f4 <tcp_receive+0x2a0>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094e8:	4413      	add	r3, r2
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80094f2:	e060      	b.n	80095b6 <tcp_receive+0x362>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80094fe:	e05a      	b.n	80095b6 <tcp_receive+0x362>
 8009500:	08012fe4 	.word	0x08012fe4
 8009504:	08013314 	.word	0x08013314
 8009508:	08013030 	.word	0x08013030
 800950c:	08013330 	.word	0x08013330
 8009510:	20000168 	.word	0x20000168
 8009514:	2000015c 	.word	0x2000015c
 8009518:	20000160 	.word	0x20000160
 800951c:	2000014c 	.word	0x2000014c
 8009520:	20000166 	.word	0x20000166
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800952a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800952c:	4413      	add	r3, r2
 800952e:	b29a      	uxth	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009536:	429a      	cmp	r2, r3
 8009538:	d309      	bcc.n	800954e <tcp_receive+0x2fa>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009540:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009542:	4413      	add	r3, r2
 8009544:	b29a      	uxth	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800954c:	e004      	b.n	8009558 <tcp_receive+0x304>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009564:	429a      	cmp	r2, r3
 8009566:	d326      	bcc.n	80095b6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	b29a      	uxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009588:	4413      	add	r3, r2
 800958a:	b29a      	uxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009592:	429a      	cmp	r2, r3
 8009594:	d30a      	bcc.n	80095ac <tcp_receive+0x358>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095a0:	4413      	add	r3, r2
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80095aa:	e004      	b.n	80095b6 <tcp_receive+0x362>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095be:	4a98      	ldr	r2, [pc, #608]	; (8009820 <tcp_receive+0x5cc>)
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fdcb 	bl	800915c <tcp_free_acked_segments>
 80095c6:	4602      	mov	r2, r0
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d4:	4a93      	ldr	r2, [pc, #588]	; (8009824 <tcp_receive+0x5d0>)
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7ff fdc0 	bl	800915c <tcp_free_acked_segments>
 80095dc:	4602      	mov	r2, r0
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d104      	bne.n	80095f4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095f0:	861a      	strh	r2, [r3, #48]	; 0x30
 80095f2:	e002      	b.n	80095fa <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d103      	bne.n	8009610 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009616:	4b84      	ldr	r3, [pc, #528]	; (8009828 <tcp_receive+0x5d4>)
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	4413      	add	r3, r2
 800961c:	b29a      	uxth	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	8b5b      	ldrh	r3, [r3, #26]
 8009628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962c:	2b00      	cmp	r3, #0
 800962e:	d035      	beq.n	800969c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009634:	2b00      	cmp	r3, #0
 8009636:	d118      	bne.n	800966a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00c      	beq.n	800965a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	4618      	mov	r0, r3
 800964e:	f7fb f80a 	bl	8004666 <lwip_htonl>
 8009652:	4603      	mov	r3, r0
 8009654:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009656:	2b00      	cmp	r3, #0
 8009658:	dc20      	bgt.n	800969c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	8b5b      	ldrh	r3, [r3, #26]
 800965e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009662:	b29a      	uxth	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009668:	e018      	b.n	800969c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	4618      	mov	r0, r3
 8009678:	f7fa fff5 	bl	8004666 <lwip_htonl>
 800967c:	4603      	mov	r3, r0
 800967e:	1ae3      	subs	r3, r4, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc0b      	bgt.n	800969c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	8b5b      	ldrh	r3, [r3, #26]
 8009688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800968c:	b29a      	uxth	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009692:	e003      	b.n	800969c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 ffc1 	bl	800b61c <tcp_send_empty_ack>
 800969a:	e000      	b.n	800969e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800969c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d05b      	beq.n	800975e <tcp_receive+0x50a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096aa:	4b60      	ldr	r3, [pc, #384]	; (800982c <tcp_receive+0x5d8>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da54      	bge.n	800975e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80096b4:	4b5e      	ldr	r3, [pc, #376]	; (8009830 <tcp_receive+0x5dc>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096be:	b29b      	uxth	r3, r3
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80096c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096d2:	10db      	asrs	r3, r3, #3
 80096d4:	b21b      	sxth	r3, r3
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	b29b      	uxth	r3, r3
 80096dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80096ec:	4413      	add	r3, r2
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	b21a      	sxth	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80096f6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	da05      	bge.n	800970a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80096fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009702:	425b      	negs	r3, r3
 8009704:	b29b      	uxth	r3, r3
 8009706:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800970a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009714:	109b      	asrs	r3, r3, #2
 8009716:	b21b      	sxth	r3, r3
 8009718:	b29b      	uxth	r3, r3
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	b29b      	uxth	r3, r3
 800971e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009728:	b29a      	uxth	r2, r3
 800972a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800972e:	4413      	add	r3, r2
 8009730:	b29b      	uxth	r3, r3
 8009732:	b21a      	sxth	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800973e:	10db      	asrs	r3, r3, #3
 8009740:	b21b      	sxth	r3, r3
 8009742:	b29a      	uxth	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800974a:	b29b      	uxth	r3, r3
 800974c:	4413      	add	r3, r2
 800974e:	b29b      	uxth	r3, r3
 8009750:	b21a      	sxth	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800975e:	4b35      	ldr	r3, [pc, #212]	; (8009834 <tcp_receive+0x5e0>)
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 84e1 	beq.w	800a12a <tcp_receive+0xed6>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7d1b      	ldrb	r3, [r3, #20]
 800976c:	2b06      	cmp	r3, #6
 800976e:	f200 84dc 	bhi.w	800a12a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009776:	4b30      	ldr	r3, [pc, #192]	; (8009838 <tcp_receive+0x5e4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	3b01      	subs	r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	f2c0 808e 	blt.w	80098a0 <tcp_receive+0x64c>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009788:	4b2a      	ldr	r3, [pc, #168]	; (8009834 <tcp_receive+0x5e0>)
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	4b2a      	ldr	r3, [pc, #168]	; (8009838 <tcp_receive+0x5e4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	440b      	add	r3, r1
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	3301      	adds	r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	f300 8081 	bgt.w	80098a0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800979e:	4b27      	ldr	r3, [pc, #156]	; (800983c <tcp_receive+0x5e8>)
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097a8:	4b23      	ldr	r3, [pc, #140]	; (8009838 <tcp_receive+0x5e4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80097b0:	4b22      	ldr	r3, [pc, #136]	; (800983c <tcp_receive+0x5e8>)
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d106      	bne.n	80097c6 <tcp_receive+0x572>
 80097b8:	4b21      	ldr	r3, [pc, #132]	; (8009840 <tcp_receive+0x5ec>)
 80097ba:	f240 5294 	movw	r2, #1428	; 0x594
 80097be:	4921      	ldr	r1, [pc, #132]	; (8009844 <tcp_receive+0x5f0>)
 80097c0:	4821      	ldr	r0, [pc, #132]	; (8009848 <tcp_receive+0x5f4>)
 80097c2:	f007 fb59 	bl	8010e78 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d906      	bls.n	80097de <tcp_receive+0x58a>
 80097d0:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <tcp_receive+0x5ec>)
 80097d2:	f240 5295 	movw	r2, #1429	; 0x595
 80097d6:	491d      	ldr	r1, [pc, #116]	; (800984c <tcp_receive+0x5f8>)
 80097d8:	481b      	ldr	r0, [pc, #108]	; (8009848 <tcp_receive+0x5f4>)
 80097da:	f007 fb4d 	bl	8010e78 <iprintf>
      off = (u16_t)off32;
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80097e4:	4b15      	ldr	r3, [pc, #84]	; (800983c <tcp_receive+0x5e8>)
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	891b      	ldrh	r3, [r3, #8]
 80097ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d906      	bls.n	8009800 <tcp_receive+0x5ac>
 80097f2:	4b13      	ldr	r3, [pc, #76]	; (8009840 <tcp_receive+0x5ec>)
 80097f4:	f240 5297 	movw	r2, #1431	; 0x597
 80097f8:	4915      	ldr	r1, [pc, #84]	; (8009850 <tcp_receive+0x5fc>)
 80097fa:	4813      	ldr	r0, [pc, #76]	; (8009848 <tcp_receive+0x5f4>)
 80097fc:	f007 fb3c 	bl	8010e78 <iprintf>
      inseg.len -= off;
 8009800:	4b0e      	ldr	r3, [pc, #56]	; (800983c <tcp_receive+0x5e8>)
 8009802:	891a      	ldrh	r2, [r3, #8]
 8009804:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	b29a      	uxth	r2, r3
 800980c:	4b0b      	ldr	r3, [pc, #44]	; (800983c <tcp_receive+0x5e8>)
 800980e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009810:	4b0a      	ldr	r3, [pc, #40]	; (800983c <tcp_receive+0x5e8>)
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	891a      	ldrh	r2, [r3, #8]
 8009816:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800981e:	e029      	b.n	8009874 <tcp_receive+0x620>
 8009820:	0801334c 	.word	0x0801334c
 8009824:	08013354 	.word	0x08013354
 8009828:	20000164 	.word	0x20000164
 800982c:	20000160 	.word	0x20000160
 8009830:	200076d0 	.word	0x200076d0
 8009834:	20000166 	.word	0x20000166
 8009838:	2000015c 	.word	0x2000015c
 800983c:	2000013c 	.word	0x2000013c
 8009840:	08012fe4 	.word	0x08012fe4
 8009844:	0801335c 	.word	0x0801335c
 8009848:	08013030 	.word	0x08013030
 800984c:	0801336c 	.word	0x0801336c
 8009850:	0801337c 	.word	0x0801337c
        off -= p->len;
 8009854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009856:	895b      	ldrh	r3, [r3, #10]
 8009858:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009864:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009866:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986a:	2200      	movs	r2, #0
 800986c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800986e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009876:	895b      	ldrh	r3, [r3, #10]
 8009878:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800987c:	429a      	cmp	r2, r3
 800987e:	d8e9      	bhi.n	8009854 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009880:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009884:	4619      	mov	r1, r3
 8009886:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009888:	f7fc fab2 	bl	8005df0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	4a91      	ldr	r2, [pc, #580]	; (8009ad8 <tcp_receive+0x884>)
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	4b91      	ldr	r3, [pc, #580]	; (8009adc <tcp_receive+0x888>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4a8f      	ldr	r2, [pc, #572]	; (8009ad8 <tcp_receive+0x884>)
 800989a:	6812      	ldr	r2, [r2, #0]
 800989c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800989e:	e00d      	b.n	80098bc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80098a0:	4b8d      	ldr	r3, [pc, #564]	; (8009ad8 <tcp_receive+0x884>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	da06      	bge.n	80098bc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	8b5b      	ldrh	r3, [r3, #26]
 80098b2:	f043 0302 	orr.w	r3, r3, #2
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80098bc:	4b86      	ldr	r3, [pc, #536]	; (8009ad8 <tcp_receive+0x884>)
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f2c0 842a 	blt.w	800a120 <tcp_receive+0xecc>
 80098cc:	4b82      	ldr	r3, [pc, #520]	; (8009ad8 <tcp_receive+0x884>)
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80098d8:	440b      	add	r3, r1
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	3301      	adds	r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f300 841e 	bgt.w	800a120 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098e8:	4b7b      	ldr	r3, [pc, #492]	; (8009ad8 <tcp_receive+0x884>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	f040 829a 	bne.w	8009e26 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80098f2:	4b7a      	ldr	r3, [pc, #488]	; (8009adc <tcp_receive+0x888>)
 80098f4:	891c      	ldrh	r4, [r3, #8]
 80098f6:	4b79      	ldr	r3, [pc, #484]	; (8009adc <tcp_receive+0x888>)
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	899b      	ldrh	r3, [r3, #12]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fa fe9c 	bl	800463c <lwip_htons>
 8009904:	4603      	mov	r3, r0
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <tcp_receive+0x6c0>
 8009910:	2301      	movs	r3, #1
 8009912:	e000      	b.n	8009916 <tcp_receive+0x6c2>
 8009914:	2300      	movs	r3, #0
 8009916:	4423      	add	r3, r4
 8009918:	b29a      	uxth	r2, r3
 800991a:	4b71      	ldr	r3, [pc, #452]	; (8009ae0 <tcp_receive+0x88c>)
 800991c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009922:	4b6f      	ldr	r3, [pc, #444]	; (8009ae0 <tcp_receive+0x88c>)
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	429a      	cmp	r2, r3
 8009928:	d275      	bcs.n	8009a16 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800992a:	4b6c      	ldr	r3, [pc, #432]	; (8009adc <tcp_receive+0x888>)
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	899b      	ldrh	r3, [r3, #12]
 8009930:	b29b      	uxth	r3, r3
 8009932:	4618      	mov	r0, r3
 8009934:	f7fa fe82 	bl	800463c <lwip_htons>
 8009938:	4603      	mov	r3, r0
 800993a:	b2db      	uxtb	r3, r3
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01f      	beq.n	8009984 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009944:	4b65      	ldr	r3, [pc, #404]	; (8009adc <tcp_receive+0x888>)
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	899b      	ldrh	r3, [r3, #12]
 800994a:	b29b      	uxth	r3, r3
 800994c:	b21b      	sxth	r3, r3
 800994e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009952:	b21c      	sxth	r4, r3
 8009954:	4b61      	ldr	r3, [pc, #388]	; (8009adc <tcp_receive+0x888>)
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	899b      	ldrh	r3, [r3, #12]
 800995a:	b29b      	uxth	r3, r3
 800995c:	4618      	mov	r0, r3
 800995e:	f7fa fe6d 	bl	800463c <lwip_htons>
 8009962:	4603      	mov	r3, r0
 8009964:	b2db      	uxtb	r3, r3
 8009966:	b29b      	uxth	r3, r3
 8009968:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800996c:	b29b      	uxth	r3, r3
 800996e:	4618      	mov	r0, r3
 8009970:	f7fa fe64 	bl	800463c <lwip_htons>
 8009974:	4603      	mov	r3, r0
 8009976:	b21b      	sxth	r3, r3
 8009978:	4323      	orrs	r3, r4
 800997a:	b21a      	sxth	r2, r3
 800997c:	4b57      	ldr	r3, [pc, #348]	; (8009adc <tcp_receive+0x888>)
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	b292      	uxth	r2, r2
 8009982:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009988:	4b54      	ldr	r3, [pc, #336]	; (8009adc <tcp_receive+0x888>)
 800998a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800998c:	4b53      	ldr	r3, [pc, #332]	; (8009adc <tcp_receive+0x888>)
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	899b      	ldrh	r3, [r3, #12]
 8009992:	b29b      	uxth	r3, r3
 8009994:	4618      	mov	r0, r3
 8009996:	f7fa fe51 	bl	800463c <lwip_htons>
 800999a:	4603      	mov	r3, r0
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <tcp_receive+0x75e>
            inseg.len -= 1;
 80099a6:	4b4d      	ldr	r3, [pc, #308]	; (8009adc <tcp_receive+0x888>)
 80099a8:	891b      	ldrh	r3, [r3, #8]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	4b4b      	ldr	r3, [pc, #300]	; (8009adc <tcp_receive+0x888>)
 80099b0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80099b2:	4b4a      	ldr	r3, [pc, #296]	; (8009adc <tcp_receive+0x888>)
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	4a49      	ldr	r2, [pc, #292]	; (8009adc <tcp_receive+0x888>)
 80099b8:	8912      	ldrh	r2, [r2, #8]
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fc f917 	bl	8005bf0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80099c2:	4b46      	ldr	r3, [pc, #280]	; (8009adc <tcp_receive+0x888>)
 80099c4:	891c      	ldrh	r4, [r3, #8]
 80099c6:	4b45      	ldr	r3, [pc, #276]	; (8009adc <tcp_receive+0x888>)
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	899b      	ldrh	r3, [r3, #12]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fa fe34 	bl	800463c <lwip_htons>
 80099d4:	4603      	mov	r3, r0
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <tcp_receive+0x790>
 80099e0:	2301      	movs	r3, #1
 80099e2:	e000      	b.n	80099e6 <tcp_receive+0x792>
 80099e4:	2300      	movs	r3, #0
 80099e6:	4423      	add	r3, r4
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	4b3d      	ldr	r3, [pc, #244]	; (8009ae0 <tcp_receive+0x88c>)
 80099ec:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80099ee:	4b3c      	ldr	r3, [pc, #240]	; (8009ae0 <tcp_receive+0x88c>)
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	4b38      	ldr	r3, [pc, #224]	; (8009ad8 <tcp_receive+0x884>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	441a      	add	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a02:	440b      	add	r3, r1
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d006      	beq.n	8009a16 <tcp_receive+0x7c2>
 8009a08:	4b36      	ldr	r3, [pc, #216]	; (8009ae4 <tcp_receive+0x890>)
 8009a0a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009a0e:	4936      	ldr	r1, [pc, #216]	; (8009ae8 <tcp_receive+0x894>)
 8009a10:	4836      	ldr	r0, [pc, #216]	; (8009aec <tcp_receive+0x898>)
 8009a12:	f007 fa31 	bl	8010e78 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80e7 	beq.w	8009bee <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009a20:	4b2e      	ldr	r3, [pc, #184]	; (8009adc <tcp_receive+0x888>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	899b      	ldrh	r3, [r3, #12]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fa fe07 	bl	800463c <lwip_htons>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d010      	beq.n	8009a5c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009a3a:	e00a      	b.n	8009a52 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a40:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7fd fce0 	bl	8007412 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f0      	bne.n	8009a3c <tcp_receive+0x7e8>
 8009a5a:	e0c8      	b.n	8009bee <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a60:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009a62:	e052      	b.n	8009b0a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	899b      	ldrh	r3, [r3, #12]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fa fde5 	bl	800463c <lwip_htons>
 8009a72:	4603      	mov	r3, r0
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d03d      	beq.n	8009afa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009a7e:	4b17      	ldr	r3, [pc, #92]	; (8009adc <tcp_receive+0x888>)
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	899b      	ldrh	r3, [r3, #12]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fa fdd8 	bl	800463c <lwip_htons>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d130      	bne.n	8009afa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009a98:	4b10      	ldr	r3, [pc, #64]	; (8009adc <tcp_receive+0x888>)
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	899b      	ldrh	r3, [r3, #12]
 8009a9e:	b29c      	uxth	r4, r3
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	f7fa fdcb 	bl	800463c <lwip_htons>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <tcp_receive+0x888>)
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	4322      	orrs	r2, r4
 8009ab0:	b292      	uxth	r2, r2
 8009ab2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009ab4:	4b09      	ldr	r3, [pc, #36]	; (8009adc <tcp_receive+0x888>)
 8009ab6:	891c      	ldrh	r4, [r3, #8]
 8009ab8:	4b08      	ldr	r3, [pc, #32]	; (8009adc <tcp_receive+0x888>)
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	899b      	ldrh	r3, [r3, #12]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fa fdbb 	bl	800463c <lwip_htons>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00e      	beq.n	8009af0 <tcp_receive+0x89c>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e00d      	b.n	8009af2 <tcp_receive+0x89e>
 8009ad6:	bf00      	nop
 8009ad8:	2000015c 	.word	0x2000015c
 8009adc:	2000013c 	.word	0x2000013c
 8009ae0:	20000166 	.word	0x20000166
 8009ae4:	08012fe4 	.word	0x08012fe4
 8009ae8:	0801338c 	.word	0x0801338c
 8009aec:	08013030 	.word	0x08013030
 8009af0:	2300      	movs	r3, #0
 8009af2:	4423      	add	r3, r4
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	4b98      	ldr	r3, [pc, #608]	; (8009d58 <tcp_receive+0xb04>)
 8009af8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009b04:	6938      	ldr	r0, [r7, #16]
 8009b06:	f7fd fc84 	bl	8007412 <tcp_seg_free>
            while (next &&
 8009b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00e      	beq.n	8009b2e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009b10:	4b91      	ldr	r3, [pc, #580]	; (8009d58 <tcp_receive+0xb04>)
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	4b91      	ldr	r3, [pc, #580]	; (8009d5c <tcp_receive+0xb08>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	441a      	add	r2, r3
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b24:	8909      	ldrh	r1, [r1, #8]
 8009b26:	440b      	add	r3, r1
 8009b28:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	da9a      	bge.n	8009a64 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d059      	beq.n	8009be8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009b34:	4b88      	ldr	r3, [pc, #544]	; (8009d58 <tcp_receive+0xb04>)
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4b88      	ldr	r3, [pc, #544]	; (8009d5c <tcp_receive+0xb08>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	441a      	add	r2, r3
 8009b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	dd4d      	ble.n	8009be8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	4b81      	ldr	r3, [pc, #516]	; (8009d5c <tcp_receive+0xb08>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	4b80      	ldr	r3, [pc, #512]	; (8009d60 <tcp_receive+0xb0c>)
 8009b60:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009b62:	4b7f      	ldr	r3, [pc, #508]	; (8009d60 <tcp_receive+0xb0c>)
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	899b      	ldrh	r3, [r3, #12]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fa fd66 	bl	800463c <lwip_htons>
 8009b70:	4603      	mov	r3, r0
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 0302 	and.w	r3, r3, #2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <tcp_receive+0x934>
                inseg.len -= 1;
 8009b7c:	4b78      	ldr	r3, [pc, #480]	; (8009d60 <tcp_receive+0xb0c>)
 8009b7e:	891b      	ldrh	r3, [r3, #8]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	4b76      	ldr	r3, [pc, #472]	; (8009d60 <tcp_receive+0xb0c>)
 8009b86:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009b88:	4b75      	ldr	r3, [pc, #468]	; (8009d60 <tcp_receive+0xb0c>)
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	4a74      	ldr	r2, [pc, #464]	; (8009d60 <tcp_receive+0xb0c>)
 8009b8e:	8912      	ldrh	r2, [r2, #8]
 8009b90:	4611      	mov	r1, r2
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fc f82c 	bl	8005bf0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009b98:	4b71      	ldr	r3, [pc, #452]	; (8009d60 <tcp_receive+0xb0c>)
 8009b9a:	891c      	ldrh	r4, [r3, #8]
 8009b9c:	4b70      	ldr	r3, [pc, #448]	; (8009d60 <tcp_receive+0xb0c>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	899b      	ldrh	r3, [r3, #12]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7fa fd49 	bl	800463c <lwip_htons>
 8009baa:	4603      	mov	r3, r0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <tcp_receive+0x966>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <tcp_receive+0x968>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	4423      	add	r3, r4
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	4b65      	ldr	r3, [pc, #404]	; (8009d58 <tcp_receive+0xb04>)
 8009bc2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009bc4:	4b64      	ldr	r3, [pc, #400]	; (8009d58 <tcp_receive+0xb04>)
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4b64      	ldr	r3, [pc, #400]	; (8009d5c <tcp_receive+0xb08>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	441a      	add	r2, r3
 8009bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d006      	beq.n	8009be8 <tcp_receive+0x994>
 8009bda:	4b62      	ldr	r3, [pc, #392]	; (8009d64 <tcp_receive+0xb10>)
 8009bdc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009be0:	4961      	ldr	r1, [pc, #388]	; (8009d68 <tcp_receive+0xb14>)
 8009be2:	4862      	ldr	r0, [pc, #392]	; (8009d6c <tcp_receive+0xb18>)
 8009be4:	f007 f948 	bl	8010e78 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bec:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009bee:	4b5a      	ldr	r3, [pc, #360]	; (8009d58 <tcp_receive+0xb04>)
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	4b59      	ldr	r3, [pc, #356]	; (8009d5c <tcp_receive+0xb08>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	441a      	add	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c02:	4b55      	ldr	r3, [pc, #340]	; (8009d58 <tcp_receive+0xb04>)
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d206      	bcs.n	8009c18 <tcp_receive+0x9c4>
 8009c0a:	4b56      	ldr	r3, [pc, #344]	; (8009d64 <tcp_receive+0xb10>)
 8009c0c:	f240 6207 	movw	r2, #1543	; 0x607
 8009c10:	4957      	ldr	r1, [pc, #348]	; (8009d70 <tcp_receive+0xb1c>)
 8009c12:	4856      	ldr	r0, [pc, #344]	; (8009d6c <tcp_receive+0xb18>)
 8009c14:	f007 f930 	bl	8010e78 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c1c:	4b4e      	ldr	r3, [pc, #312]	; (8009d58 <tcp_receive+0xb04>)
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7fc ff13 	bl	8006a54 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009c2e:	4b4c      	ldr	r3, [pc, #304]	; (8009d60 <tcp_receive+0xb0c>)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	891b      	ldrh	r3, [r3, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d006      	beq.n	8009c46 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009c38:	4b49      	ldr	r3, [pc, #292]	; (8009d60 <tcp_receive+0xb0c>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	4a4d      	ldr	r2, [pc, #308]	; (8009d74 <tcp_receive+0xb20>)
 8009c3e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009c40:	4b47      	ldr	r3, [pc, #284]	; (8009d60 <tcp_receive+0xb0c>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c46:	4b46      	ldr	r3, [pc, #280]	; (8009d60 <tcp_receive+0xb0c>)
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	899b      	ldrh	r3, [r3, #12]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fa fcf4 	bl	800463c <lwip_htons>
 8009c54:	4603      	mov	r3, r0
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	f003 0301 	and.w	r3, r3, #1
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 80b8 	beq.w	8009dd2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009c62:	4b45      	ldr	r3, [pc, #276]	; (8009d78 <tcp_receive+0xb24>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	f043 0320 	orr.w	r3, r3, #32
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	4b42      	ldr	r3, [pc, #264]	; (8009d78 <tcp_receive+0xb24>)
 8009c6e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009c70:	e0af      	b.n	8009dd2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c76:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	4a36      	ldr	r2, [pc, #216]	; (8009d5c <tcp_receive+0xb08>)
 8009c82:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	891b      	ldrh	r3, [r3, #8]
 8009c88:	461c      	mov	r4, r3
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	899b      	ldrh	r3, [r3, #12]
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fa fcd2 	bl	800463c <lwip_htons>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <tcp_receive+0xa54>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e000      	b.n	8009caa <tcp_receive+0xa56>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	191a      	adds	r2, r3, r4
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb0:	441a      	add	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cba:	461c      	mov	r4, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	891b      	ldrh	r3, [r3, #8]
 8009cc0:	461d      	mov	r5, r3
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	899b      	ldrh	r3, [r3, #12]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fa fcb6 	bl	800463c <lwip_htons>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	f003 0303 	and.w	r3, r3, #3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <tcp_receive+0xa8c>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e000      	b.n	8009ce2 <tcp_receive+0xa8e>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	442b      	add	r3, r5
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d206      	bcs.n	8009cf6 <tcp_receive+0xaa2>
 8009ce8:	4b1e      	ldr	r3, [pc, #120]	; (8009d64 <tcp_receive+0xb10>)
 8009cea:	f240 622b 	movw	r2, #1579	; 0x62b
 8009cee:	4923      	ldr	r1, [pc, #140]	; (8009d7c <tcp_receive+0xb28>)
 8009cf0:	481e      	ldr	r0, [pc, #120]	; (8009d6c <tcp_receive+0xb18>)
 8009cf2:	f007 f8c1 	bl	8010e78 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	891b      	ldrh	r3, [r3, #8]
 8009cfa:	461c      	mov	r4, r3
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	899b      	ldrh	r3, [r3, #12]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fa fc99 	bl	800463c <lwip_htons>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	f003 0303 	and.w	r3, r3, #3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <tcp_receive+0xac6>
 8009d16:	2301      	movs	r3, #1
 8009d18:	e000      	b.n	8009d1c <tcp_receive+0xac8>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	1919      	adds	r1, r3, r4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d22:	b28b      	uxth	r3, r1
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7fc fe91 	bl	8006a54 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	891b      	ldrh	r3, [r3, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d028      	beq.n	8009d8e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <tcp_receive+0xb20>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01d      	beq.n	8009d80 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009d44:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <tcp_receive+0xb20>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4610      	mov	r0, r2
 8009d50:	f7fc f996 	bl	8006080 <pbuf_cat>
 8009d54:	e018      	b.n	8009d88 <tcp_receive+0xb34>
 8009d56:	bf00      	nop
 8009d58:	20000166 	.word	0x20000166
 8009d5c:	2000015c 	.word	0x2000015c
 8009d60:	2000013c 	.word	0x2000013c
 8009d64:	08012fe4 	.word	0x08012fe4
 8009d68:	080133c4 	.word	0x080133c4
 8009d6c:	08013030 	.word	0x08013030
 8009d70:	08013400 	.word	0x08013400
 8009d74:	2000016c 	.word	0x2000016c
 8009d78:	20000169 	.word	0x20000169
 8009d7c:	08013420 	.word	0x08013420
            } else {
              recv_data = cseg->p;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	4a70      	ldr	r2, [pc, #448]	; (8009f48 <tcp_receive+0xcf4>)
 8009d86:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	899b      	ldrh	r3, [r3, #12]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fa fc50 	bl	800463c <lwip_htons>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00d      	beq.n	8009dc4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009da8:	4b68      	ldr	r3, [pc, #416]	; (8009f4c <tcp_receive+0xcf8>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	f043 0320 	orr.w	r3, r3, #32
 8009db0:	b2da      	uxtb	r2, r3
 8009db2:	4b66      	ldr	r3, [pc, #408]	; (8009f4c <tcp_receive+0xcf8>)
 8009db4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	7d1b      	ldrb	r3, [r3, #20]
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d102      	bne.n	8009dc4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009dcc:	68b8      	ldr	r0, [r7, #8]
 8009dce:	f7fd fb20 	bl	8007412 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d008      	beq.n	8009dec <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009de6:	429a      	cmp	r2, r3
 8009de8:	f43f af43 	beq.w	8009c72 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	8b5b      	ldrh	r3, [r3, #26]
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00e      	beq.n	8009e16 <tcp_receive+0xbc2>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	8b5b      	ldrh	r3, [r3, #26]
 8009dfc:	f023 0301 	bic.w	r3, r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	835a      	strh	r2, [r3, #26]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	8b5b      	ldrh	r3, [r3, #26]
 8009e0a:	f043 0302 	orr.w	r3, r3, #2
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009e14:	e188      	b.n	800a128 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	8b5b      	ldrh	r3, [r3, #26]
 8009e1a:	f043 0301 	orr.w	r3, r3, #1
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009e24:	e180      	b.n	800a128 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009e2e:	4848      	ldr	r0, [pc, #288]	; (8009f50 <tcp_receive+0xcfc>)
 8009e30:	f7fd fb08 	bl	8007444 <tcp_seg_copy>
 8009e34:	4602      	mov	r2, r0
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	675a      	str	r2, [r3, #116]	; 0x74
 8009e3a:	e16d      	b.n	800a118 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e46:	e157      	b.n	800a0f8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	4b41      	ldr	r3, [pc, #260]	; (8009f54 <tcp_receive+0xd00>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d11d      	bne.n	8009e92 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009e56:	4b3e      	ldr	r3, [pc, #248]	; (8009f50 <tcp_receive+0xcfc>)
 8009e58:	891a      	ldrh	r2, [r3, #8]
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5c:	891b      	ldrh	r3, [r3, #8]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	f240 814f 	bls.w	800a102 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e64:	483a      	ldr	r0, [pc, #232]	; (8009f50 <tcp_receive+0xcfc>)
 8009e66:	f7fd faed 	bl	8007444 <tcp_seg_copy>
 8009e6a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 8149 	beq.w	800a106 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	601a      	str	r2, [r3, #0]
 8009e80:	e002      	b.n	8009e88 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e8a:	6978      	ldr	r0, [r7, #20]
 8009e8c:	f7ff f8de 	bl	800904c <tcp_oos_insert_segment>
                }
                break;
 8009e90:	e139      	b.n	800a106 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d117      	bne.n	8009ec8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009e98:	4b2e      	ldr	r3, [pc, #184]	; (8009f54 <tcp_receive+0xd00>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	da57      	bge.n	8009f58 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ea8:	4829      	ldr	r0, [pc, #164]	; (8009f50 <tcp_receive+0xcfc>)
 8009eaa:	f7fd facb 	bl	8007444 <tcp_seg_copy>
 8009eae:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 8129 	beq.w	800a10a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	69ba      	ldr	r2, [r7, #24]
 8009ebc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ec0:	69b8      	ldr	r0, [r7, #24]
 8009ec2:	f7ff f8c3 	bl	800904c <tcp_oos_insert_segment>
                  }
                  break;
 8009ec6:	e120      	b.n	800a10a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009ec8:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <tcp_receive+0xd00>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	db3e      	blt.n	8009f58 <tcp_receive+0xd04>
 8009eda:	4b1e      	ldr	r3, [pc, #120]	; (8009f54 <tcp_receive+0xd00>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dc35      	bgt.n	8009f58 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009eec:	4818      	ldr	r0, [pc, #96]	; (8009f50 <tcp_receive+0xcfc>)
 8009eee:	f7fd faa9 	bl	8007444 <tcp_seg_copy>
 8009ef2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 8109 	beq.w	800a10e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f04:	8912      	ldrh	r2, [r2, #8]
 8009f06:	441a      	add	r2, r3
 8009f08:	4b12      	ldr	r3, [pc, #72]	; (8009f54 <tcp_receive+0xd00>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	dd12      	ble.n	8009f38 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009f12:	4b10      	ldr	r3, [pc, #64]	; (8009f54 <tcp_receive+0xd00>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f26:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2e:	891b      	ldrh	r3, [r3, #8]
 8009f30:	4619      	mov	r1, r3
 8009f32:	4610      	mov	r0, r2
 8009f34:	f7fb fe5c 	bl	8005bf0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009f3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f40:	69f8      	ldr	r0, [r7, #28]
 8009f42:	f7ff f883 	bl	800904c <tcp_oos_insert_segment>
                  }
                  break;
 8009f46:	e0e2      	b.n	800a10e <tcp_receive+0xeba>
 8009f48:	2000016c 	.word	0x2000016c
 8009f4c:	20000169 	.word	0x20000169
 8009f50:	2000013c 	.word	0x2000013c
 8009f54:	2000015c 	.word	0x2000015c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f040 80c6 	bne.w	800a0f2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009f66:	4b80      	ldr	r3, [pc, #512]	; (800a168 <tcp_receive+0xf14>)
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f340 80bd 	ble.w	800a0f2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	899b      	ldrh	r3, [r3, #12]
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7fa fb5b 	bl	800463c <lwip_htons>
 8009f86:	4603      	mov	r3, r0
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f040 80bf 	bne.w	800a112 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009f94:	4875      	ldr	r0, [pc, #468]	; (800a16c <tcp_receive+0xf18>)
 8009f96:	f7fd fa55 	bl	8007444 <tcp_seg_copy>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 80b6 	beq.w	800a116 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fb2:	8912      	ldrh	r2, [r2, #8]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	4b6c      	ldr	r3, [pc, #432]	; (800a168 <tcp_receive+0xf14>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	dd12      	ble.n	8009fe6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009fc0:	4b69      	ldr	r3, [pc, #420]	; (800a168 <tcp_receive+0xf14>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	891b      	ldrh	r3, [r3, #8]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f7fb fe05 	bl	8005bf0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009fe6:	4b62      	ldr	r3, [pc, #392]	; (800a170 <tcp_receive+0xf1c>)
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	4b5e      	ldr	r3, [pc, #376]	; (800a168 <tcp_receive+0xf14>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	441a      	add	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ffa:	440b      	add	r3, r1
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f340 8089 	ble.w	800a116 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	899b      	ldrh	r3, [r3, #12]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fa fb14 	bl	800463c <lwip_htons>
 800a014:	4603      	mov	r3, r0
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d022      	beq.n	800a066 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	899b      	ldrh	r3, [r3, #12]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	b21b      	sxth	r3, r3
 800a02c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a030:	b21c      	sxth	r4, r3
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	899b      	ldrh	r3, [r3, #12]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fa fafd 	bl	800463c <lwip_htons>
 800a042:	4603      	mov	r3, r0
 800a044:	b2db      	uxtb	r3, r3
 800a046:	b29b      	uxth	r3, r3
 800a048:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fa faf4 	bl	800463c <lwip_htons>
 800a054:	4603      	mov	r3, r0
 800a056:	b21b      	sxth	r3, r3
 800a058:	4323      	orrs	r3, r4
 800a05a:	b21a      	sxth	r2, r3
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	b292      	uxth	r2, r2
 800a064:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a070:	4413      	add	r3, r2
 800a072:	b299      	uxth	r1, r3
 800a074:	4b3c      	ldr	r3, [pc, #240]	; (800a168 <tcp_receive+0xf14>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	b29a      	uxth	r2, r3
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	1a8a      	subs	r2, r1, r2
 800a080:	b292      	uxth	r2, r2
 800a082:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	891b      	ldrh	r3, [r3, #8]
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f7fb fdac 	bl	8005bf0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	891c      	ldrh	r4, [r3, #8]
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	899b      	ldrh	r3, [r3, #12]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fa fac7 	bl	800463c <lwip_htons>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	f003 0303 	and.w	r3, r3, #3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d001      	beq.n	800a0be <tcp_receive+0xe6a>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e000      	b.n	800a0c0 <tcp_receive+0xe6c>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4423      	add	r3, r4
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	4b2a      	ldr	r3, [pc, #168]	; (800a170 <tcp_receive+0xf1c>)
 800a0c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a0c8:	4b29      	ldr	r3, [pc, #164]	; (800a170 <tcp_receive+0xf1c>)
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	4b26      	ldr	r3, [pc, #152]	; (800a168 <tcp_receive+0xf14>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	441a      	add	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	6879      	ldr	r1, [r7, #4]
 800a0da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a0dc:	440b      	add	r3, r1
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d019      	beq.n	800a116 <tcp_receive+0xec2>
 800a0e2:	4b24      	ldr	r3, [pc, #144]	; (800a174 <tcp_receive+0xf20>)
 800a0e4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a0e8:	4923      	ldr	r1, [pc, #140]	; (800a178 <tcp_receive+0xf24>)
 800a0ea:	4824      	ldr	r0, [pc, #144]	; (800a17c <tcp_receive+0xf28>)
 800a0ec:	f006 fec4 	bl	8010e78 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a0f0:	e011      	b.n	800a116 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f47f aea4 	bne.w	8009e48 <tcp_receive+0xbf4>
 800a100:	e00a      	b.n	800a118 <tcp_receive+0xec4>
                break;
 800a102:	bf00      	nop
 800a104:	e008      	b.n	800a118 <tcp_receive+0xec4>
                break;
 800a106:	bf00      	nop
 800a108:	e006      	b.n	800a118 <tcp_receive+0xec4>
                  break;
 800a10a:	bf00      	nop
 800a10c:	e004      	b.n	800a118 <tcp_receive+0xec4>
                  break;
 800a10e:	bf00      	nop
 800a110:	e002      	b.n	800a118 <tcp_receive+0xec4>
                  break;
 800a112:	bf00      	nop
 800a114:	e000      	b.n	800a118 <tcp_receive+0xec4>
                break;
 800a116:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 fa7f 	bl	800b61c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a11e:	e003      	b.n	800a128 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f001 fa7b 	bl	800b61c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a126:	e01a      	b.n	800a15e <tcp_receive+0xf0a>
 800a128:	e019      	b.n	800a15e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <tcp_receive+0xf14>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	db0a      	blt.n	800a14e <tcp_receive+0xefa>
 800a138:	4b0b      	ldr	r3, [pc, #44]	; (800a168 <tcp_receive+0xf14>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a144:	440b      	add	r3, r1
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	3301      	adds	r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	dd07      	ble.n	800a15e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	8b5b      	ldrh	r3, [r3, #26]
 800a152:	f043 0302 	orr.w	r3, r3, #2
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a15c:	e7ff      	b.n	800a15e <tcp_receive+0xf0a>
 800a15e:	bf00      	nop
 800a160:	3750      	adds	r7, #80	; 0x50
 800a162:	46bd      	mov	sp, r7
 800a164:	bdb0      	pop	{r4, r5, r7, pc}
 800a166:	bf00      	nop
 800a168:	2000015c 	.word	0x2000015c
 800a16c:	2000013c 	.word	0x2000013c
 800a170:	20000166 	.word	0x20000166
 800a174:	08012fe4 	.word	0x08012fe4
 800a178:	0801338c 	.word	0x0801338c
 800a17c:	08013030 	.word	0x08013030

0800a180 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a186:	4b15      	ldr	r3, [pc, #84]	; (800a1dc <tcp_get_next_optbyte+0x5c>)
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	b291      	uxth	r1, r2
 800a18e:	4a13      	ldr	r2, [pc, #76]	; (800a1dc <tcp_get_next_optbyte+0x5c>)
 800a190:	8011      	strh	r1, [r2, #0]
 800a192:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a194:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <tcp_get_next_optbyte+0x60>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d004      	beq.n	800a1a6 <tcp_get_next_optbyte+0x26>
 800a19c:	4b11      	ldr	r3, [pc, #68]	; (800a1e4 <tcp_get_next_optbyte+0x64>)
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	88fa      	ldrh	r2, [r7, #6]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d208      	bcs.n	800a1b8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a1a6:	4b10      	ldr	r3, [pc, #64]	; (800a1e8 <tcp_get_next_optbyte+0x68>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3314      	adds	r3, #20
 800a1ac:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a1ae:	88fb      	ldrh	r3, [r7, #6]
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	e00b      	b.n	800a1d0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a1b8:	88fb      	ldrh	r3, [r7, #6]
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <tcp_get_next_optbyte+0x64>)
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a1c6:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <tcp_get_next_optbyte+0x60>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	797b      	ldrb	r3, [r7, #5]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	20000158 	.word	0x20000158
 800a1e0:	20000154 	.word	0x20000154
 800a1e4:	20000152 	.word	0x20000152
 800a1e8:	2000014c 	.word	0x2000014c

0800a1ec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <tcp_parseopt+0x1c>
 800a1fa:	4b32      	ldr	r3, [pc, #200]	; (800a2c4 <tcp_parseopt+0xd8>)
 800a1fc:	f240 727d 	movw	r2, #1917	; 0x77d
 800a200:	4931      	ldr	r1, [pc, #196]	; (800a2c8 <tcp_parseopt+0xdc>)
 800a202:	4832      	ldr	r0, [pc, #200]	; (800a2cc <tcp_parseopt+0xe0>)
 800a204:	f006 fe38 	bl	8010e78 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a208:	4b31      	ldr	r3, [pc, #196]	; (800a2d0 <tcp_parseopt+0xe4>)
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d055      	beq.n	800a2bc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a210:	4b30      	ldr	r3, [pc, #192]	; (800a2d4 <tcp_parseopt+0xe8>)
 800a212:	2200      	movs	r2, #0
 800a214:	801a      	strh	r2, [r3, #0]
 800a216:	e045      	b.n	800a2a4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a218:	f7ff ffb2 	bl	800a180 <tcp_get_next_optbyte>
 800a21c:	4603      	mov	r3, r0
 800a21e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	2b02      	cmp	r3, #2
 800a224:	d006      	beq.n	800a234 <tcp_parseopt+0x48>
 800a226:	2b02      	cmp	r3, #2
 800a228:	dc2b      	bgt.n	800a282 <tcp_parseopt+0x96>
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d041      	beq.n	800a2b2 <tcp_parseopt+0xc6>
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d127      	bne.n	800a282 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a232:	e037      	b.n	800a2a4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a234:	f7ff ffa4 	bl	800a180 <tcp_get_next_optbyte>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d13b      	bne.n	800a2b6 <tcp_parseopt+0xca>
 800a23e:	4b25      	ldr	r3, [pc, #148]	; (800a2d4 <tcp_parseopt+0xe8>)
 800a240:	881b      	ldrh	r3, [r3, #0]
 800a242:	3301      	adds	r3, #1
 800a244:	4a22      	ldr	r2, [pc, #136]	; (800a2d0 <tcp_parseopt+0xe4>)
 800a246:	8812      	ldrh	r2, [r2, #0]
 800a248:	4293      	cmp	r3, r2
 800a24a:	da34      	bge.n	800a2b6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a24c:	f7ff ff98 	bl	800a180 <tcp_get_next_optbyte>
 800a250:	4603      	mov	r3, r0
 800a252:	b29b      	uxth	r3, r3
 800a254:	021b      	lsls	r3, r3, #8
 800a256:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a258:	f7ff ff92 	bl	800a180 <tcp_get_next_optbyte>
 800a25c:	4603      	mov	r3, r0
 800a25e:	b29a      	uxth	r2, r3
 800a260:	89bb      	ldrh	r3, [r7, #12]
 800a262:	4313      	orrs	r3, r2
 800a264:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a266:	89bb      	ldrh	r3, [r7, #12]
 800a268:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a26c:	d804      	bhi.n	800a278 <tcp_parseopt+0x8c>
 800a26e:	89bb      	ldrh	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <tcp_parseopt+0x8c>
 800a274:	89ba      	ldrh	r2, [r7, #12]
 800a276:	e001      	b.n	800a27c <tcp_parseopt+0x90>
 800a278:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a280:	e010      	b.n	800a2a4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a282:	f7ff ff7d 	bl	800a180 <tcp_get_next_optbyte>
 800a286:	4603      	mov	r3, r0
 800a288:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a28a:	7afb      	ldrb	r3, [r7, #11]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d914      	bls.n	800a2ba <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	b29a      	uxth	r2, r3
 800a294:	4b0f      	ldr	r3, [pc, #60]	; (800a2d4 <tcp_parseopt+0xe8>)
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	4413      	add	r3, r2
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	3b02      	subs	r3, #2
 800a29e:	b29a      	uxth	r2, r3
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <tcp_parseopt+0xe8>)
 800a2a2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a2a4:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <tcp_parseopt+0xe8>)
 800a2a6:	881a      	ldrh	r2, [r3, #0]
 800a2a8:	4b09      	ldr	r3, [pc, #36]	; (800a2d0 <tcp_parseopt+0xe4>)
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d3b3      	bcc.n	800a218 <tcp_parseopt+0x2c>
 800a2b0:	e004      	b.n	800a2bc <tcp_parseopt+0xd0>
          return;
 800a2b2:	bf00      	nop
 800a2b4:	e002      	b.n	800a2bc <tcp_parseopt+0xd0>
            return;
 800a2b6:	bf00      	nop
 800a2b8:	e000      	b.n	800a2bc <tcp_parseopt+0xd0>
            return;
 800a2ba:	bf00      	nop
      }
    }
  }
}
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	08012fe4 	.word	0x08012fe4
 800a2c8:	08013448 	.word	0x08013448
 800a2cc:	08013030 	.word	0x08013030
 800a2d0:	20000150 	.word	0x20000150
 800a2d4:	20000158 	.word	0x20000158

0800a2d8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a2dc:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <tcp_trigger_input_pcb_close+0x1c>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f043 0310 	orr.w	r3, r3, #16
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	4b03      	ldr	r3, [pc, #12]	; (800a2f4 <tcp_trigger_input_pcb_close+0x1c>)
 800a2e8:	701a      	strb	r2, [r3, #0]
}
 800a2ea:	bf00      	nop
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20000169 	.word	0x20000169

0800a2f8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00a      	beq.n	800a320 <tcp_route+0x28>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	7a1b      	ldrb	r3, [r3, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d006      	beq.n	800a320 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	7a1b      	ldrb	r3, [r3, #8]
 800a316:	4618      	mov	r0, r3
 800a318:	f7fb fad4 	bl	80058c4 <netif_get_by_index>
 800a31c:	4603      	mov	r3, r0
 800a31e:	e003      	b.n	800a328 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f005 f965 	bl	800f5f0 <ip4_route>
 800a326:	4603      	mov	r3, r0
  }
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	4613      	mov	r3, r2
 800a33e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d105      	bne.n	800a352 <tcp_create_segment+0x22>
 800a346:	4b48      	ldr	r3, [pc, #288]	; (800a468 <tcp_create_segment+0x138>)
 800a348:	22a3      	movs	r2, #163	; 0xa3
 800a34a:	4948      	ldr	r1, [pc, #288]	; (800a46c <tcp_create_segment+0x13c>)
 800a34c:	4848      	ldr	r0, [pc, #288]	; (800a470 <tcp_create_segment+0x140>)
 800a34e:	f006 fd93 	bl	8010e78 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <tcp_create_segment+0x34>
 800a358:	4b43      	ldr	r3, [pc, #268]	; (800a468 <tcp_create_segment+0x138>)
 800a35a:	22a4      	movs	r2, #164	; 0xa4
 800a35c:	4945      	ldr	r1, [pc, #276]	; (800a474 <tcp_create_segment+0x144>)
 800a35e:	4844      	ldr	r0, [pc, #272]	; (800a470 <tcp_create_segment+0x140>)
 800a360:	f006 fd8a 	bl	8010e78 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a364:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 0304 	and.w	r3, r3, #4
 800a370:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a372:	2003      	movs	r0, #3
 800a374:	f7fa ffaa 	bl	80052cc <memp_malloc>
 800a378:	6138      	str	r0, [r7, #16]
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d104      	bne.n	800a38a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a380:	68b8      	ldr	r0, [r7, #8]
 800a382:	f7fb fdbb 	bl	8005efc <pbuf_free>
    return NULL;
 800a386:	2300      	movs	r3, #0
 800a388:	e069      	b.n	800a45e <tcp_create_segment+0x12e>
  }
  seg->flags = optflags;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a390:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2200      	movs	r2, #0
 800a396:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	891a      	ldrh	r2, [r3, #8]
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d205      	bcs.n	800a3b6 <tcp_create_segment+0x86>
 800a3aa:	4b2f      	ldr	r3, [pc, #188]	; (800a468 <tcp_create_segment+0x138>)
 800a3ac:	22b0      	movs	r2, #176	; 0xb0
 800a3ae:	4932      	ldr	r1, [pc, #200]	; (800a478 <tcp_create_segment+0x148>)
 800a3b0:	482f      	ldr	r0, [pc, #188]	; (800a470 <tcp_create_segment+0x140>)
 800a3b2:	f006 fd61 	bl	8010e78 <iprintf>
  seg->len = p->tot_len - optlen;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	891a      	ldrh	r2, [r3, #8]
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a3c6:	2114      	movs	r1, #20
 800a3c8:	68b8      	ldr	r0, [r7, #8]
 800a3ca:	f7fb fd01 	bl	8005dd0 <pbuf_add_header>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00c      	beq.n	800a3ee <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800a3d4:	4b29      	ldr	r3, [pc, #164]	; (800a47c <tcp_create_segment+0x14c>)
 800a3d6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800a3da:	3301      	adds	r3, #1
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	4b27      	ldr	r3, [pc, #156]	; (800a47c <tcp_create_segment+0x14c>)
 800a3e0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800a3e4:	6938      	ldr	r0, [r7, #16]
 800a3e6:	f7fd f814 	bl	8007412 <tcp_seg_free>
    return NULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e037      	b.n	800a45e <tcp_create_segment+0x12e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	8ada      	ldrh	r2, [r3, #22]
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	68dc      	ldr	r4, [r3, #12]
 800a400:	4610      	mov	r0, r2
 800a402:	f7fa f91b 	bl	800463c <lwip_htons>
 800a406:	4603      	mov	r3, r0
 800a408:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8b1a      	ldrh	r2, [r3, #24]
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	68dc      	ldr	r4, [r3, #12]
 800a412:	4610      	mov	r0, r2
 800a414:	f7fa f912 	bl	800463c <lwip_htons>
 800a418:	4603      	mov	r3, r0
 800a41a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	68dc      	ldr	r4, [r3, #12]
 800a420:	6838      	ldr	r0, [r7, #0]
 800a422:	f7fa f920 	bl	8004666 <lwip_htonl>
 800a426:	4603      	mov	r3, r0
 800a428:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	089b      	lsrs	r3, r3, #2
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	b29b      	uxth	r3, r3
 800a432:	3305      	adds	r3, #5
 800a434:	b29b      	uxth	r3, r3
 800a436:	031b      	lsls	r3, r3, #12
 800a438:	b29a      	uxth	r2, r3
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	4313      	orrs	r3, r2
 800a440:	b29a      	uxth	r2, r3
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	68dc      	ldr	r4, [r3, #12]
 800a446:	4610      	mov	r0, r2
 800a448:	f7fa f8f8 	bl	800463c <lwip_htons>
 800a44c:	4603      	mov	r3, r0
 800a44e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	749a      	strb	r2, [r3, #18]
 800a458:	2200      	movs	r2, #0
 800a45a:	74da      	strb	r2, [r3, #19]
  return seg;
 800a45c:	693b      	ldr	r3, [r7, #16]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	371c      	adds	r7, #28
 800a462:	46bd      	mov	sp, r7
 800a464:	bd90      	pop	{r4, r7, pc}
 800a466:	bf00      	nop
 800a468:	08013464 	.word	0x08013464
 800a46c:	08013498 	.word	0x08013498
 800a470:	080134b8 	.word	0x080134b8
 800a474:	080134e0 	.word	0x080134e0
 800a478:	08013504 	.word	0x08013504
 800a47c:	200075f0 	.word	0x200075f0

0800a480 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a480:	b590      	push	{r4, r7, lr}
 800a482:	b08b      	sub	sp, #44	; 0x2c
 800a484:	af02      	add	r7, sp, #8
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	61fb      	str	r3, [r7, #28]
 800a490:	2300      	movs	r3, #0
 800a492:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a494:	2300      	movs	r3, #0
 800a496:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <tcp_split_unsent_seg+0x2c>
 800a49e:	4b99      	ldr	r3, [pc, #612]	; (800a704 <tcp_split_unsent_seg+0x284>)
 800a4a0:	f240 324b 	movw	r2, #843	; 0x34b
 800a4a4:	4998      	ldr	r1, [pc, #608]	; (800a708 <tcp_split_unsent_seg+0x288>)
 800a4a6:	4899      	ldr	r0, [pc, #612]	; (800a70c <tcp_split_unsent_seg+0x28c>)
 800a4a8:	f006 fce6 	bl	8010e78 <iprintf>

  useg = pcb->unsent;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d102      	bne.n	800a4be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4bc:	e11e      	b.n	800a6fc <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 800a4be:	887b      	ldrh	r3, [r7, #2]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d109      	bne.n	800a4d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a4c4:	4b8f      	ldr	r3, [pc, #572]	; (800a704 <tcp_split_unsent_seg+0x284>)
 800a4c6:	f240 3253 	movw	r2, #851	; 0x353
 800a4ca:	4991      	ldr	r1, [pc, #580]	; (800a710 <tcp_split_unsent_seg+0x290>)
 800a4cc:	488f      	ldr	r0, [pc, #572]	; (800a70c <tcp_split_unsent_seg+0x28c>)
 800a4ce:	f006 fcd3 	bl	8010e78 <iprintf>
    return ERR_VAL;
 800a4d2:	f06f 0305 	mvn.w	r3, #5
 800a4d6:	e111      	b.n	800a6fc <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	891b      	ldrh	r3, [r3, #8]
 800a4dc:	887a      	ldrh	r2, [r7, #2]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d301      	bcc.n	800a4e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e10a      	b.n	800a6fc <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4ea:	887a      	ldrh	r2, [r7, #2]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d906      	bls.n	800a4fe <tcp_split_unsent_seg+0x7e>
 800a4f0:	4b84      	ldr	r3, [pc, #528]	; (800a704 <tcp_split_unsent_seg+0x284>)
 800a4f2:	f240 325b 	movw	r2, #859	; 0x35b
 800a4f6:	4987      	ldr	r1, [pc, #540]	; (800a714 <tcp_split_unsent_seg+0x294>)
 800a4f8:	4884      	ldr	r0, [pc, #528]	; (800a70c <tcp_split_unsent_seg+0x28c>)
 800a4fa:	f006 fcbd 	bl	8010e78 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	891b      	ldrh	r3, [r3, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d106      	bne.n	800a514 <tcp_split_unsent_seg+0x94>
 800a506:	4b7f      	ldr	r3, [pc, #508]	; (800a704 <tcp_split_unsent_seg+0x284>)
 800a508:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a50c:	4982      	ldr	r1, [pc, #520]	; (800a718 <tcp_split_unsent_seg+0x298>)
 800a50e:	487f      	ldr	r0, [pc, #508]	; (800a70c <tcp_split_unsent_seg+0x28c>)
 800a510:	f006 fcb2 	bl	8010e78 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	7a9b      	ldrb	r3, [r3, #10]
 800a518:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	f003 0304 	and.w	r3, r3, #4
 800a524:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	891a      	ldrh	r2, [r3, #8]
 800a52a:	887b      	ldrh	r3, [r7, #2]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a530:	7bbb      	ldrb	r3, [r7, #14]
 800a532:	b29a      	uxth	r2, r3
 800a534:	89bb      	ldrh	r3, [r7, #12]
 800a536:	4413      	add	r3, r2
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a53e:	4619      	mov	r1, r3
 800a540:	2036      	movs	r0, #54	; 0x36
 800a542:	f7fb fa3b 	bl	80059bc <pbuf_alloc>
 800a546:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 80b7 	beq.w	800a6be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	891a      	ldrh	r2, [r3, #8]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	891b      	ldrh	r3, [r3, #8]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	887b      	ldrh	r3, [r7, #2]
 800a560:	4413      	add	r3, r2
 800a562:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	6858      	ldr	r0, [r3, #4]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	18d1      	adds	r1, r2, r3
 800a570:	897b      	ldrh	r3, [r7, #10]
 800a572:	89ba      	ldrh	r2, [r7, #12]
 800a574:	f7fb febc 	bl	80062f0 <pbuf_copy_partial>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	89bb      	ldrh	r3, [r7, #12]
 800a57e:	4293      	cmp	r3, r2
 800a580:	f040 809f 	bne.w	800a6c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	899b      	ldrh	r3, [r3, #12]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fa f855 	bl	800463c <lwip_htons>
 800a592:	4603      	mov	r3, r0
 800a594:	b2db      	uxtb	r3, r3
 800a596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a59a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a59c:	2300      	movs	r3, #0
 800a59e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a5a0:	7efb      	ldrb	r3, [r7, #27]
 800a5a2:	f003 0308 	and.w	r3, r3, #8
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d007      	beq.n	800a5ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a5aa:	7efb      	ldrb	r3, [r7, #27]
 800a5ac:	f023 0308 	bic.w	r3, r3, #8
 800a5b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a5b2:	7ebb      	ldrb	r3, [r7, #26]
 800a5b4:	f043 0308 	orr.w	r3, r3, #8
 800a5b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a5ba:	7efb      	ldrb	r3, [r7, #27]
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d007      	beq.n	800a5d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a5c4:	7efb      	ldrb	r3, [r7, #27]
 800a5c6:	f023 0301 	bic.w	r3, r3, #1
 800a5ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a5cc:	7ebb      	ldrb	r3, [r7, #26]
 800a5ce:	f043 0301 	orr.w	r3, r3, #1
 800a5d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fa f843 	bl	8004666 <lwip_htonl>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	887b      	ldrh	r3, [r7, #2]
 800a5e4:	18d1      	adds	r1, r2, r3
 800a5e6:	7eba      	ldrb	r2, [r7, #26]
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	6939      	ldr	r1, [r7, #16]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff fe9d 	bl	800a330 <tcp_create_segment>
 800a5f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d063      	beq.n	800a6c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	4618      	mov	r0, r3
 800a604:	f7fb fd02 	bl	800600c <pbuf_clen>
 800a608:	4603      	mov	r3, r0
 800a60a:	461a      	mov	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a612:	1a9b      	subs	r3, r3, r2
 800a614:	b29a      	uxth	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	6858      	ldr	r0, [r3, #4]
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	891a      	ldrh	r2, [r3, #8]
 800a626:	89bb      	ldrh	r3, [r7, #12]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	4619      	mov	r1, r3
 800a62e:	f7fb fadf 	bl	8005bf0 <pbuf_realloc>
  useg->len -= remainder;
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	891a      	ldrh	r2, [r3, #8]
 800a636:	89bb      	ldrh	r3, [r7, #12]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	899b      	ldrh	r3, [r3, #12]
 800a646:	b29c      	uxth	r4, r3
 800a648:	7efb      	ldrb	r3, [r7, #27]
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7f9 fff5 	bl	800463c <lwip_htons>
 800a652:	4603      	mov	r3, r0
 800a654:	461a      	mov	r2, r3
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	4322      	orrs	r2, r4
 800a65c:	b292      	uxth	r2, r2
 800a65e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	4618      	mov	r0, r3
 800a666:	f7fb fcd1 	bl	800600c <pbuf_clen>
 800a66a:	4603      	mov	r3, r0
 800a66c:	461a      	mov	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a674:	4413      	add	r3, r2
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	4618      	mov	r0, r3
 800a684:	f7fb fcc2 	bl	800600c <pbuf_clen>
 800a688:	4603      	mov	r3, r0
 800a68a:	461a      	mov	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a692:	4413      	add	r3, r2
 800a694:	b29a      	uxth	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	69fa      	ldr	r2, [r7, #28]
 800a6a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d103      	bne.n	800a6ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e01e      	b.n	800a6fc <tcp_split_unsent_seg+0x27c>
    goto memerr;
 800a6be:	bf00      	nop
 800a6c0:	e002      	b.n	800a6c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a6c2:	bf00      	nop
 800a6c4:	e000      	b.n	800a6c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a6c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800a6c8:	4b14      	ldr	r3, [pc, #80]	; (800a71c <tcp_split_unsent_seg+0x29c>)
 800a6ca:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	4b12      	ldr	r3, [pc, #72]	; (800a71c <tcp_split_unsent_seg+0x29c>)
 800a6d4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <tcp_split_unsent_seg+0x26c>
 800a6de:	4b09      	ldr	r3, [pc, #36]	; (800a704 <tcp_split_unsent_seg+0x284>)
 800a6e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a6e4:	490e      	ldr	r1, [pc, #56]	; (800a720 <tcp_split_unsent_seg+0x2a0>)
 800a6e6:	4809      	ldr	r0, [pc, #36]	; (800a70c <tcp_split_unsent_seg+0x28c>)
 800a6e8:	f006 fbc6 	bl	8010e78 <iprintf>
  if (p != NULL) {
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 800a6f2:	6938      	ldr	r0, [r7, #16]
 800a6f4:	f7fb fc02 	bl	8005efc <pbuf_free>
  }

  return ERR_MEM;
 800a6f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3724      	adds	r7, #36	; 0x24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd90      	pop	{r4, r7, pc}
 800a704:	08013464 	.word	0x08013464
 800a708:	080137f8 	.word	0x080137f8
 800a70c:	080134b8 	.word	0x080134b8
 800a710:	0801381c 	.word	0x0801381c
 800a714:	08013840 	.word	0x08013840
 800a718:	08013850 	.word	0x08013850
 800a71c:	200075f0 	.word	0x200075f0
 800a720:	08013860 	.word	0x08013860

0800a724 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a724:	b590      	push	{r4, r7, lr}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <tcp_send_fin+0x1c>
 800a732:	4b21      	ldr	r3, [pc, #132]	; (800a7b8 <tcp_send_fin+0x94>)
 800a734:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a738:	4920      	ldr	r1, [pc, #128]	; (800a7bc <tcp_send_fin+0x98>)
 800a73a:	4821      	ldr	r0, [pc, #132]	; (800a7c0 <tcp_send_fin+0x9c>)
 800a73c:	f006 fb9c 	bl	8010e78 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a744:	2b00      	cmp	r3, #0
 800a746:	d02e      	beq.n	800a7a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a74c:	60fb      	str	r3, [r7, #12]
 800a74e:	e002      	b.n	800a756 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1f8      	bne.n	800a750 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	899b      	ldrh	r3, [r3, #12]
 800a764:	b29b      	uxth	r3, r3
 800a766:	4618      	mov	r0, r3
 800a768:	f7f9 ff68 	bl	800463c <lwip_htons>
 800a76c:	4603      	mov	r3, r0
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 0307 	and.w	r3, r3, #7
 800a774:	2b00      	cmp	r3, #0
 800a776:	d116      	bne.n	800a7a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	899b      	ldrh	r3, [r3, #12]
 800a77e:	b29c      	uxth	r4, r3
 800a780:	2001      	movs	r0, #1
 800a782:	f7f9 ff5b 	bl	800463c <lwip_htons>
 800a786:	4603      	mov	r3, r0
 800a788:	461a      	mov	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	4322      	orrs	r2, r4
 800a790:	b292      	uxth	r2, r2
 800a792:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8b5b      	ldrh	r3, [r3, #26]
 800a798:	f043 0320 	orr.w	r3, r3, #32
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e004      	b.n	800a7b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a7a6:	2101      	movs	r1, #1
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f80b 	bl	800a7c4 <tcp_enqueue_flags>
 800a7ae:	4603      	mov	r3, r0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd90      	pop	{r4, r7, pc}
 800a7b8:	08013464 	.word	0x08013464
 800a7bc:	0801386c 	.word	0x0801386c
 800a7c0:	080134b8 	.word	0x080134b8

0800a7c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b08a      	sub	sp, #40	; 0x28
 800a7c8:	af02      	add	r7, sp, #8
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <tcp_enqueue_flags+0x2c>
 800a7e2:	4b68      	ldr	r3, [pc, #416]	; (800a984 <tcp_enqueue_flags+0x1c0>)
 800a7e4:	f240 4211 	movw	r2, #1041	; 0x411
 800a7e8:	4967      	ldr	r1, [pc, #412]	; (800a988 <tcp_enqueue_flags+0x1c4>)
 800a7ea:	4868      	ldr	r0, [pc, #416]	; (800a98c <tcp_enqueue_flags+0x1c8>)
 800a7ec:	f006 fb44 	bl	8010e78 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d106      	bne.n	800a804 <tcp_enqueue_flags+0x40>
 800a7f6:	4b63      	ldr	r3, [pc, #396]	; (800a984 <tcp_enqueue_flags+0x1c0>)
 800a7f8:	f240 4213 	movw	r2, #1043	; 0x413
 800a7fc:	4964      	ldr	r1, [pc, #400]	; (800a990 <tcp_enqueue_flags+0x1cc>)
 800a7fe:	4863      	ldr	r0, [pc, #396]	; (800a98c <tcp_enqueue_flags+0x1c8>)
 800a800:	f006 fb3a 	bl	8010e78 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a804:	78fb      	ldrb	r3, [r7, #3]
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a80e:	2301      	movs	r3, #1
 800a810:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a812:	7ffb      	ldrb	r3, [r7, #31]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	b29b      	uxth	r3, r3
 800a822:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a826:	4619      	mov	r1, r3
 800a828:	2036      	movs	r0, #54	; 0x36
 800a82a:	f7fb f8c7 	bl	80059bc <pbuf_alloc>
 800a82e:	6138      	str	r0, [r7, #16]
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d111      	bne.n	800a85a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8b5b      	ldrh	r3, [r3, #26]
 800a83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83e:	b29a      	uxth	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800a844:	4b53      	ldr	r3, [pc, #332]	; (800a994 <tcp_enqueue_flags+0x1d0>)
 800a846:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a84a:	3301      	adds	r3, #1
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	4b51      	ldr	r3, [pc, #324]	; (800a994 <tcp_enqueue_flags+0x1d0>)
 800a850:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800a854:	f04f 33ff 	mov.w	r3, #4294967295
 800a858:	e090      	b.n	800a97c <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	895a      	ldrh	r2, [r3, #10]
 800a85e:	7dfb      	ldrb	r3, [r7, #23]
 800a860:	b29b      	uxth	r3, r3
 800a862:	429a      	cmp	r2, r3
 800a864:	d206      	bcs.n	800a874 <tcp_enqueue_flags+0xb0>
 800a866:	4b47      	ldr	r3, [pc, #284]	; (800a984 <tcp_enqueue_flags+0x1c0>)
 800a868:	f240 4239 	movw	r2, #1081	; 0x439
 800a86c:	494a      	ldr	r1, [pc, #296]	; (800a998 <tcp_enqueue_flags+0x1d4>)
 800a86e:	4847      	ldr	r0, [pc, #284]	; (800a98c <tcp_enqueue_flags+0x1c8>)
 800a870:	f006 fb02 	bl	8010e78 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a878:	78fa      	ldrb	r2, [r7, #3]
 800a87a:	7ffb      	ldrb	r3, [r7, #31]
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	460b      	mov	r3, r1
 800a880:	6939      	ldr	r1, [r7, #16]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff fd54 	bl	800a330 <tcp_create_segment>
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d111      	bne.n	800a8b4 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	8b5b      	ldrh	r3, [r3, #26]
 800a894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a898:	b29a      	uxth	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800a89e:	4b3d      	ldr	r3, [pc, #244]	; (800a994 <tcp_enqueue_flags+0x1d0>)
 800a8a0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	4b3a      	ldr	r3, [pc, #232]	; (800a994 <tcp_enqueue_flags+0x1d0>)
 800a8aa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800a8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a8b2:	e063      	b.n	800a97c <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	891b      	ldrh	r3, [r3, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d006      	beq.n	800a8ca <tcp_enqueue_flags+0x106>
 800a8bc:	4b31      	ldr	r3, [pc, #196]	; (800a984 <tcp_enqueue_flags+0x1c0>)
 800a8be:	f240 4243 	movw	r2, #1091	; 0x443
 800a8c2:	4936      	ldr	r1, [pc, #216]	; (800a99c <tcp_enqueue_flags+0x1d8>)
 800a8c4:	4831      	ldr	r0, [pc, #196]	; (800a98c <tcp_enqueue_flags+0x1c8>)
 800a8c6:	f006 fad7 	bl	8010e78 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	66da      	str	r2, [r3, #108]	; 0x6c
 800a8d8:	e00d      	b.n	800a8f6 <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8de:	61bb      	str	r3, [r7, #24]
 800a8e0:	e002      	b.n	800a8e8 <tcp_enqueue_flags+0x124>
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	61bb      	str	r3, [r7, #24]
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1f8      	bne.n	800a8e2 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a8fe:	78fb      	ldrb	r3, [r7, #3]
 800a900:	f003 0302 	and.w	r3, r3, #2
 800a904:	2b00      	cmp	r3, #0
 800a906:	d104      	bne.n	800a912 <tcp_enqueue_flags+0x14e>
 800a908:	78fb      	ldrb	r3, [r7, #3]
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d004      	beq.n	800a91c <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a916:	1c5a      	adds	r2, r3, #1
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a91c:	78fb      	ldrb	r3, [r7, #3]
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	d006      	beq.n	800a934 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	8b5b      	ldrh	r3, [r3, #26]
 800a92a:	f043 0320 	orr.w	r3, r3, #32
 800a92e:	b29a      	uxth	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fb fb67 	bl	800600c <pbuf_clen>
 800a93e:	4603      	mov	r3, r0
 800a940:	461a      	mov	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a948:	4413      	add	r3, r2
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00e      	beq.n	800a97a <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10a      	bne.n	800a97a <tcp_enqueue_flags+0x1b6>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d106      	bne.n	800a97a <tcp_enqueue_flags+0x1b6>
 800a96c:	4b05      	ldr	r3, [pc, #20]	; (800a984 <tcp_enqueue_flags+0x1c0>)
 800a96e:	f240 4265 	movw	r2, #1125	; 0x465
 800a972:	490b      	ldr	r1, [pc, #44]	; (800a9a0 <tcp_enqueue_flags+0x1dc>)
 800a974:	4805      	ldr	r0, [pc, #20]	; (800a98c <tcp_enqueue_flags+0x1c8>)
 800a976:	f006 fa7f 	bl	8010e78 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3720      	adds	r7, #32
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	08013464 	.word	0x08013464
 800a988:	08013888 	.word	0x08013888
 800a98c:	080134b8 	.word	0x080134b8
 800a990:	080138e0 	.word	0x080138e0
 800a994:	200075f0 	.word	0x200075f0
 800a998:	08013900 	.word	0x08013900
 800a99c:	0801393c 	.word	0x0801393c
 800a9a0:	08013968 	.word	0x08013968

0800a9a4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a9a4:	b5b0      	push	{r4, r5, r7, lr}
 800a9a6:	b08a      	sub	sp, #40	; 0x28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <tcp_output+0x1c>
 800a9b2:	4b9e      	ldr	r3, [pc, #632]	; (800ac2c <tcp_output+0x288>)
 800a9b4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a9b8:	499d      	ldr	r1, [pc, #628]	; (800ac30 <tcp_output+0x28c>)
 800a9ba:	489e      	ldr	r0, [pc, #632]	; (800ac34 <tcp_output+0x290>)
 800a9bc:	f006 fa5c 	bl	8010e78 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	7d1b      	ldrb	r3, [r3, #20]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d106      	bne.n	800a9d6 <tcp_output+0x32>
 800a9c8:	4b98      	ldr	r3, [pc, #608]	; (800ac2c <tcp_output+0x288>)
 800a9ca:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a9ce:	499a      	ldr	r1, [pc, #616]	; (800ac38 <tcp_output+0x294>)
 800a9d0:	4898      	ldr	r0, [pc, #608]	; (800ac34 <tcp_output+0x290>)
 800a9d2:	f006 fa51 	bl	8010e78 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a9d6:	4b99      	ldr	r3, [pc, #612]	; (800ac3c <tcp_output+0x298>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d101      	bne.n	800a9e4 <tcp_output+0x40>
    return ERR_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e1ce      	b.n	800ad82 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	bf28      	it	cs
 800a9f4:	4613      	movcs	r3, r2
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10b      	bne.n	800aa1e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	8b5b      	ldrh	r3, [r3, #26]
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 81aa 	beq.w	800ad68 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fe01 	bl	800b61c <tcp_send_empty_ack>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	e1b1      	b.n	800ad82 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800aa1e:	6879      	ldr	r1, [r7, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3304      	adds	r3, #4
 800aa24:	461a      	mov	r2, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff fc66 	bl	800a2f8 <tcp_route>
 800aa2c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d102      	bne.n	800aa3a <tcp_output+0x96>
    return ERR_RTE;
 800aa34:	f06f 0303 	mvn.w	r3, #3
 800aa38:	e1a3      	b.n	800ad82 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d003      	beq.n	800aa48 <tcp_output+0xa4>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d111      	bne.n	800aa6c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <tcp_output+0xb0>
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	3304      	adds	r3, #4
 800aa52:	e000      	b.n	800aa56 <tcp_output+0xb2>
 800aa54:	2300      	movs	r3, #0
 800aa56:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d102      	bne.n	800aa64 <tcp_output+0xc0>
      return ERR_RTE;
 800aa5e:	f06f 0303 	mvn.w	r3, #3
 800aa62:	e18e      	b.n	800ad82 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7f9 fdf7 	bl	8004666 <lwip_htonl>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa82:	8912      	ldrh	r2, [r2, #8]
 800aa84:	4413      	add	r3, r2
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d227      	bcs.n	800aadc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa92:	461a      	mov	r2, r3
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d114      	bne.n	800aac4 <tcp_output+0x120>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d110      	bne.n	800aac4 <tcp_output+0x120>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10b      	bne.n	800aac4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	8b5b      	ldrh	r3, [r3, #26]
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 814d 	beq.w	800ad6c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 fda2 	bl	800b61c <tcp_send_empty_ack>
 800aad8:	4603      	mov	r3, r0
 800aada:	e152      	b.n	800ad82 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 811c 	beq.w	800ad2a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800aaf2:	e002      	b.n	800aafa <tcp_output+0x156>
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	623b      	str	r3, [r7, #32]
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1f8      	bne.n	800aaf4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ab02:	e112      	b.n	800ad2a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	899b      	ldrh	r3, [r3, #12]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7f9 fd95 	bl	800463c <lwip_htons>
 800ab12:	4603      	mov	r3, r0
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d006      	beq.n	800ab2c <tcp_output+0x188>
 800ab1e:	4b43      	ldr	r3, [pc, #268]	; (800ac2c <tcp_output+0x288>)
 800ab20:	f240 5236 	movw	r2, #1334	; 0x536
 800ab24:	4946      	ldr	r1, [pc, #280]	; (800ac40 <tcp_output+0x29c>)
 800ab26:	4843      	ldr	r0, [pc, #268]	; (800ac34 <tcp_output+0x290>)
 800ab28:	f006 f9a6 	bl	8010e78 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d01f      	beq.n	800ab74 <tcp_output+0x1d0>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	8b5b      	ldrh	r3, [r3, #26]
 800ab38:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d119      	bne.n	800ab74 <tcp_output+0x1d0>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00b      	beq.n	800ab60 <tcp_output+0x1bc>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d110      	bne.n	800ab74 <tcp_output+0x1d0>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab56:	891a      	ldrh	r2, [r3, #8]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d209      	bcs.n	800ab74 <tcp_output+0x1d0>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d004      	beq.n	800ab74 <tcp_output+0x1d0>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab70:	2b07      	cmp	r3, #7
 800ab72:	d901      	bls.n	800ab78 <tcp_output+0x1d4>
 800ab74:	2301      	movs	r3, #1
 800ab76:	e000      	b.n	800ab7a <tcp_output+0x1d6>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d106      	bne.n	800ab8c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8b5b      	ldrh	r3, [r3, #26]
 800ab82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f000 80e4 	beq.w	800ad54 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	7d1b      	ldrb	r3, [r3, #20]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d00d      	beq.n	800abb0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	899b      	ldrh	r3, [r3, #12]
 800ab9a:	b29c      	uxth	r4, r3
 800ab9c:	2010      	movs	r0, #16
 800ab9e:	f7f9 fd4d 	bl	800463c <lwip_htons>
 800aba2:	4603      	mov	r3, r0
 800aba4:	461a      	mov	r2, r3
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	4322      	orrs	r2, r4
 800abac:	b292      	uxth	r2, r2
 800abae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	6879      	ldr	r1, [r7, #4]
 800abb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abb6:	f000 f909 	bl	800adcc <tcp_output_segment>
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800abbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d009      	beq.n	800abda <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	8b5b      	ldrh	r3, [r3, #26]
 800abca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abce:	b29a      	uxth	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	835a      	strh	r2, [r3, #26]
      return err;
 800abd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abd8:	e0d3      	b.n	800ad82 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	7d1b      	ldrb	r3, [r3, #20]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d006      	beq.n	800abf8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	8b5b      	ldrh	r3, [r3, #26]
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f9 fd31 	bl	8004666 <lwip_htonl>
 800ac04:	4604      	mov	r4, r0
 800ac06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac08:	891b      	ldrh	r3, [r3, #8]
 800ac0a:	461d      	mov	r5, r3
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	899b      	ldrh	r3, [r3, #12]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7f9 fd11 	bl	800463c <lwip_htons>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00e      	beq.n	800ac44 <tcp_output+0x2a0>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e00d      	b.n	800ac46 <tcp_output+0x2a2>
 800ac2a:	bf00      	nop
 800ac2c:	08013464 	.word	0x08013464
 800ac30:	08013990 	.word	0x08013990
 800ac34:	080134b8 	.word	0x080134b8
 800ac38:	080139a8 	.word	0x080139a8
 800ac3c:	200076e0 	.word	0x200076e0
 800ac40:	080139d0 	.word	0x080139d0
 800ac44:	2300      	movs	r3, #0
 800ac46:	442b      	add	r3, r5
 800ac48:	4423      	add	r3, r4
 800ac4a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	da02      	bge.n	800ac5e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	891b      	ldrh	r3, [r3, #8]
 800ac62:	461c      	mov	r4, r3
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	899b      	ldrh	r3, [r3, #12]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f9 fce5 	bl	800463c <lwip_htons>
 800ac72:	4603      	mov	r3, r0
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <tcp_output+0x2de>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <tcp_output+0x2e0>
 800ac82:	2300      	movs	r3, #0
 800ac84:	4423      	add	r3, r4
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d049      	beq.n	800ad1e <tcp_output+0x37a>
      seg->next = NULL;
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d105      	bne.n	800aca4 <tcp_output+0x300>
        pcb->unacked = seg;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac9c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	623b      	str	r3, [r7, #32]
 800aca2:	e03f      	b.n	800ad24 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	4618      	mov	r0, r3
 800acac:	f7f9 fcdb 	bl	8004666 <lwip_htonl>
 800acb0:	4604      	mov	r4, r0
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	4618      	mov	r0, r3
 800acba:	f7f9 fcd4 	bl	8004666 <lwip_htonl>
 800acbe:	4603      	mov	r3, r0
 800acc0:	1ae3      	subs	r3, r4, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	da24      	bge.n	800ad10 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3370      	adds	r3, #112	; 0x70
 800acca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800accc:	e002      	b.n	800acd4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d011      	beq.n	800ad00 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7f9 fcbe 	bl	8004666 <lwip_htonl>
 800acea:	4604      	mov	r4, r0
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7f9 fcb7 	bl	8004666 <lwip_htonl>
 800acf8:	4603      	mov	r3, r0
 800acfa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	dbe6      	blt.n	800acce <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	e009      	b.n	800ad24 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad14:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	623b      	str	r3, [r7, #32]
 800ad1c:	e002      	b.n	800ad24 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ad1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad20:	f7fc fb77 	bl	8007412 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad28:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d012      	beq.n	800ad56 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f9 fc95 	bl	8004666 <lwip_htonl>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad46:	8912      	ldrh	r2, [r2, #8]
 800ad48:	4413      	add	r3, r2
  while (seg != NULL &&
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	f4bf aed9 	bcs.w	800ab04 <tcp_output+0x160>
 800ad52:	e000      	b.n	800ad56 <tcp_output+0x3b2>
      break;
 800ad54:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d108      	bne.n	800ad70 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ad66:	e004      	b.n	800ad72 <tcp_output+0x3ce>
    goto output_done;
 800ad68:	bf00      	nop
 800ad6a:	e002      	b.n	800ad72 <tcp_output+0x3ce>
    goto output_done;
 800ad6c:	bf00      	nop
 800ad6e:	e000      	b.n	800ad72 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ad70:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	8b5b      	ldrh	r3, [r3, #26]
 800ad76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3728      	adds	r7, #40	; 0x28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bdb0      	pop	{r4, r5, r7, pc}
 800ad8a:	bf00      	nop

0800ad8c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d106      	bne.n	800ada8 <tcp_output_segment_busy+0x1c>
 800ad9a:	4b09      	ldr	r3, [pc, #36]	; (800adc0 <tcp_output_segment_busy+0x34>)
 800ad9c:	f240 529a 	movw	r2, #1434	; 0x59a
 800ada0:	4908      	ldr	r1, [pc, #32]	; (800adc4 <tcp_output_segment_busy+0x38>)
 800ada2:	4809      	ldr	r0, [pc, #36]	; (800adc8 <tcp_output_segment_busy+0x3c>)
 800ada4:	f006 f868 	bl	8010e78 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	7b9b      	ldrb	r3, [r3, #14]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d001      	beq.n	800adb6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e000      	b.n	800adb8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	08013464 	.word	0x08013464
 800adc4:	080139e8 	.word	0x080139e8
 800adc8:	080134b8 	.word	0x080134b8

0800adcc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800adcc:	b5b0      	push	{r4, r5, r7, lr}
 800adce:	b08c      	sub	sp, #48	; 0x30
 800add0:	af04      	add	r7, sp, #16
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <tcp_output_segment+0x20>
 800adde:	4b70      	ldr	r3, [pc, #448]	; (800afa0 <tcp_output_segment+0x1d4>)
 800ade0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ade4:	496f      	ldr	r1, [pc, #444]	; (800afa4 <tcp_output_segment+0x1d8>)
 800ade6:	4870      	ldr	r0, [pc, #448]	; (800afa8 <tcp_output_segment+0x1dc>)
 800ade8:	f006 f846 	bl	8010e78 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <tcp_output_segment+0x34>
 800adf2:	4b6b      	ldr	r3, [pc, #428]	; (800afa0 <tcp_output_segment+0x1d4>)
 800adf4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800adf8:	496c      	ldr	r1, [pc, #432]	; (800afac <tcp_output_segment+0x1e0>)
 800adfa:	486b      	ldr	r0, [pc, #428]	; (800afa8 <tcp_output_segment+0x1dc>)
 800adfc:	f006 f83c 	bl	8010e78 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d106      	bne.n	800ae14 <tcp_output_segment+0x48>
 800ae06:	4b66      	ldr	r3, [pc, #408]	; (800afa0 <tcp_output_segment+0x1d4>)
 800ae08:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ae0c:	4968      	ldr	r1, [pc, #416]	; (800afb0 <tcp_output_segment+0x1e4>)
 800ae0e:	4866      	ldr	r0, [pc, #408]	; (800afa8 <tcp_output_segment+0x1dc>)
 800ae10:	f006 f832 	bl	8010e78 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7ff ffb9 	bl	800ad8c <tcp_output_segment_busy>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	e0b9      	b.n	800af98 <tcp_output_segment+0x1cc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	68dc      	ldr	r4, [r3, #12]
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	f7f9 fc1a 	bl	8004666 <lwip_htonl>
 800ae32:	4603      	mov	r3, r0
 800ae34:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	68dc      	ldr	r4, [r3, #12]
 800ae3e:	4610      	mov	r0, r2
 800ae40:	f7f9 fbfc 	bl	800463c <lwip_htons>
 800ae44:	4603      	mov	r3, r0
 800ae46:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ae50:	441a      	add	r2, r3
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	3314      	adds	r3, #20
 800ae5c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	7a9b      	ldrb	r3, [r3, #10]
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d015      	beq.n	800ae96 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	461a      	mov	r2, r3
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ae76:	f7fc fded 	bl	8007a54 <tcp_eff_send_mss_netif>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ae7e:	8b7b      	ldrh	r3, [r7, #26]
 800ae80:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7f9 fbee 	bl	8004666 <lwip_htonl>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	3304      	adds	r3, #4
 800ae94:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	da02      	bge.n	800aea6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2200      	movs	r2, #0
 800aea4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10c      	bne.n	800aec8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800aeae:	4b41      	ldr	r3, [pc, #260]	; (800afb4 <tcp_output_segment+0x1e8>)
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7f9 fbd2 	bl	8004666 <lwip_htonl>
 800aec2:	4602      	mov	r2, r0
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	8959      	ldrh	r1, [r3, #10]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	8b3a      	ldrh	r2, [r7, #24]
 800aee2:	1a8a      	subs	r2, r1, r2
 800aee4:	b292      	uxth	r2, r2
 800aee6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	8919      	ldrh	r1, [r3, #8]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	8b3a      	ldrh	r2, [r7, #24]
 800aef4:	1a8a      	subs	r2, r1, r2
 800aef6:	b292      	uxth	r2, r2
 800aef8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	68d2      	ldr	r2, [r2, #12]
 800af02:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	741a      	strb	r2, [r3, #16]
 800af0c:	2200      	movs	r2, #0
 800af0e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	f103 0214 	add.w	r2, r3, #20
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	7a9b      	ldrb	r3, [r3, #10]
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	f003 0304 	and.w	r3, r3, #4
 800af22:	4413      	add	r3, r2
 800af24:	69fa      	ldr	r2, [r7, #28]
 800af26:	429a      	cmp	r2, r3
 800af28:	d006      	beq.n	800af38 <tcp_output_segment+0x16c>
 800af2a:	4b1d      	ldr	r3, [pc, #116]	; (800afa0 <tcp_output_segment+0x1d4>)
 800af2c:	f240 621c 	movw	r2, #1564	; 0x61c
 800af30:	4921      	ldr	r1, [pc, #132]	; (800afb8 <tcp_output_segment+0x1ec>)
 800af32:	481d      	ldr	r0, [pc, #116]	; (800afa8 <tcp_output_segment+0x1dc>)
 800af34:	f005 ffa0 	bl	8010e78 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800af40:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800af42:	68bd      	ldr	r5, [r7, #8]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	68d4      	ldr	r4, [r2, #12]
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	462b      	mov	r3, r5
 800af50:	460a      	mov	r2, r1
 800af52:	2106      	movs	r1, #6
 800af54:	f7f9 fca4 	bl	80048a0 <ip_chksum_pseudo>
 800af58:	4603      	mov	r3, r0
 800af5a:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800af5c:	4b17      	ldr	r3, [pc, #92]	; (800afbc <tcp_output_segment+0x1f0>)
 800af5e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800af62:	3301      	adds	r3, #1
 800af64:	b29a      	uxth	r2, r3
 800af66:	4b15      	ldr	r3, [pc, #84]	; (800afbc <tcp_output_segment+0x1f0>)
 800af68:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6858      	ldr	r0, [r3, #4]
 800af70:	68b9      	ldr	r1, [r7, #8]
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	1d1c      	adds	r4, r3, #4
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	7add      	ldrb	r5, [r3, #11]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	7a9b      	ldrb	r3, [r3, #10]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	9202      	str	r2, [sp, #8]
 800af82:	2206      	movs	r2, #6
 800af84:	9201      	str	r2, [sp, #4]
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	462b      	mov	r3, r5
 800af8a:	4622      	mov	r2, r4
 800af8c:	f004 fd82 	bl	800fa94 <ip4_output_if>
 800af90:	4603      	mov	r3, r0
 800af92:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800af94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3720      	adds	r7, #32
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bdb0      	pop	{r4, r5, r7, pc}
 800afa0:	08013464 	.word	0x08013464
 800afa4:	08013a10 	.word	0x08013a10
 800afa8:	080134b8 	.word	0x080134b8
 800afac:	08013a30 	.word	0x08013a30
 800afb0:	08013a50 	.word	0x08013a50
 800afb4:	200076d0 	.word	0x200076d0
 800afb8:	08013a74 	.word	0x08013a74
 800afbc:	200075f0 	.word	0x200075f0

0800afc0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800afc0:	b5b0      	push	{r4, r5, r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <tcp_rexmit_rto_prepare+0x1c>
 800afce:	4b31      	ldr	r3, [pc, #196]	; (800b094 <tcp_rexmit_rto_prepare+0xd4>)
 800afd0:	f240 6263 	movw	r2, #1635	; 0x663
 800afd4:	4930      	ldr	r1, [pc, #192]	; (800b098 <tcp_rexmit_rto_prepare+0xd8>)
 800afd6:	4831      	ldr	r0, [pc, #196]	; (800b09c <tcp_rexmit_rto_prepare+0xdc>)
 800afd8:	f005 ff4e 	bl	8010e78 <iprintf>

  if (pcb->unacked == NULL) {
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800afe4:	f06f 0305 	mvn.w	r3, #5
 800afe8:	e050      	b.n	800b08c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	e00b      	b.n	800b00a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f7ff feca 	bl	800ad8c <tcp_output_segment_busy>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d002      	beq.n	800b004 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800affe:	f06f 0305 	mvn.w	r3, #5
 800b002:	e043      	b.n	800b08c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	60fb      	str	r3, [r7, #12]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1ef      	bne.n	800aff2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7ff feba 	bl	800ad8c <tcp_output_segment_busy>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b01e:	f06f 0305 	mvn.w	r3, #5
 800b022:	e033      	b.n	800b08c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	8b5b      	ldrh	r3, [r3, #26]
 800b03e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7f9 fb09 	bl	8004666 <lwip_htonl>
 800b054:	4604      	mov	r4, r0
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	891b      	ldrh	r3, [r3, #8]
 800b05a:	461d      	mov	r5, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	899b      	ldrh	r3, [r3, #12]
 800b062:	b29b      	uxth	r3, r3
 800b064:	4618      	mov	r0, r3
 800b066:	f7f9 fae9 	bl	800463c <lwip_htons>
 800b06a:	4603      	mov	r3, r0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	f003 0303 	and.w	r3, r3, #3
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <tcp_rexmit_rto_prepare+0xba>
 800b076:	2301      	movs	r3, #1
 800b078:	e000      	b.n	800b07c <tcp_rexmit_rto_prepare+0xbc>
 800b07a:	2300      	movs	r3, #0
 800b07c:	442b      	add	r3, r5
 800b07e:	18e2      	adds	r2, r4, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bdb0      	pop	{r4, r5, r7, pc}
 800b094:	08013464 	.word	0x08013464
 800b098:	08013a88 	.word	0x08013a88
 800b09c:	080134b8 	.word	0x080134b8

0800b0a0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <tcp_rexmit_rto_commit+0x1c>
 800b0ae:	4b0d      	ldr	r3, [pc, #52]	; (800b0e4 <tcp_rexmit_rto_commit+0x44>)
 800b0b0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b0b4:	490c      	ldr	r1, [pc, #48]	; (800b0e8 <tcp_rexmit_rto_commit+0x48>)
 800b0b6:	480d      	ldr	r0, [pc, #52]	; (800b0ec <tcp_rexmit_rto_commit+0x4c>)
 800b0b8:	f005 fede 	bl	8010e78 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0c2:	2bff      	cmp	r3, #255	; 0xff
 800b0c4:	d007      	beq.n	800b0d6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff fc64 	bl	800a9a4 <tcp_output>
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	08013464 	.word	0x08013464
 800b0e8:	08013aac 	.word	0x08013aac
 800b0ec:	080134b8 	.word	0x080134b8

0800b0f0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <tcp_rexmit_rto+0x1c>
 800b0fe:	4b0a      	ldr	r3, [pc, #40]	; (800b128 <tcp_rexmit_rto+0x38>)
 800b100:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b104:	4909      	ldr	r1, [pc, #36]	; (800b12c <tcp_rexmit_rto+0x3c>)
 800b106:	480a      	ldr	r0, [pc, #40]	; (800b130 <tcp_rexmit_rto+0x40>)
 800b108:	f005 feb6 	bl	8010e78 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff ff57 	bl	800afc0 <tcp_rexmit_rto_prepare>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d102      	bne.n	800b11e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff ffc1 	bl	800b0a0 <tcp_rexmit_rto_commit>
  }
}
 800b11e:	bf00      	nop
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	08013464 	.word	0x08013464
 800b12c:	08013ad0 	.word	0x08013ad0
 800b130:	080134b8 	.word	0x080134b8

0800b134 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b134:	b590      	push	{r4, r7, lr}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d106      	bne.n	800b150 <tcp_rexmit+0x1c>
 800b142:	4b2f      	ldr	r3, [pc, #188]	; (800b200 <tcp_rexmit+0xcc>)
 800b144:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b148:	492e      	ldr	r1, [pc, #184]	; (800b204 <tcp_rexmit+0xd0>)
 800b14a:	482f      	ldr	r0, [pc, #188]	; (800b208 <tcp_rexmit+0xd4>)
 800b14c:	f005 fe94 	bl	8010e78 <iprintf>

  if (pcb->unacked == NULL) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b154:	2b00      	cmp	r3, #0
 800b156:	d102      	bne.n	800b15e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b158:	f06f 0305 	mvn.w	r3, #5
 800b15c:	e04c      	b.n	800b1f8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b162:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b164:	68b8      	ldr	r0, [r7, #8]
 800b166:	f7ff fe11 	bl	800ad8c <tcp_output_segment_busy>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b170:	f06f 0305 	mvn.w	r3, #5
 800b174:	e040      	b.n	800b1f8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	336c      	adds	r3, #108	; 0x6c
 800b182:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b184:	e002      	b.n	800b18c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d011      	beq.n	800b1b8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7f9 fa62 	bl	8004666 <lwip_htonl>
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7f9 fa5b 	bl	8004666 <lwip_htonl>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dbe6      	blt.n	800b186 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d103      	bne.n	800b1d6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1dc:	2bff      	cmp	r3, #255	; 0xff
 800b1de:	d007      	beq.n	800b1f0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd90      	pop	{r4, r7, pc}
 800b200:	08013464 	.word	0x08013464
 800b204:	08013aec 	.word	0x08013aec
 800b208:	080134b8 	.word	0x080134b8

0800b20c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <tcp_rexmit_fast+0x1c>
 800b21a:	4b2a      	ldr	r3, [pc, #168]	; (800b2c4 <tcp_rexmit_fast+0xb8>)
 800b21c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b220:	4929      	ldr	r1, [pc, #164]	; (800b2c8 <tcp_rexmit_fast+0xbc>)
 800b222:	482a      	ldr	r0, [pc, #168]	; (800b2cc <tcp_rexmit_fast+0xc0>)
 800b224:	f005 fe28 	bl	8010e78 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d045      	beq.n	800b2bc <tcp_rexmit_fast+0xb0>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	8b5b      	ldrh	r3, [r3, #26]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d13f      	bne.n	800b2bc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff ff79 	bl	800b134 <tcp_rexmit>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d139      	bne.n	800b2bc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b254:	4293      	cmp	r3, r2
 800b256:	bf28      	it	cs
 800b258:	4613      	movcs	r3, r2
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	da00      	bge.n	800b262 <tcp_rexmit_fast+0x56>
 800b260:	3301      	adds	r3, #1
 800b262:	105b      	asrs	r3, r3, #1
 800b264:	b29a      	uxth	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b272:	461a      	mov	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d206      	bcs.n	800b28c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	b29a      	uxth	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b296:	4619      	mov	r1, r3
 800b298:	0049      	lsls	r1, r1, #1
 800b29a:	440b      	add	r3, r1
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	4413      	add	r3, r2
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	8b5b      	ldrh	r3, [r3, #26]
 800b2ac:	f043 0304 	orr.w	r3, r3, #4
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	08013464 	.word	0x08013464
 800b2c8:	08013b04 	.word	0x08013b04
 800b2cc:	080134b8 	.word	0x080134b8

0800b2d0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	607b      	str	r3, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	817b      	strh	r3, [r7, #10]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b2e2:	897a      	ldrh	r2, [r7, #10]
 800b2e4:	893b      	ldrh	r3, [r7, #8]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	3314      	adds	r3, #20
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	2022      	movs	r0, #34	; 0x22
 800b2f6:	f7fa fb61 	bl	80059bc <pbuf_alloc>
 800b2fa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d04d      	beq.n	800b39e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b302:	897b      	ldrh	r3, [r7, #10]
 800b304:	3313      	adds	r3, #19
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	8952      	ldrh	r2, [r2, #10]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	db06      	blt.n	800b31c <tcp_output_alloc_header_common+0x4c>
 800b30e:	4b26      	ldr	r3, [pc, #152]	; (800b3a8 <tcp_output_alloc_header_common+0xd8>)
 800b310:	f240 7223 	movw	r2, #1827	; 0x723
 800b314:	4925      	ldr	r1, [pc, #148]	; (800b3ac <tcp_output_alloc_header_common+0xdc>)
 800b316:	4826      	ldr	r0, [pc, #152]	; (800b3b0 <tcp_output_alloc_header_common+0xe0>)
 800b318:	f005 fdae 	bl	8010e78 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b322:	8c3b      	ldrh	r3, [r7, #32]
 800b324:	4618      	mov	r0, r3
 800b326:	f7f9 f989 	bl	800463c <lwip_htons>
 800b32a:	4603      	mov	r3, r0
 800b32c:	461a      	mov	r2, r3
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b334:	4618      	mov	r0, r3
 800b336:	f7f9 f981 	bl	800463c <lwip_htons>
 800b33a:	4603      	mov	r3, r0
 800b33c:	461a      	mov	r2, r3
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f7f9 f98c 	bl	8004666 <lwip_htonl>
 800b34e:	4602      	mov	r2, r0
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b354:	897b      	ldrh	r3, [r7, #10]
 800b356:	089b      	lsrs	r3, r3, #2
 800b358:	b29b      	uxth	r3, r3
 800b35a:	3305      	adds	r3, #5
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	031b      	lsls	r3, r3, #12
 800b360:	b29a      	uxth	r2, r3
 800b362:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b366:	b29b      	uxth	r3, r3
 800b368:	4313      	orrs	r3, r2
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f9 f965 	bl	800463c <lwip_htons>
 800b372:	4603      	mov	r3, r0
 800b374:	461a      	mov	r2, r3
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b37a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7f9 f95d 	bl	800463c <lwip_htons>
 800b382:	4603      	mov	r3, r0
 800b384:	461a      	mov	r2, r3
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	2200      	movs	r2, #0
 800b38e:	741a      	strb	r2, [r3, #16]
 800b390:	2200      	movs	r2, #0
 800b392:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	2200      	movs	r2, #0
 800b398:	749a      	strb	r2, [r3, #18]
 800b39a:	2200      	movs	r2, #0
 800b39c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b39e:	697b      	ldr	r3, [r7, #20]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	08013464 	.word	0x08013464
 800b3ac:	08013b24 	.word	0x08013b24
 800b3b0:	080134b8 	.word	0x080134b8

0800b3b4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b3b4:	b5b0      	push	{r4, r5, r7, lr}
 800b3b6:	b08a      	sub	sp, #40	; 0x28
 800b3b8:	af04      	add	r7, sp, #16
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	607b      	str	r3, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	817b      	strh	r3, [r7, #10]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d106      	bne.n	800b3da <tcp_output_alloc_header+0x26>
 800b3cc:	4b15      	ldr	r3, [pc, #84]	; (800b424 <tcp_output_alloc_header+0x70>)
 800b3ce:	f240 7242 	movw	r2, #1858	; 0x742
 800b3d2:	4915      	ldr	r1, [pc, #84]	; (800b428 <tcp_output_alloc_header+0x74>)
 800b3d4:	4815      	ldr	r0, [pc, #84]	; (800b42c <tcp_output_alloc_header+0x78>)
 800b3d6:	f005 fd4f 	bl	8010e78 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	8adb      	ldrh	r3, [r3, #22]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	8b12      	ldrh	r2, [r2, #24]
 800b3e6:	68f9      	ldr	r1, [r7, #12]
 800b3e8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b3ea:	893d      	ldrh	r5, [r7, #8]
 800b3ec:	897c      	ldrh	r4, [r7, #10]
 800b3ee:	9103      	str	r1, [sp, #12]
 800b3f0:	2110      	movs	r1, #16
 800b3f2:	9102      	str	r1, [sp, #8]
 800b3f4:	9201      	str	r2, [sp, #4]
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	f7ff ff67 	bl	800b2d0 <tcp_output_alloc_header_common>
 800b402:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d006      	beq.n	800b418 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b412:	441a      	add	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b418:	697b      	ldr	r3, [r7, #20]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bdb0      	pop	{r4, r5, r7, pc}
 800b422:	bf00      	nop
 800b424:	08013464 	.word	0x08013464
 800b428:	08013b54 	.word	0x08013b54
 800b42c:	080134b8 	.word	0x080134b8

0800b430 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b088      	sub	sp, #32
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	4611      	mov	r1, r2
 800b43c:	461a      	mov	r2, r3
 800b43e:	460b      	mov	r3, r1
 800b440:	71fb      	strb	r3, [r7, #7]
 800b442:	4613      	mov	r3, r2
 800b444:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <tcp_output_fill_options+0x2e>
 800b450:	4b13      	ldr	r3, [pc, #76]	; (800b4a0 <tcp_output_fill_options+0x70>)
 800b452:	f240 7256 	movw	r2, #1878	; 0x756
 800b456:	4913      	ldr	r1, [pc, #76]	; (800b4a4 <tcp_output_fill_options+0x74>)
 800b458:	4813      	ldr	r0, [pc, #76]	; (800b4a8 <tcp_output_fill_options+0x78>)
 800b45a:	f005 fd0d 	bl	8010e78 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	3314      	adds	r3, #20
 800b468:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	f103 0214 	add.w	r2, r3, #20
 800b470:	8bfb      	ldrh	r3, [r7, #30]
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4619      	mov	r1, r3
 800b476:	79fb      	ldrb	r3, [r7, #7]
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	f003 0304 	and.w	r3, r3, #4
 800b47e:	440b      	add	r3, r1
 800b480:	4413      	add	r3, r2
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	429a      	cmp	r2, r3
 800b486:	d006      	beq.n	800b496 <tcp_output_fill_options+0x66>
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <tcp_output_fill_options+0x70>)
 800b48a:	f240 7275 	movw	r2, #1909	; 0x775
 800b48e:	4907      	ldr	r1, [pc, #28]	; (800b4ac <tcp_output_fill_options+0x7c>)
 800b490:	4805      	ldr	r0, [pc, #20]	; (800b4a8 <tcp_output_fill_options+0x78>)
 800b492:	f005 fcf1 	bl	8010e78 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b496:	bf00      	nop
 800b498:	3720      	adds	r7, #32
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	08013464 	.word	0x08013464
 800b4a4:	08013b7c 	.word	0x08013b7c
 800b4a8:	080134b8 	.word	0x080134b8
 800b4ac:	08013a74 	.word	0x08013a74

0800b4b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08c      	sub	sp, #48	; 0x30
 800b4b4:	af04      	add	r7, sp, #16
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <tcp_output_control_segment+0x22>
 800b4c4:	4b28      	ldr	r3, [pc, #160]	; (800b568 <tcp_output_control_segment+0xb8>)
 800b4c6:	f240 7287 	movw	r2, #1927	; 0x787
 800b4ca:	4928      	ldr	r1, [pc, #160]	; (800b56c <tcp_output_control_segment+0xbc>)
 800b4cc:	4828      	ldr	r0, [pc, #160]	; (800b570 <tcp_output_control_segment+0xc0>)
 800b4ce:	f005 fcd3 	bl	8010e78 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7fe ff0e 	bl	800a2f8 <tcp_route>
 800b4dc:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b4e4:	23fc      	movs	r3, #252	; 0xfc
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e034      	b.n	800b554 <tcp_output_control_segment+0xa4>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	891a      	ldrh	r2, [r3, #8]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2106      	movs	r1, #6
 800b4fc:	68b8      	ldr	r0, [r7, #8]
 800b4fe:	f7f9 f9cf 	bl	80048a0 <ip_chksum_pseudo>
 800b502:	4603      	mov	r3, r0
 800b504:	461a      	mov	r2, r3
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d006      	beq.n	800b51e <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	7adb      	ldrb	r3, [r3, #11]
 800b514:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	7a9b      	ldrb	r3, [r3, #10]
 800b51a:	777b      	strb	r3, [r7, #29]
 800b51c:	e003      	b.n	800b526 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b51e:	23ff      	movs	r3, #255	; 0xff
 800b520:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 800b526:	4b13      	ldr	r3, [pc, #76]	; (800b574 <tcp_output_control_segment+0xc4>)
 800b528:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800b52c:	3301      	adds	r3, #1
 800b52e:	b29a      	uxth	r2, r3
 800b530:	4b10      	ldr	r3, [pc, #64]	; (800b574 <tcp_output_control_segment+0xc4>)
 800b532:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b536:	7fba      	ldrb	r2, [r7, #30]
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	9302      	str	r3, [sp, #8]
 800b53c:	2306      	movs	r3, #6
 800b53e:	9301      	str	r3, [sp, #4]
 800b540:	7f7b      	ldrb	r3, [r7, #29]
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	4613      	mov	r3, r2
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	6879      	ldr	r1, [r7, #4]
 800b54a:	68b8      	ldr	r0, [r7, #8]
 800b54c:	f004 faa2 	bl	800fa94 <ip4_output_if>
 800b550:	4603      	mov	r3, r0
 800b552:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b554:	68b8      	ldr	r0, [r7, #8]
 800b556:	f7fa fcd1 	bl	8005efc <pbuf_free>
  return err;
 800b55a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3720      	adds	r7, #32
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	08013464 	.word	0x08013464
 800b56c:	08013ba4 	.word	0x08013ba4
 800b570:	080134b8 	.word	0x080134b8
 800b574:	200075f0 	.word	0x200075f0

0800b578 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b578:	b590      	push	{r4, r7, lr}
 800b57a:	b08b      	sub	sp, #44	; 0x2c
 800b57c:	af04      	add	r7, sp, #16
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d106      	bne.n	800b59a <tcp_rst+0x22>
 800b58c:	4b1f      	ldr	r3, [pc, #124]	; (800b60c <tcp_rst+0x94>)
 800b58e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b592:	491f      	ldr	r1, [pc, #124]	; (800b610 <tcp_rst+0x98>)
 800b594:	481f      	ldr	r0, [pc, #124]	; (800b614 <tcp_rst+0x9c>)
 800b596:	f005 fc6f 	bl	8010e78 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d106      	bne.n	800b5ae <tcp_rst+0x36>
 800b5a0:	4b1a      	ldr	r3, [pc, #104]	; (800b60c <tcp_rst+0x94>)
 800b5a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b5a6:	491c      	ldr	r1, [pc, #112]	; (800b618 <tcp_rst+0xa0>)
 800b5a8:	481a      	ldr	r0, [pc, #104]	; (800b614 <tcp_rst+0x9c>)
 800b5aa:	f005 fc65 	bl	8010e78 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b5b2:	f246 0308 	movw	r3, #24584	; 0x6008
 800b5b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ba:	b29c      	uxth	r4, r3
 800b5bc:	68b8      	ldr	r0, [r7, #8]
 800b5be:	f7f9 f852 	bl	8004666 <lwip_htonl>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	8abb      	ldrh	r3, [r7, #20]
 800b5c6:	9303      	str	r3, [sp, #12]
 800b5c8:	2314      	movs	r3, #20
 800b5ca:	9302      	str	r3, [sp, #8]
 800b5cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4621      	mov	r1, r4
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7ff fe78 	bl	800b2d0 <tcp_output_alloc_header_common>
 800b5e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00c      	beq.n	800b602 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	6939      	ldr	r1, [r7, #16]
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7ff ff1e 	bl	800b430 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	6939      	ldr	r1, [r7, #16]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7ff ff58 	bl	800b4b0 <tcp_output_control_segment>
 800b600:	e000      	b.n	800b604 <tcp_rst+0x8c>
    return;
 800b602:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	bd90      	pop	{r4, r7, pc}
 800b60a:	bf00      	nop
 800b60c:	08013464 	.word	0x08013464
 800b610:	08013bd0 	.word	0x08013bd0
 800b614:	080134b8 	.word	0x080134b8
 800b618:	08013bec 	.word	0x08013bec

0800b61c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b087      	sub	sp, #28
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d106      	bne.n	800b640 <tcp_send_empty_ack+0x24>
 800b632:	4b28      	ldr	r3, [pc, #160]	; (800b6d4 <tcp_send_empty_ack+0xb8>)
 800b634:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b638:	4927      	ldr	r1, [pc, #156]	; (800b6d8 <tcp_send_empty_ack+0xbc>)
 800b63a:	4828      	ldr	r0, [pc, #160]	; (800b6dc <tcp_send_empty_ack+0xc0>)
 800b63c:	f005 fc1c 	bl	8010e78 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b640:	7dfb      	ldrb	r3, [r7, #23]
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	b2db      	uxtb	r3, r3
 800b646:	f003 0304 	and.w	r3, r3, #4
 800b64a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b64c:	7d7b      	ldrb	r3, [r7, #21]
 800b64e:	b29c      	uxth	r4, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b654:	4618      	mov	r0, r3
 800b656:	f7f9 f806 	bl	8004666 <lwip_htonl>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2200      	movs	r2, #0
 800b65e:	4621      	mov	r1, r4
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff fea7 	bl	800b3b4 <tcp_output_alloc_header>
 800b666:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d109      	bne.n	800b682 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	8b5b      	ldrh	r3, [r3, #26]
 800b672:	f043 0303 	orr.w	r3, r3, #3
 800b676:	b29a      	uxth	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b67c:	f06f 0301 	mvn.w	r3, #1
 800b680:	e023      	b.n	800b6ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b682:	7dbb      	ldrb	r3, [r7, #22]
 800b684:	7dfa      	ldrb	r2, [r7, #23]
 800b686:	6939      	ldr	r1, [r7, #16]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff fed1 	bl	800b430 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3304      	adds	r3, #4
 800b694:	6939      	ldr	r1, [r7, #16]
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff ff0a 	bl	800b4b0 <tcp_output_control_segment>
 800b69c:	4603      	mov	r3, r0
 800b69e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b6a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	8b5b      	ldrh	r3, [r3, #26]
 800b6ac:	f043 0303 	orr.w	r3, r3, #3
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	835a      	strh	r2, [r3, #26]
 800b6b6:	e006      	b.n	800b6c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	8b5b      	ldrh	r3, [r3, #26]
 800b6bc:	f023 0303 	bic.w	r3, r3, #3
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	371c      	adds	r7, #28
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd90      	pop	{r4, r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	08013464 	.word	0x08013464
 800b6d8:	08013c08 	.word	0x08013c08
 800b6dc:	080134b8 	.word	0x080134b8

0800b6e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b6e0:	b590      	push	{r4, r7, lr}
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d106      	bne.n	800b700 <tcp_keepalive+0x20>
 800b6f2:	4b18      	ldr	r3, [pc, #96]	; (800b754 <tcp_keepalive+0x74>)
 800b6f4:	f640 0224 	movw	r2, #2084	; 0x824
 800b6f8:	4917      	ldr	r1, [pc, #92]	; (800b758 <tcp_keepalive+0x78>)
 800b6fa:	4818      	ldr	r0, [pc, #96]	; (800b75c <tcp_keepalive+0x7c>)
 800b6fc:	f005 fbbc 	bl	8010e78 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	b29c      	uxth	r4, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b708:	3b01      	subs	r3, #1
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7f8 ffab 	bl	8004666 <lwip_htonl>
 800b710:	4603      	mov	r3, r0
 800b712:	2200      	movs	r2, #0
 800b714:	4621      	mov	r1, r4
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff fe4c 	bl	800b3b4 <tcp_output_alloc_header>
 800b71c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d102      	bne.n	800b72a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b724:	f04f 33ff 	mov.w	r3, #4294967295
 800b728:	e010      	b.n	800b74c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	2200      	movs	r2, #0
 800b72e:	6939      	ldr	r1, [r7, #16]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff fe7d 	bl	800b430 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3304      	adds	r3, #4
 800b73c:	6939      	ldr	r1, [r7, #16]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff feb6 	bl	800b4b0 <tcp_output_control_segment>
 800b744:	4603      	mov	r3, r0
 800b746:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	371c      	adds	r7, #28
 800b750:	46bd      	mov	sp, r7
 800b752:	bd90      	pop	{r4, r7, pc}
 800b754:	08013464 	.word	0x08013464
 800b758:	08013c28 	.word	0x08013c28
 800b75c:	080134b8 	.word	0x080134b8

0800b760 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b08b      	sub	sp, #44	; 0x2c
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b768:	2300      	movs	r3, #0
 800b76a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d106      	bne.n	800b782 <tcp_zero_window_probe+0x22>
 800b774:	4b4c      	ldr	r3, [pc, #304]	; (800b8a8 <tcp_zero_window_probe+0x148>)
 800b776:	f640 024f 	movw	r2, #2127	; 0x84f
 800b77a:	494c      	ldr	r1, [pc, #304]	; (800b8ac <tcp_zero_window_probe+0x14c>)
 800b77c:	484c      	ldr	r0, [pc, #304]	; (800b8b0 <tcp_zero_window_probe+0x150>)
 800b77e:	f005 fb7b 	bl	8010e78 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b786:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	e086      	b.n	800b8a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b798:	2bff      	cmp	r3, #255	; 0xff
 800b79a:	d007      	beq.n	800b7ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	b2da      	uxtb	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	899b      	ldrh	r3, [r3, #12]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7f8 ff41 	bl	800463c <lwip_htons>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	f003 0301 	and.w	r3, r3, #1
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d005      	beq.n	800b7d2 <tcp_zero_window_probe+0x72>
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	891b      	ldrh	r3, [r3, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <tcp_zero_window_probe+0x72>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <tcp_zero_window_probe+0x74>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b7d6:	7ffb      	ldrb	r3, [r7, #31]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	bf0c      	ite	eq
 800b7dc:	2301      	moveq	r3, #1
 800b7de:	2300      	movne	r3, #0
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e8:	b299      	uxth	r1, r3
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	8bba      	ldrh	r2, [r7, #28]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7ff fdde 	bl	800b3b4 <tcp_output_alloc_header>
 800b7f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d102      	bne.n	800b806 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b800:	f04f 33ff 	mov.w	r3, #4294967295
 800b804:	e04c      	b.n	800b8a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b80c:	7ffb      	ldrb	r3, [r7, #31]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d011      	beq.n	800b836 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	899b      	ldrh	r3, [r3, #12]
 800b816:	b29b      	uxth	r3, r3
 800b818:	b21b      	sxth	r3, r3
 800b81a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b81e:	b21c      	sxth	r4, r3
 800b820:	2011      	movs	r0, #17
 800b822:	f7f8 ff0b 	bl	800463c <lwip_htons>
 800b826:	4603      	mov	r3, r0
 800b828:	b21b      	sxth	r3, r3
 800b82a:	4323      	orrs	r3, r4
 800b82c:	b21b      	sxth	r3, r3
 800b82e:	b29a      	uxth	r2, r3
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	819a      	strh	r2, [r3, #12]
 800b834:	e010      	b.n	800b858 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	3314      	adds	r3, #20
 800b83c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b83e:	6a3b      	ldr	r3, [r7, #32]
 800b840:	6858      	ldr	r0, [r3, #4]
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	891a      	ldrh	r2, [r3, #8]
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	891b      	ldrh	r3, [r3, #8]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	b29b      	uxth	r3, r3
 800b850:	2201      	movs	r2, #1
 800b852:	6939      	ldr	r1, [r7, #16]
 800b854:	f7fa fd4c 	bl	80062f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7f8 ff01 	bl	8004666 <lwip_htonl>
 800b864:	4603      	mov	r3, r0
 800b866:	3301      	adds	r3, #1
 800b868:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	da02      	bge.n	800b87c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b880:	2200      	movs	r2, #0
 800b882:	69b9      	ldr	r1, [r7, #24]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff fdd3 	bl	800b430 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3304      	adds	r3, #4
 800b890:	69b9      	ldr	r1, [r7, #24]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fe0c 	bl	800b4b0 <tcp_output_control_segment>
 800b898:	4603      	mov	r3, r0
 800b89a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b89c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	372c      	adds	r7, #44	; 0x2c
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd90      	pop	{r4, r7, pc}
 800b8a8:	08013464 	.word	0x08013464
 800b8ac:	08013c44 	.word	0x08013c44
 800b8b0:	080134b8 	.word	0x080134b8

0800b8b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b8bc:	f7fa fe0e 	bl	80064dc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b8c0:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <tcpip_tcp_timer+0x38>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d103      	bne.n	800b8d0 <tcpip_tcp_timer+0x1c>
 800b8c8:	4b09      	ldr	r3, [pc, #36]	; (800b8f0 <tcpip_tcp_timer+0x3c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d005      	beq.n	800b8dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	4908      	ldr	r1, [pc, #32]	; (800b8f4 <tcpip_tcp_timer+0x40>)
 800b8d4:	20fa      	movs	r0, #250	; 0xfa
 800b8d6:	f000 f8f3 	bl	800bac0 <sys_timeout>
 800b8da:	e003      	b.n	800b8e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b8dc:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <tcpip_tcp_timer+0x44>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	601a      	str	r2, [r3, #0]
  }
}
 800b8e2:	bf00      	nop
 800b8e4:	bf00      	nop
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	200076cc 	.word	0x200076cc
 800b8f0:	200076dc 	.word	0x200076dc
 800b8f4:	0800b8b5 	.word	0x0800b8b5
 800b8f8:	20000178 	.word	0x20000178

0800b8fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b900:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <tcp_timer_needed+0x30>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d10f      	bne.n	800b928 <tcp_timer_needed+0x2c>
 800b908:	4b09      	ldr	r3, [pc, #36]	; (800b930 <tcp_timer_needed+0x34>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <tcp_timer_needed+0x1c>
 800b910:	4b08      	ldr	r3, [pc, #32]	; (800b934 <tcp_timer_needed+0x38>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <tcp_timer_needed+0x30>)
 800b91a:	2201      	movs	r2, #1
 800b91c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b91e:	2200      	movs	r2, #0
 800b920:	4905      	ldr	r1, [pc, #20]	; (800b938 <tcp_timer_needed+0x3c>)
 800b922:	20fa      	movs	r0, #250	; 0xfa
 800b924:	f000 f8cc 	bl	800bac0 <sys_timeout>
  }
}
 800b928:	bf00      	nop
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20000178 	.word	0x20000178
 800b930:	200076cc 	.word	0x200076cc
 800b934:	200076dc 	.word	0x200076dc
 800b938:	0800b8b5 	.word	0x0800b8b5

0800b93c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b948:	2006      	movs	r0, #6
 800b94a:	f7f9 fcbf 	bl	80052cc <memp_malloc>
 800b94e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d109      	bne.n	800b96a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d151      	bne.n	800ba00 <sys_timeout_abs+0xc4>
 800b95c:	4b2a      	ldr	r3, [pc, #168]	; (800ba08 <sys_timeout_abs+0xcc>)
 800b95e:	22be      	movs	r2, #190	; 0xbe
 800b960:	492a      	ldr	r1, [pc, #168]	; (800ba0c <sys_timeout_abs+0xd0>)
 800b962:	482b      	ldr	r0, [pc, #172]	; (800ba10 <sys_timeout_abs+0xd4>)
 800b964:	f005 fa88 	bl	8010e78 <iprintf>
    return;
 800b968:	e04a      	b.n	800ba00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b982:	4b24      	ldr	r3, [pc, #144]	; (800ba14 <sys_timeout_abs+0xd8>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d103      	bne.n	800b992 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b98a:	4a22      	ldr	r2, [pc, #136]	; (800ba14 <sys_timeout_abs+0xd8>)
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	6013      	str	r3, [r2, #0]
    return;
 800b990:	e037      	b.n	800ba02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	4b1f      	ldr	r3, [pc, #124]	; (800ba14 <sys_timeout_abs+0xd8>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	0fdb      	lsrs	r3, r3, #31
 800b9a0:	f003 0301 	and.w	r3, r3, #1
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d007      	beq.n	800b9ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b9aa:	4b1a      	ldr	r3, [pc, #104]	; (800ba14 <sys_timeout_abs+0xd8>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b9b2:	4a18      	ldr	r2, [pc, #96]	; (800ba14 <sys_timeout_abs+0xd8>)
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	e023      	b.n	800ba02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b9ba:	4b16      	ldr	r3, [pc, #88]	; (800ba14 <sys_timeout_abs+0xd8>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e01a      	b.n	800b9f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00b      	beq.n	800b9e2 <sys_timeout_abs+0xa6>
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	0fdb      	lsrs	r3, r3, #31
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d007      	beq.n	800b9f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	601a      	str	r2, [r3, #0]
        break;
 800b9f0:	e007      	b.n	800ba02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e1      	bne.n	800b9c2 <sys_timeout_abs+0x86>
 800b9fe:	e000      	b.n	800ba02 <sys_timeout_abs+0xc6>
    return;
 800ba00:	bf00      	nop
      }
    }
  }
}
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	08013c68 	.word	0x08013c68
 800ba0c:	08013c9c 	.word	0x08013c9c
 800ba10:	08013cdc 	.word	0x08013cdc
 800ba14:	20000170 	.word	0x20000170

0800ba18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4798      	blx	r3

  now = sys_now();
 800ba2a:	f7f8 fd61 	bl	80044f0 <sys_now>
 800ba2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <lwip_cyclic_timer+0x5c>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4413      	add	r3, r2
 800ba3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	0fdb      	lsrs	r3, r3, #31
 800ba44:	f003 0301 	and.w	r3, r3, #1
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d009      	beq.n	800ba62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	4413      	add	r3, r2
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	4907      	ldr	r1, [pc, #28]	; (800ba78 <lwip_cyclic_timer+0x60>)
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff ff6e 	bl	800b93c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ba60:	e004      	b.n	800ba6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	4904      	ldr	r1, [pc, #16]	; (800ba78 <lwip_cyclic_timer+0x60>)
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7ff ff68 	bl	800b93c <sys_timeout_abs>
}
 800ba6c:	bf00      	nop
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20000174 	.word	0x20000174
 800ba78:	0800ba19 	.word	0x0800ba19

0800ba7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ba82:	2301      	movs	r3, #1
 800ba84:	607b      	str	r3, [r7, #4]
 800ba86:	e00e      	b.n	800baa6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ba88:	4a0b      	ldr	r2, [pc, #44]	; (800bab8 <sys_timeouts_init+0x3c>)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	4a08      	ldr	r2, [pc, #32]	; (800bab8 <sys_timeouts_init+0x3c>)
 800ba96:	4413      	add	r3, r2
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4908      	ldr	r1, [pc, #32]	; (800babc <sys_timeouts_init+0x40>)
 800ba9c:	f000 f810 	bl	800bac0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3301      	adds	r3, #1
 800baa4:	607b      	str	r3, [r7, #4]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b04      	cmp	r3, #4
 800baaa:	d9ed      	bls.n	800ba88 <sys_timeouts_init+0xc>
  }
}
 800baac:	bf00      	nop
 800baae:	bf00      	nop
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	08014c0c 	.word	0x08014c0c
 800babc:	0800ba19 	.word	0x0800ba19

0800bac0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad2:	d306      	bcc.n	800bae2 <sys_timeout+0x22>
 800bad4:	4b0a      	ldr	r3, [pc, #40]	; (800bb00 <sys_timeout+0x40>)
 800bad6:	f240 1229 	movw	r2, #297	; 0x129
 800bada:	490a      	ldr	r1, [pc, #40]	; (800bb04 <sys_timeout+0x44>)
 800badc:	480a      	ldr	r0, [pc, #40]	; (800bb08 <sys_timeout+0x48>)
 800bade:	f005 f9cb 	bl	8010e78 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bae2:	f7f8 fd05 	bl	80044f0 <sys_now>
 800bae6:	4602      	mov	r2, r0
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	4413      	add	r3, r2
 800baec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	68b9      	ldr	r1, [r7, #8]
 800baf2:	6978      	ldr	r0, [r7, #20]
 800baf4:	f7ff ff22 	bl	800b93c <sys_timeout_abs>
#endif
}
 800baf8:	bf00      	nop
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	08013c68 	.word	0x08013c68
 800bb04:	08013d04 	.word	0x08013d04
 800bb08:	08013cdc 	.word	0x08013cdc

0800bb0c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bb12:	f7f8 fced 	bl	80044f0 <sys_now>
 800bb16:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bb18:	4b1a      	ldr	r3, [pc, #104]	; (800bb84 <sys_check_timeouts+0x78>)
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <sys_check_timeouts+0x1a>
 800bb22:	f7f9 fef5 	bl	8005910 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bb26:	4b18      	ldr	r3, [pc, #96]	; (800bb88 <sys_check_timeouts+0x7c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d022      	beq.n	800bb78 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	0fdb      	lsrs	r3, r3, #31
 800bb3c:	f003 0301 	and.w	r3, r3, #1
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d11a      	bne.n	800bb7c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a0f      	ldr	r2, [pc, #60]	; (800bb88 <sys_check_timeouts+0x7c>)
 800bb4c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	4a0b      	ldr	r2, [pc, #44]	; (800bb8c <sys_check_timeouts+0x80>)
 800bb60:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bb62:	68b9      	ldr	r1, [r7, #8]
 800bb64:	2006      	movs	r0, #6
 800bb66:	f7f9 fbf3 	bl	8005350 <memp_free>
    if (handler != NULL) {
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0d3      	beq.n	800bb18 <sys_check_timeouts+0xc>
      handler(arg);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6838      	ldr	r0, [r7, #0]
 800bb74:	4798      	blx	r3
  do {
 800bb76:	e7cf      	b.n	800bb18 <sys_check_timeouts+0xc>
      return;
 800bb78:	bf00      	nop
 800bb7a:	e000      	b.n	800bb7e <sys_check_timeouts+0x72>
      return;
 800bb7c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	200075ec 	.word	0x200075ec
 800bb88:	20000170 	.word	0x20000170
 800bb8c:	20000174 	.word	0x20000174

0800bb90 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bb94:	f005 f988 	bl	8010ea8 <rand>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	4b01      	ldr	r3, [pc, #4]	; (800bbb0 <udp_init+0x20>)
 800bbaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bbac:	bf00      	nop
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	20000010 	.word	0x20000010

0800bbb4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bbbe:	4b17      	ldr	r3, [pc, #92]	; (800bc1c <udp_new_port+0x68>)
 800bbc0:	881b      	ldrh	r3, [r3, #0]
 800bbc2:	1c5a      	adds	r2, r3, #1
 800bbc4:	b291      	uxth	r1, r2
 800bbc6:	4a15      	ldr	r2, [pc, #84]	; (800bc1c <udp_new_port+0x68>)
 800bbc8:	8011      	strh	r1, [r2, #0]
 800bbca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d103      	bne.n	800bbda <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bbd2:	4b12      	ldr	r3, [pc, #72]	; (800bc1c <udp_new_port+0x68>)
 800bbd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bbd8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbda:	4b11      	ldr	r3, [pc, #68]	; (800bc20 <udp_new_port+0x6c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	603b      	str	r3, [r7, #0]
 800bbe0:	e011      	b.n	800bc06 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	8a5a      	ldrh	r2, [r3, #18]
 800bbe6:	4b0d      	ldr	r3, [pc, #52]	; (800bc1c <udp_new_port+0x68>)
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d108      	bne.n	800bc00 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	80fb      	strh	r3, [r7, #6]
 800bbf4:	88fb      	ldrh	r3, [r7, #6]
 800bbf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbfa:	d3e0      	bcc.n	800bbbe <udp_new_port+0xa>
        return 0;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e007      	b.n	800bc10 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	603b      	str	r3, [r7, #0]
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1ea      	bne.n	800bbe2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bc0c:	4b03      	ldr	r3, [pc, #12]	; (800bc1c <udp_new_port+0x68>)
 800bc0e:	881b      	ldrh	r3, [r3, #0]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	20000010 	.word	0x20000010
 800bc20:	200076e4 	.word	0x200076e4

0800bc24 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d105      	bne.n	800bc44 <udp_input_local_match+0x20>
 800bc38:	4b27      	ldr	r3, [pc, #156]	; (800bcd8 <udp_input_local_match+0xb4>)
 800bc3a:	2287      	movs	r2, #135	; 0x87
 800bc3c:	4927      	ldr	r1, [pc, #156]	; (800bcdc <udp_input_local_match+0xb8>)
 800bc3e:	4828      	ldr	r0, [pc, #160]	; (800bce0 <udp_input_local_match+0xbc>)
 800bc40:	f005 f91a 	bl	8010e78 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d105      	bne.n	800bc56 <udp_input_local_match+0x32>
 800bc4a:	4b23      	ldr	r3, [pc, #140]	; (800bcd8 <udp_input_local_match+0xb4>)
 800bc4c:	2288      	movs	r2, #136	; 0x88
 800bc4e:	4925      	ldr	r1, [pc, #148]	; (800bce4 <udp_input_local_match+0xc0>)
 800bc50:	4823      	ldr	r0, [pc, #140]	; (800bce0 <udp_input_local_match+0xbc>)
 800bc52:	f005 f911 	bl	8010e78 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	7a1b      	ldrb	r3, [r3, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00b      	beq.n	800bc76 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	7a1a      	ldrb	r2, [r3, #8]
 800bc62:	4b21      	ldr	r3, [pc, #132]	; (800bce8 <udp_input_local_match+0xc4>)
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d001      	beq.n	800bc76 <udp_input_local_match+0x52>
    return 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e02b      	b.n	800bcce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bc76:	79fb      	ldrb	r3, [r7, #7]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d018      	beq.n	800bcae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d013      	beq.n	800bcaa <udp_input_local_match+0x86>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00f      	beq.n	800bcaa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bc8a:	4b17      	ldr	r3, [pc, #92]	; (800bce8 <udp_input_local_match+0xc4>)
 800bc8c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc92:	d00a      	beq.n	800bcaa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	4b13      	ldr	r3, [pc, #76]	; (800bce8 <udp_input_local_match+0xc4>)
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	405a      	eors	r2, r3
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	3308      	adds	r3, #8
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d110      	bne.n	800bccc <udp_input_local_match+0xa8>
          return 1;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e00f      	b.n	800bcce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d009      	beq.n	800bcc8 <udp_input_local_match+0xa4>
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d005      	beq.n	800bcc8 <udp_input_local_match+0xa4>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	4b09      	ldr	r3, [pc, #36]	; (800bce8 <udp_input_local_match+0xc4>)
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d101      	bne.n	800bccc <udp_input_local_match+0xa8>
        return 1;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e000      	b.n	800bcce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	08013d50 	.word	0x08013d50
 800bcdc:	08013d80 	.word	0x08013d80
 800bce0:	08013da4 	.word	0x08013da4
 800bce4:	08013dcc 	.word	0x08013dcc
 800bce8:	200040dc 	.word	0x200040dc

0800bcec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bcec:	b590      	push	{r4, r7, lr}
 800bcee:	b08d      	sub	sp, #52	; 0x34
 800bcf0:	af02      	add	r7, sp, #8
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d105      	bne.n	800bd0c <udp_input+0x20>
 800bd00:	4b9f      	ldr	r3, [pc, #636]	; (800bf80 <udp_input+0x294>)
 800bd02:	22cf      	movs	r2, #207	; 0xcf
 800bd04:	499f      	ldr	r1, [pc, #636]	; (800bf84 <udp_input+0x298>)
 800bd06:	48a0      	ldr	r0, [pc, #640]	; (800bf88 <udp_input+0x29c>)
 800bd08:	f005 f8b6 	bl	8010e78 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d105      	bne.n	800bd1e <udp_input+0x32>
 800bd12:	4b9b      	ldr	r3, [pc, #620]	; (800bf80 <udp_input+0x294>)
 800bd14:	22d0      	movs	r2, #208	; 0xd0
 800bd16:	499d      	ldr	r1, [pc, #628]	; (800bf8c <udp_input+0x2a0>)
 800bd18:	489b      	ldr	r0, [pc, #620]	; (800bf88 <udp_input+0x29c>)
 800bd1a:	f005 f8ad 	bl	8010e78 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800bd1e:	4b9c      	ldr	r3, [pc, #624]	; (800bf90 <udp_input+0x2a4>)
 800bd20:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800bd24:	3301      	adds	r3, #1
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	4b99      	ldr	r3, [pc, #612]	; (800bf90 <udp_input+0x2a4>)
 800bd2a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	895b      	ldrh	r3, [r3, #10]
 800bd32:	2b07      	cmp	r3, #7
 800bd34:	d813      	bhi.n	800bd5e <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800bd36:	4b96      	ldr	r3, [pc, #600]	; (800bf90 <udp_input+0x2a4>)
 800bd38:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	4b93      	ldr	r3, [pc, #588]	; (800bf90 <udp_input+0x2a4>)
 800bd42:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800bd46:	4b92      	ldr	r3, [pc, #584]	; (800bf90 <udp_input+0x2a4>)
 800bd48:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	4b8f      	ldr	r3, [pc, #572]	; (800bf90 <udp_input+0x2a4>)
 800bd52:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7fa f8d0 	bl	8005efc <pbuf_free>
    goto end;
 800bd5c:	e124      	b.n	800bfa8 <udp_input+0x2bc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bd64:	4b8b      	ldr	r3, [pc, #556]	; (800bf94 <udp_input+0x2a8>)
 800bd66:	695b      	ldr	r3, [r3, #20]
 800bd68:	4a8a      	ldr	r2, [pc, #552]	; (800bf94 <udp_input+0x2a8>)
 800bd6a:	6812      	ldr	r2, [r2, #0]
 800bd6c:	4611      	mov	r1, r2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f003 ffe8 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800bd74:	4603      	mov	r3, r0
 800bd76:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	881b      	ldrh	r3, [r3, #0]
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7f8 fc5c 	bl	800463c <lwip_htons>
 800bd84:	4603      	mov	r3, r0
 800bd86:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	885b      	ldrh	r3, [r3, #2]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7f8 fc54 	bl	800463c <lwip_htons>
 800bd94:	4603      	mov	r3, r0
 800bd96:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bda0:	2300      	movs	r3, #0
 800bda2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bda4:	4b7c      	ldr	r3, [pc, #496]	; (800bf98 <udp_input+0x2ac>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdaa:	e05d      	b.n	800be68 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdae:	8a5b      	ldrh	r3, [r3, #18]
 800bdb0:	89fa      	ldrh	r2, [r7, #14]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d153      	bne.n	800be5e <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bdb6:	7cfb      	ldrb	r3, [r7, #19]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdbe:	f7ff ff31 	bl	800bc24 <udp_input_local_match>
 800bdc2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d04a      	beq.n	800be5e <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	7c1b      	ldrb	r3, [r3, #16]
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d11d      	bne.n	800be10 <udp_input+0x124>
        if (uncon_pcb == NULL) {
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d102      	bne.n	800bde0 <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	61fb      	str	r3, [r7, #28]
 800bdde:	e017      	b.n	800be10 <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bde0:	7cfb      	ldrb	r3, [r7, #19]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d014      	beq.n	800be10 <udp_input+0x124>
 800bde6:	4b6b      	ldr	r3, [pc, #428]	; (800bf94 <udp_input+0x2a8>)
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdee:	d10f      	bne.n	800be10 <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	3304      	adds	r3, #4
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d008      	beq.n	800be10 <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bdfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	3304      	adds	r3, #4
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d101      	bne.n	800be10 <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	8a9b      	ldrh	r3, [r3, #20]
 800be14:	8a3a      	ldrh	r2, [r7, #16]
 800be16:	429a      	cmp	r2, r3
 800be18:	d121      	bne.n	800be5e <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d005      	beq.n	800be2e <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	4b5b      	ldr	r3, [pc, #364]	; (800bf94 <udp_input+0x2a8>)
 800be28:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d117      	bne.n	800be5e <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	68da      	ldr	r2, [r3, #12]
 800be38:	6a3b      	ldr	r3, [r7, #32]
 800be3a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800be3c:	4b56      	ldr	r3, [pc, #344]	; (800bf98 <udp_input+0x2ac>)
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be42:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800be44:	4a54      	ldr	r2, [pc, #336]	; (800bf98 <udp_input+0x2ac>)
 800be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be48:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800be4a:	e010      	b.n	800be6e <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 800be4c:	4b50      	ldr	r3, [pc, #320]	; (800bf90 <udp_input+0x2a4>)
 800be4e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800be52:	3301      	adds	r3, #1
 800be54:	b29a      	uxth	r2, r3
 800be56:	4b4e      	ldr	r3, [pc, #312]	; (800bf90 <udp_input+0x2a4>)
 800be58:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800be5c:	e007      	b.n	800be6e <udp_input+0x182>
      }
    }

    prev = pcb;
 800be5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be60:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	627b      	str	r3, [r7, #36]	; 0x24
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d19e      	bne.n	800bdac <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <udp_input+0x18c>
    pcb = uncon_pcb;
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800be78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <udp_input+0x198>
    for_us = 1;
 800be7e:	2301      	movs	r3, #1
 800be80:	76fb      	strb	r3, [r7, #27]
 800be82:	e00a      	b.n	800be9a <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	3304      	adds	r3, #4
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	4b42      	ldr	r3, [pc, #264]	; (800bf94 <udp_input+0x2a8>)
 800be8c:	695b      	ldr	r3, [r3, #20]
 800be8e:	429a      	cmp	r2, r3
 800be90:	bf0c      	ite	eq
 800be92:	2301      	moveq	r3, #1
 800be94:	2300      	movne	r3, #0
 800be96:	b2db      	uxtb	r3, r3
 800be98:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800be9a:	7efb      	ldrb	r3, [r7, #27]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d06a      	beq.n	800bf76 <udp_input+0x28a>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	88db      	ldrh	r3, [r3, #6]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00b      	beq.n	800bec2 <udp_input+0x1d6>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	891a      	ldrh	r2, [r3, #8]
 800beae:	4b3b      	ldr	r3, [pc, #236]	; (800bf9c <udp_input+0x2b0>)
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	4b3b      	ldr	r3, [pc, #236]	; (800bfa0 <udp_input+0x2b4>)
 800beb4:	2111      	movs	r1, #17
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7f8 fcf2 	bl	80048a0 <ip_chksum_pseudo>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d173      	bne.n	800bfaa <udp_input+0x2be>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bec2:	2108      	movs	r1, #8
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7f9 ff93 	bl	8005df0 <pbuf_remove_header>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d012      	beq.n	800bef6 <udp_input+0x20a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bed0:	4b2b      	ldr	r3, [pc, #172]	; (800bf80 <udp_input+0x294>)
 800bed2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bed6:	4933      	ldr	r1, [pc, #204]	; (800bfa4 <udp_input+0x2b8>)
 800bed8:	482b      	ldr	r0, [pc, #172]	; (800bf88 <udp_input+0x29c>)
 800beda:	f004 ffcd 	bl	8010e78 <iprintf>
      UDP_STATS_INC(udp.drop);
 800bede:	4b2c      	ldr	r3, [pc, #176]	; (800bf90 <udp_input+0x2a4>)
 800bee0:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800bee4:	3301      	adds	r3, #1
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	4b29      	ldr	r3, [pc, #164]	; (800bf90 <udp_input+0x2a4>)
 800beea:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7fa f804 	bl	8005efc <pbuf_free>
      goto end;
 800bef4:	e058      	b.n	800bfa8 <udp_input+0x2bc>
    }

    if (pcb != NULL) {
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d012      	beq.n	800bf22 <udp_input+0x236>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	699b      	ldr	r3, [r3, #24]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00a      	beq.n	800bf1a <udp_input+0x22e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	699c      	ldr	r4, [r3, #24]
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	69d8      	ldr	r0, [r3, #28]
 800bf0c:	8a3b      	ldrh	r3, [r7, #16]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4b23      	ldr	r3, [pc, #140]	; (800bfa0 <udp_input+0x2b4>)
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bf18:	e05b      	b.n	800bfd2 <udp_input+0x2e6>
        pbuf_free(p);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f7f9 ffee 	bl	8005efc <pbuf_free>
        goto end;
 800bf20:	e042      	b.n	800bfa8 <udp_input+0x2bc>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bf22:	7cfb      	ldrb	r3, [r7, #19]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d112      	bne.n	800bf4e <udp_input+0x262>
 800bf28:	4b1a      	ldr	r3, [pc, #104]	; (800bf94 <udp_input+0x2a8>)
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf30:	2be0      	cmp	r3, #224	; 0xe0
 800bf32:	d00c      	beq.n	800bf4e <udp_input+0x262>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bf34:	4b17      	ldr	r3, [pc, #92]	; (800bf94 <udp_input+0x2a8>)
 800bf36:	899b      	ldrh	r3, [r3, #12]
 800bf38:	3308      	adds	r3, #8
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	b21b      	sxth	r3, r3
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7f9 ffc8 	bl	8005ed6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bf46:	2103      	movs	r1, #3
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f003 fab3 	bl	800f4b4 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800bf4e:	4b10      	ldr	r3, [pc, #64]	; (800bf90 <udp_input+0x2a4>)
 800bf50:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800bf54:	3301      	adds	r3, #1
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	4b0d      	ldr	r3, [pc, #52]	; (800bf90 <udp_input+0x2a4>)
 800bf5a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800bf5e:	4b0c      	ldr	r3, [pc, #48]	; (800bf90 <udp_input+0x2a4>)
 800bf60:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800bf64:	3301      	adds	r3, #1
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	4b09      	ldr	r3, [pc, #36]	; (800bf90 <udp_input+0x2a4>)
 800bf6a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7f9 ffc4 	bl	8005efc <pbuf_free>
  return;
 800bf74:	e02d      	b.n	800bfd2 <udp_input+0x2e6>
    pbuf_free(p);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7f9 ffc0 	bl	8005efc <pbuf_free>
  return;
 800bf7c:	e029      	b.n	800bfd2 <udp_input+0x2e6>
 800bf7e:	bf00      	nop
 800bf80:	08013d50 	.word	0x08013d50
 800bf84:	08013df4 	.word	0x08013df4
 800bf88:	08013da4 	.word	0x08013da4
 800bf8c:	08013e0c 	.word	0x08013e0c
 800bf90:	200075f0 	.word	0x200075f0
 800bf94:	200040dc 	.word	0x200040dc
 800bf98:	200076e4 	.word	0x200076e4
 800bf9c:	200040f0 	.word	0x200040f0
 800bfa0:	200040ec 	.word	0x200040ec
 800bfa4:	08013e28 	.word	0x08013e28
 800bfa8:	e013      	b.n	800bfd2 <udp_input+0x2e6>
            goto chkerr;
 800bfaa:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <udp_input+0x2ec>)
 800bfae:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	4b08      	ldr	r3, [pc, #32]	; (800bfd8 <udp_input+0x2ec>)
 800bfb8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
  UDP_STATS_INC(udp.drop);
 800bfbc:	4b06      	ldr	r3, [pc, #24]	; (800bfd8 <udp_input+0x2ec>)
 800bfbe:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	4b04      	ldr	r3, [pc, #16]	; (800bfd8 <udp_input+0x2ec>)
 800bfc8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7f9 ff95 	bl	8005efc <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bfd2:	372c      	adds	r7, #44	; 0x2c
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd90      	pop	{r4, r7, pc}
 800bfd8:	200075f0 	.word	0x200075f0

0800bfdc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af02      	add	r7, sp, #8
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
 800bfe8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d109      	bne.n	800c004 <udp_sendto_if+0x28>
 800bff0:	4b2e      	ldr	r3, [pc, #184]	; (800c0ac <udp_sendto_if+0xd0>)
 800bff2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bff6:	492e      	ldr	r1, [pc, #184]	; (800c0b0 <udp_sendto_if+0xd4>)
 800bff8:	482e      	ldr	r0, [pc, #184]	; (800c0b4 <udp_sendto_if+0xd8>)
 800bffa:	f004 ff3d 	bl	8010e78 <iprintf>
 800bffe:	f06f 030f 	mvn.w	r3, #15
 800c002:	e04f      	b.n	800c0a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d109      	bne.n	800c01e <udp_sendto_if+0x42>
 800c00a:	4b28      	ldr	r3, [pc, #160]	; (800c0ac <udp_sendto_if+0xd0>)
 800c00c:	f240 2281 	movw	r2, #641	; 0x281
 800c010:	4929      	ldr	r1, [pc, #164]	; (800c0b8 <udp_sendto_if+0xdc>)
 800c012:	4828      	ldr	r0, [pc, #160]	; (800c0b4 <udp_sendto_if+0xd8>)
 800c014:	f004 ff30 	bl	8010e78 <iprintf>
 800c018:	f06f 030f 	mvn.w	r3, #15
 800c01c:	e042      	b.n	800c0a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d109      	bne.n	800c038 <udp_sendto_if+0x5c>
 800c024:	4b21      	ldr	r3, [pc, #132]	; (800c0ac <udp_sendto_if+0xd0>)
 800c026:	f240 2282 	movw	r2, #642	; 0x282
 800c02a:	4924      	ldr	r1, [pc, #144]	; (800c0bc <udp_sendto_if+0xe0>)
 800c02c:	4821      	ldr	r0, [pc, #132]	; (800c0b4 <udp_sendto_if+0xd8>)
 800c02e:	f004 ff23 	bl	8010e78 <iprintf>
 800c032:	f06f 030f 	mvn.w	r3, #15
 800c036:	e035      	b.n	800c0a4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d109      	bne.n	800c052 <udp_sendto_if+0x76>
 800c03e:	4b1b      	ldr	r3, [pc, #108]	; (800c0ac <udp_sendto_if+0xd0>)
 800c040:	f240 2283 	movw	r2, #643	; 0x283
 800c044:	491e      	ldr	r1, [pc, #120]	; (800c0c0 <udp_sendto_if+0xe4>)
 800c046:	481b      	ldr	r0, [pc, #108]	; (800c0b4 <udp_sendto_if+0xd8>)
 800c048:	f004 ff16 	bl	8010e78 <iprintf>
 800c04c:	f06f 030f 	mvn.w	r3, #15
 800c050:	e028      	b.n	800c0a4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d009      	beq.n	800c06c <udp_sendto_if+0x90>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d005      	beq.n	800c06c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c068:	2be0      	cmp	r3, #224	; 0xe0
 800c06a:	d103      	bne.n	800c074 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c06c:	6a3b      	ldr	r3, [r7, #32]
 800c06e:	3304      	adds	r3, #4
 800c070:	617b      	str	r3, [r7, #20]
 800c072:	e00b      	b.n	800c08c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	3304      	adds	r3, #4
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d002      	beq.n	800c088 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c082:	f06f 0303 	mvn.w	r3, #3
 800c086:	e00d      	b.n	800c0a4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c08c:	887a      	ldrh	r2, [r7, #2]
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	6a3b      	ldr	r3, [r7, #32]
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	4613      	mov	r3, r2
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	68b9      	ldr	r1, [r7, #8]
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f000 f811 	bl	800c0c4 <udp_sendto_if_src>
 800c0a2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	08013d50 	.word	0x08013d50
 800c0b0:	08013ec4 	.word	0x08013ec4
 800c0b4:	08013da4 	.word	0x08013da4
 800c0b8:	08013ee0 	.word	0x08013ee0
 800c0bc:	08013efc 	.word	0x08013efc
 800c0c0:	08013f1c 	.word	0x08013f1c

0800c0c4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08c      	sub	sp, #48	; 0x30
 800c0c8:	af04      	add	r7, sp, #16
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	607a      	str	r2, [r7, #4]
 800c0d0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d109      	bne.n	800c0ec <udp_sendto_if_src+0x28>
 800c0d8:	4b76      	ldr	r3, [pc, #472]	; (800c2b4 <udp_sendto_if_src+0x1f0>)
 800c0da:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c0de:	4976      	ldr	r1, [pc, #472]	; (800c2b8 <udp_sendto_if_src+0x1f4>)
 800c0e0:	4876      	ldr	r0, [pc, #472]	; (800c2bc <udp_sendto_if_src+0x1f8>)
 800c0e2:	f004 fec9 	bl	8010e78 <iprintf>
 800c0e6:	f06f 030f 	mvn.w	r3, #15
 800c0ea:	e0de      	b.n	800c2aa <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d109      	bne.n	800c106 <udp_sendto_if_src+0x42>
 800c0f2:	4b70      	ldr	r3, [pc, #448]	; (800c2b4 <udp_sendto_if_src+0x1f0>)
 800c0f4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c0f8:	4971      	ldr	r1, [pc, #452]	; (800c2c0 <udp_sendto_if_src+0x1fc>)
 800c0fa:	4870      	ldr	r0, [pc, #448]	; (800c2bc <udp_sendto_if_src+0x1f8>)
 800c0fc:	f004 febc 	bl	8010e78 <iprintf>
 800c100:	f06f 030f 	mvn.w	r3, #15
 800c104:	e0d1      	b.n	800c2aa <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d109      	bne.n	800c120 <udp_sendto_if_src+0x5c>
 800c10c:	4b69      	ldr	r3, [pc, #420]	; (800c2b4 <udp_sendto_if_src+0x1f0>)
 800c10e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c112:	496c      	ldr	r1, [pc, #432]	; (800c2c4 <udp_sendto_if_src+0x200>)
 800c114:	4869      	ldr	r0, [pc, #420]	; (800c2bc <udp_sendto_if_src+0x1f8>)
 800c116:	f004 feaf 	bl	8010e78 <iprintf>
 800c11a:	f06f 030f 	mvn.w	r3, #15
 800c11e:	e0c4      	b.n	800c2aa <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	2b00      	cmp	r3, #0
 800c124:	d109      	bne.n	800c13a <udp_sendto_if_src+0x76>
 800c126:	4b63      	ldr	r3, [pc, #396]	; (800c2b4 <udp_sendto_if_src+0x1f0>)
 800c128:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c12c:	4966      	ldr	r1, [pc, #408]	; (800c2c8 <udp_sendto_if_src+0x204>)
 800c12e:	4863      	ldr	r0, [pc, #396]	; (800c2bc <udp_sendto_if_src+0x1f8>)
 800c130:	f004 fea2 	bl	8010e78 <iprintf>
 800c134:	f06f 030f 	mvn.w	r3, #15
 800c138:	e0b7      	b.n	800c2aa <udp_sendto_if_src+0x1e6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d109      	bne.n	800c154 <udp_sendto_if_src+0x90>
 800c140:	4b5c      	ldr	r3, [pc, #368]	; (800c2b4 <udp_sendto_if_src+0x1f0>)
 800c142:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c146:	4961      	ldr	r1, [pc, #388]	; (800c2cc <udp_sendto_if_src+0x208>)
 800c148:	485c      	ldr	r0, [pc, #368]	; (800c2bc <udp_sendto_if_src+0x1f8>)
 800c14a:	f004 fe95 	bl	8010e78 <iprintf>
 800c14e:	f06f 030f 	mvn.w	r3, #15
 800c152:	e0aa      	b.n	800c2aa <udp_sendto_if_src+0x1e6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	8a5b      	ldrh	r3, [r3, #18]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10f      	bne.n	800c17c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c15c:	68f9      	ldr	r1, [r7, #12]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8a5b      	ldrh	r3, [r3, #18]
 800c162:	461a      	mov	r2, r3
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f000 f8b7 	bl	800c2d8 <udp_bind>
 800c16a:	4603      	mov	r3, r0
 800c16c:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800c16e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d002      	beq.n	800c17c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c176:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800c17a:	e096      	b.n	800c2aa <udp_sendto_if_src+0x1e6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	891b      	ldrh	r3, [r3, #8]
 800c180:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c184:	4293      	cmp	r3, r2
 800c186:	d902      	bls.n	800c18e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c188:	f04f 33ff 	mov.w	r3, #4294967295
 800c18c:	e08d      	b.n	800c2aa <udp_sendto_if_src+0x1e6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c18e:	2108      	movs	r1, #8
 800c190:	68b8      	ldr	r0, [r7, #8]
 800c192:	f7f9 fe1d 	bl	8005dd0 <pbuf_add_header>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d015      	beq.n	800c1c8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c19c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1a0:	2108      	movs	r1, #8
 800c1a2:	2022      	movs	r0, #34	; 0x22
 800c1a4:	f7f9 fc0a 	bl	80059bc <pbuf_alloc>
 800c1a8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d102      	bne.n	800c1b6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b4:	e079      	b.n	800c2aa <udp_sendto_if_src+0x1e6>
    }
    if (p->tot_len != 0) {
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	891b      	ldrh	r3, [r3, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d006      	beq.n	800c1cc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	69f8      	ldr	r0, [r7, #28]
 800c1c2:	f7f9 ffb3 	bl	800612c <pbuf_chain>
 800c1c6:	e001      	b.n	800c1cc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	895b      	ldrh	r3, [r3, #10]
 800c1d0:	2b07      	cmp	r3, #7
 800c1d2:	d806      	bhi.n	800c1e2 <udp_sendto_if_src+0x11e>
 800c1d4:	4b37      	ldr	r3, [pc, #220]	; (800c2b4 <udp_sendto_if_src+0x1f0>)
 800c1d6:	f240 320d 	movw	r2, #781	; 0x30d
 800c1da:	493d      	ldr	r1, [pc, #244]	; (800c2d0 <udp_sendto_if_src+0x20c>)
 800c1dc:	4837      	ldr	r0, [pc, #220]	; (800c2bc <udp_sendto_if_src+0x1f8>)
 800c1de:	f004 fe4b 	bl	8010e78 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	8a5b      	ldrh	r3, [r3, #18]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7f8 fa25 	bl	800463c <lwip_htons>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c1fa:	887b      	ldrh	r3, [r7, #2]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7f8 fa1d 	bl	800463c <lwip_htons>
 800c202:	4603      	mov	r3, r0
 800c204:	461a      	mov	r2, r3
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2200      	movs	r2, #0
 800c20e:	719a      	strb	r2, [r3, #6]
 800c210:	2200      	movs	r2, #0
 800c212:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	891b      	ldrh	r3, [r3, #8]
 800c218:	4618      	mov	r0, r3
 800c21a:	f7f8 fa0f 	bl	800463c <lwip_htons>
 800c21e:	4603      	mov	r3, r0
 800c220:	461a      	mov	r2, r3
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	7c1b      	ldrb	r3, [r3, #16]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d113      	bne.n	800c25a <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	891a      	ldrh	r2, [r3, #8]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23c:	2111      	movs	r1, #17
 800c23e:	69f8      	ldr	r0, [r7, #28]
 800c240:	f7f8 fb2e 	bl	80048a0 <ip_chksum_pseudo>
 800c244:	4603      	mov	r3, r0
 800c246:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800c248:	8b7b      	ldrh	r3, [r7, #26]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800c24e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c252:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	8b7a      	ldrh	r2, [r7, #26]
 800c258:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c25a:	2311      	movs	r3, #17
 800c25c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	7adb      	ldrb	r3, [r3, #11]
 800c262:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	7a9b      	ldrb	r3, [r3, #10]
 800c268:	7cb9      	ldrb	r1, [r7, #18]
 800c26a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c26c:	9202      	str	r2, [sp, #8]
 800c26e:	7cfa      	ldrb	r2, [r7, #19]
 800c270:	9201      	str	r2, [sp, #4]
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	460b      	mov	r3, r1
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c27a:	69f8      	ldr	r0, [r7, #28]
 800c27c:	f003 fc34 	bl	800fae8 <ip4_output_if_src>
 800c280:	4603      	mov	r3, r0
 800c282:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c284:	69fa      	ldr	r2, [r7, #28]
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d004      	beq.n	800c296 <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800c28c:	69f8      	ldr	r0, [r7, #28]
 800c28e:	f7f9 fe35 	bl	8005efc <pbuf_free>
    q = NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 800c296:	4b0f      	ldr	r3, [pc, #60]	; (800c2d4 <udp_sendto_if_src+0x210>)
 800c298:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800c29c:	3301      	adds	r3, #1
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <udp_sendto_if_src+0x210>)
 800c2a2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 800c2a6:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3720      	adds	r7, #32
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	08013d50 	.word	0x08013d50
 800c2b8:	08013f3c 	.word	0x08013f3c
 800c2bc:	08013da4 	.word	0x08013da4
 800c2c0:	08013f5c 	.word	0x08013f5c
 800c2c4:	08013f7c 	.word	0x08013f7c
 800c2c8:	08013fa0 	.word	0x08013fa0
 800c2cc:	08013fc4 	.word	0x08013fc4
 800c2d0:	08013fe8 	.word	0x08013fe8
 800c2d4:	200075f0 	.word	0x200075f0

0800c2d8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b086      	sub	sp, #24
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c2ec:	4b39      	ldr	r3, [pc, #228]	; (800c3d4 <udp_bind+0xfc>)
 800c2ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d109      	bne.n	800c30a <udp_bind+0x32>
 800c2f6:	4b38      	ldr	r3, [pc, #224]	; (800c3d8 <udp_bind+0x100>)
 800c2f8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c2fc:	4937      	ldr	r1, [pc, #220]	; (800c3dc <udp_bind+0x104>)
 800c2fe:	4838      	ldr	r0, [pc, #224]	; (800c3e0 <udp_bind+0x108>)
 800c300:	f004 fdba 	bl	8010e78 <iprintf>
 800c304:	f06f 030f 	mvn.w	r3, #15
 800c308:	e060      	b.n	800c3cc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c30e:	4b35      	ldr	r3, [pc, #212]	; (800c3e4 <udp_bind+0x10c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	617b      	str	r3, [r7, #20]
 800c314:	e009      	b.n	800c32a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d102      	bne.n	800c324 <udp_bind+0x4c>
      rebind = 1;
 800c31e:	2301      	movs	r3, #1
 800c320:	74fb      	strb	r3, [r7, #19]
      break;
 800c322:	e005      	b.n	800c330 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	617b      	str	r3, [r7, #20]
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1f2      	bne.n	800c316 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c330:	88fb      	ldrh	r3, [r7, #6]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d109      	bne.n	800c34a <udp_bind+0x72>
    port = udp_new_port();
 800c336:	f7ff fc3d 	bl	800bbb4 <udp_new_port>
 800c33a:	4603      	mov	r3, r0
 800c33c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c33e:	88fb      	ldrh	r3, [r7, #6]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d12c      	bne.n	800c39e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c344:	f06f 0307 	mvn.w	r3, #7
 800c348:	e040      	b.n	800c3cc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c34a:	4b26      	ldr	r3, [pc, #152]	; (800c3e4 <udp_bind+0x10c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	617b      	str	r3, [r7, #20]
 800c350:	e022      	b.n	800c398 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	429a      	cmp	r2, r3
 800c358:	d01b      	beq.n	800c392 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	8a5b      	ldrh	r3, [r3, #18]
 800c35e:	88fa      	ldrh	r2, [r7, #6]
 800c360:	429a      	cmp	r2, r3
 800c362:	d116      	bne.n	800c392 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d00d      	beq.n	800c38c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d00a      	beq.n	800c38c <udp_bind+0xb4>
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d006      	beq.n	800c38c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c37e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c380:	2b00      	cmp	r3, #0
 800c382:	d003      	beq.n	800c38c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d102      	bne.n	800c392 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c38c:	f06f 0307 	mvn.w	r3, #7
 800c390:	e01c      	b.n	800c3cc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	617b      	str	r3, [r7, #20]
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1d9      	bne.n	800c352 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d002      	beq.n	800c3aa <udp_bind+0xd2>
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	e000      	b.n	800c3ac <udp_bind+0xd4>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	88fa      	ldrh	r2, [r7, #6]
 800c3b4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c3b6:	7cfb      	ldrb	r3, [r7, #19]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d106      	bne.n	800c3ca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c3bc:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <udp_bind+0x10c>)
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c3c4:	4a07      	ldr	r2, [pc, #28]	; (800c3e4 <udp_bind+0x10c>)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3718      	adds	r7, #24
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	08014c34 	.word	0x08014c34
 800c3d8:	08013d50 	.word	0x08013d50
 800c3dc:	08014018 	.word	0x08014018
 800c3e0:	08013da4 	.word	0x08013da4
 800c3e4:	200076e4 	.word	0x200076e4

0800c3e8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d109      	bne.n	800c410 <udp_connect+0x28>
 800c3fc:	4b2c      	ldr	r3, [pc, #176]	; (800c4b0 <udp_connect+0xc8>)
 800c3fe:	f240 4235 	movw	r2, #1077	; 0x435
 800c402:	492c      	ldr	r1, [pc, #176]	; (800c4b4 <udp_connect+0xcc>)
 800c404:	482c      	ldr	r0, [pc, #176]	; (800c4b8 <udp_connect+0xd0>)
 800c406:	f004 fd37 	bl	8010e78 <iprintf>
 800c40a:	f06f 030f 	mvn.w	r3, #15
 800c40e:	e04b      	b.n	800c4a8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d109      	bne.n	800c42a <udp_connect+0x42>
 800c416:	4b26      	ldr	r3, [pc, #152]	; (800c4b0 <udp_connect+0xc8>)
 800c418:	f240 4236 	movw	r2, #1078	; 0x436
 800c41c:	4927      	ldr	r1, [pc, #156]	; (800c4bc <udp_connect+0xd4>)
 800c41e:	4826      	ldr	r0, [pc, #152]	; (800c4b8 <udp_connect+0xd0>)
 800c420:	f004 fd2a 	bl	8010e78 <iprintf>
 800c424:	f06f 030f 	mvn.w	r3, #15
 800c428:	e03e      	b.n	800c4a8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	8a5b      	ldrh	r3, [r3, #18]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10f      	bne.n	800c452 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c432:	68f9      	ldr	r1, [r7, #12]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	8a5b      	ldrh	r3, [r3, #18]
 800c438:	461a      	mov	r2, r3
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f7ff ff4c 	bl	800c2d8 <udp_bind>
 800c440:	4603      	mov	r3, r0
 800c442:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c444:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <udp_connect+0x6a>
      return err;
 800c44c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c450:	e02a      	b.n	800c4a8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <udp_connect+0x76>
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	e000      	b.n	800c460 <udp_connect+0x78>
 800c45e:	2300      	movs	r3, #0
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	88fa      	ldrh	r2, [r7, #6]
 800c468:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	7c1b      	ldrb	r3, [r3, #16]
 800c46e:	f043 0304 	orr.w	r3, r3, #4
 800c472:	b2da      	uxtb	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c478:	4b11      	ldr	r3, [pc, #68]	; (800c4c0 <udp_connect+0xd8>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	617b      	str	r3, [r7, #20]
 800c47e:	e008      	b.n	800c492 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	429a      	cmp	r2, r3
 800c486:	d101      	bne.n	800c48c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c488:	2300      	movs	r3, #0
 800c48a:	e00d      	b.n	800c4a8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	617b      	str	r3, [r7, #20]
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1f3      	bne.n	800c480 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c498:	4b09      	ldr	r3, [pc, #36]	; (800c4c0 <udp_connect+0xd8>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c4a0:	4a07      	ldr	r2, [pc, #28]	; (800c4c0 <udp_connect+0xd8>)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	08013d50 	.word	0x08013d50
 800c4b4:	08014030 	.word	0x08014030
 800c4b8:	08013da4 	.word	0x08013da4
 800c4bc:	0801404c 	.word	0x0801404c
 800c4c0:	200076e4 	.word	0x200076e4

0800c4c4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d107      	bne.n	800c4e6 <udp_recv+0x22>
 800c4d6:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <udp_recv+0x34>)
 800c4d8:	f240 428a 	movw	r2, #1162	; 0x48a
 800c4dc:	4907      	ldr	r1, [pc, #28]	; (800c4fc <udp_recv+0x38>)
 800c4de:	4808      	ldr	r0, [pc, #32]	; (800c500 <udp_recv+0x3c>)
 800c4e0:	f004 fcca 	bl	8010e78 <iprintf>
 800c4e4:	e005      	b.n	800c4f2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	61da      	str	r2, [r3, #28]
}
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}
 800c4f8:	08013d50 	.word	0x08013d50
 800c4fc:	08014084 	.word	0x08014084
 800c500:	08013da4 	.word	0x08013da4

0800c504 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d107      	bne.n	800c522 <udp_remove+0x1e>
 800c512:	4b19      	ldr	r3, [pc, #100]	; (800c578 <udp_remove+0x74>)
 800c514:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c518:	4918      	ldr	r1, [pc, #96]	; (800c57c <udp_remove+0x78>)
 800c51a:	4819      	ldr	r0, [pc, #100]	; (800c580 <udp_remove+0x7c>)
 800c51c:	f004 fcac 	bl	8010e78 <iprintf>
 800c520:	e026      	b.n	800c570 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c522:	4b18      	ldr	r3, [pc, #96]	; (800c584 <udp_remove+0x80>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d105      	bne.n	800c538 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c52c:	4b15      	ldr	r3, [pc, #84]	; (800c584 <udp_remove+0x80>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	4a14      	ldr	r2, [pc, #80]	; (800c584 <udp_remove+0x80>)
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	e017      	b.n	800c568 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c538:	4b12      	ldr	r3, [pc, #72]	; (800c584 <udp_remove+0x80>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	60fb      	str	r3, [r7, #12]
 800c53e:	e010      	b.n	800c562 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d009      	beq.n	800c55c <udp_remove+0x58>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d104      	bne.n	800c55c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	60da      	str	r2, [r3, #12]
        break;
 800c55a:	e005      	b.n	800c568 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1eb      	bne.n	800c540 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	2000      	movs	r0, #0
 800c56c:	f7f8 fef0 	bl	8005350 <memp_free>
}
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	08013d50 	.word	0x08013d50
 800c57c:	0801409c 	.word	0x0801409c
 800c580:	08013da4 	.word	0x08013da4
 800c584:	200076e4 	.word	0x200076e4

0800c588 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c58e:	2000      	movs	r0, #0
 800c590:	f7f8 fe9c 	bl	80052cc <memp_malloc>
 800c594:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d007      	beq.n	800c5ac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c59c:	2220      	movs	r2, #32
 800c59e:	2100      	movs	r1, #0
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f004 fc61 	bl	8010e68 <memset>
    pcb->ttl = UDP_TTL;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	22ff      	movs	r2, #255	; 0xff
 800c5aa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c5ac:	687b      	ldr	r3, [r7, #4]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
	...

0800c5b8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d01e      	beq.n	800c606 <udp_netif_ip_addr_changed+0x4e>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d01a      	beq.n	800c606 <udp_netif_ip_addr_changed+0x4e>
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d017      	beq.n	800c606 <udp_netif_ip_addr_changed+0x4e>
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d013      	beq.n	800c606 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c5de:	4b0d      	ldr	r3, [pc, #52]	; (800c614 <udp_netif_ip_addr_changed+0x5c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	60fb      	str	r3, [r7, #12]
 800c5e4:	e00c      	b.n	800c600 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d103      	bne.n	800c5fa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	60fb      	str	r3, [r7, #12]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1ef      	bne.n	800c5e6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c606:	bf00      	nop
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	200076e4 	.word	0x200076e4

0800c618 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800c61c:	4b20      	ldr	r3, [pc, #128]	; (800c6a0 <dhcp_inc_pcb_refcount+0x88>)
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d133      	bne.n	800c68c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800c624:	4b1f      	ldr	r3, [pc, #124]	; (800c6a4 <dhcp_inc_pcb_refcount+0x8c>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d005      	beq.n	800c638 <dhcp_inc_pcb_refcount+0x20>
 800c62c:	4b1e      	ldr	r3, [pc, #120]	; (800c6a8 <dhcp_inc_pcb_refcount+0x90>)
 800c62e:	22e5      	movs	r2, #229	; 0xe5
 800c630:	491e      	ldr	r1, [pc, #120]	; (800c6ac <dhcp_inc_pcb_refcount+0x94>)
 800c632:	481f      	ldr	r0, [pc, #124]	; (800c6b0 <dhcp_inc_pcb_refcount+0x98>)
 800c634:	f004 fc20 	bl	8010e78 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800c638:	f7ff ffa6 	bl	800c588 <udp_new>
 800c63c:	4603      	mov	r3, r0
 800c63e:	4a19      	ldr	r2, [pc, #100]	; (800c6a4 <dhcp_inc_pcb_refcount+0x8c>)
 800c640:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800c642:	4b18      	ldr	r3, [pc, #96]	; (800c6a4 <dhcp_inc_pcb_refcount+0x8c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d102      	bne.n	800c650 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800c64a:	f04f 33ff 	mov.w	r3, #4294967295
 800c64e:	e024      	b.n	800c69a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800c650:	4b14      	ldr	r3, [pc, #80]	; (800c6a4 <dhcp_inc_pcb_refcount+0x8c>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	7a5a      	ldrb	r2, [r3, #9]
 800c656:	4b13      	ldr	r3, [pc, #76]	; (800c6a4 <dhcp_inc_pcb_refcount+0x8c>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f042 0220 	orr.w	r2, r2, #32
 800c65e:	b2d2      	uxtb	r2, r2
 800c660:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800c662:	4b10      	ldr	r3, [pc, #64]	; (800c6a4 <dhcp_inc_pcb_refcount+0x8c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2244      	movs	r2, #68	; 0x44
 800c668:	4912      	ldr	r1, [pc, #72]	; (800c6b4 <dhcp_inc_pcb_refcount+0x9c>)
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff fe34 	bl	800c2d8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800c670:	4b0c      	ldr	r3, [pc, #48]	; (800c6a4 <dhcp_inc_pcb_refcount+0x8c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2243      	movs	r2, #67	; 0x43
 800c676:	490f      	ldr	r1, [pc, #60]	; (800c6b4 <dhcp_inc_pcb_refcount+0x9c>)
 800c678:	4618      	mov	r0, r3
 800c67a:	f7ff feb5 	bl	800c3e8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800c67e:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <dhcp_inc_pcb_refcount+0x8c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2200      	movs	r2, #0
 800c684:	490c      	ldr	r1, [pc, #48]	; (800c6b8 <dhcp_inc_pcb_refcount+0xa0>)
 800c686:	4618      	mov	r0, r3
 800c688:	f7ff ff1c 	bl	800c4c4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800c68c:	4b04      	ldr	r3, [pc, #16]	; (800c6a0 <dhcp_inc_pcb_refcount+0x88>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	3301      	adds	r3, #1
 800c692:	b2da      	uxtb	r2, r3
 800c694:	4b02      	ldr	r3, [pc, #8]	; (800c6a0 <dhcp_inc_pcb_refcount+0x88>)
 800c696:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	20000180 	.word	0x20000180
 800c6a4:	2000017c 	.word	0x2000017c
 800c6a8:	080140b4 	.word	0x080140b4
 800c6ac:	080140ec 	.word	0x080140ec
 800c6b0:	08014114 	.word	0x08014114
 800c6b4:	08014c34 	.word	0x08014c34
 800c6b8:	0800ded9 	.word	0x0800ded9

0800c6bc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800c6c0:	4b0e      	ldr	r3, [pc, #56]	; (800c6fc <dhcp_dec_pcb_refcount+0x40>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d105      	bne.n	800c6d4 <dhcp_dec_pcb_refcount+0x18>
 800c6c8:	4b0d      	ldr	r3, [pc, #52]	; (800c700 <dhcp_dec_pcb_refcount+0x44>)
 800c6ca:	22ff      	movs	r2, #255	; 0xff
 800c6cc:	490d      	ldr	r1, [pc, #52]	; (800c704 <dhcp_dec_pcb_refcount+0x48>)
 800c6ce:	480e      	ldr	r0, [pc, #56]	; (800c708 <dhcp_dec_pcb_refcount+0x4c>)
 800c6d0:	f004 fbd2 	bl	8010e78 <iprintf>
  dhcp_pcb_refcount--;
 800c6d4:	4b09      	ldr	r3, [pc, #36]	; (800c6fc <dhcp_dec_pcb_refcount+0x40>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	b2da      	uxtb	r2, r3
 800c6dc:	4b07      	ldr	r3, [pc, #28]	; (800c6fc <dhcp_dec_pcb_refcount+0x40>)
 800c6de:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800c6e0:	4b06      	ldr	r3, [pc, #24]	; (800c6fc <dhcp_dec_pcb_refcount+0x40>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d107      	bne.n	800c6f8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800c6e8:	4b08      	ldr	r3, [pc, #32]	; (800c70c <dhcp_dec_pcb_refcount+0x50>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff ff09 	bl	800c504 <udp_remove>
    dhcp_pcb = NULL;
 800c6f2:	4b06      	ldr	r3, [pc, #24]	; (800c70c <dhcp_dec_pcb_refcount+0x50>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]
  }
}
 800c6f8:	bf00      	nop
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20000180 	.word	0x20000180
 800c700:	080140b4 	.word	0x080140b4
 800c704:	0801413c 	.word	0x0801413c
 800c708:	08014114 	.word	0x08014114
 800c70c:	2000017c 	.word	0x2000017c

0800c710 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c71c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c71e:	210c      	movs	r1, #12
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f001 f81b 	bl	800d75c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c726:	4b06      	ldr	r3, [pc, #24]	; (800c740 <dhcp_handle_nak+0x30>)
 800c728:	4a05      	ldr	r2, [pc, #20]	; (800c740 <dhcp_handle_nak+0x30>)
 800c72a:	4905      	ldr	r1, [pc, #20]	; (800c740 <dhcp_handle_nak+0x30>)
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7f8 ffb1 	bl	8005694 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 fc0e 	bl	800cf54 <dhcp_discover>
}
 800c738:	bf00      	nop
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	08014c34 	.word	0x08014c34

0800c744 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c750:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800c752:	2108      	movs	r1, #8
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f001 f801 	bl	800d75c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	331c      	adds	r3, #28
 800c75e:	2200      	movs	r2, #0
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f002 fb26 	bl	800edb4 <etharp_query>
 800c768:	4603      	mov	r3, r0
 800c76a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	799b      	ldrb	r3, [r3, #6]
 800c770:	2bff      	cmp	r3, #255	; 0xff
 800c772:	d005      	beq.n	800c780 <dhcp_check+0x3c>
    dhcp->tries++;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	799b      	ldrb	r3, [r3, #6]
 800c778:	3301      	adds	r3, #1
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800c780:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c784:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c786:	893b      	ldrh	r3, [r7, #8]
 800c788:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c78c:	4a06      	ldr	r2, [pc, #24]	; (800c7a8 <dhcp_check+0x64>)
 800c78e:	fb82 1203 	smull	r1, r2, r2, r3
 800c792:	1152      	asrs	r2, r2, #5
 800c794:	17db      	asrs	r3, r3, #31
 800c796:	1ad3      	subs	r3, r2, r3
 800c798:	b29a      	uxth	r2, r3
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800c79e:	bf00      	nop
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	10624dd3 	.word	0x10624dd3

0800c7ac <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800c7bc:	4b0c      	ldr	r3, [pc, #48]	; (800c7f0 <dhcp_handle_offer+0x44>)
 800c7be:	789b      	ldrb	r3, [r3, #2]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d011      	beq.n	800c7e8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800c7ca:	4b0a      	ldr	r3, [pc, #40]	; (800c7f4 <dhcp_handle_offer+0x48>)
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f7 ff49 	bl	8004666 <lwip_htonl>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	691a      	ldr	r2, [r3, #16]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f808 	bl	800c7f8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	200076e8 	.word	0x200076e8
 800c7f4:	200076f0 	.word	0x200076f0

0800c7f8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800c7f8:	b5b0      	push	{r4, r5, r7, lr}
 800c7fa:	b08a      	sub	sp, #40	; 0x28
 800c7fc:	af02      	add	r7, sp, #8
 800c7fe:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d109      	bne.n	800c81a <dhcp_select+0x22>
 800c806:	4b71      	ldr	r3, [pc, #452]	; (800c9cc <dhcp_select+0x1d4>)
 800c808:	f240 1277 	movw	r2, #375	; 0x177
 800c80c:	4970      	ldr	r1, [pc, #448]	; (800c9d0 <dhcp_select+0x1d8>)
 800c80e:	4871      	ldr	r0, [pc, #452]	; (800c9d4 <dhcp_select+0x1dc>)
 800c810:	f004 fb32 	bl	8010e78 <iprintf>
 800c814:	f06f 030f 	mvn.w	r3, #15
 800c818:	e0d3      	b.n	800c9c2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d109      	bne.n	800c83a <dhcp_select+0x42>
 800c826:	4b69      	ldr	r3, [pc, #420]	; (800c9cc <dhcp_select+0x1d4>)
 800c828:	f240 1279 	movw	r2, #377	; 0x179
 800c82c:	496a      	ldr	r1, [pc, #424]	; (800c9d8 <dhcp_select+0x1e0>)
 800c82e:	4869      	ldr	r0, [pc, #420]	; (800c9d4 <dhcp_select+0x1dc>)
 800c830:	f004 fb22 	bl	8010e78 <iprintf>
 800c834:	f06f 0305 	mvn.w	r3, #5
 800c838:	e0c3      	b.n	800c9c2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800c83a:	2101      	movs	r1, #1
 800c83c:	69b8      	ldr	r0, [r7, #24]
 800c83e:	f000 ff8d 	bl	800d75c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c842:	f107 030c 	add.w	r3, r7, #12
 800c846:	2203      	movs	r2, #3
 800c848:	69b9      	ldr	r1, [r7, #24]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f001 fc12 	bl	800e074 <dhcp_create_msg>
 800c850:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	f000 8085 	beq.w	800c964 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c860:	89b8      	ldrh	r0, [r7, #12]
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c868:	2302      	movs	r3, #2
 800c86a:	2239      	movs	r2, #57	; 0x39
 800c86c:	f000 ff90 	bl	800d790 <dhcp_option>
 800c870:	4603      	mov	r3, r0
 800c872:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c874:	89b8      	ldrh	r0, [r7, #12]
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c880:	461a      	mov	r2, r3
 800c882:	f000 ffdf 	bl	800d844 <dhcp_option_short>
 800c886:	4603      	mov	r3, r0
 800c888:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c88a:	89b8      	ldrh	r0, [r7, #12]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c892:	2304      	movs	r3, #4
 800c894:	2232      	movs	r2, #50	; 0x32
 800c896:	f000 ff7b 	bl	800d790 <dhcp_option>
 800c89a:	4603      	mov	r3, r0
 800c89c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c89e:	89bc      	ldrh	r4, [r7, #12]
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	69db      	ldr	r3, [r3, #28]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7f7 fedb 	bl	8004666 <lwip_htonl>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 fff6 	bl	800d8a8 <dhcp_option_long>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c8c0:	89b8      	ldrh	r0, [r7, #12]
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c8c8:	2304      	movs	r3, #4
 800c8ca:	2236      	movs	r2, #54	; 0x36
 800c8cc:	f000 ff60 	bl	800d790 <dhcp_option>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800c8d4:	89bc      	ldrh	r4, [r7, #12]
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7f7 fec0 	bl	8004666 <lwip_htonl>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f000 ffdb 	bl	800d8a8 <dhcp_option_long>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c8f6:	89b8      	ldrh	r0, [r7, #12]
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c8fe:	2303      	movs	r3, #3
 800c900:	2237      	movs	r2, #55	; 0x37
 800c902:	f000 ff45 	bl	800d790 <dhcp_option>
 800c906:	4603      	mov	r3, r0
 800c908:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c90a:	2300      	movs	r3, #0
 800c90c:	77bb      	strb	r3, [r7, #30]
 800c90e:	e00e      	b.n	800c92e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c910:	89b8      	ldrh	r0, [r7, #12]
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c918:	7fbb      	ldrb	r3, [r7, #30]
 800c91a:	4a30      	ldr	r2, [pc, #192]	; (800c9dc <dhcp_select+0x1e4>)
 800c91c:	5cd3      	ldrb	r3, [r2, r3]
 800c91e:	461a      	mov	r2, r3
 800c920:	f000 ff6a 	bl	800d7f8 <dhcp_option_byte>
 800c924:	4603      	mov	r3, r0
 800c926:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c928:	7fbb      	ldrb	r3, [r7, #30]
 800c92a:	3301      	adds	r3, #1
 800c92c:	77bb      	strb	r3, [r7, #30]
 800c92e:	7fbb      	ldrb	r3, [r7, #30]
 800c930:	2b02      	cmp	r3, #2
 800c932:	d9ed      	bls.n	800c910 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c934:	89b8      	ldrh	r0, [r7, #12]
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	33f0      	adds	r3, #240	; 0xf0
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	4619      	mov	r1, r3
 800c93e:	f001 fc6f 	bl	800e220 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c942:	4b27      	ldr	r3, [pc, #156]	; (800c9e0 <dhcp_select+0x1e8>)
 800c944:	6818      	ldr	r0, [r3, #0]
 800c946:	4b27      	ldr	r3, [pc, #156]	; (800c9e4 <dhcp_select+0x1ec>)
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	2343      	movs	r3, #67	; 0x43
 800c950:	4a25      	ldr	r2, [pc, #148]	; (800c9e8 <dhcp_select+0x1f0>)
 800c952:	6979      	ldr	r1, [r7, #20]
 800c954:	f7ff fbb6 	bl	800c0c4 <udp_sendto_if_src>
 800c958:	4603      	mov	r3, r0
 800c95a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c95c:	6978      	ldr	r0, [r7, #20]
 800c95e:	f7f9 facd 	bl	8005efc <pbuf_free>
 800c962:	e001      	b.n	800c968 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c964:	23ff      	movs	r3, #255	; 0xff
 800c966:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	799b      	ldrb	r3, [r3, #6]
 800c96c:	2bff      	cmp	r3, #255	; 0xff
 800c96e:	d005      	beq.n	800c97c <dhcp_select+0x184>
    dhcp->tries++;
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	799b      	ldrb	r3, [r3, #6]
 800c974:	3301      	adds	r3, #1
 800c976:	b2da      	uxtb	r2, r3
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	799b      	ldrb	r3, [r3, #6]
 800c980:	2b05      	cmp	r3, #5
 800c982:	d80d      	bhi.n	800c9a0 <dhcp_select+0x1a8>
 800c984:	69bb      	ldr	r3, [r7, #24]
 800c986:	799b      	ldrb	r3, [r3, #6]
 800c988:	461a      	mov	r2, r3
 800c98a:	2301      	movs	r3, #1
 800c98c:	4093      	lsls	r3, r2
 800c98e:	b29b      	uxth	r3, r3
 800c990:	461a      	mov	r2, r3
 800c992:	0152      	lsls	r2, r2, #5
 800c994:	1ad2      	subs	r2, r2, r3
 800c996:	0092      	lsls	r2, r2, #2
 800c998:	4413      	add	r3, r2
 800c99a:	00db      	lsls	r3, r3, #3
 800c99c:	b29b      	uxth	r3, r3
 800c99e:	e001      	b.n	800c9a4 <dhcp_select+0x1ac>
 800c9a0:	f64e 2360 	movw	r3, #60000	; 0xea60
 800c9a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c9a6:	89fb      	ldrh	r3, [r7, #14]
 800c9a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c9ac:	4a0f      	ldr	r2, [pc, #60]	; (800c9ec <dhcp_select+0x1f4>)
 800c9ae:	fb82 1203 	smull	r1, r2, r2, r3
 800c9b2:	1152      	asrs	r2, r2, #5
 800c9b4:	17db      	asrs	r3, r3, #31
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c9be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3720      	adds	r7, #32
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bdb0      	pop	{r4, r5, r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	080140b4 	.word	0x080140b4
 800c9d0:	08014160 	.word	0x08014160
 800c9d4:	08014114 	.word	0x08014114
 800c9d8:	0801417c 	.word	0x0801417c
 800c9dc:	20000014 	.word	0x20000014
 800c9e0:	2000017c 	.word	0x2000017c
 800c9e4:	08014c34 	.word	0x08014c34
 800c9e8:	08014c38 	.word	0x08014c38
 800c9ec:	10624dd3 	.word	0x10624dd3

0800c9f0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800c9f6:	4b27      	ldr	r3, [pc, #156]	; (800ca94 <dhcp_coarse_tmr+0xa4>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	607b      	str	r3, [r7, #4]
 800c9fc:	e042      	b.n	800ca84 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca02:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d039      	beq.n	800ca7e <dhcp_coarse_tmr+0x8e>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	795b      	ldrb	r3, [r3, #5]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d035      	beq.n	800ca7e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	8a9b      	ldrh	r3, [r3, #20]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d012      	beq.n	800ca40 <dhcp_coarse_tmr+0x50>
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	8a5b      	ldrh	r3, [r3, #18]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b29a      	uxth	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	825a      	strh	r2, [r3, #18]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	8a5a      	ldrh	r2, [r3, #18]
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	8a9b      	ldrh	r3, [r3, #20]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d106      	bne.n	800ca40 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fdf8 	bl	800d628 <dhcp_release_and_stop>
        dhcp_start(netif);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f96b 	bl	800cd14 <dhcp_start>
 800ca3e:	e01e      	b.n	800ca7e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	8a1b      	ldrh	r3, [r3, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00b      	beq.n	800ca60 <dhcp_coarse_tmr+0x70>
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	8a1b      	ldrh	r3, [r3, #16]
 800ca4c:	1e5a      	subs	r2, r3, #1
 800ca4e:	b291      	uxth	r1, r2
 800ca50:	683a      	ldr	r2, [r7, #0]
 800ca52:	8211      	strh	r1, [r2, #16]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d103      	bne.n	800ca60 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 f8c7 	bl	800cbec <dhcp_t2_timeout>
 800ca5e:	e00e      	b.n	800ca7e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	89db      	ldrh	r3, [r3, #14]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00a      	beq.n	800ca7e <dhcp_coarse_tmr+0x8e>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	89db      	ldrh	r3, [r3, #14]
 800ca6c:	1e5a      	subs	r2, r3, #1
 800ca6e:	b291      	uxth	r1, r2
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	81d1      	strh	r1, [r2, #14]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d102      	bne.n	800ca7e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f888 	bl	800cb8e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	607b      	str	r3, [r7, #4]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d1b9      	bne.n	800c9fe <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ca8a:	bf00      	nop
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200075e4 	.word	0x200075e4

0800ca98 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ca9e:	4b16      	ldr	r3, [pc, #88]	; (800caf8 <dhcp_fine_tmr+0x60>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	607b      	str	r3, [r7, #4]
 800caa4:	e020      	b.n	800cae8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caaa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d017      	beq.n	800cae2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	891b      	ldrh	r3, [r3, #8]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d906      	bls.n	800cac8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	891b      	ldrh	r3, [r3, #8]
 800cabe:	3b01      	subs	r3, #1
 800cac0:	b29a      	uxth	r2, r3
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	811a      	strh	r2, [r3, #8]
 800cac6:	e00c      	b.n	800cae2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	891b      	ldrh	r3, [r3, #8]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d108      	bne.n	800cae2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	891b      	ldrh	r3, [r3, #8]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f80d 	bl	800cafc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	607b      	str	r3, [r7, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1db      	bne.n	800caa6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800caee:	bf00      	nop
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	200075e4 	.word	0x200075e4

0800cafc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb08:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	795b      	ldrb	r3, [r3, #5]
 800cb0e:	2b0c      	cmp	r3, #12
 800cb10:	d003      	beq.n	800cb1a <dhcp_timeout+0x1e>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	795b      	ldrb	r3, [r3, #5]
 800cb16:	2b06      	cmp	r3, #6
 800cb18:	d103      	bne.n	800cb22 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fa1a 	bl	800cf54 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800cb20:	e031      	b.n	800cb86 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	795b      	ldrb	r3, [r3, #5]
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d10e      	bne.n	800cb48 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	799b      	ldrb	r3, [r3, #6]
 800cb2e:	2b05      	cmp	r3, #5
 800cb30:	d803      	bhi.n	800cb3a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff fe60 	bl	800c7f8 <dhcp_select>
}
 800cb38:	e025      	b.n	800cb86 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fd74 	bl	800d628 <dhcp_release_and_stop>
      dhcp_start(netif);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f8e7 	bl	800cd14 <dhcp_start>
}
 800cb46:	e01e      	b.n	800cb86 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	795b      	ldrb	r3, [r3, #5]
 800cb4c:	2b08      	cmp	r3, #8
 800cb4e:	d10b      	bne.n	800cb68 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	799b      	ldrb	r3, [r3, #6]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d803      	bhi.n	800cb60 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff fdf3 	bl	800c744 <dhcp_check>
}
 800cb5e:	e012      	b.n	800cb86 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fa99 	bl	800d098 <dhcp_bind>
}
 800cb66:	e00e      	b.n	800cb86 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	795b      	ldrb	r3, [r3, #5]
 800cb6c:	2b03      	cmp	r3, #3
 800cb6e:	d10a      	bne.n	800cb86 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	799b      	ldrb	r3, [r3, #6]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d803      	bhi.n	800cb80 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fc9f 	bl	800d4bc <dhcp_reboot>
}
 800cb7e:	e002      	b.n	800cb86 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f9e7 	bl	800cf54 <dhcp_discover>
}
 800cb86:	bf00      	nop
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b084      	sub	sp, #16
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	795b      	ldrb	r3, [r3, #5]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d007      	beq.n	800cbb4 <dhcp_t1_timeout+0x26>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	795b      	ldrb	r3, [r3, #5]
 800cba8:	2b0a      	cmp	r3, #10
 800cbaa:	d003      	beq.n	800cbb4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800cbb0:	2b05      	cmp	r3, #5
 800cbb2:	d117      	bne.n	800cbe4 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 fb49 	bl	800d24c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	899b      	ldrh	r3, [r3, #12]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	8a5b      	ldrh	r3, [r3, #18]
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	dd0c      	ble.n	800cbe4 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	899b      	ldrh	r3, [r3, #12]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	8a5b      	ldrh	r3, [r3, #18]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	da00      	bge.n	800cbdc <dhcp_t1_timeout+0x4e>
 800cbda:	3301      	adds	r3, #1
 800cbdc:	105b      	asrs	r3, r3, #1
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800cbe4:	bf00      	nop
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	795b      	ldrb	r3, [r3, #5]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d00b      	beq.n	800cc1a <dhcp_t2_timeout+0x2e>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	795b      	ldrb	r3, [r3, #5]
 800cc06:	2b0a      	cmp	r3, #10
 800cc08:	d007      	beq.n	800cc1a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800cc0e:	2b05      	cmp	r3, #5
 800cc10:	d003      	beq.n	800cc1a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	795b      	ldrb	r3, [r3, #5]
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	d117      	bne.n	800cc4a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fbb2 	bl	800d384 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	8a9b      	ldrh	r3, [r3, #20]
 800cc24:	461a      	mov	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	8a5b      	ldrh	r3, [r3, #18]
 800cc2a:	1ad3      	subs	r3, r2, r3
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	dd0c      	ble.n	800cc4a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	8a9b      	ldrh	r3, [r3, #20]
 800cc34:	461a      	mov	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	8a5b      	ldrh	r3, [r3, #18]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da00      	bge.n	800cc42 <dhcp_t2_timeout+0x56>
 800cc40:	3301      	adds	r3, #1
 800cc42:	105b      	asrs	r3, r3, #1
 800cc44:	b29a      	uxth	r2, r3
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc62:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2200      	movs	r2, #0
 800cc68:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800cc70:	4b26      	ldr	r3, [pc, #152]	; (800cd0c <dhcp_handle_ack+0xb8>)
 800cc72:	78db      	ldrb	r3, [r3, #3]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d003      	beq.n	800cc80 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800cc78:	4b25      	ldr	r3, [pc, #148]	; (800cd10 <dhcp_handle_ack+0xbc>)
 800cc7a:	68da      	ldr	r2, [r3, #12]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800cc80:	4b22      	ldr	r3, [pc, #136]	; (800cd0c <dhcp_handle_ack+0xb8>)
 800cc82:	791b      	ldrb	r3, [r3, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d004      	beq.n	800cc92 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800cc88:	4b21      	ldr	r3, [pc, #132]	; (800cd10 <dhcp_handle_ack+0xbc>)
 800cc8a:	691a      	ldr	r2, [r3, #16]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	62da      	str	r2, [r3, #44]	; 0x2c
 800cc90:	e004      	b.n	800cc9c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc96:	085a      	lsrs	r2, r3, #1
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800cc9c:	4b1b      	ldr	r3, [pc, #108]	; (800cd0c <dhcp_handle_ack+0xb8>)
 800cc9e:	795b      	ldrb	r3, [r3, #5]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d004      	beq.n	800ccae <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800cca4:	4b1a      	ldr	r3, [pc, #104]	; (800cd10 <dhcp_handle_ack+0xbc>)
 800cca6:	695a      	ldr	r2, [r3, #20]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	631a      	str	r2, [r3, #48]	; 0x30
 800ccac:	e007      	b.n	800ccbe <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	1a9b      	subs	r3, r3, r2
 800ccb8:	08da      	lsrs	r2, r3, #3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	691a      	ldr	r2, [r3, #16]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ccc6:	4b11      	ldr	r3, [pc, #68]	; (800cd0c <dhcp_handle_ack+0xb8>)
 800ccc8:	799b      	ldrb	r3, [r3, #6]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00b      	beq.n	800cce6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ccce:	4b10      	ldr	r3, [pc, #64]	; (800cd10 <dhcp_handle_ack+0xbc>)
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7f7 fcc7 	bl	8004666 <lwip_htonl>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2201      	movs	r2, #1
 800cce2:	71da      	strb	r2, [r3, #7]
 800cce4:	e002      	b.n	800ccec <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ccec:	4b07      	ldr	r3, [pc, #28]	; (800cd0c <dhcp_handle_ack+0xb8>)
 800ccee:	79db      	ldrb	r3, [r3, #7]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d007      	beq.n	800cd04 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ccf4:	4b06      	ldr	r3, [pc, #24]	; (800cd10 <dhcp_handle_ack+0xbc>)
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7f7 fcb4 	bl	8004666 <lwip_htonl>
 800ccfe:	4602      	mov	r2, r0
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800cd04:	bf00      	nop
 800cd06:	3710      	adds	r7, #16
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	200076e8 	.word	0x200076e8
 800cd10:	200076f0 	.word	0x200076f0

0800cd14 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d109      	bne.n	800cd36 <dhcp_start+0x22>
 800cd22:	4b37      	ldr	r3, [pc, #220]	; (800ce00 <dhcp_start+0xec>)
 800cd24:	f240 22e7 	movw	r2, #743	; 0x2e7
 800cd28:	4936      	ldr	r1, [pc, #216]	; (800ce04 <dhcp_start+0xf0>)
 800cd2a:	4837      	ldr	r0, [pc, #220]	; (800ce08 <dhcp_start+0xf4>)
 800cd2c:	f004 f8a4 	bl	8010e78 <iprintf>
 800cd30:	f06f 030f 	mvn.w	r3, #15
 800cd34:	e060      	b.n	800cdf8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd3c:	f003 0301 	and.w	r3, r3, #1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d109      	bne.n	800cd58 <dhcp_start+0x44>
 800cd44:	4b2e      	ldr	r3, [pc, #184]	; (800ce00 <dhcp_start+0xec>)
 800cd46:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800cd4a:	4930      	ldr	r1, [pc, #192]	; (800ce0c <dhcp_start+0xf8>)
 800cd4c:	482e      	ldr	r0, [pc, #184]	; (800ce08 <dhcp_start+0xf4>)
 800cd4e:	f004 f893 	bl	8010e78 <iprintf>
 800cd52:	f06f 030f 	mvn.w	r3, #15
 800cd56:	e04f      	b.n	800cdf8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd62:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800cd66:	d202      	bcs.n	800cd6e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800cd68:	f04f 33ff 	mov.w	r3, #4294967295
 800cd6c:	e044      	b.n	800cdf8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10d      	bne.n	800cd90 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800cd74:	2034      	movs	r0, #52	; 0x34
 800cd76:	f7f8 f901 	bl	8004f7c <mem_malloc>
 800cd7a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d102      	bne.n	800cd88 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800cd82:	f04f 33ff 	mov.w	r3, #4294967295
 800cd86:	e037      	b.n	800cdf8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	625a      	str	r2, [r3, #36]	; 0x24
 800cd8e:	e005      	b.n	800cd9c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	791b      	ldrb	r3, [r3, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d001      	beq.n	800cd9c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800cd98:	f7ff fc90 	bl	800c6bc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800cd9c:	2234      	movs	r2, #52	; 0x34
 800cd9e:	2100      	movs	r1, #0
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f004 f861 	bl	8010e68 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800cda6:	f7ff fc37 	bl	800c618 <dhcp_inc_pcb_refcount>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <dhcp_start+0xa2>
    return ERR_MEM;
 800cdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb4:	e020      	b.n	800cdf8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cdc2:	f003 0304 	and.w	r3, r3, #4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d105      	bne.n	800cdd6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800cdca:	2102      	movs	r1, #2
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f000 fcc5 	bl	800d75c <dhcp_set_state>
    return ERR_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e010      	b.n	800cdf8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f8bc 	bl	800cf54 <dhcp_discover>
 800cddc:	4603      	mov	r3, r0
 800cdde:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800cde0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d005      	beq.n	800cdf4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f000 fc1d 	bl	800d628 <dhcp_release_and_stop>
    return ERR_MEM;
 800cdee:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf2:	e001      	b.n	800cdf8 <dhcp_start+0xe4>
  }
  return result;
 800cdf4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	080140b4 	.word	0x080140b4
 800ce04:	08014198 	.word	0x08014198
 800ce08:	08014114 	.word	0x08014114
 800ce0c:	080141dc 	.word	0x080141dc

0800ce10 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d107      	bne.n	800ce30 <dhcp_arp_reply+0x20>
 800ce20:	4b0e      	ldr	r3, [pc, #56]	; (800ce5c <dhcp_arp_reply+0x4c>)
 800ce22:	f240 328b 	movw	r2, #907	; 0x38b
 800ce26:	490e      	ldr	r1, [pc, #56]	; (800ce60 <dhcp_arp_reply+0x50>)
 800ce28:	480e      	ldr	r0, [pc, #56]	; (800ce64 <dhcp_arp_reply+0x54>)
 800ce2a:	f004 f825 	bl	8010e78 <iprintf>
 800ce2e:	e012      	b.n	800ce56 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce34:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00c      	beq.n	800ce56 <dhcp_arp_reply+0x46>
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	795b      	ldrb	r3, [r3, #5]
 800ce40:	2b08      	cmp	r3, #8
 800ce42:	d108      	bne.n	800ce56 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	69db      	ldr	r3, [r3, #28]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d102      	bne.n	800ce56 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f809 	bl	800ce68 <dhcp_decline>
    }
  }
}
 800ce56:	3710      	adds	r7, #16
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	080140b4 	.word	0x080140b4
 800ce60:	08014198 	.word	0x08014198
 800ce64:	08014114 	.word	0x08014114

0800ce68 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800ce68:	b5b0      	push	{r4, r5, r7, lr}
 800ce6a:	b08a      	sub	sp, #40	; 0x28
 800ce6c:	af02      	add	r7, sp, #8
 800ce6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ce76:	210c      	movs	r1, #12
 800ce78:	69b8      	ldr	r0, [r7, #24]
 800ce7a:	f000 fc6f 	bl	800d75c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800ce7e:	f107 030c 	add.w	r3, r7, #12
 800ce82:	2204      	movs	r2, #4
 800ce84:	69b9      	ldr	r1, [r7, #24]
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f001 f8f4 	bl	800e074 <dhcp_create_msg>
 800ce8c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d035      	beq.n	800cf00 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ce9a:	89b8      	ldrh	r0, [r7, #12]
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cea2:	2304      	movs	r3, #4
 800cea4:	2232      	movs	r2, #50	; 0x32
 800cea6:	f000 fc73 	bl	800d790 <dhcp_option>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ceae:	89bc      	ldrh	r4, [r7, #12]
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	69db      	ldr	r3, [r3, #28]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f7 fbd3 	bl	8004666 <lwip_htonl>
 800cec0:	4603      	mov	r3, r0
 800cec2:	461a      	mov	r2, r3
 800cec4:	4629      	mov	r1, r5
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 fcee 	bl	800d8a8 <dhcp_option_long>
 800cecc:	4603      	mov	r3, r0
 800cece:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ced0:	89b8      	ldrh	r0, [r7, #12]
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	33f0      	adds	r3, #240	; 0xf0
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	4619      	mov	r1, r3
 800ceda:	f001 f9a1 	bl	800e220 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cede:	4b19      	ldr	r3, [pc, #100]	; (800cf44 <dhcp_decline+0xdc>)
 800cee0:	6818      	ldr	r0, [r3, #0]
 800cee2:	4b19      	ldr	r3, [pc, #100]	; (800cf48 <dhcp_decline+0xe0>)
 800cee4:	9301      	str	r3, [sp, #4]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	2343      	movs	r3, #67	; 0x43
 800ceec:	4a17      	ldr	r2, [pc, #92]	; (800cf4c <dhcp_decline+0xe4>)
 800ceee:	6979      	ldr	r1, [r7, #20]
 800cef0:	f7ff f8e8 	bl	800c0c4 <udp_sendto_if_src>
 800cef4:	4603      	mov	r3, r0
 800cef6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800cef8:	6978      	ldr	r0, [r7, #20]
 800cefa:	f7f8 ffff 	bl	8005efc <pbuf_free>
 800cefe:	e001      	b.n	800cf04 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800cf00:	23ff      	movs	r3, #255	; 0xff
 800cf02:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	799b      	ldrb	r3, [r3, #6]
 800cf08:	2bff      	cmp	r3, #255	; 0xff
 800cf0a:	d005      	beq.n	800cf18 <dhcp_decline+0xb0>
    dhcp->tries++;
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	799b      	ldrb	r3, [r3, #6]
 800cf10:	3301      	adds	r3, #1
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800cf18:	f242 7310 	movw	r3, #10000	; 0x2710
 800cf1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cf1e:	89fb      	ldrh	r3, [r7, #14]
 800cf20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800cf24:	4a0a      	ldr	r2, [pc, #40]	; (800cf50 <dhcp_decline+0xe8>)
 800cf26:	fb82 1203 	smull	r1, r2, r2, r3
 800cf2a:	1152      	asrs	r2, r2, #5
 800cf2c:	17db      	asrs	r3, r3, #31
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800cf36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3720      	adds	r7, #32
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bdb0      	pop	{r4, r5, r7, pc}
 800cf42:	bf00      	nop
 800cf44:	2000017c 	.word	0x2000017c
 800cf48:	08014c34 	.word	0x08014c34
 800cf4c:	08014c38 	.word	0x08014c38
 800cf50:	10624dd3 	.word	0x10624dd3

0800cf54 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08a      	sub	sp, #40	; 0x28
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf60:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800cf62:	2300      	movs	r3, #0
 800cf64:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800cf6c:	2106      	movs	r1, #6
 800cf6e:	69b8      	ldr	r0, [r7, #24]
 800cf70:	f000 fbf4 	bl	800d75c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800cf74:	f107 0308 	add.w	r3, r7, #8
 800cf78:	2201      	movs	r2, #1
 800cf7a:	69b9      	ldr	r1, [r7, #24]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f001 f879 	bl	800e074 <dhcp_create_msg>
 800cf82:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d04b      	beq.n	800d022 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800cf90:	8938      	ldrh	r0, [r7, #8]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cf98:	2302      	movs	r3, #2
 800cf9a:	2239      	movs	r2, #57	; 0x39
 800cf9c:	f000 fbf8 	bl	800d790 <dhcp_option>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800cfa4:	8938      	ldrh	r0, [r7, #8]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	f000 fc47 	bl	800d844 <dhcp_option_short>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800cfba:	8938      	ldrh	r0, [r7, #8]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	2237      	movs	r2, #55	; 0x37
 800cfc6:	f000 fbe3 	bl	800d790 <dhcp_option>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cfce:	2300      	movs	r3, #0
 800cfd0:	77fb      	strb	r3, [r7, #31]
 800cfd2:	e00e      	b.n	800cff2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cfd4:	8938      	ldrh	r0, [r7, #8]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cfdc:	7ffb      	ldrb	r3, [r7, #31]
 800cfde:	4a29      	ldr	r2, [pc, #164]	; (800d084 <dhcp_discover+0x130>)
 800cfe0:	5cd3      	ldrb	r3, [r2, r3]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	f000 fc08 	bl	800d7f8 <dhcp_option_byte>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cfec:	7ffb      	ldrb	r3, [r7, #31]
 800cfee:	3301      	adds	r3, #1
 800cff0:	77fb      	strb	r3, [r7, #31]
 800cff2:	7ffb      	ldrb	r3, [r7, #31]
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d9ed      	bls.n	800cfd4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cff8:	8938      	ldrh	r0, [r7, #8]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	33f0      	adds	r3, #240	; 0xf0
 800cffe:	693a      	ldr	r2, [r7, #16]
 800d000:	4619      	mov	r1, r3
 800d002:	f001 f90d 	bl	800e220 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d006:	4b20      	ldr	r3, [pc, #128]	; (800d088 <dhcp_discover+0x134>)
 800d008:	6818      	ldr	r0, [r3, #0]
 800d00a:	4b20      	ldr	r3, [pc, #128]	; (800d08c <dhcp_discover+0x138>)
 800d00c:	9301      	str	r3, [sp, #4]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	2343      	movs	r3, #67	; 0x43
 800d014:	4a1e      	ldr	r2, [pc, #120]	; (800d090 <dhcp_discover+0x13c>)
 800d016:	6939      	ldr	r1, [r7, #16]
 800d018:	f7ff f854 	bl	800c0c4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800d01c:	6938      	ldr	r0, [r7, #16]
 800d01e:	f7f8 ff6d 	bl	8005efc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	799b      	ldrb	r3, [r3, #6]
 800d026:	2bff      	cmp	r3, #255	; 0xff
 800d028:	d005      	beq.n	800d036 <dhcp_discover+0xe2>
    dhcp->tries++;
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	799b      	ldrb	r3, [r3, #6]
 800d02e:	3301      	adds	r3, #1
 800d030:	b2da      	uxtb	r2, r3
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	799b      	ldrb	r3, [r3, #6]
 800d03a:	2b05      	cmp	r3, #5
 800d03c:	d80d      	bhi.n	800d05a <dhcp_discover+0x106>
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	799b      	ldrb	r3, [r3, #6]
 800d042:	461a      	mov	r2, r3
 800d044:	2301      	movs	r3, #1
 800d046:	4093      	lsls	r3, r2
 800d048:	b29b      	uxth	r3, r3
 800d04a:	461a      	mov	r2, r3
 800d04c:	0152      	lsls	r2, r2, #5
 800d04e:	1ad2      	subs	r2, r2, r3
 800d050:	0092      	lsls	r2, r2, #2
 800d052:	4413      	add	r3, r2
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	b29b      	uxth	r3, r3
 800d058:	e001      	b.n	800d05e <dhcp_discover+0x10a>
 800d05a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d05e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d060:	897b      	ldrh	r3, [r7, #10]
 800d062:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d066:	4a0b      	ldr	r2, [pc, #44]	; (800d094 <dhcp_discover+0x140>)
 800d068:	fb82 1203 	smull	r1, r2, r2, r3
 800d06c:	1152      	asrs	r2, r2, #5
 800d06e:	17db      	asrs	r3, r3, #31
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	b29a      	uxth	r2, r3
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d078:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3720      	adds	r7, #32
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	20000014 	.word	0x20000014
 800d088:	2000017c 	.word	0x2000017c
 800d08c:	08014c34 	.word	0x08014c34
 800d090:	08014c38 	.word	0x08014c38
 800d094:	10624dd3 	.word	0x10624dd3

0800d098 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d107      	bne.n	800d0b6 <dhcp_bind+0x1e>
 800d0a6:	4b64      	ldr	r3, [pc, #400]	; (800d238 <dhcp_bind+0x1a0>)
 800d0a8:	f240 4215 	movw	r2, #1045	; 0x415
 800d0ac:	4963      	ldr	r1, [pc, #396]	; (800d23c <dhcp_bind+0x1a4>)
 800d0ae:	4864      	ldr	r0, [pc, #400]	; (800d240 <dhcp_bind+0x1a8>)
 800d0b0:	f003 fee2 	bl	8010e78 <iprintf>
 800d0b4:	e0bc      	b.n	800d230 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d107      	bne.n	800d0d2 <dhcp_bind+0x3a>
 800d0c2:	4b5d      	ldr	r3, [pc, #372]	; (800d238 <dhcp_bind+0x1a0>)
 800d0c4:	f240 4217 	movw	r2, #1047	; 0x417
 800d0c8:	495e      	ldr	r1, [pc, #376]	; (800d244 <dhcp_bind+0x1ac>)
 800d0ca:	485d      	ldr	r0, [pc, #372]	; (800d240 <dhcp_bind+0x1a8>)
 800d0cc:	f003 fed4 	bl	8010e78 <iprintf>
 800d0d0:	e0ae      	b.n	800d230 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e0:	d019      	beq.n	800d116 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e6:	331e      	adds	r3, #30
 800d0e8:	4a57      	ldr	r2, [pc, #348]	; (800d248 <dhcp_bind+0x1b0>)
 800d0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ee:	095b      	lsrs	r3, r3, #5
 800d0f0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0f8:	d302      	bcc.n	800d100 <dhcp_bind+0x68>
      timeout = 0xffff;
 800d0fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0fe:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	b29a      	uxth	r2, r3
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	8a9b      	ldrh	r3, [r3, #20]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d102      	bne.n	800d116 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	2201      	movs	r2, #1
 800d114:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d11e:	d01d      	beq.n	800d15c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d124:	331e      	adds	r3, #30
 800d126:	4a48      	ldr	r2, [pc, #288]	; (800d248 <dhcp_bind+0x1b0>)
 800d128:	fba2 2303 	umull	r2, r3, r2, r3
 800d12c:	095b      	lsrs	r3, r3, #5
 800d12e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d136:	d302      	bcc.n	800d13e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800d138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d13c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	b29a      	uxth	r2, r3
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	895b      	ldrh	r3, [r3, #10]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d102      	bne.n	800d154 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	2201      	movs	r2, #1
 800d152:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	895a      	ldrh	r2, [r3, #10]
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d164:	d01d      	beq.n	800d1a2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d16a:	331e      	adds	r3, #30
 800d16c:	4a36      	ldr	r2, [pc, #216]	; (800d248 <dhcp_bind+0x1b0>)
 800d16e:	fba2 2303 	umull	r2, r3, r2, r3
 800d172:	095b      	lsrs	r3, r3, #5
 800d174:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d17c:	d302      	bcc.n	800d184 <dhcp_bind+0xec>
      timeout = 0xffff;
 800d17e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d182:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	b29a      	uxth	r2, r3
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	899b      	ldrh	r3, [r3, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d102      	bne.n	800d19a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	2201      	movs	r2, #1
 800d198:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	899a      	ldrh	r2, [r3, #12]
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	895a      	ldrh	r2, [r3, #10]
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	899b      	ldrh	r3, [r3, #12]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d306      	bcc.n	800d1bc <dhcp_bind+0x124>
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	899b      	ldrh	r3, [r3, #12]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d002      	beq.n	800d1bc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	79db      	ldrb	r3, [r3, #7]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d003      	beq.n	800d1cc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800d1c4:	69bb      	ldr	r3, [r7, #24]
 800d1c6:	6a1b      	ldr	r3, [r3, #32]
 800d1c8:	613b      	str	r3, [r7, #16]
 800d1ca:	e014      	b.n	800d1f6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	331c      	adds	r3, #28
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800d1d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	db02      	blt.n	800d1e2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800d1dc:	23ff      	movs	r3, #255	; 0xff
 800d1de:	613b      	str	r3, [r7, #16]
 800d1e0:	e009      	b.n	800d1f6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
 800d1e4:	2bbf      	cmp	r3, #191	; 0xbf
 800d1e6:	d903      	bls.n	800d1f0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800d1e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800d1ec:	613b      	str	r3, [r7, #16]
 800d1ee:	e002      	b.n	800d1f6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800d1f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1f4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d108      	bne.n	800d214 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	69da      	ldr	r2, [r3, #28]
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	4013      	ands	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d212:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800d214:	210a      	movs	r1, #10
 800d216:	69b8      	ldr	r0, [r7, #24]
 800d218:	f000 faa0 	bl	800d75c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	f103 011c 	add.w	r1, r3, #28
 800d222:	f107 030c 	add.w	r3, r7, #12
 800d226:	f107 0210 	add.w	r2, r7, #16
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7f8 fa32 	bl	8005694 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800d230:	3720      	adds	r7, #32
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	080140b4 	.word	0x080140b4
 800d23c:	08014214 	.word	0x08014214
 800d240:	08014114 	.word	0x08014114
 800d244:	08014230 	.word	0x08014230
 800d248:	88888889 	.word	0x88888889

0800d24c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	; 0x28
 800d250:	af02      	add	r7, sp, #8
 800d252:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d258:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800d25a:	2105      	movs	r1, #5
 800d25c:	69b8      	ldr	r0, [r7, #24]
 800d25e:	f000 fa7d 	bl	800d75c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d262:	f107 030c 	add.w	r3, r7, #12
 800d266:	2203      	movs	r2, #3
 800d268:	69b9      	ldr	r1, [r7, #24]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 ff02 	bl	800e074 <dhcp_create_msg>
 800d270:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d04e      	beq.n	800d316 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d27e:	89b8      	ldrh	r0, [r7, #12]
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d286:	2302      	movs	r3, #2
 800d288:	2239      	movs	r2, #57	; 0x39
 800d28a:	f000 fa81 	bl	800d790 <dhcp_option>
 800d28e:	4603      	mov	r3, r0
 800d290:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d292:	89b8      	ldrh	r0, [r7, #12]
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d29e:	461a      	mov	r2, r3
 800d2a0:	f000 fad0 	bl	800d844 <dhcp_option_short>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d2a8:	89b8      	ldrh	r0, [r7, #12]
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	2237      	movs	r2, #55	; 0x37
 800d2b4:	f000 fa6c 	bl	800d790 <dhcp_option>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d2bc:	2300      	movs	r3, #0
 800d2be:	77bb      	strb	r3, [r7, #30]
 800d2c0:	e00e      	b.n	800d2e0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d2c2:	89b8      	ldrh	r0, [r7, #12]
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2ca:	7fbb      	ldrb	r3, [r7, #30]
 800d2cc:	4a2a      	ldr	r2, [pc, #168]	; (800d378 <dhcp_renew+0x12c>)
 800d2ce:	5cd3      	ldrb	r3, [r2, r3]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	f000 fa91 	bl	800d7f8 <dhcp_option_byte>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d2da:	7fbb      	ldrb	r3, [r7, #30]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	77bb      	strb	r3, [r7, #30]
 800d2e0:	7fbb      	ldrb	r3, [r7, #30]
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d9ed      	bls.n	800d2c2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d2e6:	89b8      	ldrh	r0, [r7, #12]
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	33f0      	adds	r3, #240	; 0xf0
 800d2ec:	697a      	ldr	r2, [r7, #20]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	f000 ff96 	bl	800e220 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d2f4:	4b21      	ldr	r3, [pc, #132]	; (800d37c <dhcp_renew+0x130>)
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	f103 0218 	add.w	r2, r3, #24
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	2343      	movs	r3, #67	; 0x43
 800d304:	6979      	ldr	r1, [r7, #20]
 800d306:	f7fe fe69 	bl	800bfdc <udp_sendto_if>
 800d30a:	4603      	mov	r3, r0
 800d30c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d30e:	6978      	ldr	r0, [r7, #20]
 800d310:	f7f8 fdf4 	bl	8005efc <pbuf_free>
 800d314:	e001      	b.n	800d31a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d316:	23ff      	movs	r3, #255	; 0xff
 800d318:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	799b      	ldrb	r3, [r3, #6]
 800d31e:	2bff      	cmp	r3, #255	; 0xff
 800d320:	d005      	beq.n	800d32e <dhcp_renew+0xe2>
    dhcp->tries++;
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	799b      	ldrb	r3, [r3, #6]
 800d326:	3301      	adds	r3, #1
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	799b      	ldrb	r3, [r3, #6]
 800d332:	2b09      	cmp	r3, #9
 800d334:	d80a      	bhi.n	800d34c <dhcp_renew+0x100>
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	799b      	ldrb	r3, [r3, #6]
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	461a      	mov	r2, r3
 800d33e:	0152      	lsls	r2, r2, #5
 800d340:	1ad2      	subs	r2, r2, r3
 800d342:	0092      	lsls	r2, r2, #2
 800d344:	4413      	add	r3, r2
 800d346:	011b      	lsls	r3, r3, #4
 800d348:	b29b      	uxth	r3, r3
 800d34a:	e001      	b.n	800d350 <dhcp_renew+0x104>
 800d34c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d350:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d352:	89fb      	ldrh	r3, [r7, #14]
 800d354:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d358:	4a09      	ldr	r2, [pc, #36]	; (800d380 <dhcp_renew+0x134>)
 800d35a:	fb82 1203 	smull	r1, r2, r2, r3
 800d35e:	1152      	asrs	r2, r2, #5
 800d360:	17db      	asrs	r3, r3, #31
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	b29a      	uxth	r2, r3
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d36a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3720      	adds	r7, #32
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	20000014 	.word	0x20000014
 800d37c:	2000017c 	.word	0x2000017c
 800d380:	10624dd3 	.word	0x10624dd3

0800d384 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08a      	sub	sp, #40	; 0x28
 800d388:	af02      	add	r7, sp, #8
 800d38a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d390:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800d392:	2104      	movs	r1, #4
 800d394:	69b8      	ldr	r0, [r7, #24]
 800d396:	f000 f9e1 	bl	800d75c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d39a:	f107 030c 	add.w	r3, r7, #12
 800d39e:	2203      	movs	r2, #3
 800d3a0:	69b9      	ldr	r1, [r7, #24]
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 fe66 	bl	800e074 <dhcp_create_msg>
 800d3a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d04c      	beq.n	800d44a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d3b6:	89b8      	ldrh	r0, [r7, #12]
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d3be:	2302      	movs	r3, #2
 800d3c0:	2239      	movs	r2, #57	; 0x39
 800d3c2:	f000 f9e5 	bl	800d790 <dhcp_option>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d3ca:	89b8      	ldrh	r0, [r7, #12]
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	f000 fa34 	bl	800d844 <dhcp_option_short>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d3e0:	89b8      	ldrh	r0, [r7, #12]
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	2237      	movs	r2, #55	; 0x37
 800d3ec:	f000 f9d0 	bl	800d790 <dhcp_option>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	77bb      	strb	r3, [r7, #30]
 800d3f8:	e00e      	b.n	800d418 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d3fa:	89b8      	ldrh	r0, [r7, #12]
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d402:	7fbb      	ldrb	r3, [r7, #30]
 800d404:	4a29      	ldr	r2, [pc, #164]	; (800d4ac <dhcp_rebind+0x128>)
 800d406:	5cd3      	ldrb	r3, [r2, r3]
 800d408:	461a      	mov	r2, r3
 800d40a:	f000 f9f5 	bl	800d7f8 <dhcp_option_byte>
 800d40e:	4603      	mov	r3, r0
 800d410:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d412:	7fbb      	ldrb	r3, [r7, #30]
 800d414:	3301      	adds	r3, #1
 800d416:	77bb      	strb	r3, [r7, #30]
 800d418:	7fbb      	ldrb	r3, [r7, #30]
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d9ed      	bls.n	800d3fa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d41e:	89b8      	ldrh	r0, [r7, #12]
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	33f0      	adds	r3, #240	; 0xf0
 800d424:	697a      	ldr	r2, [r7, #20]
 800d426:	4619      	mov	r1, r3
 800d428:	f000 fefa 	bl	800e220 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d42c:	4b20      	ldr	r3, [pc, #128]	; (800d4b0 <dhcp_rebind+0x12c>)
 800d42e:	6818      	ldr	r0, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	2343      	movs	r3, #67	; 0x43
 800d436:	4a1f      	ldr	r2, [pc, #124]	; (800d4b4 <dhcp_rebind+0x130>)
 800d438:	6979      	ldr	r1, [r7, #20]
 800d43a:	f7fe fdcf 	bl	800bfdc <udp_sendto_if>
 800d43e:	4603      	mov	r3, r0
 800d440:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d442:	6978      	ldr	r0, [r7, #20]
 800d444:	f7f8 fd5a 	bl	8005efc <pbuf_free>
 800d448:	e001      	b.n	800d44e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d44a:	23ff      	movs	r3, #255	; 0xff
 800d44c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	799b      	ldrb	r3, [r3, #6]
 800d452:	2bff      	cmp	r3, #255	; 0xff
 800d454:	d005      	beq.n	800d462 <dhcp_rebind+0xde>
    dhcp->tries++;
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	799b      	ldrb	r3, [r3, #6]
 800d45a:	3301      	adds	r3, #1
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	799b      	ldrb	r3, [r3, #6]
 800d466:	2b09      	cmp	r3, #9
 800d468:	d80a      	bhi.n	800d480 <dhcp_rebind+0xfc>
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	799b      	ldrb	r3, [r3, #6]
 800d46e:	b29b      	uxth	r3, r3
 800d470:	461a      	mov	r2, r3
 800d472:	0152      	lsls	r2, r2, #5
 800d474:	1ad2      	subs	r2, r2, r3
 800d476:	0092      	lsls	r2, r2, #2
 800d478:	4413      	add	r3, r2
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	e001      	b.n	800d484 <dhcp_rebind+0x100>
 800d480:	f242 7310 	movw	r3, #10000	; 0x2710
 800d484:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d486:	89fb      	ldrh	r3, [r7, #14]
 800d488:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d48c:	4a0a      	ldr	r2, [pc, #40]	; (800d4b8 <dhcp_rebind+0x134>)
 800d48e:	fb82 1203 	smull	r1, r2, r2, r3
 800d492:	1152      	asrs	r2, r2, #5
 800d494:	17db      	asrs	r3, r3, #31
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	b29a      	uxth	r2, r3
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d49e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3720      	adds	r7, #32
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	20000014 	.word	0x20000014
 800d4b0:	2000017c 	.word	0x2000017c
 800d4b4:	08014c38 	.word	0x08014c38
 800d4b8:	10624dd3 	.word	0x10624dd3

0800d4bc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800d4bc:	b5b0      	push	{r4, r5, r7, lr}
 800d4be:	b08a      	sub	sp, #40	; 0x28
 800d4c0:	af02      	add	r7, sp, #8
 800d4c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800d4ca:	2103      	movs	r1, #3
 800d4cc:	69b8      	ldr	r0, [r7, #24]
 800d4ce:	f000 f945 	bl	800d75c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d4d2:	f107 030c 	add.w	r3, r7, #12
 800d4d6:	2203      	movs	r2, #3
 800d4d8:	69b9      	ldr	r1, [r7, #24]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 fdca 	bl	800e074 <dhcp_create_msg>
 800d4e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d066      	beq.n	800d5b6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d4ee:	89b8      	ldrh	r0, [r7, #12]
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	2239      	movs	r2, #57	; 0x39
 800d4fa:	f000 f949 	bl	800d790 <dhcp_option>
 800d4fe:	4603      	mov	r3, r0
 800d500:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800d502:	89b8      	ldrh	r0, [r7, #12]
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	33f0      	adds	r3, #240	; 0xf0
 800d508:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d50c:	4619      	mov	r1, r3
 800d50e:	f000 f999 	bl	800d844 <dhcp_option_short>
 800d512:	4603      	mov	r3, r0
 800d514:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d516:	89b8      	ldrh	r0, [r7, #12]
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d51e:	2304      	movs	r3, #4
 800d520:	2232      	movs	r2, #50	; 0x32
 800d522:	f000 f935 	bl	800d790 <dhcp_option>
 800d526:	4603      	mov	r3, r0
 800d528:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d52a:	89bc      	ldrh	r4, [r7, #12]
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	69db      	ldr	r3, [r3, #28]
 800d536:	4618      	mov	r0, r3
 800d538:	f7f7 f895 	bl	8004666 <lwip_htonl>
 800d53c:	4603      	mov	r3, r0
 800d53e:	461a      	mov	r2, r3
 800d540:	4629      	mov	r1, r5
 800d542:	4620      	mov	r0, r4
 800d544:	f000 f9b0 	bl	800d8a8 <dhcp_option_long>
 800d548:	4603      	mov	r3, r0
 800d54a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d54c:	89b8      	ldrh	r0, [r7, #12]
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d554:	2303      	movs	r3, #3
 800d556:	2237      	movs	r2, #55	; 0x37
 800d558:	f000 f91a 	bl	800d790 <dhcp_option>
 800d55c:	4603      	mov	r3, r0
 800d55e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d560:	2300      	movs	r3, #0
 800d562:	77bb      	strb	r3, [r7, #30]
 800d564:	e00e      	b.n	800d584 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d566:	89b8      	ldrh	r0, [r7, #12]
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d56e:	7fbb      	ldrb	r3, [r7, #30]
 800d570:	4a29      	ldr	r2, [pc, #164]	; (800d618 <dhcp_reboot+0x15c>)
 800d572:	5cd3      	ldrb	r3, [r2, r3]
 800d574:	461a      	mov	r2, r3
 800d576:	f000 f93f 	bl	800d7f8 <dhcp_option_byte>
 800d57a:	4603      	mov	r3, r0
 800d57c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d57e:	7fbb      	ldrb	r3, [r7, #30]
 800d580:	3301      	adds	r3, #1
 800d582:	77bb      	strb	r3, [r7, #30]
 800d584:	7fbb      	ldrb	r3, [r7, #30]
 800d586:	2b02      	cmp	r3, #2
 800d588:	d9ed      	bls.n	800d566 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d58a:	89b8      	ldrh	r0, [r7, #12]
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	33f0      	adds	r3, #240	; 0xf0
 800d590:	697a      	ldr	r2, [r7, #20]
 800d592:	4619      	mov	r1, r3
 800d594:	f000 fe44 	bl	800e220 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d598:	4b20      	ldr	r3, [pc, #128]	; (800d61c <dhcp_reboot+0x160>)
 800d59a:	6818      	ldr	r0, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	2343      	movs	r3, #67	; 0x43
 800d5a2:	4a1f      	ldr	r2, [pc, #124]	; (800d620 <dhcp_reboot+0x164>)
 800d5a4:	6979      	ldr	r1, [r7, #20]
 800d5a6:	f7fe fd19 	bl	800bfdc <udp_sendto_if>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d5ae:	6978      	ldr	r0, [r7, #20]
 800d5b0:	f7f8 fca4 	bl	8005efc <pbuf_free>
 800d5b4:	e001      	b.n	800d5ba <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d5b6:	23ff      	movs	r3, #255	; 0xff
 800d5b8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	799b      	ldrb	r3, [r3, #6]
 800d5be:	2bff      	cmp	r3, #255	; 0xff
 800d5c0:	d005      	beq.n	800d5ce <dhcp_reboot+0x112>
    dhcp->tries++;
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	799b      	ldrb	r3, [r3, #6]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	799b      	ldrb	r3, [r3, #6]
 800d5d2:	2b09      	cmp	r3, #9
 800d5d4:	d80a      	bhi.n	800d5ec <dhcp_reboot+0x130>
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	799b      	ldrb	r3, [r3, #6]
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	461a      	mov	r2, r3
 800d5de:	0152      	lsls	r2, r2, #5
 800d5e0:	1ad2      	subs	r2, r2, r3
 800d5e2:	0092      	lsls	r2, r2, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	e001      	b.n	800d5f0 <dhcp_reboot+0x134>
 800d5ec:	f242 7310 	movw	r3, #10000	; 0x2710
 800d5f0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d5f2:	89fb      	ldrh	r3, [r7, #14]
 800d5f4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d5f8:	4a0a      	ldr	r2, [pc, #40]	; (800d624 <dhcp_reboot+0x168>)
 800d5fa:	fb82 1203 	smull	r1, r2, r2, r3
 800d5fe:	1152      	asrs	r2, r2, #5
 800d600:	17db      	asrs	r3, r3, #31
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	b29a      	uxth	r2, r3
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d60a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3720      	adds	r7, #32
 800d612:	46bd      	mov	sp, r7
 800d614:	bdb0      	pop	{r4, r5, r7, pc}
 800d616:	bf00      	nop
 800d618:	20000014 	.word	0x20000014
 800d61c:	2000017c 	.word	0x2000017c
 800d620:	08014c38 	.word	0x08014c38
 800d624:	10624dd3 	.word	0x10624dd3

0800d628 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800d628:	b5b0      	push	{r4, r5, r7, lr}
 800d62a:	b08a      	sub	sp, #40	; 0x28
 800d62c:	af02      	add	r7, sp, #8
 800d62e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d634:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f000 8084 	beq.w	800d746 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	795b      	ldrb	r3, [r3, #5]
 800d642:	2b00      	cmp	r3, #0
 800d644:	f000 8081 	beq.w	800d74a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	699b      	ldr	r3, [r3, #24]
 800d64c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	2200      	movs	r2, #0
 800d652:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	2200      	movs	r2, #0
 800d658:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	2200      	movs	r2, #0
 800d65e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	2200      	movs	r2, #0
 800d664:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	2200      	movs	r2, #0
 800d66a:	631a      	str	r2, [r3, #48]	; 0x30
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	62da      	str	r2, [r3, #44]	; 0x2c
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	2200      	movs	r2, #0
 800d680:	829a      	strh	r2, [r3, #20]
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	8a9a      	ldrh	r2, [r3, #20]
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	825a      	strh	r2, [r3, #18]
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	8a5a      	ldrh	r2, [r3, #18]
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	821a      	strh	r2, [r3, #16]
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	8a1a      	ldrh	r2, [r3, #16]
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fdee 	bl	800e27c <dhcp_supplied_address>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d03b      	beq.n	800d71e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800d6a6:	f107 030e 	add.w	r3, r7, #14
 800d6aa:	2207      	movs	r2, #7
 800d6ac:	69f9      	ldr	r1, [r7, #28]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fce0 	bl	800e074 <dhcp_create_msg>
 800d6b4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d030      	beq.n	800d71e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d6c2:	89f8      	ldrh	r0, [r7, #14]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d6ca:	2304      	movs	r3, #4
 800d6cc:	2236      	movs	r2, #54	; 0x36
 800d6ce:	f000 f85f 	bl	800d790 <dhcp_option>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800d6d6:	89fc      	ldrh	r4, [r7, #14]
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7f6 ffc0 	bl	8004666 <lwip_htonl>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 f8db 	bl	800d8a8 <dhcp_option_long>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d6f6:	89f8      	ldrh	r0, [r7, #14]
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	33f0      	adds	r3, #240	; 0xf0
 800d6fc:	69ba      	ldr	r2, [r7, #24]
 800d6fe:	4619      	mov	r1, r3
 800d700:	f000 fd8e 	bl	800e220 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d704:	4b13      	ldr	r3, [pc, #76]	; (800d754 <dhcp_release_and_stop+0x12c>)
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	f107 0210 	add.w	r2, r7, #16
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	2343      	movs	r3, #67	; 0x43
 800d712:	69b9      	ldr	r1, [r7, #24]
 800d714:	f7fe fc62 	bl	800bfdc <udp_sendto_if>
      pbuf_free(p_out);
 800d718:	69b8      	ldr	r0, [r7, #24]
 800d71a:	f7f8 fbef 	bl	8005efc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d71e:	4b0e      	ldr	r3, [pc, #56]	; (800d758 <dhcp_release_and_stop+0x130>)
 800d720:	4a0d      	ldr	r2, [pc, #52]	; (800d758 <dhcp_release_and_stop+0x130>)
 800d722:	490d      	ldr	r1, [pc, #52]	; (800d758 <dhcp_release_and_stop+0x130>)
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7f7 ffb5 	bl	8005694 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800d72a:	2100      	movs	r1, #0
 800d72c:	69f8      	ldr	r0, [r7, #28]
 800d72e:	f000 f815 	bl	800d75c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	791b      	ldrb	r3, [r3, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d008      	beq.n	800d74c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d73a:	f7fe ffbf 	bl	800c6bc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	2200      	movs	r2, #0
 800d742:	711a      	strb	r2, [r3, #4]
 800d744:	e002      	b.n	800d74c <dhcp_release_and_stop+0x124>
    return;
 800d746:	bf00      	nop
 800d748:	e000      	b.n	800d74c <dhcp_release_and_stop+0x124>
    return;
 800d74a:	bf00      	nop
  }
}
 800d74c:	3720      	adds	r7, #32
 800d74e:	46bd      	mov	sp, r7
 800d750:	bdb0      	pop	{r4, r5, r7, pc}
 800d752:	bf00      	nop
 800d754:	2000017c 	.word	0x2000017c
 800d758:	08014c34 	.word	0x08014c34

0800d75c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	795b      	ldrb	r3, [r3, #5]
 800d76c:	78fa      	ldrb	r2, [r7, #3]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d008      	beq.n	800d784 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	78fa      	ldrb	r2, [r7, #3]
 800d776:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	811a      	strh	r2, [r3, #8]
  }
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6039      	str	r1, [r7, #0]
 800d798:	4611      	mov	r1, r2
 800d79a:	461a      	mov	r2, r3
 800d79c:	4603      	mov	r3, r0
 800d79e:	80fb      	strh	r3, [r7, #6]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	717b      	strb	r3, [r7, #5]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d7a8:	88fa      	ldrh	r2, [r7, #6]
 800d7aa:	793b      	ldrb	r3, [r7, #4]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	3302      	adds	r3, #2
 800d7b0:	2b44      	cmp	r3, #68	; 0x44
 800d7b2:	d906      	bls.n	800d7c2 <dhcp_option+0x32>
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	; (800d7ec <dhcp_option+0x5c>)
 800d7b6:	f240 529a 	movw	r2, #1434	; 0x59a
 800d7ba:	490d      	ldr	r1, [pc, #52]	; (800d7f0 <dhcp_option+0x60>)
 800d7bc:	480d      	ldr	r0, [pc, #52]	; (800d7f4 <dhcp_option+0x64>)
 800d7be:	f003 fb5b 	bl	8010e78 <iprintf>
  options[options_out_len++] = option_type;
 800d7c2:	88fb      	ldrh	r3, [r7, #6]
 800d7c4:	1c5a      	adds	r2, r3, #1
 800d7c6:	80fa      	strh	r2, [r7, #6]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	797a      	ldrb	r2, [r7, #5]
 800d7d0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800d7d2:	88fb      	ldrh	r3, [r7, #6]
 800d7d4:	1c5a      	adds	r2, r3, #1
 800d7d6:	80fa      	strh	r2, [r7, #6]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	4413      	add	r3, r2
 800d7de:	793a      	ldrb	r2, [r7, #4]
 800d7e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d7e2:	88fb      	ldrh	r3, [r7, #6]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	080140b4 	.word	0x080140b4
 800d7f0:	08014248 	.word	0x08014248
 800d7f4:	08014114 	.word	0x08014114

0800d7f8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4603      	mov	r3, r0
 800d800:	6039      	str	r1, [r7, #0]
 800d802:	80fb      	strh	r3, [r7, #6]
 800d804:	4613      	mov	r3, r2
 800d806:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800d808:	88fb      	ldrh	r3, [r7, #6]
 800d80a:	2b43      	cmp	r3, #67	; 0x43
 800d80c:	d906      	bls.n	800d81c <dhcp_option_byte+0x24>
 800d80e:	4b0a      	ldr	r3, [pc, #40]	; (800d838 <dhcp_option_byte+0x40>)
 800d810:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800d814:	4909      	ldr	r1, [pc, #36]	; (800d83c <dhcp_option_byte+0x44>)
 800d816:	480a      	ldr	r0, [pc, #40]	; (800d840 <dhcp_option_byte+0x48>)
 800d818:	f003 fb2e 	bl	8010e78 <iprintf>
  options[options_out_len++] = value;
 800d81c:	88fb      	ldrh	r3, [r7, #6]
 800d81e:	1c5a      	adds	r2, r3, #1
 800d820:	80fa      	strh	r2, [r7, #6]
 800d822:	461a      	mov	r2, r3
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	4413      	add	r3, r2
 800d828:	797a      	ldrb	r2, [r7, #5]
 800d82a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d82c:	88fb      	ldrh	r3, [r7, #6]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	080140b4 	.word	0x080140b4
 800d83c:	0801428c 	.word	0x0801428c
 800d840:	08014114 	.word	0x08014114

0800d844 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	4603      	mov	r3, r0
 800d84c:	6039      	str	r1, [r7, #0]
 800d84e:	80fb      	strh	r3, [r7, #6]
 800d850:	4613      	mov	r3, r2
 800d852:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d854:	88fb      	ldrh	r3, [r7, #6]
 800d856:	3302      	adds	r3, #2
 800d858:	2b44      	cmp	r3, #68	; 0x44
 800d85a:	d906      	bls.n	800d86a <dhcp_option_short+0x26>
 800d85c:	4b0f      	ldr	r3, [pc, #60]	; (800d89c <dhcp_option_short+0x58>)
 800d85e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800d862:	490f      	ldr	r1, [pc, #60]	; (800d8a0 <dhcp_option_short+0x5c>)
 800d864:	480f      	ldr	r0, [pc, #60]	; (800d8a4 <dhcp_option_short+0x60>)
 800d866:	f003 fb07 	bl	8010e78 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d86a:	88bb      	ldrh	r3, [r7, #4]
 800d86c:	0a1b      	lsrs	r3, r3, #8
 800d86e:	b29a      	uxth	r2, r3
 800d870:	88fb      	ldrh	r3, [r7, #6]
 800d872:	1c59      	adds	r1, r3, #1
 800d874:	80f9      	strh	r1, [r7, #6]
 800d876:	4619      	mov	r1, r3
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	440b      	add	r3, r1
 800d87c:	b2d2      	uxtb	r2, r2
 800d87e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800d880:	88fb      	ldrh	r3, [r7, #6]
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	80fa      	strh	r2, [r7, #6]
 800d886:	461a      	mov	r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	4413      	add	r3, r2
 800d88c:	88ba      	ldrh	r2, [r7, #4]
 800d88e:	b2d2      	uxtb	r2, r2
 800d890:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d892:	88fb      	ldrh	r3, [r7, #6]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3708      	adds	r7, #8
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	080140b4 	.word	0x080140b4
 800d8a0:	080142c4 	.word	0x080142c4
 800d8a4:	08014114 	.word	0x08014114

0800d8a8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	607a      	str	r2, [r7, #4]
 800d8b4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800d8b6:	89fb      	ldrh	r3, [r7, #14]
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	2b44      	cmp	r3, #68	; 0x44
 800d8bc:	d906      	bls.n	800d8cc <dhcp_option_long+0x24>
 800d8be:	4b19      	ldr	r3, [pc, #100]	; (800d924 <dhcp_option_long+0x7c>)
 800d8c0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800d8c4:	4918      	ldr	r1, [pc, #96]	; (800d928 <dhcp_option_long+0x80>)
 800d8c6:	4819      	ldr	r0, [pc, #100]	; (800d92c <dhcp_option_long+0x84>)
 800d8c8:	f003 fad6 	bl	8010e78 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	0e1a      	lsrs	r2, r3, #24
 800d8d0:	89fb      	ldrh	r3, [r7, #14]
 800d8d2:	1c59      	adds	r1, r3, #1
 800d8d4:	81f9      	strh	r1, [r7, #14]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	440b      	add	r3, r1
 800d8dc:	b2d2      	uxtb	r2, r2
 800d8de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	0c1a      	lsrs	r2, r3, #16
 800d8e4:	89fb      	ldrh	r3, [r7, #14]
 800d8e6:	1c59      	adds	r1, r3, #1
 800d8e8:	81f9      	strh	r1, [r7, #14]
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	440b      	add	r3, r1
 800d8f0:	b2d2      	uxtb	r2, r2
 800d8f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	0a1a      	lsrs	r2, r3, #8
 800d8f8:	89fb      	ldrh	r3, [r7, #14]
 800d8fa:	1c59      	adds	r1, r3, #1
 800d8fc:	81f9      	strh	r1, [r7, #14]
 800d8fe:	4619      	mov	r1, r3
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	440b      	add	r3, r1
 800d904:	b2d2      	uxtb	r2, r2
 800d906:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800d908:	89fb      	ldrh	r3, [r7, #14]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	81fa      	strh	r2, [r7, #14]
 800d90e:	461a      	mov	r2, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	4413      	add	r3, r2
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	b2d2      	uxtb	r2, r2
 800d918:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800d91a:	89fb      	ldrh	r3, [r7, #14]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	080140b4 	.word	0x080140b4
 800d928:	08014300 	.word	0x08014300
 800d92c:	08014114 	.word	0x08014114

0800d930 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b090      	sub	sp, #64	; 0x40
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800d93e:	2300      	movs	r3, #0
 800d940:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800d942:	2208      	movs	r2, #8
 800d944:	2100      	movs	r1, #0
 800d946:	48be      	ldr	r0, [pc, #760]	; (800dc40 <dhcp_parse_reply+0x310>)
 800d948:	f003 fa8e 	bl	8010e68 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	895b      	ldrh	r3, [r3, #10]
 800d950:	2b2b      	cmp	r3, #43	; 0x2b
 800d952:	d802      	bhi.n	800d95a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800d954:	f06f 0301 	mvn.w	r3, #1
 800d958:	e2a8      	b.n	800deac <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800d960:	23f0      	movs	r3, #240	; 0xf0
 800d962:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	891b      	ldrh	r3, [r3, #8]
 800d968:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800d96e:	e00c      	b.n	800d98a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d972:	895b      	ldrh	r3, [r3, #10]
 800d974:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800d97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97c:	895b      	ldrh	r3, [r3, #10]
 800d97e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800d984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d004      	beq.n	800d99a <dhcp_parse_reply+0x6a>
 800d990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d992:	895b      	ldrh	r3, [r3, #10]
 800d994:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d996:	429a      	cmp	r2, r3
 800d998:	d2ea      	bcs.n	800d970 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800d9a0:	f06f 0301 	mvn.w	r3, #1
 800d9a4:	e282      	b.n	800deac <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800d9a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d9a8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800d9aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d9ac:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d9b4:	e23a      	b.n	800de2c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800d9b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9ba:	4413      	add	r3, r2
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800d9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ca:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800d9cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9ce:	3302      	adds	r3, #2
 800d9d0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800d9d2:	8bfa      	ldrh	r2, [r7, #30]
 800d9d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d202      	bcs.n	800d9e0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800d9da:	f06f 0301 	mvn.w	r3, #1
 800d9de:	e265      	b.n	800deac <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800d9e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9e6:	8952      	ldrh	r2, [r2, #10]
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	da07      	bge.n	800d9fc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800d9ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9f2:	4413      	add	r3, r2
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9fa:	e00b      	b.n	800da14 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d004      	beq.n	800da0e <dhcp_parse_reply+0xde>
 800da04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	e000      	b.n	800da10 <dhcp_parse_reply+0xe0>
 800da0e:	2300      	movs	r3, #0
 800da10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800da14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
 800da1e:	2b3b      	cmp	r3, #59	; 0x3b
 800da20:	f200 812d 	bhi.w	800dc7e <dhcp_parse_reply+0x34e>
 800da24:	a201      	add	r2, pc, #4	; (adr r2, 800da2c <dhcp_parse_reply+0xfc>)
 800da26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2a:	bf00      	nop
 800da2c:	0800db1d 	.word	0x0800db1d
 800da30:	0800db2d 	.word	0x0800db2d
 800da34:	0800dc7f 	.word	0x0800dc7f
 800da38:	0800db4f 	.word	0x0800db4f
 800da3c:	0800dc7f 	.word	0x0800dc7f
 800da40:	0800dc7f 	.word	0x0800dc7f
 800da44:	0800dc7f 	.word	0x0800dc7f
 800da48:	0800dc7f 	.word	0x0800dc7f
 800da4c:	0800dc7f 	.word	0x0800dc7f
 800da50:	0800dc7f 	.word	0x0800dc7f
 800da54:	0800dc7f 	.word	0x0800dc7f
 800da58:	0800dc7f 	.word	0x0800dc7f
 800da5c:	0800dc7f 	.word	0x0800dc7f
 800da60:	0800dc7f 	.word	0x0800dc7f
 800da64:	0800dc7f 	.word	0x0800dc7f
 800da68:	0800dc7f 	.word	0x0800dc7f
 800da6c:	0800dc7f 	.word	0x0800dc7f
 800da70:	0800dc7f 	.word	0x0800dc7f
 800da74:	0800dc7f 	.word	0x0800dc7f
 800da78:	0800dc7f 	.word	0x0800dc7f
 800da7c:	0800dc7f 	.word	0x0800dc7f
 800da80:	0800dc7f 	.word	0x0800dc7f
 800da84:	0800dc7f 	.word	0x0800dc7f
 800da88:	0800dc7f 	.word	0x0800dc7f
 800da8c:	0800dc7f 	.word	0x0800dc7f
 800da90:	0800dc7f 	.word	0x0800dc7f
 800da94:	0800dc7f 	.word	0x0800dc7f
 800da98:	0800dc7f 	.word	0x0800dc7f
 800da9c:	0800dc7f 	.word	0x0800dc7f
 800daa0:	0800dc7f 	.word	0x0800dc7f
 800daa4:	0800dc7f 	.word	0x0800dc7f
 800daa8:	0800dc7f 	.word	0x0800dc7f
 800daac:	0800dc7f 	.word	0x0800dc7f
 800dab0:	0800dc7f 	.word	0x0800dc7f
 800dab4:	0800dc7f 	.word	0x0800dc7f
 800dab8:	0800dc7f 	.word	0x0800dc7f
 800dabc:	0800dc7f 	.word	0x0800dc7f
 800dac0:	0800dc7f 	.word	0x0800dc7f
 800dac4:	0800dc7f 	.word	0x0800dc7f
 800dac8:	0800dc7f 	.word	0x0800dc7f
 800dacc:	0800dc7f 	.word	0x0800dc7f
 800dad0:	0800dc7f 	.word	0x0800dc7f
 800dad4:	0800dc7f 	.word	0x0800dc7f
 800dad8:	0800dc7f 	.word	0x0800dc7f
 800dadc:	0800dc7f 	.word	0x0800dc7f
 800dae0:	0800dc7f 	.word	0x0800dc7f
 800dae4:	0800dc7f 	.word	0x0800dc7f
 800dae8:	0800dc7f 	.word	0x0800dc7f
 800daec:	0800dc7f 	.word	0x0800dc7f
 800daf0:	0800dc7f 	.word	0x0800dc7f
 800daf4:	0800dc7f 	.word	0x0800dc7f
 800daf8:	0800db7b 	.word	0x0800db7b
 800dafc:	0800db9d 	.word	0x0800db9d
 800db00:	0800dbd9 	.word	0x0800dbd9
 800db04:	0800dbfb 	.word	0x0800dbfb
 800db08:	0800dc7f 	.word	0x0800dc7f
 800db0c:	0800dc7f 	.word	0x0800dc7f
 800db10:	0800dc7f 	.word	0x0800dc7f
 800db14:	0800dc1d 	.word	0x0800dc1d
 800db18:	0800dc5d 	.word	0x0800dc5d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800db2a:	e0ac      	b.n	800dc86 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800db2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db30:	2b04      	cmp	r3, #4
 800db32:	d009      	beq.n	800db48 <dhcp_parse_reply+0x218>
 800db34:	4b43      	ldr	r3, [pc, #268]	; (800dc44 <dhcp_parse_reply+0x314>)
 800db36:	f240 622e 	movw	r2, #1582	; 0x62e
 800db3a:	4943      	ldr	r1, [pc, #268]	; (800dc48 <dhcp_parse_reply+0x318>)
 800db3c:	4843      	ldr	r0, [pc, #268]	; (800dc4c <dhcp_parse_reply+0x31c>)
 800db3e:	f003 f99b 	bl	8010e78 <iprintf>
 800db42:	f06f 0305 	mvn.w	r3, #5
 800db46:	e1b1      	b.n	800deac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800db48:	2306      	movs	r3, #6
 800db4a:	623b      	str	r3, [r7, #32]
        break;
 800db4c:	e09b      	b.n	800dc86 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800db4e:	2304      	movs	r3, #4
 800db50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800db54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800db58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d209      	bcs.n	800db74 <dhcp_parse_reply+0x244>
 800db60:	4b38      	ldr	r3, [pc, #224]	; (800dc44 <dhcp_parse_reply+0x314>)
 800db62:	f240 6233 	movw	r2, #1587	; 0x633
 800db66:	493a      	ldr	r1, [pc, #232]	; (800dc50 <dhcp_parse_reply+0x320>)
 800db68:	4838      	ldr	r0, [pc, #224]	; (800dc4c <dhcp_parse_reply+0x31c>)
 800db6a:	f003 f985 	bl	8010e78 <iprintf>
 800db6e:	f06f 0305 	mvn.w	r3, #5
 800db72:	e19b      	b.n	800deac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800db74:	2307      	movs	r3, #7
 800db76:	623b      	str	r3, [r7, #32]
        break;
 800db78:	e085      	b.n	800dc86 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800db7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db7e:	2b04      	cmp	r3, #4
 800db80:	d009      	beq.n	800db96 <dhcp_parse_reply+0x266>
 800db82:	4b30      	ldr	r3, [pc, #192]	; (800dc44 <dhcp_parse_reply+0x314>)
 800db84:	f240 6241 	movw	r2, #1601	; 0x641
 800db88:	492f      	ldr	r1, [pc, #188]	; (800dc48 <dhcp_parse_reply+0x318>)
 800db8a:	4830      	ldr	r0, [pc, #192]	; (800dc4c <dhcp_parse_reply+0x31c>)
 800db8c:	f003 f974 	bl	8010e78 <iprintf>
 800db90:	f06f 0305 	mvn.w	r3, #5
 800db94:	e18a      	b.n	800deac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800db96:	2303      	movs	r3, #3
 800db98:	623b      	str	r3, [r7, #32]
        break;
 800db9a:	e074      	b.n	800dc86 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800db9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d009      	beq.n	800dbb8 <dhcp_parse_reply+0x288>
 800dba4:	4b27      	ldr	r3, [pc, #156]	; (800dc44 <dhcp_parse_reply+0x314>)
 800dba6:	f240 624f 	movw	r2, #1615	; 0x64f
 800dbaa:	492a      	ldr	r1, [pc, #168]	; (800dc54 <dhcp_parse_reply+0x324>)
 800dbac:	4827      	ldr	r0, [pc, #156]	; (800dc4c <dhcp_parse_reply+0x31c>)
 800dbae:	f003 f963 	bl	8010e78 <iprintf>
 800dbb2:	f06f 0305 	mvn.w	r3, #5
 800dbb6:	e179      	b.n	800deac <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800dbb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dbba:	2bf0      	cmp	r3, #240	; 0xf0
 800dbbc:	d009      	beq.n	800dbd2 <dhcp_parse_reply+0x2a2>
 800dbbe:	4b21      	ldr	r3, [pc, #132]	; (800dc44 <dhcp_parse_reply+0x314>)
 800dbc0:	f240 6251 	movw	r2, #1617	; 0x651
 800dbc4:	4924      	ldr	r1, [pc, #144]	; (800dc58 <dhcp_parse_reply+0x328>)
 800dbc6:	4821      	ldr	r0, [pc, #132]	; (800dc4c <dhcp_parse_reply+0x31c>)
 800dbc8:	f003 f956 	bl	8010e78 <iprintf>
 800dbcc:	f06f 0305 	mvn.w	r3, #5
 800dbd0:	e16c      	b.n	800deac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	623b      	str	r3, [r7, #32]
        break;
 800dbd6:	e056      	b.n	800dc86 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800dbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d009      	beq.n	800dbf4 <dhcp_parse_reply+0x2c4>
 800dbe0:	4b18      	ldr	r3, [pc, #96]	; (800dc44 <dhcp_parse_reply+0x314>)
 800dbe2:	f240 6255 	movw	r2, #1621	; 0x655
 800dbe6:	491b      	ldr	r1, [pc, #108]	; (800dc54 <dhcp_parse_reply+0x324>)
 800dbe8:	4818      	ldr	r0, [pc, #96]	; (800dc4c <dhcp_parse_reply+0x31c>)
 800dbea:	f003 f945 	bl	8010e78 <iprintf>
 800dbee:	f06f 0305 	mvn.w	r3, #5
 800dbf2:	e15b      	b.n	800deac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	623b      	str	r3, [r7, #32]
        break;
 800dbf8:	e045      	b.n	800dc86 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800dbfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbfe:	2b04      	cmp	r3, #4
 800dc00:	d009      	beq.n	800dc16 <dhcp_parse_reply+0x2e6>
 800dc02:	4b10      	ldr	r3, [pc, #64]	; (800dc44 <dhcp_parse_reply+0x314>)
 800dc04:	f240 6259 	movw	r2, #1625	; 0x659
 800dc08:	490f      	ldr	r1, [pc, #60]	; (800dc48 <dhcp_parse_reply+0x318>)
 800dc0a:	4810      	ldr	r0, [pc, #64]	; (800dc4c <dhcp_parse_reply+0x31c>)
 800dc0c:	f003 f934 	bl	8010e78 <iprintf>
 800dc10:	f06f 0305 	mvn.w	r3, #5
 800dc14:	e14a      	b.n	800deac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800dc16:	2302      	movs	r3, #2
 800dc18:	623b      	str	r3, [r7, #32]
        break;
 800dc1a:	e034      	b.n	800dc86 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800dc1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	d009      	beq.n	800dc38 <dhcp_parse_reply+0x308>
 800dc24:	4b07      	ldr	r3, [pc, #28]	; (800dc44 <dhcp_parse_reply+0x314>)
 800dc26:	f240 625d 	movw	r2, #1629	; 0x65d
 800dc2a:	4907      	ldr	r1, [pc, #28]	; (800dc48 <dhcp_parse_reply+0x318>)
 800dc2c:	4807      	ldr	r0, [pc, #28]	; (800dc4c <dhcp_parse_reply+0x31c>)
 800dc2e:	f003 f923 	bl	8010e78 <iprintf>
 800dc32:	f06f 0305 	mvn.w	r3, #5
 800dc36:	e139      	b.n	800deac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800dc38:	2304      	movs	r3, #4
 800dc3a:	623b      	str	r3, [r7, #32]
        break;
 800dc3c:	e023      	b.n	800dc86 <dhcp_parse_reply+0x356>
 800dc3e:	bf00      	nop
 800dc40:	200076e8 	.word	0x200076e8
 800dc44:	080140b4 	.word	0x080140b4
 800dc48:	0801433c 	.word	0x0801433c
 800dc4c:	08014114 	.word	0x08014114
 800dc50:	08014348 	.word	0x08014348
 800dc54:	0801435c 	.word	0x0801435c
 800dc58:	08014368 	.word	0x08014368
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800dc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc60:	2b04      	cmp	r3, #4
 800dc62:	d009      	beq.n	800dc78 <dhcp_parse_reply+0x348>
 800dc64:	4b93      	ldr	r3, [pc, #588]	; (800deb4 <dhcp_parse_reply+0x584>)
 800dc66:	f240 6261 	movw	r2, #1633	; 0x661
 800dc6a:	4993      	ldr	r1, [pc, #588]	; (800deb8 <dhcp_parse_reply+0x588>)
 800dc6c:	4893      	ldr	r0, [pc, #588]	; (800debc <dhcp_parse_reply+0x58c>)
 800dc6e:	f003 f903 	bl	8010e78 <iprintf>
 800dc72:	f06f 0305 	mvn.w	r3, #5
 800dc76:	e119      	b.n	800deac <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800dc78:	2305      	movs	r3, #5
 800dc7a:	623b      	str	r3, [r7, #32]
        break;
 800dc7c:	e003      	b.n	800dc86 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800dc84:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800dc86:	7dfb      	ldrb	r3, [r7, #23]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d103      	bne.n	800dc94 <dhcp_parse_reply+0x364>
      offset++;
 800dc8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dc8e:	3301      	adds	r3, #1
 800dc90:	877b      	strh	r3, [r7, #58]	; 0x3a
 800dc92:	e0a1      	b.n	800ddd8 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800dc94:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dc96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800dca0:	4293      	cmp	r3, r2
 800dca2:	dd02      	ble.n	800dcaa <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800dca4:	f06f 0301 	mvn.w	r3, #1
 800dca8:	e100      	b.n	800deac <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800dcaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dcb2:	4413      	add	r3, r2
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	3302      	adds	r3, #2
 800dcb8:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800dcba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f000 808a 	beq.w	800ddd8 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	db02      	blt.n	800dcd4 <dhcp_parse_reply+0x3a4>
 800dcce:	6a3b      	ldr	r3, [r7, #32]
 800dcd0:	2b07      	cmp	r3, #7
 800dcd2:	dd06      	ble.n	800dce2 <dhcp_parse_reply+0x3b2>
 800dcd4:	4b77      	ldr	r3, [pc, #476]	; (800deb4 <dhcp_parse_reply+0x584>)
 800dcd6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800dcda:	4979      	ldr	r1, [pc, #484]	; (800dec0 <dhcp_parse_reply+0x590>)
 800dcdc:	4877      	ldr	r0, [pc, #476]	; (800debc <dhcp_parse_reply+0x58c>)
 800dcde:	f003 f8cb 	bl	8010e78 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800dce2:	4a78      	ldr	r2, [pc, #480]	; (800dec4 <dhcp_parse_reply+0x594>)
 800dce4:	6a3b      	ldr	r3, [r7, #32]
 800dce6:	4413      	add	r3, r2
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d174      	bne.n	800ddd8 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800dcee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcf2:	2b04      	cmp	r3, #4
 800dcf4:	bf28      	it	cs
 800dcf6:	2304      	movcs	r3, #4
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800dcfc:	8bfb      	ldrh	r3, [r7, #30]
 800dcfe:	8aba      	ldrh	r2, [r7, #20]
 800dd00:	f107 0108 	add.w	r1, r7, #8
 800dd04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd06:	f7f8 faf3 	bl	80062f0 <pbuf_copy_partial>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	8abb      	ldrh	r3, [r7, #20]
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d002      	beq.n	800dd1a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800dd14:	f06f 0301 	mvn.w	r3, #1
 800dd18:	e0c8      	b.n	800deac <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800dd1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd1e:	2b04      	cmp	r3, #4
 800dd20:	d933      	bls.n	800dd8a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800dd22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd26:	f003 0303 	and.w	r3, r3, #3
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d009      	beq.n	800dd44 <dhcp_parse_reply+0x414>
 800dd30:	4b60      	ldr	r3, [pc, #384]	; (800deb4 <dhcp_parse_reply+0x584>)
 800dd32:	f240 6281 	movw	r2, #1665	; 0x681
 800dd36:	4964      	ldr	r1, [pc, #400]	; (800dec8 <dhcp_parse_reply+0x598>)
 800dd38:	4860      	ldr	r0, [pc, #384]	; (800debc <dhcp_parse_reply+0x58c>)
 800dd3a:	f003 f89d 	bl	8010e78 <iprintf>
 800dd3e:	f06f 0305 	mvn.w	r3, #5
 800dd42:	e0b3      	b.n	800deac <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800dd44:	4a5f      	ldr	r2, [pc, #380]	; (800dec4 <dhcp_parse_reply+0x594>)
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	4413      	add	r3, r2
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7f6 fc88 	bl	8004666 <lwip_htonl>
 800dd56:	4602      	mov	r2, r0
 800dd58:	495c      	ldr	r1, [pc, #368]	; (800decc <dhcp_parse_reply+0x59c>)
 800dd5a:	6a3b      	ldr	r3, [r7, #32]
 800dd5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800dd60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd64:	3b04      	subs	r3, #4
 800dd66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800dd6a:	8bfb      	ldrh	r3, [r7, #30]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800dd70:	8a7a      	ldrh	r2, [r7, #18]
 800dd72:	8bfb      	ldrh	r3, [r7, #30]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d202      	bcs.n	800dd7e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800dd78:	f06f 0301 	mvn.w	r3, #1
 800dd7c:	e096      	b.n	800deac <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800dd7e:	8a7b      	ldrh	r3, [r7, #18]
 800dd80:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	3301      	adds	r3, #1
 800dd86:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800dd88:	e79e      	b.n	800dcc8 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800dd8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd8e:	2b04      	cmp	r3, #4
 800dd90:	d106      	bne.n	800dda0 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7f6 fc66 	bl	8004666 <lwip_htonl>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	60bb      	str	r3, [r7, #8]
 800dd9e:	e011      	b.n	800ddc4 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800dda0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d009      	beq.n	800ddbc <dhcp_parse_reply+0x48c>
 800dda8:	4b42      	ldr	r3, [pc, #264]	; (800deb4 <dhcp_parse_reply+0x584>)
 800ddaa:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800ddae:	4948      	ldr	r1, [pc, #288]	; (800ded0 <dhcp_parse_reply+0x5a0>)
 800ddb0:	4842      	ldr	r0, [pc, #264]	; (800debc <dhcp_parse_reply+0x58c>)
 800ddb2:	f003 f861 	bl	8010e78 <iprintf>
 800ddb6:	f06f 0305 	mvn.w	r3, #5
 800ddba:	e077      	b.n	800deac <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800ddbc:	f107 0308 	add.w	r3, r7, #8
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800ddc4:	4a3f      	ldr	r2, [pc, #252]	; (800dec4 <dhcp_parse_reply+0x594>)
 800ddc6:	6a3b      	ldr	r3, [r7, #32]
 800ddc8:	4413      	add	r3, r2
 800ddca:	2201      	movs	r2, #1
 800ddcc:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800ddce:	68ba      	ldr	r2, [r7, #8]
 800ddd0:	493e      	ldr	r1, [pc, #248]	; (800decc <dhcp_parse_reply+0x59c>)
 800ddd2:	6a3b      	ldr	r3, [r7, #32]
 800ddd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddda:	895b      	ldrh	r3, [r3, #10]
 800dddc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d324      	bcc.n	800de2c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800dde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde4:	895b      	ldrh	r3, [r3, #10]
 800dde6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800ddec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddee:	895b      	ldrh	r3, [r3, #10]
 800ddf0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800ddf6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ddf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d213      	bcs.n	800de26 <dhcp_parse_reply+0x4f6>
        q = q->next;
 800ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	2b00      	cmp	r3, #0
 800de08:	d109      	bne.n	800de1e <dhcp_parse_reply+0x4ee>
 800de0a:	4b2a      	ldr	r3, [pc, #168]	; (800deb4 <dhcp_parse_reply+0x584>)
 800de0c:	f240 629d 	movw	r2, #1693	; 0x69d
 800de10:	4930      	ldr	r1, [pc, #192]	; (800ded4 <dhcp_parse_reply+0x5a4>)
 800de12:	482a      	ldr	r0, [pc, #168]	; (800debc <dhcp_parse_reply+0x58c>)
 800de14:	f003 f830 	bl	8010e78 <iprintf>
 800de18:	f06f 0305 	mvn.w	r3, #5
 800de1c:	e046      	b.n	800deac <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de24:	e002      	b.n	800de2c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800de26:	f06f 0301 	mvn.w	r3, #1
 800de2a:	e03f      	b.n	800deac <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800de2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d00a      	beq.n	800de48 <dhcp_parse_reply+0x518>
 800de32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800de34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800de36:	429a      	cmp	r2, r3
 800de38:	d206      	bcs.n	800de48 <dhcp_parse_reply+0x518>
 800de3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800de3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800de3e:	4413      	add	r3, r2
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2bff      	cmp	r3, #255	; 0xff
 800de44:	f47f adb7 	bne.w	800d9b6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800de48:	4b1e      	ldr	r3, [pc, #120]	; (800dec4 <dhcp_parse_reply+0x594>)
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d018      	beq.n	800de82 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800de50:	4b1e      	ldr	r3, [pc, #120]	; (800decc <dhcp_parse_reply+0x59c>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800de56:	4b1b      	ldr	r3, [pc, #108]	; (800dec4 <dhcp_parse_reply+0x594>)
 800de58:	2200      	movs	r2, #0
 800de5a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d102      	bne.n	800de68 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800de62:	2301      	movs	r3, #1
 800de64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de66:	e00c      	b.n	800de82 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2b02      	cmp	r3, #2
 800de6c:	d102      	bne.n	800de74 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800de6e:	2301      	movs	r3, #1
 800de70:	62bb      	str	r3, [r7, #40]	; 0x28
 800de72:	e006      	b.n	800de82 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b03      	cmp	r3, #3
 800de78:	d103      	bne.n	800de82 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800de7a:	2301      	movs	r3, #1
 800de7c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800de7e:	2301      	movs	r3, #1
 800de80:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	2b00      	cmp	r3, #0
 800de86:	d006      	beq.n	800de96 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800de8c:	236c      	movs	r3, #108	; 0x6c
 800de8e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800de90:	23ec      	movs	r3, #236	; 0xec
 800de92:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800de94:	e569      	b.n	800d96a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800de96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d006      	beq.n	800deaa <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800de9c:	2300      	movs	r3, #0
 800de9e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800dea0:	232c      	movs	r3, #44	; 0x2c
 800dea2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800dea4:	236c      	movs	r3, #108	; 0x6c
 800dea6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800dea8:	e55f      	b.n	800d96a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3740      	adds	r7, #64	; 0x40
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	080140b4 	.word	0x080140b4
 800deb8:	0801433c 	.word	0x0801433c
 800debc:	08014114 	.word	0x08014114
 800dec0:	08014380 	.word	0x08014380
 800dec4:	200076e8 	.word	0x200076e8
 800dec8:	08014394 	.word	0x08014394
 800decc:	200076f0 	.word	0x200076f0
 800ded0:	080143ac 	.word	0x080143ac
 800ded4:	080143c0 	.word	0x080143c0

0800ded8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08a      	sub	sp, #40	; 0x28
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800dee6:	4b60      	ldr	r3, [pc, #384]	; (800e068 <dhcp_recv+0x190>)
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800deec:	6a3b      	ldr	r3, [r7, #32]
 800deee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	2b00      	cmp	r3, #0
 800defc:	f000 809d 	beq.w	800e03a <dhcp_recv+0x162>
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	791b      	ldrb	r3, [r3, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 8098 	beq.w	800e03a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	895b      	ldrh	r3, [r3, #10]
 800df0e:	2b2b      	cmp	r3, #43	; 0x2b
 800df10:	f240 8095 	bls.w	800e03e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800df14:	69bb      	ldr	r3, [r7, #24]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	2b02      	cmp	r3, #2
 800df1a:	f040 8092 	bne.w	800e042 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800df1e:	2300      	movs	r3, #0
 800df20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df24:	e012      	b.n	800df4c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800df26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df2a:	6a3a      	ldr	r2, [r7, #32]
 800df2c:	4413      	add	r3, r2
 800df2e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800df32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df36:	69b9      	ldr	r1, [r7, #24]
 800df38:	440b      	add	r3, r1
 800df3a:	7f1b      	ldrb	r3, [r3, #28]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	f040 8082 	bne.w	800e046 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800df42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df46:	3301      	adds	r3, #1
 800df48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df4c:	6a3b      	ldr	r3, [r7, #32]
 800df4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800df56:	429a      	cmp	r2, r3
 800df58:	d203      	bcs.n	800df62 <dhcp_recv+0x8a>
 800df5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df5e:	2b05      	cmp	r3, #5
 800df60:	d9e1      	bls.n	800df26 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	4618      	mov	r0, r3
 800df68:	f7f6 fb7d 	bl	8004666 <lwip_htonl>
 800df6c:	4602      	mov	r2, r0
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	429a      	cmp	r2, r3
 800df74:	d169      	bne.n	800e04a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800df76:	69f9      	ldr	r1, [r7, #28]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f7ff fcd9 	bl	800d930 <dhcp_parse_reply>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d164      	bne.n	800e04e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800df84:	4b39      	ldr	r3, [pc, #228]	; (800e06c <dhcp_recv+0x194>)
 800df86:	785b      	ldrb	r3, [r3, #1]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d062      	beq.n	800e052 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800df92:	4b37      	ldr	r3, [pc, #220]	; (800e070 <dhcp_recv+0x198>)
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800df98:	7cfb      	ldrb	r3, [r7, #19]
 800df9a:	2b05      	cmp	r3, #5
 800df9c:	d12a      	bne.n	800dff4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	795b      	ldrb	r3, [r3, #5]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d112      	bne.n	800dfcc <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800dfa6:	6979      	ldr	r1, [r7, #20]
 800dfa8:	6a38      	ldr	r0, [r7, #32]
 800dfaa:	f7fe fe53 	bl	800cc54 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800dfae:	6a3b      	ldr	r3, [r7, #32]
 800dfb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dfb4:	f003 0308 	and.w	r3, r3, #8
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d003      	beq.n	800dfc4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800dfbc:	6a38      	ldr	r0, [r7, #32]
 800dfbe:	f7fe fbc1 	bl	800c744 <dhcp_check>
 800dfc2:	e049      	b.n	800e058 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800dfc4:	6a38      	ldr	r0, [r7, #32]
 800dfc6:	f7ff f867 	bl	800d098 <dhcp_bind>
 800dfca:	e045      	b.n	800e058 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	795b      	ldrb	r3, [r3, #5]
 800dfd0:	2b03      	cmp	r3, #3
 800dfd2:	d007      	beq.n	800dfe4 <dhcp_recv+0x10c>
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	795b      	ldrb	r3, [r3, #5]
 800dfd8:	2b04      	cmp	r3, #4
 800dfda:	d003      	beq.n	800dfe4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800dfe0:	2b05      	cmp	r3, #5
 800dfe2:	d139      	bne.n	800e058 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800dfe4:	6979      	ldr	r1, [r7, #20]
 800dfe6:	6a38      	ldr	r0, [r7, #32]
 800dfe8:	f7fe fe34 	bl	800cc54 <dhcp_handle_ack>
      dhcp_bind(netif);
 800dfec:	6a38      	ldr	r0, [r7, #32]
 800dfee:	f7ff f853 	bl	800d098 <dhcp_bind>
 800dff2:	e031      	b.n	800e058 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800dff4:	7cfb      	ldrb	r3, [r7, #19]
 800dff6:	2b06      	cmp	r3, #6
 800dff8:	d113      	bne.n	800e022 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800dffe:	2b03      	cmp	r3, #3
 800e000:	d00b      	beq.n	800e01a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	795b      	ldrb	r3, [r3, #5]
 800e006:	2b01      	cmp	r3, #1
 800e008:	d007      	beq.n	800e01a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e00e:	2b04      	cmp	r3, #4
 800e010:	d003      	beq.n	800e01a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	795b      	ldrb	r3, [r3, #5]
 800e016:	2b05      	cmp	r3, #5
 800e018:	d103      	bne.n	800e022 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800e01a:	6a38      	ldr	r0, [r7, #32]
 800e01c:	f7fe fb78 	bl	800c710 <dhcp_handle_nak>
 800e020:	e01a      	b.n	800e058 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800e022:	7cfb      	ldrb	r3, [r7, #19]
 800e024:	2b02      	cmp	r3, #2
 800e026:	d116      	bne.n	800e056 <dhcp_recv+0x17e>
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	795b      	ldrb	r3, [r3, #5]
 800e02c:	2b06      	cmp	r3, #6
 800e02e:	d112      	bne.n	800e056 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800e030:	6979      	ldr	r1, [r7, #20]
 800e032:	6a38      	ldr	r0, [r7, #32]
 800e034:	f7fe fbba 	bl	800c7ac <dhcp_handle_offer>
 800e038:	e00e      	b.n	800e058 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800e03a:	bf00      	nop
 800e03c:	e00c      	b.n	800e058 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800e03e:	bf00      	nop
 800e040:	e00a      	b.n	800e058 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800e042:	bf00      	nop
 800e044:	e008      	b.n	800e058 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800e046:	bf00      	nop
 800e048:	e006      	b.n	800e058 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800e04a:	bf00      	nop
 800e04c:	e004      	b.n	800e058 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800e04e:	bf00      	nop
 800e050:	e002      	b.n	800e058 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800e052:	bf00      	nop
 800e054:	e000      	b.n	800e058 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800e056:	bf00      	nop
  pbuf_free(p);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f7f7 ff4f 	bl	8005efc <pbuf_free>
}
 800e05e:	bf00      	nop
 800e060:	3728      	adds	r7, #40	; 0x28
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	200040dc 	.word	0x200040dc
 800e06c:	200076e8 	.word	0x200076e8
 800e070:	200076f0 	.word	0x200076f0

0800e074 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b088      	sub	sp, #32
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	603b      	str	r3, [r7, #0]
 800e080:	4613      	mov	r3, r2
 800e082:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d108      	bne.n	800e09c <dhcp_create_msg+0x28>
 800e08a:	4b5f      	ldr	r3, [pc, #380]	; (800e208 <dhcp_create_msg+0x194>)
 800e08c:	f240 7269 	movw	r2, #1897	; 0x769
 800e090:	495e      	ldr	r1, [pc, #376]	; (800e20c <dhcp_create_msg+0x198>)
 800e092:	485f      	ldr	r0, [pc, #380]	; (800e210 <dhcp_create_msg+0x19c>)
 800e094:	f002 fef0 	bl	8010e78 <iprintf>
 800e098:	2300      	movs	r3, #0
 800e09a:	e0b1      	b.n	800e200 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d108      	bne.n	800e0b4 <dhcp_create_msg+0x40>
 800e0a2:	4b59      	ldr	r3, [pc, #356]	; (800e208 <dhcp_create_msg+0x194>)
 800e0a4:	f240 726a 	movw	r2, #1898	; 0x76a
 800e0a8:	495a      	ldr	r1, [pc, #360]	; (800e214 <dhcp_create_msg+0x1a0>)
 800e0aa:	4859      	ldr	r0, [pc, #356]	; (800e210 <dhcp_create_msg+0x19c>)
 800e0ac:	f002 fee4 	bl	8010e78 <iprintf>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	e0a5      	b.n	800e200 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800e0b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0b8:	f44f 719a 	mov.w	r1, #308	; 0x134
 800e0bc:	2036      	movs	r0, #54	; 0x36
 800e0be:	f7f7 fc7d 	bl	80059bc <pbuf_alloc>
 800e0c2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d101      	bne.n	800e0ce <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e098      	b.n	800e200 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	895b      	ldrh	r3, [r3, #10]
 800e0d2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800e0d6:	d206      	bcs.n	800e0e6 <dhcp_create_msg+0x72>
 800e0d8:	4b4b      	ldr	r3, [pc, #300]	; (800e208 <dhcp_create_msg+0x194>)
 800e0da:	f240 7271 	movw	r2, #1905	; 0x771
 800e0de:	494e      	ldr	r1, [pc, #312]	; (800e218 <dhcp_create_msg+0x1a4>)
 800e0e0:	484b      	ldr	r0, [pc, #300]	; (800e210 <dhcp_create_msg+0x19c>)
 800e0e2:	f002 fec9 	bl	8010e78 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d103      	bne.n	800e0f4 <dhcp_create_msg+0x80>
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	795b      	ldrb	r3, [r3, #5]
 800e0f0:	2b03      	cmp	r3, #3
 800e0f2:	d10d      	bne.n	800e110 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	799b      	ldrb	r3, [r3, #6]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d105      	bne.n	800e108 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800e0fc:	f002 fed4 	bl	8010ea8 <rand>
 800e100:	4603      	mov	r3, r0
 800e102:	461a      	mov	r2, r3
 800e104:	4b45      	ldr	r3, [pc, #276]	; (800e21c <dhcp_create_msg+0x1a8>)
 800e106:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800e108:	4b44      	ldr	r3, [pc, #272]	; (800e21c <dhcp_create_msg+0x1a8>)
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800e116:	f44f 729a 	mov.w	r2, #308	; 0x134
 800e11a:	2100      	movs	r1, #0
 800e11c:	6978      	ldr	r0, [r7, #20]
 800e11e:	f002 fea3 	bl	8010e68 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	2201      	movs	r2, #1
 800e126:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	2201      	movs	r2, #1
 800e12c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7f6 fa92 	bl	8004666 <lwip_htonl>
 800e142:	4602      	mov	r2, r0
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800e148:	79fb      	ldrb	r3, [r7, #7]
 800e14a:	2b08      	cmp	r3, #8
 800e14c:	d010      	beq.n	800e170 <dhcp_create_msg+0xfc>
 800e14e:	79fb      	ldrb	r3, [r7, #7]
 800e150:	2b04      	cmp	r3, #4
 800e152:	d00d      	beq.n	800e170 <dhcp_create_msg+0xfc>
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	2b07      	cmp	r3, #7
 800e158:	d00a      	beq.n	800e170 <dhcp_create_msg+0xfc>
 800e15a:	79fb      	ldrb	r3, [r7, #7]
 800e15c:	2b03      	cmp	r3, #3
 800e15e:	d10c      	bne.n	800e17a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800e164:	2b05      	cmp	r3, #5
 800e166:	d003      	beq.n	800e170 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	795b      	ldrb	r3, [r3, #5]
 800e16c:	2b04      	cmp	r3, #4
 800e16e:	d104      	bne.n	800e17a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	3304      	adds	r3, #4
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e17a:	2300      	movs	r3, #0
 800e17c:	83fb      	strh	r3, [r7, #30]
 800e17e:	e00c      	b.n	800e19a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800e180:	8bfa      	ldrh	r2, [r7, #30]
 800e182:	8bfb      	ldrh	r3, [r7, #30]
 800e184:	68f9      	ldr	r1, [r7, #12]
 800e186:	440a      	add	r2, r1
 800e188:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800e18c:	697a      	ldr	r2, [r7, #20]
 800e18e:	4413      	add	r3, r2
 800e190:	460a      	mov	r2, r1
 800e192:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e194:	8bfb      	ldrh	r3, [r7, #30]
 800e196:	3301      	adds	r3, #1
 800e198:	83fb      	strh	r3, [r7, #30]
 800e19a:	8bfb      	ldrh	r3, [r7, #30]
 800e19c:	2b05      	cmp	r3, #5
 800e19e:	d9ef      	bls.n	800e180 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800e1a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800e1b2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800e1bc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800e1c6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	2235      	movs	r2, #53	; 0x35
 800e1d4:	2000      	movs	r0, #0
 800e1d6:	f7ff fadb 	bl	800d790 <dhcp_option>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e1e4:	79fa      	ldrb	r2, [r7, #7]
 800e1e6:	8a7b      	ldrh	r3, [r7, #18]
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7ff fb05 	bl	800d7f8 <dhcp_option_byte>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d002      	beq.n	800e1fe <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	8a7a      	ldrh	r2, [r7, #18]
 800e1fc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800e1fe:	69bb      	ldr	r3, [r7, #24]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3720      	adds	r7, #32
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	080140b4 	.word	0x080140b4
 800e20c:	080143d4 	.word	0x080143d4
 800e210:	08014114 	.word	0x08014114
 800e214:	080143f4 	.word	0x080143f4
 800e218:	08014414 	.word	0x08014414
 800e21c:	20000184 	.word	0x20000184

0800e220 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	4603      	mov	r3, r0
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800e22e:	89fb      	ldrh	r3, [r7, #14]
 800e230:	1c5a      	adds	r2, r3, #1
 800e232:	81fa      	strh	r2, [r7, #14]
 800e234:	461a      	mov	r2, r3
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	4413      	add	r3, r2
 800e23a:	22ff      	movs	r2, #255	; 0xff
 800e23c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e23e:	e007      	b.n	800e250 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800e240:	89fb      	ldrh	r3, [r7, #14]
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	81fa      	strh	r2, [r7, #14]
 800e246:	461a      	mov	r2, r3
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	4413      	add	r3, r2
 800e24c:	2200      	movs	r2, #0
 800e24e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e250:	89fb      	ldrh	r3, [r7, #14]
 800e252:	2b43      	cmp	r3, #67	; 0x43
 800e254:	d904      	bls.n	800e260 <dhcp_option_trailer+0x40>
 800e256:	89fb      	ldrh	r3, [r7, #14]
 800e258:	f003 0303 	and.w	r3, r3, #3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d002      	beq.n	800e266 <dhcp_option_trailer+0x46>
 800e260:	89fb      	ldrh	r3, [r7, #14]
 800e262:	2b43      	cmp	r3, #67	; 0x43
 800e264:	d9ec      	bls.n	800e240 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800e266:	89fb      	ldrh	r3, [r7, #14]
 800e268:	33f0      	adds	r3, #240	; 0xf0
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	4619      	mov	r1, r3
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7f7 fcbe 	bl	8005bf0 <pbuf_realloc>
}
 800e274:	bf00      	nop
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d017      	beq.n	800e2ba <dhcp_supplied_address+0x3e>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d013      	beq.n	800e2ba <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e296:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	795b      	ldrb	r3, [r3, #5]
 800e29c:	2b0a      	cmp	r3, #10
 800e29e:	d007      	beq.n	800e2b0 <dhcp_supplied_address+0x34>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	795b      	ldrb	r3, [r3, #5]
 800e2a4:	2b05      	cmp	r3, #5
 800e2a6:	d003      	beq.n	800e2b0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e2ac:	2b04      	cmp	r3, #4
 800e2ae:	d101      	bne.n	800e2b4 <dhcp_supplied_address+0x38>
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e000      	b.n	800e2b6 <dhcp_supplied_address+0x3a>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	e000      	b.n	800e2bc <dhcp_supplied_address+0x40>
  }
  return 0;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e2d0:	4915      	ldr	r1, [pc, #84]	; (800e328 <etharp_free_entry+0x60>)
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	005b      	lsls	r3, r3, #1
 800e2d8:	4413      	add	r3, r2
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	440b      	add	r3, r1
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d013      	beq.n	800e30c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e2e4:	4910      	ldr	r1, [pc, #64]	; (800e328 <etharp_free_entry+0x60>)
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	005b      	lsls	r3, r3, #1
 800e2ec:	4413      	add	r3, r2
 800e2ee:	00db      	lsls	r3, r3, #3
 800e2f0:	440b      	add	r3, r1
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7f7 fe01 	bl	8005efc <pbuf_free>
    arp_table[i].q = NULL;
 800e2fa:	490b      	ldr	r1, [pc, #44]	; (800e328 <etharp_free_entry+0x60>)
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	4613      	mov	r3, r2
 800e300:	005b      	lsls	r3, r3, #1
 800e302:	4413      	add	r3, r2
 800e304:	00db      	lsls	r3, r3, #3
 800e306:	440b      	add	r3, r1
 800e308:	2200      	movs	r2, #0
 800e30a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e30c:	4906      	ldr	r1, [pc, #24]	; (800e328 <etharp_free_entry+0x60>)
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	4613      	mov	r3, r2
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	4413      	add	r3, r2
 800e316:	00db      	lsls	r3, r3, #3
 800e318:	440b      	add	r3, r1
 800e31a:	3314      	adds	r3, #20
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e320:	bf00      	nop
 800e322:	3708      	adds	r7, #8
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	20000188 	.word	0x20000188

0800e32c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e332:	2300      	movs	r3, #0
 800e334:	607b      	str	r3, [r7, #4]
 800e336:	e096      	b.n	800e466 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e338:	494f      	ldr	r1, [pc, #316]	; (800e478 <etharp_tmr+0x14c>)
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	4613      	mov	r3, r2
 800e33e:	005b      	lsls	r3, r3, #1
 800e340:	4413      	add	r3, r2
 800e342:	00db      	lsls	r3, r3, #3
 800e344:	440b      	add	r3, r1
 800e346:	3314      	adds	r3, #20
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e34c:	78fb      	ldrb	r3, [r7, #3]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f000 8086 	beq.w	800e460 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e354:	4948      	ldr	r1, [pc, #288]	; (800e478 <etharp_tmr+0x14c>)
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	4613      	mov	r3, r2
 800e35a:	005b      	lsls	r3, r3, #1
 800e35c:	4413      	add	r3, r2
 800e35e:	00db      	lsls	r3, r3, #3
 800e360:	440b      	add	r3, r1
 800e362:	3312      	adds	r3, #18
 800e364:	881b      	ldrh	r3, [r3, #0]
 800e366:	3301      	adds	r3, #1
 800e368:	b298      	uxth	r0, r3
 800e36a:	4943      	ldr	r1, [pc, #268]	; (800e478 <etharp_tmr+0x14c>)
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	4613      	mov	r3, r2
 800e370:	005b      	lsls	r3, r3, #1
 800e372:	4413      	add	r3, r2
 800e374:	00db      	lsls	r3, r3, #3
 800e376:	440b      	add	r3, r1
 800e378:	3312      	adds	r3, #18
 800e37a:	4602      	mov	r2, r0
 800e37c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e37e:	493e      	ldr	r1, [pc, #248]	; (800e478 <etharp_tmr+0x14c>)
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	4613      	mov	r3, r2
 800e384:	005b      	lsls	r3, r3, #1
 800e386:	4413      	add	r3, r2
 800e388:	00db      	lsls	r3, r3, #3
 800e38a:	440b      	add	r3, r1
 800e38c:	3312      	adds	r3, #18
 800e38e:	881b      	ldrh	r3, [r3, #0]
 800e390:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e394:	d215      	bcs.n	800e3c2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e396:	4938      	ldr	r1, [pc, #224]	; (800e478 <etharp_tmr+0x14c>)
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	4613      	mov	r3, r2
 800e39c:	005b      	lsls	r3, r3, #1
 800e39e:	4413      	add	r3, r2
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	440b      	add	r3, r1
 800e3a4:	3314      	adds	r3, #20
 800e3a6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d10e      	bne.n	800e3ca <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e3ac:	4932      	ldr	r1, [pc, #200]	; (800e478 <etharp_tmr+0x14c>)
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	005b      	lsls	r3, r3, #1
 800e3b4:	4413      	add	r3, r2
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	440b      	add	r3, r1
 800e3ba:	3312      	adds	r3, #18
 800e3bc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d903      	bls.n	800e3ca <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7ff ff80 	bl	800e2c8 <etharp_free_entry>
 800e3c8:	e04a      	b.n	800e460 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e3ca:	492b      	ldr	r1, [pc, #172]	; (800e478 <etharp_tmr+0x14c>)
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	005b      	lsls	r3, r3, #1
 800e3d2:	4413      	add	r3, r2
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	440b      	add	r3, r1
 800e3d8:	3314      	adds	r3, #20
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	2b03      	cmp	r3, #3
 800e3de:	d10a      	bne.n	800e3f6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e3e0:	4925      	ldr	r1, [pc, #148]	; (800e478 <etharp_tmr+0x14c>)
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	005b      	lsls	r3, r3, #1
 800e3e8:	4413      	add	r3, r2
 800e3ea:	00db      	lsls	r3, r3, #3
 800e3ec:	440b      	add	r3, r1
 800e3ee:	3314      	adds	r3, #20
 800e3f0:	2204      	movs	r2, #4
 800e3f2:	701a      	strb	r2, [r3, #0]
 800e3f4:	e034      	b.n	800e460 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e3f6:	4920      	ldr	r1, [pc, #128]	; (800e478 <etharp_tmr+0x14c>)
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	005b      	lsls	r3, r3, #1
 800e3fe:	4413      	add	r3, r2
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	440b      	add	r3, r1
 800e404:	3314      	adds	r3, #20
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b04      	cmp	r3, #4
 800e40a:	d10a      	bne.n	800e422 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e40c:	491a      	ldr	r1, [pc, #104]	; (800e478 <etharp_tmr+0x14c>)
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	4613      	mov	r3, r2
 800e412:	005b      	lsls	r3, r3, #1
 800e414:	4413      	add	r3, r2
 800e416:	00db      	lsls	r3, r3, #3
 800e418:	440b      	add	r3, r1
 800e41a:	3314      	adds	r3, #20
 800e41c:	2202      	movs	r2, #2
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e01e      	b.n	800e460 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e422:	4915      	ldr	r1, [pc, #84]	; (800e478 <etharp_tmr+0x14c>)
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	4613      	mov	r3, r2
 800e428:	005b      	lsls	r3, r3, #1
 800e42a:	4413      	add	r3, r2
 800e42c:	00db      	lsls	r3, r3, #3
 800e42e:	440b      	add	r3, r1
 800e430:	3314      	adds	r3, #20
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d113      	bne.n	800e460 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e438:	490f      	ldr	r1, [pc, #60]	; (800e478 <etharp_tmr+0x14c>)
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4613      	mov	r3, r2
 800e43e:	005b      	lsls	r3, r3, #1
 800e440:	4413      	add	r3, r2
 800e442:	00db      	lsls	r3, r3, #3
 800e444:	440b      	add	r3, r1
 800e446:	3308      	adds	r3, #8
 800e448:	6818      	ldr	r0, [r3, #0]
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	4613      	mov	r3, r2
 800e44e:	005b      	lsls	r3, r3, #1
 800e450:	4413      	add	r3, r2
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	4a08      	ldr	r2, [pc, #32]	; (800e478 <etharp_tmr+0x14c>)
 800e456:	4413      	add	r3, r2
 800e458:	3304      	adds	r3, #4
 800e45a:	4619      	mov	r1, r3
 800e45c:	f000 feb4 	bl	800f1c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3301      	adds	r3, #1
 800e464:	607b      	str	r3, [r7, #4]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b09      	cmp	r3, #9
 800e46a:	f77f af65 	ble.w	800e338 <etharp_tmr+0xc>
      }
    }
  }
}
 800e46e:	bf00      	nop
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20000188 	.word	0x20000188

0800e47c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b08a      	sub	sp, #40	; 0x28
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	460b      	mov	r3, r1
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e48a:	230a      	movs	r3, #10
 800e48c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e48e:	230a      	movs	r3, #10
 800e490:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e492:	230a      	movs	r3, #10
 800e494:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e49a:	230a      	movs	r3, #10
 800e49c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	83bb      	strh	r3, [r7, #28]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	837b      	strh	r3, [r7, #26]
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	843b      	strh	r3, [r7, #32]
 800e4ae:	e0ae      	b.n	800e60e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e4b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4b4:	49a6      	ldr	r1, [pc, #664]	; (800e750 <etharp_find_entry+0x2d4>)
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	005b      	lsls	r3, r3, #1
 800e4ba:	4413      	add	r3, r2
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	440b      	add	r3, r1
 800e4c0:	3314      	adds	r3, #20
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e4c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e4ca:	2b0a      	cmp	r3, #10
 800e4cc:	d105      	bne.n	800e4da <etharp_find_entry+0x5e>
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d102      	bne.n	800e4da <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e4d4:	8c3b      	ldrh	r3, [r7, #32]
 800e4d6:	847b      	strh	r3, [r7, #34]	; 0x22
 800e4d8:	e095      	b.n	800e606 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e4da:	7dfb      	ldrb	r3, [r7, #23]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	f000 8092 	beq.w	800e606 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e4e2:	7dfb      	ldrb	r3, [r7, #23]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d009      	beq.n	800e4fc <etharp_find_entry+0x80>
 800e4e8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d806      	bhi.n	800e4fc <etharp_find_entry+0x80>
 800e4ee:	4b99      	ldr	r3, [pc, #612]	; (800e754 <etharp_find_entry+0x2d8>)
 800e4f0:	f240 1223 	movw	r2, #291	; 0x123
 800e4f4:	4998      	ldr	r1, [pc, #608]	; (800e758 <etharp_find_entry+0x2dc>)
 800e4f6:	4899      	ldr	r0, [pc, #612]	; (800e75c <etharp_find_entry+0x2e0>)
 800e4f8:	f002 fcbe 	bl	8010e78 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d020      	beq.n	800e544 <etharp_find_entry+0xc8>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6819      	ldr	r1, [r3, #0]
 800e506:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e50a:	4891      	ldr	r0, [pc, #580]	; (800e750 <etharp_find_entry+0x2d4>)
 800e50c:	4613      	mov	r3, r2
 800e50e:	005b      	lsls	r3, r3, #1
 800e510:	4413      	add	r3, r2
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	4403      	add	r3, r0
 800e516:	3304      	adds	r3, #4
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4299      	cmp	r1, r3
 800e51c:	d112      	bne.n	800e544 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00c      	beq.n	800e53e <etharp_find_entry+0xc2>
 800e524:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e528:	4989      	ldr	r1, [pc, #548]	; (800e750 <etharp_find_entry+0x2d4>)
 800e52a:	4613      	mov	r3, r2
 800e52c:	005b      	lsls	r3, r3, #1
 800e52e:	4413      	add	r3, r2
 800e530:	00db      	lsls	r3, r3, #3
 800e532:	440b      	add	r3, r1
 800e534:	3308      	adds	r3, #8
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d102      	bne.n	800e544 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e53e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e542:	e100      	b.n	800e746 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e544:	7dfb      	ldrb	r3, [r7, #23]
 800e546:	2b01      	cmp	r3, #1
 800e548:	d140      	bne.n	800e5cc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e54a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e54e:	4980      	ldr	r1, [pc, #512]	; (800e750 <etharp_find_entry+0x2d4>)
 800e550:	4613      	mov	r3, r2
 800e552:	005b      	lsls	r3, r3, #1
 800e554:	4413      	add	r3, r2
 800e556:	00db      	lsls	r3, r3, #3
 800e558:	440b      	add	r3, r1
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d01a      	beq.n	800e596 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e560:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e564:	497a      	ldr	r1, [pc, #488]	; (800e750 <etharp_find_entry+0x2d4>)
 800e566:	4613      	mov	r3, r2
 800e568:	005b      	lsls	r3, r3, #1
 800e56a:	4413      	add	r3, r2
 800e56c:	00db      	lsls	r3, r3, #3
 800e56e:	440b      	add	r3, r1
 800e570:	3312      	adds	r3, #18
 800e572:	881b      	ldrh	r3, [r3, #0]
 800e574:	8bba      	ldrh	r2, [r7, #28]
 800e576:	429a      	cmp	r2, r3
 800e578:	d845      	bhi.n	800e606 <etharp_find_entry+0x18a>
            old_queue = i;
 800e57a:	8c3b      	ldrh	r3, [r7, #32]
 800e57c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e57e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e582:	4973      	ldr	r1, [pc, #460]	; (800e750 <etharp_find_entry+0x2d4>)
 800e584:	4613      	mov	r3, r2
 800e586:	005b      	lsls	r3, r3, #1
 800e588:	4413      	add	r3, r2
 800e58a:	00db      	lsls	r3, r3, #3
 800e58c:	440b      	add	r3, r1
 800e58e:	3312      	adds	r3, #18
 800e590:	881b      	ldrh	r3, [r3, #0]
 800e592:	83bb      	strh	r3, [r7, #28]
 800e594:	e037      	b.n	800e606 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e596:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e59a:	496d      	ldr	r1, [pc, #436]	; (800e750 <etharp_find_entry+0x2d4>)
 800e59c:	4613      	mov	r3, r2
 800e59e:	005b      	lsls	r3, r3, #1
 800e5a0:	4413      	add	r3, r2
 800e5a2:	00db      	lsls	r3, r3, #3
 800e5a4:	440b      	add	r3, r1
 800e5a6:	3312      	adds	r3, #18
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	8b7a      	ldrh	r2, [r7, #26]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d82a      	bhi.n	800e606 <etharp_find_entry+0x18a>
            old_pending = i;
 800e5b0:	8c3b      	ldrh	r3, [r7, #32]
 800e5b2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e5b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5b8:	4965      	ldr	r1, [pc, #404]	; (800e750 <etharp_find_entry+0x2d4>)
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	4413      	add	r3, r2
 800e5c0:	00db      	lsls	r3, r3, #3
 800e5c2:	440b      	add	r3, r1
 800e5c4:	3312      	adds	r3, #18
 800e5c6:	881b      	ldrh	r3, [r3, #0]
 800e5c8:	837b      	strh	r3, [r7, #26]
 800e5ca:	e01c      	b.n	800e606 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e5cc:	7dfb      	ldrb	r3, [r7, #23]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d919      	bls.n	800e606 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e5d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5d6:	495e      	ldr	r1, [pc, #376]	; (800e750 <etharp_find_entry+0x2d4>)
 800e5d8:	4613      	mov	r3, r2
 800e5da:	005b      	lsls	r3, r3, #1
 800e5dc:	4413      	add	r3, r2
 800e5de:	00db      	lsls	r3, r3, #3
 800e5e0:	440b      	add	r3, r1
 800e5e2:	3312      	adds	r3, #18
 800e5e4:	881b      	ldrh	r3, [r3, #0]
 800e5e6:	8b3a      	ldrh	r2, [r7, #24]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d80c      	bhi.n	800e606 <etharp_find_entry+0x18a>
            old_stable = i;
 800e5ec:	8c3b      	ldrh	r3, [r7, #32]
 800e5ee:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e5f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5f4:	4956      	ldr	r1, [pc, #344]	; (800e750 <etharp_find_entry+0x2d4>)
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	005b      	lsls	r3, r3, #1
 800e5fa:	4413      	add	r3, r2
 800e5fc:	00db      	lsls	r3, r3, #3
 800e5fe:	440b      	add	r3, r1
 800e600:	3312      	adds	r3, #18
 800e602:	881b      	ldrh	r3, [r3, #0]
 800e604:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e606:	8c3b      	ldrh	r3, [r7, #32]
 800e608:	3301      	adds	r3, #1
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	843b      	strh	r3, [r7, #32]
 800e60e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e612:	2b09      	cmp	r3, #9
 800e614:	f77f af4c 	ble.w	800e4b0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e618:	7afb      	ldrb	r3, [r7, #11]
 800e61a:	f003 0302 	and.w	r3, r3, #2
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d108      	bne.n	800e634 <etharp_find_entry+0x1b8>
 800e622:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e626:	2b0a      	cmp	r3, #10
 800e628:	d107      	bne.n	800e63a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e62a:	7afb      	ldrb	r3, [r7, #11]
 800e62c:	f003 0301 	and.w	r3, r3, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	d102      	bne.n	800e63a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e634:	f04f 33ff 	mov.w	r3, #4294967295
 800e638:	e085      	b.n	800e746 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e63a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e63e:	2b09      	cmp	r3, #9
 800e640:	dc02      	bgt.n	800e648 <etharp_find_entry+0x1cc>
    i = empty;
 800e642:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e644:	843b      	strh	r3, [r7, #32]
 800e646:	e039      	b.n	800e6bc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e648:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e64c:	2b09      	cmp	r3, #9
 800e64e:	dc14      	bgt.n	800e67a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e652:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e658:	493d      	ldr	r1, [pc, #244]	; (800e750 <etharp_find_entry+0x2d4>)
 800e65a:	4613      	mov	r3, r2
 800e65c:	005b      	lsls	r3, r3, #1
 800e65e:	4413      	add	r3, r2
 800e660:	00db      	lsls	r3, r3, #3
 800e662:	440b      	add	r3, r1
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d018      	beq.n	800e69c <etharp_find_entry+0x220>
 800e66a:	4b3a      	ldr	r3, [pc, #232]	; (800e754 <etharp_find_entry+0x2d8>)
 800e66c:	f240 126d 	movw	r2, #365	; 0x16d
 800e670:	493b      	ldr	r1, [pc, #236]	; (800e760 <etharp_find_entry+0x2e4>)
 800e672:	483a      	ldr	r0, [pc, #232]	; (800e75c <etharp_find_entry+0x2e0>)
 800e674:	f002 fc00 	bl	8010e78 <iprintf>
 800e678:	e010      	b.n	800e69c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e67a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e67e:	2b09      	cmp	r3, #9
 800e680:	dc02      	bgt.n	800e688 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e682:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e684:	843b      	strh	r3, [r7, #32]
 800e686:	e009      	b.n	800e69c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e688:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e68c:	2b09      	cmp	r3, #9
 800e68e:	dc02      	bgt.n	800e696 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e690:	8bfb      	ldrh	r3, [r7, #30]
 800e692:	843b      	strh	r3, [r7, #32]
 800e694:	e002      	b.n	800e69c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e696:	f04f 33ff 	mov.w	r3, #4294967295
 800e69a:	e054      	b.n	800e746 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e69c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6a0:	2b09      	cmp	r3, #9
 800e6a2:	dd06      	ble.n	800e6b2 <etharp_find_entry+0x236>
 800e6a4:	4b2b      	ldr	r3, [pc, #172]	; (800e754 <etharp_find_entry+0x2d8>)
 800e6a6:	f240 127f 	movw	r2, #383	; 0x17f
 800e6aa:	492e      	ldr	r1, [pc, #184]	; (800e764 <etharp_find_entry+0x2e8>)
 800e6ac:	482b      	ldr	r0, [pc, #172]	; (800e75c <etharp_find_entry+0x2e0>)
 800e6ae:	f002 fbe3 	bl	8010e78 <iprintf>
    etharp_free_entry(i);
 800e6b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff fe06 	bl	800e2c8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e6bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6c0:	2b09      	cmp	r3, #9
 800e6c2:	dd06      	ble.n	800e6d2 <etharp_find_entry+0x256>
 800e6c4:	4b23      	ldr	r3, [pc, #140]	; (800e754 <etharp_find_entry+0x2d8>)
 800e6c6:	f240 1283 	movw	r2, #387	; 0x183
 800e6ca:	4926      	ldr	r1, [pc, #152]	; (800e764 <etharp_find_entry+0x2e8>)
 800e6cc:	4823      	ldr	r0, [pc, #140]	; (800e75c <etharp_find_entry+0x2e0>)
 800e6ce:	f002 fbd3 	bl	8010e78 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e6d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6d6:	491e      	ldr	r1, [pc, #120]	; (800e750 <etharp_find_entry+0x2d4>)
 800e6d8:	4613      	mov	r3, r2
 800e6da:	005b      	lsls	r3, r3, #1
 800e6dc:	4413      	add	r3, r2
 800e6de:	00db      	lsls	r3, r3, #3
 800e6e0:	440b      	add	r3, r1
 800e6e2:	3314      	adds	r3, #20
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d006      	beq.n	800e6f8 <etharp_find_entry+0x27c>
 800e6ea:	4b1a      	ldr	r3, [pc, #104]	; (800e754 <etharp_find_entry+0x2d8>)
 800e6ec:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e6f0:	491d      	ldr	r1, [pc, #116]	; (800e768 <etharp_find_entry+0x2ec>)
 800e6f2:	481a      	ldr	r0, [pc, #104]	; (800e75c <etharp_find_entry+0x2e0>)
 800e6f4:	f002 fbc0 	bl	8010e78 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00b      	beq.n	800e716 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e6fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6819      	ldr	r1, [r3, #0]
 800e706:	4812      	ldr	r0, [pc, #72]	; (800e750 <etharp_find_entry+0x2d4>)
 800e708:	4613      	mov	r3, r2
 800e70a:	005b      	lsls	r3, r3, #1
 800e70c:	4413      	add	r3, r2
 800e70e:	00db      	lsls	r3, r3, #3
 800e710:	4403      	add	r3, r0
 800e712:	3304      	adds	r3, #4
 800e714:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e716:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e71a:	490d      	ldr	r1, [pc, #52]	; (800e750 <etharp_find_entry+0x2d4>)
 800e71c:	4613      	mov	r3, r2
 800e71e:	005b      	lsls	r3, r3, #1
 800e720:	4413      	add	r3, r2
 800e722:	00db      	lsls	r3, r3, #3
 800e724:	440b      	add	r3, r1
 800e726:	3312      	adds	r3, #18
 800e728:	2200      	movs	r2, #0
 800e72a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e72c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e730:	4907      	ldr	r1, [pc, #28]	; (800e750 <etharp_find_entry+0x2d4>)
 800e732:	4613      	mov	r3, r2
 800e734:	005b      	lsls	r3, r3, #1
 800e736:	4413      	add	r3, r2
 800e738:	00db      	lsls	r3, r3, #3
 800e73a:	440b      	add	r3, r1
 800e73c:	3308      	adds	r3, #8
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e742:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3728      	adds	r7, #40	; 0x28
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	20000188 	.word	0x20000188
 800e754:	08014454 	.word	0x08014454
 800e758:	0801448c 	.word	0x0801448c
 800e75c:	080144cc 	.word	0x080144cc
 800e760:	080144f4 	.word	0x080144f4
 800e764:	0801450c 	.word	0x0801450c
 800e768:	08014520 	.word	0x08014520

0800e76c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b088      	sub	sp, #32
 800e770:	af02      	add	r7, sp, #8
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e780:	2b06      	cmp	r3, #6
 800e782:	d006      	beq.n	800e792 <etharp_update_arp_entry+0x26>
 800e784:	4b48      	ldr	r3, [pc, #288]	; (800e8a8 <etharp_update_arp_entry+0x13c>)
 800e786:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e78a:	4948      	ldr	r1, [pc, #288]	; (800e8ac <etharp_update_arp_entry+0x140>)
 800e78c:	4848      	ldr	r0, [pc, #288]	; (800e8b0 <etharp_update_arp_entry+0x144>)
 800e78e:	f002 fb73 	bl	8010e78 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d012      	beq.n	800e7be <etharp_update_arp_entry+0x52>
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d00e      	beq.n	800e7be <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68f9      	ldr	r1, [r7, #12]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f001 facc 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800e7ac:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d105      	bne.n	800e7be <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e7ba:	2be0      	cmp	r3, #224	; 0xe0
 800e7bc:	d102      	bne.n	800e7c4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e7be:	f06f 030f 	mvn.w	r3, #15
 800e7c2:	e06c      	b.n	800e89e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e7c4:	78fb      	ldrb	r3, [r7, #3]
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	68b8      	ldr	r0, [r7, #8]
 800e7cc:	f7ff fe56 	bl	800e47c <etharp_find_entry>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e7d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	da02      	bge.n	800e7e2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e7dc:	8afb      	ldrh	r3, [r7, #22]
 800e7de:	b25b      	sxtb	r3, r3
 800e7e0:	e05d      	b.n	800e89e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e7e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e7e6:	4933      	ldr	r1, [pc, #204]	; (800e8b4 <etharp_update_arp_entry+0x148>)
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	005b      	lsls	r3, r3, #1
 800e7ec:	4413      	add	r3, r2
 800e7ee:	00db      	lsls	r3, r3, #3
 800e7f0:	440b      	add	r3, r1
 800e7f2:	3314      	adds	r3, #20
 800e7f4:	2202      	movs	r2, #2
 800e7f6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e7f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e7fc:	492d      	ldr	r1, [pc, #180]	; (800e8b4 <etharp_update_arp_entry+0x148>)
 800e7fe:	4613      	mov	r3, r2
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	4413      	add	r3, r2
 800e804:	00db      	lsls	r3, r3, #3
 800e806:	440b      	add	r3, r1
 800e808:	3308      	adds	r3, #8
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e80e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e812:	4613      	mov	r3, r2
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4413      	add	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	3308      	adds	r3, #8
 800e81c:	4a25      	ldr	r2, [pc, #148]	; (800e8b4 <etharp_update_arp_entry+0x148>)
 800e81e:	4413      	add	r3, r2
 800e820:	3304      	adds	r3, #4
 800e822:	2206      	movs	r2, #6
 800e824:	6879      	ldr	r1, [r7, #4]
 800e826:	4618      	mov	r0, r3
 800e828:	f002 fb10 	bl	8010e4c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e82c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e830:	4920      	ldr	r1, [pc, #128]	; (800e8b4 <etharp_update_arp_entry+0x148>)
 800e832:	4613      	mov	r3, r2
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	4413      	add	r3, r2
 800e838:	00db      	lsls	r3, r3, #3
 800e83a:	440b      	add	r3, r1
 800e83c:	3312      	adds	r3, #18
 800e83e:	2200      	movs	r2, #0
 800e840:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e842:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e846:	491b      	ldr	r1, [pc, #108]	; (800e8b4 <etharp_update_arp_entry+0x148>)
 800e848:	4613      	mov	r3, r2
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	4413      	add	r3, r2
 800e84e:	00db      	lsls	r3, r3, #3
 800e850:	440b      	add	r3, r1
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d021      	beq.n	800e89c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e858:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e85c:	4915      	ldr	r1, [pc, #84]	; (800e8b4 <etharp_update_arp_entry+0x148>)
 800e85e:	4613      	mov	r3, r2
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	4413      	add	r3, r2
 800e864:	00db      	lsls	r3, r3, #3
 800e866:	440b      	add	r3, r1
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e86c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e870:	4910      	ldr	r1, [pc, #64]	; (800e8b4 <etharp_update_arp_entry+0x148>)
 800e872:	4613      	mov	r3, r2
 800e874:	005b      	lsls	r3, r3, #1
 800e876:	4413      	add	r3, r2
 800e878:	00db      	lsls	r3, r3, #3
 800e87a:	440b      	add	r3, r1
 800e87c:	2200      	movs	r2, #0
 800e87e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800e886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6939      	ldr	r1, [r7, #16]
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f002 fa59 	bl	8010d48 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e896:	6938      	ldr	r0, [r7, #16]
 800e898:	f7f7 fb30 	bl	8005efc <pbuf_free>
  }
  return ERR_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3718      	adds	r7, #24
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	08014454 	.word	0x08014454
 800e8ac:	0801454c 	.word	0x0801454c
 800e8b0:	080144cc 	.word	0x080144cc
 800e8b4:	20000188 	.word	0x20000188

0800e8b8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	60fb      	str	r3, [r7, #12]
 800e8c4:	e01e      	b.n	800e904 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e8c6:	4913      	ldr	r1, [pc, #76]	; (800e914 <etharp_cleanup_netif+0x5c>)
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	005b      	lsls	r3, r3, #1
 800e8ce:	4413      	add	r3, r2
 800e8d0:	00db      	lsls	r3, r3, #3
 800e8d2:	440b      	add	r3, r1
 800e8d4:	3314      	adds	r3, #20
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e8da:	7afb      	ldrb	r3, [r7, #11]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00e      	beq.n	800e8fe <etharp_cleanup_netif+0x46>
 800e8e0:	490c      	ldr	r1, [pc, #48]	; (800e914 <etharp_cleanup_netif+0x5c>)
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	4413      	add	r3, r2
 800e8ea:	00db      	lsls	r3, r3, #3
 800e8ec:	440b      	add	r3, r1
 800e8ee:	3308      	adds	r3, #8
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d102      	bne.n	800e8fe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f7ff fce5 	bl	800e2c8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	3301      	adds	r3, #1
 800e902:	60fb      	str	r3, [r7, #12]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b09      	cmp	r3, #9
 800e908:	dddd      	ble.n	800e8c6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e90a:	bf00      	nop
 800e90c:	bf00      	nop
 800e90e:	3710      	adds	r7, #16
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	20000188 	.word	0x20000188

0800e918 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e918:	b5b0      	push	{r4, r5, r7, lr}
 800e91a:	b08a      	sub	sp, #40	; 0x28
 800e91c:	af04      	add	r7, sp, #16
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d107      	bne.n	800e938 <etharp_input+0x20>
 800e928:	4b4c      	ldr	r3, [pc, #304]	; (800ea5c <etharp_input+0x144>)
 800e92a:	f240 228a 	movw	r2, #650	; 0x28a
 800e92e:	494c      	ldr	r1, [pc, #304]	; (800ea60 <etharp_input+0x148>)
 800e930:	484c      	ldr	r0, [pc, #304]	; (800ea64 <etharp_input+0x14c>)
 800e932:	f002 faa1 	bl	8010e78 <iprintf>
 800e936:	e08d      	b.n	800ea54 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	b29b      	uxth	r3, r3
 800e944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e948:	d10c      	bne.n	800e964 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e94e:	2b06      	cmp	r3, #6
 800e950:	d108      	bne.n	800e964 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e956:	2b04      	cmp	r3, #4
 800e958:	d104      	bne.n	800e964 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	885b      	ldrh	r3, [r3, #2]
 800e95e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e960:	2b08      	cmp	r3, #8
 800e962:	d00f      	beq.n	800e984 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 800e964:	4b40      	ldr	r3, [pc, #256]	; (800ea68 <etharp_input+0x150>)
 800e966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e968:	3301      	adds	r3, #1
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	4b3e      	ldr	r3, [pc, #248]	; (800ea68 <etharp_input+0x150>)
 800e96e:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800e970:	4b3d      	ldr	r3, [pc, #244]	; (800ea68 <etharp_input+0x150>)
 800e972:	8bdb      	ldrh	r3, [r3, #30]
 800e974:	3301      	adds	r3, #1
 800e976:	b29a      	uxth	r2, r3
 800e978:	4b3b      	ldr	r3, [pc, #236]	; (800ea68 <etharp_input+0x150>)
 800e97a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7f7 fabd 	bl	8005efc <pbuf_free>
    return;
 800e982:	e067      	b.n	800ea54 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 800e984:	4b38      	ldr	r3, [pc, #224]	; (800ea68 <etharp_input+0x150>)
 800e986:	8b5b      	ldrh	r3, [r3, #26]
 800e988:	3301      	adds	r3, #1
 800e98a:	b29a      	uxth	r2, r3
 800e98c:	4b36      	ldr	r3, [pc, #216]	; (800ea68 <etharp_input+0x150>)
 800e98e:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	330e      	adds	r3, #14
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	3318      	adds	r3, #24
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d102      	bne.n	800e9b0 <etharp_input+0x98>
    for_us = 0;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	75fb      	strb	r3, [r7, #23]
 800e9ae:	e009      	b.n	800e9c4 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	bf0c      	ite	eq
 800e9bc:	2301      	moveq	r3, #1
 800e9be:	2300      	movne	r3, #0
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	f103 0208 	add.w	r2, r3, #8
 800e9ca:	7dfb      	ldrb	r3, [r7, #23]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <etharp_input+0xbc>
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e000      	b.n	800e9d6 <etharp_input+0xbe>
 800e9d4:	2302      	movs	r3, #2
 800e9d6:	f107 010c 	add.w	r1, r7, #12
 800e9da:	6838      	ldr	r0, [r7, #0]
 800e9dc:	f7ff fec6 	bl	800e76c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	88db      	ldrh	r3, [r3, #6]
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9ea:	d003      	beq.n	800e9f4 <etharp_input+0xdc>
 800e9ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9f0:	d01e      	beq.n	800ea30 <etharp_input+0x118>
 800e9f2:	e024      	b.n	800ea3e <etharp_input+0x126>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 800e9f4:	7dfb      	ldrb	r3, [r7, #23]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d028      	beq.n	800ea4c <etharp_input+0x134>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ea10:	693a      	ldr	r2, [r7, #16]
 800ea12:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ea14:	2102      	movs	r1, #2
 800ea16:	9103      	str	r1, [sp, #12]
 800ea18:	f107 010c 	add.w	r1, r7, #12
 800ea1c:	9102      	str	r1, [sp, #8]
 800ea1e:	9201      	str	r2, [sp, #4]
 800ea20:	9300      	str	r3, [sp, #0]
 800ea22:	462b      	mov	r3, r5
 800ea24:	4622      	mov	r2, r4
 800ea26:	4601      	mov	r1, r0
 800ea28:	6838      	ldr	r0, [r7, #0]
 800ea2a:	f000 fb11 	bl	800f050 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 800ea2e:	e00d      	b.n	800ea4c <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 800ea30:	f107 030c 	add.w	r3, r7, #12
 800ea34:	4619      	mov	r1, r3
 800ea36:	6838      	ldr	r0, [r7, #0]
 800ea38:	f7fe f9ea 	bl	800ce10 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 800ea3c:	e007      	b.n	800ea4e <etharp_input+0x136>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 800ea3e:	4b0a      	ldr	r3, [pc, #40]	; (800ea68 <etharp_input+0x150>)
 800ea40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ea42:	3301      	adds	r3, #1
 800ea44:	b29a      	uxth	r2, r3
 800ea46:	4b08      	ldr	r3, [pc, #32]	; (800ea68 <etharp_input+0x150>)
 800ea48:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 800ea4a:	e000      	b.n	800ea4e <etharp_input+0x136>
      break;
 800ea4c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7f7 fa54 	bl	8005efc <pbuf_free>
}
 800ea54:	3718      	adds	r7, #24
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bdb0      	pop	{r4, r5, r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	08014454 	.word	0x08014454
 800ea60:	080145a4 	.word	0x080145a4
 800ea64:	080144cc 	.word	0x080144cc
 800ea68:	200075f0 	.word	0x200075f0

0800ea6c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af02      	add	r7, sp, #8
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	4613      	mov	r3, r2
 800ea78:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ea7a:	79fa      	ldrb	r2, [r7, #7]
 800ea7c:	4944      	ldr	r1, [pc, #272]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800ea7e:	4613      	mov	r3, r2
 800ea80:	005b      	lsls	r3, r3, #1
 800ea82:	4413      	add	r3, r2
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	440b      	add	r3, r1
 800ea88:	3314      	adds	r3, #20
 800ea8a:	781b      	ldrb	r3, [r3, #0]
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d806      	bhi.n	800ea9e <etharp_output_to_arp_index+0x32>
 800ea90:	4b40      	ldr	r3, [pc, #256]	; (800eb94 <etharp_output_to_arp_index+0x128>)
 800ea92:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ea96:	4940      	ldr	r1, [pc, #256]	; (800eb98 <etharp_output_to_arp_index+0x12c>)
 800ea98:	4840      	ldr	r0, [pc, #256]	; (800eb9c <etharp_output_to_arp_index+0x130>)
 800ea9a:	f002 f9ed 	bl	8010e78 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ea9e:	79fa      	ldrb	r2, [r7, #7]
 800eaa0:	493b      	ldr	r1, [pc, #236]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	4413      	add	r3, r2
 800eaa8:	00db      	lsls	r3, r3, #3
 800eaaa:	440b      	add	r3, r1
 800eaac:	3314      	adds	r3, #20
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	d153      	bne.n	800eb5c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800eab4:	79fa      	ldrb	r2, [r7, #7]
 800eab6:	4936      	ldr	r1, [pc, #216]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800eab8:	4613      	mov	r3, r2
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	4413      	add	r3, r2
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	440b      	add	r3, r1
 800eac2:	3312      	adds	r3, #18
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800eaca:	d919      	bls.n	800eb00 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800eacc:	79fa      	ldrb	r2, [r7, #7]
 800eace:	4613      	mov	r3, r2
 800ead0:	005b      	lsls	r3, r3, #1
 800ead2:	4413      	add	r3, r2
 800ead4:	00db      	lsls	r3, r3, #3
 800ead6:	4a2e      	ldr	r2, [pc, #184]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800ead8:	4413      	add	r3, r2
 800eada:	3304      	adds	r3, #4
 800eadc:	4619      	mov	r1, r3
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f000 fb72 	bl	800f1c8 <etharp_request>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d138      	bne.n	800eb5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eaea:	79fa      	ldrb	r2, [r7, #7]
 800eaec:	4928      	ldr	r1, [pc, #160]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800eaee:	4613      	mov	r3, r2
 800eaf0:	005b      	lsls	r3, r3, #1
 800eaf2:	4413      	add	r3, r2
 800eaf4:	00db      	lsls	r3, r3, #3
 800eaf6:	440b      	add	r3, r1
 800eaf8:	3314      	adds	r3, #20
 800eafa:	2203      	movs	r2, #3
 800eafc:	701a      	strb	r2, [r3, #0]
 800eafe:	e02d      	b.n	800eb5c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800eb00:	79fa      	ldrb	r2, [r7, #7]
 800eb02:	4923      	ldr	r1, [pc, #140]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800eb04:	4613      	mov	r3, r2
 800eb06:	005b      	lsls	r3, r3, #1
 800eb08:	4413      	add	r3, r2
 800eb0a:	00db      	lsls	r3, r3, #3
 800eb0c:	440b      	add	r3, r1
 800eb0e:	3312      	adds	r3, #18
 800eb10:	881b      	ldrh	r3, [r3, #0]
 800eb12:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800eb16:	d321      	bcc.n	800eb5c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800eb18:	79fa      	ldrb	r2, [r7, #7]
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	005b      	lsls	r3, r3, #1
 800eb1e:	4413      	add	r3, r2
 800eb20:	00db      	lsls	r3, r3, #3
 800eb22:	4a1b      	ldr	r2, [pc, #108]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800eb24:	4413      	add	r3, r2
 800eb26:	1d19      	adds	r1, r3, #4
 800eb28:	79fa      	ldrb	r2, [r7, #7]
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	005b      	lsls	r3, r3, #1
 800eb2e:	4413      	add	r3, r2
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	3308      	adds	r3, #8
 800eb34:	4a16      	ldr	r2, [pc, #88]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800eb36:	4413      	add	r3, r2
 800eb38:	3304      	adds	r3, #4
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f000 fb21 	bl	800f184 <etharp_request_dst>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d109      	bne.n	800eb5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eb48:	79fa      	ldrb	r2, [r7, #7]
 800eb4a:	4911      	ldr	r1, [pc, #68]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	005b      	lsls	r3, r3, #1
 800eb50:	4413      	add	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	440b      	add	r3, r1
 800eb56:	3314      	adds	r3, #20
 800eb58:	2203      	movs	r2, #3
 800eb5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800eb62:	79fa      	ldrb	r2, [r7, #7]
 800eb64:	4613      	mov	r3, r2
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	4413      	add	r3, r2
 800eb6a:	00db      	lsls	r3, r3, #3
 800eb6c:	3308      	adds	r3, #8
 800eb6e:	4a08      	ldr	r2, [pc, #32]	; (800eb90 <etharp_output_to_arp_index+0x124>)
 800eb70:	4413      	add	r3, r2
 800eb72:	3304      	adds	r3, #4
 800eb74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb78:	9200      	str	r2, [sp, #0]
 800eb7a:	460a      	mov	r2, r1
 800eb7c:	68b9      	ldr	r1, [r7, #8]
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f002 f8e2 	bl	8010d48 <ethernet_output>
 800eb84:	4603      	mov	r3, r0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	20000188 	.word	0x20000188
 800eb94:	08014454 	.word	0x08014454
 800eb98:	080145c4 	.word	0x080145c4
 800eb9c:	080144cc 	.word	0x080144cc

0800eba0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08a      	sub	sp, #40	; 0x28
 800eba4:	af02      	add	r7, sp, #8
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d106      	bne.n	800ebc4 <etharp_output+0x24>
 800ebb6:	4b76      	ldr	r3, [pc, #472]	; (800ed90 <etharp_output+0x1f0>)
 800ebb8:	f240 321e 	movw	r2, #798	; 0x31e
 800ebbc:	4975      	ldr	r1, [pc, #468]	; (800ed94 <etharp_output+0x1f4>)
 800ebbe:	4876      	ldr	r0, [pc, #472]	; (800ed98 <etharp_output+0x1f8>)
 800ebc0:	f002 f95a 	bl	8010e78 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d106      	bne.n	800ebd8 <etharp_output+0x38>
 800ebca:	4b71      	ldr	r3, [pc, #452]	; (800ed90 <etharp_output+0x1f0>)
 800ebcc:	f240 321f 	movw	r2, #799	; 0x31f
 800ebd0:	4972      	ldr	r1, [pc, #456]	; (800ed9c <etharp_output+0x1fc>)
 800ebd2:	4871      	ldr	r0, [pc, #452]	; (800ed98 <etharp_output+0x1f8>)
 800ebd4:	f002 f950 	bl	8010e78 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d106      	bne.n	800ebec <etharp_output+0x4c>
 800ebde:	4b6c      	ldr	r3, [pc, #432]	; (800ed90 <etharp_output+0x1f0>)
 800ebe0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ebe4:	496e      	ldr	r1, [pc, #440]	; (800eda0 <etharp_output+0x200>)
 800ebe6:	486c      	ldr	r0, [pc, #432]	; (800ed98 <etharp_output+0x1f8>)
 800ebe8:	f002 f946 	bl	8010e78 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	68f9      	ldr	r1, [r7, #12]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f001 f8a6 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d002      	beq.n	800ec04 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ebfe:	4b69      	ldr	r3, [pc, #420]	; (800eda4 <etharp_output+0x204>)
 800ec00:	61fb      	str	r3, [r7, #28]
 800ec02:	e0b5      	b.n	800ed70 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec0c:	2be0      	cmp	r3, #224	; 0xe0
 800ec0e:	d118      	bne.n	800ec42 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ec10:	2301      	movs	r3, #1
 800ec12:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ec14:	2300      	movs	r3, #0
 800ec16:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ec18:	235e      	movs	r3, #94	; 0x5e
 800ec1a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	3302      	adds	r3, #2
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3303      	adds	r3, #3
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ec3a:	f107 0310 	add.w	r3, r7, #16
 800ec3e:	61fb      	str	r3, [r7, #28]
 800ec40:	e096      	b.n	800ed70 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	3304      	adds	r3, #4
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	405a      	eors	r2, r3
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	3308      	adds	r3, #8
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4013      	ands	r3, r2
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d012      	beq.n	800ec80 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ec60:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d00b      	beq.n	800ec80 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	330c      	adds	r3, #12
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d003      	beq.n	800ec7a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	330c      	adds	r3, #12
 800ec76:	61bb      	str	r3, [r7, #24]
 800ec78:	e002      	b.n	800ec80 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ec7a:	f06f 0303 	mvn.w	r3, #3
 800ec7e:	e083      	b.n	800ed88 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ec80:	4b49      	ldr	r3, [pc, #292]	; (800eda8 <etharp_output+0x208>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	4619      	mov	r1, r3
 800ec86:	4a49      	ldr	r2, [pc, #292]	; (800edac <etharp_output+0x20c>)
 800ec88:	460b      	mov	r3, r1
 800ec8a:	005b      	lsls	r3, r3, #1
 800ec8c:	440b      	add	r3, r1
 800ec8e:	00db      	lsls	r3, r3, #3
 800ec90:	4413      	add	r3, r2
 800ec92:	3314      	adds	r3, #20
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d92b      	bls.n	800ecf2 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ec9a:	4b43      	ldr	r3, [pc, #268]	; (800eda8 <etharp_output+0x208>)
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	4619      	mov	r1, r3
 800eca0:	4a42      	ldr	r2, [pc, #264]	; (800edac <etharp_output+0x20c>)
 800eca2:	460b      	mov	r3, r1
 800eca4:	005b      	lsls	r3, r3, #1
 800eca6:	440b      	add	r3, r1
 800eca8:	00db      	lsls	r3, r3, #3
 800ecaa:	4413      	add	r3, r2
 800ecac:	3308      	adds	r3, #8
 800ecae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d11d      	bne.n	800ecf2 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	4b3b      	ldr	r3, [pc, #236]	; (800eda8 <etharp_output+0x208>)
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	493a      	ldr	r1, [pc, #232]	; (800edac <etharp_output+0x20c>)
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	005b      	lsls	r3, r3, #1
 800ecc6:	4403      	add	r3, r0
 800ecc8:	00db      	lsls	r3, r3, #3
 800ecca:	440b      	add	r3, r1
 800eccc:	3304      	adds	r3, #4
 800ecce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d10e      	bne.n	800ecf2 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 800ecd4:	4b36      	ldr	r3, [pc, #216]	; (800edb0 <etharp_output+0x210>)
 800ecd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ecd8:	3301      	adds	r3, #1
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	4b34      	ldr	r3, [pc, #208]	; (800edb0 <etharp_output+0x210>)
 800ecde:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ece0:	4b31      	ldr	r3, [pc, #196]	; (800eda8 <etharp_output+0x208>)
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	461a      	mov	r2, r3
 800ece6:	68b9      	ldr	r1, [r7, #8]
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f7ff febf 	bl	800ea6c <etharp_output_to_arp_index>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	e04a      	b.n	800ed88 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	75fb      	strb	r3, [r7, #23]
 800ecf6:	e031      	b.n	800ed5c <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ecf8:	7dfa      	ldrb	r2, [r7, #23]
 800ecfa:	492c      	ldr	r1, [pc, #176]	; (800edac <etharp_output+0x20c>)
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	005b      	lsls	r3, r3, #1
 800ed00:	4413      	add	r3, r2
 800ed02:	00db      	lsls	r3, r3, #3
 800ed04:	440b      	add	r3, r1
 800ed06:	3314      	adds	r3, #20
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d923      	bls.n	800ed56 <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ed0e:	7dfa      	ldrb	r2, [r7, #23]
 800ed10:	4926      	ldr	r1, [pc, #152]	; (800edac <etharp_output+0x20c>)
 800ed12:	4613      	mov	r3, r2
 800ed14:	005b      	lsls	r3, r3, #1
 800ed16:	4413      	add	r3, r2
 800ed18:	00db      	lsls	r3, r3, #3
 800ed1a:	440b      	add	r3, r1
 800ed1c:	3308      	adds	r3, #8
 800ed1e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d117      	bne.n	800ed56 <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	6819      	ldr	r1, [r3, #0]
 800ed2a:	7dfa      	ldrb	r2, [r7, #23]
 800ed2c:	481f      	ldr	r0, [pc, #124]	; (800edac <etharp_output+0x20c>)
 800ed2e:	4613      	mov	r3, r2
 800ed30:	005b      	lsls	r3, r3, #1
 800ed32:	4413      	add	r3, r2
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	4403      	add	r3, r0
 800ed38:	3304      	adds	r3, #4
 800ed3a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ed3c:	4299      	cmp	r1, r3
 800ed3e:	d10a      	bne.n	800ed56 <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ed40:	4a19      	ldr	r2, [pc, #100]	; (800eda8 <etharp_output+0x208>)
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	68b9      	ldr	r1, [r7, #8]
 800ed4c:	68f8      	ldr	r0, [r7, #12]
 800ed4e:	f7ff fe8d 	bl	800ea6c <etharp_output_to_arp_index>
 800ed52:	4603      	mov	r3, r0
 800ed54:	e018      	b.n	800ed88 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ed56:	7dfb      	ldrb	r3, [r7, #23]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	75fb      	strb	r3, [r7, #23]
 800ed5c:	7dfb      	ldrb	r3, [r7, #23]
 800ed5e:	2b09      	cmp	r3, #9
 800ed60:	d9ca      	bls.n	800ecf8 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ed62:	68ba      	ldr	r2, [r7, #8]
 800ed64:	69b9      	ldr	r1, [r7, #24]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 f824 	bl	800edb4 <etharp_query>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	e00b      	b.n	800ed88 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800ed76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	68b9      	ldr	r1, [r7, #8]
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f001 ffe1 	bl	8010d48 <ethernet_output>
 800ed86:	4603      	mov	r3, r0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3720      	adds	r7, #32
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	08014454 	.word	0x08014454
 800ed94:	080145a4 	.word	0x080145a4
 800ed98:	080144cc 	.word	0x080144cc
 800ed9c:	080145f4 	.word	0x080145f4
 800eda0:	08014594 	.word	0x08014594
 800eda4:	08014c3c 	.word	0x08014c3c
 800eda8:	20000278 	.word	0x20000278
 800edac:	20000188 	.word	0x20000188
 800edb0:	200075f0 	.word	0x200075f0

0800edb4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b08c      	sub	sp, #48	; 0x30
 800edb8:	af02      	add	r7, sp, #8
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	332a      	adds	r3, #42	; 0x2a
 800edc4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800edc6:	23ff      	movs	r3, #255	; 0xff
 800edc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	68f9      	ldr	r1, [r7, #12]
 800edd6:	4618      	mov	r0, r3
 800edd8:	f000 ffb4 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10c      	bne.n	800edfc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800edea:	2be0      	cmp	r3, #224	; 0xe0
 800edec:	d006      	beq.n	800edfc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d003      	beq.n	800edfc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d102      	bne.n	800ee02 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800edfc:	f06f 030f 	mvn.w	r3, #15
 800ee00:	e110      	b.n	800f024 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	2101      	movs	r1, #1
 800ee06:	68b8      	ldr	r0, [r7, #8]
 800ee08:	f7ff fb38 	bl	800e47c <etharp_find_entry>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ee10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	da0b      	bge.n	800ee30 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d005      	beq.n	800ee2a <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 800ee1e:	4b83      	ldr	r3, [pc, #524]	; (800f02c <etharp_query+0x278>)
 800ee20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee22:	3301      	adds	r3, #1
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	4b81      	ldr	r3, [pc, #516]	; (800f02c <etharp_query+0x278>)
 800ee28:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 800ee2a:	8a7b      	ldrh	r3, [r7, #18]
 800ee2c:	b25b      	sxtb	r3, r3
 800ee2e:	e0f9      	b.n	800f024 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ee30:	8a7b      	ldrh	r3, [r7, #18]
 800ee32:	2b7e      	cmp	r3, #126	; 0x7e
 800ee34:	d906      	bls.n	800ee44 <etharp_query+0x90>
 800ee36:	4b7e      	ldr	r3, [pc, #504]	; (800f030 <etharp_query+0x27c>)
 800ee38:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ee3c:	497d      	ldr	r1, [pc, #500]	; (800f034 <etharp_query+0x280>)
 800ee3e:	487e      	ldr	r0, [pc, #504]	; (800f038 <etharp_query+0x284>)
 800ee40:	f002 f81a 	bl	8010e78 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ee44:	8a7b      	ldrh	r3, [r7, #18]
 800ee46:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ee48:	7c7a      	ldrb	r2, [r7, #17]
 800ee4a:	497c      	ldr	r1, [pc, #496]	; (800f03c <etharp_query+0x288>)
 800ee4c:	4613      	mov	r3, r2
 800ee4e:	005b      	lsls	r3, r3, #1
 800ee50:	4413      	add	r3, r2
 800ee52:	00db      	lsls	r3, r3, #3
 800ee54:	440b      	add	r3, r1
 800ee56:	3314      	adds	r3, #20
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d115      	bne.n	800ee8a <etharp_query+0xd6>
    is_new_entry = 1;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ee62:	7c7a      	ldrb	r2, [r7, #17]
 800ee64:	4975      	ldr	r1, [pc, #468]	; (800f03c <etharp_query+0x288>)
 800ee66:	4613      	mov	r3, r2
 800ee68:	005b      	lsls	r3, r3, #1
 800ee6a:	4413      	add	r3, r2
 800ee6c:	00db      	lsls	r3, r3, #3
 800ee6e:	440b      	add	r3, r1
 800ee70:	3314      	adds	r3, #20
 800ee72:	2201      	movs	r2, #1
 800ee74:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ee76:	7c7a      	ldrb	r2, [r7, #17]
 800ee78:	4970      	ldr	r1, [pc, #448]	; (800f03c <etharp_query+0x288>)
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	005b      	lsls	r3, r3, #1
 800ee7e:	4413      	add	r3, r2
 800ee80:	00db      	lsls	r3, r3, #3
 800ee82:	440b      	add	r3, r1
 800ee84:	3308      	adds	r3, #8
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ee8a:	7c7a      	ldrb	r2, [r7, #17]
 800ee8c:	496b      	ldr	r1, [pc, #428]	; (800f03c <etharp_query+0x288>)
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	00db      	lsls	r3, r3, #3
 800ee96:	440b      	add	r3, r1
 800ee98:	3314      	adds	r3, #20
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d011      	beq.n	800eec4 <etharp_query+0x110>
 800eea0:	7c7a      	ldrb	r2, [r7, #17]
 800eea2:	4966      	ldr	r1, [pc, #408]	; (800f03c <etharp_query+0x288>)
 800eea4:	4613      	mov	r3, r2
 800eea6:	005b      	lsls	r3, r3, #1
 800eea8:	4413      	add	r3, r2
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	440b      	add	r3, r1
 800eeae:	3314      	adds	r3, #20
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d806      	bhi.n	800eec4 <etharp_query+0x110>
 800eeb6:	4b5e      	ldr	r3, [pc, #376]	; (800f030 <etharp_query+0x27c>)
 800eeb8:	f240 32cd 	movw	r2, #973	; 0x3cd
 800eebc:	4960      	ldr	r1, [pc, #384]	; (800f040 <etharp_query+0x28c>)
 800eebe:	485e      	ldr	r0, [pc, #376]	; (800f038 <etharp_query+0x284>)
 800eec0:	f001 ffda 	bl	8010e78 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800eec4:	6a3b      	ldr	r3, [r7, #32]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d102      	bne.n	800eed0 <etharp_query+0x11c>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d10c      	bne.n	800eeea <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800eed0:	68b9      	ldr	r1, [r7, #8]
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f000 f978 	bl	800f1c8 <etharp_request>
 800eed8:	4603      	mov	r3, r0
 800eeda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d102      	bne.n	800eeea <etharp_query+0x136>
      return result;
 800eee4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eee8:	e09c      	b.n	800f024 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d106      	bne.n	800eefe <etharp_query+0x14a>
 800eef0:	4b4f      	ldr	r3, [pc, #316]	; (800f030 <etharp_query+0x27c>)
 800eef2:	f240 32e1 	movw	r2, #993	; 0x3e1
 800eef6:	4953      	ldr	r1, [pc, #332]	; (800f044 <etharp_query+0x290>)
 800eef8:	484f      	ldr	r0, [pc, #316]	; (800f038 <etharp_query+0x284>)
 800eefa:	f001 ffbd 	bl	8010e78 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800eefe:	7c7a      	ldrb	r2, [r7, #17]
 800ef00:	494e      	ldr	r1, [pc, #312]	; (800f03c <etharp_query+0x288>)
 800ef02:	4613      	mov	r3, r2
 800ef04:	005b      	lsls	r3, r3, #1
 800ef06:	4413      	add	r3, r2
 800ef08:	00db      	lsls	r3, r3, #3
 800ef0a:	440b      	add	r3, r1
 800ef0c:	3314      	adds	r3, #20
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d917      	bls.n	800ef44 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ef14:	4a4c      	ldr	r2, [pc, #304]	; (800f048 <etharp_query+0x294>)
 800ef16:	7c7b      	ldrb	r3, [r7, #17]
 800ef18:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ef1a:	7c7a      	ldrb	r2, [r7, #17]
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	005b      	lsls	r3, r3, #1
 800ef20:	4413      	add	r3, r2
 800ef22:	00db      	lsls	r3, r3, #3
 800ef24:	3308      	adds	r3, #8
 800ef26:	4a45      	ldr	r2, [pc, #276]	; (800f03c <etharp_query+0x288>)
 800ef28:	4413      	add	r3, r2
 800ef2a:	3304      	adds	r3, #4
 800ef2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef30:	9200      	str	r2, [sp, #0]
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	6879      	ldr	r1, [r7, #4]
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	f001 ff06 	bl	8010d48 <ethernet_output>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef42:	e06d      	b.n	800f020 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ef44:	7c7a      	ldrb	r2, [r7, #17]
 800ef46:	493d      	ldr	r1, [pc, #244]	; (800f03c <etharp_query+0x288>)
 800ef48:	4613      	mov	r3, r2
 800ef4a:	005b      	lsls	r3, r3, #1
 800ef4c:	4413      	add	r3, r2
 800ef4e:	00db      	lsls	r3, r3, #3
 800ef50:	440b      	add	r3, r1
 800ef52:	3314      	adds	r3, #20
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d162      	bne.n	800f020 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ef62:	e01c      	b.n	800ef9e <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	895a      	ldrh	r2, [r3, #10]
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	891b      	ldrh	r3, [r3, #8]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d10a      	bne.n	800ef86 <etharp_query+0x1d2>
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d006      	beq.n	800ef86 <etharp_query+0x1d2>
 800ef78:	4b2d      	ldr	r3, [pc, #180]	; (800f030 <etharp_query+0x27c>)
 800ef7a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ef7e:	4933      	ldr	r1, [pc, #204]	; (800f04c <etharp_query+0x298>)
 800ef80:	482d      	ldr	r0, [pc, #180]	; (800f038 <etharp_query+0x284>)
 800ef82:	f001 ff79 	bl	8010e78 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	7b1b      	ldrb	r3, [r3, #12]
 800ef8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <etharp_query+0x1e4>
        copy_needed = 1;
 800ef92:	2301      	movs	r3, #1
 800ef94:	61bb      	str	r3, [r7, #24]
        break;
 800ef96:	e005      	b.n	800efa4 <etharp_query+0x1f0>
      }
      p = p->next;
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1df      	bne.n	800ef64 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d007      	beq.n	800efba <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	f44f 7120 	mov.w	r1, #640	; 0x280
 800efb0:	200e      	movs	r0, #14
 800efb2:	f7f7 fa0f 	bl	80063d4 <pbuf_clone>
 800efb6:	61f8      	str	r0, [r7, #28]
 800efb8:	e004      	b.n	800efc4 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800efbe:	69f8      	ldr	r0, [r7, #28]
 800efc0:	f7f7 f83c 	bl	800603c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d021      	beq.n	800f00e <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800efca:	7c7a      	ldrb	r2, [r7, #17]
 800efcc:	491b      	ldr	r1, [pc, #108]	; (800f03c <etharp_query+0x288>)
 800efce:	4613      	mov	r3, r2
 800efd0:	005b      	lsls	r3, r3, #1
 800efd2:	4413      	add	r3, r2
 800efd4:	00db      	lsls	r3, r3, #3
 800efd6:	440b      	add	r3, r1
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00a      	beq.n	800eff4 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800efde:	7c7a      	ldrb	r2, [r7, #17]
 800efe0:	4916      	ldr	r1, [pc, #88]	; (800f03c <etharp_query+0x288>)
 800efe2:	4613      	mov	r3, r2
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	4413      	add	r3, r2
 800efe8:	00db      	lsls	r3, r3, #3
 800efea:	440b      	add	r3, r1
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7f6 ff84 	bl	8005efc <pbuf_free>
      }
      arp_table[i].q = p;
 800eff4:	7c7a      	ldrb	r2, [r7, #17]
 800eff6:	4911      	ldr	r1, [pc, #68]	; (800f03c <etharp_query+0x288>)
 800eff8:	4613      	mov	r3, r2
 800effa:	005b      	lsls	r3, r3, #1
 800effc:	4413      	add	r3, r2
 800effe:	00db      	lsls	r3, r3, #3
 800f000:	440b      	add	r3, r1
 800f002:	69fa      	ldr	r2, [r7, #28]
 800f004:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f006:	2300      	movs	r3, #0
 800f008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f00c:	e008      	b.n	800f020 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 800f00e:	4b07      	ldr	r3, [pc, #28]	; (800f02c <etharp_query+0x278>)
 800f010:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f012:	3301      	adds	r3, #1
 800f014:	b29a      	uxth	r2, r3
 800f016:	4b05      	ldr	r3, [pc, #20]	; (800f02c <etharp_query+0x278>)
 800f018:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f01a:	23ff      	movs	r3, #255	; 0xff
 800f01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f020:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f024:	4618      	mov	r0, r3
 800f026:	3728      	adds	r7, #40	; 0x28
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	200075f0 	.word	0x200075f0
 800f030:	08014454 	.word	0x08014454
 800f034:	08014600 	.word	0x08014600
 800f038:	080144cc 	.word	0x080144cc
 800f03c:	20000188 	.word	0x20000188
 800f040:	08014610 	.word	0x08014610
 800f044:	080145f4 	.word	0x080145f4
 800f048:	20000278 	.word	0x20000278
 800f04c:	08014638 	.word	0x08014638

0800f050 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b08a      	sub	sp, #40	; 0x28
 800f054:	af02      	add	r7, sp, #8
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
 800f05c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f05e:	2300      	movs	r3, #0
 800f060:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d106      	bne.n	800f076 <etharp_raw+0x26>
 800f068:	4b40      	ldr	r3, [pc, #256]	; (800f16c <etharp_raw+0x11c>)
 800f06a:	f240 4257 	movw	r2, #1111	; 0x457
 800f06e:	4940      	ldr	r1, [pc, #256]	; (800f170 <etharp_raw+0x120>)
 800f070:	4840      	ldr	r0, [pc, #256]	; (800f174 <etharp_raw+0x124>)
 800f072:	f001 ff01 	bl	8010e78 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f076:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f07a:	211c      	movs	r1, #28
 800f07c:	200e      	movs	r0, #14
 800f07e:	f7f6 fc9d 	bl	80059bc <pbuf_alloc>
 800f082:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d108      	bne.n	800f09c <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 800f08a:	4b3b      	ldr	r3, [pc, #236]	; (800f178 <etharp_raw+0x128>)
 800f08c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f08e:	3301      	adds	r3, #1
 800f090:	b29a      	uxth	r2, r3
 800f092:	4b39      	ldr	r3, [pc, #228]	; (800f178 <etharp_raw+0x128>)
 800f094:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 800f096:	f04f 33ff 	mov.w	r3, #4294967295
 800f09a:	e063      	b.n	800f164 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	895b      	ldrh	r3, [r3, #10]
 800f0a0:	2b1b      	cmp	r3, #27
 800f0a2:	d806      	bhi.n	800f0b2 <etharp_raw+0x62>
 800f0a4:	4b31      	ldr	r3, [pc, #196]	; (800f16c <etharp_raw+0x11c>)
 800f0a6:	f240 4262 	movw	r2, #1122	; 0x462
 800f0aa:	4934      	ldr	r1, [pc, #208]	; (800f17c <etharp_raw+0x12c>)
 800f0ac:	4831      	ldr	r0, [pc, #196]	; (800f174 <etharp_raw+0x124>)
 800f0ae:	f001 fee3 	bl	8010e78 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f0b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7f5 fabe 	bl	800463c <lwip_htons>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f0ce:	2b06      	cmp	r3, #6
 800f0d0:	d006      	beq.n	800f0e0 <etharp_raw+0x90>
 800f0d2:	4b26      	ldr	r3, [pc, #152]	; (800f16c <etharp_raw+0x11c>)
 800f0d4:	f240 4269 	movw	r2, #1129	; 0x469
 800f0d8:	4929      	ldr	r1, [pc, #164]	; (800f180 <etharp_raw+0x130>)
 800f0da:	4826      	ldr	r0, [pc, #152]	; (800f174 <etharp_raw+0x124>)
 800f0dc:	f001 fecc 	bl	8010e78 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	3308      	adds	r3, #8
 800f0e4:	2206      	movs	r2, #6
 800f0e6:	6839      	ldr	r1, [r7, #0]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f001 feaf 	bl	8010e4c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	3312      	adds	r3, #18
 800f0f2:	2206      	movs	r2, #6
 800f0f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f001 fea8 	bl	8010e4c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	330e      	adds	r3, #14
 800f100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f102:	6812      	ldr	r2, [r2, #0]
 800f104:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	3318      	adds	r3, #24
 800f10a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f10c:	6812      	ldr	r2, [r2, #0]
 800f10e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	2200      	movs	r2, #0
 800f114:	701a      	strb	r2, [r3, #0]
 800f116:	2200      	movs	r2, #0
 800f118:	f042 0201 	orr.w	r2, r2, #1
 800f11c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	2200      	movs	r2, #0
 800f122:	f042 0208 	orr.w	r2, r2, #8
 800f126:	709a      	strb	r2, [r3, #2]
 800f128:	2200      	movs	r2, #0
 800f12a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	2206      	movs	r2, #6
 800f130:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2204      	movs	r2, #4
 800f136:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f138:	f640 0306 	movw	r3, #2054	; 0x806
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	68ba      	ldr	r2, [r7, #8]
 800f142:	69b9      	ldr	r1, [r7, #24]
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f001 fdff 	bl	8010d48 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 800f14a:	4b0b      	ldr	r3, [pc, #44]	; (800f178 <etharp_raw+0x128>)
 800f14c:	8b1b      	ldrh	r3, [r3, #24]
 800f14e:	3301      	adds	r3, #1
 800f150:	b29a      	uxth	r2, r3
 800f152:	4b09      	ldr	r3, [pc, #36]	; (800f178 <etharp_raw+0x128>)
 800f154:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 800f156:	69b8      	ldr	r0, [r7, #24]
 800f158:	f7f6 fed0 	bl	8005efc <pbuf_free>
  p = NULL;
 800f15c:	2300      	movs	r3, #0
 800f15e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f160:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3720      	adds	r7, #32
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	08014454 	.word	0x08014454
 800f170:	080145a4 	.word	0x080145a4
 800f174:	080144cc 	.word	0x080144cc
 800f178:	200075f0 	.word	0x200075f0
 800f17c:	08014654 	.word	0x08014654
 800f180:	08014688 	.word	0x08014688

0800f184 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b088      	sub	sp, #32
 800f188:	af04      	add	r7, sp, #16
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	9203      	str	r2, [sp, #12]
 800f1a4:	68ba      	ldr	r2, [r7, #8]
 800f1a6:	9202      	str	r2, [sp, #8]
 800f1a8:	4a06      	ldr	r2, [pc, #24]	; (800f1c4 <etharp_request_dst+0x40>)
 800f1aa:	9201      	str	r2, [sp, #4]
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f7ff ff4c 	bl	800f050 <etharp_raw>
 800f1b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	08014c44 	.word	0x08014c44

0800f1c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f1d2:	4a05      	ldr	r2, [pc, #20]	; (800f1e8 <etharp_request+0x20>)
 800f1d4:	6839      	ldr	r1, [r7, #0]
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7ff ffd4 	bl	800f184 <etharp_request_dst>
 800f1dc:	4603      	mov	r3, r0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3708      	adds	r7, #8
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	08014c3c 	.word	0x08014c3c

0800f1ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b08e      	sub	sp, #56	; 0x38
 800f1f0:	af04      	add	r7, sp, #16
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 800f1f6:	4ba8      	ldr	r3, [pc, #672]	; (800f498 <icmp_input+0x2ac>)
 800f1f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	4ba5      	ldr	r3, [pc, #660]	; (800f498 <icmp_input+0x2ac>)
 800f202:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f206:	4ba5      	ldr	r3, [pc, #660]	; (800f49c <icmp_input+0x2b0>)
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	f003 030f 	and.w	r3, r3, #15
 800f214:	b2db      	uxtb	r3, r3
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f21c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f21e:	2b13      	cmp	r3, #19
 800f220:	f240 8112 	bls.w	800f448 <icmp_input+0x25c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	895b      	ldrh	r3, [r3, #10]
 800f228:	2b03      	cmp	r3, #3
 800f22a:	f240 810f 	bls.w	800f44c <icmp_input+0x260>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	781b      	ldrb	r3, [r3, #0]
 800f234:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f238:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 80fc 	beq.w	800f43a <icmp_input+0x24e>
 800f242:	2b08      	cmp	r3, #8
 800f244:	f040 80e8 	bne.w	800f418 <icmp_input+0x22c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f248:	4b95      	ldr	r3, [pc, #596]	; (800f4a0 <icmp_input+0x2b4>)
 800f24a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f24c:	4b93      	ldr	r3, [pc, #588]	; (800f49c <icmp_input+0x2b0>)
 800f24e:	695b      	ldr	r3, [r3, #20]
 800f250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f254:	2be0      	cmp	r3, #224	; 0xe0
 800f256:	f000 8108 	beq.w	800f46a <icmp_input+0x27e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f25a:	4b90      	ldr	r3, [pc, #576]	; (800f49c <icmp_input+0x2b0>)
 800f25c:	695b      	ldr	r3, [r3, #20]
 800f25e:	4a8f      	ldr	r2, [pc, #572]	; (800f49c <icmp_input+0x2b0>)
 800f260:	6812      	ldr	r2, [r2, #0]
 800f262:	4611      	mov	r1, r2
 800f264:	4618      	mov	r0, r3
 800f266:	f000 fd6d 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f040 80fe 	bne.w	800f46e <icmp_input+0x282>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	891b      	ldrh	r3, [r3, #8]
 800f276:	2b07      	cmp	r3, #7
 800f278:	f240 80ea 	bls.w	800f450 <icmp_input+0x264>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7f5 fb37 	bl	80048f0 <inet_chksum_pbuf>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d00b      	beq.n	800f2a0 <icmp_input+0xb4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7f6 fe37 	bl	8005efc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 800f28e:	4b82      	ldr	r3, [pc, #520]	; (800f498 <icmp_input+0x2ac>)
 800f290:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f294:	3301      	adds	r3, #1
 800f296:	b29a      	uxth	r2, r3
 800f298:	4b7f      	ldr	r3, [pc, #508]	; (800f498 <icmp_input+0x2ac>)
 800f29a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800f29e:	e0f7      	b.n	800f490 <icmp_input+0x2a4>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f2a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2a2:	330e      	adds	r3, #14
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7f6 fd92 	bl	8005dd0 <pbuf_add_header>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d04b      	beq.n	800f34a <icmp_input+0x15e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	891a      	ldrh	r2, [r3, #8]
 800f2b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2b8:	4413      	add	r3, r2
 800f2ba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	891b      	ldrh	r3, [r3, #8]
 800f2c0:	8b7a      	ldrh	r2, [r7, #26]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	f0c0 80d5 	bcc.w	800f472 <icmp_input+0x286>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f2c8:	8b7b      	ldrh	r3, [r7, #26]
 800f2ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	200e      	movs	r0, #14
 800f2d2:	f7f6 fb73 	bl	80059bc <pbuf_alloc>
 800f2d6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f000 80cb 	beq.w	800f476 <icmp_input+0x28a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	895b      	ldrh	r3, [r3, #10]
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2e8:	3308      	adds	r3, #8
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d203      	bcs.n	800f2f6 <icmp_input+0x10a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f2ee:	6978      	ldr	r0, [r7, #20]
 800f2f0:	f7f6 fe04 	bl	8005efc <pbuf_free>
          goto icmperr;
 800f2f4:	e0c0      	b.n	800f478 <icmp_input+0x28c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f2fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2fe:	4618      	mov	r0, r3
 800f300:	f001 fda4 	bl	8010e4c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f306:	4619      	mov	r1, r3
 800f308:	6978      	ldr	r0, [r7, #20]
 800f30a:	f7f6 fd71 	bl	8005df0 <pbuf_remove_header>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d009      	beq.n	800f328 <icmp_input+0x13c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f314:	4b63      	ldr	r3, [pc, #396]	; (800f4a4 <icmp_input+0x2b8>)
 800f316:	22b6      	movs	r2, #182	; 0xb6
 800f318:	4963      	ldr	r1, [pc, #396]	; (800f4a8 <icmp_input+0x2bc>)
 800f31a:	4864      	ldr	r0, [pc, #400]	; (800f4ac <icmp_input+0x2c0>)
 800f31c:	f001 fdac 	bl	8010e78 <iprintf>
          pbuf_free(r);
 800f320:	6978      	ldr	r0, [r7, #20]
 800f322:	f7f6 fdeb 	bl	8005efc <pbuf_free>
          goto icmperr;
 800f326:	e0a7      	b.n	800f478 <icmp_input+0x28c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f328:	6879      	ldr	r1, [r7, #4]
 800f32a:	6978      	ldr	r0, [r7, #20]
 800f32c:	f7f6 ff0e 	bl	800614c <pbuf_copy>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d003      	beq.n	800f33e <icmp_input+0x152>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f336:	6978      	ldr	r0, [r7, #20]
 800f338:	f7f6 fde0 	bl	8005efc <pbuf_free>
          goto icmperr;
 800f33c:	e09c      	b.n	800f478 <icmp_input+0x28c>
        }
        /* free the original p */
        pbuf_free(p);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f7f6 fddc 	bl	8005efc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	607b      	str	r3, [r7, #4]
 800f348:	e00f      	b.n	800f36a <icmp_input+0x17e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f34a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f34c:	330e      	adds	r3, #14
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7f6 fd4d 	bl	8005df0 <pbuf_remove_header>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d006      	beq.n	800f36a <icmp_input+0x17e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f35c:	4b51      	ldr	r3, [pc, #324]	; (800f4a4 <icmp_input+0x2b8>)
 800f35e:	22c7      	movs	r2, #199	; 0xc7
 800f360:	4953      	ldr	r1, [pc, #332]	; (800f4b0 <icmp_input+0x2c4>)
 800f362:	4852      	ldr	r0, [pc, #328]	; (800f4ac <icmp_input+0x2c0>)
 800f364:	f001 fd88 	bl	8010e78 <iprintf>
          goto icmperr;
 800f368:	e086      	b.n	800f478 <icmp_input+0x28c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f372:	4619      	mov	r1, r3
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7f6 fd2b 	bl	8005dd0 <pbuf_add_header>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d15e      	bne.n	800f43e <icmp_input+0x252>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f38e:	4b43      	ldr	r3, [pc, #268]	; (800f49c <icmp_input+0x2b0>)
 800f390:	691a      	ldr	r2, [r3, #16]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	2200      	movs	r2, #0
 800f39a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	885b      	ldrh	r3, [r3, #2]
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d907      	bls.n	800f3ba <icmp_input+0x1ce>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	885b      	ldrh	r3, [r3, #2]
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	3309      	adds	r3, #9
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	805a      	strh	r2, [r3, #2]
 800f3b8:	e006      	b.n	800f3c8 <icmp_input+0x1dc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	885b      	ldrh	r3, [r3, #2]
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	3308      	adds	r3, #8
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	22ff      	movs	r2, #255	; 0xff
 800f3cc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	729a      	strb	r2, [r3, #10]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 800f3d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f3da:	4619      	mov	r1, r3
 800f3dc:	68f8      	ldr	r0, [r7, #12]
 800f3de:	f7f5 fa75 	bl	80048cc <inet_chksum>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 800f3ea:	4b2b      	ldr	r3, [pc, #172]	; (800f498 <icmp_input+0x2ac>)
 800f3ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	4b28      	ldr	r3, [pc, #160]	; (800f498 <icmp_input+0x2ac>)
 800f3f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	9302      	str	r3, [sp, #8]
 800f3fe:	2301      	movs	r3, #1
 800f400:	9301      	str	r3, [sp, #4]
 800f402:	2300      	movs	r3, #0
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	23ff      	movs	r3, #255	; 0xff
 800f408:	2200      	movs	r2, #0
 800f40a:	69f9      	ldr	r1, [r7, #28]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fb41 	bl	800fa94 <ip4_output_if>
 800f412:	4603      	mov	r3, r0
 800f414:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f416:	e012      	b.n	800f43e <icmp_input+0x252>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 800f418:	4b1f      	ldr	r3, [pc, #124]	; (800f498 <icmp_input+0x2ac>)
 800f41a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800f41e:	3301      	adds	r3, #1
 800f420:	b29a      	uxth	r2, r3
 800f422:	4b1d      	ldr	r3, [pc, #116]	; (800f498 <icmp_input+0x2ac>)
 800f424:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 800f428:	4b1b      	ldr	r3, [pc, #108]	; (800f498 <icmp_input+0x2ac>)
 800f42a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f42e:	3301      	adds	r3, #1
 800f430:	b29a      	uxth	r2, r3
 800f432:	4b19      	ldr	r3, [pc, #100]	; (800f498 <icmp_input+0x2ac>)
 800f434:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800f438:	e002      	b.n	800f440 <icmp_input+0x254>
      break;
 800f43a:	bf00      	nop
 800f43c:	e000      	b.n	800f440 <icmp_input+0x254>
      break;
 800f43e:	bf00      	nop
  }
  pbuf_free(p);
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f7f6 fd5b 	bl	8005efc <pbuf_free>
  return;
 800f446:	e023      	b.n	800f490 <icmp_input+0x2a4>
    goto lenerr;
 800f448:	bf00      	nop
 800f44a:	e002      	b.n	800f452 <icmp_input+0x266>
    goto lenerr;
 800f44c:	bf00      	nop
 800f44e:	e000      	b.n	800f452 <icmp_input+0x266>
        goto lenerr;
 800f450:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7f6 fd52 	bl	8005efc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 800f458:	4b0f      	ldr	r3, [pc, #60]	; (800f498 <icmp_input+0x2ac>)
 800f45a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f45e:	3301      	adds	r3, #1
 800f460:	b29a      	uxth	r2, r3
 800f462:	4b0d      	ldr	r3, [pc, #52]	; (800f498 <icmp_input+0x2ac>)
 800f464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f468:	e012      	b.n	800f490 <icmp_input+0x2a4>
        goto icmperr;
 800f46a:	bf00      	nop
 800f46c:	e004      	b.n	800f478 <icmp_input+0x28c>
        goto icmperr;
 800f46e:	bf00      	nop
 800f470:	e002      	b.n	800f478 <icmp_input+0x28c>
          goto icmperr;
 800f472:	bf00      	nop
 800f474:	e000      	b.n	800f478 <icmp_input+0x28c>
          goto icmperr;
 800f476:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f7f6 fd3f 	bl	8005efc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 800f47e:	4b06      	ldr	r3, [pc, #24]	; (800f498 <icmp_input+0x2ac>)
 800f480:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800f484:	3301      	adds	r3, #1
 800f486:	b29a      	uxth	r2, r3
 800f488:	4b03      	ldr	r3, [pc, #12]	; (800f498 <icmp_input+0x2ac>)
 800f48a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f48e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f490:	3728      	adds	r7, #40	; 0x28
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	200075f0 	.word	0x200075f0
 800f49c:	200040dc 	.word	0x200040dc
 800f4a0:	200040f0 	.word	0x200040f0
 800f4a4:	080146cc 	.word	0x080146cc
 800f4a8:	08014704 	.word	0x08014704
 800f4ac:	0801473c 	.word	0x0801473c
 800f4b0:	08014764 	.word	0x08014764

0800f4b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	460b      	mov	r3, r1
 800f4be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f4c0:	78fb      	ldrb	r3, [r7, #3]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	2103      	movs	r1, #3
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 f814 	bl	800f4f4 <icmp_send_response>
}
 800f4cc:	bf00      	nop
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	460b      	mov	r3, r1
 800f4de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f4e0:	78fb      	ldrb	r3, [r7, #3]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	210b      	movs	r1, #11
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 f804 	bl	800f4f4 <icmp_send_response>
}
 800f4ec:	bf00      	nop
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b08c      	sub	sp, #48	; 0x30
 800f4f8:	af04      	add	r7, sp, #16
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	70fb      	strb	r3, [r7, #3]
 800f500:	4613      	mov	r3, r2
 800f502:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f504:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f508:	2124      	movs	r1, #36	; 0x24
 800f50a:	2022      	movs	r0, #34	; 0x22
 800f50c:	f7f6 fa56 	bl	80059bc <pbuf_alloc>
 800f510:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d05e      	beq.n	800f5d6 <icmp_send_response+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	895b      	ldrh	r3, [r3, #10]
 800f51c:	2b23      	cmp	r3, #35	; 0x23
 800f51e:	d806      	bhi.n	800f52e <icmp_send_response+0x3a>
 800f520:	4b2f      	ldr	r3, [pc, #188]	; (800f5e0 <icmp_send_response+0xec>)
 800f522:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f526:	492f      	ldr	r1, [pc, #188]	; (800f5e4 <icmp_send_response+0xf0>)
 800f528:	482f      	ldr	r0, [pc, #188]	; (800f5e8 <icmp_send_response+0xf4>)
 800f52a:	f001 fca5 	bl	8010e78 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	78fa      	ldrb	r2, [r7, #3]
 800f53e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	78ba      	ldrb	r2, [r7, #2]
 800f544:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2200      	movs	r2, #0
 800f54a:	711a      	strb	r2, [r3, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	2200      	movs	r2, #0
 800f554:	719a      	strb	r2, [r3, #6]
 800f556:	2200      	movs	r2, #0
 800f558:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	f103 0008 	add.w	r0, r3, #8
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	221c      	movs	r2, #28
 800f568:	4619      	mov	r1, r3
 800f56a:	f001 fc6f 	bl	8010e4c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f574:	f107 030c 	add.w	r3, r7, #12
 800f578:	4618      	mov	r0, r3
 800f57a:	f000 f839 	bl	800f5f0 <ip4_route>
 800f57e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d023      	beq.n	800f5ce <icmp_send_response+0xda>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	2200      	movs	r2, #0
 800f58a:	709a      	strb	r2, [r3, #2]
 800f58c:	2200      	movs	r2, #0
 800f58e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	895b      	ldrh	r3, [r3, #10]
 800f594:	4619      	mov	r1, r3
 800f596:	6978      	ldr	r0, [r7, #20]
 800f598:	f7f5 f998 	bl	80048cc <inet_chksum>
 800f59c:	4603      	mov	r3, r0
 800f59e:	461a      	mov	r2, r3
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 800f5a4:	4b11      	ldr	r3, [pc, #68]	; (800f5ec <icmp_send_response+0xf8>)
 800f5a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	b29a      	uxth	r2, r3
 800f5ae:	4b0f      	ldr	r3, [pc, #60]	; (800f5ec <icmp_send_response+0xf8>)
 800f5b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f5b4:	f107 020c 	add.w	r2, r7, #12
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	9302      	str	r3, [sp, #8]
 800f5bc:	2301      	movs	r3, #1
 800f5be:	9301      	str	r3, [sp, #4]
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	23ff      	movs	r3, #255	; 0xff
 800f5c6:	2100      	movs	r1, #0
 800f5c8:	69f8      	ldr	r0, [r7, #28]
 800f5ca:	f000 fa63 	bl	800fa94 <ip4_output_if>
  }
  pbuf_free(q);
 800f5ce:	69f8      	ldr	r0, [r7, #28]
 800f5d0:	f7f6 fc94 	bl	8005efc <pbuf_free>
 800f5d4:	e000      	b.n	800f5d8 <icmp_send_response+0xe4>
    return;
 800f5d6:	bf00      	nop
}
 800f5d8:	3720      	adds	r7, #32
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	080146cc 	.word	0x080146cc
 800f5e4:	08014798 	.word	0x08014798
 800f5e8:	0801473c 	.word	0x0801473c
 800f5ec:	200075f0 	.word	0x200075f0

0800f5f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b085      	sub	sp, #20
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f5f8:	4b37      	ldr	r3, [pc, #220]	; (800f6d8 <ip4_route+0xe8>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	60fb      	str	r3, [r7, #12]
 800f5fe:	e036      	b.n	800f66e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f606:	f003 0301 	and.w	r3, r3, #1
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d02b      	beq.n	800f668 <ip4_route+0x78>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f616:	089b      	lsrs	r3, r3, #2
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d022      	beq.n	800f668 <ip4_route+0x78>
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3304      	adds	r3, #4
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d01d      	beq.n	800f668 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	3304      	adds	r3, #4
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	405a      	eors	r2, r3
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	3308      	adds	r3, #8
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4013      	ands	r3, r2
 800f640:	2b00      	cmp	r3, #0
 800f642:	d101      	bne.n	800f648 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	e040      	b.n	800f6ca <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f64e:	f003 0302 	and.w	r3, r3, #2
 800f652:	2b00      	cmp	r3, #0
 800f654:	d108      	bne.n	800f668 <ip4_route+0x78>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	330c      	adds	r3, #12
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	429a      	cmp	r2, r3
 800f662:	d101      	bne.n	800f668 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	e030      	b.n	800f6ca <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	60fb      	str	r3, [r7, #12]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1c5      	bne.n	800f600 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f674:	4b19      	ldr	r3, [pc, #100]	; (800f6dc <ip4_route+0xec>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d01a      	beq.n	800f6b2 <ip4_route+0xc2>
 800f67c:	4b17      	ldr	r3, [pc, #92]	; (800f6dc <ip4_route+0xec>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f684:	f003 0301 	and.w	r3, r3, #1
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d012      	beq.n	800f6b2 <ip4_route+0xc2>
 800f68c:	4b13      	ldr	r3, [pc, #76]	; (800f6dc <ip4_route+0xec>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f694:	f003 0304 	and.w	r3, r3, #4
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00a      	beq.n	800f6b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f69c:	4b0f      	ldr	r3, [pc, #60]	; (800f6dc <ip4_route+0xec>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	3304      	adds	r3, #4
 800f6a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d004      	beq.n	800f6b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	2b7f      	cmp	r3, #127	; 0x7f
 800f6b0:	d109      	bne.n	800f6c6 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800f6b2:	4b0b      	ldr	r3, [pc, #44]	; (800f6e0 <ip4_route+0xf0>)
 800f6b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	4b08      	ldr	r3, [pc, #32]	; (800f6e0 <ip4_route+0xf0>)
 800f6be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e001      	b.n	800f6ca <ip4_route+0xda>
  }

  return netif_default;
 800f6c6:	4b05      	ldr	r3, [pc, #20]	; (800f6dc <ip4_route+0xec>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3714      	adds	r7, #20
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	200075e4 	.word	0x200075e4
 800f6dc:	200075e8 	.word	0x200075e8
 800f6e0:	200075f0 	.word	0x200075f0

0800f6e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f6f2:	f003 0301 	and.w	r3, r3, #1
 800f6f6:	b2db      	uxtb	r3, r3
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d016      	beq.n	800f72a <ip4_input_accept+0x46>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	3304      	adds	r3, #4
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d011      	beq.n	800f72a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f706:	4b0b      	ldr	r3, [pc, #44]	; (800f734 <ip4_input_accept+0x50>)
 800f708:	695a      	ldr	r2, [r3, #20]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	3304      	adds	r3, #4
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	429a      	cmp	r2, r3
 800f712:	d008      	beq.n	800f726 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f714:	4b07      	ldr	r3, [pc, #28]	; (800f734 <ip4_input_accept+0x50>)
 800f716:	695b      	ldr	r3, [r3, #20]
 800f718:	6879      	ldr	r1, [r7, #4]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 fb12 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800f720:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f726:	2301      	movs	r3, #1
 800f728:	e000      	b.n	800f72c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	200040dc 	.word	0x200040dc

0800f738 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b088      	sub	sp, #32
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800f742:	2301      	movs	r3, #1
 800f744:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 800f746:	4b91      	ldr	r3, [pc, #580]	; (800f98c <ip4_input+0x254>)
 800f748:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f74c:	3301      	adds	r3, #1
 800f74e:	b29a      	uxth	r2, r3
 800f750:	4b8e      	ldr	r3, [pc, #568]	; (800f98c <ip4_input+0x254>)
 800f752:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	091b      	lsrs	r3, r3, #4
 800f762:	b2db      	uxtb	r3, r3
 800f764:	2b04      	cmp	r3, #4
 800f766:	d014      	beq.n	800f792 <ip4_input+0x5a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7f6 fbc7 	bl	8005efc <pbuf_free>
    IP_STATS_INC(ip.err);
 800f76e:	4b87      	ldr	r3, [pc, #540]	; (800f98c <ip4_input+0x254>)
 800f770:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f774:	3301      	adds	r3, #1
 800f776:	b29a      	uxth	r2, r3
 800f778:	4b84      	ldr	r3, [pc, #528]	; (800f98c <ip4_input+0x254>)
 800f77a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 800f77e:	4b83      	ldr	r3, [pc, #524]	; (800f98c <ip4_input+0x254>)
 800f780:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800f784:	3301      	adds	r3, #1
 800f786:	b29a      	uxth	r2, r3
 800f788:	4b80      	ldr	r3, [pc, #512]	; (800f98c <ip4_input+0x254>)
 800f78a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f78e:	2300      	movs	r3, #0
 800f790:	e177      	b.n	800fa82 <ip4_input+0x34a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	f003 030f 	and.w	r3, r3, #15
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	009b      	lsls	r3, r3, #2
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	885b      	ldrh	r3, [r3, #2]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7f4 ff47 	bl	800463c <lwip_htons>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	891b      	ldrh	r3, [r3, #8]
 800f7b6:	8a3a      	ldrh	r2, [r7, #16]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d204      	bcs.n	800f7c6 <ip4_input+0x8e>
    pbuf_realloc(p, iphdr_len);
 800f7bc:	8a3b      	ldrh	r3, [r7, #16]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7f6 fa15 	bl	8005bf0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	895b      	ldrh	r3, [r3, #10]
 800f7ca:	8a7a      	ldrh	r2, [r7, #18]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d807      	bhi.n	800f7e0 <ip4_input+0xa8>
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	891b      	ldrh	r3, [r3, #8]
 800f7d4:	8a3a      	ldrh	r2, [r7, #16]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d802      	bhi.n	800f7e0 <ip4_input+0xa8>
 800f7da:	8a7b      	ldrh	r3, [r7, #18]
 800f7dc:	2b13      	cmp	r3, #19
 800f7de:	d814      	bhi.n	800f80a <ip4_input+0xd2>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7f6 fb8b 	bl	8005efc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800f7e6:	4b69      	ldr	r3, [pc, #420]	; (800f98c <ip4_input+0x254>)
 800f7e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	4b66      	ldr	r3, [pc, #408]	; (800f98c <ip4_input+0x254>)
 800f7f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 800f7f6:	4b65      	ldr	r3, [pc, #404]	; (800f98c <ip4_input+0x254>)
 800f7f8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	4b62      	ldr	r3, [pc, #392]	; (800f98c <ip4_input+0x254>)
 800f802:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f806:	2300      	movs	r3, #0
 800f808:	e13b      	b.n	800fa82 <ip4_input+0x34a>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800f80a:	8a7b      	ldrh	r3, [r7, #18]
 800f80c:	4619      	mov	r1, r3
 800f80e:	69f8      	ldr	r0, [r7, #28]
 800f810:	f7f5 f85c 	bl	80048cc <inet_chksum>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d014      	beq.n	800f844 <ip4_input+0x10c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f7f6 fb6e 	bl	8005efc <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 800f820:	4b5a      	ldr	r3, [pc, #360]	; (800f98c <ip4_input+0x254>)
 800f822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f826:	3301      	adds	r3, #1
 800f828:	b29a      	uxth	r2, r3
 800f82a:	4b58      	ldr	r3, [pc, #352]	; (800f98c <ip4_input+0x254>)
 800f82c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
 800f830:	4b56      	ldr	r3, [pc, #344]	; (800f98c <ip4_input+0x254>)
 800f832:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800f836:	3301      	adds	r3, #1
 800f838:	b29a      	uxth	r2, r3
 800f83a:	4b54      	ldr	r3, [pc, #336]	; (800f98c <ip4_input+0x254>)
 800f83c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 800f840:	2300      	movs	r3, #0
 800f842:	e11e      	b.n	800fa82 <ip4_input+0x34a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	4a51      	ldr	r2, [pc, #324]	; (800f990 <ip4_input+0x258>)
 800f84a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	68db      	ldr	r3, [r3, #12]
 800f850:	4a4f      	ldr	r2, [pc, #316]	; (800f990 <ip4_input+0x258>)
 800f852:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f854:	4b4e      	ldr	r3, [pc, #312]	; (800f990 <ip4_input+0x258>)
 800f856:	695b      	ldr	r3, [r3, #20]
 800f858:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f85c:	2be0      	cmp	r3, #224	; 0xe0
 800f85e:	d112      	bne.n	800f886 <ip4_input+0x14e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f866:	f003 0301 	and.w	r3, r3, #1
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d007      	beq.n	800f880 <ip4_input+0x148>
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	3304      	adds	r3, #4
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d002      	beq.n	800f880 <ip4_input+0x148>
      netif = inp;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	61bb      	str	r3, [r7, #24]
 800f87e:	e02a      	b.n	800f8d6 <ip4_input+0x19e>
    } else {
      netif = NULL;
 800f880:	2300      	movs	r3, #0
 800f882:	61bb      	str	r3, [r7, #24]
 800f884:	e027      	b.n	800f8d6 <ip4_input+0x19e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f886:	6838      	ldr	r0, [r7, #0]
 800f888:	f7ff ff2c 	bl	800f6e4 <ip4_input_accept>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d002      	beq.n	800f898 <ip4_input+0x160>
      netif = inp;
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	61bb      	str	r3, [r7, #24]
 800f896:	e01e      	b.n	800f8d6 <ip4_input+0x19e>
    } else {
      netif = NULL;
 800f898:	2300      	movs	r3, #0
 800f89a:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f89c:	4b3c      	ldr	r3, [pc, #240]	; (800f990 <ip4_input+0x258>)
 800f89e:	695b      	ldr	r3, [r3, #20]
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b7f      	cmp	r3, #127	; 0x7f
 800f8a4:	d017      	beq.n	800f8d6 <ip4_input+0x19e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f8a6:	4b3b      	ldr	r3, [pc, #236]	; (800f994 <ip4_input+0x25c>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	61bb      	str	r3, [r7, #24]
 800f8ac:	e00e      	b.n	800f8cc <ip4_input+0x194>
          if (netif == inp) {
 800f8ae:	69ba      	ldr	r2, [r7, #24]
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d006      	beq.n	800f8c4 <ip4_input+0x18c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f8b6:	69b8      	ldr	r0, [r7, #24]
 800f8b8:	f7ff ff14 	bl	800f6e4 <ip4_input_accept>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d108      	bne.n	800f8d4 <ip4_input+0x19c>
 800f8c2:	e000      	b.n	800f8c6 <ip4_input+0x18e>
            continue;
 800f8c4:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	61bb      	str	r3, [r7, #24]
 800f8cc:	69bb      	ldr	r3, [r7, #24]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1ed      	bne.n	800f8ae <ip4_input+0x176>
 800f8d2:	e000      	b.n	800f8d6 <ip4_input+0x19e>
            break;
 800f8d4:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d111      	bne.n	800f900 <ip4_input+0x1c8>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800f8dc:	69fb      	ldr	r3, [r7, #28]
 800f8de:	7a5b      	ldrb	r3, [r3, #9]
 800f8e0:	2b11      	cmp	r3, #17
 800f8e2:	d10d      	bne.n	800f900 <ip4_input+0x1c8>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800f8e4:	8a7b      	ldrh	r3, [r7, #18]
 800f8e6:	69fa      	ldr	r2, [r7, #28]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	885b      	ldrh	r3, [r3, #2]
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800f8f6:	d103      	bne.n	800f900 <ip4_input+0x1c8>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d01f      	beq.n	800f946 <ip4_input+0x20e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800f906:	4b22      	ldr	r3, [pc, #136]	; (800f990 <ip4_input+0x258>)
 800f908:	691b      	ldr	r3, [r3, #16]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d01b      	beq.n	800f946 <ip4_input+0x20e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f90e:	4b20      	ldr	r3, [pc, #128]	; (800f990 <ip4_input+0x258>)
 800f910:	691b      	ldr	r3, [r3, #16]
 800f912:	6839      	ldr	r1, [r7, #0]
 800f914:	4618      	mov	r0, r3
 800f916:	f000 fa15 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d105      	bne.n	800f92c <ip4_input+0x1f4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f920:	4b1b      	ldr	r3, [pc, #108]	; (800f990 <ip4_input+0x258>)
 800f922:	691b      	ldr	r3, [r3, #16]
 800f924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f928:	2be0      	cmp	r3, #224	; 0xe0
 800f92a:	d10c      	bne.n	800f946 <ip4_input+0x20e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f7f6 fae5 	bl	8005efc <pbuf_free>
      IP_STATS_INC(ip.drop);
 800f932:	4b16      	ldr	r3, [pc, #88]	; (800f98c <ip4_input+0x254>)
 800f934:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800f938:	3301      	adds	r3, #1
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	4b13      	ldr	r3, [pc, #76]	; (800f98c <ip4_input+0x254>)
 800f93e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f942:	2300      	movs	r3, #0
 800f944:	e09d      	b.n	800fa82 <ip4_input+0x34a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d10c      	bne.n	800f966 <ip4_input+0x22e>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 800f94c:	4b0f      	ldr	r3, [pc, #60]	; (800f98c <ip4_input+0x254>)
 800f94e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800f952:	3301      	adds	r3, #1
 800f954:	b29a      	uxth	r2, r3
 800f956:	4b0d      	ldr	r3, [pc, #52]	; (800f98c <ip4_input+0x254>)
 800f958:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7f6 facd 	bl	8005efc <pbuf_free>
    return ERR_OK;
 800f962:	2300      	movs	r3, #0
 800f964:	e08d      	b.n	800fa82 <ip4_input+0x34a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	88db      	ldrh	r3, [r3, #6]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	461a      	mov	r2, r3
 800f96e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f972:	4013      	ands	r3, r2
 800f974:	2b00      	cmp	r3, #0
 800f976:	d012      	beq.n	800f99e <ip4_input+0x266>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 fdc3 	bl	8010504 <ip4_reass>
 800f97e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d108      	bne.n	800f998 <ip4_input+0x260>
      return ERR_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	e07b      	b.n	800fa82 <ip4_input+0x34a>
 800f98a:	bf00      	nop
 800f98c:	200075f0 	.word	0x200075f0
 800f990:	200040dc 	.word	0x200040dc
 800f994:	200075e4 	.word	0x200075e4
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f99e:	4a3b      	ldr	r2, [pc, #236]	; (800fa8c <ip4_input+0x354>)
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f9a4:	4a39      	ldr	r2, [pc, #228]	; (800fa8c <ip4_input+0x354>)
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f9aa:	4a38      	ldr	r2, [pc, #224]	; (800fa8c <ip4_input+0x354>)
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	f003 030f 	and.w	r3, r3, #15
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	4b32      	ldr	r3, [pc, #200]	; (800fa8c <ip4_input+0x354>)
 800f9c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f9c4:	8a7b      	ldrh	r3, [r7, #18]
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f7f6 fa11 	bl	8005df0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	7a5b      	ldrb	r3, [r3, #9]
 800f9d2:	2b11      	cmp	r3, #17
 800f9d4:	d006      	beq.n	800f9e4 <ip4_input+0x2ac>
 800f9d6:	2b11      	cmp	r3, #17
 800f9d8:	dc13      	bgt.n	800fa02 <ip4_input+0x2ca>
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d00c      	beq.n	800f9f8 <ip4_input+0x2c0>
 800f9de:	2b06      	cmp	r3, #6
 800f9e0:	d005      	beq.n	800f9ee <ip4_input+0x2b6>
 800f9e2:	e00e      	b.n	800fa02 <ip4_input+0x2ca>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f9e4:	6839      	ldr	r1, [r7, #0]
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7fc f980 	bl	800bcec <udp_input>
        break;
 800f9ec:	e036      	b.n	800fa5c <ip4_input+0x324>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f9ee:	6839      	ldr	r1, [r7, #0]
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7f8 f8ed 	bl	8007bd0 <tcp_input>
        break;
 800f9f6:	e031      	b.n	800fa5c <ip4_input+0x324>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f9f8:	6839      	ldr	r1, [r7, #0]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7ff fbf6 	bl	800f1ec <icmp_input>
        break;
 800fa00:	e02c      	b.n	800fa5c <ip4_input+0x324>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fa02:	4b22      	ldr	r3, [pc, #136]	; (800fa8c <ip4_input+0x354>)
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	69b9      	ldr	r1, [r7, #24]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 f99b 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d10f      	bne.n	800fa34 <ip4_input+0x2fc>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fa14:	4b1d      	ldr	r3, [pc, #116]	; (800fa8c <ip4_input+0x354>)
 800fa16:	695b      	ldr	r3, [r3, #20]
 800fa18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fa1c:	2be0      	cmp	r3, #224	; 0xe0
 800fa1e:	d009      	beq.n	800fa34 <ip4_input+0x2fc>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fa20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa24:	4619      	mov	r1, r3
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f7f6 fa55 	bl	8005ed6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fa2c:	2102      	movs	r1, #2
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f7ff fd40 	bl	800f4b4 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 800fa34:	4b16      	ldr	r3, [pc, #88]	; (800fa90 <ip4_input+0x358>)
 800fa36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	4b14      	ldr	r3, [pc, #80]	; (800fa90 <ip4_input+0x358>)
 800fa40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 800fa44:	4b12      	ldr	r3, [pc, #72]	; (800fa90 <ip4_input+0x358>)
 800fa46:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	4b10      	ldr	r3, [pc, #64]	; (800fa90 <ip4_input+0x358>)
 800fa50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f7f6 fa51 	bl	8005efc <pbuf_free>
        break;
 800fa5a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fa5c:	4b0b      	ldr	r3, [pc, #44]	; (800fa8c <ip4_input+0x354>)
 800fa5e:	2200      	movs	r2, #0
 800fa60:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fa62:	4b0a      	ldr	r3, [pc, #40]	; (800fa8c <ip4_input+0x354>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fa68:	4b08      	ldr	r3, [pc, #32]	; (800fa8c <ip4_input+0x354>)
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fa6e:	4b07      	ldr	r3, [pc, #28]	; (800fa8c <ip4_input+0x354>)
 800fa70:	2200      	movs	r2, #0
 800fa72:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fa74:	4b05      	ldr	r3, [pc, #20]	; (800fa8c <ip4_input+0x354>)
 800fa76:	2200      	movs	r2, #0
 800fa78:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fa7a:	4b04      	ldr	r3, [pc, #16]	; (800fa8c <ip4_input+0x354>)
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3720      	adds	r7, #32
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
 800fa8a:	bf00      	nop
 800fa8c:	200040dc 	.word	0x200040dc
 800fa90:	200075f0 	.word	0x200075f0

0800fa94 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08a      	sub	sp, #40	; 0x28
 800fa98:	af04      	add	r7, sp, #16
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
 800faa0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d009      	beq.n	800fac0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d003      	beq.n	800faba <ip4_output_if+0x26>
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d102      	bne.n	800fac0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800faba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fabc:	3304      	adds	r3, #4
 800fabe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fac0:	78fa      	ldrb	r2, [r7, #3]
 800fac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac4:	9302      	str	r3, [sp, #8]
 800fac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800faca:	9301      	str	r3, [sp, #4]
 800facc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	4613      	mov	r3, r2
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	6979      	ldr	r1, [r7, #20]
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	f000 f805 	bl	800fae8 <ip4_output_if_src>
 800fade:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3718      	adds	r7, #24
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b088      	sub	sp, #32
 800faec:	af00      	add	r7, sp, #0
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	607a      	str	r2, [r7, #4]
 800faf4:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	7b9b      	ldrb	r3, [r3, #14]
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d006      	beq.n	800fb10 <ip4_output_if_src+0x28>
 800fb02:	4b89      	ldr	r3, [pc, #548]	; (800fd28 <ip4_output_if_src+0x240>)
 800fb04:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fb08:	4988      	ldr	r1, [pc, #544]	; (800fd2c <ip4_output_if_src+0x244>)
 800fb0a:	4889      	ldr	r0, [pc, #548]	; (800fd30 <ip4_output_if_src+0x248>)
 800fb0c:	f001 f9b4 	bl	8010e78 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	f000 80cc 	beq.w	800fcb0 <ip4_output_if_src+0x1c8>
    u16_t ip_hlen = IP_HLEN;
 800fb18:	2314      	movs	r3, #20
 800fb1a:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fb1c:	2114      	movs	r1, #20
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	f7f6 f956 	bl	8005dd0 <pbuf_add_header>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00a      	beq.n	800fb40 <ip4_output_if_src+0x58>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800fb2a:	4b82      	ldr	r3, [pc, #520]	; (800fd34 <ip4_output_if_src+0x24c>)
 800fb2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb30:	3301      	adds	r3, #1
 800fb32:	b29a      	uxth	r2, r3
 800fb34:	4b7f      	ldr	r3, [pc, #508]	; (800fd34 <ip4_output_if_src+0x24c>)
 800fb36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fb3a:	f06f 0301 	mvn.w	r3, #1
 800fb3e:	e0ef      	b.n	800fd20 <ip4_output_if_src+0x238>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	895b      	ldrh	r3, [r3, #10]
 800fb4a:	2b13      	cmp	r3, #19
 800fb4c:	d806      	bhi.n	800fb5c <ip4_output_if_src+0x74>
 800fb4e:	4b76      	ldr	r3, [pc, #472]	; (800fd28 <ip4_output_if_src+0x240>)
 800fb50:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fb54:	4978      	ldr	r1, [pc, #480]	; (800fd38 <ip4_output_if_src+0x250>)
 800fb56:	4876      	ldr	r0, [pc, #472]	; (800fd30 <ip4_output_if_src+0x248>)
 800fb58:	f001 f98e 	bl	8010e78 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	78fa      	ldrb	r2, [r7, #3]
 800fb60:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fb68:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 800fb6a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fb6e:	78fb      	ldrb	r3, [r7, #3]
 800fb70:	021b      	lsls	r3, r3, #8
 800fb72:	4313      	orrs	r3, r2
 800fb74:	021b      	lsls	r3, r3, #8
 800fb76:	b21a      	sxth	r2, r3
 800fb78:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800fb7c:	78fb      	ldrb	r3, [r7, #3]
 800fb7e:	021b      	lsls	r3, r3, #8
 800fb80:	430b      	orrs	r3, r1
 800fb82:	121b      	asrs	r3, r3, #8
 800fb84:	b21b      	sxth	r3, r3
 800fb86:	b2db      	uxtb	r3, r3
 800fb88:	b21b      	sxth	r3, r3
 800fb8a:	4313      	orrs	r3, r2
 800fb8c:	b21b      	sxth	r3, r3
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	461a      	mov	r2, r3
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	4413      	add	r3, r2
 800fb96:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	691b      	ldr	r3, [r3, #16]
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	69fa      	ldr	r2, [r7, #28]
 800fba8:	4413      	add	r3, r2
 800fbaa:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	0c1b      	lsrs	r3, r3, #16
 800fbb2:	69fa      	ldr	r2, [r7, #28]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fbb8:	8afb      	ldrh	r3, [r7, #22]
 800fbba:	089b      	lsrs	r3, r3, #2
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	b2db      	uxtb	r3, r3
 800fbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbc4:	b2da      	uxtb	r2, r3
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fbd0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 800fbd2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	021b      	lsls	r3, r3, #8
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	021b      	lsls	r3, r3, #8
 800fbe0:	b21a      	sxth	r2, r3
 800fbe2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	021b      	lsls	r3, r3, #8
 800fbec:	430b      	orrs	r3, r1
 800fbee:	121b      	asrs	r3, r3, #8
 800fbf0:	b21b      	sxth	r3, r3
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	b21b      	sxth	r3, r3
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	b21b      	sxth	r3, r3
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	4413      	add	r3, r2
 800fc02:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	891b      	ldrh	r3, [r3, #8]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7f4 fd17 	bl	800463c <lwip_htons>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	461a      	mov	r2, r3
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800fc16:	69bb      	ldr	r3, [r7, #24]
 800fc18:	885b      	ldrh	r3, [r3, #2]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	4413      	add	r3, r2
 800fc22:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	2200      	movs	r2, #0
 800fc28:	719a      	strb	r2, [r3, #6]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fc2e:	4b43      	ldr	r3, [pc, #268]	; (800fd3c <ip4_output_if_src+0x254>)
 800fc30:	881b      	ldrh	r3, [r3, #0]
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7f4 fd02 	bl	800463c <lwip_htons>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	889b      	ldrh	r3, [r3, #4]
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	461a      	mov	r2, r3
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fc4e:	4b3b      	ldr	r3, [pc, #236]	; (800fd3c <ip4_output_if_src+0x254>)
 800fc50:	881b      	ldrh	r3, [r3, #0]
 800fc52:	3301      	adds	r3, #1
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	4b39      	ldr	r3, [pc, #228]	; (800fd3c <ip4_output_if_src+0x254>)
 800fc58:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d104      	bne.n	800fc6a <ip4_output_if_src+0x182>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fc60:	4b37      	ldr	r3, [pc, #220]	; (800fd40 <ip4_output_if_src+0x258>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	69bb      	ldr	r3, [r7, #24]
 800fc66:	60da      	str	r2, [r3, #12]
 800fc68:	e003      	b.n	800fc72 <ip4_output_if_src+0x18a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	69bb      	ldr	r3, [r7, #24]
 800fc70:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	69fa      	ldr	r2, [r7, #28]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	68db      	ldr	r3, [r3, #12]
 800fc82:	0c1b      	lsrs	r3, r3, #16
 800fc84:	69fa      	ldr	r2, [r7, #28]
 800fc86:	4413      	add	r3, r2
 800fc88:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	0c1a      	lsrs	r2, r3, #16
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	4413      	add	r3, r2
 800fc94:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	0c1b      	lsrs	r3, r3, #16
 800fc9a:	69fa      	ldr	r2, [r7, #28]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	43db      	mvns	r3, r3
 800fca4:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	815a      	strh	r2, [r3, #10]
 800fcae:	e017      	b.n	800fce0 <ip4_output_if_src+0x1f8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	895b      	ldrh	r3, [r3, #10]
 800fcb4:	2b13      	cmp	r3, #19
 800fcb6:	d80a      	bhi.n	800fcce <ip4_output_if_src+0x1e6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 800fcb8:	4b1e      	ldr	r3, [pc, #120]	; (800fd34 <ip4_output_if_src+0x24c>)
 800fcba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	b29a      	uxth	r2, r3
 800fcc2:	4b1c      	ldr	r3, [pc, #112]	; (800fd34 <ip4_output_if_src+0x24c>)
 800fcc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fcc8:	f06f 0301 	mvn.w	r3, #1
 800fccc:	e028      	b.n	800fd20 <ip4_output_if_src+0x238>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	691b      	ldr	r3, [r3, #16]
 800fcd8:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 800fcda:	f107 0310 	add.w	r3, r7, #16
 800fcde:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800fce0:	4b14      	ldr	r3, [pc, #80]	; (800fd34 <ip4_output_if_src+0x24c>)
 800fce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fce6:	3301      	adds	r3, #1
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	4b12      	ldr	r3, [pc, #72]	; (800fd34 <ip4_output_if_src+0x24c>)
 800fcec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00c      	beq.n	800fd12 <ip4_output_if_src+0x22a>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	891a      	ldrh	r2, [r3, #8]
 800fcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d906      	bls.n	800fd12 <ip4_output_if_src+0x22a>
    return ip4_frag(p, netif, dest);
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f000 fe15 	bl	8010938 <ip4_frag>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	e006      	b.n	800fd20 <ip4_output_if_src+0x238>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd14:	695b      	ldr	r3, [r3, #20]
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	68f9      	ldr	r1, [r7, #12]
 800fd1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd1c:	4798      	blx	r3
 800fd1e:	4603      	mov	r3, r0
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3720      	adds	r7, #32
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	080147c4 	.word	0x080147c4
 800fd2c:	080147f8 	.word	0x080147f8
 800fd30:	08014804 	.word	0x08014804
 800fd34:	200075f0 	.word	0x200075f0
 800fd38:	0801482c 	.word	0x0801482c
 800fd3c:	2000027a 	.word	0x2000027a
 800fd40:	08014c34 	.word	0x08014c34

0800fd44 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd58:	d002      	beq.n	800fd60 <ip4_addr_isbroadcast_u32+0x1c>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d101      	bne.n	800fd64 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fd60:	2301      	movs	r3, #1
 800fd62:	e02a      	b.n	800fdba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fd6a:	f003 0302 	and.w	r3, r3, #2
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	e021      	b.n	800fdba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	3304      	adds	r3, #4
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d101      	bne.n	800fd86 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	e019      	b.n	800fdba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	405a      	eors	r2, r3
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	3308      	adds	r3, #8
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4013      	ands	r3, r2
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10d      	bne.n	800fdb8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	3308      	adds	r3, #8
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	43da      	mvns	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	3308      	adds	r3, #8
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d101      	bne.n	800fdb8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e000      	b.n	800fdba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fdb8:	2300      	movs	r3, #0
  }
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3714      	adds	r7, #20
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr
	...

0800fdc8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b082      	sub	sp, #8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800fdd0:	2210      	movs	r2, #16
 800fdd2:	4904      	ldr	r1, [pc, #16]	; (800fde4 <ip4addr_ntoa+0x1c>)
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f807 	bl	800fde8 <ip4addr_ntoa_r>
 800fdda:	4603      	mov	r3, r0
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3708      	adds	r7, #8
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	2000027c 	.word	0x2000027c

0800fde8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b08d      	sub	sp, #52	; 0x34
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800fe02:	f107 0318 	add.w	r3, r7, #24
 800fe06:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800fe08:	2300      	movs	r3, #0
 800fe0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe0e:	e059      	b.n	800fec4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800fe16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe18:	781a      	ldrb	r2, [r3, #0]
 800fe1a:	4b33      	ldr	r3, [pc, #204]	; (800fee8 <ip4addr_ntoa_r+0x100>)
 800fe1c:	fba3 1302 	umull	r1, r3, r3, r2
 800fe20:	08d9      	lsrs	r1, r3, #3
 800fe22:	460b      	mov	r3, r1
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	440b      	add	r3, r1
 800fe28:	005b      	lsls	r3, r3, #1
 800fe2a:	1ad3      	subs	r3, r2, r3
 800fe2c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	4a2d      	ldr	r2, [pc, #180]	; (800fee8 <ip4addr_ntoa_r+0x100>)
 800fe34:	fba2 2303 	umull	r2, r3, r2, r3
 800fe38:	08db      	lsrs	r3, r3, #3
 800fe3a:	b2da      	uxtb	r2, r3
 800fe3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800fe40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe44:	1c5a      	adds	r2, r3, #1
 800fe46:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	7ffb      	ldrb	r3, [r7, #31]
 800fe4e:	3330      	adds	r3, #48	; 0x30
 800fe50:	b2da      	uxtb	r2, r3
 800fe52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe56:	440b      	add	r3, r1
 800fe58:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800fe5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1d8      	bne.n	800fe16 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800fe64:	e012      	b.n	800fe8c <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	1c5a      	adds	r2, r3, #1
 800fe6a:	623a      	str	r2, [r7, #32]
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	dc01      	bgt.n	800fe76 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	e031      	b.n	800feda <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 800fe76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800fe7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7c:	1c59      	adds	r1, r3, #1
 800fe7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800fe80:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fe84:	440a      	add	r2, r1
 800fe86:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800fe8a:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800fe8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe90:	1e5a      	subs	r2, r3, #1
 800fe92:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d1e5      	bne.n	800fe66 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800fe9a:	6a3b      	ldr	r3, [r7, #32]
 800fe9c:	1c5a      	adds	r2, r3, #1
 800fe9e:	623a      	str	r2, [r7, #32]
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	dc01      	bgt.n	800feaa <ip4addr_ntoa_r+0xc2>
      return NULL;
 800fea6:	2300      	movs	r3, #0
 800fea8:	e017      	b.n	800feda <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 800feaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feac:	1c5a      	adds	r2, r3, #1
 800feae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800feb0:	222e      	movs	r2, #46	; 0x2e
 800feb2:	701a      	strb	r2, [r3, #0]
    ap++;
 800feb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb6:	3301      	adds	r3, #1
 800feb8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800feba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800febe:	3301      	adds	r3, #1
 800fec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fec8:	2b03      	cmp	r3, #3
 800feca:	d9a1      	bls.n	800fe10 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800fecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fece:	3b01      	subs	r3, #1
 800fed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed4:	2200      	movs	r2, #0
 800fed6:	701a      	strb	r2, [r3, #0]
  return buf;
 800fed8:	68bb      	ldr	r3, [r7, #8]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3734      	adds	r7, #52	; 0x34
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	cccccccd 	.word	0xcccccccd

0800feec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fef2:	2300      	movs	r3, #0
 800fef4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fef6:	4b12      	ldr	r3, [pc, #72]	; (800ff40 <ip_reass_tmr+0x54>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fefc:	e018      	b.n	800ff30 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	7fdb      	ldrb	r3, [r3, #31]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00b      	beq.n	800ff1e <ip_reass_tmr+0x32>
      r->timer--;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	7fdb      	ldrb	r3, [r3, #31]
 800ff0a:	3b01      	subs	r3, #1
 800ff0c:	b2da      	uxtb	r2, r3
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	60fb      	str	r3, [r7, #12]
 800ff1c:	e008      	b.n	800ff30 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ff28:	68b9      	ldr	r1, [r7, #8]
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f80a 	bl	800ff44 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d1e3      	bne.n	800fefe <ip_reass_tmr+0x12>
    }
  }
}
 800ff36:	bf00      	nop
 800ff38:	bf00      	nop
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	2000028c 	.word	0x2000028c

0800ff44 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b088      	sub	sp, #32
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ff52:	683a      	ldr	r2, [r7, #0]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d105      	bne.n	800ff66 <ip_reass_free_complete_datagram+0x22>
 800ff5a:	4b45      	ldr	r3, [pc, #276]	; (8010070 <ip_reass_free_complete_datagram+0x12c>)
 800ff5c:	22ab      	movs	r2, #171	; 0xab
 800ff5e:	4945      	ldr	r1, [pc, #276]	; (8010074 <ip_reass_free_complete_datagram+0x130>)
 800ff60:	4845      	ldr	r0, [pc, #276]	; (8010078 <ip_reass_free_complete_datagram+0x134>)
 800ff62:	f000 ff89 	bl	8010e78 <iprintf>
  if (prev != NULL) {
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00a      	beq.n	800ff82 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d005      	beq.n	800ff82 <ip_reass_free_complete_datagram+0x3e>
 800ff76:	4b3e      	ldr	r3, [pc, #248]	; (8010070 <ip_reass_free_complete_datagram+0x12c>)
 800ff78:	22ad      	movs	r2, #173	; 0xad
 800ff7a:	4940      	ldr	r1, [pc, #256]	; (801007c <ip_reass_free_complete_datagram+0x138>)
 800ff7c:	483e      	ldr	r0, [pc, #248]	; (8010078 <ip_reass_free_complete_datagram+0x134>)
 800ff7e:	f000 ff7b 	bl	8010e78 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	889b      	ldrh	r3, [r3, #4]
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d12a      	bne.n	800ffea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	6858      	ldr	r0, [r3, #4]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	3308      	adds	r3, #8
 800ffaa:	2214      	movs	r2, #20
 800ffac:	4619      	mov	r1, r3
 800ffae:	f000 ff4d 	bl	8010e4c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ffb2:	2101      	movs	r1, #1
 800ffb4:	69b8      	ldr	r0, [r7, #24]
 800ffb6:	f7ff fa8d 	bl	800f4d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ffba:	69b8      	ldr	r0, [r7, #24]
 800ffbc:	f7f6 f826 	bl	800600c <pbuf_clen>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ffc4:	8bfa      	ldrh	r2, [r7, #30]
 800ffc6:	8a7b      	ldrh	r3, [r7, #18]
 800ffc8:	4413      	add	r3, r2
 800ffca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffce:	db05      	blt.n	800ffdc <ip_reass_free_complete_datagram+0x98>
 800ffd0:	4b27      	ldr	r3, [pc, #156]	; (8010070 <ip_reass_free_complete_datagram+0x12c>)
 800ffd2:	22bc      	movs	r2, #188	; 0xbc
 800ffd4:	492a      	ldr	r1, [pc, #168]	; (8010080 <ip_reass_free_complete_datagram+0x13c>)
 800ffd6:	4828      	ldr	r0, [pc, #160]	; (8010078 <ip_reass_free_complete_datagram+0x134>)
 800ffd8:	f000 ff4e 	bl	8010e78 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ffdc:	8bfa      	ldrh	r2, [r7, #30]
 800ffde:	8a7b      	ldrh	r3, [r7, #18]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ffe4:	69b8      	ldr	r0, [r7, #24]
 800ffe6:	f7f5 ff89 	bl	8005efc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fff0:	e01f      	b.n	8010032 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7f6 f802 	bl	800600c <pbuf_clen>
 8010008:	4603      	mov	r3, r0
 801000a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801000c:	8bfa      	ldrh	r2, [r7, #30]
 801000e:	8a7b      	ldrh	r3, [r7, #18]
 8010010:	4413      	add	r3, r2
 8010012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010016:	db05      	blt.n	8010024 <ip_reass_free_complete_datagram+0xe0>
 8010018:	4b15      	ldr	r3, [pc, #84]	; (8010070 <ip_reass_free_complete_datagram+0x12c>)
 801001a:	22cc      	movs	r2, #204	; 0xcc
 801001c:	4918      	ldr	r1, [pc, #96]	; (8010080 <ip_reass_free_complete_datagram+0x13c>)
 801001e:	4816      	ldr	r0, [pc, #88]	; (8010078 <ip_reass_free_complete_datagram+0x134>)
 8010020:	f000 ff2a 	bl	8010e78 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010024:	8bfa      	ldrh	r2, [r7, #30]
 8010026:	8a7b      	ldrh	r3, [r7, #18]
 8010028:	4413      	add	r3, r2
 801002a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f7f5 ff65 	bl	8005efc <pbuf_free>
  while (p != NULL) {
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1dc      	bne.n	800fff2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010038:	6839      	ldr	r1, [r7, #0]
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f8ca 	bl	80101d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010040:	4b10      	ldr	r3, [pc, #64]	; (8010084 <ip_reass_free_complete_datagram+0x140>)
 8010042:	881b      	ldrh	r3, [r3, #0]
 8010044:	8bfa      	ldrh	r2, [r7, #30]
 8010046:	429a      	cmp	r2, r3
 8010048:	d905      	bls.n	8010056 <ip_reass_free_complete_datagram+0x112>
 801004a:	4b09      	ldr	r3, [pc, #36]	; (8010070 <ip_reass_free_complete_datagram+0x12c>)
 801004c:	22d2      	movs	r2, #210	; 0xd2
 801004e:	490e      	ldr	r1, [pc, #56]	; (8010088 <ip_reass_free_complete_datagram+0x144>)
 8010050:	4809      	ldr	r0, [pc, #36]	; (8010078 <ip_reass_free_complete_datagram+0x134>)
 8010052:	f000 ff11 	bl	8010e78 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010056:	4b0b      	ldr	r3, [pc, #44]	; (8010084 <ip_reass_free_complete_datagram+0x140>)
 8010058:	881a      	ldrh	r2, [r3, #0]
 801005a:	8bfb      	ldrh	r3, [r7, #30]
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	b29a      	uxth	r2, r3
 8010060:	4b08      	ldr	r3, [pc, #32]	; (8010084 <ip_reass_free_complete_datagram+0x140>)
 8010062:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010064:	8bfb      	ldrh	r3, [r7, #30]
}
 8010066:	4618      	mov	r0, r3
 8010068:	3720      	adds	r7, #32
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	0801485c 	.word	0x0801485c
 8010074:	08014898 	.word	0x08014898
 8010078:	080148a4 	.word	0x080148a4
 801007c:	080148cc 	.word	0x080148cc
 8010080:	080148e0 	.word	0x080148e0
 8010084:	20000290 	.word	0x20000290
 8010088:	08014900 	.word	0x08014900

0801008c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b08a      	sub	sp, #40	; 0x28
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010096:	2300      	movs	r3, #0
 8010098:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801009a:	2300      	movs	r3, #0
 801009c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801009e:	2300      	movs	r3, #0
 80100a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80100a2:	2300      	movs	r3, #0
 80100a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80100a6:	2300      	movs	r3, #0
 80100a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80100aa:	4b28      	ldr	r3, [pc, #160]	; (801014c <ip_reass_remove_oldest_datagram+0xc0>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80100b0:	e030      	b.n	8010114 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b4:	695a      	ldr	r2, [r3, #20]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d10c      	bne.n	80100d8 <ip_reass_remove_oldest_datagram+0x4c>
 80100be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c0:	699a      	ldr	r2, [r3, #24]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d106      	bne.n	80100d8 <ip_reass_remove_oldest_datagram+0x4c>
 80100ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100cc:	899a      	ldrh	r2, [r3, #12]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	889b      	ldrh	r3, [r3, #4]
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d014      	beq.n	8010102 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	3301      	adds	r3, #1
 80100dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80100de:	6a3b      	ldr	r3, [r7, #32]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d104      	bne.n	80100ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	61bb      	str	r3, [r7, #24]
 80100ec:	e009      	b.n	8010102 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80100ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f0:	7fda      	ldrb	r2, [r3, #31]
 80100f2:	6a3b      	ldr	r3, [r7, #32]
 80100f4:	7fdb      	ldrb	r3, [r3, #31]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d803      	bhi.n	8010102 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80100fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801010a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801010e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1cb      	bne.n	80100b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801011a:	6a3b      	ldr	r3, [r7, #32]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d008      	beq.n	8010132 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010120:	69b9      	ldr	r1, [r7, #24]
 8010122:	6a38      	ldr	r0, [r7, #32]
 8010124:	f7ff ff0e 	bl	800ff44 <ip_reass_free_complete_datagram>
 8010128:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	4413      	add	r3, r2
 8010130:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010132:	697a      	ldr	r2, [r7, #20]
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	429a      	cmp	r2, r3
 8010138:	da02      	bge.n	8010140 <ip_reass_remove_oldest_datagram+0xb4>
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	2b01      	cmp	r3, #1
 801013e:	dcac      	bgt.n	801009a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010140:	697b      	ldr	r3, [r7, #20]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3728      	adds	r7, #40	; 0x28
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	2000028c 	.word	0x2000028c

08010150 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801015a:	2004      	movs	r0, #4
 801015c:	f7f5 f8b6 	bl	80052cc <memp_malloc>
 8010160:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d116      	bne.n	8010196 <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f7ff ff8e 	bl	801008c <ip_reass_remove_oldest_datagram>
 8010170:	4602      	mov	r2, r0
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	4293      	cmp	r3, r2
 8010176:	dc03      	bgt.n	8010180 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010178:	2004      	movs	r0, #4
 801017a:	f7f5 f8a7 	bl	80052cc <memp_malloc>
 801017e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d107      	bne.n	8010196 <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 8010186:	4b11      	ldr	r3, [pc, #68]	; (80101cc <ip_reass_enqueue_new_datagram+0x7c>)
 8010188:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801018a:	3301      	adds	r3, #1
 801018c:	b29a      	uxth	r2, r3
 801018e:	4b0f      	ldr	r3, [pc, #60]	; (80101cc <ip_reass_enqueue_new_datagram+0x7c>)
 8010190:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010192:	2300      	movs	r3, #0
 8010194:	e016      	b.n	80101c4 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010196:	2220      	movs	r2, #32
 8010198:	2100      	movs	r1, #0
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f000 fe64 	bl	8010e68 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	220f      	movs	r2, #15
 80101a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80101a6:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <ip_reass_enqueue_new_datagram+0x80>)
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80101ae:	4a08      	ldr	r2, [pc, #32]	; (80101d0 <ip_reass_enqueue_new_datagram+0x80>)
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	3308      	adds	r3, #8
 80101b8:	2214      	movs	r2, #20
 80101ba:	6879      	ldr	r1, [r7, #4]
 80101bc:	4618      	mov	r0, r3
 80101be:	f000 fe45 	bl	8010e4c <memcpy>
  return ipr;
 80101c2:	68fb      	ldr	r3, [r7, #12]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	200075f0 	.word	0x200075f0
 80101d0:	2000028c 	.word	0x2000028c

080101d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80101de:	4b10      	ldr	r3, [pc, #64]	; (8010220 <ip_reass_dequeue_datagram+0x4c>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d104      	bne.n	80101f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4a0c      	ldr	r2, [pc, #48]	; (8010220 <ip_reass_dequeue_datagram+0x4c>)
 80101ee:	6013      	str	r3, [r2, #0]
 80101f0:	e00d      	b.n	801020e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d106      	bne.n	8010206 <ip_reass_dequeue_datagram+0x32>
 80101f8:	4b0a      	ldr	r3, [pc, #40]	; (8010224 <ip_reass_dequeue_datagram+0x50>)
 80101fa:	f240 1245 	movw	r2, #325	; 0x145
 80101fe:	490a      	ldr	r1, [pc, #40]	; (8010228 <ip_reass_dequeue_datagram+0x54>)
 8010200:	480a      	ldr	r0, [pc, #40]	; (801022c <ip_reass_dequeue_datagram+0x58>)
 8010202:	f000 fe39 	bl	8010e78 <iprintf>
    prev->next = ipr->next;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801020e:	6879      	ldr	r1, [r7, #4]
 8010210:	2004      	movs	r0, #4
 8010212:	f7f5 f89d 	bl	8005350 <memp_free>
}
 8010216:	bf00      	nop
 8010218:	3708      	adds	r7, #8
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	2000028c 	.word	0x2000028c
 8010224:	0801485c 	.word	0x0801485c
 8010228:	08014924 	.word	0x08014924
 801022c:	080148a4 	.word	0x080148a4

08010230 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b08c      	sub	sp, #48	; 0x30
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801023c:	2300      	movs	r3, #0
 801023e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010240:	2301      	movs	r3, #1
 8010242:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	885b      	ldrh	r3, [r3, #2]
 801024e:	b29b      	uxth	r3, r3
 8010250:	4618      	mov	r0, r3
 8010252:	f7f4 f9f3 	bl	800463c <lwip_htons>
 8010256:	4603      	mov	r3, r0
 8010258:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	f003 030f 	and.w	r3, r3, #15
 8010262:	b2db      	uxtb	r3, r3
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010268:	7e7b      	ldrb	r3, [r7, #25]
 801026a:	b29b      	uxth	r3, r3
 801026c:	8b7a      	ldrh	r2, [r7, #26]
 801026e:	429a      	cmp	r2, r3
 8010270:	d202      	bcs.n	8010278 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010272:	f04f 33ff 	mov.w	r3, #4294967295
 8010276:	e135      	b.n	80104e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010278:	7e7b      	ldrb	r3, [r7, #25]
 801027a:	b29b      	uxth	r3, r3
 801027c:	8b7a      	ldrh	r2, [r7, #26]
 801027e:	1ad3      	subs	r3, r2, r3
 8010280:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	88db      	ldrh	r3, [r3, #6]
 8010286:	b29b      	uxth	r3, r3
 8010288:	4618      	mov	r0, r3
 801028a:	f7f4 f9d7 	bl	800463c <lwip_htons>
 801028e:	4603      	mov	r3, r0
 8010290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010294:	b29b      	uxth	r3, r3
 8010296:	00db      	lsls	r3, r3, #3
 8010298:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	685b      	ldr	r3, [r3, #4]
 801029e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80102a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a2:	2200      	movs	r2, #0
 80102a4:	701a      	strb	r2, [r3, #0]
 80102a6:	2200      	movs	r2, #0
 80102a8:	705a      	strb	r2, [r3, #1]
 80102aa:	2200      	movs	r2, #0
 80102ac:	709a      	strb	r2, [r3, #2]
 80102ae:	2200      	movs	r2, #0
 80102b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80102b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b4:	8afa      	ldrh	r2, [r7, #22]
 80102b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80102b8:	8afa      	ldrh	r2, [r7, #22]
 80102ba:	8b7b      	ldrh	r3, [r7, #26]
 80102bc:	4413      	add	r3, r2
 80102be:	b29a      	uxth	r2, r3
 80102c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80102c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c6:	88db      	ldrh	r3, [r3, #6]
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	8afa      	ldrh	r2, [r7, #22]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d902      	bls.n	80102d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80102d0:	f04f 33ff 	mov.w	r3, #4294967295
 80102d4:	e106      	b.n	80104e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	627b      	str	r3, [r7, #36]	; 0x24
 80102dc:	e068      	b.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80102de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80102e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e6:	889b      	ldrh	r3, [r3, #4]
 80102e8:	b29a      	uxth	r2, r3
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	889b      	ldrh	r3, [r3, #4]
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d235      	bcs.n	8010360 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80102fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d020      	beq.n	8010342 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010302:	889b      	ldrh	r3, [r3, #4]
 8010304:	b29a      	uxth	r2, r3
 8010306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010308:	88db      	ldrh	r3, [r3, #6]
 801030a:	b29b      	uxth	r3, r3
 801030c:	429a      	cmp	r2, r3
 801030e:	d307      	bcc.n	8010320 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010312:	88db      	ldrh	r3, [r3, #6]
 8010314:	b29a      	uxth	r2, r3
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	889b      	ldrh	r3, [r3, #4]
 801031a:	b29b      	uxth	r3, r3
 801031c:	429a      	cmp	r2, r3
 801031e:	d902      	bls.n	8010326 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010320:	f04f 33ff 	mov.w	r3, #4294967295
 8010324:	e0de      	b.n	80104e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010328:	68ba      	ldr	r2, [r7, #8]
 801032a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801032c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032e:	88db      	ldrh	r3, [r3, #6]
 8010330:	b29a      	uxth	r2, r3
 8010332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010334:	889b      	ldrh	r3, [r3, #4]
 8010336:	b29b      	uxth	r3, r3
 8010338:	429a      	cmp	r2, r3
 801033a:	d03d      	beq.n	80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801033c:	2300      	movs	r3, #0
 801033e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010340:	e03a      	b.n	80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010344:	88db      	ldrh	r3, [r3, #6]
 8010346:	b29a      	uxth	r2, r3
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	889b      	ldrh	r3, [r3, #4]
 801034c:	b29b      	uxth	r3, r3
 801034e:	429a      	cmp	r2, r3
 8010350:	d902      	bls.n	8010358 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010352:	f04f 33ff 	mov.w	r3, #4294967295
 8010356:	e0c5      	b.n	80104e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	68ba      	ldr	r2, [r7, #8]
 801035c:	605a      	str	r2, [r3, #4]
      break;
 801035e:	e02b      	b.n	80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010362:	889b      	ldrh	r3, [r3, #4]
 8010364:	b29a      	uxth	r2, r3
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	889b      	ldrh	r3, [r3, #4]
 801036a:	b29b      	uxth	r3, r3
 801036c:	429a      	cmp	r2, r3
 801036e:	d102      	bne.n	8010376 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010370:	f04f 33ff 	mov.w	r3, #4294967295
 8010374:	e0b6      	b.n	80104e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	889b      	ldrh	r3, [r3, #4]
 801037a:	b29a      	uxth	r2, r3
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	88db      	ldrh	r3, [r3, #6]
 8010380:	b29b      	uxth	r3, r3
 8010382:	429a      	cmp	r2, r3
 8010384:	d202      	bcs.n	801038c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010386:	f04f 33ff 	mov.w	r3, #4294967295
 801038a:	e0ab      	b.n	80104e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038e:	2b00      	cmp	r3, #0
 8010390:	d009      	beq.n	80103a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010394:	88db      	ldrh	r3, [r3, #6]
 8010396:	b29a      	uxth	r2, r3
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	889b      	ldrh	r3, [r3, #4]
 801039c:	b29b      	uxth	r3, r3
 801039e:	429a      	cmp	r2, r3
 80103a0:	d001      	beq.n	80103a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80103a2:	2300      	movs	r3, #0
 80103a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80103b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d193      	bne.n	80102de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80103b6:	e000      	b.n	80103ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80103b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d12d      	bne.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80103c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d01c      	beq.n	8010400 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80103c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c8:	88db      	ldrh	r3, [r3, #6]
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ce:	889b      	ldrh	r3, [r3, #4]
 80103d0:	b29b      	uxth	r3, r3
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d906      	bls.n	80103e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80103d6:	4b45      	ldr	r3, [pc, #276]	; (80104ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80103d8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80103dc:	4944      	ldr	r1, [pc, #272]	; (80104f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80103de:	4845      	ldr	r0, [pc, #276]	; (80104f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80103e0:	f000 fd4a 	bl	8010e78 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80103e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e6:	68ba      	ldr	r2, [r7, #8]
 80103e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80103ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ec:	88db      	ldrh	r3, [r3, #6]
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f2:	889b      	ldrh	r3, [r3, #4]
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d010      	beq.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80103fa:	2300      	movs	r3, #0
 80103fc:	623b      	str	r3, [r7, #32]
 80103fe:	e00d      	b.n	801041c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d006      	beq.n	8010416 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010408:	4b38      	ldr	r3, [pc, #224]	; (80104ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801040a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801040e:	493a      	ldr	r1, [pc, #232]	; (80104f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010410:	4838      	ldr	r0, [pc, #224]	; (80104f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010412:	f000 fd31 	bl	8010e78 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	68ba      	ldr	r2, [r7, #8]
 801041a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d105      	bne.n	801042e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	7f9b      	ldrb	r3, [r3, #30]
 8010426:	f003 0301 	and.w	r3, r3, #1
 801042a:	2b00      	cmp	r3, #0
 801042c:	d059      	beq.n	80104e2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801042e:	6a3b      	ldr	r3, [r7, #32]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d04f      	beq.n	80104d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d006      	beq.n	801044a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	889b      	ldrh	r3, [r3, #4]
 8010444:	b29b      	uxth	r3, r3
 8010446:	2b00      	cmp	r3, #0
 8010448:	d002      	beq.n	8010450 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801044a:	2300      	movs	r3, #0
 801044c:	623b      	str	r3, [r7, #32]
 801044e:	e041      	b.n	80104d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801045a:	e012      	b.n	8010482 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801045c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010464:	88db      	ldrh	r3, [r3, #6]
 8010466:	b29a      	uxth	r2, r3
 8010468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046a:	889b      	ldrh	r3, [r3, #4]
 801046c:	b29b      	uxth	r3, r3
 801046e:	429a      	cmp	r2, r3
 8010470:	d002      	beq.n	8010478 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010472:	2300      	movs	r3, #0
 8010474:	623b      	str	r3, [r7, #32]
            break;
 8010476:	e007      	b.n	8010488 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801047c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010484:	2b00      	cmp	r3, #0
 8010486:	d1e9      	bne.n	801045c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010488:	6a3b      	ldr	r3, [r7, #32]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d022      	beq.n	80104d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d106      	bne.n	80104a4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010496:	4b15      	ldr	r3, [pc, #84]	; (80104ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010498:	f240 12df 	movw	r2, #479	; 0x1df
 801049c:	4917      	ldr	r1, [pc, #92]	; (80104fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801049e:	4815      	ldr	r0, [pc, #84]	; (80104f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80104a0:	f000 fcea 	bl	8010e78 <iprintf>
          LWIP_ASSERT("sanity check",
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d106      	bne.n	80104be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80104b0:	4b0e      	ldr	r3, [pc, #56]	; (80104ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80104b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80104b6:	4911      	ldr	r1, [pc, #68]	; (80104fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80104b8:	480e      	ldr	r0, [pc, #56]	; (80104f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80104ba:	f000 fcdd 	bl	8010e78 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80104be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d006      	beq.n	80104d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80104c6:	4b09      	ldr	r3, [pc, #36]	; (80104ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80104c8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80104cc:	490c      	ldr	r1, [pc, #48]	; (8010500 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80104ce:	4809      	ldr	r0, [pc, #36]	; (80104f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80104d0:	f000 fcd2 	bl	8010e78 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80104d4:	6a3b      	ldr	r3, [r7, #32]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	bf14      	ite	ne
 80104da:	2301      	movne	r3, #1
 80104dc:	2300      	moveq	r3, #0
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	e000      	b.n	80104e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80104e2:	2300      	movs	r3, #0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3730      	adds	r7, #48	; 0x30
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	0801485c 	.word	0x0801485c
 80104f0:	08014940 	.word	0x08014940
 80104f4:	080148a4 	.word	0x080148a4
 80104f8:	08014960 	.word	0x08014960
 80104fc:	08014998 	.word	0x08014998
 8010500:	080149a8 	.word	0x080149a8

08010504 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b08e      	sub	sp, #56	; 0x38
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801050c:	4ba3      	ldr	r3, [pc, #652]	; (801079c <ip4_reass+0x298>)
 801050e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010510:	3301      	adds	r3, #1
 8010512:	b29a      	uxth	r2, r3
 8010514:	4ba1      	ldr	r3, [pc, #644]	; (801079c <ip4_reass+0x298>)
 8010516:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	f003 030f 	and.w	r3, r3, #15
 8010526:	b2db      	uxtb	r3, r3
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b14      	cmp	r3, #20
 801052e:	d008      	beq.n	8010542 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 8010530:	4b9a      	ldr	r3, [pc, #616]	; (801079c <ip4_reass+0x298>)
 8010532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010536:	3301      	adds	r3, #1
 8010538:	b29a      	uxth	r2, r3
 801053a:	4b98      	ldr	r3, [pc, #608]	; (801079c <ip4_reass+0x298>)
 801053c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 8010540:	e184      	b.n	801084c <ip4_reass+0x348>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010544:	88db      	ldrh	r3, [r3, #6]
 8010546:	b29b      	uxth	r3, r3
 8010548:	4618      	mov	r0, r3
 801054a:	f7f4 f877 	bl	800463c <lwip_htons>
 801054e:	4603      	mov	r3, r0
 8010550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010554:	b29b      	uxth	r3, r3
 8010556:	00db      	lsls	r3, r3, #3
 8010558:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055c:	885b      	ldrh	r3, [r3, #2]
 801055e:	b29b      	uxth	r3, r3
 8010560:	4618      	mov	r0, r3
 8010562:	f7f4 f86b 	bl	800463c <lwip_htons>
 8010566:	4603      	mov	r3, r0
 8010568:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801056a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	f003 030f 	and.w	r3, r3, #15
 8010572:	b2db      	uxtb	r3, r3
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801057a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801057e:	b29b      	uxth	r3, r3
 8010580:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010582:	429a      	cmp	r2, r3
 8010584:	f0c0 815f 	bcc.w	8010846 <ip4_reass+0x342>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801058c:	b29b      	uxth	r3, r3
 801058e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7f5 fd39 	bl	800600c <pbuf_clen>
 801059a:	4603      	mov	r3, r0
 801059c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801059e:	4b80      	ldr	r3, [pc, #512]	; (80107a0 <ip4_reass+0x29c>)
 80105a0:	881b      	ldrh	r3, [r3, #0]
 80105a2:	461a      	mov	r2, r3
 80105a4:	8c3b      	ldrh	r3, [r7, #32]
 80105a6:	4413      	add	r3, r2
 80105a8:	2b0a      	cmp	r3, #10
 80105aa:	dd15      	ble.n	80105d8 <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80105ac:	8c3b      	ldrh	r3, [r7, #32]
 80105ae:	4619      	mov	r1, r3
 80105b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105b2:	f7ff fd6b 	bl	801008c <ip_reass_remove_oldest_datagram>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d006      	beq.n	80105ca <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80105bc:	4b78      	ldr	r3, [pc, #480]	; (80107a0 <ip4_reass+0x29c>)
 80105be:	881b      	ldrh	r3, [r3, #0]
 80105c0:	461a      	mov	r2, r3
 80105c2:	8c3b      	ldrh	r3, [r7, #32]
 80105c4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80105c6:	2b0a      	cmp	r3, #10
 80105c8:	dd06      	ble.n	80105d8 <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 80105ca:	4b74      	ldr	r3, [pc, #464]	; (801079c <ip4_reass+0x298>)
 80105cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80105ce:	3301      	adds	r3, #1
 80105d0:	b29a      	uxth	r2, r3
 80105d2:	4b72      	ldr	r3, [pc, #456]	; (801079c <ip4_reass+0x298>)
 80105d4:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 80105d6:	e139      	b.n	801084c <ip4_reass+0x348>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80105d8:	4b72      	ldr	r3, [pc, #456]	; (80107a4 <ip4_reass+0x2a0>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	633b      	str	r3, [r7, #48]	; 0x30
 80105de:	e01e      	b.n	801061e <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80105e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e2:	695a      	ldr	r2, [r3, #20]
 80105e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d115      	bne.n	8010618 <ip4_reass+0x114>
 80105ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ee:	699a      	ldr	r2, [r3, #24]
 80105f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f2:	691b      	ldr	r3, [r3, #16]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d10f      	bne.n	8010618 <ip4_reass+0x114>
 80105f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fa:	899a      	ldrh	r2, [r3, #12]
 80105fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fe:	889b      	ldrh	r3, [r3, #4]
 8010600:	b29b      	uxth	r3, r3
 8010602:	429a      	cmp	r2, r3
 8010604:	d108      	bne.n	8010618 <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 8010606:	4b65      	ldr	r3, [pc, #404]	; (801079c <ip4_reass+0x298>)
 8010608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801060c:	3301      	adds	r3, #1
 801060e:	b29a      	uxth	r2, r3
 8010610:	4b62      	ldr	r3, [pc, #392]	; (801079c <ip4_reass+0x298>)
 8010612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 8010616:	e005      	b.n	8010624 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	633b      	str	r3, [r7, #48]	; 0x30
 801061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1dd      	bne.n	80105e0 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 8010624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010626:	2b00      	cmp	r3, #0
 8010628:	d109      	bne.n	801063e <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801062a:	8c3b      	ldrh	r3, [r7, #32]
 801062c:	4619      	mov	r1, r3
 801062e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010630:	f7ff fd8e 	bl	8010150 <ip_reass_enqueue_new_datagram>
 8010634:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010638:	2b00      	cmp	r3, #0
 801063a:	d11c      	bne.n	8010676 <ip4_reass+0x172>
      goto nullreturn;
 801063c:	e106      	b.n	801084c <ip4_reass+0x348>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010640:	88db      	ldrh	r3, [r3, #6]
 8010642:	b29b      	uxth	r3, r3
 8010644:	4618      	mov	r0, r3
 8010646:	f7f3 fff9 	bl	800463c <lwip_htons>
 801064a:	4603      	mov	r3, r0
 801064c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010650:	2b00      	cmp	r3, #0
 8010652:	d110      	bne.n	8010676 <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010656:	89db      	ldrh	r3, [r3, #14]
 8010658:	4618      	mov	r0, r3
 801065a:	f7f3 ffef 	bl	800463c <lwip_htons>
 801065e:	4603      	mov	r3, r0
 8010660:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010664:	2b00      	cmp	r3, #0
 8010666:	d006      	beq.n	8010676 <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066a:	3308      	adds	r3, #8
 801066c:	2214      	movs	r2, #20
 801066e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010670:	4618      	mov	r0, r3
 8010672:	f000 fbeb 	bl	8010e4c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010678:	88db      	ldrh	r3, [r3, #6]
 801067a:	b29b      	uxth	r3, r3
 801067c:	f003 0320 	and.w	r3, r3, #32
 8010680:	2b00      	cmp	r3, #0
 8010682:	bf0c      	ite	eq
 8010684:	2301      	moveq	r3, #1
 8010686:	2300      	movne	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00e      	beq.n	80106b0 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 8010692:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010696:	4413      	add	r3, r2
 8010698:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801069a:	8b7a      	ldrh	r2, [r7, #26]
 801069c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801069e:	429a      	cmp	r2, r3
 80106a0:	f0c0 80af 	bcc.w	8010802 <ip4_reass+0x2fe>
 80106a4:	8b7b      	ldrh	r3, [r7, #26]
 80106a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80106aa:	4293      	cmp	r3, r2
 80106ac:	f200 80a9 	bhi.w	8010802 <ip4_reass+0x2fe>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80106b0:	69fa      	ldr	r2, [r7, #28]
 80106b2:	6879      	ldr	r1, [r7, #4]
 80106b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106b6:	f7ff fdbb 	bl	8010230 <ip_reass_chain_frag_into_datagram_and_validate>
 80106ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c2:	f000 80a0 	beq.w	8010806 <ip4_reass+0x302>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80106c6:	4b36      	ldr	r3, [pc, #216]	; (80107a0 <ip4_reass+0x29c>)
 80106c8:	881a      	ldrh	r2, [r3, #0]
 80106ca:	8c3b      	ldrh	r3, [r7, #32]
 80106cc:	4413      	add	r3, r2
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	4b33      	ldr	r3, [pc, #204]	; (80107a0 <ip4_reass+0x29c>)
 80106d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00d      	beq.n	80106f6 <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 80106da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80106dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106de:	4413      	add	r3, r2
 80106e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80106e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e4:	8a7a      	ldrh	r2, [r7, #18]
 80106e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80106e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ea:	7f9b      	ldrb	r3, [r3, #30]
 80106ec:	f043 0301 	orr.w	r3, r3, #1
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	f040 8080 	bne.w	80107fe <ip4_reass+0x2fa>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80106fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010700:	8b9b      	ldrh	r3, [r3, #28]
 8010702:	3314      	adds	r3, #20
 8010704:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	685b      	ldr	r3, [r3, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071a:	3308      	adds	r3, #8
 801071c:	2214      	movs	r2, #20
 801071e:	4619      	mov	r1, r3
 8010720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010722:	f000 fb93 	bl	8010e4c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010726:	8a3b      	ldrh	r3, [r7, #16]
 8010728:	4618      	mov	r0, r3
 801072a:	f7f3 ff87 	bl	800463c <lwip_htons>
 801072e:	4603      	mov	r3, r0
 8010730:	461a      	mov	r2, r3
 8010732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010734:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010738:	2200      	movs	r2, #0
 801073a:	719a      	strb	r2, [r3, #6]
 801073c:	2200      	movs	r2, #0
 801073e:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010742:	2200      	movs	r2, #0
 8010744:	729a      	strb	r2, [r3, #10]
 8010746:	2200      	movs	r2, #0
 8010748:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801074a:	2114      	movs	r1, #20
 801074c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801074e:	f7f4 f8bd 	bl	80048cc <inet_chksum>
 8010752:	4603      	mov	r3, r0
 8010754:	461a      	mov	r2, r3
 8010756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010758:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801075a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010760:	e00d      	b.n	801077e <ip4_reass+0x27a>
      iprh = (struct ip_reass_helper *)r->payload;
 8010762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010768:	2114      	movs	r1, #20
 801076a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801076c:	f7f5 fb40 	bl	8005df0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010770:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f7f5 fc84 	bl	8006080 <pbuf_cat>
      r = iprh->next_pbuf;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010780:	2b00      	cmp	r3, #0
 8010782:	d1ee      	bne.n	8010762 <ip4_reass+0x25e>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010784:	4b07      	ldr	r3, [pc, #28]	; (80107a4 <ip4_reass+0x2a0>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801078a:	429a      	cmp	r2, r3
 801078c:	d102      	bne.n	8010794 <ip4_reass+0x290>
      ipr_prev = NULL;
 801078e:	2300      	movs	r3, #0
 8010790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010792:	e016      	b.n	80107c2 <ip4_reass+0x2be>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010794:	4b03      	ldr	r3, [pc, #12]	; (80107a4 <ip4_reass+0x2a0>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	62fb      	str	r3, [r7, #44]	; 0x2c
 801079a:	e00d      	b.n	80107b8 <ip4_reass+0x2b4>
 801079c:	200075f0 	.word	0x200075f0
 80107a0:	20000290 	.word	0x20000290
 80107a4:	2000028c 	.word	0x2000028c
        if (ipr_prev->next == ipr) {
 80107a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d006      	beq.n	80107c0 <ip4_reass+0x2bc>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80107b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1f4      	bne.n	80107a8 <ip4_reass+0x2a4>
 80107be:	e000      	b.n	80107c2 <ip4_reass+0x2be>
          break;
 80107c0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80107c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107c6:	f7ff fd05 	bl	80101d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f7f5 fc1e 	bl	800600c <pbuf_clen>
 80107d0:	4603      	mov	r3, r0
 80107d2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80107d4:	4b24      	ldr	r3, [pc, #144]	; (8010868 <ip4_reass+0x364>)
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	8c3a      	ldrh	r2, [r7, #32]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d906      	bls.n	80107ec <ip4_reass+0x2e8>
 80107de:	4b23      	ldr	r3, [pc, #140]	; (801086c <ip4_reass+0x368>)
 80107e0:	f240 229b 	movw	r2, #667	; 0x29b
 80107e4:	4922      	ldr	r1, [pc, #136]	; (8010870 <ip4_reass+0x36c>)
 80107e6:	4823      	ldr	r0, [pc, #140]	; (8010874 <ip4_reass+0x370>)
 80107e8:	f000 fb46 	bl	8010e78 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80107ec:	4b1e      	ldr	r3, [pc, #120]	; (8010868 <ip4_reass+0x364>)
 80107ee:	881a      	ldrh	r2, [r3, #0]
 80107f0:	8c3b      	ldrh	r3, [r7, #32]
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	4b1c      	ldr	r3, [pc, #112]	; (8010868 <ip4_reass+0x364>)
 80107f8:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	e030      	b.n	8010860 <ip4_reass+0x35c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80107fe:	2300      	movs	r3, #0
 8010800:	e02e      	b.n	8010860 <ip4_reass+0x35c>
      goto nullreturn_ipr;
 8010802:	bf00      	nop
 8010804:	e000      	b.n	8010808 <ip4_reass+0x304>
    goto nullreturn_ipr;
 8010806:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080a:	2b00      	cmp	r3, #0
 801080c:	d106      	bne.n	801081c <ip4_reass+0x318>
 801080e:	4b17      	ldr	r3, [pc, #92]	; (801086c <ip4_reass+0x368>)
 8010810:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010814:	4918      	ldr	r1, [pc, #96]	; (8010878 <ip4_reass+0x374>)
 8010816:	4817      	ldr	r0, [pc, #92]	; (8010874 <ip4_reass+0x370>)
 8010818:	f000 fb2e 	bl	8010e78 <iprintf>
  if (ipr->p == NULL) {
 801081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d112      	bne.n	801084a <ip4_reass+0x346>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010824:	4b15      	ldr	r3, [pc, #84]	; (801087c <ip4_reass+0x378>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801082a:	429a      	cmp	r2, r3
 801082c:	d006      	beq.n	801083c <ip4_reass+0x338>
 801082e:	4b0f      	ldr	r3, [pc, #60]	; (801086c <ip4_reass+0x368>)
 8010830:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010834:	4912      	ldr	r1, [pc, #72]	; (8010880 <ip4_reass+0x37c>)
 8010836:	480f      	ldr	r0, [pc, #60]	; (8010874 <ip4_reass+0x370>)
 8010838:	f000 fb1e 	bl	8010e78 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801083c:	2100      	movs	r1, #0
 801083e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010840:	f7ff fcc8 	bl	80101d4 <ip_reass_dequeue_datagram>
 8010844:	e002      	b.n	801084c <ip4_reass+0x348>
    goto nullreturn;
 8010846:	bf00      	nop
 8010848:	e000      	b.n	801084c <ip4_reass+0x348>
  }

nullreturn:
 801084a:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801084c:	4b0d      	ldr	r3, [pc, #52]	; (8010884 <ip4_reass+0x380>)
 801084e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010850:	3301      	adds	r3, #1
 8010852:	b29a      	uxth	r2, r3
 8010854:	4b0b      	ldr	r3, [pc, #44]	; (8010884 <ip4_reass+0x380>)
 8010856:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7f5 fb4f 	bl	8005efc <pbuf_free>
  return NULL;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3738      	adds	r7, #56	; 0x38
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	20000290 	.word	0x20000290
 801086c:	0801485c 	.word	0x0801485c
 8010870:	080149cc 	.word	0x080149cc
 8010874:	080148a4 	.word	0x080148a4
 8010878:	080149e8 	.word	0x080149e8
 801087c:	2000028c 	.word	0x2000028c
 8010880:	080149f4 	.word	0x080149f4
 8010884:	200075f0 	.word	0x200075f0

08010888 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801088c:	2005      	movs	r0, #5
 801088e:	f7f4 fd1d 	bl	80052cc <memp_malloc>
 8010892:	4603      	mov	r3, r0
}
 8010894:	4618      	mov	r0, r3
 8010896:	bd80      	pop	{r7, pc}

08010898 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d106      	bne.n	80108b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80108a6:	4b07      	ldr	r3, [pc, #28]	; (80108c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80108a8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80108ac:	4906      	ldr	r1, [pc, #24]	; (80108c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80108ae:	4807      	ldr	r0, [pc, #28]	; (80108cc <ip_frag_free_pbuf_custom_ref+0x34>)
 80108b0:	f000 fae2 	bl	8010e78 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80108b4:	6879      	ldr	r1, [r7, #4]
 80108b6:	2005      	movs	r0, #5
 80108b8:	f7f4 fd4a 	bl	8005350 <memp_free>
}
 80108bc:	bf00      	nop
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	0801485c 	.word	0x0801485c
 80108c8:	08014a14 	.word	0x08014a14
 80108cc:	080148a4 	.word	0x080148a4

080108d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b084      	sub	sp, #16
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d106      	bne.n	80108f0 <ipfrag_free_pbuf_custom+0x20>
 80108e2:	4b11      	ldr	r3, [pc, #68]	; (8010928 <ipfrag_free_pbuf_custom+0x58>)
 80108e4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80108e8:	4910      	ldr	r1, [pc, #64]	; (801092c <ipfrag_free_pbuf_custom+0x5c>)
 80108ea:	4811      	ldr	r0, [pc, #68]	; (8010930 <ipfrag_free_pbuf_custom+0x60>)
 80108ec:	f000 fac4 	bl	8010e78 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80108f0:	68fa      	ldr	r2, [r7, #12]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d006      	beq.n	8010906 <ipfrag_free_pbuf_custom+0x36>
 80108f8:	4b0b      	ldr	r3, [pc, #44]	; (8010928 <ipfrag_free_pbuf_custom+0x58>)
 80108fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80108fe:	490d      	ldr	r1, [pc, #52]	; (8010934 <ipfrag_free_pbuf_custom+0x64>)
 8010900:	480b      	ldr	r0, [pc, #44]	; (8010930 <ipfrag_free_pbuf_custom+0x60>)
 8010902:	f000 fab9 	bl	8010e78 <iprintf>
  if (pcr->original != NULL) {
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	695b      	ldr	r3, [r3, #20]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d004      	beq.n	8010918 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	695b      	ldr	r3, [r3, #20]
 8010912:	4618      	mov	r0, r3
 8010914:	f7f5 faf2 	bl	8005efc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010918:	68f8      	ldr	r0, [r7, #12]
 801091a:	f7ff ffbd 	bl	8010898 <ip_frag_free_pbuf_custom_ref>
}
 801091e:	bf00      	nop
 8010920:	3710      	adds	r7, #16
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	0801485c 	.word	0x0801485c
 801092c:	08014a20 	.word	0x08014a20
 8010930:	080148a4 	.word	0x080148a4
 8010934:	08014a2c 	.word	0x08014a2c

08010938 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b094      	sub	sp, #80	; 0x50
 801093c:	af02      	add	r7, sp, #8
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801094e:	3b14      	subs	r3, #20
 8010950:	2b00      	cmp	r3, #0
 8010952:	da00      	bge.n	8010956 <ip4_frag+0x1e>
 8010954:	3307      	adds	r3, #7
 8010956:	10db      	asrs	r3, r3, #3
 8010958:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801095a:	2314      	movs	r3, #20
 801095c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010966:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	f003 030f 	and.w	r3, r3, #15
 8010970:	b2db      	uxtb	r3, r3
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	b2db      	uxtb	r3, r3
 8010976:	2b14      	cmp	r3, #20
 8010978:	d002      	beq.n	8010980 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801097a:	f06f 0305 	mvn.w	r3, #5
 801097e:	e11e      	b.n	8010bbe <ip4_frag+0x286>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	895b      	ldrh	r3, [r3, #10]
 8010984:	2b13      	cmp	r3, #19
 8010986:	d809      	bhi.n	801099c <ip4_frag+0x64>
 8010988:	4b8f      	ldr	r3, [pc, #572]	; (8010bc8 <ip4_frag+0x290>)
 801098a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801098e:	498f      	ldr	r1, [pc, #572]	; (8010bcc <ip4_frag+0x294>)
 8010990:	488f      	ldr	r0, [pc, #572]	; (8010bd0 <ip4_frag+0x298>)
 8010992:	f000 fa71 	bl	8010e78 <iprintf>
 8010996:	f06f 0305 	mvn.w	r3, #5
 801099a:	e110      	b.n	8010bbe <ip4_frag+0x286>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801099c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801099e:	88db      	ldrh	r3, [r3, #6]
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	4618      	mov	r0, r3
 80109a4:	f7f3 fe4a 	bl	800463c <lwip_htons>
 80109a8:	4603      	mov	r3, r0
 80109aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80109ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80109b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80109b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80109bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	891b      	ldrh	r3, [r3, #8]
 80109c2:	3b14      	subs	r3, #20
 80109c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80109c8:	e0ef      	b.n	8010baa <ip4_frag+0x272>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80109ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80109cc:	00db      	lsls	r3, r3, #3
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109d4:	4293      	cmp	r3, r2
 80109d6:	bf28      	it	cs
 80109d8:	4613      	movcs	r3, r2
 80109da:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80109dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109e0:	2114      	movs	r1, #20
 80109e2:	200e      	movs	r0, #14
 80109e4:	f7f4 ffea 	bl	80059bc <pbuf_alloc>
 80109e8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80109ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 80e3 	beq.w	8010bb8 <ip4_frag+0x280>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80109f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f4:	895b      	ldrh	r3, [r3, #10]
 80109f6:	2b13      	cmp	r3, #19
 80109f8:	d806      	bhi.n	8010a08 <ip4_frag+0xd0>
 80109fa:	4b73      	ldr	r3, [pc, #460]	; (8010bc8 <ip4_frag+0x290>)
 80109fc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010a00:	4974      	ldr	r1, [pc, #464]	; (8010bd4 <ip4_frag+0x29c>)
 8010a02:	4873      	ldr	r0, [pc, #460]	; (8010bd0 <ip4_frag+0x298>)
 8010a04:	f000 fa38 	bl	8010e78 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	2214      	movs	r2, #20
 8010a0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010a10:	4618      	mov	r0, r3
 8010a12:	f000 fa1b 	bl	8010e4c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010a1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010a1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010a22:	e064      	b.n	8010aee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	895a      	ldrh	r2, [r3, #10]
 8010a28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010a2a:	1ad3      	subs	r3, r2, r3
 8010a2c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	895b      	ldrh	r3, [r3, #10]
 8010a32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d906      	bls.n	8010a46 <ip4_frag+0x10e>
 8010a38:	4b63      	ldr	r3, [pc, #396]	; (8010bc8 <ip4_frag+0x290>)
 8010a3a:	f240 322d 	movw	r2, #813	; 0x32d
 8010a3e:	4966      	ldr	r1, [pc, #408]	; (8010bd8 <ip4_frag+0x2a0>)
 8010a40:	4863      	ldr	r0, [pc, #396]	; (8010bd0 <ip4_frag+0x298>)
 8010a42:	f000 fa19 	bl	8010e78 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010a46:	8bfa      	ldrh	r2, [r7, #30]
 8010a48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	bf28      	it	cs
 8010a50:	4613      	movcs	r3, r2
 8010a52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010a56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d105      	bne.n	8010a6a <ip4_frag+0x132>
        poff = 0;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	60fb      	str	r3, [r7, #12]
        continue;
 8010a68:	e041      	b.n	8010aee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010a6a:	f7ff ff0d 	bl	8010888 <ip_frag_alloc_pbuf_custom_ref>
 8010a6e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010a70:	69bb      	ldr	r3, [r7, #24]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d103      	bne.n	8010a7e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a78:	f7f5 fa40 	bl	8005efc <pbuf_free>
        goto memerr;
 8010a7c:	e09d      	b.n	8010bba <ip4_frag+0x282>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010a7e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010a84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010a86:	4413      	add	r3, r2
 8010a88:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010a8c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010a90:	9201      	str	r2, [sp, #4]
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	4603      	mov	r3, r0
 8010a96:	2241      	movs	r2, #65	; 0x41
 8010a98:	2000      	movs	r0, #0
 8010a9a:	f7f5 f87b 	bl	8005b94 <pbuf_alloced_custom>
 8010a9e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d106      	bne.n	8010ab4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010aa6:	69b8      	ldr	r0, [r7, #24]
 8010aa8:	f7ff fef6 	bl	8010898 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aae:	f7f5 fa25 	bl	8005efc <pbuf_free>
        goto memerr;
 8010ab2:	e082      	b.n	8010bba <ip4_frag+0x282>
      }
      pbuf_ref(p);
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f7f5 fac1 	bl	800603c <pbuf_ref>
      pcr->original = p;
 8010aba:	69bb      	ldr	r3, [r7, #24]
 8010abc:	68fa      	ldr	r2, [r7, #12]
 8010abe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010ac0:	69bb      	ldr	r3, [r7, #24]
 8010ac2:	4a46      	ldr	r2, [pc, #280]	; (8010bdc <ip4_frag+0x2a4>)
 8010ac4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010ac6:	6979      	ldr	r1, [r7, #20]
 8010ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aca:	f7f5 fad9 	bl	8006080 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010ace:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010ad2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010ad6:	1ad3      	subs	r3, r2, r3
 8010ad8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010adc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d004      	beq.n	8010aee <ip4_frag+0x1b6>
        poff = 0;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010aee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d196      	bne.n	8010a24 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010af6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010af8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010afc:	4413      	add	r3, r2
 8010afe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b04:	f1a3 0213 	sub.w	r2, r3, #19
 8010b08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	bfcc      	ite	gt
 8010b10:	2301      	movgt	r3, #1
 8010b12:	2300      	movle	r3, #0
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010b18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010b1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b20:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010b22:	6a3b      	ldr	r3, [r7, #32]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <ip4_frag+0x1f6>
 8010b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d003      	beq.n	8010b36 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010b2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010b34:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010b36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7f3 fd7f 	bl	800463c <lwip_htons>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	461a      	mov	r2, r3
 8010b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b44:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010b46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b48:	3314      	adds	r3, #20
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7f3 fd75 	bl	800463c <lwip_htons>
 8010b52:	4603      	mov	r3, r0
 8010b54:	461a      	mov	r2, r3
 8010b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b58:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	729a      	strb	r2, [r3, #10]
 8010b60:	2200      	movs	r2, #0
 8010b62:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8010b64:	2114      	movs	r1, #20
 8010b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b68:	f7f3 feb0 	bl	80048cc <inet_chksum>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	461a      	mov	r2, r3
 8010b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b72:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	695b      	ldr	r3, [r3, #20]
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b7c:	68b8      	ldr	r0, [r7, #8]
 8010b7e:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8010b80:	4b17      	ldr	r3, [pc, #92]	; (8010be0 <ip4_frag+0x2a8>)
 8010b82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8010b84:	3301      	adds	r3, #1
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	4b15      	ldr	r3, [pc, #84]	; (8010be0 <ip4_frag+0x2a8>)
 8010b8a:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b8e:	f7f5 f9b5 	bl	8005efc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010b92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010b9e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010ba2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ba4:	4413      	add	r3, r2
 8010ba6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010baa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	f47f af0b 	bne.w	80109ca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	e002      	b.n	8010bbe <ip4_frag+0x286>
      goto memerr;
 8010bb8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3748      	adds	r7, #72	; 0x48
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	0801485c 	.word	0x0801485c
 8010bcc:	08014a38 	.word	0x08014a38
 8010bd0:	080148a4 	.word	0x080148a4
 8010bd4:	08014a54 	.word	0x08014a54
 8010bd8:	08014a74 	.word	0x08014a74
 8010bdc:	080108d1 	.word	0x080108d1
 8010be0:	200075f0 	.word	0x200075f0

08010be4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b086      	sub	sp, #24
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010bee:	230e      	movs	r3, #14
 8010bf0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	895b      	ldrh	r3, [r3, #10]
 8010bf6:	2b0e      	cmp	r3, #14
 8010bf8:	d80c      	bhi.n	8010c14 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 8010bfa:	4b51      	ldr	r3, [pc, #324]	; (8010d40 <ethernet_input+0x15c>)
 8010bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bfe:	3301      	adds	r3, #1
 8010c00:	b29a      	uxth	r2, r3
 8010c02:	4b4f      	ldr	r3, [pc, #316]	; (8010d40 <ethernet_input+0x15c>)
 8010c04:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8010c06:	4b4e      	ldr	r3, [pc, #312]	; (8010d40 <ethernet_input+0x15c>)
 8010c08:	8bdb      	ldrh	r3, [r3, #30]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	b29a      	uxth	r2, r3
 8010c0e:	4b4c      	ldr	r3, [pc, #304]	; (8010d40 <ethernet_input+0x15c>)
 8010c10:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 8010c12:	e08d      	b.n	8010d30 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	7bdb      	ldrb	r3, [r3, #15]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d106      	bne.n	8010c2a <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c22:	3301      	adds	r3, #1
 8010c24:	b2da      	uxtb	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	7b1a      	ldrb	r2, [r3, #12]
 8010c34:	7b5b      	ldrb	r3, [r3, #13]
 8010c36:	021b      	lsls	r3, r3, #8
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	f003 0301 	and.w	r3, r3, #1
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d023      	beq.n	8010c90 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	d10f      	bne.n	8010c70 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	785b      	ldrb	r3, [r3, #1]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d11b      	bne.n	8010c90 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010c5c:	2b5e      	cmp	r3, #94	; 0x5e
 8010c5e:	d117      	bne.n	8010c90 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	7b5b      	ldrb	r3, [r3, #13]
 8010c64:	f043 0310 	orr.w	r3, r3, #16
 8010c68:	b2da      	uxtb	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	735a      	strb	r2, [r3, #13]
 8010c6e:	e00f      	b.n	8010c90 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	2206      	movs	r2, #6
 8010c74:	4933      	ldr	r1, [pc, #204]	; (8010d44 <ethernet_input+0x160>)
 8010c76:	4618      	mov	r0, r3
 8010c78:	f000 f8da 	bl	8010e30 <memcmp>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d106      	bne.n	8010c90 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	7b5b      	ldrb	r3, [r3, #13]
 8010c86:	f043 0308 	orr.w	r3, r3, #8
 8010c8a:	b2da      	uxtb	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010c90:	89fb      	ldrh	r3, [r7, #14]
 8010c92:	2b08      	cmp	r3, #8
 8010c94:	d003      	beq.n	8010c9e <ethernet_input+0xba>
 8010c96:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010c9a:	d014      	beq.n	8010cc6 <ethernet_input+0xe2>
 8010c9c:	e034      	b.n	8010d08 <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ca4:	f003 0308 	and.w	r3, r3, #8
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d03c      	beq.n	8010d26 <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010cac:	8afb      	ldrh	r3, [r7, #22]
 8010cae:	4619      	mov	r1, r3
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f7f5 f89d 	bl	8005df0 <pbuf_remove_header>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d136      	bne.n	8010d2a <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 8010cbc:	6839      	ldr	r1, [r7, #0]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7fe fd3a 	bl	800f738 <ip4_input>
      }
      break;
 8010cc4:	e02d      	b.n	8010d22 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ccc:	f003 0308 	and.w	r3, r3, #8
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d02c      	beq.n	8010d2e <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010cd4:	8afb      	ldrh	r3, [r7, #22]
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f7f5 f889 	bl	8005df0 <pbuf_remove_header>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d00c      	beq.n	8010cfe <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 8010ce4:	4b16      	ldr	r3, [pc, #88]	; (8010d40 <ethernet_input+0x15c>)
 8010ce6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010ce8:	3301      	adds	r3, #1
 8010cea:	b29a      	uxth	r2, r3
 8010cec:	4b14      	ldr	r3, [pc, #80]	; (8010d40 <ethernet_input+0x15c>)
 8010cee:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 8010cf0:	4b13      	ldr	r3, [pc, #76]	; (8010d40 <ethernet_input+0x15c>)
 8010cf2:	8bdb      	ldrh	r3, [r3, #30]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	4b11      	ldr	r3, [pc, #68]	; (8010d40 <ethernet_input+0x15c>)
 8010cfa:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 8010cfc:	e018      	b.n	8010d30 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 8010cfe:	6839      	ldr	r1, [r7, #0]
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f7fd fe09 	bl	800e918 <etharp_input>
      }
      break;
 8010d06:	e00c      	b.n	8010d22 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 8010d08:	4b0d      	ldr	r3, [pc, #52]	; (8010d40 <ethernet_input+0x15c>)
 8010d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	4b0b      	ldr	r3, [pc, #44]	; (8010d40 <ethernet_input+0x15c>)
 8010d12:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8010d14:	4b0a      	ldr	r3, [pc, #40]	; (8010d40 <ethernet_input+0x15c>)
 8010d16:	8bdb      	ldrh	r3, [r3, #30]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	4b08      	ldr	r3, [pc, #32]	; (8010d40 <ethernet_input+0x15c>)
 8010d1e:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010d20:	e006      	b.n	8010d30 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010d22:	2300      	movs	r3, #0
 8010d24:	e008      	b.n	8010d38 <ethernet_input+0x154>
        goto free_and_return;
 8010d26:	bf00      	nop
 8010d28:	e002      	b.n	8010d30 <ethernet_input+0x14c>
        goto free_and_return;
 8010d2a:	bf00      	nop
 8010d2c:	e000      	b.n	8010d30 <ethernet_input+0x14c>
        goto free_and_return;
 8010d2e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f7f5 f8e3 	bl	8005efc <pbuf_free>
  return ERR_OK;
 8010d36:	2300      	movs	r3, #0
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3718      	adds	r7, #24
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}
 8010d40:	200075f0 	.word	0x200075f0
 8010d44:	08014c3c 	.word	0x08014c3c

08010d48 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b086      	sub	sp, #24
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010d56:	8c3b      	ldrh	r3, [r7, #32]
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7f3 fc6f 	bl	800463c <lwip_htons>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010d62:	210e      	movs	r1, #14
 8010d64:	68b8      	ldr	r0, [r7, #8]
 8010d66:	f7f5 f833 	bl	8005dd0 <pbuf_add_header>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d125      	bne.n	8010dbc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	8afa      	ldrh	r2, [r7, #22]
 8010d7a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	2206      	movs	r2, #6
 8010d80:	6839      	ldr	r1, [r7, #0]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f000 f862 	bl	8010e4c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	3306      	adds	r3, #6
 8010d8c:	2206      	movs	r2, #6
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	4618      	mov	r0, r3
 8010d92:	f000 f85b 	bl	8010e4c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d9c:	2b06      	cmp	r3, #6
 8010d9e:	d006      	beq.n	8010dae <ethernet_output+0x66>
 8010da0:	4b0d      	ldr	r3, [pc, #52]	; (8010dd8 <ethernet_output+0x90>)
 8010da2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010da6:	490d      	ldr	r1, [pc, #52]	; (8010ddc <ethernet_output+0x94>)
 8010da8:	480d      	ldr	r0, [pc, #52]	; (8010de0 <ethernet_output+0x98>)
 8010daa:	f000 f865 	bl	8010e78 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	699b      	ldr	r3, [r3, #24]
 8010db2:	68b9      	ldr	r1, [r7, #8]
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	4798      	blx	r3
 8010db8:	4603      	mov	r3, r0
 8010dba:	e008      	b.n	8010dce <ethernet_output+0x86>
      goto pbuf_header_failed;
 8010dbc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 8010dbe:	4b09      	ldr	r3, [pc, #36]	; (8010de4 <ethernet_output+0x9c>)
 8010dc0:	895b      	ldrh	r3, [r3, #10]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	4b07      	ldr	r3, [pc, #28]	; (8010de4 <ethernet_output+0x9c>)
 8010dc8:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 8010dca:	f06f 0301 	mvn.w	r3, #1
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3718      	adds	r7, #24
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}
 8010dd6:	bf00      	nop
 8010dd8:	08014a84 	.word	0x08014a84
 8010ddc:	08014abc 	.word	0x08014abc
 8010de0:	08014af0 	.word	0x08014af0
 8010de4:	200075f0 	.word	0x200075f0

08010de8 <__libc_init_array>:
 8010de8:	b570      	push	{r4, r5, r6, lr}
 8010dea:	4d0d      	ldr	r5, [pc, #52]	; (8010e20 <__libc_init_array+0x38>)
 8010dec:	4c0d      	ldr	r4, [pc, #52]	; (8010e24 <__libc_init_array+0x3c>)
 8010dee:	1b64      	subs	r4, r4, r5
 8010df0:	10a4      	asrs	r4, r4, #2
 8010df2:	2600      	movs	r6, #0
 8010df4:	42a6      	cmp	r6, r4
 8010df6:	d109      	bne.n	8010e0c <__libc_init_array+0x24>
 8010df8:	4d0b      	ldr	r5, [pc, #44]	; (8010e28 <__libc_init_array+0x40>)
 8010dfa:	4c0c      	ldr	r4, [pc, #48]	; (8010e2c <__libc_init_array+0x44>)
 8010dfc:	f001 f856 	bl	8011eac <_init>
 8010e00:	1b64      	subs	r4, r4, r5
 8010e02:	10a4      	asrs	r4, r4, #2
 8010e04:	2600      	movs	r6, #0
 8010e06:	42a6      	cmp	r6, r4
 8010e08:	d105      	bne.n	8010e16 <__libc_init_array+0x2e>
 8010e0a:	bd70      	pop	{r4, r5, r6, pc}
 8010e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e10:	4798      	blx	r3
 8010e12:	3601      	adds	r6, #1
 8010e14:	e7ee      	b.n	8010df4 <__libc_init_array+0xc>
 8010e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e1a:	4798      	blx	r3
 8010e1c:	3601      	adds	r6, #1
 8010e1e:	e7f2      	b.n	8010e06 <__libc_init_array+0x1e>
 8010e20:	08014da0 	.word	0x08014da0
 8010e24:	08014da0 	.word	0x08014da0
 8010e28:	08014da0 	.word	0x08014da0
 8010e2c:	08014da4 	.word	0x08014da4

08010e30 <memcmp>:
 8010e30:	b530      	push	{r4, r5, lr}
 8010e32:	3901      	subs	r1, #1
 8010e34:	2400      	movs	r4, #0
 8010e36:	42a2      	cmp	r2, r4
 8010e38:	d101      	bne.n	8010e3e <memcmp+0xe>
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	e005      	b.n	8010e4a <memcmp+0x1a>
 8010e3e:	5d03      	ldrb	r3, [r0, r4]
 8010e40:	3401      	adds	r4, #1
 8010e42:	5d0d      	ldrb	r5, [r1, r4]
 8010e44:	42ab      	cmp	r3, r5
 8010e46:	d0f6      	beq.n	8010e36 <memcmp+0x6>
 8010e48:	1b58      	subs	r0, r3, r5
 8010e4a:	bd30      	pop	{r4, r5, pc}

08010e4c <memcpy>:
 8010e4c:	440a      	add	r2, r1
 8010e4e:	4291      	cmp	r1, r2
 8010e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e54:	d100      	bne.n	8010e58 <memcpy+0xc>
 8010e56:	4770      	bx	lr
 8010e58:	b510      	push	{r4, lr}
 8010e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e62:	4291      	cmp	r1, r2
 8010e64:	d1f9      	bne.n	8010e5a <memcpy+0xe>
 8010e66:	bd10      	pop	{r4, pc}

08010e68 <memset>:
 8010e68:	4402      	add	r2, r0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d100      	bne.n	8010e72 <memset+0xa>
 8010e70:	4770      	bx	lr
 8010e72:	f803 1b01 	strb.w	r1, [r3], #1
 8010e76:	e7f9      	b.n	8010e6c <memset+0x4>

08010e78 <iprintf>:
 8010e78:	b40f      	push	{r0, r1, r2, r3}
 8010e7a:	4b0a      	ldr	r3, [pc, #40]	; (8010ea4 <iprintf+0x2c>)
 8010e7c:	b513      	push	{r0, r1, r4, lr}
 8010e7e:	681c      	ldr	r4, [r3, #0]
 8010e80:	b124      	cbz	r4, 8010e8c <iprintf+0x14>
 8010e82:	69a3      	ldr	r3, [r4, #24]
 8010e84:	b913      	cbnz	r3, 8010e8c <iprintf+0x14>
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 f8c4 	bl	8011014 <__sinit>
 8010e8c:	ab05      	add	r3, sp, #20
 8010e8e:	9a04      	ldr	r2, [sp, #16]
 8010e90:	68a1      	ldr	r1, [r4, #8]
 8010e92:	9301      	str	r3, [sp, #4]
 8010e94:	4620      	mov	r0, r4
 8010e96:	f000 fa4b 	bl	8011330 <_vfiprintf_r>
 8010e9a:	b002      	add	sp, #8
 8010e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ea0:	b004      	add	sp, #16
 8010ea2:	4770      	bx	lr
 8010ea4:	20000018 	.word	0x20000018

08010ea8 <rand>:
 8010ea8:	4b17      	ldr	r3, [pc, #92]	; (8010f08 <rand+0x60>)
 8010eaa:	b510      	push	{r4, lr}
 8010eac:	681c      	ldr	r4, [r3, #0]
 8010eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010eb0:	b9b3      	cbnz	r3, 8010ee0 <rand+0x38>
 8010eb2:	2018      	movs	r0, #24
 8010eb4:	f000 f960 	bl	8011178 <malloc>
 8010eb8:	63a0      	str	r0, [r4, #56]	; 0x38
 8010eba:	b928      	cbnz	r0, 8010ec8 <rand+0x20>
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	4b13      	ldr	r3, [pc, #76]	; (8010f0c <rand+0x64>)
 8010ec0:	4813      	ldr	r0, [pc, #76]	; (8010f10 <rand+0x68>)
 8010ec2:	214e      	movs	r1, #78	; 0x4e
 8010ec4:	f000 f830 	bl	8010f28 <__assert_func>
 8010ec8:	4a12      	ldr	r2, [pc, #72]	; (8010f14 <rand+0x6c>)
 8010eca:	4b13      	ldr	r3, [pc, #76]	; (8010f18 <rand+0x70>)
 8010ecc:	e9c0 2300 	strd	r2, r3, [r0]
 8010ed0:	4b12      	ldr	r3, [pc, #72]	; (8010f1c <rand+0x74>)
 8010ed2:	6083      	str	r3, [r0, #8]
 8010ed4:	230b      	movs	r3, #11
 8010ed6:	8183      	strh	r3, [r0, #12]
 8010ed8:	2201      	movs	r2, #1
 8010eda:	2300      	movs	r3, #0
 8010edc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010ee0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010ee2:	480f      	ldr	r0, [pc, #60]	; (8010f20 <rand+0x78>)
 8010ee4:	690a      	ldr	r2, [r1, #16]
 8010ee6:	694b      	ldr	r3, [r1, #20]
 8010ee8:	4c0e      	ldr	r4, [pc, #56]	; (8010f24 <rand+0x7c>)
 8010eea:	4350      	muls	r0, r2
 8010eec:	fb04 0003 	mla	r0, r4, r3, r0
 8010ef0:	fba2 3404 	umull	r3, r4, r2, r4
 8010ef4:	1c5a      	adds	r2, r3, #1
 8010ef6:	4404      	add	r4, r0
 8010ef8:	f144 0000 	adc.w	r0, r4, #0
 8010efc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8010f00:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010f04:	bd10      	pop	{r4, pc}
 8010f06:	bf00      	nop
 8010f08:	20000018 	.word	0x20000018
 8010f0c:	08014c50 	.word	0x08014c50
 8010f10:	08014c67 	.word	0x08014c67
 8010f14:	abcd330e 	.word	0xabcd330e
 8010f18:	e66d1234 	.word	0xe66d1234
 8010f1c:	0005deec 	.word	0x0005deec
 8010f20:	5851f42d 	.word	0x5851f42d
 8010f24:	4c957f2d 	.word	0x4c957f2d

08010f28 <__assert_func>:
 8010f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f2a:	4614      	mov	r4, r2
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	4b09      	ldr	r3, [pc, #36]	; (8010f54 <__assert_func+0x2c>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4605      	mov	r5, r0
 8010f34:	68d8      	ldr	r0, [r3, #12]
 8010f36:	b14c      	cbz	r4, 8010f4c <__assert_func+0x24>
 8010f38:	4b07      	ldr	r3, [pc, #28]	; (8010f58 <__assert_func+0x30>)
 8010f3a:	9100      	str	r1, [sp, #0]
 8010f3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f40:	4906      	ldr	r1, [pc, #24]	; (8010f5c <__assert_func+0x34>)
 8010f42:	462b      	mov	r3, r5
 8010f44:	f000 f8e4 	bl	8011110 <fiprintf>
 8010f48:	f000 fddc 	bl	8011b04 <abort>
 8010f4c:	4b04      	ldr	r3, [pc, #16]	; (8010f60 <__assert_func+0x38>)
 8010f4e:	461c      	mov	r4, r3
 8010f50:	e7f3      	b.n	8010f3a <__assert_func+0x12>
 8010f52:	bf00      	nop
 8010f54:	20000018 	.word	0x20000018
 8010f58:	08014cc6 	.word	0x08014cc6
 8010f5c:	08014cd3 	.word	0x08014cd3
 8010f60:	08014d01 	.word	0x08014d01

08010f64 <std>:
 8010f64:	2300      	movs	r3, #0
 8010f66:	b510      	push	{r4, lr}
 8010f68:	4604      	mov	r4, r0
 8010f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8010f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f72:	6083      	str	r3, [r0, #8]
 8010f74:	8181      	strh	r1, [r0, #12]
 8010f76:	6643      	str	r3, [r0, #100]	; 0x64
 8010f78:	81c2      	strh	r2, [r0, #14]
 8010f7a:	6183      	str	r3, [r0, #24]
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	2208      	movs	r2, #8
 8010f80:	305c      	adds	r0, #92	; 0x5c
 8010f82:	f7ff ff71 	bl	8010e68 <memset>
 8010f86:	4b05      	ldr	r3, [pc, #20]	; (8010f9c <std+0x38>)
 8010f88:	6263      	str	r3, [r4, #36]	; 0x24
 8010f8a:	4b05      	ldr	r3, [pc, #20]	; (8010fa0 <std+0x3c>)
 8010f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f8e:	4b05      	ldr	r3, [pc, #20]	; (8010fa4 <std+0x40>)
 8010f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f92:	4b05      	ldr	r3, [pc, #20]	; (8010fa8 <std+0x44>)
 8010f94:	6224      	str	r4, [r4, #32]
 8010f96:	6323      	str	r3, [r4, #48]	; 0x30
 8010f98:	bd10      	pop	{r4, pc}
 8010f9a:	bf00      	nop
 8010f9c:	080118d9 	.word	0x080118d9
 8010fa0:	080118fb 	.word	0x080118fb
 8010fa4:	08011933 	.word	0x08011933
 8010fa8:	08011957 	.word	0x08011957

08010fac <_cleanup_r>:
 8010fac:	4901      	ldr	r1, [pc, #4]	; (8010fb4 <_cleanup_r+0x8>)
 8010fae:	f000 b8c1 	b.w	8011134 <_fwalk_reent>
 8010fb2:	bf00      	nop
 8010fb4:	08011c41 	.word	0x08011c41

08010fb8 <__sfmoreglue>:
 8010fb8:	b570      	push	{r4, r5, r6, lr}
 8010fba:	1e4a      	subs	r2, r1, #1
 8010fbc:	2568      	movs	r5, #104	; 0x68
 8010fbe:	4355      	muls	r5, r2
 8010fc0:	460e      	mov	r6, r1
 8010fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010fc6:	f000 f92f 	bl	8011228 <_malloc_r>
 8010fca:	4604      	mov	r4, r0
 8010fcc:	b140      	cbz	r0, 8010fe0 <__sfmoreglue+0x28>
 8010fce:	2100      	movs	r1, #0
 8010fd0:	e9c0 1600 	strd	r1, r6, [r0]
 8010fd4:	300c      	adds	r0, #12
 8010fd6:	60a0      	str	r0, [r4, #8]
 8010fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010fdc:	f7ff ff44 	bl	8010e68 <memset>
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	bd70      	pop	{r4, r5, r6, pc}

08010fe4 <__sfp_lock_acquire>:
 8010fe4:	4801      	ldr	r0, [pc, #4]	; (8010fec <__sfp_lock_acquire+0x8>)
 8010fe6:	f000 b8c5 	b.w	8011174 <__retarget_lock_acquire_recursive>
 8010fea:	bf00      	nop
 8010fec:	2000771c 	.word	0x2000771c

08010ff0 <__sfp_lock_release>:
 8010ff0:	4801      	ldr	r0, [pc, #4]	; (8010ff8 <__sfp_lock_release+0x8>)
 8010ff2:	f000 b8c0 	b.w	8011176 <__retarget_lock_release_recursive>
 8010ff6:	bf00      	nop
 8010ff8:	2000771c 	.word	0x2000771c

08010ffc <__sinit_lock_acquire>:
 8010ffc:	4801      	ldr	r0, [pc, #4]	; (8011004 <__sinit_lock_acquire+0x8>)
 8010ffe:	f000 b8b9 	b.w	8011174 <__retarget_lock_acquire_recursive>
 8011002:	bf00      	nop
 8011004:	20007717 	.word	0x20007717

08011008 <__sinit_lock_release>:
 8011008:	4801      	ldr	r0, [pc, #4]	; (8011010 <__sinit_lock_release+0x8>)
 801100a:	f000 b8b4 	b.w	8011176 <__retarget_lock_release_recursive>
 801100e:	bf00      	nop
 8011010:	20007717 	.word	0x20007717

08011014 <__sinit>:
 8011014:	b510      	push	{r4, lr}
 8011016:	4604      	mov	r4, r0
 8011018:	f7ff fff0 	bl	8010ffc <__sinit_lock_acquire>
 801101c:	69a3      	ldr	r3, [r4, #24]
 801101e:	b11b      	cbz	r3, 8011028 <__sinit+0x14>
 8011020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011024:	f7ff bff0 	b.w	8011008 <__sinit_lock_release>
 8011028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801102c:	6523      	str	r3, [r4, #80]	; 0x50
 801102e:	4b13      	ldr	r3, [pc, #76]	; (801107c <__sinit+0x68>)
 8011030:	4a13      	ldr	r2, [pc, #76]	; (8011080 <__sinit+0x6c>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	62a2      	str	r2, [r4, #40]	; 0x28
 8011036:	42a3      	cmp	r3, r4
 8011038:	bf04      	itt	eq
 801103a:	2301      	moveq	r3, #1
 801103c:	61a3      	streq	r3, [r4, #24]
 801103e:	4620      	mov	r0, r4
 8011040:	f000 f820 	bl	8011084 <__sfp>
 8011044:	6060      	str	r0, [r4, #4]
 8011046:	4620      	mov	r0, r4
 8011048:	f000 f81c 	bl	8011084 <__sfp>
 801104c:	60a0      	str	r0, [r4, #8]
 801104e:	4620      	mov	r0, r4
 8011050:	f000 f818 	bl	8011084 <__sfp>
 8011054:	2200      	movs	r2, #0
 8011056:	60e0      	str	r0, [r4, #12]
 8011058:	2104      	movs	r1, #4
 801105a:	6860      	ldr	r0, [r4, #4]
 801105c:	f7ff ff82 	bl	8010f64 <std>
 8011060:	68a0      	ldr	r0, [r4, #8]
 8011062:	2201      	movs	r2, #1
 8011064:	2109      	movs	r1, #9
 8011066:	f7ff ff7d 	bl	8010f64 <std>
 801106a:	68e0      	ldr	r0, [r4, #12]
 801106c:	2202      	movs	r2, #2
 801106e:	2112      	movs	r1, #18
 8011070:	f7ff ff78 	bl	8010f64 <std>
 8011074:	2301      	movs	r3, #1
 8011076:	61a3      	str	r3, [r4, #24]
 8011078:	e7d2      	b.n	8011020 <__sinit+0xc>
 801107a:	bf00      	nop
 801107c:	08014c4c 	.word	0x08014c4c
 8011080:	08010fad 	.word	0x08010fad

08011084 <__sfp>:
 8011084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011086:	4607      	mov	r7, r0
 8011088:	f7ff ffac 	bl	8010fe4 <__sfp_lock_acquire>
 801108c:	4b1e      	ldr	r3, [pc, #120]	; (8011108 <__sfp+0x84>)
 801108e:	681e      	ldr	r6, [r3, #0]
 8011090:	69b3      	ldr	r3, [r6, #24]
 8011092:	b913      	cbnz	r3, 801109a <__sfp+0x16>
 8011094:	4630      	mov	r0, r6
 8011096:	f7ff ffbd 	bl	8011014 <__sinit>
 801109a:	3648      	adds	r6, #72	; 0x48
 801109c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80110a0:	3b01      	subs	r3, #1
 80110a2:	d503      	bpl.n	80110ac <__sfp+0x28>
 80110a4:	6833      	ldr	r3, [r6, #0]
 80110a6:	b30b      	cbz	r3, 80110ec <__sfp+0x68>
 80110a8:	6836      	ldr	r6, [r6, #0]
 80110aa:	e7f7      	b.n	801109c <__sfp+0x18>
 80110ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80110b0:	b9d5      	cbnz	r5, 80110e8 <__sfp+0x64>
 80110b2:	4b16      	ldr	r3, [pc, #88]	; (801110c <__sfp+0x88>)
 80110b4:	60e3      	str	r3, [r4, #12]
 80110b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80110ba:	6665      	str	r5, [r4, #100]	; 0x64
 80110bc:	f000 f859 	bl	8011172 <__retarget_lock_init_recursive>
 80110c0:	f7ff ff96 	bl	8010ff0 <__sfp_lock_release>
 80110c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80110c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80110cc:	6025      	str	r5, [r4, #0]
 80110ce:	61a5      	str	r5, [r4, #24]
 80110d0:	2208      	movs	r2, #8
 80110d2:	4629      	mov	r1, r5
 80110d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80110d8:	f7ff fec6 	bl	8010e68 <memset>
 80110dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80110e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110e4:	4620      	mov	r0, r4
 80110e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110e8:	3468      	adds	r4, #104	; 0x68
 80110ea:	e7d9      	b.n	80110a0 <__sfp+0x1c>
 80110ec:	2104      	movs	r1, #4
 80110ee:	4638      	mov	r0, r7
 80110f0:	f7ff ff62 	bl	8010fb8 <__sfmoreglue>
 80110f4:	4604      	mov	r4, r0
 80110f6:	6030      	str	r0, [r6, #0]
 80110f8:	2800      	cmp	r0, #0
 80110fa:	d1d5      	bne.n	80110a8 <__sfp+0x24>
 80110fc:	f7ff ff78 	bl	8010ff0 <__sfp_lock_release>
 8011100:	230c      	movs	r3, #12
 8011102:	603b      	str	r3, [r7, #0]
 8011104:	e7ee      	b.n	80110e4 <__sfp+0x60>
 8011106:	bf00      	nop
 8011108:	08014c4c 	.word	0x08014c4c
 801110c:	ffff0001 	.word	0xffff0001

08011110 <fiprintf>:
 8011110:	b40e      	push	{r1, r2, r3}
 8011112:	b503      	push	{r0, r1, lr}
 8011114:	4601      	mov	r1, r0
 8011116:	ab03      	add	r3, sp, #12
 8011118:	4805      	ldr	r0, [pc, #20]	; (8011130 <fiprintf+0x20>)
 801111a:	f853 2b04 	ldr.w	r2, [r3], #4
 801111e:	6800      	ldr	r0, [r0, #0]
 8011120:	9301      	str	r3, [sp, #4]
 8011122:	f000 f905 	bl	8011330 <_vfiprintf_r>
 8011126:	b002      	add	sp, #8
 8011128:	f85d eb04 	ldr.w	lr, [sp], #4
 801112c:	b003      	add	sp, #12
 801112e:	4770      	bx	lr
 8011130:	20000018 	.word	0x20000018

08011134 <_fwalk_reent>:
 8011134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011138:	4606      	mov	r6, r0
 801113a:	4688      	mov	r8, r1
 801113c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011140:	2700      	movs	r7, #0
 8011142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011146:	f1b9 0901 	subs.w	r9, r9, #1
 801114a:	d505      	bpl.n	8011158 <_fwalk_reent+0x24>
 801114c:	6824      	ldr	r4, [r4, #0]
 801114e:	2c00      	cmp	r4, #0
 8011150:	d1f7      	bne.n	8011142 <_fwalk_reent+0xe>
 8011152:	4638      	mov	r0, r7
 8011154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011158:	89ab      	ldrh	r3, [r5, #12]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d907      	bls.n	801116e <_fwalk_reent+0x3a>
 801115e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011162:	3301      	adds	r3, #1
 8011164:	d003      	beq.n	801116e <_fwalk_reent+0x3a>
 8011166:	4629      	mov	r1, r5
 8011168:	4630      	mov	r0, r6
 801116a:	47c0      	blx	r8
 801116c:	4307      	orrs	r7, r0
 801116e:	3568      	adds	r5, #104	; 0x68
 8011170:	e7e9      	b.n	8011146 <_fwalk_reent+0x12>

08011172 <__retarget_lock_init_recursive>:
 8011172:	4770      	bx	lr

08011174 <__retarget_lock_acquire_recursive>:
 8011174:	4770      	bx	lr

08011176 <__retarget_lock_release_recursive>:
 8011176:	4770      	bx	lr

08011178 <malloc>:
 8011178:	4b02      	ldr	r3, [pc, #8]	; (8011184 <malloc+0xc>)
 801117a:	4601      	mov	r1, r0
 801117c:	6818      	ldr	r0, [r3, #0]
 801117e:	f000 b853 	b.w	8011228 <_malloc_r>
 8011182:	bf00      	nop
 8011184:	20000018 	.word	0x20000018

08011188 <_free_r>:
 8011188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801118a:	2900      	cmp	r1, #0
 801118c:	d048      	beq.n	8011220 <_free_r+0x98>
 801118e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011192:	9001      	str	r0, [sp, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	f1a1 0404 	sub.w	r4, r1, #4
 801119a:	bfb8      	it	lt
 801119c:	18e4      	addlt	r4, r4, r3
 801119e:	f000 fe01 	bl	8011da4 <__malloc_lock>
 80111a2:	4a20      	ldr	r2, [pc, #128]	; (8011224 <_free_r+0x9c>)
 80111a4:	9801      	ldr	r0, [sp, #4]
 80111a6:	6813      	ldr	r3, [r2, #0]
 80111a8:	4615      	mov	r5, r2
 80111aa:	b933      	cbnz	r3, 80111ba <_free_r+0x32>
 80111ac:	6063      	str	r3, [r4, #4]
 80111ae:	6014      	str	r4, [r2, #0]
 80111b0:	b003      	add	sp, #12
 80111b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111b6:	f000 bdfb 	b.w	8011db0 <__malloc_unlock>
 80111ba:	42a3      	cmp	r3, r4
 80111bc:	d90b      	bls.n	80111d6 <_free_r+0x4e>
 80111be:	6821      	ldr	r1, [r4, #0]
 80111c0:	1862      	adds	r2, r4, r1
 80111c2:	4293      	cmp	r3, r2
 80111c4:	bf04      	itt	eq
 80111c6:	681a      	ldreq	r2, [r3, #0]
 80111c8:	685b      	ldreq	r3, [r3, #4]
 80111ca:	6063      	str	r3, [r4, #4]
 80111cc:	bf04      	itt	eq
 80111ce:	1852      	addeq	r2, r2, r1
 80111d0:	6022      	streq	r2, [r4, #0]
 80111d2:	602c      	str	r4, [r5, #0]
 80111d4:	e7ec      	b.n	80111b0 <_free_r+0x28>
 80111d6:	461a      	mov	r2, r3
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	b10b      	cbz	r3, 80111e0 <_free_r+0x58>
 80111dc:	42a3      	cmp	r3, r4
 80111de:	d9fa      	bls.n	80111d6 <_free_r+0x4e>
 80111e0:	6811      	ldr	r1, [r2, #0]
 80111e2:	1855      	adds	r5, r2, r1
 80111e4:	42a5      	cmp	r5, r4
 80111e6:	d10b      	bne.n	8011200 <_free_r+0x78>
 80111e8:	6824      	ldr	r4, [r4, #0]
 80111ea:	4421      	add	r1, r4
 80111ec:	1854      	adds	r4, r2, r1
 80111ee:	42a3      	cmp	r3, r4
 80111f0:	6011      	str	r1, [r2, #0]
 80111f2:	d1dd      	bne.n	80111b0 <_free_r+0x28>
 80111f4:	681c      	ldr	r4, [r3, #0]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	6053      	str	r3, [r2, #4]
 80111fa:	4421      	add	r1, r4
 80111fc:	6011      	str	r1, [r2, #0]
 80111fe:	e7d7      	b.n	80111b0 <_free_r+0x28>
 8011200:	d902      	bls.n	8011208 <_free_r+0x80>
 8011202:	230c      	movs	r3, #12
 8011204:	6003      	str	r3, [r0, #0]
 8011206:	e7d3      	b.n	80111b0 <_free_r+0x28>
 8011208:	6825      	ldr	r5, [r4, #0]
 801120a:	1961      	adds	r1, r4, r5
 801120c:	428b      	cmp	r3, r1
 801120e:	bf04      	itt	eq
 8011210:	6819      	ldreq	r1, [r3, #0]
 8011212:	685b      	ldreq	r3, [r3, #4]
 8011214:	6063      	str	r3, [r4, #4]
 8011216:	bf04      	itt	eq
 8011218:	1949      	addeq	r1, r1, r5
 801121a:	6021      	streq	r1, [r4, #0]
 801121c:	6054      	str	r4, [r2, #4]
 801121e:	e7c7      	b.n	80111b0 <_free_r+0x28>
 8011220:	b003      	add	sp, #12
 8011222:	bd30      	pop	{r4, r5, pc}
 8011224:	20000294 	.word	0x20000294

08011228 <_malloc_r>:
 8011228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801122a:	1ccd      	adds	r5, r1, #3
 801122c:	f025 0503 	bic.w	r5, r5, #3
 8011230:	3508      	adds	r5, #8
 8011232:	2d0c      	cmp	r5, #12
 8011234:	bf38      	it	cc
 8011236:	250c      	movcc	r5, #12
 8011238:	2d00      	cmp	r5, #0
 801123a:	4606      	mov	r6, r0
 801123c:	db01      	blt.n	8011242 <_malloc_r+0x1a>
 801123e:	42a9      	cmp	r1, r5
 8011240:	d903      	bls.n	801124a <_malloc_r+0x22>
 8011242:	230c      	movs	r3, #12
 8011244:	6033      	str	r3, [r6, #0]
 8011246:	2000      	movs	r0, #0
 8011248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801124a:	f000 fdab 	bl	8011da4 <__malloc_lock>
 801124e:	4921      	ldr	r1, [pc, #132]	; (80112d4 <_malloc_r+0xac>)
 8011250:	680a      	ldr	r2, [r1, #0]
 8011252:	4614      	mov	r4, r2
 8011254:	b99c      	cbnz	r4, 801127e <_malloc_r+0x56>
 8011256:	4f20      	ldr	r7, [pc, #128]	; (80112d8 <_malloc_r+0xb0>)
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	b923      	cbnz	r3, 8011266 <_malloc_r+0x3e>
 801125c:	4621      	mov	r1, r4
 801125e:	4630      	mov	r0, r6
 8011260:	f000 fb2a 	bl	80118b8 <_sbrk_r>
 8011264:	6038      	str	r0, [r7, #0]
 8011266:	4629      	mov	r1, r5
 8011268:	4630      	mov	r0, r6
 801126a:	f000 fb25 	bl	80118b8 <_sbrk_r>
 801126e:	1c43      	adds	r3, r0, #1
 8011270:	d123      	bne.n	80112ba <_malloc_r+0x92>
 8011272:	230c      	movs	r3, #12
 8011274:	6033      	str	r3, [r6, #0]
 8011276:	4630      	mov	r0, r6
 8011278:	f000 fd9a 	bl	8011db0 <__malloc_unlock>
 801127c:	e7e3      	b.n	8011246 <_malloc_r+0x1e>
 801127e:	6823      	ldr	r3, [r4, #0]
 8011280:	1b5b      	subs	r3, r3, r5
 8011282:	d417      	bmi.n	80112b4 <_malloc_r+0x8c>
 8011284:	2b0b      	cmp	r3, #11
 8011286:	d903      	bls.n	8011290 <_malloc_r+0x68>
 8011288:	6023      	str	r3, [r4, #0]
 801128a:	441c      	add	r4, r3
 801128c:	6025      	str	r5, [r4, #0]
 801128e:	e004      	b.n	801129a <_malloc_r+0x72>
 8011290:	6863      	ldr	r3, [r4, #4]
 8011292:	42a2      	cmp	r2, r4
 8011294:	bf0c      	ite	eq
 8011296:	600b      	streq	r3, [r1, #0]
 8011298:	6053      	strne	r3, [r2, #4]
 801129a:	4630      	mov	r0, r6
 801129c:	f000 fd88 	bl	8011db0 <__malloc_unlock>
 80112a0:	f104 000b 	add.w	r0, r4, #11
 80112a4:	1d23      	adds	r3, r4, #4
 80112a6:	f020 0007 	bic.w	r0, r0, #7
 80112aa:	1ac2      	subs	r2, r0, r3
 80112ac:	d0cc      	beq.n	8011248 <_malloc_r+0x20>
 80112ae:	1a1b      	subs	r3, r3, r0
 80112b0:	50a3      	str	r3, [r4, r2]
 80112b2:	e7c9      	b.n	8011248 <_malloc_r+0x20>
 80112b4:	4622      	mov	r2, r4
 80112b6:	6864      	ldr	r4, [r4, #4]
 80112b8:	e7cc      	b.n	8011254 <_malloc_r+0x2c>
 80112ba:	1cc4      	adds	r4, r0, #3
 80112bc:	f024 0403 	bic.w	r4, r4, #3
 80112c0:	42a0      	cmp	r0, r4
 80112c2:	d0e3      	beq.n	801128c <_malloc_r+0x64>
 80112c4:	1a21      	subs	r1, r4, r0
 80112c6:	4630      	mov	r0, r6
 80112c8:	f000 faf6 	bl	80118b8 <_sbrk_r>
 80112cc:	3001      	adds	r0, #1
 80112ce:	d1dd      	bne.n	801128c <_malloc_r+0x64>
 80112d0:	e7cf      	b.n	8011272 <_malloc_r+0x4a>
 80112d2:	bf00      	nop
 80112d4:	20000294 	.word	0x20000294
 80112d8:	20000298 	.word	0x20000298

080112dc <__sfputc_r>:
 80112dc:	6893      	ldr	r3, [r2, #8]
 80112de:	3b01      	subs	r3, #1
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	b410      	push	{r4}
 80112e4:	6093      	str	r3, [r2, #8]
 80112e6:	da08      	bge.n	80112fa <__sfputc_r+0x1e>
 80112e8:	6994      	ldr	r4, [r2, #24]
 80112ea:	42a3      	cmp	r3, r4
 80112ec:	db01      	blt.n	80112f2 <__sfputc_r+0x16>
 80112ee:	290a      	cmp	r1, #10
 80112f0:	d103      	bne.n	80112fa <__sfputc_r+0x1e>
 80112f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112f6:	f000 bb33 	b.w	8011960 <__swbuf_r>
 80112fa:	6813      	ldr	r3, [r2, #0]
 80112fc:	1c58      	adds	r0, r3, #1
 80112fe:	6010      	str	r0, [r2, #0]
 8011300:	7019      	strb	r1, [r3, #0]
 8011302:	4608      	mov	r0, r1
 8011304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011308:	4770      	bx	lr

0801130a <__sfputs_r>:
 801130a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130c:	4606      	mov	r6, r0
 801130e:	460f      	mov	r7, r1
 8011310:	4614      	mov	r4, r2
 8011312:	18d5      	adds	r5, r2, r3
 8011314:	42ac      	cmp	r4, r5
 8011316:	d101      	bne.n	801131c <__sfputs_r+0x12>
 8011318:	2000      	movs	r0, #0
 801131a:	e007      	b.n	801132c <__sfputs_r+0x22>
 801131c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011320:	463a      	mov	r2, r7
 8011322:	4630      	mov	r0, r6
 8011324:	f7ff ffda 	bl	80112dc <__sfputc_r>
 8011328:	1c43      	adds	r3, r0, #1
 801132a:	d1f3      	bne.n	8011314 <__sfputs_r+0xa>
 801132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011330 <_vfiprintf_r>:
 8011330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011334:	460d      	mov	r5, r1
 8011336:	b09d      	sub	sp, #116	; 0x74
 8011338:	4614      	mov	r4, r2
 801133a:	4698      	mov	r8, r3
 801133c:	4606      	mov	r6, r0
 801133e:	b118      	cbz	r0, 8011348 <_vfiprintf_r+0x18>
 8011340:	6983      	ldr	r3, [r0, #24]
 8011342:	b90b      	cbnz	r3, 8011348 <_vfiprintf_r+0x18>
 8011344:	f7ff fe66 	bl	8011014 <__sinit>
 8011348:	4b89      	ldr	r3, [pc, #548]	; (8011570 <_vfiprintf_r+0x240>)
 801134a:	429d      	cmp	r5, r3
 801134c:	d11b      	bne.n	8011386 <_vfiprintf_r+0x56>
 801134e:	6875      	ldr	r5, [r6, #4]
 8011350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011352:	07d9      	lsls	r1, r3, #31
 8011354:	d405      	bmi.n	8011362 <_vfiprintf_r+0x32>
 8011356:	89ab      	ldrh	r3, [r5, #12]
 8011358:	059a      	lsls	r2, r3, #22
 801135a:	d402      	bmi.n	8011362 <_vfiprintf_r+0x32>
 801135c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801135e:	f7ff ff09 	bl	8011174 <__retarget_lock_acquire_recursive>
 8011362:	89ab      	ldrh	r3, [r5, #12]
 8011364:	071b      	lsls	r3, r3, #28
 8011366:	d501      	bpl.n	801136c <_vfiprintf_r+0x3c>
 8011368:	692b      	ldr	r3, [r5, #16]
 801136a:	b9eb      	cbnz	r3, 80113a8 <_vfiprintf_r+0x78>
 801136c:	4629      	mov	r1, r5
 801136e:	4630      	mov	r0, r6
 8011370:	f000 fb5a 	bl	8011a28 <__swsetup_r>
 8011374:	b1c0      	cbz	r0, 80113a8 <_vfiprintf_r+0x78>
 8011376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011378:	07dc      	lsls	r4, r3, #31
 801137a:	d50e      	bpl.n	801139a <_vfiprintf_r+0x6a>
 801137c:	f04f 30ff 	mov.w	r0, #4294967295
 8011380:	b01d      	add	sp, #116	; 0x74
 8011382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011386:	4b7b      	ldr	r3, [pc, #492]	; (8011574 <_vfiprintf_r+0x244>)
 8011388:	429d      	cmp	r5, r3
 801138a:	d101      	bne.n	8011390 <_vfiprintf_r+0x60>
 801138c:	68b5      	ldr	r5, [r6, #8]
 801138e:	e7df      	b.n	8011350 <_vfiprintf_r+0x20>
 8011390:	4b79      	ldr	r3, [pc, #484]	; (8011578 <_vfiprintf_r+0x248>)
 8011392:	429d      	cmp	r5, r3
 8011394:	bf08      	it	eq
 8011396:	68f5      	ldreq	r5, [r6, #12]
 8011398:	e7da      	b.n	8011350 <_vfiprintf_r+0x20>
 801139a:	89ab      	ldrh	r3, [r5, #12]
 801139c:	0598      	lsls	r0, r3, #22
 801139e:	d4ed      	bmi.n	801137c <_vfiprintf_r+0x4c>
 80113a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113a2:	f7ff fee8 	bl	8011176 <__retarget_lock_release_recursive>
 80113a6:	e7e9      	b.n	801137c <_vfiprintf_r+0x4c>
 80113a8:	2300      	movs	r3, #0
 80113aa:	9309      	str	r3, [sp, #36]	; 0x24
 80113ac:	2320      	movs	r3, #32
 80113ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80113b6:	2330      	movs	r3, #48	; 0x30
 80113b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801157c <_vfiprintf_r+0x24c>
 80113bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113c0:	f04f 0901 	mov.w	r9, #1
 80113c4:	4623      	mov	r3, r4
 80113c6:	469a      	mov	sl, r3
 80113c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113cc:	b10a      	cbz	r2, 80113d2 <_vfiprintf_r+0xa2>
 80113ce:	2a25      	cmp	r2, #37	; 0x25
 80113d0:	d1f9      	bne.n	80113c6 <_vfiprintf_r+0x96>
 80113d2:	ebba 0b04 	subs.w	fp, sl, r4
 80113d6:	d00b      	beq.n	80113f0 <_vfiprintf_r+0xc0>
 80113d8:	465b      	mov	r3, fp
 80113da:	4622      	mov	r2, r4
 80113dc:	4629      	mov	r1, r5
 80113de:	4630      	mov	r0, r6
 80113e0:	f7ff ff93 	bl	801130a <__sfputs_r>
 80113e4:	3001      	adds	r0, #1
 80113e6:	f000 80aa 	beq.w	801153e <_vfiprintf_r+0x20e>
 80113ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113ec:	445a      	add	r2, fp
 80113ee:	9209      	str	r2, [sp, #36]	; 0x24
 80113f0:	f89a 3000 	ldrb.w	r3, [sl]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	f000 80a2 	beq.w	801153e <_vfiprintf_r+0x20e>
 80113fa:	2300      	movs	r3, #0
 80113fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011404:	f10a 0a01 	add.w	sl, sl, #1
 8011408:	9304      	str	r3, [sp, #16]
 801140a:	9307      	str	r3, [sp, #28]
 801140c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011410:	931a      	str	r3, [sp, #104]	; 0x68
 8011412:	4654      	mov	r4, sl
 8011414:	2205      	movs	r2, #5
 8011416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141a:	4858      	ldr	r0, [pc, #352]	; (801157c <_vfiprintf_r+0x24c>)
 801141c:	f7ee ff10 	bl	8000240 <memchr>
 8011420:	9a04      	ldr	r2, [sp, #16]
 8011422:	b9d8      	cbnz	r0, 801145c <_vfiprintf_r+0x12c>
 8011424:	06d1      	lsls	r1, r2, #27
 8011426:	bf44      	itt	mi
 8011428:	2320      	movmi	r3, #32
 801142a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801142e:	0713      	lsls	r3, r2, #28
 8011430:	bf44      	itt	mi
 8011432:	232b      	movmi	r3, #43	; 0x2b
 8011434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011438:	f89a 3000 	ldrb.w	r3, [sl]
 801143c:	2b2a      	cmp	r3, #42	; 0x2a
 801143e:	d015      	beq.n	801146c <_vfiprintf_r+0x13c>
 8011440:	9a07      	ldr	r2, [sp, #28]
 8011442:	4654      	mov	r4, sl
 8011444:	2000      	movs	r0, #0
 8011446:	f04f 0c0a 	mov.w	ip, #10
 801144a:	4621      	mov	r1, r4
 801144c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011450:	3b30      	subs	r3, #48	; 0x30
 8011452:	2b09      	cmp	r3, #9
 8011454:	d94e      	bls.n	80114f4 <_vfiprintf_r+0x1c4>
 8011456:	b1b0      	cbz	r0, 8011486 <_vfiprintf_r+0x156>
 8011458:	9207      	str	r2, [sp, #28]
 801145a:	e014      	b.n	8011486 <_vfiprintf_r+0x156>
 801145c:	eba0 0308 	sub.w	r3, r0, r8
 8011460:	fa09 f303 	lsl.w	r3, r9, r3
 8011464:	4313      	orrs	r3, r2
 8011466:	9304      	str	r3, [sp, #16]
 8011468:	46a2      	mov	sl, r4
 801146a:	e7d2      	b.n	8011412 <_vfiprintf_r+0xe2>
 801146c:	9b03      	ldr	r3, [sp, #12]
 801146e:	1d19      	adds	r1, r3, #4
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	9103      	str	r1, [sp, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	bfbb      	ittet	lt
 8011478:	425b      	neglt	r3, r3
 801147a:	f042 0202 	orrlt.w	r2, r2, #2
 801147e:	9307      	strge	r3, [sp, #28]
 8011480:	9307      	strlt	r3, [sp, #28]
 8011482:	bfb8      	it	lt
 8011484:	9204      	strlt	r2, [sp, #16]
 8011486:	7823      	ldrb	r3, [r4, #0]
 8011488:	2b2e      	cmp	r3, #46	; 0x2e
 801148a:	d10c      	bne.n	80114a6 <_vfiprintf_r+0x176>
 801148c:	7863      	ldrb	r3, [r4, #1]
 801148e:	2b2a      	cmp	r3, #42	; 0x2a
 8011490:	d135      	bne.n	80114fe <_vfiprintf_r+0x1ce>
 8011492:	9b03      	ldr	r3, [sp, #12]
 8011494:	1d1a      	adds	r2, r3, #4
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	9203      	str	r2, [sp, #12]
 801149a:	2b00      	cmp	r3, #0
 801149c:	bfb8      	it	lt
 801149e:	f04f 33ff 	movlt.w	r3, #4294967295
 80114a2:	3402      	adds	r4, #2
 80114a4:	9305      	str	r3, [sp, #20]
 80114a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801158c <_vfiprintf_r+0x25c>
 80114aa:	7821      	ldrb	r1, [r4, #0]
 80114ac:	2203      	movs	r2, #3
 80114ae:	4650      	mov	r0, sl
 80114b0:	f7ee fec6 	bl	8000240 <memchr>
 80114b4:	b140      	cbz	r0, 80114c8 <_vfiprintf_r+0x198>
 80114b6:	2340      	movs	r3, #64	; 0x40
 80114b8:	eba0 000a 	sub.w	r0, r0, sl
 80114bc:	fa03 f000 	lsl.w	r0, r3, r0
 80114c0:	9b04      	ldr	r3, [sp, #16]
 80114c2:	4303      	orrs	r3, r0
 80114c4:	3401      	adds	r4, #1
 80114c6:	9304      	str	r3, [sp, #16]
 80114c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114cc:	482c      	ldr	r0, [pc, #176]	; (8011580 <_vfiprintf_r+0x250>)
 80114ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114d2:	2206      	movs	r2, #6
 80114d4:	f7ee feb4 	bl	8000240 <memchr>
 80114d8:	2800      	cmp	r0, #0
 80114da:	d03f      	beq.n	801155c <_vfiprintf_r+0x22c>
 80114dc:	4b29      	ldr	r3, [pc, #164]	; (8011584 <_vfiprintf_r+0x254>)
 80114de:	bb1b      	cbnz	r3, 8011528 <_vfiprintf_r+0x1f8>
 80114e0:	9b03      	ldr	r3, [sp, #12]
 80114e2:	3307      	adds	r3, #7
 80114e4:	f023 0307 	bic.w	r3, r3, #7
 80114e8:	3308      	adds	r3, #8
 80114ea:	9303      	str	r3, [sp, #12]
 80114ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ee:	443b      	add	r3, r7
 80114f0:	9309      	str	r3, [sp, #36]	; 0x24
 80114f2:	e767      	b.n	80113c4 <_vfiprintf_r+0x94>
 80114f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80114f8:	460c      	mov	r4, r1
 80114fa:	2001      	movs	r0, #1
 80114fc:	e7a5      	b.n	801144a <_vfiprintf_r+0x11a>
 80114fe:	2300      	movs	r3, #0
 8011500:	3401      	adds	r4, #1
 8011502:	9305      	str	r3, [sp, #20]
 8011504:	4619      	mov	r1, r3
 8011506:	f04f 0c0a 	mov.w	ip, #10
 801150a:	4620      	mov	r0, r4
 801150c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011510:	3a30      	subs	r2, #48	; 0x30
 8011512:	2a09      	cmp	r2, #9
 8011514:	d903      	bls.n	801151e <_vfiprintf_r+0x1ee>
 8011516:	2b00      	cmp	r3, #0
 8011518:	d0c5      	beq.n	80114a6 <_vfiprintf_r+0x176>
 801151a:	9105      	str	r1, [sp, #20]
 801151c:	e7c3      	b.n	80114a6 <_vfiprintf_r+0x176>
 801151e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011522:	4604      	mov	r4, r0
 8011524:	2301      	movs	r3, #1
 8011526:	e7f0      	b.n	801150a <_vfiprintf_r+0x1da>
 8011528:	ab03      	add	r3, sp, #12
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	462a      	mov	r2, r5
 801152e:	4b16      	ldr	r3, [pc, #88]	; (8011588 <_vfiprintf_r+0x258>)
 8011530:	a904      	add	r1, sp, #16
 8011532:	4630      	mov	r0, r6
 8011534:	f3af 8000 	nop.w
 8011538:	4607      	mov	r7, r0
 801153a:	1c78      	adds	r0, r7, #1
 801153c:	d1d6      	bne.n	80114ec <_vfiprintf_r+0x1bc>
 801153e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011540:	07d9      	lsls	r1, r3, #31
 8011542:	d405      	bmi.n	8011550 <_vfiprintf_r+0x220>
 8011544:	89ab      	ldrh	r3, [r5, #12]
 8011546:	059a      	lsls	r2, r3, #22
 8011548:	d402      	bmi.n	8011550 <_vfiprintf_r+0x220>
 801154a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801154c:	f7ff fe13 	bl	8011176 <__retarget_lock_release_recursive>
 8011550:	89ab      	ldrh	r3, [r5, #12]
 8011552:	065b      	lsls	r3, r3, #25
 8011554:	f53f af12 	bmi.w	801137c <_vfiprintf_r+0x4c>
 8011558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801155a:	e711      	b.n	8011380 <_vfiprintf_r+0x50>
 801155c:	ab03      	add	r3, sp, #12
 801155e:	9300      	str	r3, [sp, #0]
 8011560:	462a      	mov	r2, r5
 8011562:	4b09      	ldr	r3, [pc, #36]	; (8011588 <_vfiprintf_r+0x258>)
 8011564:	a904      	add	r1, sp, #16
 8011566:	4630      	mov	r0, r6
 8011568:	f000 f880 	bl	801166c <_printf_i>
 801156c:	e7e4      	b.n	8011538 <_vfiprintf_r+0x208>
 801156e:	bf00      	nop
 8011570:	08014d24 	.word	0x08014d24
 8011574:	08014d44 	.word	0x08014d44
 8011578:	08014d04 	.word	0x08014d04
 801157c:	08014d64 	.word	0x08014d64
 8011580:	08014d6e 	.word	0x08014d6e
 8011584:	00000000 	.word	0x00000000
 8011588:	0801130b 	.word	0x0801130b
 801158c:	08014d6a 	.word	0x08014d6a

08011590 <_printf_common>:
 8011590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011594:	4616      	mov	r6, r2
 8011596:	4699      	mov	r9, r3
 8011598:	688a      	ldr	r2, [r1, #8]
 801159a:	690b      	ldr	r3, [r1, #16]
 801159c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80115a0:	4293      	cmp	r3, r2
 80115a2:	bfb8      	it	lt
 80115a4:	4613      	movlt	r3, r2
 80115a6:	6033      	str	r3, [r6, #0]
 80115a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80115ac:	4607      	mov	r7, r0
 80115ae:	460c      	mov	r4, r1
 80115b0:	b10a      	cbz	r2, 80115b6 <_printf_common+0x26>
 80115b2:	3301      	adds	r3, #1
 80115b4:	6033      	str	r3, [r6, #0]
 80115b6:	6823      	ldr	r3, [r4, #0]
 80115b8:	0699      	lsls	r1, r3, #26
 80115ba:	bf42      	ittt	mi
 80115bc:	6833      	ldrmi	r3, [r6, #0]
 80115be:	3302      	addmi	r3, #2
 80115c0:	6033      	strmi	r3, [r6, #0]
 80115c2:	6825      	ldr	r5, [r4, #0]
 80115c4:	f015 0506 	ands.w	r5, r5, #6
 80115c8:	d106      	bne.n	80115d8 <_printf_common+0x48>
 80115ca:	f104 0a19 	add.w	sl, r4, #25
 80115ce:	68e3      	ldr	r3, [r4, #12]
 80115d0:	6832      	ldr	r2, [r6, #0]
 80115d2:	1a9b      	subs	r3, r3, r2
 80115d4:	42ab      	cmp	r3, r5
 80115d6:	dc26      	bgt.n	8011626 <_printf_common+0x96>
 80115d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80115dc:	1e13      	subs	r3, r2, #0
 80115de:	6822      	ldr	r2, [r4, #0]
 80115e0:	bf18      	it	ne
 80115e2:	2301      	movne	r3, #1
 80115e4:	0692      	lsls	r2, r2, #26
 80115e6:	d42b      	bmi.n	8011640 <_printf_common+0xb0>
 80115e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80115ec:	4649      	mov	r1, r9
 80115ee:	4638      	mov	r0, r7
 80115f0:	47c0      	blx	r8
 80115f2:	3001      	adds	r0, #1
 80115f4:	d01e      	beq.n	8011634 <_printf_common+0xa4>
 80115f6:	6823      	ldr	r3, [r4, #0]
 80115f8:	68e5      	ldr	r5, [r4, #12]
 80115fa:	6832      	ldr	r2, [r6, #0]
 80115fc:	f003 0306 	and.w	r3, r3, #6
 8011600:	2b04      	cmp	r3, #4
 8011602:	bf08      	it	eq
 8011604:	1aad      	subeq	r5, r5, r2
 8011606:	68a3      	ldr	r3, [r4, #8]
 8011608:	6922      	ldr	r2, [r4, #16]
 801160a:	bf0c      	ite	eq
 801160c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011610:	2500      	movne	r5, #0
 8011612:	4293      	cmp	r3, r2
 8011614:	bfc4      	itt	gt
 8011616:	1a9b      	subgt	r3, r3, r2
 8011618:	18ed      	addgt	r5, r5, r3
 801161a:	2600      	movs	r6, #0
 801161c:	341a      	adds	r4, #26
 801161e:	42b5      	cmp	r5, r6
 8011620:	d11a      	bne.n	8011658 <_printf_common+0xc8>
 8011622:	2000      	movs	r0, #0
 8011624:	e008      	b.n	8011638 <_printf_common+0xa8>
 8011626:	2301      	movs	r3, #1
 8011628:	4652      	mov	r2, sl
 801162a:	4649      	mov	r1, r9
 801162c:	4638      	mov	r0, r7
 801162e:	47c0      	blx	r8
 8011630:	3001      	adds	r0, #1
 8011632:	d103      	bne.n	801163c <_printf_common+0xac>
 8011634:	f04f 30ff 	mov.w	r0, #4294967295
 8011638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801163c:	3501      	adds	r5, #1
 801163e:	e7c6      	b.n	80115ce <_printf_common+0x3e>
 8011640:	18e1      	adds	r1, r4, r3
 8011642:	1c5a      	adds	r2, r3, #1
 8011644:	2030      	movs	r0, #48	; 0x30
 8011646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801164a:	4422      	add	r2, r4
 801164c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011654:	3302      	adds	r3, #2
 8011656:	e7c7      	b.n	80115e8 <_printf_common+0x58>
 8011658:	2301      	movs	r3, #1
 801165a:	4622      	mov	r2, r4
 801165c:	4649      	mov	r1, r9
 801165e:	4638      	mov	r0, r7
 8011660:	47c0      	blx	r8
 8011662:	3001      	adds	r0, #1
 8011664:	d0e6      	beq.n	8011634 <_printf_common+0xa4>
 8011666:	3601      	adds	r6, #1
 8011668:	e7d9      	b.n	801161e <_printf_common+0x8e>
	...

0801166c <_printf_i>:
 801166c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011670:	460c      	mov	r4, r1
 8011672:	4691      	mov	r9, r2
 8011674:	7e27      	ldrb	r7, [r4, #24]
 8011676:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011678:	2f78      	cmp	r7, #120	; 0x78
 801167a:	4680      	mov	r8, r0
 801167c:	469a      	mov	sl, r3
 801167e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011682:	d807      	bhi.n	8011694 <_printf_i+0x28>
 8011684:	2f62      	cmp	r7, #98	; 0x62
 8011686:	d80a      	bhi.n	801169e <_printf_i+0x32>
 8011688:	2f00      	cmp	r7, #0
 801168a:	f000 80d8 	beq.w	801183e <_printf_i+0x1d2>
 801168e:	2f58      	cmp	r7, #88	; 0x58
 8011690:	f000 80a3 	beq.w	80117da <_printf_i+0x16e>
 8011694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801169c:	e03a      	b.n	8011714 <_printf_i+0xa8>
 801169e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80116a2:	2b15      	cmp	r3, #21
 80116a4:	d8f6      	bhi.n	8011694 <_printf_i+0x28>
 80116a6:	a001      	add	r0, pc, #4	; (adr r0, 80116ac <_printf_i+0x40>)
 80116a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80116ac:	08011705 	.word	0x08011705
 80116b0:	08011719 	.word	0x08011719
 80116b4:	08011695 	.word	0x08011695
 80116b8:	08011695 	.word	0x08011695
 80116bc:	08011695 	.word	0x08011695
 80116c0:	08011695 	.word	0x08011695
 80116c4:	08011719 	.word	0x08011719
 80116c8:	08011695 	.word	0x08011695
 80116cc:	08011695 	.word	0x08011695
 80116d0:	08011695 	.word	0x08011695
 80116d4:	08011695 	.word	0x08011695
 80116d8:	08011825 	.word	0x08011825
 80116dc:	08011749 	.word	0x08011749
 80116e0:	08011807 	.word	0x08011807
 80116e4:	08011695 	.word	0x08011695
 80116e8:	08011695 	.word	0x08011695
 80116ec:	08011847 	.word	0x08011847
 80116f0:	08011695 	.word	0x08011695
 80116f4:	08011749 	.word	0x08011749
 80116f8:	08011695 	.word	0x08011695
 80116fc:	08011695 	.word	0x08011695
 8011700:	0801180f 	.word	0x0801180f
 8011704:	680b      	ldr	r3, [r1, #0]
 8011706:	1d1a      	adds	r2, r3, #4
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	600a      	str	r2, [r1, #0]
 801170c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011714:	2301      	movs	r3, #1
 8011716:	e0a3      	b.n	8011860 <_printf_i+0x1f4>
 8011718:	6825      	ldr	r5, [r4, #0]
 801171a:	6808      	ldr	r0, [r1, #0]
 801171c:	062e      	lsls	r6, r5, #24
 801171e:	f100 0304 	add.w	r3, r0, #4
 8011722:	d50a      	bpl.n	801173a <_printf_i+0xce>
 8011724:	6805      	ldr	r5, [r0, #0]
 8011726:	600b      	str	r3, [r1, #0]
 8011728:	2d00      	cmp	r5, #0
 801172a:	da03      	bge.n	8011734 <_printf_i+0xc8>
 801172c:	232d      	movs	r3, #45	; 0x2d
 801172e:	426d      	negs	r5, r5
 8011730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011734:	485e      	ldr	r0, [pc, #376]	; (80118b0 <_printf_i+0x244>)
 8011736:	230a      	movs	r3, #10
 8011738:	e019      	b.n	801176e <_printf_i+0x102>
 801173a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801173e:	6805      	ldr	r5, [r0, #0]
 8011740:	600b      	str	r3, [r1, #0]
 8011742:	bf18      	it	ne
 8011744:	b22d      	sxthne	r5, r5
 8011746:	e7ef      	b.n	8011728 <_printf_i+0xbc>
 8011748:	680b      	ldr	r3, [r1, #0]
 801174a:	6825      	ldr	r5, [r4, #0]
 801174c:	1d18      	adds	r0, r3, #4
 801174e:	6008      	str	r0, [r1, #0]
 8011750:	0628      	lsls	r0, r5, #24
 8011752:	d501      	bpl.n	8011758 <_printf_i+0xec>
 8011754:	681d      	ldr	r5, [r3, #0]
 8011756:	e002      	b.n	801175e <_printf_i+0xf2>
 8011758:	0669      	lsls	r1, r5, #25
 801175a:	d5fb      	bpl.n	8011754 <_printf_i+0xe8>
 801175c:	881d      	ldrh	r5, [r3, #0]
 801175e:	4854      	ldr	r0, [pc, #336]	; (80118b0 <_printf_i+0x244>)
 8011760:	2f6f      	cmp	r7, #111	; 0x6f
 8011762:	bf0c      	ite	eq
 8011764:	2308      	moveq	r3, #8
 8011766:	230a      	movne	r3, #10
 8011768:	2100      	movs	r1, #0
 801176a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801176e:	6866      	ldr	r6, [r4, #4]
 8011770:	60a6      	str	r6, [r4, #8]
 8011772:	2e00      	cmp	r6, #0
 8011774:	bfa2      	ittt	ge
 8011776:	6821      	ldrge	r1, [r4, #0]
 8011778:	f021 0104 	bicge.w	r1, r1, #4
 801177c:	6021      	strge	r1, [r4, #0]
 801177e:	b90d      	cbnz	r5, 8011784 <_printf_i+0x118>
 8011780:	2e00      	cmp	r6, #0
 8011782:	d04d      	beq.n	8011820 <_printf_i+0x1b4>
 8011784:	4616      	mov	r6, r2
 8011786:	fbb5 f1f3 	udiv	r1, r5, r3
 801178a:	fb03 5711 	mls	r7, r3, r1, r5
 801178e:	5dc7      	ldrb	r7, [r0, r7]
 8011790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011794:	462f      	mov	r7, r5
 8011796:	42bb      	cmp	r3, r7
 8011798:	460d      	mov	r5, r1
 801179a:	d9f4      	bls.n	8011786 <_printf_i+0x11a>
 801179c:	2b08      	cmp	r3, #8
 801179e:	d10b      	bne.n	80117b8 <_printf_i+0x14c>
 80117a0:	6823      	ldr	r3, [r4, #0]
 80117a2:	07df      	lsls	r7, r3, #31
 80117a4:	d508      	bpl.n	80117b8 <_printf_i+0x14c>
 80117a6:	6923      	ldr	r3, [r4, #16]
 80117a8:	6861      	ldr	r1, [r4, #4]
 80117aa:	4299      	cmp	r1, r3
 80117ac:	bfde      	ittt	le
 80117ae:	2330      	movle	r3, #48	; 0x30
 80117b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80117b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80117b8:	1b92      	subs	r2, r2, r6
 80117ba:	6122      	str	r2, [r4, #16]
 80117bc:	f8cd a000 	str.w	sl, [sp]
 80117c0:	464b      	mov	r3, r9
 80117c2:	aa03      	add	r2, sp, #12
 80117c4:	4621      	mov	r1, r4
 80117c6:	4640      	mov	r0, r8
 80117c8:	f7ff fee2 	bl	8011590 <_printf_common>
 80117cc:	3001      	adds	r0, #1
 80117ce:	d14c      	bne.n	801186a <_printf_i+0x1fe>
 80117d0:	f04f 30ff 	mov.w	r0, #4294967295
 80117d4:	b004      	add	sp, #16
 80117d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117da:	4835      	ldr	r0, [pc, #212]	; (80118b0 <_printf_i+0x244>)
 80117dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80117e0:	6823      	ldr	r3, [r4, #0]
 80117e2:	680e      	ldr	r6, [r1, #0]
 80117e4:	061f      	lsls	r7, r3, #24
 80117e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80117ea:	600e      	str	r6, [r1, #0]
 80117ec:	d514      	bpl.n	8011818 <_printf_i+0x1ac>
 80117ee:	07d9      	lsls	r1, r3, #31
 80117f0:	bf44      	itt	mi
 80117f2:	f043 0320 	orrmi.w	r3, r3, #32
 80117f6:	6023      	strmi	r3, [r4, #0]
 80117f8:	b91d      	cbnz	r5, 8011802 <_printf_i+0x196>
 80117fa:	6823      	ldr	r3, [r4, #0]
 80117fc:	f023 0320 	bic.w	r3, r3, #32
 8011800:	6023      	str	r3, [r4, #0]
 8011802:	2310      	movs	r3, #16
 8011804:	e7b0      	b.n	8011768 <_printf_i+0xfc>
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	f043 0320 	orr.w	r3, r3, #32
 801180c:	6023      	str	r3, [r4, #0]
 801180e:	2378      	movs	r3, #120	; 0x78
 8011810:	4828      	ldr	r0, [pc, #160]	; (80118b4 <_printf_i+0x248>)
 8011812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011816:	e7e3      	b.n	80117e0 <_printf_i+0x174>
 8011818:	065e      	lsls	r6, r3, #25
 801181a:	bf48      	it	mi
 801181c:	b2ad      	uxthmi	r5, r5
 801181e:	e7e6      	b.n	80117ee <_printf_i+0x182>
 8011820:	4616      	mov	r6, r2
 8011822:	e7bb      	b.n	801179c <_printf_i+0x130>
 8011824:	680b      	ldr	r3, [r1, #0]
 8011826:	6826      	ldr	r6, [r4, #0]
 8011828:	6960      	ldr	r0, [r4, #20]
 801182a:	1d1d      	adds	r5, r3, #4
 801182c:	600d      	str	r5, [r1, #0]
 801182e:	0635      	lsls	r5, r6, #24
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	d501      	bpl.n	8011838 <_printf_i+0x1cc>
 8011834:	6018      	str	r0, [r3, #0]
 8011836:	e002      	b.n	801183e <_printf_i+0x1d2>
 8011838:	0671      	lsls	r1, r6, #25
 801183a:	d5fb      	bpl.n	8011834 <_printf_i+0x1c8>
 801183c:	8018      	strh	r0, [r3, #0]
 801183e:	2300      	movs	r3, #0
 8011840:	6123      	str	r3, [r4, #16]
 8011842:	4616      	mov	r6, r2
 8011844:	e7ba      	b.n	80117bc <_printf_i+0x150>
 8011846:	680b      	ldr	r3, [r1, #0]
 8011848:	1d1a      	adds	r2, r3, #4
 801184a:	600a      	str	r2, [r1, #0]
 801184c:	681e      	ldr	r6, [r3, #0]
 801184e:	6862      	ldr	r2, [r4, #4]
 8011850:	2100      	movs	r1, #0
 8011852:	4630      	mov	r0, r6
 8011854:	f7ee fcf4 	bl	8000240 <memchr>
 8011858:	b108      	cbz	r0, 801185e <_printf_i+0x1f2>
 801185a:	1b80      	subs	r0, r0, r6
 801185c:	6060      	str	r0, [r4, #4]
 801185e:	6863      	ldr	r3, [r4, #4]
 8011860:	6123      	str	r3, [r4, #16]
 8011862:	2300      	movs	r3, #0
 8011864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011868:	e7a8      	b.n	80117bc <_printf_i+0x150>
 801186a:	6923      	ldr	r3, [r4, #16]
 801186c:	4632      	mov	r2, r6
 801186e:	4649      	mov	r1, r9
 8011870:	4640      	mov	r0, r8
 8011872:	47d0      	blx	sl
 8011874:	3001      	adds	r0, #1
 8011876:	d0ab      	beq.n	80117d0 <_printf_i+0x164>
 8011878:	6823      	ldr	r3, [r4, #0]
 801187a:	079b      	lsls	r3, r3, #30
 801187c:	d413      	bmi.n	80118a6 <_printf_i+0x23a>
 801187e:	68e0      	ldr	r0, [r4, #12]
 8011880:	9b03      	ldr	r3, [sp, #12]
 8011882:	4298      	cmp	r0, r3
 8011884:	bfb8      	it	lt
 8011886:	4618      	movlt	r0, r3
 8011888:	e7a4      	b.n	80117d4 <_printf_i+0x168>
 801188a:	2301      	movs	r3, #1
 801188c:	4632      	mov	r2, r6
 801188e:	4649      	mov	r1, r9
 8011890:	4640      	mov	r0, r8
 8011892:	47d0      	blx	sl
 8011894:	3001      	adds	r0, #1
 8011896:	d09b      	beq.n	80117d0 <_printf_i+0x164>
 8011898:	3501      	adds	r5, #1
 801189a:	68e3      	ldr	r3, [r4, #12]
 801189c:	9903      	ldr	r1, [sp, #12]
 801189e:	1a5b      	subs	r3, r3, r1
 80118a0:	42ab      	cmp	r3, r5
 80118a2:	dcf2      	bgt.n	801188a <_printf_i+0x21e>
 80118a4:	e7eb      	b.n	801187e <_printf_i+0x212>
 80118a6:	2500      	movs	r5, #0
 80118a8:	f104 0619 	add.w	r6, r4, #25
 80118ac:	e7f5      	b.n	801189a <_printf_i+0x22e>
 80118ae:	bf00      	nop
 80118b0:	08014d75 	.word	0x08014d75
 80118b4:	08014d86 	.word	0x08014d86

080118b8 <_sbrk_r>:
 80118b8:	b538      	push	{r3, r4, r5, lr}
 80118ba:	4d06      	ldr	r5, [pc, #24]	; (80118d4 <_sbrk_r+0x1c>)
 80118bc:	2300      	movs	r3, #0
 80118be:	4604      	mov	r4, r0
 80118c0:	4608      	mov	r0, r1
 80118c2:	602b      	str	r3, [r5, #0]
 80118c4:	f7ef f8c6 	bl	8000a54 <_sbrk>
 80118c8:	1c43      	adds	r3, r0, #1
 80118ca:	d102      	bne.n	80118d2 <_sbrk_r+0x1a>
 80118cc:	682b      	ldr	r3, [r5, #0]
 80118ce:	b103      	cbz	r3, 80118d2 <_sbrk_r+0x1a>
 80118d0:	6023      	str	r3, [r4, #0]
 80118d2:	bd38      	pop	{r3, r4, r5, pc}
 80118d4:	20007710 	.word	0x20007710

080118d8 <__sread>:
 80118d8:	b510      	push	{r4, lr}
 80118da:	460c      	mov	r4, r1
 80118dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118e0:	f000 fa6c 	bl	8011dbc <_read_r>
 80118e4:	2800      	cmp	r0, #0
 80118e6:	bfab      	itete	ge
 80118e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80118ea:	89a3      	ldrhlt	r3, [r4, #12]
 80118ec:	181b      	addge	r3, r3, r0
 80118ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80118f2:	bfac      	ite	ge
 80118f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80118f6:	81a3      	strhlt	r3, [r4, #12]
 80118f8:	bd10      	pop	{r4, pc}

080118fa <__swrite>:
 80118fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118fe:	461f      	mov	r7, r3
 8011900:	898b      	ldrh	r3, [r1, #12]
 8011902:	05db      	lsls	r3, r3, #23
 8011904:	4605      	mov	r5, r0
 8011906:	460c      	mov	r4, r1
 8011908:	4616      	mov	r6, r2
 801190a:	d505      	bpl.n	8011918 <__swrite+0x1e>
 801190c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011910:	2302      	movs	r3, #2
 8011912:	2200      	movs	r2, #0
 8011914:	f000 f9d0 	bl	8011cb8 <_lseek_r>
 8011918:	89a3      	ldrh	r3, [r4, #12]
 801191a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801191e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011922:	81a3      	strh	r3, [r4, #12]
 8011924:	4632      	mov	r2, r6
 8011926:	463b      	mov	r3, r7
 8011928:	4628      	mov	r0, r5
 801192a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801192e:	f000 b869 	b.w	8011a04 <_write_r>

08011932 <__sseek>:
 8011932:	b510      	push	{r4, lr}
 8011934:	460c      	mov	r4, r1
 8011936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801193a:	f000 f9bd 	bl	8011cb8 <_lseek_r>
 801193e:	1c43      	adds	r3, r0, #1
 8011940:	89a3      	ldrh	r3, [r4, #12]
 8011942:	bf15      	itete	ne
 8011944:	6560      	strne	r0, [r4, #84]	; 0x54
 8011946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801194a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801194e:	81a3      	strheq	r3, [r4, #12]
 8011950:	bf18      	it	ne
 8011952:	81a3      	strhne	r3, [r4, #12]
 8011954:	bd10      	pop	{r4, pc}

08011956 <__sclose>:
 8011956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801195a:	f000 b8db 	b.w	8011b14 <_close_r>
	...

08011960 <__swbuf_r>:
 8011960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011962:	460e      	mov	r6, r1
 8011964:	4614      	mov	r4, r2
 8011966:	4605      	mov	r5, r0
 8011968:	b118      	cbz	r0, 8011972 <__swbuf_r+0x12>
 801196a:	6983      	ldr	r3, [r0, #24]
 801196c:	b90b      	cbnz	r3, 8011972 <__swbuf_r+0x12>
 801196e:	f7ff fb51 	bl	8011014 <__sinit>
 8011972:	4b21      	ldr	r3, [pc, #132]	; (80119f8 <__swbuf_r+0x98>)
 8011974:	429c      	cmp	r4, r3
 8011976:	d12b      	bne.n	80119d0 <__swbuf_r+0x70>
 8011978:	686c      	ldr	r4, [r5, #4]
 801197a:	69a3      	ldr	r3, [r4, #24]
 801197c:	60a3      	str	r3, [r4, #8]
 801197e:	89a3      	ldrh	r3, [r4, #12]
 8011980:	071a      	lsls	r2, r3, #28
 8011982:	d52f      	bpl.n	80119e4 <__swbuf_r+0x84>
 8011984:	6923      	ldr	r3, [r4, #16]
 8011986:	b36b      	cbz	r3, 80119e4 <__swbuf_r+0x84>
 8011988:	6923      	ldr	r3, [r4, #16]
 801198a:	6820      	ldr	r0, [r4, #0]
 801198c:	1ac0      	subs	r0, r0, r3
 801198e:	6963      	ldr	r3, [r4, #20]
 8011990:	b2f6      	uxtb	r6, r6
 8011992:	4283      	cmp	r3, r0
 8011994:	4637      	mov	r7, r6
 8011996:	dc04      	bgt.n	80119a2 <__swbuf_r+0x42>
 8011998:	4621      	mov	r1, r4
 801199a:	4628      	mov	r0, r5
 801199c:	f000 f950 	bl	8011c40 <_fflush_r>
 80119a0:	bb30      	cbnz	r0, 80119f0 <__swbuf_r+0x90>
 80119a2:	68a3      	ldr	r3, [r4, #8]
 80119a4:	3b01      	subs	r3, #1
 80119a6:	60a3      	str	r3, [r4, #8]
 80119a8:	6823      	ldr	r3, [r4, #0]
 80119aa:	1c5a      	adds	r2, r3, #1
 80119ac:	6022      	str	r2, [r4, #0]
 80119ae:	701e      	strb	r6, [r3, #0]
 80119b0:	6963      	ldr	r3, [r4, #20]
 80119b2:	3001      	adds	r0, #1
 80119b4:	4283      	cmp	r3, r0
 80119b6:	d004      	beq.n	80119c2 <__swbuf_r+0x62>
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	07db      	lsls	r3, r3, #31
 80119bc:	d506      	bpl.n	80119cc <__swbuf_r+0x6c>
 80119be:	2e0a      	cmp	r6, #10
 80119c0:	d104      	bne.n	80119cc <__swbuf_r+0x6c>
 80119c2:	4621      	mov	r1, r4
 80119c4:	4628      	mov	r0, r5
 80119c6:	f000 f93b 	bl	8011c40 <_fflush_r>
 80119ca:	b988      	cbnz	r0, 80119f0 <__swbuf_r+0x90>
 80119cc:	4638      	mov	r0, r7
 80119ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119d0:	4b0a      	ldr	r3, [pc, #40]	; (80119fc <__swbuf_r+0x9c>)
 80119d2:	429c      	cmp	r4, r3
 80119d4:	d101      	bne.n	80119da <__swbuf_r+0x7a>
 80119d6:	68ac      	ldr	r4, [r5, #8]
 80119d8:	e7cf      	b.n	801197a <__swbuf_r+0x1a>
 80119da:	4b09      	ldr	r3, [pc, #36]	; (8011a00 <__swbuf_r+0xa0>)
 80119dc:	429c      	cmp	r4, r3
 80119de:	bf08      	it	eq
 80119e0:	68ec      	ldreq	r4, [r5, #12]
 80119e2:	e7ca      	b.n	801197a <__swbuf_r+0x1a>
 80119e4:	4621      	mov	r1, r4
 80119e6:	4628      	mov	r0, r5
 80119e8:	f000 f81e 	bl	8011a28 <__swsetup_r>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d0cb      	beq.n	8011988 <__swbuf_r+0x28>
 80119f0:	f04f 37ff 	mov.w	r7, #4294967295
 80119f4:	e7ea      	b.n	80119cc <__swbuf_r+0x6c>
 80119f6:	bf00      	nop
 80119f8:	08014d24 	.word	0x08014d24
 80119fc:	08014d44 	.word	0x08014d44
 8011a00:	08014d04 	.word	0x08014d04

08011a04 <_write_r>:
 8011a04:	b538      	push	{r3, r4, r5, lr}
 8011a06:	4d07      	ldr	r5, [pc, #28]	; (8011a24 <_write_r+0x20>)
 8011a08:	4604      	mov	r4, r0
 8011a0a:	4608      	mov	r0, r1
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	2200      	movs	r2, #0
 8011a10:	602a      	str	r2, [r5, #0]
 8011a12:	461a      	mov	r2, r3
 8011a14:	f7ee ffcd 	bl	80009b2 <_write>
 8011a18:	1c43      	adds	r3, r0, #1
 8011a1a:	d102      	bne.n	8011a22 <_write_r+0x1e>
 8011a1c:	682b      	ldr	r3, [r5, #0]
 8011a1e:	b103      	cbz	r3, 8011a22 <_write_r+0x1e>
 8011a20:	6023      	str	r3, [r4, #0]
 8011a22:	bd38      	pop	{r3, r4, r5, pc}
 8011a24:	20007710 	.word	0x20007710

08011a28 <__swsetup_r>:
 8011a28:	4b32      	ldr	r3, [pc, #200]	; (8011af4 <__swsetup_r+0xcc>)
 8011a2a:	b570      	push	{r4, r5, r6, lr}
 8011a2c:	681d      	ldr	r5, [r3, #0]
 8011a2e:	4606      	mov	r6, r0
 8011a30:	460c      	mov	r4, r1
 8011a32:	b125      	cbz	r5, 8011a3e <__swsetup_r+0x16>
 8011a34:	69ab      	ldr	r3, [r5, #24]
 8011a36:	b913      	cbnz	r3, 8011a3e <__swsetup_r+0x16>
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f7ff faeb 	bl	8011014 <__sinit>
 8011a3e:	4b2e      	ldr	r3, [pc, #184]	; (8011af8 <__swsetup_r+0xd0>)
 8011a40:	429c      	cmp	r4, r3
 8011a42:	d10f      	bne.n	8011a64 <__swsetup_r+0x3c>
 8011a44:	686c      	ldr	r4, [r5, #4]
 8011a46:	89a3      	ldrh	r3, [r4, #12]
 8011a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a4c:	0719      	lsls	r1, r3, #28
 8011a4e:	d42c      	bmi.n	8011aaa <__swsetup_r+0x82>
 8011a50:	06dd      	lsls	r5, r3, #27
 8011a52:	d411      	bmi.n	8011a78 <__swsetup_r+0x50>
 8011a54:	2309      	movs	r3, #9
 8011a56:	6033      	str	r3, [r6, #0]
 8011a58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a5c:	81a3      	strh	r3, [r4, #12]
 8011a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a62:	e03e      	b.n	8011ae2 <__swsetup_r+0xba>
 8011a64:	4b25      	ldr	r3, [pc, #148]	; (8011afc <__swsetup_r+0xd4>)
 8011a66:	429c      	cmp	r4, r3
 8011a68:	d101      	bne.n	8011a6e <__swsetup_r+0x46>
 8011a6a:	68ac      	ldr	r4, [r5, #8]
 8011a6c:	e7eb      	b.n	8011a46 <__swsetup_r+0x1e>
 8011a6e:	4b24      	ldr	r3, [pc, #144]	; (8011b00 <__swsetup_r+0xd8>)
 8011a70:	429c      	cmp	r4, r3
 8011a72:	bf08      	it	eq
 8011a74:	68ec      	ldreq	r4, [r5, #12]
 8011a76:	e7e6      	b.n	8011a46 <__swsetup_r+0x1e>
 8011a78:	0758      	lsls	r0, r3, #29
 8011a7a:	d512      	bpl.n	8011aa2 <__swsetup_r+0x7a>
 8011a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a7e:	b141      	cbz	r1, 8011a92 <__swsetup_r+0x6a>
 8011a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a84:	4299      	cmp	r1, r3
 8011a86:	d002      	beq.n	8011a8e <__swsetup_r+0x66>
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f7ff fb7d 	bl	8011188 <_free_r>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	6363      	str	r3, [r4, #52]	; 0x34
 8011a92:	89a3      	ldrh	r3, [r4, #12]
 8011a94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a98:	81a3      	strh	r3, [r4, #12]
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	6063      	str	r3, [r4, #4]
 8011a9e:	6923      	ldr	r3, [r4, #16]
 8011aa0:	6023      	str	r3, [r4, #0]
 8011aa2:	89a3      	ldrh	r3, [r4, #12]
 8011aa4:	f043 0308 	orr.w	r3, r3, #8
 8011aa8:	81a3      	strh	r3, [r4, #12]
 8011aaa:	6923      	ldr	r3, [r4, #16]
 8011aac:	b94b      	cbnz	r3, 8011ac2 <__swsetup_r+0x9a>
 8011aae:	89a3      	ldrh	r3, [r4, #12]
 8011ab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ab8:	d003      	beq.n	8011ac2 <__swsetup_r+0x9a>
 8011aba:	4621      	mov	r1, r4
 8011abc:	4630      	mov	r0, r6
 8011abe:	f000 f931 	bl	8011d24 <__smakebuf_r>
 8011ac2:	89a0      	ldrh	r0, [r4, #12]
 8011ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ac8:	f010 0301 	ands.w	r3, r0, #1
 8011acc:	d00a      	beq.n	8011ae4 <__swsetup_r+0xbc>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	60a3      	str	r3, [r4, #8]
 8011ad2:	6963      	ldr	r3, [r4, #20]
 8011ad4:	425b      	negs	r3, r3
 8011ad6:	61a3      	str	r3, [r4, #24]
 8011ad8:	6923      	ldr	r3, [r4, #16]
 8011ada:	b943      	cbnz	r3, 8011aee <__swsetup_r+0xc6>
 8011adc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011ae0:	d1ba      	bne.n	8011a58 <__swsetup_r+0x30>
 8011ae2:	bd70      	pop	{r4, r5, r6, pc}
 8011ae4:	0781      	lsls	r1, r0, #30
 8011ae6:	bf58      	it	pl
 8011ae8:	6963      	ldrpl	r3, [r4, #20]
 8011aea:	60a3      	str	r3, [r4, #8]
 8011aec:	e7f4      	b.n	8011ad8 <__swsetup_r+0xb0>
 8011aee:	2000      	movs	r0, #0
 8011af0:	e7f7      	b.n	8011ae2 <__swsetup_r+0xba>
 8011af2:	bf00      	nop
 8011af4:	20000018 	.word	0x20000018
 8011af8:	08014d24 	.word	0x08014d24
 8011afc:	08014d44 	.word	0x08014d44
 8011b00:	08014d04 	.word	0x08014d04

08011b04 <abort>:
 8011b04:	b508      	push	{r3, lr}
 8011b06:	2006      	movs	r0, #6
 8011b08:	f000 f992 	bl	8011e30 <raise>
 8011b0c:	2001      	movs	r0, #1
 8011b0e:	f7ee ff29 	bl	8000964 <_exit>
	...

08011b14 <_close_r>:
 8011b14:	b538      	push	{r3, r4, r5, lr}
 8011b16:	4d06      	ldr	r5, [pc, #24]	; (8011b30 <_close_r+0x1c>)
 8011b18:	2300      	movs	r3, #0
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	4608      	mov	r0, r1
 8011b1e:	602b      	str	r3, [r5, #0]
 8011b20:	f7ee ff63 	bl	80009ea <_close>
 8011b24:	1c43      	adds	r3, r0, #1
 8011b26:	d102      	bne.n	8011b2e <_close_r+0x1a>
 8011b28:	682b      	ldr	r3, [r5, #0]
 8011b2a:	b103      	cbz	r3, 8011b2e <_close_r+0x1a>
 8011b2c:	6023      	str	r3, [r4, #0]
 8011b2e:	bd38      	pop	{r3, r4, r5, pc}
 8011b30:	20007710 	.word	0x20007710

08011b34 <__sflush_r>:
 8011b34:	898a      	ldrh	r2, [r1, #12]
 8011b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b3a:	4605      	mov	r5, r0
 8011b3c:	0710      	lsls	r0, r2, #28
 8011b3e:	460c      	mov	r4, r1
 8011b40:	d458      	bmi.n	8011bf4 <__sflush_r+0xc0>
 8011b42:	684b      	ldr	r3, [r1, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	dc05      	bgt.n	8011b54 <__sflush_r+0x20>
 8011b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	dc02      	bgt.n	8011b54 <__sflush_r+0x20>
 8011b4e:	2000      	movs	r0, #0
 8011b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b56:	2e00      	cmp	r6, #0
 8011b58:	d0f9      	beq.n	8011b4e <__sflush_r+0x1a>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b60:	682f      	ldr	r7, [r5, #0]
 8011b62:	602b      	str	r3, [r5, #0]
 8011b64:	d032      	beq.n	8011bcc <__sflush_r+0x98>
 8011b66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b68:	89a3      	ldrh	r3, [r4, #12]
 8011b6a:	075a      	lsls	r2, r3, #29
 8011b6c:	d505      	bpl.n	8011b7a <__sflush_r+0x46>
 8011b6e:	6863      	ldr	r3, [r4, #4]
 8011b70:	1ac0      	subs	r0, r0, r3
 8011b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011b74:	b10b      	cbz	r3, 8011b7a <__sflush_r+0x46>
 8011b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011b78:	1ac0      	subs	r0, r0, r3
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b80:	6a21      	ldr	r1, [r4, #32]
 8011b82:	4628      	mov	r0, r5
 8011b84:	47b0      	blx	r6
 8011b86:	1c43      	adds	r3, r0, #1
 8011b88:	89a3      	ldrh	r3, [r4, #12]
 8011b8a:	d106      	bne.n	8011b9a <__sflush_r+0x66>
 8011b8c:	6829      	ldr	r1, [r5, #0]
 8011b8e:	291d      	cmp	r1, #29
 8011b90:	d82c      	bhi.n	8011bec <__sflush_r+0xb8>
 8011b92:	4a2a      	ldr	r2, [pc, #168]	; (8011c3c <__sflush_r+0x108>)
 8011b94:	40ca      	lsrs	r2, r1
 8011b96:	07d6      	lsls	r6, r2, #31
 8011b98:	d528      	bpl.n	8011bec <__sflush_r+0xb8>
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	6062      	str	r2, [r4, #4]
 8011b9e:	04d9      	lsls	r1, r3, #19
 8011ba0:	6922      	ldr	r2, [r4, #16]
 8011ba2:	6022      	str	r2, [r4, #0]
 8011ba4:	d504      	bpl.n	8011bb0 <__sflush_r+0x7c>
 8011ba6:	1c42      	adds	r2, r0, #1
 8011ba8:	d101      	bne.n	8011bae <__sflush_r+0x7a>
 8011baa:	682b      	ldr	r3, [r5, #0]
 8011bac:	b903      	cbnz	r3, 8011bb0 <__sflush_r+0x7c>
 8011bae:	6560      	str	r0, [r4, #84]	; 0x54
 8011bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bb2:	602f      	str	r7, [r5, #0]
 8011bb4:	2900      	cmp	r1, #0
 8011bb6:	d0ca      	beq.n	8011b4e <__sflush_r+0x1a>
 8011bb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bbc:	4299      	cmp	r1, r3
 8011bbe:	d002      	beq.n	8011bc6 <__sflush_r+0x92>
 8011bc0:	4628      	mov	r0, r5
 8011bc2:	f7ff fae1 	bl	8011188 <_free_r>
 8011bc6:	2000      	movs	r0, #0
 8011bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8011bca:	e7c1      	b.n	8011b50 <__sflush_r+0x1c>
 8011bcc:	6a21      	ldr	r1, [r4, #32]
 8011bce:	2301      	movs	r3, #1
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	47b0      	blx	r6
 8011bd4:	1c41      	adds	r1, r0, #1
 8011bd6:	d1c7      	bne.n	8011b68 <__sflush_r+0x34>
 8011bd8:	682b      	ldr	r3, [r5, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d0c4      	beq.n	8011b68 <__sflush_r+0x34>
 8011bde:	2b1d      	cmp	r3, #29
 8011be0:	d001      	beq.n	8011be6 <__sflush_r+0xb2>
 8011be2:	2b16      	cmp	r3, #22
 8011be4:	d101      	bne.n	8011bea <__sflush_r+0xb6>
 8011be6:	602f      	str	r7, [r5, #0]
 8011be8:	e7b1      	b.n	8011b4e <__sflush_r+0x1a>
 8011bea:	89a3      	ldrh	r3, [r4, #12]
 8011bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bf0:	81a3      	strh	r3, [r4, #12]
 8011bf2:	e7ad      	b.n	8011b50 <__sflush_r+0x1c>
 8011bf4:	690f      	ldr	r7, [r1, #16]
 8011bf6:	2f00      	cmp	r7, #0
 8011bf8:	d0a9      	beq.n	8011b4e <__sflush_r+0x1a>
 8011bfa:	0793      	lsls	r3, r2, #30
 8011bfc:	680e      	ldr	r6, [r1, #0]
 8011bfe:	bf08      	it	eq
 8011c00:	694b      	ldreq	r3, [r1, #20]
 8011c02:	600f      	str	r7, [r1, #0]
 8011c04:	bf18      	it	ne
 8011c06:	2300      	movne	r3, #0
 8011c08:	eba6 0807 	sub.w	r8, r6, r7
 8011c0c:	608b      	str	r3, [r1, #8]
 8011c0e:	f1b8 0f00 	cmp.w	r8, #0
 8011c12:	dd9c      	ble.n	8011b4e <__sflush_r+0x1a>
 8011c14:	6a21      	ldr	r1, [r4, #32]
 8011c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c18:	4643      	mov	r3, r8
 8011c1a:	463a      	mov	r2, r7
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	47b0      	blx	r6
 8011c20:	2800      	cmp	r0, #0
 8011c22:	dc06      	bgt.n	8011c32 <__sflush_r+0xfe>
 8011c24:	89a3      	ldrh	r3, [r4, #12]
 8011c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c2a:	81a3      	strh	r3, [r4, #12]
 8011c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c30:	e78e      	b.n	8011b50 <__sflush_r+0x1c>
 8011c32:	4407      	add	r7, r0
 8011c34:	eba8 0800 	sub.w	r8, r8, r0
 8011c38:	e7e9      	b.n	8011c0e <__sflush_r+0xda>
 8011c3a:	bf00      	nop
 8011c3c:	20400001 	.word	0x20400001

08011c40 <_fflush_r>:
 8011c40:	b538      	push	{r3, r4, r5, lr}
 8011c42:	690b      	ldr	r3, [r1, #16]
 8011c44:	4605      	mov	r5, r0
 8011c46:	460c      	mov	r4, r1
 8011c48:	b913      	cbnz	r3, 8011c50 <_fflush_r+0x10>
 8011c4a:	2500      	movs	r5, #0
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	bd38      	pop	{r3, r4, r5, pc}
 8011c50:	b118      	cbz	r0, 8011c5a <_fflush_r+0x1a>
 8011c52:	6983      	ldr	r3, [r0, #24]
 8011c54:	b90b      	cbnz	r3, 8011c5a <_fflush_r+0x1a>
 8011c56:	f7ff f9dd 	bl	8011014 <__sinit>
 8011c5a:	4b14      	ldr	r3, [pc, #80]	; (8011cac <_fflush_r+0x6c>)
 8011c5c:	429c      	cmp	r4, r3
 8011c5e:	d11b      	bne.n	8011c98 <_fflush_r+0x58>
 8011c60:	686c      	ldr	r4, [r5, #4]
 8011c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d0ef      	beq.n	8011c4a <_fflush_r+0xa>
 8011c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c6c:	07d0      	lsls	r0, r2, #31
 8011c6e:	d404      	bmi.n	8011c7a <_fflush_r+0x3a>
 8011c70:	0599      	lsls	r1, r3, #22
 8011c72:	d402      	bmi.n	8011c7a <_fflush_r+0x3a>
 8011c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c76:	f7ff fa7d 	bl	8011174 <__retarget_lock_acquire_recursive>
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	4621      	mov	r1, r4
 8011c7e:	f7ff ff59 	bl	8011b34 <__sflush_r>
 8011c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c84:	07da      	lsls	r2, r3, #31
 8011c86:	4605      	mov	r5, r0
 8011c88:	d4e0      	bmi.n	8011c4c <_fflush_r+0xc>
 8011c8a:	89a3      	ldrh	r3, [r4, #12]
 8011c8c:	059b      	lsls	r3, r3, #22
 8011c8e:	d4dd      	bmi.n	8011c4c <_fflush_r+0xc>
 8011c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c92:	f7ff fa70 	bl	8011176 <__retarget_lock_release_recursive>
 8011c96:	e7d9      	b.n	8011c4c <_fflush_r+0xc>
 8011c98:	4b05      	ldr	r3, [pc, #20]	; (8011cb0 <_fflush_r+0x70>)
 8011c9a:	429c      	cmp	r4, r3
 8011c9c:	d101      	bne.n	8011ca2 <_fflush_r+0x62>
 8011c9e:	68ac      	ldr	r4, [r5, #8]
 8011ca0:	e7df      	b.n	8011c62 <_fflush_r+0x22>
 8011ca2:	4b04      	ldr	r3, [pc, #16]	; (8011cb4 <_fflush_r+0x74>)
 8011ca4:	429c      	cmp	r4, r3
 8011ca6:	bf08      	it	eq
 8011ca8:	68ec      	ldreq	r4, [r5, #12]
 8011caa:	e7da      	b.n	8011c62 <_fflush_r+0x22>
 8011cac:	08014d24 	.word	0x08014d24
 8011cb0:	08014d44 	.word	0x08014d44
 8011cb4:	08014d04 	.word	0x08014d04

08011cb8 <_lseek_r>:
 8011cb8:	b538      	push	{r3, r4, r5, lr}
 8011cba:	4d07      	ldr	r5, [pc, #28]	; (8011cd8 <_lseek_r+0x20>)
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	4608      	mov	r0, r1
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	602a      	str	r2, [r5, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f7ee feb6 	bl	8000a38 <_lseek>
 8011ccc:	1c43      	adds	r3, r0, #1
 8011cce:	d102      	bne.n	8011cd6 <_lseek_r+0x1e>
 8011cd0:	682b      	ldr	r3, [r5, #0]
 8011cd2:	b103      	cbz	r3, 8011cd6 <_lseek_r+0x1e>
 8011cd4:	6023      	str	r3, [r4, #0]
 8011cd6:	bd38      	pop	{r3, r4, r5, pc}
 8011cd8:	20007710 	.word	0x20007710

08011cdc <__swhatbuf_r>:
 8011cdc:	b570      	push	{r4, r5, r6, lr}
 8011cde:	460e      	mov	r6, r1
 8011ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce4:	2900      	cmp	r1, #0
 8011ce6:	b096      	sub	sp, #88	; 0x58
 8011ce8:	4614      	mov	r4, r2
 8011cea:	461d      	mov	r5, r3
 8011cec:	da07      	bge.n	8011cfe <__swhatbuf_r+0x22>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	602b      	str	r3, [r5, #0]
 8011cf2:	89b3      	ldrh	r3, [r6, #12]
 8011cf4:	061a      	lsls	r2, r3, #24
 8011cf6:	d410      	bmi.n	8011d1a <__swhatbuf_r+0x3e>
 8011cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011cfc:	e00e      	b.n	8011d1c <__swhatbuf_r+0x40>
 8011cfe:	466a      	mov	r2, sp
 8011d00:	f000 f8b2 	bl	8011e68 <_fstat_r>
 8011d04:	2800      	cmp	r0, #0
 8011d06:	dbf2      	blt.n	8011cee <__swhatbuf_r+0x12>
 8011d08:	9a01      	ldr	r2, [sp, #4]
 8011d0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d12:	425a      	negs	r2, r3
 8011d14:	415a      	adcs	r2, r3
 8011d16:	602a      	str	r2, [r5, #0]
 8011d18:	e7ee      	b.n	8011cf8 <__swhatbuf_r+0x1c>
 8011d1a:	2340      	movs	r3, #64	; 0x40
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	6023      	str	r3, [r4, #0]
 8011d20:	b016      	add	sp, #88	; 0x58
 8011d22:	bd70      	pop	{r4, r5, r6, pc}

08011d24 <__smakebuf_r>:
 8011d24:	898b      	ldrh	r3, [r1, #12]
 8011d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d28:	079d      	lsls	r5, r3, #30
 8011d2a:	4606      	mov	r6, r0
 8011d2c:	460c      	mov	r4, r1
 8011d2e:	d507      	bpl.n	8011d40 <__smakebuf_r+0x1c>
 8011d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d34:	6023      	str	r3, [r4, #0]
 8011d36:	6123      	str	r3, [r4, #16]
 8011d38:	2301      	movs	r3, #1
 8011d3a:	6163      	str	r3, [r4, #20]
 8011d3c:	b002      	add	sp, #8
 8011d3e:	bd70      	pop	{r4, r5, r6, pc}
 8011d40:	ab01      	add	r3, sp, #4
 8011d42:	466a      	mov	r2, sp
 8011d44:	f7ff ffca 	bl	8011cdc <__swhatbuf_r>
 8011d48:	9900      	ldr	r1, [sp, #0]
 8011d4a:	4605      	mov	r5, r0
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	f7ff fa6b 	bl	8011228 <_malloc_r>
 8011d52:	b948      	cbnz	r0, 8011d68 <__smakebuf_r+0x44>
 8011d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d58:	059a      	lsls	r2, r3, #22
 8011d5a:	d4ef      	bmi.n	8011d3c <__smakebuf_r+0x18>
 8011d5c:	f023 0303 	bic.w	r3, r3, #3
 8011d60:	f043 0302 	orr.w	r3, r3, #2
 8011d64:	81a3      	strh	r3, [r4, #12]
 8011d66:	e7e3      	b.n	8011d30 <__smakebuf_r+0xc>
 8011d68:	4b0d      	ldr	r3, [pc, #52]	; (8011da0 <__smakebuf_r+0x7c>)
 8011d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011d6c:	89a3      	ldrh	r3, [r4, #12]
 8011d6e:	6020      	str	r0, [r4, #0]
 8011d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d74:	81a3      	strh	r3, [r4, #12]
 8011d76:	9b00      	ldr	r3, [sp, #0]
 8011d78:	6163      	str	r3, [r4, #20]
 8011d7a:	9b01      	ldr	r3, [sp, #4]
 8011d7c:	6120      	str	r0, [r4, #16]
 8011d7e:	b15b      	cbz	r3, 8011d98 <__smakebuf_r+0x74>
 8011d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d84:	4630      	mov	r0, r6
 8011d86:	f000 f881 	bl	8011e8c <_isatty_r>
 8011d8a:	b128      	cbz	r0, 8011d98 <__smakebuf_r+0x74>
 8011d8c:	89a3      	ldrh	r3, [r4, #12]
 8011d8e:	f023 0303 	bic.w	r3, r3, #3
 8011d92:	f043 0301 	orr.w	r3, r3, #1
 8011d96:	81a3      	strh	r3, [r4, #12]
 8011d98:	89a0      	ldrh	r0, [r4, #12]
 8011d9a:	4305      	orrs	r5, r0
 8011d9c:	81a5      	strh	r5, [r4, #12]
 8011d9e:	e7cd      	b.n	8011d3c <__smakebuf_r+0x18>
 8011da0:	08010fad 	.word	0x08010fad

08011da4 <__malloc_lock>:
 8011da4:	4801      	ldr	r0, [pc, #4]	; (8011dac <__malloc_lock+0x8>)
 8011da6:	f7ff b9e5 	b.w	8011174 <__retarget_lock_acquire_recursive>
 8011daa:	bf00      	nop
 8011dac:	20007718 	.word	0x20007718

08011db0 <__malloc_unlock>:
 8011db0:	4801      	ldr	r0, [pc, #4]	; (8011db8 <__malloc_unlock+0x8>)
 8011db2:	f7ff b9e0 	b.w	8011176 <__retarget_lock_release_recursive>
 8011db6:	bf00      	nop
 8011db8:	20007718 	.word	0x20007718

08011dbc <_read_r>:
 8011dbc:	b538      	push	{r3, r4, r5, lr}
 8011dbe:	4d07      	ldr	r5, [pc, #28]	; (8011ddc <_read_r+0x20>)
 8011dc0:	4604      	mov	r4, r0
 8011dc2:	4608      	mov	r0, r1
 8011dc4:	4611      	mov	r1, r2
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	602a      	str	r2, [r5, #0]
 8011dca:	461a      	mov	r2, r3
 8011dcc:	f7ee fdd4 	bl	8000978 <_read>
 8011dd0:	1c43      	adds	r3, r0, #1
 8011dd2:	d102      	bne.n	8011dda <_read_r+0x1e>
 8011dd4:	682b      	ldr	r3, [r5, #0]
 8011dd6:	b103      	cbz	r3, 8011dda <_read_r+0x1e>
 8011dd8:	6023      	str	r3, [r4, #0]
 8011dda:	bd38      	pop	{r3, r4, r5, pc}
 8011ddc:	20007710 	.word	0x20007710

08011de0 <_raise_r>:
 8011de0:	291f      	cmp	r1, #31
 8011de2:	b538      	push	{r3, r4, r5, lr}
 8011de4:	4604      	mov	r4, r0
 8011de6:	460d      	mov	r5, r1
 8011de8:	d904      	bls.n	8011df4 <_raise_r+0x14>
 8011dea:	2316      	movs	r3, #22
 8011dec:	6003      	str	r3, [r0, #0]
 8011dee:	f04f 30ff 	mov.w	r0, #4294967295
 8011df2:	bd38      	pop	{r3, r4, r5, pc}
 8011df4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011df6:	b112      	cbz	r2, 8011dfe <_raise_r+0x1e>
 8011df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011dfc:	b94b      	cbnz	r3, 8011e12 <_raise_r+0x32>
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 f830 	bl	8011e64 <_getpid_r>
 8011e04:	462a      	mov	r2, r5
 8011e06:	4601      	mov	r1, r0
 8011e08:	4620      	mov	r0, r4
 8011e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e0e:	f000 b817 	b.w	8011e40 <_kill_r>
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d00a      	beq.n	8011e2c <_raise_r+0x4c>
 8011e16:	1c59      	adds	r1, r3, #1
 8011e18:	d103      	bne.n	8011e22 <_raise_r+0x42>
 8011e1a:	2316      	movs	r3, #22
 8011e1c:	6003      	str	r3, [r0, #0]
 8011e1e:	2001      	movs	r0, #1
 8011e20:	e7e7      	b.n	8011df2 <_raise_r+0x12>
 8011e22:	2400      	movs	r4, #0
 8011e24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011e28:	4628      	mov	r0, r5
 8011e2a:	4798      	blx	r3
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	e7e0      	b.n	8011df2 <_raise_r+0x12>

08011e30 <raise>:
 8011e30:	4b02      	ldr	r3, [pc, #8]	; (8011e3c <raise+0xc>)
 8011e32:	4601      	mov	r1, r0
 8011e34:	6818      	ldr	r0, [r3, #0]
 8011e36:	f7ff bfd3 	b.w	8011de0 <_raise_r>
 8011e3a:	bf00      	nop
 8011e3c:	20000018 	.word	0x20000018

08011e40 <_kill_r>:
 8011e40:	b538      	push	{r3, r4, r5, lr}
 8011e42:	4d07      	ldr	r5, [pc, #28]	; (8011e60 <_kill_r+0x20>)
 8011e44:	2300      	movs	r3, #0
 8011e46:	4604      	mov	r4, r0
 8011e48:	4608      	mov	r0, r1
 8011e4a:	4611      	mov	r1, r2
 8011e4c:	602b      	str	r3, [r5, #0]
 8011e4e:	f7ee fd77 	bl	8000940 <_kill>
 8011e52:	1c43      	adds	r3, r0, #1
 8011e54:	d102      	bne.n	8011e5c <_kill_r+0x1c>
 8011e56:	682b      	ldr	r3, [r5, #0]
 8011e58:	b103      	cbz	r3, 8011e5c <_kill_r+0x1c>
 8011e5a:	6023      	str	r3, [r4, #0]
 8011e5c:	bd38      	pop	{r3, r4, r5, pc}
 8011e5e:	bf00      	nop
 8011e60:	20007710 	.word	0x20007710

08011e64 <_getpid_r>:
 8011e64:	f7ee bd64 	b.w	8000930 <_getpid>

08011e68 <_fstat_r>:
 8011e68:	b538      	push	{r3, r4, r5, lr}
 8011e6a:	4d07      	ldr	r5, [pc, #28]	; (8011e88 <_fstat_r+0x20>)
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	4604      	mov	r4, r0
 8011e70:	4608      	mov	r0, r1
 8011e72:	4611      	mov	r1, r2
 8011e74:	602b      	str	r3, [r5, #0]
 8011e76:	f7ee fdc4 	bl	8000a02 <_fstat>
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	d102      	bne.n	8011e84 <_fstat_r+0x1c>
 8011e7e:	682b      	ldr	r3, [r5, #0]
 8011e80:	b103      	cbz	r3, 8011e84 <_fstat_r+0x1c>
 8011e82:	6023      	str	r3, [r4, #0]
 8011e84:	bd38      	pop	{r3, r4, r5, pc}
 8011e86:	bf00      	nop
 8011e88:	20007710 	.word	0x20007710

08011e8c <_isatty_r>:
 8011e8c:	b538      	push	{r3, r4, r5, lr}
 8011e8e:	4d06      	ldr	r5, [pc, #24]	; (8011ea8 <_isatty_r+0x1c>)
 8011e90:	2300      	movs	r3, #0
 8011e92:	4604      	mov	r4, r0
 8011e94:	4608      	mov	r0, r1
 8011e96:	602b      	str	r3, [r5, #0]
 8011e98:	f7ee fdc3 	bl	8000a22 <_isatty>
 8011e9c:	1c43      	adds	r3, r0, #1
 8011e9e:	d102      	bne.n	8011ea6 <_isatty_r+0x1a>
 8011ea0:	682b      	ldr	r3, [r5, #0]
 8011ea2:	b103      	cbz	r3, 8011ea6 <_isatty_r+0x1a>
 8011ea4:	6023      	str	r3, [r4, #0]
 8011ea6:	bd38      	pop	{r3, r4, r5, pc}
 8011ea8:	20007710 	.word	0x20007710

08011eac <_init>:
 8011eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eae:	bf00      	nop
 8011eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eb2:	bc08      	pop	{r3}
 8011eb4:	469e      	mov	lr, r3
 8011eb6:	4770      	bx	lr

08011eb8 <_fini>:
 8011eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eba:	bf00      	nop
 8011ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ebe:	bc08      	pop	{r3}
 8011ec0:	469e      	mov	lr, r3
 8011ec2:	4770      	bx	lr
