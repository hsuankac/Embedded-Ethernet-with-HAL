
07_eth_low_level_packet_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d20  08003d20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d28  08003d28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e28  20000070  08003da0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003e98  08003da0  00023e98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b17  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024db  00000000  00000000  00030bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00033090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  00033a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c854  00000000  00000000  00034330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3fe  00000000  00000000  00060b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011163f  00000000  00000000  0006ff82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001815c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e18  00000000  00000000  00181614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003c40 	.word	0x08003c40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003c40 	.word	0x08003c40

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <adc1_pa4_init>:

ADC_HandleTypeDef hadc1;


void adc1_pa4_init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
    ADC_ChannelConfTypeDef sConfig 	  = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <adc1_pa4_init+0xe0>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a2d      	ldr	r2, [pc, #180]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <adc1_pa4_init+0xe0>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <adc1_pa4_init+0xe0>)
 800061a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061e:	6453      	str	r3, [r2, #68]	; 0x44
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

	/*Set PA4 as analog pin*/
	GPIO_InitStruct.Pin  = SENSOR_PIN;
 800062c:	2310      	movs	r3, #16
 800062e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000630:	2303      	movs	r3, #3
 8000632:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(SENSOR_PORT,&GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	481f      	ldr	r0, [pc, #124]	; (80006bc <adc1_pa4_init+0xe4>)
 8000640:	f001 f82c 	bl	800169c <HAL_GPIO_Init>


	/*Configure ADC parameters*/

	hadc1.Instance =  ADC1;
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <adc1_pa4_init+0xec>)
 8000648:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler =  ADC_CLOCK_SYNC_PCLK_DIV8;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <adc1_pa4_init+0xe8>)
 800064c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000650:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution	  =  ADC_RESOLUTION_12B;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode   =  ADC_SCAN_DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <adc1_pa4_init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode	= DISABLE;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <adc1_pa4_init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <adc1_pa4_init+0xf0>)
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <adc1_pa4_init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000680:	2201      	movs	r2, #1
 8000682:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <adc1_pa4_init+0xe8>)
 800068e:	2201      	movs	r2, #1
 8000690:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000694:	f000 fb2a 	bl	8000cec <HAL_ADC_Init>

	sConfig.Channel = ADC_CHANNEL_4;
 8000698:	2304      	movs	r3, #4
 800069a:	60fb      	str	r3, [r7, #12]
	sConfig.Rank    = ADC_REGULAR_RANK_1;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime =  ADC_SAMPLETIME_480CYCLES;
 80006a0:	2307      	movs	r3, #7
 80006a2:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1,&sConfig);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <adc1_pa4_init+0xe8>)
 80006ac:	f000 fc48 	bl	8000f40 <HAL_ADC_ConfigChannel>


}
 80006b0:	bf00      	nop
 80006b2:	3730      	adds	r7, #48	; 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000
 80006c0:	20000098 	.word	0x20000098
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <leds_init>:
#include "leds.h"



void leds_init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef   GPIO_InitStruct = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <leds_init+0x4c>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <leds_init+0x4c>)
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	6313      	str	r3, [r2, #48]	; 0x30
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <leds_init+0x4c>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	f003 0302 	and.w	r3, r3, #2
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStruct.Pin  = GREEN_LED | BLUE_LED | RED_LED | CUSTOM_LED;
 80006f8:	f24c 0381 	movw	r3, #49281	; 0xc081
 80006fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull =  GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(LEDS_PORT,&GPIO_InitStruct);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <leds_init+0x50>)
 800070c:	f000 ffc6 	bl	800169c <HAL_GPIO_Init>
}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020400 	.word	0x40020400

08000720 <led_on>:


void led_on(uint32_t led)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	switch(led)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800072e:	d025      	beq.n	800077c <led_on+0x5c>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000736:	d828      	bhi.n	800078a <led_on+0x6a>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800073e:	d016      	beq.n	800076e <led_on+0x4e>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000746:	d820      	bhi.n	800078a <led_on+0x6a>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d003      	beq.n	8000756 <led_on+0x36>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b80      	cmp	r3, #128	; 0x80
 8000752:	d006      	beq.n	8000762 <led_on+0x42>
		case CUSTOM_LED:
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
			break;

	}
}
 8000754:	e019      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,GREEN_LED,GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <led_on+0x74>)
 800075c:	f001 f94a 	bl	80019f4 <HAL_GPIO_WritePin>
			break;
 8000760:	e013      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,BLUE_LED,GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <led_on+0x74>)
 8000768:	f001 f944 	bl	80019f4 <HAL_GPIO_WritePin>
			break;
 800076c:	e00d      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,RED_LED,GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <led_on+0x74>)
 8000776:	f001 f93d 	bl	80019f4 <HAL_GPIO_WritePin>
			break;
 800077a:	e006      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <led_on+0x74>)
 8000784:	f001 f936 	bl	80019f4 <HAL_GPIO_WritePin>
			break;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020400 	.word	0x40020400

08000798 <main>:
uint32_t g_hclk_freq, g_pclk1_freq,g_pclk2_freq;

uint32_t g_sensor_val;

int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_Init();
 800079c:	f000 fa1d 	bl	8000bda <HAL_Init>
	sysclock_config();
 80007a0:	f000 f83e 	bl	8000820 <sysclock_config>
	leds_init();
 80007a4:	f7ff ff92 	bl	80006cc <leds_init>
	uart3_tx_init();
 80007a8:	f000 f960 	bl	8000a6c <uart3_tx_init>
	adc1_pa4_init();
 80007ac:	f7ff ff14 	bl	80005d8 <adc1_pa4_init>

	g_hclk_freq = HAL_RCC_GetHCLKFreq();
 80007b0:	f001 fdda 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <main+0x70>)
 80007b8:	6013      	str	r3, [r2, #0]
	g_pclk1_freq = HAL_RCC_GetPCLK1Freq();
 80007ba:	f001 fde1 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a12      	ldr	r2, [pc, #72]	; (800080c <main+0x74>)
 80007c2:	6013      	str	r3, [r2, #0]
	g_pclk2_freq = HAL_RCC_GetPCLK2Freq();
 80007c4:	f001 fdf0 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a11      	ldr	r2, [pc, #68]	; (8000810 <main+0x78>)
 80007cc:	6013      	str	r3, [r2, #0]

	led_on(GREEN_LED);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff ffa6 	bl	8000720 <led_on>
	led_on(BLUE_LED);
 80007d4:	2080      	movs	r0, #128	; 0x80
 80007d6:	f7ff ffa3 	bl	8000720 <led_on>
	led_on(RED_LED);
 80007da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007de:	f7ff ff9f 	bl	8000720 <led_on>


	while(1)
	{

	  HAL_ADC_Start(&hadc1);
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <main+0x7c>)
 80007e4:	f000 fad0 	bl	8000d88 <HAL_ADC_Start>
	  g_sensor_val = HAL_ADC_GetValue(&hadc1);
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <main+0x7c>)
 80007ea:	f000 fb9b 	bl	8000f24 <HAL_ADC_GetValue>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <main+0x80>)
 80007f2:	6013      	str	r3, [r2, #0]

      printf("Sensor value :  %d   \n\r",(int)g_sensor_val);
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <main+0x80>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	4808      	ldr	r0, [pc, #32]	; (800081c <main+0x84>)
 80007fc:	f002 faca 	bl	8002d94 <iprintf>
      HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fa4f 	bl	8000ca4 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000806:	e7ec      	b.n	80007e2 <main+0x4a>
 8000808:	200000ec 	.word	0x200000ec
 800080c:	200000e0 	.word	0x200000e0
 8000810:	200000e8 	.word	0x200000e8
 8000814:	20000098 	.word	0x20000098
 8000818:	200000e4 	.word	0x200000e4
 800081c:	08003c58 	.word	0x08003c58

08000820 <sysclock_config>:




void sysclock_config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef		RCC_OscInitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2234      	movs	r2, #52	; 0x34
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 faa8 	bl	8002d84 <memset>
	RCC_ClkInitTypeDef		RCC_ClkInitStruct = {0};
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <sysclock_config+0xb4>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <sysclock_config+0xb4>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <sysclock_config+0xb4>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <sysclock_config+0xb8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <sysclock_config+0xb8>)
 8000862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <sysclock_config+0xb8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState		 = RCC_HSE_BYPASS;
 8000878:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800087c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM		 = 12;
 8000888:	230c      	movs	r3, #12
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN		 = 192;
 800088c:	23c0      	movs	r3, #192	; 0xc0
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ		 = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP		 = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f913 	bl	8001ac8 <HAL_RCC_OscConfig>

	/*Activate the over drive mode */
	HAL_PWREx_EnableOverDrive();
 80008a2:	f001 f8c1 	bl	8001a28 <HAL_PWREx_EnableOverDrive>


	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008a6:	230f      	movs	r3, #15
 80008a8:	60bb      	str	r3, [r7, #8]
								  |RCC_CLOCKTYPE_PCLK1 |RCC_CLOCKTYPE_PCLK2;

	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80008aa:	2302      	movs	r3, #2
 80008ac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	61bb      	str	r3, [r7, #24]

	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_6);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2106      	movs	r1, #6
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fbad 	bl	8002024 <HAL_RCC_ClockConfig>

}
 80008ca:	bf00      	nop
 80008cc:	3750      	adds	r7, #80	; 0x50
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40007000 	.word	0x40007000

080008dc <SysTick_Handler>:


extern ETH_HandleTypeDef heth;

void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80008e0:	f000 f9c0 	bl	8000c64 <HAL_IncTick>
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <ETH_IRQHandler>:


void ETH_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	HAL_ETH_IRQHandler(&heth);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <ETH_IRQHandler+0x10>)
 80008ee:	f000 fe50 	bl	8001592 <HAL_ETH_IRQHandler>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000207c 	.word	0x2000207c

080008fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e00a      	b.n	8000924 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800090e:	f3af 8000 	nop.w
 8000912:	4601      	mov	r1, r0
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	b2ca      	uxtb	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf0      	blt.n	800090e <_read+0x12>
	}

return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e009      	b.n	800095c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60ba      	str	r2, [r7, #8]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f879 	bl	8000a48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf1      	blt.n	8000948 <_write+0x12>
	}
	return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_close>:

int _close(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	return -1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000996:	605a      	str	r2, [r3, #4]
	return 0;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_isatty>:

int _isatty(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d205      	bcs.n	8000a14 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <_sbrk+0x6c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	371c      	adds	r7, #28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	20080000 	.word	0x20080000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	2000008c 	.word	0x2000008c
 8000a40:	20003e98 	.word	0x20003e98
 8000a44:	20003e88 	.word	0x20003e88

08000a48 <__io_putchar>:

static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate);


int __io_putchar(int ch)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,10);
 8000a50:	1d39      	adds	r1, r7, #4
 8000a52:	230a      	movs	r3, #10
 8000a54:	2201      	movs	r2, #1
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <__io_putchar+0x20>)
 8000a58:	f001 fd12 	bl	8002480 <HAL_UART_Transmit>
	return ch;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000f0 	.word	0x200000f0

08000a6c <uart3_tx_init>:

void uart3_tx_init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <uart3_tx_init+0xb8>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <uart3_tx_init+0xb8>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <uart3_tx_init+0xb8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]


	GPIO_InitStruct.Pin  = GPIO_PIN_8;
 8000a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aac:	2307      	movs	r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOD,&GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481c      	ldr	r0, [pc, #112]	; (8000b28 <uart3_tx_init+0xbc>)
 8000ab8:	f000 fdf0 	bl	800169c <HAL_GPIO_Init>


	__HAL_RCC_USART3_CLK_ENABLE();
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <uart3_tx_init+0xb8>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <uart3_tx_init+0xb8>)
 8000ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <uart3_tx_init+0xb8>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]


	huart3.Instance = USART3;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <uart3_tx_init+0xc0>)
 8000ad6:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <uart3_tx_init+0xc4>)
 8000ad8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <uart3_tx_init+0xc0>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <uart3_tx_init+0xc0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits   = UART_STOPBITS_1;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <uart3_tx_init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity	= UART_PARITY_NONE;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <uart3_tx_init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <uart3_tx_init+0xc0>)
 8000af6:	2208      	movs	r2, #8
 8000af8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <uart3_tx_init+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <uart3_tx_init+0xc0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling =  UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <uart3_tx_init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]

	HAL_UART_Init(&huart3);
 8000b0c:	4807      	ldr	r0, [pc, #28]	; (8000b2c <uart3_tx_init+0xc0>)
 8000b0e:	f001 fc5f 	bl	80023d0 <HAL_UART_Init>

   /*Set baudrate fix*/
	uart3_set_baudrate(16000000,115200);
 8000b12:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <uart3_tx_init+0xc8>)
 8000b18:	f000 f822 	bl	8000b60 <uart3_set_baudrate>
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	200000f0 	.word	0x200000f0
 8000b30:	40004800 	.word	0x40004800
 8000b34:	00f42400 	.word	0x00f42400

08000b38 <compute_uart_div>:



static uint16_t compute_uart_div(uint32_t periph_clock, uint32_t baudrate)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	return ((periph_clock + (baudrate/2U))/baudrate);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	085a      	lsrs	r2, r3, #1
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	441a      	add	r2, r3
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b50:	b29b      	uxth	r3, r3
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <uart3_set_baudrate>:


static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	USART3->BRR  = compute_uart_div(periph_clock,baudrate);
 8000b6a:	6839      	ldr	r1, [r7, #0]
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ffe3 	bl	8000b38 <compute_uart_div>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <uart3_set_baudrate+0x24>)
 8000b78:	60da      	str	r2, [r3, #12]
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40004800 	.word	0x40004800

08000b88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopForever+0xe>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopForever+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb6:	f002 f8c1 	bl	8002d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fded 	bl	8000798 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   r0, =_estack
 8000bc0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bcc:	08003d30 	.word	0x08003d30
  ldr r2, =_sbss
 8000bd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd4:	20003e98 	.word	0x20003e98

08000bd8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>

08000bda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 fca4 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 f80d 	bl	8000c04 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bea:	f000 f803 	bl	8000bf4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fca9 	bl	800157a <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 fc7f 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000174 	.word	0x20000174

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000174 	.word	0x20000174

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffde 	bl	8000c8c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008

08000cec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e031      	b.n	8000d66 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d109      	bne.n	8000d1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f832 	bl	8000d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d116      	bne.n	8000d58 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_ADC_Init+0x84>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	f043 0202 	orr.w	r2, r3, #2
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 fa4a 	bl	80011d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f023 0303 	bic.w	r3, r3, #3
 8000d4e:	f043 0201 	orr.w	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	641a      	str	r2, [r3, #64]	; 0x40
 8000d56:	e001      	b.n	8000d5c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	ffffeefd 	.word	0xffffeefd

08000d74 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d101      	bne.n	8000da2 <HAL_ADC_Start+0x1a>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e0ad      	b.n	8000efe <HAL_ADC_Start+0x176>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d018      	beq.n	8000dea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0201 	orr.w	r2, r2, #1
 8000dc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000dc8:	4b50      	ldr	r3, [pc, #320]	; (8000f0c <HAL_ADC_Start+0x184>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a50      	ldr	r2, [pc, #320]	; (8000f10 <HAL_ADC_Start+0x188>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9a      	lsrs	r2, r3, #18
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000ddc:	e002      	b.n	8000de4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f9      	bne.n	8000dde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d175      	bne.n	8000ee4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfc:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <HAL_ADC_Start+0x18c>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e32:	d106      	bne.n	8000e42 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e38:	f023 0206 	bic.w	r2, r3, #6
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e40:	e002      	b.n	8000e48 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e58:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_ADC_Start+0x190>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10f      	bne.n	8000e86 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d143      	bne.n	8000efc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	e03a      	b.n	8000efc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a24      	ldr	r2, [pc, #144]	; (8000f1c <HAL_ADC_Start+0x194>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d10e      	bne.n	8000eae <HAL_ADC_Start+0x126>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d107      	bne.n	8000eae <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eac:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_ADC_Start+0x190>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d120      	bne.n	8000efc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_ADC_Start+0x198>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d11b      	bne.n	8000efc <HAL_ADC_Start+0x174>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d114      	bne.n	8000efc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	e00b      	b.n	8000efc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f043 0210 	orr.w	r2, r3, #16
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f043 0201 	orr.w	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	fffff8fe 	.word	0xfffff8fe
 8000f18:	40012300 	.word	0x40012300
 8000f1c:	40012000 	.word	0x40012000
 8000f20:	40012200 	.word	0x40012200

08000f24 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x1c>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e12a      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x272>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d93a      	bls.n	8000fe2 <HAL_ADC_ConfigChannel+0xa2>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f74:	d035      	beq.n	8000fe2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68d9      	ldr	r1, [r3, #12]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	3b1e      	subs	r3, #30
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	400a      	ands	r2, r1
 8000f9a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a87      	ldr	r2, [pc, #540]	; (80011c0 <HAL_ADC_ConfigChannel+0x280>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d10a      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68d9      	ldr	r1, [r3, #12]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	061a      	lsls	r2, r3, #24
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fba:	e035      	b.n	8001028 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68d9      	ldr	r1, [r3, #12]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4403      	add	r3, r0
 8000fd4:	3b1e      	subs	r3, #30
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fe0:	e022      	b.n	8001028 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6919      	ldr	r1, [r3, #16]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43da      	mvns	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	400a      	ands	r2, r1
 8001004:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6919      	ldr	r1, [r3, #16]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	4603      	mov	r3, r0
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4403      	add	r3, r0
 800101e:	409a      	lsls	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b06      	cmp	r3, #6
 800102e:	d824      	bhi.n	800107a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3b05      	subs	r3, #5
 8001042:	221f      	movs	r2, #31
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43da      	mvns	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	400a      	ands	r2, r1
 8001050:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	3b05      	subs	r3, #5
 800106c:	fa00 f203 	lsl.w	r2, r0, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
 8001078:	e04c      	b.n	8001114 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b0c      	cmp	r3, #12
 8001080:	d824      	bhi.n	80010cc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	3b23      	subs	r3, #35	; 0x23
 8001094:	221f      	movs	r2, #31
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	400a      	ands	r2, r1
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	3b23      	subs	r3, #35	; 0x23
 80010be:	fa00 f203 	lsl.w	r2, r0, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ca:	e023      	b.n	8001114 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	3b41      	subs	r3, #65	; 0x41
 80010de:	221f      	movs	r2, #31
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43da      	mvns	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	400a      	ands	r2, r1
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3b41      	subs	r3, #65	; 0x41
 8001108:	fa00 f203 	lsl.w	r2, r0, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <HAL_ADC_ConfigChannel+0x284>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10a      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1f4>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001126:	d105      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <HAL_ADC_ConfigChannel+0x288>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4a26      	ldr	r2, [pc, #152]	; (80011c8 <HAL_ADC_ConfigChannel+0x288>)
 800112e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001132:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <HAL_ADC_ConfigChannel+0x284>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d109      	bne.n	8001152 <HAL_ADC_ConfigChannel+0x212>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d105      	bne.n	8001152 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_ADC_ConfigChannel+0x288>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_ADC_ConfigChannel+0x288>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001150:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_ADC_ConfigChannel+0x284>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d125      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x268>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_ADC_ConfigChannel+0x280>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d003      	beq.n	800116e <HAL_ADC_ConfigChannel+0x22e>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b11      	cmp	r3, #17
 800116c:	d11c      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_ADC_ConfigChannel+0x288>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <HAL_ADC_ConfigChannel+0x288>)
 8001174:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001178:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_ADC_ConfigChannel+0x280>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d111      	bne.n	80011a8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_ADC_ConfigChannel+0x28c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <HAL_ADC_ConfigChannel+0x290>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9a      	lsrs	r2, r3, #18
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800119a:	e002      	b.n	80011a2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3b01      	subs	r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f9      	bne.n	800119c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	10000012 	.word	0x10000012
 80011c4:	40012000 	.word	0x40012000
 80011c8:	40012300 	.word	0x40012300
 80011cc:	20000000 	.word	0x20000000
 80011d0:	431bde83 	.word	0x431bde83

080011d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80011dc:	4b78      	ldr	r3, [pc, #480]	; (80013c0 <ADC_Init+0x1ec>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a77      	ldr	r2, [pc, #476]	; (80013c0 <ADC_Init+0x1ec>)
 80011e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80011e6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80011e8:	4b75      	ldr	r3, [pc, #468]	; (80013c0 <ADC_Init+0x1ec>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4973      	ldr	r1, [pc, #460]	; (80013c0 <ADC_Init+0x1ec>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6859      	ldr	r1, [r3, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	021a      	lsls	r2, r3, #8
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800124a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6899      	ldr	r1, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <ADC_Init+0x1f0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d022      	beq.n	80012ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001276:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6899      	ldr	r1, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6899      	ldr	r1, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	e00f      	b.n	80012ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0202 	bic.w	r2, r2, #2
 80012dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6899      	ldr	r1, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	005a      	lsls	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d01b      	beq.n	8001334 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800130a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800131a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6859      	ldr	r1, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	3b01      	subs	r3, #1
 8001328:	035a      	lsls	r2, r3, #13
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	e007      	b.n	8001344 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001342:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	3b01      	subs	r3, #1
 8001360:	051a      	lsls	r2, r3, #20
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6899      	ldr	r1, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001386:	025a      	lsls	r2, r3, #9
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800139e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6899      	ldr	r1, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	029a      	lsls	r2, r3, #10
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40012300 	.word	0x40012300
 80013c4:	0f000001 	.word	0x0f000001

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <__NVIC_SetPriorityGrouping+0x40>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x40>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	05fa0000 	.word	0x05fa0000

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff47 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff5c 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffb0 	bl	80014e8 <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	f241 0314 	movw	r3, #4116	; 0x1014
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	2b40      	cmp	r3, #64	; 0x40
 80015ac:	d112      	bne.n	80015d4 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f860 	bl	8001674 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	f241 0314 	movw	r3, #4116	; 0x1014
 80015bc:	4413      	add	r3, r2
 80015be:	2240      	movs	r2, #64	; 0x40
 80015c0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80015d2:	e01b      	b.n	800160c <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80015dc:	4413      	add	r3, r2
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d111      	bne.n	800160c <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f839 	bl	8001660 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f241 0314 	movw	r3, #4116	; 0x1014
 80015f6:	4413      	add	r3, r2
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	f241 0314 	movw	r3, #4116	; 0x1014
 8001614:	4413      	add	r3, r2
 8001616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800161a:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f241 0314 	movw	r3, #4116	; 0x1014
 8001624:	4413      	add	r3, r2
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800162c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001630:	d112      	bne.n	8001658 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f828 	bl	8001688 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001640:	4413      	add	r3, r2
 8001642:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001646:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	e175      	b.n	80019a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 8164 	bne.w	80019a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d00b      	beq.n	80016fa <HAL_GPIO_Init+0x5e>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ee:	2b11      	cmp	r3, #17
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x100>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b12      	cmp	r3, #18
 800179a:	d123      	bne.n	80017e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	69b9      	ldr	r1, [r7, #24]
 80017e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80be 	beq.w	80019a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b66      	ldr	r3, [pc, #408]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a65      	ldr	r2, [pc, #404]	; (80019c0 <HAL_GPIO_Init+0x324>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_GPIO_Init+0x324>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800183e:	4a61      	ldr	r2, [pc, #388]	; (80019c4 <HAL_GPIO_Init+0x328>)
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_GPIO_Init+0x32c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d037      	beq.n	80018da <HAL_GPIO_Init+0x23e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a57      	ldr	r2, [pc, #348]	; (80019cc <HAL_GPIO_Init+0x330>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d031      	beq.n	80018d6 <HAL_GPIO_Init+0x23a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a56      	ldr	r2, [pc, #344]	; (80019d0 <HAL_GPIO_Init+0x334>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d02b      	beq.n	80018d2 <HAL_GPIO_Init+0x236>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a55      	ldr	r2, [pc, #340]	; (80019d4 <HAL_GPIO_Init+0x338>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d025      	beq.n	80018ce <HAL_GPIO_Init+0x232>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <HAL_GPIO_Init+0x33c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01f      	beq.n	80018ca <HAL_GPIO_Init+0x22e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a53      	ldr	r2, [pc, #332]	; (80019dc <HAL_GPIO_Init+0x340>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d019      	beq.n	80018c6 <HAL_GPIO_Init+0x22a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <HAL_GPIO_Init+0x344>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x226>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a51      	ldr	r2, [pc, #324]	; (80019e4 <HAL_GPIO_Init+0x348>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x222>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a50      	ldr	r2, [pc, #320]	; (80019e8 <HAL_GPIO_Init+0x34c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x21e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <HAL_GPIO_Init+0x350>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x21a>
 80018b2:	2309      	movs	r3, #9
 80018b4:	e012      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018b6:	230a      	movs	r3, #10
 80018b8:	e010      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018ba:	2308      	movs	r3, #8
 80018bc:	e00e      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018be:	2307      	movs	r3, #7
 80018c0:	e00c      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018c2:	2306      	movs	r3, #6
 80018c4:	e00a      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018c6:	2305      	movs	r3, #5
 80018c8:	e008      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018ca:	2304      	movs	r3, #4
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018ce:	2303      	movs	r3, #3
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x240>
 80018da:	2300      	movs	r3, #0
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018ec:	4935      	ldr	r1, [pc, #212]	; (80019c4 <HAL_GPIO_Init+0x328>)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_GPIO_Init+0x354>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800191e:	4a34      	ldr	r2, [pc, #208]	; (80019f0 <HAL_GPIO_Init+0x354>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_GPIO_Init+0x354>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001948:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <HAL_GPIO_Init+0x354>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <HAL_GPIO_Init+0x354>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001972:	4a1f      	ldr	r2, [pc, #124]	; (80019f0 <HAL_GPIO_Init+0x354>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_GPIO_Init+0x354>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <HAL_GPIO_Init+0x354>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3301      	adds	r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b0f      	cmp	r3, #15
 80019ac:	f67f ae86 	bls.w	80016bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40013800 	.word	0x40013800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40021400 	.word	0x40021400
 80019e0:	40021800 	.word	0x40021800
 80019e4:	40021c00 	.word	0x40021c00
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40022400 	.word	0x40022400
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a56:	f7ff f919 	bl	8000c8c <HAL_GetTick>
 8001a5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a5c:	e009      	b.n	8001a72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a5e:	f7ff f915 	bl	8000c8c <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a6c:	d901      	bls.n	8001a72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e022      	b.n	8001ab8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7e:	d1ee      	bne.n	8001a5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a8c:	f7ff f8fe 	bl	8000c8c <HAL_GetTick>
 8001a90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a92:	e009      	b.n	8001aa8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a94:	f7ff f8fa 	bl	8000c8c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa2:	d901      	bls.n	8001aa8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e007      	b.n	8001ab8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ab4:	d1ee      	bne.n	8001a94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e29b      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8087 	beq.w	8001bfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aec:	4b96      	ldr	r3, [pc, #600]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d00c      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af8:	4b93      	ldr	r3, [pc, #588]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d112      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62>
 8001b04:	4b90      	ldr	r3, [pc, #576]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b10:	d10b      	bne.n	8001b2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b12:	4b8d      	ldr	r3, [pc, #564]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d06c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x130>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d168      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e275      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x7a>
 8001b34:	4b84      	ldr	r3, [pc, #528]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a83      	ldr	r2, [pc, #524]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e02e      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x9c>
 8001b4a:	4b7f      	ldr	r3, [pc, #508]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a7e      	ldr	r2, [pc, #504]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b7c      	ldr	r3, [pc, #496]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7b      	ldr	r2, [pc, #492]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0xc0>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a75      	ldr	r2, [pc, #468]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b73      	ldr	r3, [pc, #460]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a72      	ldr	r2, [pc, #456]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xd8>
 8001b88:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6e      	ldr	r2, [pc, #440]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6b      	ldr	r2, [pc, #428]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f870 	bl	8000c8c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f86c 	bl	8000c8c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e229      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xe8>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f85c 	bl	8000c8c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f858 	bl	8000c8c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e215      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x110>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d069      	beq.n	8001cda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c06:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x190>
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d116      	bne.n	8001c58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x17a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e1e9      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	493d      	ldr	r1, [pc, #244]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	e040      	b.n	8001cda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d023      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a38      	ldr	r2, [pc, #224]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f80e 	bl	8000c8c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c74:	f7ff f80a 	bl	8000c8c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1c7      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4929      	ldr	r1, [pc, #164]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
 8001ca6:	e018      	b.n	8001cda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a26      	ldr	r2, [pc, #152]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ffea 	bl	8000c8c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7fe ffe6 	bl	8000c8c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1a3      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d038      	beq.n	8001d58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d019      	beq.n	8001d22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7fe ffc7 	bl	8000c8c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7fe ffc3 	bl	8000c8c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e180      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x23a>
 8001d20:	e01a      	b.n	8001d58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_RCC_OscConfig+0x280>)
 8001d28:	f023 0301 	bic.w	r3, r3, #1
 8001d2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7fe ffad 	bl	8000c8c <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d36:	f7fe ffa9 	bl	8000c8c <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d903      	bls.n	8001d4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e166      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
 8001d48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4c:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ee      	bne.n	8001d36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a4 	beq.w	8001eae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b8c      	ldr	r3, [pc, #560]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b89      	ldr	r3, [pc, #548]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a88      	ldr	r2, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b86      	ldr	r3, [pc, #536]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8e:	4b83      	ldr	r3, [pc, #524]	; (8001f9c <HAL_RCC_OscConfig+0x4d4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d9a:	4b80      	ldr	r3, [pc, #512]	; (8001f9c <HAL_RCC_OscConfig+0x4d4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7f      	ldr	r2, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x4d4>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7fe ff71 	bl	8000c8c <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dae:	f7fe ff6d 	bl	8000c8c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b64      	cmp	r3, #100	; 0x64
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e12a      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc0:	4b76      	ldr	r3, [pc, #472]	; (8001f9c <HAL_RCC_OscConfig+0x4d4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x31a>
 8001dd4:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a6f      	ldr	r2, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	e02d      	b.n	8001e3e <HAL_RCC_OscConfig+0x376>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x33c>
 8001dea:	4b6b      	ldr	r3, [pc, #428]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a6a      	ldr	r2, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a67      	ldr	r2, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	e01c      	b.n	8001e3e <HAL_RCC_OscConfig+0x376>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x35e>
 8001e0c:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a61      	ldr	r2, [pc, #388]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
 8001e18:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	4a5e      	ldr	r2, [pc, #376]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6713      	str	r3, [r2, #112]	; 0x70
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x376>
 8001e26:	4b5c      	ldr	r3, [pc, #368]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a5b      	ldr	r2, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d015      	beq.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7fe ff21 	bl	8000c8c <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe ff1d 	bl	8000c8c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0d8      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ee      	beq.n	8001e4e <HAL_RCC_OscConfig+0x386>
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7fe ff0b 	bl	8000c8c <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7fe ff07 	bl	8000c8c <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0c2      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80ae 	beq.w	8002014 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d06d      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d14b      	bne.n	8001f64 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fed8 	bl	8000c8c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe fed4 	bl	8000c8c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e091      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	085b      	lsrs	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	041b      	lsls	r3, r3, #16
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	071b      	lsls	r3, r3, #28
 8001f2a:	491b      	ldr	r1, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a18      	ldr	r2, [pc, #96]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7fe fea6 	bl	8000c8c <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe fea2 	bl	8000c8c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e05f      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x47c>
 8001f62:	e057      	b.n	8002014 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7fe fe8c 	bl	8000c8c <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7fe fe88 	bl	8000c8c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e045      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4b0>
 8001f96:	e03d      	b.n	8002014 <HAL_RCC_OscConfig+0x54c>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCC_OscConfig+0x558>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d030      	beq.n	8002010 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d129      	bne.n	8002010 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d122      	bne.n	8002010 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d119      	bne.n	8002010 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10f      	bne.n	8002010 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0d0      	b.n	80021de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d910      	bls.n	800206c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 020f 	bic.w	r2, r3, #15
 8002052:	4965      	ldr	r1, [pc, #404]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b8      	b.n	80021de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 800208a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800208e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80020a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	494d      	ldr	r1, [pc, #308]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d040      	beq.n	8002148 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07f      	b.n	80021de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e073      	b.n	80021de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06b      	b.n	80021de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b39      	ldr	r3, [pc, #228]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4936      	ldr	r1, [pc, #216]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002118:	f7fe fdb8 	bl	8000c8c <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fdb4 	bl	8000c8c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e053      	b.n	80021de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d210      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 020f 	bic.w	r2, r3, #15
 800215e:	4922      	ldr	r1, [pc, #136]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e032      	b.n	80021de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4916      	ldr	r1, [pc, #88]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b6:	f000 f821 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490a      	ldr	r1, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x1cc>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1d0>)
 80021d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1d4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fd14 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023c00 	.word	0x40023c00
 80021ec:	40023800 	.word	0x40023800
 80021f0:	08003c70 	.word	0x08003c70
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002202:	2100      	movs	r1, #0
 8002204:	6079      	str	r1, [r7, #4]
 8002206:	2100      	movs	r1, #0
 8002208:	60f9      	str	r1, [r7, #12]
 800220a:	2100      	movs	r1, #0
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800220e:	2100      	movs	r1, #0
 8002210:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002212:	4952      	ldr	r1, [pc, #328]	; (800235c <HAL_RCC_GetSysClockFreq+0x160>)
 8002214:	6889      	ldr	r1, [r1, #8]
 8002216:	f001 010c 	and.w	r1, r1, #12
 800221a:	2908      	cmp	r1, #8
 800221c:	d00d      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x3e>
 800221e:	2908      	cmp	r1, #8
 8002220:	f200 8094 	bhi.w	800234c <HAL_RCC_GetSysClockFreq+0x150>
 8002224:	2900      	cmp	r1, #0
 8002226:	d002      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x32>
 8002228:	2904      	cmp	r1, #4
 800222a:	d003      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x38>
 800222c:	e08e      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800222e:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <HAL_RCC_GetSysClockFreq+0x164>)
 8002230:	60bb      	str	r3, [r7, #8]
      break;
 8002232:	e08e      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <HAL_RCC_GetSysClockFreq+0x168>)
 8002236:	60bb      	str	r3, [r7, #8]
      break;
 8002238:	e08b      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800223a:	4948      	ldr	r1, [pc, #288]	; (800235c <HAL_RCC_GetSysClockFreq+0x160>)
 800223c:	6849      	ldr	r1, [r1, #4]
 800223e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002242:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002244:	4945      	ldr	r1, [pc, #276]	; (800235c <HAL_RCC_GetSysClockFreq+0x160>)
 8002246:	6849      	ldr	r1, [r1, #4]
 8002248:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800224c:	2900      	cmp	r1, #0
 800224e:	d024      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002250:	4942      	ldr	r1, [pc, #264]	; (800235c <HAL_RCC_GetSysClockFreq+0x160>)
 8002252:	6849      	ldr	r1, [r1, #4]
 8002254:	0989      	lsrs	r1, r1, #6
 8002256:	4608      	mov	r0, r1
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002260:	f04f 0500 	mov.w	r5, #0
 8002264:	ea00 0204 	and.w	r2, r0, r4
 8002268:	ea01 0305 	and.w	r3, r1, r5
 800226c:	493d      	ldr	r1, [pc, #244]	; (8002364 <HAL_RCC_GetSysClockFreq+0x168>)
 800226e:	fb01 f003 	mul.w	r0, r1, r3
 8002272:	2100      	movs	r1, #0
 8002274:	fb01 f102 	mul.w	r1, r1, r2
 8002278:	1844      	adds	r4, r0, r1
 800227a:	493a      	ldr	r1, [pc, #232]	; (8002364 <HAL_RCC_GetSysClockFreq+0x168>)
 800227c:	fba2 0101 	umull	r0, r1, r2, r1
 8002280:	1863      	adds	r3, r4, r1
 8002282:	4619      	mov	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	f7fe f828 	bl	80002e0 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e04a      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <HAL_RCC_GetSysClockFreq+0x160>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	461a      	mov	r2, r3
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	ea02 0400 	and.w	r4, r2, r0
 80022b2:	ea03 0501 	and.w	r5, r3, r1
 80022b6:	4620      	mov	r0, r4
 80022b8:	4629      	mov	r1, r5
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	014b      	lsls	r3, r1, #5
 80022c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022c8:	0142      	lsls	r2, r0, #5
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	1b00      	subs	r0, r0, r4
 80022d0:	eb61 0105 	sbc.w	r1, r1, r5
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	018b      	lsls	r3, r1, #6
 80022de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022e2:	0182      	lsls	r2, r0, #6
 80022e4:	1a12      	subs	r2, r2, r0
 80022e6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ea:	f04f 0000 	mov.w	r0, #0
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	00d9      	lsls	r1, r3, #3
 80022f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022f8:	00d0      	lsls	r0, r2, #3
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	1912      	adds	r2, r2, r4
 8002300:	eb45 0303 	adc.w	r3, r5, r3
 8002304:	f04f 0000 	mov.w	r0, #0
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	0299      	lsls	r1, r3, #10
 800230e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002312:	0290      	lsls	r0, r2, #10
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	f7fd ffdc 	bl	80002e0 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_RCC_GetSysClockFreq+0x160>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	0c1b      	lsrs	r3, r3, #16
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	3301      	adds	r3, #1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	60bb      	str	r3, [r7, #8]
      break;
 800234a:	e002      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_RCC_GetSysClockFreq+0x164>)
 800234e:	60bb      	str	r3, [r7, #8]
      break;
 8002350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002352:	68bb      	ldr	r3, [r7, #8]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bdb0      	pop	{r4, r5, r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	00f42400 	.word	0x00f42400
 8002364:	017d7840 	.word	0x017d7840

08002368 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_RCC_GetHCLKFreq+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000000 	.word	0x20000000

08002380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002384:	f7ff fff0 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0a9b      	lsrs	r3, r3, #10
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4903      	ldr	r1, [pc, #12]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08003c80 	.word	0x08003c80

080023a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ac:	f7ff ffdc 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0b5b      	lsrs	r3, r3, #13
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	; (80023cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08003c80 	.word	0x08003c80

080023d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e040      	b.n	8002464 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f83a 	bl	800246c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2224      	movs	r2, #36	; 0x24
 80023fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8ca 	bl	80025a8 <UART_SetConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e022      	b.n	8002464 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fb20 	bl	8002a6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800243a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800244a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fba7 	bl	8002bb0 <UART_CheckIdleState>
 8002462:	4603      	mov	r3, r0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002494:	2b20      	cmp	r3, #32
 8002496:	f040 8081 	bne.w	800259c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_UART_Transmit+0x26>
 80024a0:	88fb      	ldrh	r3, [r7, #6]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e079      	b.n	800259e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_UART_Transmit+0x38>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e072      	b.n	800259e <HAL_UART_Transmit+0x11e>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2221      	movs	r2, #33	; 0x21
 80024cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ce:	f7fe fbdd 	bl	8000c8c <HAL_GetTick>
 80024d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	88fa      	ldrh	r2, [r7, #6]
 80024e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ec:	d108      	bne.n	8002500 <HAL_UART_Transmit+0x80>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d104      	bne.n	8002500 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	e003      	b.n	8002508 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002510:	e02c      	b.n	800256c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	2180      	movs	r1, #128	; 0x80
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fb90 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e038      	b.n	800259e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	3302      	adds	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	e007      	b.n	800255a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	781a      	ldrb	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	3301      	adds	r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1cc      	bne.n	8002512 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2200      	movs	r2, #0
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fb5d 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e005      	b.n	800259e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4ba7      	ldr	r3, [pc, #668]	; (8002870 <UART_SetConfig+0x2c8>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	6979      	ldr	r1, [r7, #20]
 80025dc:	430b      	orrs	r3, r1
 80025de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	430a      	orrs	r2, r1
 8002618:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a95      	ldr	r2, [pc, #596]	; (8002874 <UART_SetConfig+0x2cc>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d120      	bne.n	8002666 <UART_SetConfig+0xbe>
 8002624:	4b94      	ldr	r3, [pc, #592]	; (8002878 <UART_SetConfig+0x2d0>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b03      	cmp	r3, #3
 8002630:	d816      	bhi.n	8002660 <UART_SetConfig+0xb8>
 8002632:	a201      	add	r2, pc, #4	; (adr r2, 8002638 <UART_SetConfig+0x90>)
 8002634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002638:	08002649 	.word	0x08002649
 800263c:	08002655 	.word	0x08002655
 8002640:	0800264f 	.word	0x0800264f
 8002644:	0800265b 	.word	0x0800265b
 8002648:	2301      	movs	r3, #1
 800264a:	77fb      	strb	r3, [r7, #31]
 800264c:	e14f      	b.n	80028ee <UART_SetConfig+0x346>
 800264e:	2302      	movs	r3, #2
 8002650:	77fb      	strb	r3, [r7, #31]
 8002652:	e14c      	b.n	80028ee <UART_SetConfig+0x346>
 8002654:	2304      	movs	r3, #4
 8002656:	77fb      	strb	r3, [r7, #31]
 8002658:	e149      	b.n	80028ee <UART_SetConfig+0x346>
 800265a:	2308      	movs	r3, #8
 800265c:	77fb      	strb	r3, [r7, #31]
 800265e:	e146      	b.n	80028ee <UART_SetConfig+0x346>
 8002660:	2310      	movs	r3, #16
 8002662:	77fb      	strb	r3, [r7, #31]
 8002664:	e143      	b.n	80028ee <UART_SetConfig+0x346>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a84      	ldr	r2, [pc, #528]	; (800287c <UART_SetConfig+0x2d4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d132      	bne.n	80026d6 <UART_SetConfig+0x12e>
 8002670:	4b81      	ldr	r3, [pc, #516]	; (8002878 <UART_SetConfig+0x2d0>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d828      	bhi.n	80026d0 <UART_SetConfig+0x128>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <UART_SetConfig+0xdc>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026b9 	.word	0x080026b9
 8002688:	080026d1 	.word	0x080026d1
 800268c:	080026d1 	.word	0x080026d1
 8002690:	080026d1 	.word	0x080026d1
 8002694:	080026c5 	.word	0x080026c5
 8002698:	080026d1 	.word	0x080026d1
 800269c:	080026d1 	.word	0x080026d1
 80026a0:	080026d1 	.word	0x080026d1
 80026a4:	080026bf 	.word	0x080026bf
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	080026d1 	.word	0x080026d1
 80026b0:	080026d1 	.word	0x080026d1
 80026b4:	080026cb 	.word	0x080026cb
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
 80026bc:	e117      	b.n	80028ee <UART_SetConfig+0x346>
 80026be:	2302      	movs	r3, #2
 80026c0:	77fb      	strb	r3, [r7, #31]
 80026c2:	e114      	b.n	80028ee <UART_SetConfig+0x346>
 80026c4:	2304      	movs	r3, #4
 80026c6:	77fb      	strb	r3, [r7, #31]
 80026c8:	e111      	b.n	80028ee <UART_SetConfig+0x346>
 80026ca:	2308      	movs	r3, #8
 80026cc:	77fb      	strb	r3, [r7, #31]
 80026ce:	e10e      	b.n	80028ee <UART_SetConfig+0x346>
 80026d0:	2310      	movs	r3, #16
 80026d2:	77fb      	strb	r3, [r7, #31]
 80026d4:	e10b      	b.n	80028ee <UART_SetConfig+0x346>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <UART_SetConfig+0x2d8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d120      	bne.n	8002722 <UART_SetConfig+0x17a>
 80026e0:	4b65      	ldr	r3, [pc, #404]	; (8002878 <UART_SetConfig+0x2d0>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026ea:	2b30      	cmp	r3, #48	; 0x30
 80026ec:	d013      	beq.n	8002716 <UART_SetConfig+0x16e>
 80026ee:	2b30      	cmp	r3, #48	; 0x30
 80026f0:	d814      	bhi.n	800271c <UART_SetConfig+0x174>
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d009      	beq.n	800270a <UART_SetConfig+0x162>
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d810      	bhi.n	800271c <UART_SetConfig+0x174>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <UART_SetConfig+0x15c>
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d006      	beq.n	8002710 <UART_SetConfig+0x168>
 8002702:	e00b      	b.n	800271c <UART_SetConfig+0x174>
 8002704:	2300      	movs	r3, #0
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e0f1      	b.n	80028ee <UART_SetConfig+0x346>
 800270a:	2302      	movs	r3, #2
 800270c:	77fb      	strb	r3, [r7, #31]
 800270e:	e0ee      	b.n	80028ee <UART_SetConfig+0x346>
 8002710:	2304      	movs	r3, #4
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e0eb      	b.n	80028ee <UART_SetConfig+0x346>
 8002716:	2308      	movs	r3, #8
 8002718:	77fb      	strb	r3, [r7, #31]
 800271a:	e0e8      	b.n	80028ee <UART_SetConfig+0x346>
 800271c:	2310      	movs	r3, #16
 800271e:	77fb      	strb	r3, [r7, #31]
 8002720:	e0e5      	b.n	80028ee <UART_SetConfig+0x346>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a57      	ldr	r2, [pc, #348]	; (8002884 <UART_SetConfig+0x2dc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d120      	bne.n	800276e <UART_SetConfig+0x1c6>
 800272c:	4b52      	ldr	r3, [pc, #328]	; (8002878 <UART_SetConfig+0x2d0>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002736:	2bc0      	cmp	r3, #192	; 0xc0
 8002738:	d013      	beq.n	8002762 <UART_SetConfig+0x1ba>
 800273a:	2bc0      	cmp	r3, #192	; 0xc0
 800273c:	d814      	bhi.n	8002768 <UART_SetConfig+0x1c0>
 800273e:	2b80      	cmp	r3, #128	; 0x80
 8002740:	d009      	beq.n	8002756 <UART_SetConfig+0x1ae>
 8002742:	2b80      	cmp	r3, #128	; 0x80
 8002744:	d810      	bhi.n	8002768 <UART_SetConfig+0x1c0>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <UART_SetConfig+0x1a8>
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d006      	beq.n	800275c <UART_SetConfig+0x1b4>
 800274e:	e00b      	b.n	8002768 <UART_SetConfig+0x1c0>
 8002750:	2300      	movs	r3, #0
 8002752:	77fb      	strb	r3, [r7, #31]
 8002754:	e0cb      	b.n	80028ee <UART_SetConfig+0x346>
 8002756:	2302      	movs	r3, #2
 8002758:	77fb      	strb	r3, [r7, #31]
 800275a:	e0c8      	b.n	80028ee <UART_SetConfig+0x346>
 800275c:	2304      	movs	r3, #4
 800275e:	77fb      	strb	r3, [r7, #31]
 8002760:	e0c5      	b.n	80028ee <UART_SetConfig+0x346>
 8002762:	2308      	movs	r3, #8
 8002764:	77fb      	strb	r3, [r7, #31]
 8002766:	e0c2      	b.n	80028ee <UART_SetConfig+0x346>
 8002768:	2310      	movs	r3, #16
 800276a:	77fb      	strb	r3, [r7, #31]
 800276c:	e0bf      	b.n	80028ee <UART_SetConfig+0x346>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a45      	ldr	r2, [pc, #276]	; (8002888 <UART_SetConfig+0x2e0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d125      	bne.n	80027c4 <UART_SetConfig+0x21c>
 8002778:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <UART_SetConfig+0x2d0>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002786:	d017      	beq.n	80027b8 <UART_SetConfig+0x210>
 8002788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800278c:	d817      	bhi.n	80027be <UART_SetConfig+0x216>
 800278e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002792:	d00b      	beq.n	80027ac <UART_SetConfig+0x204>
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d811      	bhi.n	80027be <UART_SetConfig+0x216>
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <UART_SetConfig+0x1fe>
 800279e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a2:	d006      	beq.n	80027b2 <UART_SetConfig+0x20a>
 80027a4:	e00b      	b.n	80027be <UART_SetConfig+0x216>
 80027a6:	2300      	movs	r3, #0
 80027a8:	77fb      	strb	r3, [r7, #31]
 80027aa:	e0a0      	b.n	80028ee <UART_SetConfig+0x346>
 80027ac:	2302      	movs	r3, #2
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e09d      	b.n	80028ee <UART_SetConfig+0x346>
 80027b2:	2304      	movs	r3, #4
 80027b4:	77fb      	strb	r3, [r7, #31]
 80027b6:	e09a      	b.n	80028ee <UART_SetConfig+0x346>
 80027b8:	2308      	movs	r3, #8
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e097      	b.n	80028ee <UART_SetConfig+0x346>
 80027be:	2310      	movs	r3, #16
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	e094      	b.n	80028ee <UART_SetConfig+0x346>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a30      	ldr	r2, [pc, #192]	; (800288c <UART_SetConfig+0x2e4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d125      	bne.n	800281a <UART_SetConfig+0x272>
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <UART_SetConfig+0x2d0>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027dc:	d017      	beq.n	800280e <UART_SetConfig+0x266>
 80027de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027e2:	d817      	bhi.n	8002814 <UART_SetConfig+0x26c>
 80027e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e8:	d00b      	beq.n	8002802 <UART_SetConfig+0x25a>
 80027ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ee:	d811      	bhi.n	8002814 <UART_SetConfig+0x26c>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <UART_SetConfig+0x254>
 80027f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f8:	d006      	beq.n	8002808 <UART_SetConfig+0x260>
 80027fa:	e00b      	b.n	8002814 <UART_SetConfig+0x26c>
 80027fc:	2301      	movs	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e075      	b.n	80028ee <UART_SetConfig+0x346>
 8002802:	2302      	movs	r3, #2
 8002804:	77fb      	strb	r3, [r7, #31]
 8002806:	e072      	b.n	80028ee <UART_SetConfig+0x346>
 8002808:	2304      	movs	r3, #4
 800280a:	77fb      	strb	r3, [r7, #31]
 800280c:	e06f      	b.n	80028ee <UART_SetConfig+0x346>
 800280e:	2308      	movs	r3, #8
 8002810:	77fb      	strb	r3, [r7, #31]
 8002812:	e06c      	b.n	80028ee <UART_SetConfig+0x346>
 8002814:	2310      	movs	r3, #16
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e069      	b.n	80028ee <UART_SetConfig+0x346>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <UART_SetConfig+0x2e8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d137      	bne.n	8002894 <UART_SetConfig+0x2ec>
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <UART_SetConfig+0x2d0>)
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800282e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002832:	d017      	beq.n	8002864 <UART_SetConfig+0x2bc>
 8002834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002838:	d817      	bhi.n	800286a <UART_SetConfig+0x2c2>
 800283a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283e:	d00b      	beq.n	8002858 <UART_SetConfig+0x2b0>
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002844:	d811      	bhi.n	800286a <UART_SetConfig+0x2c2>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <UART_SetConfig+0x2aa>
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284e:	d006      	beq.n	800285e <UART_SetConfig+0x2b6>
 8002850:	e00b      	b.n	800286a <UART_SetConfig+0x2c2>
 8002852:	2300      	movs	r3, #0
 8002854:	77fb      	strb	r3, [r7, #31]
 8002856:	e04a      	b.n	80028ee <UART_SetConfig+0x346>
 8002858:	2302      	movs	r3, #2
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e047      	b.n	80028ee <UART_SetConfig+0x346>
 800285e:	2304      	movs	r3, #4
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e044      	b.n	80028ee <UART_SetConfig+0x346>
 8002864:	2308      	movs	r3, #8
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e041      	b.n	80028ee <UART_SetConfig+0x346>
 800286a:	2310      	movs	r3, #16
 800286c:	77fb      	strb	r3, [r7, #31]
 800286e:	e03e      	b.n	80028ee <UART_SetConfig+0x346>
 8002870:	efff69f3 	.word	0xefff69f3
 8002874:	40011000 	.word	0x40011000
 8002878:	40023800 	.word	0x40023800
 800287c:	40004400 	.word	0x40004400
 8002880:	40004800 	.word	0x40004800
 8002884:	40004c00 	.word	0x40004c00
 8002888:	40005000 	.word	0x40005000
 800288c:	40011400 	.word	0x40011400
 8002890:	40007800 	.word	0x40007800
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a71      	ldr	r2, [pc, #452]	; (8002a60 <UART_SetConfig+0x4b8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d125      	bne.n	80028ea <UART_SetConfig+0x342>
 800289e:	4b71      	ldr	r3, [pc, #452]	; (8002a64 <UART_SetConfig+0x4bc>)
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028ac:	d017      	beq.n	80028de <UART_SetConfig+0x336>
 80028ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028b2:	d817      	bhi.n	80028e4 <UART_SetConfig+0x33c>
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b8:	d00b      	beq.n	80028d2 <UART_SetConfig+0x32a>
 80028ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028be:	d811      	bhi.n	80028e4 <UART_SetConfig+0x33c>
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <UART_SetConfig+0x324>
 80028c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c8:	d006      	beq.n	80028d8 <UART_SetConfig+0x330>
 80028ca:	e00b      	b.n	80028e4 <UART_SetConfig+0x33c>
 80028cc:	2300      	movs	r3, #0
 80028ce:	77fb      	strb	r3, [r7, #31]
 80028d0:	e00d      	b.n	80028ee <UART_SetConfig+0x346>
 80028d2:	2302      	movs	r3, #2
 80028d4:	77fb      	strb	r3, [r7, #31]
 80028d6:	e00a      	b.n	80028ee <UART_SetConfig+0x346>
 80028d8:	2304      	movs	r3, #4
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e007      	b.n	80028ee <UART_SetConfig+0x346>
 80028de:	2308      	movs	r3, #8
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e004      	b.n	80028ee <UART_SetConfig+0x346>
 80028e4:	2310      	movs	r3, #16
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e001      	b.n	80028ee <UART_SetConfig+0x346>
 80028ea:	2310      	movs	r3, #16
 80028ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f6:	d15b      	bne.n	80029b0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80028f8:	7ffb      	ldrb	r3, [r7, #31]
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d827      	bhi.n	800294e <UART_SetConfig+0x3a6>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <UART_SetConfig+0x35c>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002929 	.word	0x08002929
 8002908:	08002931 	.word	0x08002931
 800290c:	08002939 	.word	0x08002939
 8002910:	0800294f 	.word	0x0800294f
 8002914:	0800293f 	.word	0x0800293f
 8002918:	0800294f 	.word	0x0800294f
 800291c:	0800294f 	.word	0x0800294f
 8002920:	0800294f 	.word	0x0800294f
 8002924:	08002947 	.word	0x08002947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002928:	f7ff fd2a 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 800292c:	61b8      	str	r0, [r7, #24]
        break;
 800292e:	e013      	b.n	8002958 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002930:	f7ff fd3a 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 8002934:	61b8      	str	r0, [r7, #24]
        break;
 8002936:	e00f      	b.n	8002958 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <UART_SetConfig+0x4c0>)
 800293a:	61bb      	str	r3, [r7, #24]
        break;
 800293c:	e00c      	b.n	8002958 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800293e:	f7ff fc5d 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 8002942:	61b8      	str	r0, [r7, #24]
        break;
 8002944:	e008      	b.n	8002958 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800294a:	61bb      	str	r3, [r7, #24]
        break;
 800294c:	e004      	b.n	8002958 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	77bb      	strb	r3, [r7, #30]
        break;
 8002956:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d074      	beq.n	8002a48 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	005a      	lsls	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b0f      	cmp	r3, #15
 800297a:	d916      	bls.n	80029aa <UART_SetConfig+0x402>
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d212      	bcs.n	80029aa <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	b29b      	uxth	r3, r3
 8002988:	f023 030f 	bic.w	r3, r3, #15
 800298c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	b29b      	uxth	r3, r3
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	b29a      	uxth	r2, r3
 800299a:	89fb      	ldrh	r3, [r7, #14]
 800299c:	4313      	orrs	r3, r2
 800299e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	89fa      	ldrh	r2, [r7, #14]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	e04e      	b.n	8002a48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	77bb      	strb	r3, [r7, #30]
 80029ae:	e04b      	b.n	8002a48 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029b0:	7ffb      	ldrb	r3, [r7, #31]
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d827      	bhi.n	8002a06 <UART_SetConfig+0x45e>
 80029b6:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <UART_SetConfig+0x414>)
 80029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029bc:	080029e1 	.word	0x080029e1
 80029c0:	080029e9 	.word	0x080029e9
 80029c4:	080029f1 	.word	0x080029f1
 80029c8:	08002a07 	.word	0x08002a07
 80029cc:	080029f7 	.word	0x080029f7
 80029d0:	08002a07 	.word	0x08002a07
 80029d4:	08002a07 	.word	0x08002a07
 80029d8:	08002a07 	.word	0x08002a07
 80029dc:	080029ff 	.word	0x080029ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029e0:	f7ff fcce 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 80029e4:	61b8      	str	r0, [r7, #24]
        break;
 80029e6:	e013      	b.n	8002a10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029e8:	f7ff fcde 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 80029ec:	61b8      	str	r0, [r7, #24]
        break;
 80029ee:	e00f      	b.n	8002a10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <UART_SetConfig+0x4c0>)
 80029f2:	61bb      	str	r3, [r7, #24]
        break;
 80029f4:	e00c      	b.n	8002a10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029f6:	f7ff fc01 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80029fa:	61b8      	str	r0, [r7, #24]
        break;
 80029fc:	e008      	b.n	8002a10 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a02:	61bb      	str	r3, [r7, #24]
        break;
 8002a04:	e004      	b.n	8002a10 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	77bb      	strb	r3, [r7, #30]
        break;
 8002a0e:	bf00      	nop
    }

    if (pclk != 0U)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	085a      	lsrs	r2, r3, #1
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	441a      	add	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	d908      	bls.n	8002a44 <UART_SetConfig+0x49c>
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d204      	bcs.n	8002a44 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	e001      	b.n	8002a48 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a54:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40007c00 	.word	0x40007c00
 8002a64:	40023800 	.word	0x40023800
 8002a68:	00f42400 	.word	0x00f42400

08002a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01a      	beq.n	8002b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b6a:	d10a      	bne.n	8002b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bc0:	f7fe f864 	bl	8000c8c <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d10e      	bne.n	8002bf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f82d 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e023      	b.n	8002c3a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d10e      	bne.n	8002c1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f817 	bl	8002c42 <UART_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e00d      	b.n	8002c3a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c52:	e05e      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d05a      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5c:	f7fe f816 	bl	8000c8c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d302      	bcc.n	8002c72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d11b      	bne.n	8002caa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e043      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d02c      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc6:	d124      	bne.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ce0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e00f      	b.n	8002d32 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69da      	ldr	r2, [r3, #28]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d091      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <__libc_init_array>:
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	4d0d      	ldr	r5, [pc, #52]	; (8002d74 <__libc_init_array+0x38>)
 8002d40:	4c0d      	ldr	r4, [pc, #52]	; (8002d78 <__libc_init_array+0x3c>)
 8002d42:	1b64      	subs	r4, r4, r5
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	2600      	movs	r6, #0
 8002d48:	42a6      	cmp	r6, r4
 8002d4a:	d109      	bne.n	8002d60 <__libc_init_array+0x24>
 8002d4c:	4d0b      	ldr	r5, [pc, #44]	; (8002d7c <__libc_init_array+0x40>)
 8002d4e:	4c0c      	ldr	r4, [pc, #48]	; (8002d80 <__libc_init_array+0x44>)
 8002d50:	f000 ff76 	bl	8003c40 <_init>
 8002d54:	1b64      	subs	r4, r4, r5
 8002d56:	10a4      	asrs	r4, r4, #2
 8002d58:	2600      	movs	r6, #0
 8002d5a:	42a6      	cmp	r6, r4
 8002d5c:	d105      	bne.n	8002d6a <__libc_init_array+0x2e>
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d64:	4798      	blx	r3
 8002d66:	3601      	adds	r6, #1
 8002d68:	e7ee      	b.n	8002d48 <__libc_init_array+0xc>
 8002d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6e:	4798      	blx	r3
 8002d70:	3601      	adds	r6, #1
 8002d72:	e7f2      	b.n	8002d5a <__libc_init_array+0x1e>
 8002d74:	08003d28 	.word	0x08003d28
 8002d78:	08003d28 	.word	0x08003d28
 8002d7c:	08003d28 	.word	0x08003d28
 8002d80:	08003d2c 	.word	0x08003d2c

08002d84 <memset>:
 8002d84:	4402      	add	r2, r0
 8002d86:	4603      	mov	r3, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <memset+0xa>
 8002d8c:	4770      	bx	lr
 8002d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d92:	e7f9      	b.n	8002d88 <memset+0x4>

08002d94 <iprintf>:
 8002d94:	b40f      	push	{r0, r1, r2, r3}
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <iprintf+0x2c>)
 8002d98:	b513      	push	{r0, r1, r4, lr}
 8002d9a:	681c      	ldr	r4, [r3, #0]
 8002d9c:	b124      	cbz	r4, 8002da8 <iprintf+0x14>
 8002d9e:	69a3      	ldr	r3, [r4, #24]
 8002da0:	b913      	cbnz	r3, 8002da8 <iprintf+0x14>
 8002da2:	4620      	mov	r0, r4
 8002da4:	f000 f866 	bl	8002e74 <__sinit>
 8002da8:	ab05      	add	r3, sp, #20
 8002daa:	9a04      	ldr	r2, [sp, #16]
 8002dac:	68a1      	ldr	r1, [r4, #8]
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	4620      	mov	r0, r4
 8002db2:	f000 f9d3 	bl	800315c <_vfiprintf_r>
 8002db6:	b002      	add	sp, #8
 8002db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dbc:	b004      	add	sp, #16
 8002dbe:	4770      	bx	lr
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <std>:
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	b510      	push	{r4, lr}
 8002dc8:	4604      	mov	r4, r0
 8002dca:	e9c0 3300 	strd	r3, r3, [r0]
 8002dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002dd2:	6083      	str	r3, [r0, #8]
 8002dd4:	8181      	strh	r1, [r0, #12]
 8002dd6:	6643      	str	r3, [r0, #100]	; 0x64
 8002dd8:	81c2      	strh	r2, [r0, #14]
 8002dda:	6183      	str	r3, [r0, #24]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	2208      	movs	r2, #8
 8002de0:	305c      	adds	r0, #92	; 0x5c
 8002de2:	f7ff ffcf 	bl	8002d84 <memset>
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <std+0x38>)
 8002de8:	6263      	str	r3, [r4, #36]	; 0x24
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <std+0x3c>)
 8002dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <std+0x40>)
 8002df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <std+0x44>)
 8002df4:	6224      	str	r4, [r4, #32]
 8002df6:	6323      	str	r3, [r4, #48]	; 0x30
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	bf00      	nop
 8002dfc:	08003705 	.word	0x08003705
 8002e00:	08003727 	.word	0x08003727
 8002e04:	0800375f 	.word	0x0800375f
 8002e08:	08003783 	.word	0x08003783

08002e0c <_cleanup_r>:
 8002e0c:	4901      	ldr	r1, [pc, #4]	; (8002e14 <_cleanup_r+0x8>)
 8002e0e:	f000 b8af 	b.w	8002f70 <_fwalk_reent>
 8002e12:	bf00      	nop
 8002e14:	08003a5d 	.word	0x08003a5d

08002e18 <__sfmoreglue>:
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	1e4a      	subs	r2, r1, #1
 8002e1c:	2568      	movs	r5, #104	; 0x68
 8002e1e:	4355      	muls	r5, r2
 8002e20:	460e      	mov	r6, r1
 8002e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002e26:	f000 f915 	bl	8003054 <_malloc_r>
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	b140      	cbz	r0, 8002e40 <__sfmoreglue+0x28>
 8002e2e:	2100      	movs	r1, #0
 8002e30:	e9c0 1600 	strd	r1, r6, [r0]
 8002e34:	300c      	adds	r0, #12
 8002e36:	60a0      	str	r0, [r4, #8]
 8002e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e3c:	f7ff ffa2 	bl	8002d84 <memset>
 8002e40:	4620      	mov	r0, r4
 8002e42:	bd70      	pop	{r4, r5, r6, pc}

08002e44 <__sfp_lock_acquire>:
 8002e44:	4801      	ldr	r0, [pc, #4]	; (8002e4c <__sfp_lock_acquire+0x8>)
 8002e46:	f000 b8b3 	b.w	8002fb0 <__retarget_lock_acquire_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	20003e94 	.word	0x20003e94

08002e50 <__sfp_lock_release>:
 8002e50:	4801      	ldr	r0, [pc, #4]	; (8002e58 <__sfp_lock_release+0x8>)
 8002e52:	f000 b8ae 	b.w	8002fb2 <__retarget_lock_release_recursive>
 8002e56:	bf00      	nop
 8002e58:	20003e94 	.word	0x20003e94

08002e5c <__sinit_lock_acquire>:
 8002e5c:	4801      	ldr	r0, [pc, #4]	; (8002e64 <__sinit_lock_acquire+0x8>)
 8002e5e:	f000 b8a7 	b.w	8002fb0 <__retarget_lock_acquire_recursive>
 8002e62:	bf00      	nop
 8002e64:	20003e8f 	.word	0x20003e8f

08002e68 <__sinit_lock_release>:
 8002e68:	4801      	ldr	r0, [pc, #4]	; (8002e70 <__sinit_lock_release+0x8>)
 8002e6a:	f000 b8a2 	b.w	8002fb2 <__retarget_lock_release_recursive>
 8002e6e:	bf00      	nop
 8002e70:	20003e8f 	.word	0x20003e8f

08002e74 <__sinit>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	f7ff fff0 	bl	8002e5c <__sinit_lock_acquire>
 8002e7c:	69a3      	ldr	r3, [r4, #24]
 8002e7e:	b11b      	cbz	r3, 8002e88 <__sinit+0x14>
 8002e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e84:	f7ff bff0 	b.w	8002e68 <__sinit_lock_release>
 8002e88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <__sinit+0x68>)
 8002e90:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <__sinit+0x6c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e96:	42a3      	cmp	r3, r4
 8002e98:	bf04      	itt	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	61a3      	streq	r3, [r4, #24]
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f000 f820 	bl	8002ee4 <__sfp>
 8002ea4:	6060      	str	r0, [r4, #4]
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f000 f81c 	bl	8002ee4 <__sfp>
 8002eac:	60a0      	str	r0, [r4, #8]
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f000 f818 	bl	8002ee4 <__sfp>
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60e0      	str	r0, [r4, #12]
 8002eb8:	2104      	movs	r1, #4
 8002eba:	6860      	ldr	r0, [r4, #4]
 8002ebc:	f7ff ff82 	bl	8002dc4 <std>
 8002ec0:	68a0      	ldr	r0, [r4, #8]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2109      	movs	r1, #9
 8002ec6:	f7ff ff7d 	bl	8002dc4 <std>
 8002eca:	68e0      	ldr	r0, [r4, #12]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	2112      	movs	r1, #18
 8002ed0:	f7ff ff78 	bl	8002dc4 <std>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	61a3      	str	r3, [r4, #24]
 8002ed8:	e7d2      	b.n	8002e80 <__sinit+0xc>
 8002eda:	bf00      	nop
 8002edc:	08003c88 	.word	0x08003c88
 8002ee0:	08002e0d 	.word	0x08002e0d

08002ee4 <__sfp>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	4607      	mov	r7, r0
 8002ee8:	f7ff ffac 	bl	8002e44 <__sfp_lock_acquire>
 8002eec:	4b1e      	ldr	r3, [pc, #120]	; (8002f68 <__sfp+0x84>)
 8002eee:	681e      	ldr	r6, [r3, #0]
 8002ef0:	69b3      	ldr	r3, [r6, #24]
 8002ef2:	b913      	cbnz	r3, 8002efa <__sfp+0x16>
 8002ef4:	4630      	mov	r0, r6
 8002ef6:	f7ff ffbd 	bl	8002e74 <__sinit>
 8002efa:	3648      	adds	r6, #72	; 0x48
 8002efc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	d503      	bpl.n	8002f0c <__sfp+0x28>
 8002f04:	6833      	ldr	r3, [r6, #0]
 8002f06:	b30b      	cbz	r3, 8002f4c <__sfp+0x68>
 8002f08:	6836      	ldr	r6, [r6, #0]
 8002f0a:	e7f7      	b.n	8002efc <__sfp+0x18>
 8002f0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002f10:	b9d5      	cbnz	r5, 8002f48 <__sfp+0x64>
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <__sfp+0x88>)
 8002f14:	60e3      	str	r3, [r4, #12]
 8002f16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f1a:	6665      	str	r5, [r4, #100]	; 0x64
 8002f1c:	f000 f847 	bl	8002fae <__retarget_lock_init_recursive>
 8002f20:	f7ff ff96 	bl	8002e50 <__sfp_lock_release>
 8002f24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002f28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f2c:	6025      	str	r5, [r4, #0]
 8002f2e:	61a5      	str	r5, [r4, #24]
 8002f30:	2208      	movs	r2, #8
 8002f32:	4629      	mov	r1, r5
 8002f34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f38:	f7ff ff24 	bl	8002d84 <memset>
 8002f3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f44:	4620      	mov	r0, r4
 8002f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f48:	3468      	adds	r4, #104	; 0x68
 8002f4a:	e7d9      	b.n	8002f00 <__sfp+0x1c>
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	4638      	mov	r0, r7
 8002f50:	f7ff ff62 	bl	8002e18 <__sfmoreglue>
 8002f54:	4604      	mov	r4, r0
 8002f56:	6030      	str	r0, [r6, #0]
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d1d5      	bne.n	8002f08 <__sfp+0x24>
 8002f5c:	f7ff ff78 	bl	8002e50 <__sfp_lock_release>
 8002f60:	230c      	movs	r3, #12
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	e7ee      	b.n	8002f44 <__sfp+0x60>
 8002f66:	bf00      	nop
 8002f68:	08003c88 	.word	0x08003c88
 8002f6c:	ffff0001 	.word	0xffff0001

08002f70 <_fwalk_reent>:
 8002f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f74:	4606      	mov	r6, r0
 8002f76:	4688      	mov	r8, r1
 8002f78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f7c:	2700      	movs	r7, #0
 8002f7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f82:	f1b9 0901 	subs.w	r9, r9, #1
 8002f86:	d505      	bpl.n	8002f94 <_fwalk_reent+0x24>
 8002f88:	6824      	ldr	r4, [r4, #0]
 8002f8a:	2c00      	cmp	r4, #0
 8002f8c:	d1f7      	bne.n	8002f7e <_fwalk_reent+0xe>
 8002f8e:	4638      	mov	r0, r7
 8002f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f94:	89ab      	ldrh	r3, [r5, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d907      	bls.n	8002faa <_fwalk_reent+0x3a>
 8002f9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	d003      	beq.n	8002faa <_fwalk_reent+0x3a>
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	47c0      	blx	r8
 8002fa8:	4307      	orrs	r7, r0
 8002faa:	3568      	adds	r5, #104	; 0x68
 8002fac:	e7e9      	b.n	8002f82 <_fwalk_reent+0x12>

08002fae <__retarget_lock_init_recursive>:
 8002fae:	4770      	bx	lr

08002fb0 <__retarget_lock_acquire_recursive>:
 8002fb0:	4770      	bx	lr

08002fb2 <__retarget_lock_release_recursive>:
 8002fb2:	4770      	bx	lr

08002fb4 <_free_r>:
 8002fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fb6:	2900      	cmp	r1, #0
 8002fb8:	d048      	beq.n	800304c <_free_r+0x98>
 8002fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fbe:	9001      	str	r0, [sp, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8002fc6:	bfb8      	it	lt
 8002fc8:	18e4      	addlt	r4, r4, r3
 8002fca:	f000 fdf9 	bl	8003bc0 <__malloc_lock>
 8002fce:	4a20      	ldr	r2, [pc, #128]	; (8003050 <_free_r+0x9c>)
 8002fd0:	9801      	ldr	r0, [sp, #4]
 8002fd2:	6813      	ldr	r3, [r2, #0]
 8002fd4:	4615      	mov	r5, r2
 8002fd6:	b933      	cbnz	r3, 8002fe6 <_free_r+0x32>
 8002fd8:	6063      	str	r3, [r4, #4]
 8002fda:	6014      	str	r4, [r2, #0]
 8002fdc:	b003      	add	sp, #12
 8002fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fe2:	f000 bdf3 	b.w	8003bcc <__malloc_unlock>
 8002fe6:	42a3      	cmp	r3, r4
 8002fe8:	d90b      	bls.n	8003002 <_free_r+0x4e>
 8002fea:	6821      	ldr	r1, [r4, #0]
 8002fec:	1862      	adds	r2, r4, r1
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	bf04      	itt	eq
 8002ff2:	681a      	ldreq	r2, [r3, #0]
 8002ff4:	685b      	ldreq	r3, [r3, #4]
 8002ff6:	6063      	str	r3, [r4, #4]
 8002ff8:	bf04      	itt	eq
 8002ffa:	1852      	addeq	r2, r2, r1
 8002ffc:	6022      	streq	r2, [r4, #0]
 8002ffe:	602c      	str	r4, [r5, #0]
 8003000:	e7ec      	b.n	8002fdc <_free_r+0x28>
 8003002:	461a      	mov	r2, r3
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b10b      	cbz	r3, 800300c <_free_r+0x58>
 8003008:	42a3      	cmp	r3, r4
 800300a:	d9fa      	bls.n	8003002 <_free_r+0x4e>
 800300c:	6811      	ldr	r1, [r2, #0]
 800300e:	1855      	adds	r5, r2, r1
 8003010:	42a5      	cmp	r5, r4
 8003012:	d10b      	bne.n	800302c <_free_r+0x78>
 8003014:	6824      	ldr	r4, [r4, #0]
 8003016:	4421      	add	r1, r4
 8003018:	1854      	adds	r4, r2, r1
 800301a:	42a3      	cmp	r3, r4
 800301c:	6011      	str	r1, [r2, #0]
 800301e:	d1dd      	bne.n	8002fdc <_free_r+0x28>
 8003020:	681c      	ldr	r4, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	6053      	str	r3, [r2, #4]
 8003026:	4421      	add	r1, r4
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	e7d7      	b.n	8002fdc <_free_r+0x28>
 800302c:	d902      	bls.n	8003034 <_free_r+0x80>
 800302e:	230c      	movs	r3, #12
 8003030:	6003      	str	r3, [r0, #0]
 8003032:	e7d3      	b.n	8002fdc <_free_r+0x28>
 8003034:	6825      	ldr	r5, [r4, #0]
 8003036:	1961      	adds	r1, r4, r5
 8003038:	428b      	cmp	r3, r1
 800303a:	bf04      	itt	eq
 800303c:	6819      	ldreq	r1, [r3, #0]
 800303e:	685b      	ldreq	r3, [r3, #4]
 8003040:	6063      	str	r3, [r4, #4]
 8003042:	bf04      	itt	eq
 8003044:	1949      	addeq	r1, r1, r5
 8003046:	6021      	streq	r1, [r4, #0]
 8003048:	6054      	str	r4, [r2, #4]
 800304a:	e7c7      	b.n	8002fdc <_free_r+0x28>
 800304c:	b003      	add	sp, #12
 800304e:	bd30      	pop	{r4, r5, pc}
 8003050:	20000090 	.word	0x20000090

08003054 <_malloc_r>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	1ccd      	adds	r5, r1, #3
 8003058:	f025 0503 	bic.w	r5, r5, #3
 800305c:	3508      	adds	r5, #8
 800305e:	2d0c      	cmp	r5, #12
 8003060:	bf38      	it	cc
 8003062:	250c      	movcc	r5, #12
 8003064:	2d00      	cmp	r5, #0
 8003066:	4606      	mov	r6, r0
 8003068:	db01      	blt.n	800306e <_malloc_r+0x1a>
 800306a:	42a9      	cmp	r1, r5
 800306c:	d903      	bls.n	8003076 <_malloc_r+0x22>
 800306e:	230c      	movs	r3, #12
 8003070:	6033      	str	r3, [r6, #0]
 8003072:	2000      	movs	r0, #0
 8003074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003076:	f000 fda3 	bl	8003bc0 <__malloc_lock>
 800307a:	4921      	ldr	r1, [pc, #132]	; (8003100 <_malloc_r+0xac>)
 800307c:	680a      	ldr	r2, [r1, #0]
 800307e:	4614      	mov	r4, r2
 8003080:	b99c      	cbnz	r4, 80030aa <_malloc_r+0x56>
 8003082:	4f20      	ldr	r7, [pc, #128]	; (8003104 <_malloc_r+0xb0>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b923      	cbnz	r3, 8003092 <_malloc_r+0x3e>
 8003088:	4621      	mov	r1, r4
 800308a:	4630      	mov	r0, r6
 800308c:	f000 fb2a 	bl	80036e4 <_sbrk_r>
 8003090:	6038      	str	r0, [r7, #0]
 8003092:	4629      	mov	r1, r5
 8003094:	4630      	mov	r0, r6
 8003096:	f000 fb25 	bl	80036e4 <_sbrk_r>
 800309a:	1c43      	adds	r3, r0, #1
 800309c:	d123      	bne.n	80030e6 <_malloc_r+0x92>
 800309e:	230c      	movs	r3, #12
 80030a0:	6033      	str	r3, [r6, #0]
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 fd92 	bl	8003bcc <__malloc_unlock>
 80030a8:	e7e3      	b.n	8003072 <_malloc_r+0x1e>
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	1b5b      	subs	r3, r3, r5
 80030ae:	d417      	bmi.n	80030e0 <_malloc_r+0x8c>
 80030b0:	2b0b      	cmp	r3, #11
 80030b2:	d903      	bls.n	80030bc <_malloc_r+0x68>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	441c      	add	r4, r3
 80030b8:	6025      	str	r5, [r4, #0]
 80030ba:	e004      	b.n	80030c6 <_malloc_r+0x72>
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	42a2      	cmp	r2, r4
 80030c0:	bf0c      	ite	eq
 80030c2:	600b      	streq	r3, [r1, #0]
 80030c4:	6053      	strne	r3, [r2, #4]
 80030c6:	4630      	mov	r0, r6
 80030c8:	f000 fd80 	bl	8003bcc <__malloc_unlock>
 80030cc:	f104 000b 	add.w	r0, r4, #11
 80030d0:	1d23      	adds	r3, r4, #4
 80030d2:	f020 0007 	bic.w	r0, r0, #7
 80030d6:	1ac2      	subs	r2, r0, r3
 80030d8:	d0cc      	beq.n	8003074 <_malloc_r+0x20>
 80030da:	1a1b      	subs	r3, r3, r0
 80030dc:	50a3      	str	r3, [r4, r2]
 80030de:	e7c9      	b.n	8003074 <_malloc_r+0x20>
 80030e0:	4622      	mov	r2, r4
 80030e2:	6864      	ldr	r4, [r4, #4]
 80030e4:	e7cc      	b.n	8003080 <_malloc_r+0x2c>
 80030e6:	1cc4      	adds	r4, r0, #3
 80030e8:	f024 0403 	bic.w	r4, r4, #3
 80030ec:	42a0      	cmp	r0, r4
 80030ee:	d0e3      	beq.n	80030b8 <_malloc_r+0x64>
 80030f0:	1a21      	subs	r1, r4, r0
 80030f2:	4630      	mov	r0, r6
 80030f4:	f000 faf6 	bl	80036e4 <_sbrk_r>
 80030f8:	3001      	adds	r0, #1
 80030fa:	d1dd      	bne.n	80030b8 <_malloc_r+0x64>
 80030fc:	e7cf      	b.n	800309e <_malloc_r+0x4a>
 80030fe:	bf00      	nop
 8003100:	20000090 	.word	0x20000090
 8003104:	20000094 	.word	0x20000094

08003108 <__sfputc_r>:
 8003108:	6893      	ldr	r3, [r2, #8]
 800310a:	3b01      	subs	r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	b410      	push	{r4}
 8003110:	6093      	str	r3, [r2, #8]
 8003112:	da08      	bge.n	8003126 <__sfputc_r+0x1e>
 8003114:	6994      	ldr	r4, [r2, #24]
 8003116:	42a3      	cmp	r3, r4
 8003118:	db01      	blt.n	800311e <__sfputc_r+0x16>
 800311a:	290a      	cmp	r1, #10
 800311c:	d103      	bne.n	8003126 <__sfputc_r+0x1e>
 800311e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003122:	f000 bb33 	b.w	800378c <__swbuf_r>
 8003126:	6813      	ldr	r3, [r2, #0]
 8003128:	1c58      	adds	r0, r3, #1
 800312a:	6010      	str	r0, [r2, #0]
 800312c:	7019      	strb	r1, [r3, #0]
 800312e:	4608      	mov	r0, r1
 8003130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003134:	4770      	bx	lr

08003136 <__sfputs_r>:
 8003136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003138:	4606      	mov	r6, r0
 800313a:	460f      	mov	r7, r1
 800313c:	4614      	mov	r4, r2
 800313e:	18d5      	adds	r5, r2, r3
 8003140:	42ac      	cmp	r4, r5
 8003142:	d101      	bne.n	8003148 <__sfputs_r+0x12>
 8003144:	2000      	movs	r0, #0
 8003146:	e007      	b.n	8003158 <__sfputs_r+0x22>
 8003148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800314c:	463a      	mov	r2, r7
 800314e:	4630      	mov	r0, r6
 8003150:	f7ff ffda 	bl	8003108 <__sfputc_r>
 8003154:	1c43      	adds	r3, r0, #1
 8003156:	d1f3      	bne.n	8003140 <__sfputs_r+0xa>
 8003158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800315c <_vfiprintf_r>:
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	460d      	mov	r5, r1
 8003162:	b09d      	sub	sp, #116	; 0x74
 8003164:	4614      	mov	r4, r2
 8003166:	4698      	mov	r8, r3
 8003168:	4606      	mov	r6, r0
 800316a:	b118      	cbz	r0, 8003174 <_vfiprintf_r+0x18>
 800316c:	6983      	ldr	r3, [r0, #24]
 800316e:	b90b      	cbnz	r3, 8003174 <_vfiprintf_r+0x18>
 8003170:	f7ff fe80 	bl	8002e74 <__sinit>
 8003174:	4b89      	ldr	r3, [pc, #548]	; (800339c <_vfiprintf_r+0x240>)
 8003176:	429d      	cmp	r5, r3
 8003178:	d11b      	bne.n	80031b2 <_vfiprintf_r+0x56>
 800317a:	6875      	ldr	r5, [r6, #4]
 800317c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800317e:	07d9      	lsls	r1, r3, #31
 8003180:	d405      	bmi.n	800318e <_vfiprintf_r+0x32>
 8003182:	89ab      	ldrh	r3, [r5, #12]
 8003184:	059a      	lsls	r2, r3, #22
 8003186:	d402      	bmi.n	800318e <_vfiprintf_r+0x32>
 8003188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800318a:	f7ff ff11 	bl	8002fb0 <__retarget_lock_acquire_recursive>
 800318e:	89ab      	ldrh	r3, [r5, #12]
 8003190:	071b      	lsls	r3, r3, #28
 8003192:	d501      	bpl.n	8003198 <_vfiprintf_r+0x3c>
 8003194:	692b      	ldr	r3, [r5, #16]
 8003196:	b9eb      	cbnz	r3, 80031d4 <_vfiprintf_r+0x78>
 8003198:	4629      	mov	r1, r5
 800319a:	4630      	mov	r0, r6
 800319c:	f000 fb5a 	bl	8003854 <__swsetup_r>
 80031a0:	b1c0      	cbz	r0, 80031d4 <_vfiprintf_r+0x78>
 80031a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031a4:	07dc      	lsls	r4, r3, #31
 80031a6:	d50e      	bpl.n	80031c6 <_vfiprintf_r+0x6a>
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	b01d      	add	sp, #116	; 0x74
 80031ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b2:	4b7b      	ldr	r3, [pc, #492]	; (80033a0 <_vfiprintf_r+0x244>)
 80031b4:	429d      	cmp	r5, r3
 80031b6:	d101      	bne.n	80031bc <_vfiprintf_r+0x60>
 80031b8:	68b5      	ldr	r5, [r6, #8]
 80031ba:	e7df      	b.n	800317c <_vfiprintf_r+0x20>
 80031bc:	4b79      	ldr	r3, [pc, #484]	; (80033a4 <_vfiprintf_r+0x248>)
 80031be:	429d      	cmp	r5, r3
 80031c0:	bf08      	it	eq
 80031c2:	68f5      	ldreq	r5, [r6, #12]
 80031c4:	e7da      	b.n	800317c <_vfiprintf_r+0x20>
 80031c6:	89ab      	ldrh	r3, [r5, #12]
 80031c8:	0598      	lsls	r0, r3, #22
 80031ca:	d4ed      	bmi.n	80031a8 <_vfiprintf_r+0x4c>
 80031cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031ce:	f7ff fef0 	bl	8002fb2 <__retarget_lock_release_recursive>
 80031d2:	e7e9      	b.n	80031a8 <_vfiprintf_r+0x4c>
 80031d4:	2300      	movs	r3, #0
 80031d6:	9309      	str	r3, [sp, #36]	; 0x24
 80031d8:	2320      	movs	r3, #32
 80031da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031de:	f8cd 800c 	str.w	r8, [sp, #12]
 80031e2:	2330      	movs	r3, #48	; 0x30
 80031e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80033a8 <_vfiprintf_r+0x24c>
 80031e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031ec:	f04f 0901 	mov.w	r9, #1
 80031f0:	4623      	mov	r3, r4
 80031f2:	469a      	mov	sl, r3
 80031f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031f8:	b10a      	cbz	r2, 80031fe <_vfiprintf_r+0xa2>
 80031fa:	2a25      	cmp	r2, #37	; 0x25
 80031fc:	d1f9      	bne.n	80031f2 <_vfiprintf_r+0x96>
 80031fe:	ebba 0b04 	subs.w	fp, sl, r4
 8003202:	d00b      	beq.n	800321c <_vfiprintf_r+0xc0>
 8003204:	465b      	mov	r3, fp
 8003206:	4622      	mov	r2, r4
 8003208:	4629      	mov	r1, r5
 800320a:	4630      	mov	r0, r6
 800320c:	f7ff ff93 	bl	8003136 <__sfputs_r>
 8003210:	3001      	adds	r0, #1
 8003212:	f000 80aa 	beq.w	800336a <_vfiprintf_r+0x20e>
 8003216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003218:	445a      	add	r2, fp
 800321a:	9209      	str	r2, [sp, #36]	; 0x24
 800321c:	f89a 3000 	ldrb.w	r3, [sl]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80a2 	beq.w	800336a <_vfiprintf_r+0x20e>
 8003226:	2300      	movs	r3, #0
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
 800322c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003230:	f10a 0a01 	add.w	sl, sl, #1
 8003234:	9304      	str	r3, [sp, #16]
 8003236:	9307      	str	r3, [sp, #28]
 8003238:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800323c:	931a      	str	r3, [sp, #104]	; 0x68
 800323e:	4654      	mov	r4, sl
 8003240:	2205      	movs	r2, #5
 8003242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003246:	4858      	ldr	r0, [pc, #352]	; (80033a8 <_vfiprintf_r+0x24c>)
 8003248:	f7fc fffa 	bl	8000240 <memchr>
 800324c:	9a04      	ldr	r2, [sp, #16]
 800324e:	b9d8      	cbnz	r0, 8003288 <_vfiprintf_r+0x12c>
 8003250:	06d1      	lsls	r1, r2, #27
 8003252:	bf44      	itt	mi
 8003254:	2320      	movmi	r3, #32
 8003256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800325a:	0713      	lsls	r3, r2, #28
 800325c:	bf44      	itt	mi
 800325e:	232b      	movmi	r3, #43	; 0x2b
 8003260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003264:	f89a 3000 	ldrb.w	r3, [sl]
 8003268:	2b2a      	cmp	r3, #42	; 0x2a
 800326a:	d015      	beq.n	8003298 <_vfiprintf_r+0x13c>
 800326c:	9a07      	ldr	r2, [sp, #28]
 800326e:	4654      	mov	r4, sl
 8003270:	2000      	movs	r0, #0
 8003272:	f04f 0c0a 	mov.w	ip, #10
 8003276:	4621      	mov	r1, r4
 8003278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800327c:	3b30      	subs	r3, #48	; 0x30
 800327e:	2b09      	cmp	r3, #9
 8003280:	d94e      	bls.n	8003320 <_vfiprintf_r+0x1c4>
 8003282:	b1b0      	cbz	r0, 80032b2 <_vfiprintf_r+0x156>
 8003284:	9207      	str	r2, [sp, #28]
 8003286:	e014      	b.n	80032b2 <_vfiprintf_r+0x156>
 8003288:	eba0 0308 	sub.w	r3, r0, r8
 800328c:	fa09 f303 	lsl.w	r3, r9, r3
 8003290:	4313      	orrs	r3, r2
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	46a2      	mov	sl, r4
 8003296:	e7d2      	b.n	800323e <_vfiprintf_r+0xe2>
 8003298:	9b03      	ldr	r3, [sp, #12]
 800329a:	1d19      	adds	r1, r3, #4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	9103      	str	r1, [sp, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bfbb      	ittet	lt
 80032a4:	425b      	neglt	r3, r3
 80032a6:	f042 0202 	orrlt.w	r2, r2, #2
 80032aa:	9307      	strge	r3, [sp, #28]
 80032ac:	9307      	strlt	r3, [sp, #28]
 80032ae:	bfb8      	it	lt
 80032b0:	9204      	strlt	r2, [sp, #16]
 80032b2:	7823      	ldrb	r3, [r4, #0]
 80032b4:	2b2e      	cmp	r3, #46	; 0x2e
 80032b6:	d10c      	bne.n	80032d2 <_vfiprintf_r+0x176>
 80032b8:	7863      	ldrb	r3, [r4, #1]
 80032ba:	2b2a      	cmp	r3, #42	; 0x2a
 80032bc:	d135      	bne.n	800332a <_vfiprintf_r+0x1ce>
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	1d1a      	adds	r2, r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	9203      	str	r2, [sp, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80032ce:	3402      	adds	r4, #2
 80032d0:	9305      	str	r3, [sp, #20]
 80032d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80033b8 <_vfiprintf_r+0x25c>
 80032d6:	7821      	ldrb	r1, [r4, #0]
 80032d8:	2203      	movs	r2, #3
 80032da:	4650      	mov	r0, sl
 80032dc:	f7fc ffb0 	bl	8000240 <memchr>
 80032e0:	b140      	cbz	r0, 80032f4 <_vfiprintf_r+0x198>
 80032e2:	2340      	movs	r3, #64	; 0x40
 80032e4:	eba0 000a 	sub.w	r0, r0, sl
 80032e8:	fa03 f000 	lsl.w	r0, r3, r0
 80032ec:	9b04      	ldr	r3, [sp, #16]
 80032ee:	4303      	orrs	r3, r0
 80032f0:	3401      	adds	r4, #1
 80032f2:	9304      	str	r3, [sp, #16]
 80032f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032f8:	482c      	ldr	r0, [pc, #176]	; (80033ac <_vfiprintf_r+0x250>)
 80032fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032fe:	2206      	movs	r2, #6
 8003300:	f7fc ff9e 	bl	8000240 <memchr>
 8003304:	2800      	cmp	r0, #0
 8003306:	d03f      	beq.n	8003388 <_vfiprintf_r+0x22c>
 8003308:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <_vfiprintf_r+0x254>)
 800330a:	bb1b      	cbnz	r3, 8003354 <_vfiprintf_r+0x1f8>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	3307      	adds	r3, #7
 8003310:	f023 0307 	bic.w	r3, r3, #7
 8003314:	3308      	adds	r3, #8
 8003316:	9303      	str	r3, [sp, #12]
 8003318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800331a:	443b      	add	r3, r7
 800331c:	9309      	str	r3, [sp, #36]	; 0x24
 800331e:	e767      	b.n	80031f0 <_vfiprintf_r+0x94>
 8003320:	fb0c 3202 	mla	r2, ip, r2, r3
 8003324:	460c      	mov	r4, r1
 8003326:	2001      	movs	r0, #1
 8003328:	e7a5      	b.n	8003276 <_vfiprintf_r+0x11a>
 800332a:	2300      	movs	r3, #0
 800332c:	3401      	adds	r4, #1
 800332e:	9305      	str	r3, [sp, #20]
 8003330:	4619      	mov	r1, r3
 8003332:	f04f 0c0a 	mov.w	ip, #10
 8003336:	4620      	mov	r0, r4
 8003338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800333c:	3a30      	subs	r2, #48	; 0x30
 800333e:	2a09      	cmp	r2, #9
 8003340:	d903      	bls.n	800334a <_vfiprintf_r+0x1ee>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0c5      	beq.n	80032d2 <_vfiprintf_r+0x176>
 8003346:	9105      	str	r1, [sp, #20]
 8003348:	e7c3      	b.n	80032d2 <_vfiprintf_r+0x176>
 800334a:	fb0c 2101 	mla	r1, ip, r1, r2
 800334e:	4604      	mov	r4, r0
 8003350:	2301      	movs	r3, #1
 8003352:	e7f0      	b.n	8003336 <_vfiprintf_r+0x1da>
 8003354:	ab03      	add	r3, sp, #12
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	462a      	mov	r2, r5
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <_vfiprintf_r+0x258>)
 800335c:	a904      	add	r1, sp, #16
 800335e:	4630      	mov	r0, r6
 8003360:	f3af 8000 	nop.w
 8003364:	4607      	mov	r7, r0
 8003366:	1c78      	adds	r0, r7, #1
 8003368:	d1d6      	bne.n	8003318 <_vfiprintf_r+0x1bc>
 800336a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800336c:	07d9      	lsls	r1, r3, #31
 800336e:	d405      	bmi.n	800337c <_vfiprintf_r+0x220>
 8003370:	89ab      	ldrh	r3, [r5, #12]
 8003372:	059a      	lsls	r2, r3, #22
 8003374:	d402      	bmi.n	800337c <_vfiprintf_r+0x220>
 8003376:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003378:	f7ff fe1b 	bl	8002fb2 <__retarget_lock_release_recursive>
 800337c:	89ab      	ldrh	r3, [r5, #12]
 800337e:	065b      	lsls	r3, r3, #25
 8003380:	f53f af12 	bmi.w	80031a8 <_vfiprintf_r+0x4c>
 8003384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003386:	e711      	b.n	80031ac <_vfiprintf_r+0x50>
 8003388:	ab03      	add	r3, sp, #12
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	462a      	mov	r2, r5
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <_vfiprintf_r+0x258>)
 8003390:	a904      	add	r1, sp, #16
 8003392:	4630      	mov	r0, r6
 8003394:	f000 f880 	bl	8003498 <_printf_i>
 8003398:	e7e4      	b.n	8003364 <_vfiprintf_r+0x208>
 800339a:	bf00      	nop
 800339c:	08003cac 	.word	0x08003cac
 80033a0:	08003ccc 	.word	0x08003ccc
 80033a4:	08003c8c 	.word	0x08003c8c
 80033a8:	08003cec 	.word	0x08003cec
 80033ac:	08003cf6 	.word	0x08003cf6
 80033b0:	00000000 	.word	0x00000000
 80033b4:	08003137 	.word	0x08003137
 80033b8:	08003cf2 	.word	0x08003cf2

080033bc <_printf_common>:
 80033bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033c0:	4616      	mov	r6, r2
 80033c2:	4699      	mov	r9, r3
 80033c4:	688a      	ldr	r2, [r1, #8]
 80033c6:	690b      	ldr	r3, [r1, #16]
 80033c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bfb8      	it	lt
 80033d0:	4613      	movlt	r3, r2
 80033d2:	6033      	str	r3, [r6, #0]
 80033d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033d8:	4607      	mov	r7, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	b10a      	cbz	r2, 80033e2 <_printf_common+0x26>
 80033de:	3301      	adds	r3, #1
 80033e0:	6033      	str	r3, [r6, #0]
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	0699      	lsls	r1, r3, #26
 80033e6:	bf42      	ittt	mi
 80033e8:	6833      	ldrmi	r3, [r6, #0]
 80033ea:	3302      	addmi	r3, #2
 80033ec:	6033      	strmi	r3, [r6, #0]
 80033ee:	6825      	ldr	r5, [r4, #0]
 80033f0:	f015 0506 	ands.w	r5, r5, #6
 80033f4:	d106      	bne.n	8003404 <_printf_common+0x48>
 80033f6:	f104 0a19 	add.w	sl, r4, #25
 80033fa:	68e3      	ldr	r3, [r4, #12]
 80033fc:	6832      	ldr	r2, [r6, #0]
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	42ab      	cmp	r3, r5
 8003402:	dc26      	bgt.n	8003452 <_printf_common+0x96>
 8003404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003408:	1e13      	subs	r3, r2, #0
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	bf18      	it	ne
 800340e:	2301      	movne	r3, #1
 8003410:	0692      	lsls	r2, r2, #26
 8003412:	d42b      	bmi.n	800346c <_printf_common+0xb0>
 8003414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003418:	4649      	mov	r1, r9
 800341a:	4638      	mov	r0, r7
 800341c:	47c0      	blx	r8
 800341e:	3001      	adds	r0, #1
 8003420:	d01e      	beq.n	8003460 <_printf_common+0xa4>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	68e5      	ldr	r5, [r4, #12]
 8003426:	6832      	ldr	r2, [r6, #0]
 8003428:	f003 0306 	and.w	r3, r3, #6
 800342c:	2b04      	cmp	r3, #4
 800342e:	bf08      	it	eq
 8003430:	1aad      	subeq	r5, r5, r2
 8003432:	68a3      	ldr	r3, [r4, #8]
 8003434:	6922      	ldr	r2, [r4, #16]
 8003436:	bf0c      	ite	eq
 8003438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800343c:	2500      	movne	r5, #0
 800343e:	4293      	cmp	r3, r2
 8003440:	bfc4      	itt	gt
 8003442:	1a9b      	subgt	r3, r3, r2
 8003444:	18ed      	addgt	r5, r5, r3
 8003446:	2600      	movs	r6, #0
 8003448:	341a      	adds	r4, #26
 800344a:	42b5      	cmp	r5, r6
 800344c:	d11a      	bne.n	8003484 <_printf_common+0xc8>
 800344e:	2000      	movs	r0, #0
 8003450:	e008      	b.n	8003464 <_printf_common+0xa8>
 8003452:	2301      	movs	r3, #1
 8003454:	4652      	mov	r2, sl
 8003456:	4649      	mov	r1, r9
 8003458:	4638      	mov	r0, r7
 800345a:	47c0      	blx	r8
 800345c:	3001      	adds	r0, #1
 800345e:	d103      	bne.n	8003468 <_printf_common+0xac>
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003468:	3501      	adds	r5, #1
 800346a:	e7c6      	b.n	80033fa <_printf_common+0x3e>
 800346c:	18e1      	adds	r1, r4, r3
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	2030      	movs	r0, #48	; 0x30
 8003472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003476:	4422      	add	r2, r4
 8003478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800347c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003480:	3302      	adds	r3, #2
 8003482:	e7c7      	b.n	8003414 <_printf_common+0x58>
 8003484:	2301      	movs	r3, #1
 8003486:	4622      	mov	r2, r4
 8003488:	4649      	mov	r1, r9
 800348a:	4638      	mov	r0, r7
 800348c:	47c0      	blx	r8
 800348e:	3001      	adds	r0, #1
 8003490:	d0e6      	beq.n	8003460 <_printf_common+0xa4>
 8003492:	3601      	adds	r6, #1
 8003494:	e7d9      	b.n	800344a <_printf_common+0x8e>
	...

08003498 <_printf_i>:
 8003498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800349c:	460c      	mov	r4, r1
 800349e:	4691      	mov	r9, r2
 80034a0:	7e27      	ldrb	r7, [r4, #24]
 80034a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80034a4:	2f78      	cmp	r7, #120	; 0x78
 80034a6:	4680      	mov	r8, r0
 80034a8:	469a      	mov	sl, r3
 80034aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034ae:	d807      	bhi.n	80034c0 <_printf_i+0x28>
 80034b0:	2f62      	cmp	r7, #98	; 0x62
 80034b2:	d80a      	bhi.n	80034ca <_printf_i+0x32>
 80034b4:	2f00      	cmp	r7, #0
 80034b6:	f000 80d8 	beq.w	800366a <_printf_i+0x1d2>
 80034ba:	2f58      	cmp	r7, #88	; 0x58
 80034bc:	f000 80a3 	beq.w	8003606 <_printf_i+0x16e>
 80034c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034c8:	e03a      	b.n	8003540 <_printf_i+0xa8>
 80034ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034ce:	2b15      	cmp	r3, #21
 80034d0:	d8f6      	bhi.n	80034c0 <_printf_i+0x28>
 80034d2:	a001      	add	r0, pc, #4	; (adr r0, 80034d8 <_printf_i+0x40>)
 80034d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80034d8:	08003531 	.word	0x08003531
 80034dc:	08003545 	.word	0x08003545
 80034e0:	080034c1 	.word	0x080034c1
 80034e4:	080034c1 	.word	0x080034c1
 80034e8:	080034c1 	.word	0x080034c1
 80034ec:	080034c1 	.word	0x080034c1
 80034f0:	08003545 	.word	0x08003545
 80034f4:	080034c1 	.word	0x080034c1
 80034f8:	080034c1 	.word	0x080034c1
 80034fc:	080034c1 	.word	0x080034c1
 8003500:	080034c1 	.word	0x080034c1
 8003504:	08003651 	.word	0x08003651
 8003508:	08003575 	.word	0x08003575
 800350c:	08003633 	.word	0x08003633
 8003510:	080034c1 	.word	0x080034c1
 8003514:	080034c1 	.word	0x080034c1
 8003518:	08003673 	.word	0x08003673
 800351c:	080034c1 	.word	0x080034c1
 8003520:	08003575 	.word	0x08003575
 8003524:	080034c1 	.word	0x080034c1
 8003528:	080034c1 	.word	0x080034c1
 800352c:	0800363b 	.word	0x0800363b
 8003530:	680b      	ldr	r3, [r1, #0]
 8003532:	1d1a      	adds	r2, r3, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	600a      	str	r2, [r1, #0]
 8003538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800353c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003540:	2301      	movs	r3, #1
 8003542:	e0a3      	b.n	800368c <_printf_i+0x1f4>
 8003544:	6825      	ldr	r5, [r4, #0]
 8003546:	6808      	ldr	r0, [r1, #0]
 8003548:	062e      	lsls	r6, r5, #24
 800354a:	f100 0304 	add.w	r3, r0, #4
 800354e:	d50a      	bpl.n	8003566 <_printf_i+0xce>
 8003550:	6805      	ldr	r5, [r0, #0]
 8003552:	600b      	str	r3, [r1, #0]
 8003554:	2d00      	cmp	r5, #0
 8003556:	da03      	bge.n	8003560 <_printf_i+0xc8>
 8003558:	232d      	movs	r3, #45	; 0x2d
 800355a:	426d      	negs	r5, r5
 800355c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003560:	485e      	ldr	r0, [pc, #376]	; (80036dc <_printf_i+0x244>)
 8003562:	230a      	movs	r3, #10
 8003564:	e019      	b.n	800359a <_printf_i+0x102>
 8003566:	f015 0f40 	tst.w	r5, #64	; 0x40
 800356a:	6805      	ldr	r5, [r0, #0]
 800356c:	600b      	str	r3, [r1, #0]
 800356e:	bf18      	it	ne
 8003570:	b22d      	sxthne	r5, r5
 8003572:	e7ef      	b.n	8003554 <_printf_i+0xbc>
 8003574:	680b      	ldr	r3, [r1, #0]
 8003576:	6825      	ldr	r5, [r4, #0]
 8003578:	1d18      	adds	r0, r3, #4
 800357a:	6008      	str	r0, [r1, #0]
 800357c:	0628      	lsls	r0, r5, #24
 800357e:	d501      	bpl.n	8003584 <_printf_i+0xec>
 8003580:	681d      	ldr	r5, [r3, #0]
 8003582:	e002      	b.n	800358a <_printf_i+0xf2>
 8003584:	0669      	lsls	r1, r5, #25
 8003586:	d5fb      	bpl.n	8003580 <_printf_i+0xe8>
 8003588:	881d      	ldrh	r5, [r3, #0]
 800358a:	4854      	ldr	r0, [pc, #336]	; (80036dc <_printf_i+0x244>)
 800358c:	2f6f      	cmp	r7, #111	; 0x6f
 800358e:	bf0c      	ite	eq
 8003590:	2308      	moveq	r3, #8
 8003592:	230a      	movne	r3, #10
 8003594:	2100      	movs	r1, #0
 8003596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800359a:	6866      	ldr	r6, [r4, #4]
 800359c:	60a6      	str	r6, [r4, #8]
 800359e:	2e00      	cmp	r6, #0
 80035a0:	bfa2      	ittt	ge
 80035a2:	6821      	ldrge	r1, [r4, #0]
 80035a4:	f021 0104 	bicge.w	r1, r1, #4
 80035a8:	6021      	strge	r1, [r4, #0]
 80035aa:	b90d      	cbnz	r5, 80035b0 <_printf_i+0x118>
 80035ac:	2e00      	cmp	r6, #0
 80035ae:	d04d      	beq.n	800364c <_printf_i+0x1b4>
 80035b0:	4616      	mov	r6, r2
 80035b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80035b6:	fb03 5711 	mls	r7, r3, r1, r5
 80035ba:	5dc7      	ldrb	r7, [r0, r7]
 80035bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035c0:	462f      	mov	r7, r5
 80035c2:	42bb      	cmp	r3, r7
 80035c4:	460d      	mov	r5, r1
 80035c6:	d9f4      	bls.n	80035b2 <_printf_i+0x11a>
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d10b      	bne.n	80035e4 <_printf_i+0x14c>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	07df      	lsls	r7, r3, #31
 80035d0:	d508      	bpl.n	80035e4 <_printf_i+0x14c>
 80035d2:	6923      	ldr	r3, [r4, #16]
 80035d4:	6861      	ldr	r1, [r4, #4]
 80035d6:	4299      	cmp	r1, r3
 80035d8:	bfde      	ittt	le
 80035da:	2330      	movle	r3, #48	; 0x30
 80035dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035e4:	1b92      	subs	r2, r2, r6
 80035e6:	6122      	str	r2, [r4, #16]
 80035e8:	f8cd a000 	str.w	sl, [sp]
 80035ec:	464b      	mov	r3, r9
 80035ee:	aa03      	add	r2, sp, #12
 80035f0:	4621      	mov	r1, r4
 80035f2:	4640      	mov	r0, r8
 80035f4:	f7ff fee2 	bl	80033bc <_printf_common>
 80035f8:	3001      	adds	r0, #1
 80035fa:	d14c      	bne.n	8003696 <_printf_i+0x1fe>
 80035fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003600:	b004      	add	sp, #16
 8003602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003606:	4835      	ldr	r0, [pc, #212]	; (80036dc <_printf_i+0x244>)
 8003608:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	680e      	ldr	r6, [r1, #0]
 8003610:	061f      	lsls	r7, r3, #24
 8003612:	f856 5b04 	ldr.w	r5, [r6], #4
 8003616:	600e      	str	r6, [r1, #0]
 8003618:	d514      	bpl.n	8003644 <_printf_i+0x1ac>
 800361a:	07d9      	lsls	r1, r3, #31
 800361c:	bf44      	itt	mi
 800361e:	f043 0320 	orrmi.w	r3, r3, #32
 8003622:	6023      	strmi	r3, [r4, #0]
 8003624:	b91d      	cbnz	r5, 800362e <_printf_i+0x196>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	f023 0320 	bic.w	r3, r3, #32
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	2310      	movs	r3, #16
 8003630:	e7b0      	b.n	8003594 <_printf_i+0xfc>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	f043 0320 	orr.w	r3, r3, #32
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	2378      	movs	r3, #120	; 0x78
 800363c:	4828      	ldr	r0, [pc, #160]	; (80036e0 <_printf_i+0x248>)
 800363e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003642:	e7e3      	b.n	800360c <_printf_i+0x174>
 8003644:	065e      	lsls	r6, r3, #25
 8003646:	bf48      	it	mi
 8003648:	b2ad      	uxthmi	r5, r5
 800364a:	e7e6      	b.n	800361a <_printf_i+0x182>
 800364c:	4616      	mov	r6, r2
 800364e:	e7bb      	b.n	80035c8 <_printf_i+0x130>
 8003650:	680b      	ldr	r3, [r1, #0]
 8003652:	6826      	ldr	r6, [r4, #0]
 8003654:	6960      	ldr	r0, [r4, #20]
 8003656:	1d1d      	adds	r5, r3, #4
 8003658:	600d      	str	r5, [r1, #0]
 800365a:	0635      	lsls	r5, r6, #24
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	d501      	bpl.n	8003664 <_printf_i+0x1cc>
 8003660:	6018      	str	r0, [r3, #0]
 8003662:	e002      	b.n	800366a <_printf_i+0x1d2>
 8003664:	0671      	lsls	r1, r6, #25
 8003666:	d5fb      	bpl.n	8003660 <_printf_i+0x1c8>
 8003668:	8018      	strh	r0, [r3, #0]
 800366a:	2300      	movs	r3, #0
 800366c:	6123      	str	r3, [r4, #16]
 800366e:	4616      	mov	r6, r2
 8003670:	e7ba      	b.n	80035e8 <_printf_i+0x150>
 8003672:	680b      	ldr	r3, [r1, #0]
 8003674:	1d1a      	adds	r2, r3, #4
 8003676:	600a      	str	r2, [r1, #0]
 8003678:	681e      	ldr	r6, [r3, #0]
 800367a:	6862      	ldr	r2, [r4, #4]
 800367c:	2100      	movs	r1, #0
 800367e:	4630      	mov	r0, r6
 8003680:	f7fc fdde 	bl	8000240 <memchr>
 8003684:	b108      	cbz	r0, 800368a <_printf_i+0x1f2>
 8003686:	1b80      	subs	r0, r0, r6
 8003688:	6060      	str	r0, [r4, #4]
 800368a:	6863      	ldr	r3, [r4, #4]
 800368c:	6123      	str	r3, [r4, #16]
 800368e:	2300      	movs	r3, #0
 8003690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003694:	e7a8      	b.n	80035e8 <_printf_i+0x150>
 8003696:	6923      	ldr	r3, [r4, #16]
 8003698:	4632      	mov	r2, r6
 800369a:	4649      	mov	r1, r9
 800369c:	4640      	mov	r0, r8
 800369e:	47d0      	blx	sl
 80036a0:	3001      	adds	r0, #1
 80036a2:	d0ab      	beq.n	80035fc <_printf_i+0x164>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	079b      	lsls	r3, r3, #30
 80036a8:	d413      	bmi.n	80036d2 <_printf_i+0x23a>
 80036aa:	68e0      	ldr	r0, [r4, #12]
 80036ac:	9b03      	ldr	r3, [sp, #12]
 80036ae:	4298      	cmp	r0, r3
 80036b0:	bfb8      	it	lt
 80036b2:	4618      	movlt	r0, r3
 80036b4:	e7a4      	b.n	8003600 <_printf_i+0x168>
 80036b6:	2301      	movs	r3, #1
 80036b8:	4632      	mov	r2, r6
 80036ba:	4649      	mov	r1, r9
 80036bc:	4640      	mov	r0, r8
 80036be:	47d0      	blx	sl
 80036c0:	3001      	adds	r0, #1
 80036c2:	d09b      	beq.n	80035fc <_printf_i+0x164>
 80036c4:	3501      	adds	r5, #1
 80036c6:	68e3      	ldr	r3, [r4, #12]
 80036c8:	9903      	ldr	r1, [sp, #12]
 80036ca:	1a5b      	subs	r3, r3, r1
 80036cc:	42ab      	cmp	r3, r5
 80036ce:	dcf2      	bgt.n	80036b6 <_printf_i+0x21e>
 80036d0:	e7eb      	b.n	80036aa <_printf_i+0x212>
 80036d2:	2500      	movs	r5, #0
 80036d4:	f104 0619 	add.w	r6, r4, #25
 80036d8:	e7f5      	b.n	80036c6 <_printf_i+0x22e>
 80036da:	bf00      	nop
 80036dc:	08003cfd 	.word	0x08003cfd
 80036e0:	08003d0e 	.word	0x08003d0e

080036e4 <_sbrk_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4d06      	ldr	r5, [pc, #24]	; (8003700 <_sbrk_r+0x1c>)
 80036e8:	2300      	movs	r3, #0
 80036ea:	4604      	mov	r4, r0
 80036ec:	4608      	mov	r0, r1
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	f7fd f972 	bl	80009d8 <_sbrk>
 80036f4:	1c43      	adds	r3, r0, #1
 80036f6:	d102      	bne.n	80036fe <_sbrk_r+0x1a>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	b103      	cbz	r3, 80036fe <_sbrk_r+0x1a>
 80036fc:	6023      	str	r3, [r4, #0]
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	20003e88 	.word	0x20003e88

08003704 <__sread>:
 8003704:	b510      	push	{r4, lr}
 8003706:	460c      	mov	r4, r1
 8003708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800370c:	f000 fa64 	bl	8003bd8 <_read_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	bfab      	itete	ge
 8003714:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003716:	89a3      	ldrhlt	r3, [r4, #12]
 8003718:	181b      	addge	r3, r3, r0
 800371a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800371e:	bfac      	ite	ge
 8003720:	6563      	strge	r3, [r4, #84]	; 0x54
 8003722:	81a3      	strhlt	r3, [r4, #12]
 8003724:	bd10      	pop	{r4, pc}

08003726 <__swrite>:
 8003726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800372a:	461f      	mov	r7, r3
 800372c:	898b      	ldrh	r3, [r1, #12]
 800372e:	05db      	lsls	r3, r3, #23
 8003730:	4605      	mov	r5, r0
 8003732:	460c      	mov	r4, r1
 8003734:	4616      	mov	r6, r2
 8003736:	d505      	bpl.n	8003744 <__swrite+0x1e>
 8003738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373c:	2302      	movs	r3, #2
 800373e:	2200      	movs	r2, #0
 8003740:	f000 f9c8 	bl	8003ad4 <_lseek_r>
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800374a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	4632      	mov	r2, r6
 8003752:	463b      	mov	r3, r7
 8003754:	4628      	mov	r0, r5
 8003756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800375a:	f000 b869 	b.w	8003830 <_write_r>

0800375e <__sseek>:
 800375e:	b510      	push	{r4, lr}
 8003760:	460c      	mov	r4, r1
 8003762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003766:	f000 f9b5 	bl	8003ad4 <_lseek_r>
 800376a:	1c43      	adds	r3, r0, #1
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	bf15      	itete	ne
 8003770:	6560      	strne	r0, [r4, #84]	; 0x54
 8003772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800377a:	81a3      	strheq	r3, [r4, #12]
 800377c:	bf18      	it	ne
 800377e:	81a3      	strhne	r3, [r4, #12]
 8003780:	bd10      	pop	{r4, pc}

08003782 <__sclose>:
 8003782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003786:	f000 b8d3 	b.w	8003930 <_close_r>
	...

0800378c <__swbuf_r>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	460e      	mov	r6, r1
 8003790:	4614      	mov	r4, r2
 8003792:	4605      	mov	r5, r0
 8003794:	b118      	cbz	r0, 800379e <__swbuf_r+0x12>
 8003796:	6983      	ldr	r3, [r0, #24]
 8003798:	b90b      	cbnz	r3, 800379e <__swbuf_r+0x12>
 800379a:	f7ff fb6b 	bl	8002e74 <__sinit>
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <__swbuf_r+0x98>)
 80037a0:	429c      	cmp	r4, r3
 80037a2:	d12b      	bne.n	80037fc <__swbuf_r+0x70>
 80037a4:	686c      	ldr	r4, [r5, #4]
 80037a6:	69a3      	ldr	r3, [r4, #24]
 80037a8:	60a3      	str	r3, [r4, #8]
 80037aa:	89a3      	ldrh	r3, [r4, #12]
 80037ac:	071a      	lsls	r2, r3, #28
 80037ae:	d52f      	bpl.n	8003810 <__swbuf_r+0x84>
 80037b0:	6923      	ldr	r3, [r4, #16]
 80037b2:	b36b      	cbz	r3, 8003810 <__swbuf_r+0x84>
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	6820      	ldr	r0, [r4, #0]
 80037b8:	1ac0      	subs	r0, r0, r3
 80037ba:	6963      	ldr	r3, [r4, #20]
 80037bc:	b2f6      	uxtb	r6, r6
 80037be:	4283      	cmp	r3, r0
 80037c0:	4637      	mov	r7, r6
 80037c2:	dc04      	bgt.n	80037ce <__swbuf_r+0x42>
 80037c4:	4621      	mov	r1, r4
 80037c6:	4628      	mov	r0, r5
 80037c8:	f000 f948 	bl	8003a5c <_fflush_r>
 80037cc:	bb30      	cbnz	r0, 800381c <__swbuf_r+0x90>
 80037ce:	68a3      	ldr	r3, [r4, #8]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	60a3      	str	r3, [r4, #8]
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	6022      	str	r2, [r4, #0]
 80037da:	701e      	strb	r6, [r3, #0]
 80037dc:	6963      	ldr	r3, [r4, #20]
 80037de:	3001      	adds	r0, #1
 80037e0:	4283      	cmp	r3, r0
 80037e2:	d004      	beq.n	80037ee <__swbuf_r+0x62>
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	07db      	lsls	r3, r3, #31
 80037e8:	d506      	bpl.n	80037f8 <__swbuf_r+0x6c>
 80037ea:	2e0a      	cmp	r6, #10
 80037ec:	d104      	bne.n	80037f8 <__swbuf_r+0x6c>
 80037ee:	4621      	mov	r1, r4
 80037f0:	4628      	mov	r0, r5
 80037f2:	f000 f933 	bl	8003a5c <_fflush_r>
 80037f6:	b988      	cbnz	r0, 800381c <__swbuf_r+0x90>
 80037f8:	4638      	mov	r0, r7
 80037fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <__swbuf_r+0x9c>)
 80037fe:	429c      	cmp	r4, r3
 8003800:	d101      	bne.n	8003806 <__swbuf_r+0x7a>
 8003802:	68ac      	ldr	r4, [r5, #8]
 8003804:	e7cf      	b.n	80037a6 <__swbuf_r+0x1a>
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <__swbuf_r+0xa0>)
 8003808:	429c      	cmp	r4, r3
 800380a:	bf08      	it	eq
 800380c:	68ec      	ldreq	r4, [r5, #12]
 800380e:	e7ca      	b.n	80037a6 <__swbuf_r+0x1a>
 8003810:	4621      	mov	r1, r4
 8003812:	4628      	mov	r0, r5
 8003814:	f000 f81e 	bl	8003854 <__swsetup_r>
 8003818:	2800      	cmp	r0, #0
 800381a:	d0cb      	beq.n	80037b4 <__swbuf_r+0x28>
 800381c:	f04f 37ff 	mov.w	r7, #4294967295
 8003820:	e7ea      	b.n	80037f8 <__swbuf_r+0x6c>
 8003822:	bf00      	nop
 8003824:	08003cac 	.word	0x08003cac
 8003828:	08003ccc 	.word	0x08003ccc
 800382c:	08003c8c 	.word	0x08003c8c

08003830 <_write_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d07      	ldr	r5, [pc, #28]	; (8003850 <_write_r+0x20>)
 8003834:	4604      	mov	r4, r0
 8003836:	4608      	mov	r0, r1
 8003838:	4611      	mov	r1, r2
 800383a:	2200      	movs	r2, #0
 800383c:	602a      	str	r2, [r5, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	f7fd f879 	bl	8000936 <_write>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_write_r+0x1e>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_write_r+0x1e>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	20003e88 	.word	0x20003e88

08003854 <__swsetup_r>:
 8003854:	4b32      	ldr	r3, [pc, #200]	; (8003920 <__swsetup_r+0xcc>)
 8003856:	b570      	push	{r4, r5, r6, lr}
 8003858:	681d      	ldr	r5, [r3, #0]
 800385a:	4606      	mov	r6, r0
 800385c:	460c      	mov	r4, r1
 800385e:	b125      	cbz	r5, 800386a <__swsetup_r+0x16>
 8003860:	69ab      	ldr	r3, [r5, #24]
 8003862:	b913      	cbnz	r3, 800386a <__swsetup_r+0x16>
 8003864:	4628      	mov	r0, r5
 8003866:	f7ff fb05 	bl	8002e74 <__sinit>
 800386a:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <__swsetup_r+0xd0>)
 800386c:	429c      	cmp	r4, r3
 800386e:	d10f      	bne.n	8003890 <__swsetup_r+0x3c>
 8003870:	686c      	ldr	r4, [r5, #4]
 8003872:	89a3      	ldrh	r3, [r4, #12]
 8003874:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003878:	0719      	lsls	r1, r3, #28
 800387a:	d42c      	bmi.n	80038d6 <__swsetup_r+0x82>
 800387c:	06dd      	lsls	r5, r3, #27
 800387e:	d411      	bmi.n	80038a4 <__swsetup_r+0x50>
 8003880:	2309      	movs	r3, #9
 8003882:	6033      	str	r3, [r6, #0]
 8003884:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003888:	81a3      	strh	r3, [r4, #12]
 800388a:	f04f 30ff 	mov.w	r0, #4294967295
 800388e:	e03e      	b.n	800390e <__swsetup_r+0xba>
 8003890:	4b25      	ldr	r3, [pc, #148]	; (8003928 <__swsetup_r+0xd4>)
 8003892:	429c      	cmp	r4, r3
 8003894:	d101      	bne.n	800389a <__swsetup_r+0x46>
 8003896:	68ac      	ldr	r4, [r5, #8]
 8003898:	e7eb      	b.n	8003872 <__swsetup_r+0x1e>
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <__swsetup_r+0xd8>)
 800389c:	429c      	cmp	r4, r3
 800389e:	bf08      	it	eq
 80038a0:	68ec      	ldreq	r4, [r5, #12]
 80038a2:	e7e6      	b.n	8003872 <__swsetup_r+0x1e>
 80038a4:	0758      	lsls	r0, r3, #29
 80038a6:	d512      	bpl.n	80038ce <__swsetup_r+0x7a>
 80038a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038aa:	b141      	cbz	r1, 80038be <__swsetup_r+0x6a>
 80038ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038b0:	4299      	cmp	r1, r3
 80038b2:	d002      	beq.n	80038ba <__swsetup_r+0x66>
 80038b4:	4630      	mov	r0, r6
 80038b6:	f7ff fb7d 	bl	8002fb4 <_free_r>
 80038ba:	2300      	movs	r3, #0
 80038bc:	6363      	str	r3, [r4, #52]	; 0x34
 80038be:	89a3      	ldrh	r3, [r4, #12]
 80038c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80038c4:	81a3      	strh	r3, [r4, #12]
 80038c6:	2300      	movs	r3, #0
 80038c8:	6063      	str	r3, [r4, #4]
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	f043 0308 	orr.w	r3, r3, #8
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	6923      	ldr	r3, [r4, #16]
 80038d8:	b94b      	cbnz	r3, 80038ee <__swsetup_r+0x9a>
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80038e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e4:	d003      	beq.n	80038ee <__swsetup_r+0x9a>
 80038e6:	4621      	mov	r1, r4
 80038e8:	4630      	mov	r0, r6
 80038ea:	f000 f929 	bl	8003b40 <__smakebuf_r>
 80038ee:	89a0      	ldrh	r0, [r4, #12]
 80038f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038f4:	f010 0301 	ands.w	r3, r0, #1
 80038f8:	d00a      	beq.n	8003910 <__swsetup_r+0xbc>
 80038fa:	2300      	movs	r3, #0
 80038fc:	60a3      	str	r3, [r4, #8]
 80038fe:	6963      	ldr	r3, [r4, #20]
 8003900:	425b      	negs	r3, r3
 8003902:	61a3      	str	r3, [r4, #24]
 8003904:	6923      	ldr	r3, [r4, #16]
 8003906:	b943      	cbnz	r3, 800391a <__swsetup_r+0xc6>
 8003908:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800390c:	d1ba      	bne.n	8003884 <__swsetup_r+0x30>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	0781      	lsls	r1, r0, #30
 8003912:	bf58      	it	pl
 8003914:	6963      	ldrpl	r3, [r4, #20]
 8003916:	60a3      	str	r3, [r4, #8]
 8003918:	e7f4      	b.n	8003904 <__swsetup_r+0xb0>
 800391a:	2000      	movs	r0, #0
 800391c:	e7f7      	b.n	800390e <__swsetup_r+0xba>
 800391e:	bf00      	nop
 8003920:	2000000c 	.word	0x2000000c
 8003924:	08003cac 	.word	0x08003cac
 8003928:	08003ccc 	.word	0x08003ccc
 800392c:	08003c8c 	.word	0x08003c8c

08003930 <_close_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4d06      	ldr	r5, [pc, #24]	; (800394c <_close_r+0x1c>)
 8003934:	2300      	movs	r3, #0
 8003936:	4604      	mov	r4, r0
 8003938:	4608      	mov	r0, r1
 800393a:	602b      	str	r3, [r5, #0]
 800393c:	f7fd f817 	bl	800096e <_close>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_close_r+0x1a>
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	b103      	cbz	r3, 800394a <_close_r+0x1a>
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	20003e88 	.word	0x20003e88

08003950 <__sflush_r>:
 8003950:	898a      	ldrh	r2, [r1, #12]
 8003952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	4605      	mov	r5, r0
 8003958:	0710      	lsls	r0, r2, #28
 800395a:	460c      	mov	r4, r1
 800395c:	d458      	bmi.n	8003a10 <__sflush_r+0xc0>
 800395e:	684b      	ldr	r3, [r1, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	dc05      	bgt.n	8003970 <__sflush_r+0x20>
 8003964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	dc02      	bgt.n	8003970 <__sflush_r+0x20>
 800396a:	2000      	movs	r0, #0
 800396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003972:	2e00      	cmp	r6, #0
 8003974:	d0f9      	beq.n	800396a <__sflush_r+0x1a>
 8003976:	2300      	movs	r3, #0
 8003978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800397c:	682f      	ldr	r7, [r5, #0]
 800397e:	602b      	str	r3, [r5, #0]
 8003980:	d032      	beq.n	80039e8 <__sflush_r+0x98>
 8003982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003984:	89a3      	ldrh	r3, [r4, #12]
 8003986:	075a      	lsls	r2, r3, #29
 8003988:	d505      	bpl.n	8003996 <__sflush_r+0x46>
 800398a:	6863      	ldr	r3, [r4, #4]
 800398c:	1ac0      	subs	r0, r0, r3
 800398e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003990:	b10b      	cbz	r3, 8003996 <__sflush_r+0x46>
 8003992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003994:	1ac0      	subs	r0, r0, r3
 8003996:	2300      	movs	r3, #0
 8003998:	4602      	mov	r2, r0
 800399a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800399c:	6a21      	ldr	r1, [r4, #32]
 800399e:	4628      	mov	r0, r5
 80039a0:	47b0      	blx	r6
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	d106      	bne.n	80039b6 <__sflush_r+0x66>
 80039a8:	6829      	ldr	r1, [r5, #0]
 80039aa:	291d      	cmp	r1, #29
 80039ac:	d82c      	bhi.n	8003a08 <__sflush_r+0xb8>
 80039ae:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <__sflush_r+0x108>)
 80039b0:	40ca      	lsrs	r2, r1
 80039b2:	07d6      	lsls	r6, r2, #31
 80039b4:	d528      	bpl.n	8003a08 <__sflush_r+0xb8>
 80039b6:	2200      	movs	r2, #0
 80039b8:	6062      	str	r2, [r4, #4]
 80039ba:	04d9      	lsls	r1, r3, #19
 80039bc:	6922      	ldr	r2, [r4, #16]
 80039be:	6022      	str	r2, [r4, #0]
 80039c0:	d504      	bpl.n	80039cc <__sflush_r+0x7c>
 80039c2:	1c42      	adds	r2, r0, #1
 80039c4:	d101      	bne.n	80039ca <__sflush_r+0x7a>
 80039c6:	682b      	ldr	r3, [r5, #0]
 80039c8:	b903      	cbnz	r3, 80039cc <__sflush_r+0x7c>
 80039ca:	6560      	str	r0, [r4, #84]	; 0x54
 80039cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ce:	602f      	str	r7, [r5, #0]
 80039d0:	2900      	cmp	r1, #0
 80039d2:	d0ca      	beq.n	800396a <__sflush_r+0x1a>
 80039d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80039d8:	4299      	cmp	r1, r3
 80039da:	d002      	beq.n	80039e2 <__sflush_r+0x92>
 80039dc:	4628      	mov	r0, r5
 80039de:	f7ff fae9 	bl	8002fb4 <_free_r>
 80039e2:	2000      	movs	r0, #0
 80039e4:	6360      	str	r0, [r4, #52]	; 0x34
 80039e6:	e7c1      	b.n	800396c <__sflush_r+0x1c>
 80039e8:	6a21      	ldr	r1, [r4, #32]
 80039ea:	2301      	movs	r3, #1
 80039ec:	4628      	mov	r0, r5
 80039ee:	47b0      	blx	r6
 80039f0:	1c41      	adds	r1, r0, #1
 80039f2:	d1c7      	bne.n	8003984 <__sflush_r+0x34>
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0c4      	beq.n	8003984 <__sflush_r+0x34>
 80039fa:	2b1d      	cmp	r3, #29
 80039fc:	d001      	beq.n	8003a02 <__sflush_r+0xb2>
 80039fe:	2b16      	cmp	r3, #22
 8003a00:	d101      	bne.n	8003a06 <__sflush_r+0xb6>
 8003a02:	602f      	str	r7, [r5, #0]
 8003a04:	e7b1      	b.n	800396a <__sflush_r+0x1a>
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	e7ad      	b.n	800396c <__sflush_r+0x1c>
 8003a10:	690f      	ldr	r7, [r1, #16]
 8003a12:	2f00      	cmp	r7, #0
 8003a14:	d0a9      	beq.n	800396a <__sflush_r+0x1a>
 8003a16:	0793      	lsls	r3, r2, #30
 8003a18:	680e      	ldr	r6, [r1, #0]
 8003a1a:	bf08      	it	eq
 8003a1c:	694b      	ldreq	r3, [r1, #20]
 8003a1e:	600f      	str	r7, [r1, #0]
 8003a20:	bf18      	it	ne
 8003a22:	2300      	movne	r3, #0
 8003a24:	eba6 0807 	sub.w	r8, r6, r7
 8003a28:	608b      	str	r3, [r1, #8]
 8003a2a:	f1b8 0f00 	cmp.w	r8, #0
 8003a2e:	dd9c      	ble.n	800396a <__sflush_r+0x1a>
 8003a30:	6a21      	ldr	r1, [r4, #32]
 8003a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a34:	4643      	mov	r3, r8
 8003a36:	463a      	mov	r2, r7
 8003a38:	4628      	mov	r0, r5
 8003a3a:	47b0      	blx	r6
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	dc06      	bgt.n	8003a4e <__sflush_r+0xfe>
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a46:	81a3      	strh	r3, [r4, #12]
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	e78e      	b.n	800396c <__sflush_r+0x1c>
 8003a4e:	4407      	add	r7, r0
 8003a50:	eba8 0800 	sub.w	r8, r8, r0
 8003a54:	e7e9      	b.n	8003a2a <__sflush_r+0xda>
 8003a56:	bf00      	nop
 8003a58:	20400001 	.word	0x20400001

08003a5c <_fflush_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	690b      	ldr	r3, [r1, #16]
 8003a60:	4605      	mov	r5, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	b913      	cbnz	r3, 8003a6c <_fflush_r+0x10>
 8003a66:	2500      	movs	r5, #0
 8003a68:	4628      	mov	r0, r5
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	b118      	cbz	r0, 8003a76 <_fflush_r+0x1a>
 8003a6e:	6983      	ldr	r3, [r0, #24]
 8003a70:	b90b      	cbnz	r3, 8003a76 <_fflush_r+0x1a>
 8003a72:	f7ff f9ff 	bl	8002e74 <__sinit>
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <_fflush_r+0x6c>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d11b      	bne.n	8003ab4 <_fflush_r+0x58>
 8003a7c:	686c      	ldr	r4, [r5, #4]
 8003a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ef      	beq.n	8003a66 <_fflush_r+0xa>
 8003a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a88:	07d0      	lsls	r0, r2, #31
 8003a8a:	d404      	bmi.n	8003a96 <_fflush_r+0x3a>
 8003a8c:	0599      	lsls	r1, r3, #22
 8003a8e:	d402      	bmi.n	8003a96 <_fflush_r+0x3a>
 8003a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a92:	f7ff fa8d 	bl	8002fb0 <__retarget_lock_acquire_recursive>
 8003a96:	4628      	mov	r0, r5
 8003a98:	4621      	mov	r1, r4
 8003a9a:	f7ff ff59 	bl	8003950 <__sflush_r>
 8003a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aa0:	07da      	lsls	r2, r3, #31
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	d4e0      	bmi.n	8003a68 <_fflush_r+0xc>
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	059b      	lsls	r3, r3, #22
 8003aaa:	d4dd      	bmi.n	8003a68 <_fflush_r+0xc>
 8003aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aae:	f7ff fa80 	bl	8002fb2 <__retarget_lock_release_recursive>
 8003ab2:	e7d9      	b.n	8003a68 <_fflush_r+0xc>
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <_fflush_r+0x70>)
 8003ab6:	429c      	cmp	r4, r3
 8003ab8:	d101      	bne.n	8003abe <_fflush_r+0x62>
 8003aba:	68ac      	ldr	r4, [r5, #8]
 8003abc:	e7df      	b.n	8003a7e <_fflush_r+0x22>
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <_fflush_r+0x74>)
 8003ac0:	429c      	cmp	r4, r3
 8003ac2:	bf08      	it	eq
 8003ac4:	68ec      	ldreq	r4, [r5, #12]
 8003ac6:	e7da      	b.n	8003a7e <_fflush_r+0x22>
 8003ac8:	08003cac 	.word	0x08003cac
 8003acc:	08003ccc 	.word	0x08003ccc
 8003ad0:	08003c8c 	.word	0x08003c8c

08003ad4 <_lseek_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4d07      	ldr	r5, [pc, #28]	; (8003af4 <_lseek_r+0x20>)
 8003ad8:	4604      	mov	r4, r0
 8003ada:	4608      	mov	r0, r1
 8003adc:	4611      	mov	r1, r2
 8003ade:	2200      	movs	r2, #0
 8003ae0:	602a      	str	r2, [r5, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f7fc ff6a 	bl	80009bc <_lseek>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_lseek_r+0x1e>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_lseek_r+0x1e>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	20003e88 	.word	0x20003e88

08003af8 <__swhatbuf_r>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	460e      	mov	r6, r1
 8003afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b00:	2900      	cmp	r1, #0
 8003b02:	b096      	sub	sp, #88	; 0x58
 8003b04:	4614      	mov	r4, r2
 8003b06:	461d      	mov	r5, r3
 8003b08:	da07      	bge.n	8003b1a <__swhatbuf_r+0x22>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	602b      	str	r3, [r5, #0]
 8003b0e:	89b3      	ldrh	r3, [r6, #12]
 8003b10:	061a      	lsls	r2, r3, #24
 8003b12:	d410      	bmi.n	8003b36 <__swhatbuf_r+0x3e>
 8003b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b18:	e00e      	b.n	8003b38 <__swhatbuf_r+0x40>
 8003b1a:	466a      	mov	r2, sp
 8003b1c:	f000 f86e 	bl	8003bfc <_fstat_r>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	dbf2      	blt.n	8003b0a <__swhatbuf_r+0x12>
 8003b24:	9a01      	ldr	r2, [sp, #4]
 8003b26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b2e:	425a      	negs	r2, r3
 8003b30:	415a      	adcs	r2, r3
 8003b32:	602a      	str	r2, [r5, #0]
 8003b34:	e7ee      	b.n	8003b14 <__swhatbuf_r+0x1c>
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	2000      	movs	r0, #0
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	b016      	add	sp, #88	; 0x58
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}

08003b40 <__smakebuf_r>:
 8003b40:	898b      	ldrh	r3, [r1, #12]
 8003b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b44:	079d      	lsls	r5, r3, #30
 8003b46:	4606      	mov	r6, r0
 8003b48:	460c      	mov	r4, r1
 8003b4a:	d507      	bpl.n	8003b5c <__smakebuf_r+0x1c>
 8003b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	6123      	str	r3, [r4, #16]
 8003b54:	2301      	movs	r3, #1
 8003b56:	6163      	str	r3, [r4, #20]
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	ab01      	add	r3, sp, #4
 8003b5e:	466a      	mov	r2, sp
 8003b60:	f7ff ffca 	bl	8003af8 <__swhatbuf_r>
 8003b64:	9900      	ldr	r1, [sp, #0]
 8003b66:	4605      	mov	r5, r0
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f7ff fa73 	bl	8003054 <_malloc_r>
 8003b6e:	b948      	cbnz	r0, 8003b84 <__smakebuf_r+0x44>
 8003b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b74:	059a      	lsls	r2, r3, #22
 8003b76:	d4ef      	bmi.n	8003b58 <__smakebuf_r+0x18>
 8003b78:	f023 0303 	bic.w	r3, r3, #3
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	e7e3      	b.n	8003b4c <__smakebuf_r+0xc>
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <__smakebuf_r+0x7c>)
 8003b86:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	6020      	str	r0, [r4, #0]
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	9b00      	ldr	r3, [sp, #0]
 8003b94:	6163      	str	r3, [r4, #20]
 8003b96:	9b01      	ldr	r3, [sp, #4]
 8003b98:	6120      	str	r0, [r4, #16]
 8003b9a:	b15b      	cbz	r3, 8003bb4 <__smakebuf_r+0x74>
 8003b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f83d 	bl	8003c20 <_isatty_r>
 8003ba6:	b128      	cbz	r0, 8003bb4 <__smakebuf_r+0x74>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	89a0      	ldrh	r0, [r4, #12]
 8003bb6:	4305      	orrs	r5, r0
 8003bb8:	81a5      	strh	r5, [r4, #12]
 8003bba:	e7cd      	b.n	8003b58 <__smakebuf_r+0x18>
 8003bbc:	08002e0d 	.word	0x08002e0d

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f7ff b9f5 	b.w	8002fb0 <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	20003e90 	.word	0x20003e90

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f7ff b9f0 	b.w	8002fb2 <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	20003e90 	.word	0x20003e90

08003bd8 <_read_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4d07      	ldr	r5, [pc, #28]	; (8003bf8 <_read_r+0x20>)
 8003bdc:	4604      	mov	r4, r0
 8003bde:	4608      	mov	r0, r1
 8003be0:	4611      	mov	r1, r2
 8003be2:	2200      	movs	r2, #0
 8003be4:	602a      	str	r2, [r5, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7fc fe88 	bl	80008fc <_read>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_read_r+0x1e>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_read_r+0x1e>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	20003e88 	.word	0x20003e88

08003bfc <_fstat_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4d07      	ldr	r5, [pc, #28]	; (8003c1c <_fstat_r+0x20>)
 8003c00:	2300      	movs	r3, #0
 8003c02:	4604      	mov	r4, r0
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	f7fc febc 	bl	8000986 <_fstat>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d102      	bne.n	8003c18 <_fstat_r+0x1c>
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	b103      	cbz	r3, 8003c18 <_fstat_r+0x1c>
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	bd38      	pop	{r3, r4, r5, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20003e88 	.word	0x20003e88

08003c20 <_isatty_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4d06      	ldr	r5, [pc, #24]	; (8003c3c <_isatty_r+0x1c>)
 8003c24:	2300      	movs	r3, #0
 8003c26:	4604      	mov	r4, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	602b      	str	r3, [r5, #0]
 8003c2c:	f7fc febb 	bl	80009a6 <_isatty>
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d102      	bne.n	8003c3a <_isatty_r+0x1a>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	b103      	cbz	r3, 8003c3a <_isatty_r+0x1a>
 8003c38:	6023      	str	r3, [r4, #0]
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	20003e88 	.word	0x20003e88

08003c40 <_init>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr

08003c4c <_fini>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr
