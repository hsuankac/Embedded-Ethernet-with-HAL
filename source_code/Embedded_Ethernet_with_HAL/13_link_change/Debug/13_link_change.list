
13_link_change.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b00  0800fbe8  0800fbe8  0001fbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126e8  080126e8  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  080126e8  080126e8  000226e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126f0  080126f0  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126f0  080126f0  000226f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126f4  080126f4  000226f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080126f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000763c  20000078  08012770  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200076b4  08012770  000376b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003169c  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f81  00000000  00000000  00061742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  000676c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  00068ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033162  00000000  00000000  00069da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024928  00000000  00000000  0009cf02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118711  00000000  00000000  000c182a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d9f3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057bc  00000000  00000000  001d9f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fbd0 	.word	0x0800fbd0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0800fbd0 	.word	0x0800fbd0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <adc1_pa4_init>:

ADC_HandleTypeDef hadc1;


void adc1_pa4_init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
    ADC_ChannelConfTypeDef sConfig 	  = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <adc1_pa4_init+0xe0>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a2d      	ldr	r2, [pc, #180]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <adc1_pa4_init+0xe0>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <adc1_pa4_init+0xe0>)
 800061a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061e:	6453      	str	r3, [r2, #68]	; 0x44
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <adc1_pa4_init+0xe0>)
 8000622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

	/*Set PA4 as analog pin*/
	GPIO_InitStruct.Pin  = SENSOR_PIN;
 800062c:	2310      	movs	r3, #16
 800062e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000630:	2303      	movs	r3, #3
 8000632:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(SENSOR_PORT,&GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	481f      	ldr	r0, [pc, #124]	; (80006bc <adc1_pa4_init+0xe4>)
 8000640:	f002 f8b4 	bl	80027ac <HAL_GPIO_Init>


	/*Configure ADC parameters*/

	hadc1.Instance =  ADC1;
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <adc1_pa4_init+0xec>)
 8000648:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler =  ADC_CLOCK_SYNC_PCLK_DIV8;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <adc1_pa4_init+0xe8>)
 800064c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000650:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution	  =  ADC_RESOLUTION_12B;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode   =  ADC_SCAN_DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <adc1_pa4_init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode	= DISABLE;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <adc1_pa4_init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <adc1_pa4_init+0xf0>)
 8000676:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <adc1_pa4_init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000680:	2201      	movs	r2, #1
 8000682:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <adc1_pa4_init+0xe8>)
 800068e:	2201      	movs	r2, #1
 8000690:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc1);
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <adc1_pa4_init+0xe8>)
 8000694:	f000 fb5c 	bl	8000d50 <HAL_ADC_Init>

	sConfig.Channel = ADC_CHANNEL_4;
 8000698:	2304      	movs	r3, #4
 800069a:	60fb      	str	r3, [r7, #12]
	sConfig.Rank    = ADC_REGULAR_RANK_1;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime =  ADC_SAMPLETIME_480CYCLES;
 80006a0:	2307      	movs	r3, #7
 80006a2:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc1,&sConfig);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <adc1_pa4_init+0xe8>)
 80006ac:	f000 fb9e 	bl	8000dec <HAL_ADC_ConfigChannel>


}
 80006b0:	bf00      	nop
 80006b2:	3730      	adds	r7, #48	; 0x30
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000
 80006c0:	2000027c 	.word	0x2000027c
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <leds_init>:
#include "leds.h"



void leds_init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef   GPIO_InitStruct = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <leds_init+0x4c>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <leds_init+0x4c>)
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	6313      	str	r3, [r2, #48]	; 0x30
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <leds_init+0x4c>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	f003 0302 	and.w	r3, r3, #2
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStruct.Pin  = GREEN_LED | BLUE_LED | RED_LED | CUSTOM_LED;
 80006f8:	f24c 0381 	movw	r3, #49281	; 0xc081
 80006fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull =  GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(LEDS_PORT,&GPIO_InitStruct);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <leds_init+0x50>)
 800070c:	f002 f84e 	bl	80027ac <HAL_GPIO_Init>
}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020400 	.word	0x40020400

08000720 <led_on>:


void led_on(uint32_t led)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	switch(led)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800072e:	d025      	beq.n	800077c <led_on+0x5c>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000736:	d828      	bhi.n	800078a <led_on+0x6a>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800073e:	d016      	beq.n	800076e <led_on+0x4e>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000746:	d820      	bhi.n	800078a <led_on+0x6a>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d003      	beq.n	8000756 <led_on+0x36>
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b80      	cmp	r3, #128	; 0x80
 8000752:	d006      	beq.n	8000762 <led_on+0x42>
		case CUSTOM_LED:
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
			break;

	}
}
 8000754:	e019      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,GREEN_LED,GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <led_on+0x74>)
 800075c:	f002 f9d2 	bl	8002b04 <HAL_GPIO_WritePin>
			break;
 8000760:	e013      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,BLUE_LED,GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <led_on+0x74>)
 8000768:	f002 f9cc 	bl	8002b04 <HAL_GPIO_WritePin>
			break;
 800076c:	e00d      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,RED_LED,GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <led_on+0x74>)
 8000776:	f002 f9c5 	bl	8002b04 <HAL_GPIO_WritePin>
			break;
 800077a:	e006      	b.n	800078a <led_on+0x6a>
			HAL_GPIO_WritePin(LEDS_PORT,CUSTOM_LED,GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <led_on+0x74>)
 8000784:	f002 f9be 	bl	8002b04 <HAL_GPIO_WritePin>
			break;
 8000788:	bf00      	nop
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40020400 	.word	0x40020400

08000798 <main>:
extern struct netif gnetif;



int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	HAL_Init();
 800079c:	f000 fa4f 	bl	8000c3e <HAL_Init>
	sysclock_config();
 80007a0:	f000 f830 	bl	8000804 <sysclock_config>
	leds_init();
 80007a4:	f7ff ff92 	bl	80006cc <leds_init>
	uart3_tx_init();
 80007a8:	f000 f992 	bl	8000ad0 <uart3_tx_init>
	adc1_pa4_init();
 80007ac:	f7ff ff14 	bl	80005d8 <adc1_pa4_init>

	lwip_lib_init();
 80007b0:	f003 fb4c 	bl	8003e4c <lwip_lib_init>

	g_hclk_freq = HAL_RCC_GetHCLKFreq();
 80007b4:	f002 fe60 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <main+0x5c>)
 80007bc:	6013      	str	r3, [r2, #0]
	g_pclk1_freq = HAL_RCC_GetPCLK1Freq();
 80007be:	f002 fe67 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <main+0x60>)
 80007c6:	6013      	str	r3, [r2, #0]
	g_pclk2_freq = HAL_RCC_GetPCLK2Freq();
 80007c8:	f002 fe76 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <main+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

	led_on(GREEN_LED);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff ffa4 	bl	8000720 <led_on>
	led_on(BLUE_LED);
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	f7ff ffa1 	bl	8000720 <led_on>
	led_on(RED_LED);
 80007de:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007e2:	f7ff ff9d 	bl	8000720 <led_on>

	ethernetif_notify_conn_changed(&gnetif);
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <main+0x68>)
 80007e8:	f000 f86a 	bl	80008c0 <ethernetif_notify_conn_changed>
	while(1)
	{

		lwip_process();
 80007ec:	f003 fc60 	bl	80040b0 <lwip_process>
 80007f0:	e7fc      	b.n	80007ec <main+0x54>
 80007f2:	bf00      	nop
 80007f4:	200002d0 	.word	0x200002d0
 80007f8:	200002c4 	.word	0x200002c4
 80007fc:	200002cc 	.word	0x200002cc
 8000800:	20000360 	.word	0x20000360

08000804 <sysclock_config>:




void sysclock_config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef		RCC_OscInitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2234      	movs	r2, #52	; 0x34
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f00e f9ba 	bl	800eb8c <memset>
	RCC_ClkInitTypeDef		RCC_ClkInitStruct = {0};
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <sysclock_config+0xb4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <sysclock_config+0xb4>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <sysclock_config+0xb4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <sysclock_config+0xb8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <sysclock_config+0xb8>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <sysclock_config+0xb8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState		 = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM		 = 12;
 800086c:	230c      	movs	r3, #12
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN		 = 192;
 8000870:	23c0      	movs	r3, #192	; 0xc0
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ		 = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP		 = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	647b      	str	r3, [r7, #68]	; 0x44

	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4618      	mov	r0, r3
 8000882:	f002 f9a9 	bl	8002bd8 <HAL_RCC_OscConfig>

	/*Activate the over drive mode */
	HAL_PWREx_EnableOverDrive();
 8000886:	f002 f957 	bl	8002b38 <HAL_PWREx_EnableOverDrive>


	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	60bb      	str	r3, [r7, #8]
								  |RCC_CLOCKTYPE_PCLK1 |RCC_CLOCKTYPE_PCLK2;

	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2302      	movs	r3, #2
 8000890:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800089a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	61bb      	str	r3, [r7, #24]

	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_6);
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2106      	movs	r1, #6
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 fc43 	bl	8003134 <HAL_RCC_ClockConfig>

}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	; 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <ethernetif_notify_conn_changed>:

 void ethernetif_notify_conn_changed(struct netif *netif)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

	  if(netif_is_link_up(netif))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <ethernetif_notify_conn_changed+0x22>
	  {
		  printf("Cable Connected !!\n\r");
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <ethernetif_notify_conn_changed+0x30>)
 80008dc:	f00e f95e 	bl	800eb9c <iprintf>
	  }
	  else
	  {
		  printf("ERR : Cable not connected !!\n\r");
	  }
}
 80008e0:	e002      	b.n	80008e8 <ethernetif_notify_conn_changed+0x28>
		  printf("ERR : Cable not connected !!\n\r");
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <ethernetif_notify_conn_changed+0x34>)
 80008e4:	f00e f95a 	bl	800eb9c <iprintf>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	0800fbe8 	.word	0x0800fbe8
 80008f4:	0800fc00 	.word	0x0800fc00

080008f8 <SysTick_Handler>:


extern ETH_HandleTypeDef heth;

void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80008fc:	f000 f9e4 	bl	8000cc8 <HAL_IncTick>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <ETH_IRQHandler>:


void ETH_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_ETH_IRQHandler(&heth);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <ETH_IRQHandler+0x10>)
 800090a:	f001 f9a3 	bl	8001c54 <HAL_ETH_IRQHandler>
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200022ac 	.word	0x200022ac

08000918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	return 1;
 800091c:	2301      	movs	r3, #1
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <_kill>:

int _kill(int pid, int sig)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <_kill+0x20>)
 8000934:	2216      	movs	r2, #22
 8000936:	601a      	str	r2, [r3, #0]
	return -1;
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093c:	4618      	mov	r0, r3
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	200076a4 	.word	0x200076a4

0800094c <_exit>:

void _exit (int status)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ffe5 	bl	8000928 <_kill>
	while (1) {}		/* Make sure we hang here */
 800095e:	e7fe      	b.n	800095e <_exit+0x12>

08000960 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	e00a      	b.n	8000988 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000972:	f3af 8000 	nop.w
 8000976:	4601      	mov	r1, r0
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	60ba      	str	r2, [r7, #8]
 800097e:	b2ca      	uxtb	r2, r1
 8000980:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3301      	adds	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	dbf0      	blt.n	8000972 <_read+0x12>
	}

return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e009      	b.n	80009c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	60ba      	str	r2, [r7, #8]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 f879 	bl	8000aac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3301      	adds	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	dbf1      	blt.n	80009ac <_write+0x12>
	}
	return len;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_close>:

int _close(int file)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	return -1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009fa:	605a      	str	r2, [r3, #4]
	return 0;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <_isatty>:

int _isatty(int file)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
	return 1;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <_sbrk+0x5c>)
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <_sbrk+0x60>)
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_sbrk+0x64>)
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <_sbrk+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d205      	bcs.n	8000a78 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <_sbrk+0x6c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	371c      	adds	r7, #28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	20080000 	.word	0x20080000
 8000a9c:	00000400 	.word	0x00000400
 8000aa0:	20000094 	.word	0x20000094
 8000aa4:	200076b8 	.word	0x200076b8
 8000aa8:	200076a4 	.word	0x200076a4

08000aac <__io_putchar>:

static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate);


int __io_putchar(int ch)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,10);
 8000ab4:	1d39      	adds	r1, r7, #4
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4804      	ldr	r0, [pc, #16]	; (8000acc <__io_putchar+0x20>)
 8000abc:	f002 fd68 	bl	8003590 <HAL_UART_Transmit>
	return ch;
 8000ac0:	687b      	ldr	r3, [r7, #4]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200002d4 	.word	0x200002d4

08000ad0 <uart3_tx_init>:

void uart3_tx_init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <uart3_tx_init+0xb8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <uart3_tx_init+0xb8>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <uart3_tx_init+0xb8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0308 	and.w	r3, r3, #8
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]


	GPIO_InitStruct.Pin  = GPIO_PIN_8;
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b10:	2307      	movs	r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOD,&GPIO_InitStruct);
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	481c      	ldr	r0, [pc, #112]	; (8000b8c <uart3_tx_init+0xbc>)
 8000b1c:	f001 fe46 	bl	80027ac <HAL_GPIO_Init>


	__HAL_RCC_USART3_CLK_ENABLE();
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <uart3_tx_init+0xb8>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <uart3_tx_init+0xb8>)
 8000b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <uart3_tx_init+0xb8>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]


	huart3.Instance = USART3;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <uart3_tx_init+0xc4>)
 8000b3c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits   = UART_STOPBITS_1;
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity	= UART_PARITY_NONE;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling =  UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]

	HAL_UART_Init(&huart3);
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <uart3_tx_init+0xc0>)
 8000b72:	f002 fcb5 	bl	80034e0 <HAL_UART_Init>

   /*Set baudrate fix*/
	uart3_set_baudrate(16000000,115200);
 8000b76:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <uart3_tx_init+0xc8>)
 8000b7c:	f000 f822 	bl	8000bc4 <uart3_set_baudrate>
}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	200002d4 	.word	0x200002d4
 8000b94:	40004800 	.word	0x40004800
 8000b98:	00f42400 	.word	0x00f42400

08000b9c <compute_uart_div>:



static uint16_t compute_uart_div(uint32_t periph_clock, uint32_t baudrate)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	return ((periph_clock + (baudrate/2U))/baudrate);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	085a      	lsrs	r2, r3, #1
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	441a      	add	r2, r3
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	b29b      	uxth	r3, r3
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <uart3_set_baudrate>:


static void uart3_set_baudrate(uint32_t periph_clock, uint32_t baudrate)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	USART3->BRR  = compute_uart_div(periph_clock,baudrate);
 8000bce:	6839      	ldr	r1, [r7, #0]
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ffe3 	bl	8000b9c <compute_uart_div>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <uart3_set_baudrate+0x24>)
 8000bdc:	60da      	str	r2, [r3, #12]
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004800 	.word	0x40004800

08000bec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1a:	f00d ff77 	bl	800eb0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fdbb 	bl	8000798 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   r0, =_estack
 8000c24:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c30:	080126f8 	.word	0x080126f8
  ldr r2, =_sbss
 8000c34:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c38:	200076b4 	.word	0x200076b4

08000c3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>

08000c3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 fbe6 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 f80d 	bl	8000c68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c4e:	f000 f803 	bl	8000c58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fbf9 	bl	800147e <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 fbc1 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000358 	.word	0x20000358

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000358 	.word	0x20000358

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffde 	bl	8000cf0 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008

08000d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e031      	b.n	8000dca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d109      	bne.n	8000d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f832 	bl	8000dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d116      	bne.n	8000dbc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_ADC_Init+0x84>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	f043 0202 	orr.w	r2, r3, #2
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f96e 	bl	8001080 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f023 0303 	bic.w	r3, r3, #3
 8000db2:	f043 0201 	orr.w	r2, r3, #1
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dba:	e001      	b.n	8000dc0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	ffffeefd 	.word	0xffffeefd

08000dd8 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d101      	bne.n	8000e08 <HAL_ADC_ConfigChannel+0x1c>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e12a      	b.n	800105e <HAL_ADC_ConfigChannel+0x272>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b09      	cmp	r3, #9
 8000e16:	d93a      	bls.n	8000e8e <HAL_ADC_ConfigChannel+0xa2>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e20:	d035      	beq.n	8000e8e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68d9      	ldr	r1, [r3, #12]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	3b1e      	subs	r3, #30
 8000e38:	2207      	movs	r2, #7
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	400a      	ands	r2, r1
 8000e46:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a87      	ldr	r2, [pc, #540]	; (800106c <HAL_ADC_ConfigChannel+0x280>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10a      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68d9      	ldr	r1, [r3, #12]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	061a      	lsls	r2, r3, #24
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e66:	e035      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68d9      	ldr	r1, [r3, #12]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4403      	add	r3, r0
 8000e80:	3b1e      	subs	r3, #30
 8000e82:	409a      	lsls	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e8c:	e022      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6919      	ldr	r1, [r3, #16]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	400a      	ands	r2, r1
 8000eb0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6919      	ldr	r1, [r3, #16]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4403      	add	r3, r0
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b06      	cmp	r3, #6
 8000eda:	d824      	bhi.n	8000f26 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	3b05      	subs	r3, #5
 8000eee:	221f      	movs	r2, #31
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	400a      	ands	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	3b05      	subs	r3, #5
 8000f18:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
 8000f24:	e04c      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d824      	bhi.n	8000f78 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3b23      	subs	r3, #35	; 0x23
 8000f40:	221f      	movs	r2, #31
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	3b23      	subs	r3, #35	; 0x23
 8000f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
 8000f76:	e023      	b.n	8000fc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	3b41      	subs	r3, #65	; 0x41
 8000f8a:	221f      	movs	r2, #31
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43da      	mvns	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	400a      	ands	r2, r1
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3b41      	subs	r3, #65	; 0x41
 8000fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <HAL_ADC_ConfigChannel+0x284>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10a      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x1f4>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000fd2:	d105      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8000fd4:	4b27      	ldr	r3, [pc, #156]	; (8001074 <HAL_ADC_ConfigChannel+0x288>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <HAL_ADC_ConfigChannel+0x288>)
 8000fda:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000fde:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a22      	ldr	r2, [pc, #136]	; (8001070 <HAL_ADC_ConfigChannel+0x284>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d109      	bne.n	8000ffe <HAL_ADC_ConfigChannel+0x212>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d105      	bne.n	8000ffe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_ADC_ConfigChannel+0x288>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <HAL_ADC_ConfigChannel+0x288>)
 8000ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ffc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <HAL_ADC_ConfigChannel+0x284>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d125      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x268>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_ADC_ConfigChannel+0x280>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d003      	beq.n	800101a <HAL_ADC_ConfigChannel+0x22e>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b11      	cmp	r3, #17
 8001018:	d11c      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_ConfigChannel+0x288>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_ADC_ConfigChannel+0x288>)
 8001020:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001024:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_ADC_ConfigChannel+0x280>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d111      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_ADC_ConfigChannel+0x28c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a11      	ldr	r2, [pc, #68]	; (800107c <HAL_ADC_ConfigChannel+0x290>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9a      	lsrs	r2, r3, #18
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001046:	e002      	b.n	800104e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f9      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	10000012 	.word	0x10000012
 8001070:	40012000 	.word	0x40012000
 8001074:	40012300 	.word	0x40012300
 8001078:	20000000 	.word	0x20000000
 800107c:	431bde83 	.word	0x431bde83

08001080 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001088:	4b78      	ldr	r3, [pc, #480]	; (800126c <ADC_Init+0x1ec>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a77      	ldr	r2, [pc, #476]	; (800126c <ADC_Init+0x1ec>)
 800108e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001092:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001094:	4b75      	ldr	r3, [pc, #468]	; (800126c <ADC_Init+0x1ec>)
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4973      	ldr	r1, [pc, #460]	; (800126c <ADC_Init+0x1ec>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6859      	ldr	r1, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	021a      	lsls	r2, r3, #8
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80010d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6899      	ldr	r1, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110e:	4a58      	ldr	r2, [pc, #352]	; (8001270 <ADC_Init+0x1f0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d022      	beq.n	800115a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001122:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6899      	ldr	r1, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001144:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6899      	ldr	r1, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	e00f      	b.n	800117a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001178:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0202 	bic.w	r2, r2, #2
 8001188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6899      	ldr	r1, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	005a      	lsls	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01b      	beq.n	80011e0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80011c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6859      	ldr	r1, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	3b01      	subs	r3, #1
 80011d4:	035a      	lsls	r2, r3, #13
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	e007      	b.n	80011f0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	3b01      	subs	r3, #1
 800120c:	051a      	lsls	r2, r3, #20
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6899      	ldr	r1, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001232:	025a      	lsls	r2, r3, #9
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6899      	ldr	r1, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	029a      	lsls	r2, r3, #10
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	609a      	str	r2, [r3, #8]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40012300 	.word	0x40012300
 8001270:	0f000001 	.word	0x0f000001

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x40>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	05fa0000 	.word	0x05fa0000

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <__NVIC_EnableIRQ+0x38>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff29 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff3e 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff31 	bl	80012d8 <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80014a8:	4ba9      	ldr	r3, [pc, #676]	; (8001750 <HAL_ETH_Init+0x2b8>)
 80014aa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e181      	b.n	80017c2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d106      	bne.n	80014d8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f002 fdf8 	bl	80040c8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d8:	4b9e      	ldr	r3, [pc, #632]	; (8001754 <HAL_ETH_Init+0x2bc>)
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	4a9d      	ldr	r2, [pc, #628]	; (8001754 <HAL_ETH_Init+0x2bc>)
 80014de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e2:	6453      	str	r3, [r2, #68]	; 0x44
 80014e4:	4b9b      	ldr	r3, [pc, #620]	; (8001754 <HAL_ETH_Init+0x2bc>)
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014f0:	4b99      	ldr	r3, [pc, #612]	; (8001758 <HAL_ETH_Init+0x2c0>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a98      	ldr	r2, [pc, #608]	; (8001758 <HAL_ETH_Init+0x2c0>)
 80014f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014fa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014fc:	4b96      	ldr	r3, [pc, #600]	; (8001758 <HAL_ETH_Init+0x2c0>)
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4994      	ldr	r1, [pc, #592]	; (8001758 <HAL_ETH_Init+0x2c0>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001520:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001522:	f7ff fbe5 	bl	8000cf0 <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001528:	e011      	b.n	800154e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800152a:	f7ff fbe1 	bl	8000cf0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001538:	d909      	bls.n	800154e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2203      	movs	r2, #3
 800153e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e139      	b.n	80017c2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e4      	bne.n	800152a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f023 031c 	bic.w	r3, r3, #28
 800156e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001570:	f001 ff82 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8001574:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4a78      	ldr	r2, [pc, #480]	; (800175c <HAL_ETH_Init+0x2c4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d908      	bls.n	8001590 <HAL_ETH_Init+0xf8>
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4a77      	ldr	r2, [pc, #476]	; (8001760 <HAL_ETH_Init+0x2c8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d804      	bhi.n	8001590 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f043 0308 	orr.w	r3, r3, #8
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e027      	b.n	80015e0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	4a73      	ldr	r2, [pc, #460]	; (8001760 <HAL_ETH_Init+0x2c8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d908      	bls.n	80015aa <HAL_ETH_Init+0x112>
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	4a6d      	ldr	r2, [pc, #436]	; (8001750 <HAL_ETH_Init+0x2b8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d204      	bcs.n	80015aa <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f043 030c 	orr.w	r3, r3, #12
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	e01a      	b.n	80015e0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4a68      	ldr	r2, [pc, #416]	; (8001750 <HAL_ETH_Init+0x2b8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d303      	bcc.n	80015ba <HAL_ETH_Init+0x122>
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4a6b      	ldr	r2, [pc, #428]	; (8001764 <HAL_ETH_Init+0x2cc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d911      	bls.n	80015de <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	4a69      	ldr	r2, [pc, #420]	; (8001764 <HAL_ETH_Init+0x2cc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d908      	bls.n	80015d4 <HAL_ETH_Init+0x13c>
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4a68      	ldr	r2, [pc, #416]	; (8001768 <HAL_ETH_Init+0x2d0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d804      	bhi.n	80015d4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e005      	b.n	80015e0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	e000      	b.n	80015e0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80015de:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80015e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ec:	2100      	movs	r1, #0
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 fc1d 	bl	8001e2e <HAL_ETH_WritePHYRegister>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80015fe:	6939      	ldr	r1, [r7, #16]
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fdd3 	bl	80021ac <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0d7      	b.n	80017c2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001612:	20ff      	movs	r0, #255	; 0xff
 8001614:	f7ff fb78 	bl	8000d08 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80a5 	beq.w	800176c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001622:	f7ff fb65 	bl	8000cf0 <HAL_GetTick>
 8001626:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	461a      	mov	r2, r3
 800162e:	2101      	movs	r1, #1
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fb94 	bl	8001d5e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001636:	f7ff fb5b 	bl	8000cf0 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	; 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d90f      	bls.n	8001668 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fdac 	bl	80021ac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0ac      	b.n	80017c2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0da      	beq.n	8001628 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001676:	2100      	movs	r1, #0
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fbd8 	bl	8001e2e <HAL_ETH_WritePHYRegister>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00b      	beq.n	800169c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001688:	6939      	ldr	r1, [r7, #16]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fd8e 	bl	80021ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001698:	2301      	movs	r3, #1
 800169a:	e092      	b.n	80017c2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff fb28 	bl	8000cf0 <HAL_GetTick>
 80016a0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	461a      	mov	r2, r3
 80016a8:	2101      	movs	r1, #1
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fb57 	bl	8001d5e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80016b0:	f7ff fb1e 	bl	8000cf0 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d90f      	bls.n	80016e2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016c6:	6939      	ldr	r1, [r7, #16]
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fd6f 	bl	80021ac <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e06f      	b.n	80017c2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0da      	beq.n	80016a2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	461a      	mov	r2, r3
 80016f2:	2110      	movs	r1, #16
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 fb32 	bl	8001d5e <HAL_ETH_ReadPHYRegister>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fd50 	bl	80021ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001714:	2301      	movs	r3, #1
 8001716:	e054      	b.n	80017c2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	e002      	b.n	8001732 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	e035      	b.n	80017b0 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e030      	b.n	80017b0 <HAL_ETH_Init+0x318>
 800174e:	bf00      	nop
 8001750:	03938700 	.word	0x03938700
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	01312cff 	.word	0x01312cff
 8001760:	02160ebf 	.word	0x02160ebf
 8001764:	05f5e0ff 	.word	0x05f5e0ff
 8001768:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800177c:	4313      	orrs	r3, r2
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fb52 	bl	8001e2e <HAL_ETH_WritePHYRegister>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00b      	beq.n	80017a8 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001794:	6939      	ldr	r1, [r7, #16]
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fd08 	bl	80021ac <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e00c      	b.n	80017c2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80017a8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80017ac:	f7ff faac 	bl	8000d08 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80017b0:	6939      	ldr	r1, [r7, #16]
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fcfa 	bl	80021ac <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop

080017cc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_ETH_DMATxDescListInit+0x20>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e052      	b.n	8001892 <HAL_ETH_DMATxDescListInit+0xc6>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e030      	b.n	800186a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	4413      	add	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001818:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	461a      	mov	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	429a      	cmp	r2, r3
 800184a:	d208      	bcs.n	800185e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	015b      	lsls	r3, r3, #5
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	4413      	add	r3, r2
 8001856:	461a      	mov	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	e002      	b.n	8001864 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d3ca      	bcc.n	8001808 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f241 0310 	movw	r3, #4112	; 0x1010
 800187c:	440b      	add	r3, r1
 800187e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800189e:	b480      	push	{r7}
 80018a0:	b087      	sub	sp, #28
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_ETH_DMARxDescListInit+0x20>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e056      	b.n	800196c <HAL_ETH_DMARxDescListInit+0xce>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e034      	b.n	8001944 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	015b      	lsls	r3, r3, #5
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018ea:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018f2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	461a      	mov	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	3b01      	subs	r3, #1
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	429a      	cmp	r2, r3
 8001924:	d208      	bcs.n	8001938 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	015b      	lsls	r3, r3, #5
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	4413      	add	r3, r2
 8001930:	461a      	mov	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	e002      	b.n	800193e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d3c6      	bcc.n	80018da <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	f241 030c 	movw	r3, #4108	; 0x100c
 8001956:	440b      	add	r3, r1
 8001958:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	371c      	adds	r7, #28
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_ETH_TransmitFrame+0x24>
 8001998:	2302      	movs	r3, #2
 800199a:	e0cd      	b.n	8001b38 <HAL_ETH_TransmitFrame+0x1c0>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0b8      	b.n	8001b38 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da09      	bge.n	80019e4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2212      	movs	r2, #18
 80019d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0a9      	b.n	8001b38 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d915      	bls.n	8001a1a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	4a54      	ldr	r2, [pc, #336]	; (8001b44 <HAL_ETH_TransmitFrame+0x1cc>)
 80019f2:	fba2 2303 	umull	r2, r3, r2, r3
 80019f6:	0a9b      	lsrs	r3, r3, #10
 80019f8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_ETH_TransmitFrame+0x1cc>)
 80019fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001a02:	0a9b      	lsrs	r3, r3, #10
 8001a04:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e001      	b.n	8001a1e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d11c      	bne.n	8001a5e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001a32:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a3e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a4e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a5c:	e04b      	b.n	8001af6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	e044      	b.n	8001aee <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a72:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a88:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a92:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d116      	bne.n	8001acc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001aac:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <HAL_ETH_TransmitFrame+0x1d0>)
 8001ab2:	fb02 f203 	mul.w	r2, r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4413      	add	r3, r2
 8001aba:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001abe:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001aca:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ada:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	3301      	adds	r3, #1
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3b6      	bcc.n	8001a64 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	f241 0314 	movw	r3, #4116	; 0x1014
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00d      	beq.n	8001b26 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b12:	4413      	add	r3, r2
 8001b14:	2204      	movs	r2, #4
 8001b16:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001b20:	4413      	add	r3, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	ac02b00b 	.word	0xac02b00b
 8001b48:	fffffa0c 	.word	0xfffffa0c

08001b4c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_ETH_GetReceivedFrame+0x1a>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e070      	b.n	8001c48 <HAL_ETH_GetReceivedFrame+0xfc>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2202      	movs	r2, #2
 8001b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db5a      	blt.n	8001c36 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d030      	beq.n	8001bf0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d103      	bne.n	8001ba8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bbc:	3b04      	subs	r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e02b      	b.n	8001c48 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d010      	beq.n	8001c20 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c1e:	e00a      	b.n	8001c36 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	461a      	mov	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b40      	cmp	r3, #64	; 0x40
 8001c6e:	d112      	bne.n	8001c96 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f860 	bl	8001d36 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c7e:	4413      	add	r3, r2
 8001c80:	2240      	movs	r2, #64	; 0x40
 8001c82:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c94:	e01b      	b.n	8001cce <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001c9e:	4413      	add	r3, r2
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d111      	bne.n	8001cce <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f839 	bl	8001d22 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f241 0314 	movw	r3, #4116	; 0x1014
 8001cb8:	4413      	add	r3, r2
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cdc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf2:	d112      	bne.n	8001d1a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f828 	bl	8001d4a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d02:	4413      	add	r3, r2
 8001d04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d08:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	460b      	mov	r3, r1
 8001d68:	607a      	str	r2, [r7, #4]
 8001d6a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b82      	cmp	r3, #130	; 0x82
 8001d7e:	d101      	bne.n	8001d84 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
 8001d82:	e050      	b.n	8001e26 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2282      	movs	r2, #130	; 0x82
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 031c 	and.w	r3, r3, #28
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8a1b      	ldrh	r3, [r3, #16]
 8001da0:	02db      	lsls	r3, r3, #11
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	019b      	lsls	r3, r3, #6
 8001dae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f023 0302 	bic.w	r3, r3, #2
 8001dbe:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd0:	f7fe ff8e 	bl	8000cf0 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd6:	e015      	b.n	8001e04 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001dd8:	f7fe ff8a 	bl	8000cf0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de6:	d309      	bcc.n	8001dfc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e014      	b.n	8001e26 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1e4      	bne.n	8001dd8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	460b      	mov	r3, r1
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b42      	cmp	r3, #66	; 0x42
 8001e4e:	d101      	bne.n	8001e54 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
 8001e52:	e04e      	b.n	8001ef2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2242      	movs	r2, #66	; 0x42
 8001e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 031c 	and.w	r3, r3, #28
 8001e6a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8a1b      	ldrh	r3, [r3, #16]
 8001e70:	02db      	lsls	r3, r3, #11
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e7a:	897b      	ldrh	r3, [r7, #10]
 8001e7c:	019b      	lsls	r3, r3, #6
 8001e7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f043 0302 	orr.w	r3, r3, #2
 8001e8e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001eaa:	f7fe ff21 	bl	8000cf0 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eb0:	e015      	b.n	8001ede <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001eb2:	f7fe ff1d 	bl	8000cf0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	d309      	bcc.n	8001ed6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00d      	b.n	8001ef2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e4      	bne.n	8001eb2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ETH_Start+0x16>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e01f      	b.n	8001f50 <HAL_ETH_Start+0x56>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fb45 	bl	80025b0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fb7c 	bl	8002624 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fc13 	bl	8002758 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fbb0 	bl	8002698 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fbdd 	bl	80026f8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ETH_Stop+0x16>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e01f      	b.n	8001fae <HAL_ETH_Stop+0x56>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fba2 	bl	80026c8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fbcf 	bl	8002728 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fb67 	bl	800265e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 fbe1 	bl	8002758 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fb27 	bl	80025ea <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_ETH_ConfigMAC+0x1c>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0e4      	b.n	800219e <HAL_ETH_ConfigMAC+0x1e6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80b1 	beq.w	800214e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002004:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800200a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002010:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002016:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800201c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002022:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002028:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800202e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002034:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800203a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002040:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002046:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800205e:	2001      	movs	r0, #1
 8002060:	f7fe fe52 	bl	8000d08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002074:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800207a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002080:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002086:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800208c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002092:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800209e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80020a0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7fe fe2c 	bl	8000d08 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020c0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ca:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020da:	4013      	ands	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80020e8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80020ee:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80020f4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80020fa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002100:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002118:	2001      	movs	r0, #1
 800211a:	f7fe fdf5 	bl	8000d08 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800213e:	2001      	movs	r0, #1
 8002140:	f7fe fde2 	bl	8000d08 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	61da      	str	r2, [r3, #28]
 800214c:	e01e      	b.n	800218c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800215c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800217e:	2001      	movs	r0, #1
 8002180:	f7fe fdc2 	bl	8000d08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	ff20810f 	.word	0xff20810f

080021ac <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0b0      	sub	sp, #192	; 0xc0
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021c8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80021da:	2300      	movs	r3, #0
 80021dc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80021f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f6:	663b      	str	r3, [r7, #96]	; 0x60
 80021f8:	e001      	b.n	80021fe <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80021fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002202:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002208:	2300      	movs	r3, #0
 800220a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002218:	2340      	movs	r3, #64	; 0x40
 800221a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002280:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002284:	4bab      	ldr	r3, [pc, #684]	; (8002534 <ETH_MACDMAConfig+0x388>)
 8002286:	4013      	ands	r3, r2
 8002288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800228c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800228e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002290:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002294:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002298:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800229e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80022a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80022a2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80022a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80022a6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80022ac:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80022ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80022b0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80022b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80022b4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80022b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80022b8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80022ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80022bc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80022be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80022c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80022c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7fe fd11 	bl	8000d08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ee:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80022f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022f4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80022f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80022f8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80022fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80022fe:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002300:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002304:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002306:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800230a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800230c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002310:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002314:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800231c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800231e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800232a:	2001      	movs	r0, #1
 800232c:	f7fe fcec 	bl	8000d08 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002338:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002342:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800234c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002358:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800235c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002360:	4013      	ands	r3, r2
 8002362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800236a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800236c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002370:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002376:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002378:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800237c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800237e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002382:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002384:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002388:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800238a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800239c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7fe fcad 	bl	8000d08 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023b8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80023bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7fe fc98 	bl	8000d08 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80023e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ea:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80023f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023f4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002406:	2304      	movs	r3, #4
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800240a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002416:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800241c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002426:	2300      	movs	r3, #0
 8002428:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800242a:	2300      	movs	r3, #0
 800242c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f241 0318 	movw	r3, #4120	; 0x1018
 8002436:	4413      	add	r3, r2
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800243e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <ETH_MACDMAConfig+0x38c>)
 8002444:	4013      	ands	r3, r2
 8002446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800244a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800244c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800244e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002450:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002452:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002454:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002456:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002458:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800245a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800245c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800245e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002460:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002462:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002466:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800246a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800246c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	f241 0318 	movw	r3, #4120	; 0x1018
 800247e:	4413      	add	r3, r2
 8002480:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002484:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	f241 0318 	movw	r3, #4120	; 0x1018
 800248e:	4413      	add	r3, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002496:	2001      	movs	r0, #1
 8002498:	f7fe fc36 	bl	8000d08 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80024a4:	4413      	add	r3, r2
 80024a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024aa:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024b0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80024b4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80024b8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80024ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80024bc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80024be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80024c2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80024c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80024c6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7fe fc0f 	bl	8000d08 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024f6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10d      	bne.n	800251c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f241 031c 	movw	r3, #4124	; 0x101c
 8002508:	4413      	add	r3, r2
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6811      	ldr	r1, [r2, #0]
 8002510:	4a0a      	ldr	r2, [pc, #40]	; (800253c <ETH_MACDMAConfig+0x390>)
 8002512:	431a      	orrs	r2, r3
 8002514:	f241 031c 	movw	r3, #4124	; 0x101c
 8002518:	440b      	add	r3, r1
 800251a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	461a      	mov	r2, r3
 8002522:	2100      	movs	r1, #0
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f80b 	bl	8002540 <ETH_MACAddressConfig>
}
 800252a:	bf00      	nop
 800252c:	37c0      	adds	r7, #192	; 0xc0
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	ff20810f 	.word	0xff20810f
 8002538:	f8de3f23 	.word	0xf8de3f23
 800253c:	00010040 	.word	0x00010040

08002540 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002540:	b480      	push	{r7}
 8002542:	b087      	sub	sp, #28
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3305      	adds	r3, #5
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	3204      	adds	r2, #4
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <ETH_MACAddressConfig+0x68>)
 8002562:	4413      	add	r3, r2
 8002564:	461a      	mov	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3303      	adds	r3, #3
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	061a      	lsls	r2, r3, #24
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3302      	adds	r3, #2
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3301      	adds	r3, #1
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	4313      	orrs	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <ETH_MACAddressConfig+0x6c>)
 8002592:	4413      	add	r3, r2
 8002594:	461a      	mov	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	6013      	str	r3, [r2, #0]
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40028040 	.word	0x40028040
 80025ac:	40028044 	.word	0x40028044

080025b0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0208 	orr.w	r2, r2, #8
 80025ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7fe fb97 	bl	8000d08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0208 	bic.w	r2, r2, #8
 8002604:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800260e:	2001      	movs	r0, #1
 8002610:	f7fe fb7a 	bl	8000d08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0204 	orr.w	r2, r2, #4
 800263e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002648:	2001      	movs	r0, #1
 800264a:	f7fe fb5d 	bl	8000d08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0204 	bic.w	r2, r2, #4
 8002678:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002682:	2001      	movs	r0, #1
 8002684:	f7fe fb40 	bl	8000d08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026b8:	440b      	add	r3, r1
 80026ba:	601a      	str	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026d8:	4413      	add	r3, r2
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6811      	ldr	r1, [r2, #0]
 80026e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80026e8:	440b      	add	r3, r1
 80026ea:	601a      	str	r2, [r3, #0]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f241 0318 	movw	r3, #4120	; 0x1018
 8002708:	4413      	add	r3, r2
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6811      	ldr	r1, [r2, #0]
 8002710:	f043 0202 	orr.w	r2, r3, #2
 8002714:	f241 0318 	movw	r3, #4120	; 0x1018
 8002718:	440b      	add	r3, r1
 800271a:	601a      	str	r2, [r3, #0]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	f241 0318 	movw	r3, #4120	; 0x1018
 8002738:	4413      	add	r3, r2
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6811      	ldr	r1, [r2, #0]
 8002740:	f023 0202 	bic.w	r2, r3, #2
 8002744:	f241 0318 	movw	r3, #4120	; 0x1018
 8002748:	440b      	add	r3, r1
 800274a:	601a      	str	r2, [r3, #0]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	f241 0318 	movw	r3, #4120	; 0x1018
 800276c:	4413      	add	r3, r2
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6811      	ldr	r1, [r2, #0]
 8002774:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002778:	f241 0318 	movw	r3, #4120	; 0x1018
 800277c:	440b      	add	r3, r1
 800277e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	f241 0318 	movw	r3, #4120	; 0x1018
 8002788:	4413      	add	r3, r2
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800278e:	2001      	movs	r0, #1
 8002790:	f7fe faba 	bl	8000d08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	f241 0318 	movw	r3, #4120	; 0x1018
 800279e:	440b      	add	r3, r1
 80027a0:	601a      	str	r2, [r3, #0]
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	e175      	b.n	8002ab8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4013      	ands	r3, r2
 80027de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	f040 8164 	bne.w	8002ab2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d00b      	beq.n	800280a <HAL_GPIO_Init+0x5e>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d007      	beq.n	800280a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027fe:	2b11      	cmp	r3, #17
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b12      	cmp	r3, #18
 8002808:	d130      	bne.n	800286c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 0201 	and.w	r2, r3, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x100>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b12      	cmp	r3, #18
 80028aa:	d123      	bne.n	80028f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	08da      	lsrs	r2, r3, #3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3208      	adds	r2, #8
 80028b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	220f      	movs	r2, #15
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	69b9      	ldr	r1, [r7, #24]
 80028f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0203 	and.w	r2, r3, #3
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80be 	beq.w	8002ab2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_GPIO_Init+0x324>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a65      	ldr	r2, [pc, #404]	; (8002ad0 <HAL_GPIO_Init+0x324>)
 800293c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_GPIO_Init+0x324>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800294e:	4a61      	ldr	r2, [pc, #388]	; (8002ad4 <HAL_GPIO_Init+0x328>)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	3302      	adds	r3, #2
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_GPIO_Init+0x32c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d037      	beq.n	80029ea <HAL_GPIO_Init+0x23e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_GPIO_Init+0x330>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d031      	beq.n	80029e6 <HAL_GPIO_Init+0x23a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a56      	ldr	r2, [pc, #344]	; (8002ae0 <HAL_GPIO_Init+0x334>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02b      	beq.n	80029e2 <HAL_GPIO_Init+0x236>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a55      	ldr	r2, [pc, #340]	; (8002ae4 <HAL_GPIO_Init+0x338>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d025      	beq.n	80029de <HAL_GPIO_Init+0x232>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <HAL_GPIO_Init+0x33c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01f      	beq.n	80029da <HAL_GPIO_Init+0x22e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a53      	ldr	r2, [pc, #332]	; (8002aec <HAL_GPIO_Init+0x340>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d019      	beq.n	80029d6 <HAL_GPIO_Init+0x22a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <HAL_GPIO_Init+0x344>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0x226>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <HAL_GPIO_Init+0x348>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d00d      	beq.n	80029ce <HAL_GPIO_Init+0x222>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <HAL_GPIO_Init+0x34c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d007      	beq.n	80029ca <HAL_GPIO_Init+0x21e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4f      	ldr	r2, [pc, #316]	; (8002afc <HAL_GPIO_Init+0x350>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d101      	bne.n	80029c6 <HAL_GPIO_Init+0x21a>
 80029c2:	2309      	movs	r3, #9
 80029c4:	e012      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029c6:	230a      	movs	r3, #10
 80029c8:	e010      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ca:	2308      	movs	r3, #8
 80029cc:	e00e      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ce:	2307      	movs	r3, #7
 80029d0:	e00c      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029d2:	2306      	movs	r3, #6
 80029d4:	e00a      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029d6:	2305      	movs	r3, #5
 80029d8:	e008      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029da:	2304      	movs	r3, #4
 80029dc:	e006      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029de:	2303      	movs	r3, #3
 80029e0:	e004      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e002      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_GPIO_Init+0x240>
 80029ea:	2300      	movs	r3, #0
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	f002 0203 	and.w	r2, r2, #3
 80029f2:	0092      	lsls	r2, r2, #2
 80029f4:	4093      	lsls	r3, r2
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029fc:	4935      	ldr	r1, [pc, #212]	; (8002ad4 <HAL_GPIO_Init+0x328>)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a58:	4a29      	ldr	r2, [pc, #164]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_GPIO_Init+0x354>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b0f      	cmp	r3, #15
 8002abc:	f67f ae86 	bls.w	80027cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40013800 	.word	0x40013800
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	40020400 	.word	0x40020400
 8002ae0:	40020800 	.word	0x40020800
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40021400 	.word	0x40021400
 8002af0:	40021800 	.word	0x40021800
 8002af4:	40021c00 	.word	0x40021c00
 8002af8:	40022000 	.word	0x40022000
 8002afc:	40022400 	.word	0x40022400
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b66:	f7fe f8c3 	bl	8000cf0 <HAL_GetTick>
 8002b6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b6c:	e009      	b.n	8002b82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b6e:	f7fe f8bf 	bl	8000cf0 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7c:	d901      	bls.n	8002b82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e022      	b.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0f      	ldr	r2, [pc, #60]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7fe f8a8 	bl	8000cf0 <HAL_GetTick>
 8002ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ba2:	e009      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba4:	f7fe f8a4 	bl	8000cf0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb2:	d901      	bls.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e007      	b.n	8002bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc4:	d1ee      	bne.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000

08002bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e29b      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8087 	beq.w	8002d0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfc:	4b96      	ldr	r3, [pc, #600]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d00c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c08:	4b93      	ldr	r3, [pc, #588]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d112      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62>
 8002c14:	4b90      	ldr	r3, [pc, #576]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c22:	4b8d      	ldr	r3, [pc, #564]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06c      	beq.n	8002d08 <HAL_RCC_OscConfig+0x130>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d168      	bne.n	8002d08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e275      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x7a>
 8002c44:	4b84      	ldr	r3, [pc, #528]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a83      	ldr	r2, [pc, #524]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	e02e      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x9c>
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7e      	ldr	r2, [pc, #504]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b7c      	ldr	r3, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7b      	ldr	r2, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0xc0>
 8002c7e:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a75      	ldr	r2, [pc, #468]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a72      	ldr	r2, [pc, #456]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xd8>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b6c      	ldr	r3, [pc, #432]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6b      	ldr	r2, [pc, #428]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f81a 	bl	8000cf0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f816 	bl	8000cf0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e229      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe8>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f806 	bl	8000cf0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe f802 	bl	8000cf0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e215      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b57      	ldr	r3, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x110>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d069      	beq.n	8002dea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d16:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x190>
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1e9      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	493d      	ldr	r1, [pc, #244]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e040      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d023      	beq.n	8002db8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fd ffb8 	bl	8000cf0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fd ffb4 	bl	8000cf0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1c7      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	4b30      	ldr	r3, [pc, #192]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4929      	ldr	r1, [pc, #164]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
 8002db6:	e018      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fd ff94 	bl	8000cf0 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7fd ff90 	bl	8000cf0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1a3      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d038      	beq.n	8002e68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d019      	beq.n	8002e32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfe:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0a:	f7fd ff71 	bl	8000cf0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e12:	f7fd ff6d 	bl	8000cf0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e180      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x23a>
 8002e30:	e01a      	b.n	8002e68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_RCC_OscConfig+0x280>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fd ff57 	bl	8000cf0 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e46:	f7fd ff53 	bl	8000cf0 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d903      	bls.n	8002e5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e166      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
 8002e58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5c:	4b92      	ldr	r3, [pc, #584]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ee      	bne.n	8002e46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a4 	beq.w	8002fbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b8c      	ldr	r3, [pc, #560]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10d      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b89      	ldr	r3, [pc, #548]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	4a88      	ldr	r2, [pc, #544]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8e:	4b86      	ldr	r3, [pc, #536]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9e:	4b83      	ldr	r3, [pc, #524]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d118      	bne.n	8002edc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002eaa:	4b80      	ldr	r3, [pc, #512]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7f      	ldr	r2, [pc, #508]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb6:	f7fd ff1b 	bl	8000cf0 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebe:	f7fd ff17 	bl	8000cf0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b64      	cmp	r3, #100	; 0x64
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e12a      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed0:	4b76      	ldr	r3, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x4d4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d106      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x31a>
 8002ee4:	4b70      	ldr	r3, [pc, #448]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4a6f      	ldr	r2, [pc, #444]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef0:	e02d      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x33c>
 8002efa:	4b6b      	ldr	r3, [pc, #428]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a6a      	ldr	r2, [pc, #424]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	4b68      	ldr	r3, [pc, #416]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a67      	ldr	r2, [pc, #412]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	e01c      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCC_OscConfig+0x35e>
 8002f1c:	4b62      	ldr	r3, [pc, #392]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	4b5f      	ldr	r3, [pc, #380]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0x376>
 8002f36:	4b5c      	ldr	r3, [pc, #368]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a5b      	ldr	r2, [pc, #364]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	4b59      	ldr	r3, [pc, #356]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a58      	ldr	r2, [pc, #352]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d015      	beq.n	8002f82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fd fecb 	bl	8000cf0 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fd fec7 	bl	8000cf0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0d8      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	4b4c      	ldr	r3, [pc, #304]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0ee      	beq.n	8002f5e <HAL_RCC_OscConfig+0x386>
 8002f80:	e014      	b.n	8002fac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fd feb5 	bl	8000cf0 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	e00a      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fd feb1 	bl	8000cf0 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e0c2      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ee      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d105      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb2:	4b3d      	ldr	r3, [pc, #244]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a3c      	ldr	r2, [pc, #240]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80ae 	beq.w	8003124 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d06d      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d14b      	bne.n	8003074 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a31      	ldr	r2, [pc, #196]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fe82 	bl	8000cf0 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fd fe7e 	bl	8000cf0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e091      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	019b      	lsls	r3, r3, #6
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	041b      	lsls	r3, r3, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	491b      	ldr	r1, [pc, #108]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fd fe50 	bl	8000cf0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fd fe4c 	bl	8000cf0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e05f      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x47c>
 8003072:	e057      	b.n	8003124 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fd fe36 	bl	8000cf0 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fd fe32 	bl	8000cf0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e045      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <HAL_RCC_OscConfig+0x4d0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x4b0>
 80030a6:	e03d      	b.n	8003124 <HAL_RCC_OscConfig+0x54c>
 80030a8:	40023800 	.word	0x40023800
 80030ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <HAL_RCC_OscConfig+0x558>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d030      	beq.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d129      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d122      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e0:	4013      	ands	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d119      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d10f      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0d0      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d910      	bls.n	800317c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 020f 	bic.w	r2, r3, #15
 8003162:	4965      	ldr	r1, [pc, #404]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a58      	ldr	r2, [pc, #352]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d040      	beq.n	8003258 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d115      	bne.n	8003216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e073      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3d      	ldr	r3, [pc, #244]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e06b      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b39      	ldr	r3, [pc, #228]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4936      	ldr	r1, [pc, #216]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003228:	f7fd fd62 	bl	8000cf0 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fd fd5e 	bl	8000cf0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e053      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d210      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 020f 	bic.w	r2, r3, #15
 800326e:	4922      	ldr	r1, [pc, #136]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f821 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	490a      	ldr	r1, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x1cc>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1d0>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1d4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd fcbe 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	0801247c 	.word	0x0801247c
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b5b0      	push	{r4, r5, r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003312:	2100      	movs	r1, #0
 8003314:	6079      	str	r1, [r7, #4]
 8003316:	2100      	movs	r1, #0
 8003318:	60f9      	str	r1, [r7, #12]
 800331a:	2100      	movs	r1, #0
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800331e:	2100      	movs	r1, #0
 8003320:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003322:	4952      	ldr	r1, [pc, #328]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003324:	6889      	ldr	r1, [r1, #8]
 8003326:	f001 010c 	and.w	r1, r1, #12
 800332a:	2908      	cmp	r1, #8
 800332c:	d00d      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x3e>
 800332e:	2908      	cmp	r1, #8
 8003330:	f200 8094 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x150>
 8003334:	2900      	cmp	r1, #0
 8003336:	d002      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x32>
 8003338:	2904      	cmp	r1, #4
 800333a:	d003      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x38>
 800333c:	e08e      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <HAL_RCC_GetSysClockFreq+0x164>)
 8003340:	60bb      	str	r3, [r7, #8]
      break;
 8003342:	e08e      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003344:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <HAL_RCC_GetSysClockFreq+0x168>)
 8003346:	60bb      	str	r3, [r7, #8]
      break;
 8003348:	e08b      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800334a:	4948      	ldr	r1, [pc, #288]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 800334c:	6849      	ldr	r1, [r1, #4]
 800334e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003352:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003354:	4945      	ldr	r1, [pc, #276]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003356:	6849      	ldr	r1, [r1, #4]
 8003358:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800335c:	2900      	cmp	r1, #0
 800335e:	d024      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003360:	4942      	ldr	r1, [pc, #264]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003362:	6849      	ldr	r1, [r1, #4]
 8003364:	0989      	lsrs	r1, r1, #6
 8003366:	4608      	mov	r0, r1
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003370:	f04f 0500 	mov.w	r5, #0
 8003374:	ea00 0204 	and.w	r2, r0, r4
 8003378:	ea01 0305 	and.w	r3, r1, r5
 800337c:	493d      	ldr	r1, [pc, #244]	; (8003474 <HAL_RCC_GetSysClockFreq+0x168>)
 800337e:	fb01 f003 	mul.w	r0, r1, r3
 8003382:	2100      	movs	r1, #0
 8003384:	fb01 f102 	mul.w	r1, r1, r2
 8003388:	1844      	adds	r4, r0, r1
 800338a:	493a      	ldr	r1, [pc, #232]	; (8003474 <HAL_RCC_GetSysClockFreq+0x168>)
 800338c:	fba2 0101 	umull	r0, r1, r2, r1
 8003390:	1863      	adds	r3, r4, r1
 8003392:	4619      	mov	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	461a      	mov	r2, r3
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	f7fc ffa0 	bl	80002e0 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4613      	mov	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e04a      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033aa:	4b30      	ldr	r3, [pc, #192]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	461a      	mov	r2, r3
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	ea02 0400 	and.w	r4, r2, r0
 80033c2:	ea03 0501 	and.w	r5, r3, r1
 80033c6:	4620      	mov	r0, r4
 80033c8:	4629      	mov	r1, r5
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	014b      	lsls	r3, r1, #5
 80033d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033d8:	0142      	lsls	r2, r0, #5
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	1b00      	subs	r0, r0, r4
 80033e0:	eb61 0105 	sbc.w	r1, r1, r5
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	018b      	lsls	r3, r1, #6
 80033ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033f2:	0182      	lsls	r2, r0, #6
 80033f4:	1a12      	subs	r2, r2, r0
 80033f6:	eb63 0301 	sbc.w	r3, r3, r1
 80033fa:	f04f 0000 	mov.w	r0, #0
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	00d9      	lsls	r1, r3, #3
 8003404:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003408:	00d0      	lsls	r0, r2, #3
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	1912      	adds	r2, r2, r4
 8003410:	eb45 0303 	adc.w	r3, r5, r3
 8003414:	f04f 0000 	mov.w	r0, #0
 8003418:	f04f 0100 	mov.w	r1, #0
 800341c:	0299      	lsls	r1, r3, #10
 800341e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003422:	0290      	lsls	r0, r2, #10
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	461a      	mov	r2, r3
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	f7fc ff54 	bl	80002e0 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_GetSysClockFreq+0x160>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	60bb      	str	r3, [r7, #8]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RCC_GetSysClockFreq+0x164>)
 800345e:	60bb      	str	r3, [r7, #8]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	68bb      	ldr	r3, [r7, #8]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bdb0      	pop	{r4, r5, r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	017d7840 	.word	0x017d7840

08003478 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <HAL_RCC_GetHCLKFreq+0x14>)
 800347e:	681b      	ldr	r3, [r3, #0]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000000 	.word	0x20000000

08003490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003494:	f7ff fff0 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0a9b      	lsrs	r3, r3, #10
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	0801248c 	.word	0x0801248c

080034b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034bc:	f7ff ffdc 	bl	8003478 <HAL_RCC_GetHCLKFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	0b5b      	lsrs	r3, r3, #13
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	4903      	ldr	r1, [pc, #12]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40023800 	.word	0x40023800
 80034dc:	0801248c 	.word	0x0801248c

080034e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e040      	b.n	8003574 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f83a 	bl	800357c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2224      	movs	r2, #36	; 0x24
 800350c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8ca 	bl	80036b8 <UART_SetConfig>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e022      	b.n	8003574 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fb20 	bl	8003b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800354a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800355a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fba7 	bl	8003cc0 <UART_CheckIdleState>
 8003572:	4603      	mov	r3, r0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	f040 8081 	bne.w	80036ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <HAL_UART_Transmit+0x26>
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e079      	b.n	80036ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Transmit+0x38>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e072      	b.n	80036ae <HAL_UART_Transmit+0x11e>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2221      	movs	r2, #33	; 0x21
 80035dc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035de:	f7fd fb87 	bl	8000cf0 <HAL_GetTick>
 80035e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	88fa      	ldrh	r2, [r7, #6]
 80035e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fc:	d108      	bne.n	8003610 <HAL_UART_Transmit+0x80>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	e003      	b.n	8003618 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003614:	2300      	movs	r3, #0
 8003616:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003620:	e02c      	b.n	800367c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2200      	movs	r2, #0
 800362a:	2180      	movs	r1, #128	; 0x80
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fb90 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e038      	b.n	80036ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	3302      	adds	r3, #2
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	e007      	b.n	800366a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	3301      	adds	r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1cc      	bne.n	8003622 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2200      	movs	r2, #0
 8003690:	2140      	movs	r1, #64	; 0x40
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fb5d 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e005      	b.n	80036ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4ba7      	ldr	r3, [pc, #668]	; (8003980 <UART_SetConfig+0x2c8>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6979      	ldr	r1, [r7, #20]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a95      	ldr	r2, [pc, #596]	; (8003984 <UART_SetConfig+0x2cc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d120      	bne.n	8003776 <UART_SetConfig+0xbe>
 8003734:	4b94      	ldr	r3, [pc, #592]	; (8003988 <UART_SetConfig+0x2d0>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b03      	cmp	r3, #3
 8003740:	d816      	bhi.n	8003770 <UART_SetConfig+0xb8>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0x90>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	08003759 	.word	0x08003759
 800374c:	08003765 	.word	0x08003765
 8003750:	0800375f 	.word	0x0800375f
 8003754:	0800376b 	.word	0x0800376b
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e14f      	b.n	80039fe <UART_SetConfig+0x346>
 800375e:	2302      	movs	r3, #2
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e14c      	b.n	80039fe <UART_SetConfig+0x346>
 8003764:	2304      	movs	r3, #4
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e149      	b.n	80039fe <UART_SetConfig+0x346>
 800376a:	2308      	movs	r3, #8
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e146      	b.n	80039fe <UART_SetConfig+0x346>
 8003770:	2310      	movs	r3, #16
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e143      	b.n	80039fe <UART_SetConfig+0x346>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a84      	ldr	r2, [pc, #528]	; (800398c <UART_SetConfig+0x2d4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d132      	bne.n	80037e6 <UART_SetConfig+0x12e>
 8003780:	4b81      	ldr	r3, [pc, #516]	; (8003988 <UART_SetConfig+0x2d0>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d828      	bhi.n	80037e0 <UART_SetConfig+0x128>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <UART_SetConfig+0xdc>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037c9 	.word	0x080037c9
 8003798:	080037e1 	.word	0x080037e1
 800379c:	080037e1 	.word	0x080037e1
 80037a0:	080037e1 	.word	0x080037e1
 80037a4:	080037d5 	.word	0x080037d5
 80037a8:	080037e1 	.word	0x080037e1
 80037ac:	080037e1 	.word	0x080037e1
 80037b0:	080037e1 	.word	0x080037e1
 80037b4:	080037cf 	.word	0x080037cf
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037e1 	.word	0x080037e1
 80037c4:	080037db 	.word	0x080037db
 80037c8:	2300      	movs	r3, #0
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e117      	b.n	80039fe <UART_SetConfig+0x346>
 80037ce:	2302      	movs	r3, #2
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e114      	b.n	80039fe <UART_SetConfig+0x346>
 80037d4:	2304      	movs	r3, #4
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e111      	b.n	80039fe <UART_SetConfig+0x346>
 80037da:	2308      	movs	r3, #8
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e10e      	b.n	80039fe <UART_SetConfig+0x346>
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e10b      	b.n	80039fe <UART_SetConfig+0x346>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a69      	ldr	r2, [pc, #420]	; (8003990 <UART_SetConfig+0x2d8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d120      	bne.n	8003832 <UART_SetConfig+0x17a>
 80037f0:	4b65      	ldr	r3, [pc, #404]	; (8003988 <UART_SetConfig+0x2d0>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d013      	beq.n	8003826 <UART_SetConfig+0x16e>
 80037fe:	2b30      	cmp	r3, #48	; 0x30
 8003800:	d814      	bhi.n	800382c <UART_SetConfig+0x174>
 8003802:	2b20      	cmp	r3, #32
 8003804:	d009      	beq.n	800381a <UART_SetConfig+0x162>
 8003806:	2b20      	cmp	r3, #32
 8003808:	d810      	bhi.n	800382c <UART_SetConfig+0x174>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <UART_SetConfig+0x15c>
 800380e:	2b10      	cmp	r3, #16
 8003810:	d006      	beq.n	8003820 <UART_SetConfig+0x168>
 8003812:	e00b      	b.n	800382c <UART_SetConfig+0x174>
 8003814:	2300      	movs	r3, #0
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e0f1      	b.n	80039fe <UART_SetConfig+0x346>
 800381a:	2302      	movs	r3, #2
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e0ee      	b.n	80039fe <UART_SetConfig+0x346>
 8003820:	2304      	movs	r3, #4
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0eb      	b.n	80039fe <UART_SetConfig+0x346>
 8003826:	2308      	movs	r3, #8
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e0e8      	b.n	80039fe <UART_SetConfig+0x346>
 800382c:	2310      	movs	r3, #16
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0e5      	b.n	80039fe <UART_SetConfig+0x346>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a57      	ldr	r2, [pc, #348]	; (8003994 <UART_SetConfig+0x2dc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d120      	bne.n	800387e <UART_SetConfig+0x1c6>
 800383c:	4b52      	ldr	r3, [pc, #328]	; (8003988 <UART_SetConfig+0x2d0>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003846:	2bc0      	cmp	r3, #192	; 0xc0
 8003848:	d013      	beq.n	8003872 <UART_SetConfig+0x1ba>
 800384a:	2bc0      	cmp	r3, #192	; 0xc0
 800384c:	d814      	bhi.n	8003878 <UART_SetConfig+0x1c0>
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d009      	beq.n	8003866 <UART_SetConfig+0x1ae>
 8003852:	2b80      	cmp	r3, #128	; 0x80
 8003854:	d810      	bhi.n	8003878 <UART_SetConfig+0x1c0>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <UART_SetConfig+0x1a8>
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d006      	beq.n	800386c <UART_SetConfig+0x1b4>
 800385e:	e00b      	b.n	8003878 <UART_SetConfig+0x1c0>
 8003860:	2300      	movs	r3, #0
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e0cb      	b.n	80039fe <UART_SetConfig+0x346>
 8003866:	2302      	movs	r3, #2
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e0c8      	b.n	80039fe <UART_SetConfig+0x346>
 800386c:	2304      	movs	r3, #4
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e0c5      	b.n	80039fe <UART_SetConfig+0x346>
 8003872:	2308      	movs	r3, #8
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e0c2      	b.n	80039fe <UART_SetConfig+0x346>
 8003878:	2310      	movs	r3, #16
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e0bf      	b.n	80039fe <UART_SetConfig+0x346>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a45      	ldr	r2, [pc, #276]	; (8003998 <UART_SetConfig+0x2e0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d125      	bne.n	80038d4 <UART_SetConfig+0x21c>
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <UART_SetConfig+0x2d0>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003896:	d017      	beq.n	80038c8 <UART_SetConfig+0x210>
 8003898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389c:	d817      	bhi.n	80038ce <UART_SetConfig+0x216>
 800389e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a2:	d00b      	beq.n	80038bc <UART_SetConfig+0x204>
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d811      	bhi.n	80038ce <UART_SetConfig+0x216>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <UART_SetConfig+0x1fe>
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b2:	d006      	beq.n	80038c2 <UART_SetConfig+0x20a>
 80038b4:	e00b      	b.n	80038ce <UART_SetConfig+0x216>
 80038b6:	2300      	movs	r3, #0
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e0a0      	b.n	80039fe <UART_SetConfig+0x346>
 80038bc:	2302      	movs	r3, #2
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e09d      	b.n	80039fe <UART_SetConfig+0x346>
 80038c2:	2304      	movs	r3, #4
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e09a      	b.n	80039fe <UART_SetConfig+0x346>
 80038c8:	2308      	movs	r3, #8
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e097      	b.n	80039fe <UART_SetConfig+0x346>
 80038ce:	2310      	movs	r3, #16
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e094      	b.n	80039fe <UART_SetConfig+0x346>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a30      	ldr	r2, [pc, #192]	; (800399c <UART_SetConfig+0x2e4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d125      	bne.n	800392a <UART_SetConfig+0x272>
 80038de:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <UART_SetConfig+0x2d0>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ec:	d017      	beq.n	800391e <UART_SetConfig+0x266>
 80038ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038f2:	d817      	bhi.n	8003924 <UART_SetConfig+0x26c>
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f8:	d00b      	beq.n	8003912 <UART_SetConfig+0x25a>
 80038fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fe:	d811      	bhi.n	8003924 <UART_SetConfig+0x26c>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <UART_SetConfig+0x254>
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	d006      	beq.n	8003918 <UART_SetConfig+0x260>
 800390a:	e00b      	b.n	8003924 <UART_SetConfig+0x26c>
 800390c:	2301      	movs	r3, #1
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e075      	b.n	80039fe <UART_SetConfig+0x346>
 8003912:	2302      	movs	r3, #2
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e072      	b.n	80039fe <UART_SetConfig+0x346>
 8003918:	2304      	movs	r3, #4
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e06f      	b.n	80039fe <UART_SetConfig+0x346>
 800391e:	2308      	movs	r3, #8
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e06c      	b.n	80039fe <UART_SetConfig+0x346>
 8003924:	2310      	movs	r3, #16
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e069      	b.n	80039fe <UART_SetConfig+0x346>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <UART_SetConfig+0x2e8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d137      	bne.n	80039a4 <UART_SetConfig+0x2ec>
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <UART_SetConfig+0x2d0>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800393e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003942:	d017      	beq.n	8003974 <UART_SetConfig+0x2bc>
 8003944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003948:	d817      	bhi.n	800397a <UART_SetConfig+0x2c2>
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394e:	d00b      	beq.n	8003968 <UART_SetConfig+0x2b0>
 8003950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003954:	d811      	bhi.n	800397a <UART_SetConfig+0x2c2>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <UART_SetConfig+0x2aa>
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	d006      	beq.n	800396e <UART_SetConfig+0x2b6>
 8003960:	e00b      	b.n	800397a <UART_SetConfig+0x2c2>
 8003962:	2300      	movs	r3, #0
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e04a      	b.n	80039fe <UART_SetConfig+0x346>
 8003968:	2302      	movs	r3, #2
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e047      	b.n	80039fe <UART_SetConfig+0x346>
 800396e:	2304      	movs	r3, #4
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e044      	b.n	80039fe <UART_SetConfig+0x346>
 8003974:	2308      	movs	r3, #8
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e041      	b.n	80039fe <UART_SetConfig+0x346>
 800397a:	2310      	movs	r3, #16
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e03e      	b.n	80039fe <UART_SetConfig+0x346>
 8003980:	efff69f3 	.word	0xefff69f3
 8003984:	40011000 	.word	0x40011000
 8003988:	40023800 	.word	0x40023800
 800398c:	40004400 	.word	0x40004400
 8003990:	40004800 	.word	0x40004800
 8003994:	40004c00 	.word	0x40004c00
 8003998:	40005000 	.word	0x40005000
 800399c:	40011400 	.word	0x40011400
 80039a0:	40007800 	.word	0x40007800
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a71      	ldr	r2, [pc, #452]	; (8003b70 <UART_SetConfig+0x4b8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d125      	bne.n	80039fa <UART_SetConfig+0x342>
 80039ae:	4b71      	ldr	r3, [pc, #452]	; (8003b74 <UART_SetConfig+0x4bc>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039bc:	d017      	beq.n	80039ee <UART_SetConfig+0x336>
 80039be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039c2:	d817      	bhi.n	80039f4 <UART_SetConfig+0x33c>
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c8:	d00b      	beq.n	80039e2 <UART_SetConfig+0x32a>
 80039ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ce:	d811      	bhi.n	80039f4 <UART_SetConfig+0x33c>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <UART_SetConfig+0x324>
 80039d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d8:	d006      	beq.n	80039e8 <UART_SetConfig+0x330>
 80039da:	e00b      	b.n	80039f4 <UART_SetConfig+0x33c>
 80039dc:	2300      	movs	r3, #0
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e00d      	b.n	80039fe <UART_SetConfig+0x346>
 80039e2:	2302      	movs	r3, #2
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e00a      	b.n	80039fe <UART_SetConfig+0x346>
 80039e8:	2304      	movs	r3, #4
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e007      	b.n	80039fe <UART_SetConfig+0x346>
 80039ee:	2308      	movs	r3, #8
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e004      	b.n	80039fe <UART_SetConfig+0x346>
 80039f4:	2310      	movs	r3, #16
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e001      	b.n	80039fe <UART_SetConfig+0x346>
 80039fa:	2310      	movs	r3, #16
 80039fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a06:	d15b      	bne.n	8003ac0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003a08:	7ffb      	ldrb	r3, [r7, #31]
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d827      	bhi.n	8003a5e <UART_SetConfig+0x3a6>
 8003a0e:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <UART_SetConfig+0x35c>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a39 	.word	0x08003a39
 8003a18:	08003a41 	.word	0x08003a41
 8003a1c:	08003a49 	.word	0x08003a49
 8003a20:	08003a5f 	.word	0x08003a5f
 8003a24:	08003a4f 	.word	0x08003a4f
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a5f 	.word	0x08003a5f
 8003a30:	08003a5f 	.word	0x08003a5f
 8003a34:	08003a57 	.word	0x08003a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a38:	f7ff fd2a 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 8003a3c:	61b8      	str	r0, [r7, #24]
        break;
 8003a3e:	e013      	b.n	8003a68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a40:	f7ff fd3a 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 8003a44:	61b8      	str	r0, [r7, #24]
        break;
 8003a46:	e00f      	b.n	8003a68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a48:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <UART_SetConfig+0x4c0>)
 8003a4a:	61bb      	str	r3, [r7, #24]
        break;
 8003a4c:	e00c      	b.n	8003a68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4e:	f7ff fc5d 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003a52:	61b8      	str	r0, [r7, #24]
        break;
 8003a54:	e008      	b.n	8003a68 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5a:	61bb      	str	r3, [r7, #24]
        break;
 8003a5c:	e004      	b.n	8003a68 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	77bb      	strb	r3, [r7, #30]
        break;
 8003a66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d074      	beq.n	8003b58 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	005a      	lsls	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	441a      	add	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b0f      	cmp	r3, #15
 8003a8a:	d916      	bls.n	8003aba <UART_SetConfig+0x402>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a92:	d212      	bcs.n	8003aba <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f023 030f 	bic.w	r3, r3, #15
 8003a9c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	89fb      	ldrh	r3, [r7, #14]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	89fa      	ldrh	r2, [r7, #14]
 8003ab6:	60da      	str	r2, [r3, #12]
 8003ab8:	e04e      	b.n	8003b58 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	77bb      	strb	r3, [r7, #30]
 8003abe:	e04b      	b.n	8003b58 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ac0:	7ffb      	ldrb	r3, [r7, #31]
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d827      	bhi.n	8003b16 <UART_SetConfig+0x45e>
 8003ac6:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <UART_SetConfig+0x414>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003af9 	.word	0x08003af9
 8003ad4:	08003b01 	.word	0x08003b01
 8003ad8:	08003b17 	.word	0x08003b17
 8003adc:	08003b07 	.word	0x08003b07
 8003ae0:	08003b17 	.word	0x08003b17
 8003ae4:	08003b17 	.word	0x08003b17
 8003ae8:	08003b17 	.word	0x08003b17
 8003aec:	08003b0f 	.word	0x08003b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af0:	f7ff fcce 	bl	8003490 <HAL_RCC_GetPCLK1Freq>
 8003af4:	61b8      	str	r0, [r7, #24]
        break;
 8003af6:	e013      	b.n	8003b20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af8:	f7ff fcde 	bl	80034b8 <HAL_RCC_GetPCLK2Freq>
 8003afc:	61b8      	str	r0, [r7, #24]
        break;
 8003afe:	e00f      	b.n	8003b20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b00:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <UART_SetConfig+0x4c0>)
 8003b02:	61bb      	str	r3, [r7, #24]
        break;
 8003b04:	e00c      	b.n	8003b20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b06:	f7ff fc01 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003b0a:	61b8      	str	r0, [r7, #24]
        break;
 8003b0c:	e008      	b.n	8003b20 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b12:	61bb      	str	r3, [r7, #24]
        break;
 8003b14:	e004      	b.n	8003b20 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b1e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d018      	beq.n	8003b58 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	085a      	lsrs	r2, r3, #1
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	441a      	add	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b0f      	cmp	r3, #15
 8003b40:	d908      	bls.n	8003b54 <UART_SetConfig+0x49c>
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d204      	bcs.n	8003b54 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	e001      	b.n	8003b58 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b64:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40007c00 	.word	0x40007c00
 8003b74:	40023800 	.word	0x40023800
 8003b78:	00f42400 	.word	0x00f42400

08003b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7a:	d10a      	bne.n	8003c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd0:	f7fd f80e 	bl	8000cf0 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d10e      	bne.n	8003d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f82d 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e023      	b.n	8003d4a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d10e      	bne.n	8003d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f817 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e00d      	b.n	8003d4a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	e05e      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	d05a      	beq.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6c:	f7fc ffc0 	bl	8000cf0 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d302      	bcc.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d11b      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e043      	b.n	8003e42 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d02c      	beq.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d124      	bne.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003df0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e00f      	b.n	8003e42 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d091      	beq.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <lwip_lib_init>:
uint8_t GATEWAY_ADDRESS[4];



void lwip_lib_init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af04      	add	r7, sp, #16
	 /*Set IP Address :  192.168.000.222*/
	 IP_ADDRESS[0] =  192;
 8003e52:	4b8d      	ldr	r3, [pc, #564]	; (8004088 <lwip_lib_init+0x23c>)
 8003e54:	22c0      	movs	r2, #192	; 0xc0
 8003e56:	701a      	strb	r2, [r3, #0]
	 IP_ADDRESS[1] =  168;
 8003e58:	4b8b      	ldr	r3, [pc, #556]	; (8004088 <lwip_lib_init+0x23c>)
 8003e5a:	22a8      	movs	r2, #168	; 0xa8
 8003e5c:	705a      	strb	r2, [r3, #1]
	 IP_ADDRESS[2] =  0;
 8003e5e:	4b8a      	ldr	r3, [pc, #552]	; (8004088 <lwip_lib_init+0x23c>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	709a      	strb	r2, [r3, #2]
	 IP_ADDRESS[3] =  222;
 8003e64:	4b88      	ldr	r3, [pc, #544]	; (8004088 <lwip_lib_init+0x23c>)
 8003e66:	22de      	movs	r2, #222	; 0xde
 8003e68:	70da      	strb	r2, [r3, #3]

	 /*Set Netmask Address :  255.255.255.000*/
	 NETMASK_ADDRESS[0]	= 255;
 8003e6a:	4b88      	ldr	r3, [pc, #544]	; (800408c <lwip_lib_init+0x240>)
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	701a      	strb	r2, [r3, #0]
	 NETMASK_ADDRESS[1]	= 255;
 8003e70:	4b86      	ldr	r3, [pc, #536]	; (800408c <lwip_lib_init+0x240>)
 8003e72:	22ff      	movs	r2, #255	; 0xff
 8003e74:	705a      	strb	r2, [r3, #1]
	 NETMASK_ADDRESS[2]	= 255;
 8003e76:	4b85      	ldr	r3, [pc, #532]	; (800408c <lwip_lib_init+0x240>)
 8003e78:	22ff      	movs	r2, #255	; 0xff
 8003e7a:	709a      	strb	r2, [r3, #2]
	 NETMASK_ADDRESS[3]	= 0;
 8003e7c:	4b83      	ldr	r3, [pc, #524]	; (800408c <lwip_lib_init+0x240>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	70da      	strb	r2, [r3, #3]

	 /*Set Gatway Address :  000.000.000.000*/
	 GATEWAY_ADDRESS[0] = 0;
 8003e82:	4b83      	ldr	r3, [pc, #524]	; (8004090 <lwip_lib_init+0x244>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
	 GATEWAY_ADDRESS[1] = 0;
 8003e88:	4b81      	ldr	r3, [pc, #516]	; (8004090 <lwip_lib_init+0x244>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	705a      	strb	r2, [r3, #1]
	 GATEWAY_ADDRESS[2] = 0;
 8003e8e:	4b80      	ldr	r3, [pc, #512]	; (8004090 <lwip_lib_init+0x244>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	709a      	strb	r2, [r3, #2]
	 GATEWAY_ADDRESS[3] = 0;
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <lwip_lib_init+0x244>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	70da      	strb	r2, [r3, #3]

	 /*Initialize lwip stack  without RTOS*/
	 lwip_init();
 8003e9a:	f000 fe56 	bl	8004b4a <lwip_init>


	 /*Initialize ip address*/
	 IP4_ADDR(&ipaddr,IP_ADDRESS[0],IP_ADDRESS[1],IP_ADDRESS[2],IP_ADDRESS[3]);
 8003e9e:	4b7a      	ldr	r3, [pc, #488]	; (8004088 <lwip_lib_init+0x23c>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	061a      	lsls	r2, r3, #24
 8003ea4:	4b78      	ldr	r3, [pc, #480]	; (8004088 <lwip_lib_init+0x23c>)
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	4b76      	ldr	r3, [pc, #472]	; (8004088 <lwip_lib_init+0x23c>)
 8003eae:	789b      	ldrb	r3, [r3, #2]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	4a74      	ldr	r2, [pc, #464]	; (8004088 <lwip_lib_init+0x23c>)
 8003eb6:	78d2      	ldrb	r2, [r2, #3]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	061a      	lsls	r2, r3, #24
 8003ebc:	4b72      	ldr	r3, [pc, #456]	; (8004088 <lwip_lib_init+0x23c>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	0619      	lsls	r1, r3, #24
 8003ec2:	4b71      	ldr	r3, [pc, #452]	; (8004088 <lwip_lib_init+0x23c>)
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	4319      	orrs	r1, r3
 8003eca:	4b6f      	ldr	r3, [pc, #444]	; (8004088 <lwip_lib_init+0x23c>)
 8003ecc:	789b      	ldrb	r3, [r3, #2]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	496d      	ldr	r1, [pc, #436]	; (8004088 <lwip_lib_init+0x23c>)
 8003ed4:	78c9      	ldrb	r1, [r1, #3]
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	4b69      	ldr	r3, [pc, #420]	; (8004088 <lwip_lib_init+0x23c>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	0619      	lsls	r1, r3, #24
 8003ee6:	4b68      	ldr	r3, [pc, #416]	; (8004088 <lwip_lib_init+0x23c>)
 8003ee8:	785b      	ldrb	r3, [r3, #1]
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	4319      	orrs	r1, r3
 8003eee:	4b66      	ldr	r3, [pc, #408]	; (8004088 <lwip_lib_init+0x23c>)
 8003ef0:	789b      	ldrb	r3, [r3, #2]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	4964      	ldr	r1, [pc, #400]	; (8004088 <lwip_lib_init+0x23c>)
 8003ef8:	78c9      	ldrb	r1, [r1, #3]
 8003efa:	430b      	orrs	r3, r1
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f02:	431a      	orrs	r2, r3
 8003f04:	4b60      	ldr	r3, [pc, #384]	; (8004088 <lwip_lib_init+0x23c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	0619      	lsls	r1, r3, #24
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	; (8004088 <lwip_lib_init+0x23c>)
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	4319      	orrs	r1, r3
 8003f12:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <lwip_lib_init+0x23c>)
 8003f14:	789b      	ldrb	r3, [r3, #2]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	495b      	ldr	r1, [pc, #364]	; (8004088 <lwip_lib_init+0x23c>)
 8003f1c:	78c9      	ldrb	r1, [r1, #3]
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	0e1b      	lsrs	r3, r3, #24
 8003f22:	4313      	orrs	r3, r2
 8003f24:	4a5b      	ldr	r2, [pc, #364]	; (8004094 <lwip_lib_init+0x248>)
 8003f26:	6013      	str	r3, [r2, #0]

	 /*Initialize netmask address*/
	 IP4_ADDR(&netmask,NETMASK_ADDRESS[0],NETMASK_ADDRESS[1],NETMASK_ADDRESS[2],NETMASK_ADDRESS[3]);
 8003f28:	4b58      	ldr	r3, [pc, #352]	; (800408c <lwip_lib_init+0x240>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	061a      	lsls	r2, r3, #24
 8003f2e:	4b57      	ldr	r3, [pc, #348]	; (800408c <lwip_lib_init+0x240>)
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	431a      	orrs	r2, r3
 8003f36:	4b55      	ldr	r3, [pc, #340]	; (800408c <lwip_lib_init+0x240>)
 8003f38:	789b      	ldrb	r3, [r3, #2]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	4a53      	ldr	r2, [pc, #332]	; (800408c <lwip_lib_init+0x240>)
 8003f40:	78d2      	ldrb	r2, [r2, #3]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	061a      	lsls	r2, r3, #24
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <lwip_lib_init+0x240>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	0619      	lsls	r1, r3, #24
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	; (800408c <lwip_lib_init+0x240>)
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	4319      	orrs	r1, r3
 8003f54:	4b4d      	ldr	r3, [pc, #308]	; (800408c <lwip_lib_init+0x240>)
 8003f56:	789b      	ldrb	r3, [r3, #2]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	494b      	ldr	r1, [pc, #300]	; (800408c <lwip_lib_init+0x240>)
 8003f5e:	78c9      	ldrb	r1, [r1, #3]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	4b48      	ldr	r3, [pc, #288]	; (800408c <lwip_lib_init+0x240>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	0619      	lsls	r1, r3, #24
 8003f70:	4b46      	ldr	r3, [pc, #280]	; (800408c <lwip_lib_init+0x240>)
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	4319      	orrs	r1, r3
 8003f78:	4b44      	ldr	r3, [pc, #272]	; (800408c <lwip_lib_init+0x240>)
 8003f7a:	789b      	ldrb	r3, [r3, #2]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	4942      	ldr	r1, [pc, #264]	; (800408c <lwip_lib_init+0x240>)
 8003f82:	78c9      	ldrb	r1, [r1, #3]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	; (800408c <lwip_lib_init+0x240>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	0619      	lsls	r1, r3, #24
 8003f94:	4b3d      	ldr	r3, [pc, #244]	; (800408c <lwip_lib_init+0x240>)
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	4319      	orrs	r1, r3
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	; (800408c <lwip_lib_init+0x240>)
 8003f9e:	789b      	ldrb	r3, [r3, #2]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	4939      	ldr	r1, [pc, #228]	; (800408c <lwip_lib_init+0x240>)
 8003fa6:	78c9      	ldrb	r1, [r1, #3]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	0e1b      	lsrs	r3, r3, #24
 8003fac:	4313      	orrs	r3, r2
 8003fae:	4a3a      	ldr	r2, [pc, #232]	; (8004098 <lwip_lib_init+0x24c>)
 8003fb0:	6013      	str	r3, [r2, #0]

	 /*Initialize gateway address*/
	 IP4_ADDR(&gw,GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1] , GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <lwip_lib_init+0x244>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	061a      	lsls	r2, r3, #24
 8003fb8:	4b35      	ldr	r3, [pc, #212]	; (8004090 <lwip_lib_init+0x244>)
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	4b33      	ldr	r3, [pc, #204]	; (8004090 <lwip_lib_init+0x244>)
 8003fc2:	789b      	ldrb	r3, [r3, #2]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <lwip_lib_init+0x244>)
 8003fca:	78d2      	ldrb	r2, [r2, #3]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	061a      	lsls	r2, r3, #24
 8003fd0:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <lwip_lib_init+0x244>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	0619      	lsls	r1, r3, #24
 8003fd6:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <lwip_lib_init+0x244>)
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	4319      	orrs	r1, r3
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <lwip_lib_init+0x244>)
 8003fe0:	789b      	ldrb	r3, [r3, #2]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	492a      	ldr	r1, [pc, #168]	; (8004090 <lwip_lib_init+0x244>)
 8003fe8:	78c9      	ldrb	r1, [r1, #3]
 8003fea:	430b      	orrs	r3, r1
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	4b26      	ldr	r3, [pc, #152]	; (8004090 <lwip_lib_init+0x244>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	0619      	lsls	r1, r3, #24
 8003ffa:	4b25      	ldr	r3, [pc, #148]	; (8004090 <lwip_lib_init+0x244>)
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	4319      	orrs	r1, r3
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <lwip_lib_init+0x244>)
 8004004:	789b      	ldrb	r3, [r3, #2]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	430b      	orrs	r3, r1
 800400a:	4921      	ldr	r1, [pc, #132]	; (8004090 <lwip_lib_init+0x244>)
 800400c:	78c9      	ldrb	r1, [r1, #3]
 800400e:	430b      	orrs	r3, r1
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004016:	431a      	orrs	r2, r3
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <lwip_lib_init+0x244>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	0619      	lsls	r1, r3, #24
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <lwip_lib_init+0x244>)
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	4319      	orrs	r1, r3
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <lwip_lib_init+0x244>)
 8004028:	789b      	ldrb	r3, [r3, #2]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	430b      	orrs	r3, r1
 800402e:	4918      	ldr	r1, [pc, #96]	; (8004090 <lwip_lib_init+0x244>)
 8004030:	78c9      	ldrb	r1, [r1, #3]
 8004032:	430b      	orrs	r3, r1
 8004034:	0e1b      	lsrs	r3, r3, #24
 8004036:	4313      	orrs	r3, r2
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <lwip_lib_init+0x250>)
 800403a:	6013      	str	r3, [r2, #0]


	 /*Add network interface without using RTOS*/
	 netif_add(&gnetif,&ipaddr,&netmask,&gw,NULL,&ethernetif_init,&ethernet_input);
 800403c:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <lwip_lib_init+0x254>)
 800403e:	9302      	str	r3, [sp, #8]
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <lwip_lib_init+0x258>)
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <lwip_lib_init+0x250>)
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <lwip_lib_init+0x24c>)
 800404c:	4911      	ldr	r1, [pc, #68]	; (8004094 <lwip_lib_init+0x248>)
 800404e:	4816      	ldr	r0, [pc, #88]	; (80040a8 <lwip_lib_init+0x25c>)
 8004050:	f001 fa90 	bl	8005574 <netif_add>

	 /*Register default netif */
	 netif_set_default(&gnetif);
 8004054:	4814      	ldr	r0, [pc, #80]	; (80040a8 <lwip_lib_init+0x25c>)
 8004056:	f001 fc3f 	bl	80058d8 <netif_set_default>

	 /*Check if link is up*/
	 if(netif_is_link_up(&gnetif))
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <lwip_lib_init+0x25c>)
 800405c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <lwip_lib_init+0x228>
	 {
		 netif_set_up(&gnetif);
 800406c:	480e      	ldr	r0, [pc, #56]	; (80040a8 <lwip_lib_init+0x25c>)
 800406e:	f001 fc43 	bl	80058f8 <netif_set_up>
 8004072:	e002      	b.n	800407a <lwip_lib_init+0x22e>
	 }
	 else
	 {
		 netif_set_down(&gnetif);
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <lwip_lib_init+0x25c>)
 8004076:	f001 fcab 	bl	80059d0 <netif_set_down>
	 }


	 /*Set link change callback*/
	 netif_set_link_callback(&gnetif,ethernetif_update_config);
 800407a:	490c      	ldr	r1, [pc, #48]	; (80040ac <lwip_lib_init+0x260>)
 800407c:	480a      	ldr	r0, [pc, #40]	; (80040a8 <lwip_lib_init+0x25c>)
 800407e:	f001 fcd9 	bl	8005a34 <netif_set_link_callback>

}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	2000039c 	.word	0x2000039c
 800408c:	20000398 	.word	0x20000398
 8004090:	2000035c 	.word	0x2000035c
 8004094:	20000394 	.word	0x20000394
 8004098:	200003a0 	.word	0x200003a0
 800409c:	200003a4 	.word	0x200003a4
 80040a0:	0800e909 	.word	0x0800e909
 80040a4:	080046c1 	.word	0x080046c1
 80040a8:	20000360 	.word	0x20000360
 80040ac:	080046fd 	.word	0x080046fd

080040b0 <lwip_process>:



void lwip_process(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
	ethernetif_input(&gnetif);
 80040b4:	4803      	ldr	r0, [pc, #12]	; (80040c4 <lwip_process+0x14>)
 80040b6:	f000 fadb 	bl	8004670 <ethernetif_input>
	sys_check_timeouts();
 80040ba:	f007 fdef 	bl	800bc9c <sys_check_timeouts>
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000360 	.word	0x20000360

080040c8 <HAL_ETH_MspInit>:

		void);


void HAL_ETH_MspInit( ETH_HandleTypeDef * ethHandle )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08e      	sub	sp, #56	; 0x38
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]

	if(ethHandle->Instance ==  ETH)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a4e      	ldr	r2, [pc, #312]	; (8004220 <HAL_ETH_MspInit+0x158>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	f040 8096 	bne.w	8004218 <HAL_ETH_MspInit+0x150>
		PB13     ------> ETH_TXD1
		PG11     ------> ETH_TX_EN
		PG13     ------> ETH_TXD0
		*/

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80040ec:	4b4d      	ldr	r3, [pc, #308]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	4a4c      	ldr	r2, [pc, #304]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 80040f2:	f043 0304 	orr.w	r3, r3, #4
 80040f6:	6313      	str	r3, [r2, #48]	; 0x30
 80040f8:	4b4a      	ldr	r3, [pc, #296]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8004104:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4a46      	ldr	r2, [pc, #280]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6313      	str	r3, [r2, #48]	; 0x30
 8004110:	4b44      	ldr	r3, [pc, #272]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800411c:	4b41      	ldr	r3, [pc, #260]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	4a40      	ldr	r2, [pc, #256]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004122:	f043 0302 	orr.w	r3, r3, #2
 8004126:	6313      	str	r3, [r2, #48]	; 0x30
 8004128:	4b3e      	ldr	r3, [pc, #248]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8004134:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800413a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800413e:	6313      	str	r3, [r2, #48]	; 0x30
 8004140:	4b38      	ldr	r3, [pc, #224]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_ETH_CLK_ENABLE();
 800414c:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	4a34      	ldr	r2, [pc, #208]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004156:	6313      	str	r3, [r2, #48]	; 0x30
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	4a2e      	ldr	r2, [pc, #184]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800416a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800416e:	6313      	str	r3, [r2, #48]	; 0x30
 8004170:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4b29      	ldr	r3, [pc, #164]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	4a28      	ldr	r2, [pc, #160]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 8004182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004186:	6313      	str	r3, [r2, #48]	; 0x30
 8004188:	4b26      	ldr	r3, [pc, #152]	; (8004224 <HAL_ETH_MspInit+0x15c>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]


		GPIO_InitStruct.Pin   = GPIO_PIN_1 |GPIO_PIN_4|GPIO_PIN_5;
 8004194:	2332      	movs	r3, #50	; 0x32
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8004198:	2302      	movs	r3, #2
 800419a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800419c:	2303      	movs	r3, #3
 800419e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041a0:	230b      	movs	r3, #11
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a8:	4619      	mov	r1, r3
 80041aa:	481f      	ldr	r0, [pc, #124]	; (8004228 <HAL_ETH_MspInit+0x160>)
 80041ac:	f7fe fafe 	bl	80027ac <HAL_GPIO_Init>

		GPIO_InitStruct.Pin   = GPIO_PIN_1 |GPIO_PIN_2|GPIO_PIN_7;
 80041b0:	2386      	movs	r3, #134	; 0x86
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80041b4:	2302      	movs	r3, #2
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b8:	2303      	movs	r3, #3
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041bc:	230b      	movs	r3, #11
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c4:	4619      	mov	r1, r3
 80041c6:	4819      	ldr	r0, [pc, #100]	; (800422c <HAL_ETH_MspInit+0x164>)
 80041c8:	f7fe faf0 	bl	80027ac <HAL_GPIO_Init>

		GPIO_InitStruct.Pin   = GPIO_PIN_13;
 80041cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80041d2:	2302      	movs	r3, #2
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d6:	2303      	movs	r3, #3
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041da:	230b      	movs	r3, #11
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041e2:	4619      	mov	r1, r3
 80041e4:	4812      	ldr	r0, [pc, #72]	; (8004230 <HAL_ETH_MspInit+0x168>)
 80041e6:	f7fe fae1 	bl	80027ac <HAL_GPIO_Init>


		GPIO_InitStruct.Pin   = GPIO_PIN_11 |GPIO_PIN_13;
 80041ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f4:	2303      	movs	r3, #3
 80041f6:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041f8:	230b      	movs	r3, #11
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004200:	4619      	mov	r1, r3
 8004202:	480c      	ldr	r0, [pc, #48]	; (8004234 <HAL_ETH_MspInit+0x16c>)
 8004204:	f7fe fad2 	bl	80027ac <HAL_GPIO_Init>

		/*Set ETH interrupt priority*/

		HAL_NVIC_SetPriority(ETH_IRQn,0,0);
 8004208:	2200      	movs	r2, #0
 800420a:	2100      	movs	r1, #0
 800420c:	203d      	movs	r0, #61	; 0x3d
 800420e:	f7fd f90c 	bl	800142a <HAL_NVIC_SetPriority>

		/*Enable ETH interrupt*/
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004212:	203d      	movs	r0, #61	; 0x3d
 8004214:	f7fd f925 	bl	8001462 <HAL_NVIC_EnableIRQ>

	}

}
 8004218:	bf00      	nop
 800421a:	3738      	adds	r7, #56	; 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40028000 	.word	0x40028000
 8004224:	40023800 	.word	0x40023800
 8004228:	40020800 	.word	0x40020800
 800422c:	40020000 	.word	0x40020000
 8004230:	40020400 	.word	0x40020400
 8004234:	40021800 	.word	0x40021800

08004238 <low_level_init>:



static void low_level_init(struct netif *netif)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]

  HAL_StatusTypeDef 	hal_eth_init_status;

  uint8_t MACAddr[6];

  heth.Instance = ETH;
 8004244:	4b4d      	ldr	r3, [pc, #308]	; (800437c <low_level_init+0x144>)
 8004246:	4a4e      	ldr	r2, [pc, #312]	; (8004380 <low_level_init+0x148>)
 8004248:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation =  ETH_AUTONEGOTIATION_ENABLE;
 800424a:	4b4c      	ldr	r3, [pc, #304]	; (800437c <low_level_init+0x144>)
 800424c:	2201      	movs	r2, #1
 800424e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed =  ETH_SPEED_100M;
 8004250:	4b4a      	ldr	r3, [pc, #296]	; (800437c <low_level_init+0x144>)
 8004252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004256:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode =  ETH_MODE_FULLDUPLEX;
 8004258:	4b48      	ldr	r3, [pc, #288]	; (800437c <low_level_init+0x144>)
 800425a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800425e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004260:	4b46      	ldr	r3, [pc, #280]	; (800437c <low_level_init+0x144>)
 8004262:	2200      	movs	r2, #0
 8004264:	821a      	strh	r2, [r3, #16]

  MACAddr[0] = 0x00;
 8004266:	2300      	movs	r3, #0
 8004268:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xAB;
 800426a:	23ab      	movs	r3, #171	; 0xab
 800426c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xCD;
 800426e:	23cd      	movs	r3, #205	; 0xcd
 8004270:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004272:	2300      	movs	r3, #0
 8004274:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004276:	2300      	movs	r3, #0
 8004278:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800427a:	2300      	movs	r3, #0
 800427c:	737b      	strb	r3, [r7, #13]

  heth.Init.MACAddr = &MACAddr[0];
 800427e:	4a3f      	ldr	r2, [pc, #252]	; (800437c <low_level_init+0x144>)
 8004280:	f107 0308 	add.w	r3, r7, #8
 8004284:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode  =  ETH_RXPOLLING_MODE;
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <low_level_init+0x144>)
 8004288:	2200      	movs	r2, #0
 800428a:	619a      	str	r2, [r3, #24]

  heth.Init.ChecksumMode =  ETH_CHECKSUM_BY_HARDWARE;
 800428c:	4b3b      	ldr	r3, [pc, #236]	; (800437c <low_level_init+0x144>)
 800428e:	2200      	movs	r2, #0
 8004290:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface =  ETH_MEDIA_INTERFACE_RMII;
 8004292:	4b3a      	ldr	r3, [pc, #232]	; (800437c <low_level_init+0x144>)
 8004294:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004298:	621a      	str	r2, [r3, #32]

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800429a:	4838      	ldr	r0, [pc, #224]	; (800437c <low_level_init+0x144>)
 800429c:	f7fd f8fc 	bl	8001498 <HAL_ETH_Init>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]

  if(hal_eth_init_status ==  HAL_OK)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <low_level_init+0x84>
  {
	  netif->flags |= NETIF_FLAG_LINK_UP;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0],ETH_TXBUFNB);
 80042bc:	2305      	movs	r3, #5
 80042be:	4a31      	ldr	r2, [pc, #196]	; (8004384 <low_level_init+0x14c>)
 80042c0:	4931      	ldr	r1, [pc, #196]	; (8004388 <low_level_init+0x150>)
 80042c2:	482e      	ldr	r0, [pc, #184]	; (800437c <low_level_init+0x144>)
 80042c4:	f7fd fa82 	bl	80017cc <HAL_ETH_DMATxDescListInit>

  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0],ETH_RXBUFNB);
 80042c8:	2305      	movs	r3, #5
 80042ca:	4a30      	ldr	r2, [pc, #192]	; (800438c <low_level_init+0x154>)
 80042cc:	4930      	ldr	r1, [pc, #192]	; (8004390 <low_level_init+0x158>)
 80042ce:	482b      	ldr	r0, [pc, #172]	; (800437c <low_level_init+0x144>)
 80042d0:	f7fd fae5 	bl	800189e <HAL_ETH_DMARxDescListInit>

  /*set MAC address len*/
  netif->hwaddr_len =  ETH_HWADDR_LEN;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2206      	movs	r2, #6
 80042d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  netif->hwaddr[0] = heth.Init.MACAddr[0];
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <low_level_init+0x144>)
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] = heth.Init.MACAddr[1];
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <low_level_init+0x144>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	785a      	ldrb	r2, [r3, #1]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] = heth.Init.MACAddr[2];
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <low_level_init+0x144>)
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	789a      	ldrb	r2, [r3, #2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] = heth.Init.MACAddr[3];
 8004300:	4b1e      	ldr	r3, [pc, #120]	; (800437c <low_level_init+0x144>)
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	78da      	ldrb	r2, [r3, #3]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] = heth.Init.MACAddr[4];
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <low_level_init+0x144>)
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	791a      	ldrb	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] = heth.Init.MACAddr[5];
 8004318:	4b18      	ldr	r3, [pc, #96]	; (800437c <low_level_init+0x144>)
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	795a      	ldrb	r2, [r3, #5]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b


   /*Set MTU : Maximum transfer unit*/
  netif->mtu = 1500;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800432a:	849a      	strh	r2, [r3, #36]	; 0x24

  /*Enable broadcasting and ARP*/
  netif->flags  |= NETIF_FLAG_BROADCAST |NETIF_FLAG_ETHARP;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004332:	f043 030a 	orr.w	r3, r3, #10
 8004336:	b2da      	uxtb	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /*Start MAC and DMA transmission and reception*/

  HAL_ETH_Start(&heth);
 800433e:	480f      	ldr	r0, [pc, #60]	; (800437c <low_level_init+0x144>)
 8004340:	f7fd fddb 	bl	8001efa <HAL_ETH_Start>


  /*Enable link down interupt*/
  HAL_ETH_ReadPHYRegister(&heth,PHY_ISFR,&regvalue);
 8004344:	f107 0310 	add.w	r3, r7, #16
 8004348:	461a      	mov	r2, r3
 800434a:	211d      	movs	r1, #29
 800434c:	480b      	ldr	r0, [pc, #44]	; (800437c <low_level_init+0x144>)
 800434e:	f7fd fd06 	bl	8001d5e <HAL_ETH_ReadPHYRegister>
  regvalue |= PHY_ISFR_INT4;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f043 030b 	orr.w	r3, r3, #11
 8004358:	613b      	str	r3, [r7, #16]

  HAL_ETH_WritePHYRegister(&heth,PHY_ISFR,regvalue);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	461a      	mov	r2, r3
 800435e:	211d      	movs	r1, #29
 8004360:	4806      	ldr	r0, [pc, #24]	; (800437c <low_level_init+0x144>)
 8004362:	f7fd fd64 	bl	8001e2e <HAL_ETH_WritePHYRegister>

  HAL_ETH_ReadPHYRegister(&heth,PHY_ISFR,&regvalue);
 8004366:	f107 0310 	add.w	r3, r7, #16
 800436a:	461a      	mov	r2, r3
 800436c:	211d      	movs	r1, #29
 800436e:	4803      	ldr	r0, [pc, #12]	; (800437c <low_level_init+0x144>)
 8004370:	f7fd fcf5 	bl	8001d5e <HAL_ETH_ReadPHYRegister>



}
 8004374:	bf00      	nop
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	200022ac 	.word	0x200022ac
 8004380:	40028000 	.word	0x40028000
 8004384:	200022f4 	.word	0x200022f4
 8004388:	200003a8 	.word	0x200003a8
 800438c:	20000448 	.word	0x20000448
 8004390:	2000220c 	.word	0x2000220c

08004394 <low_level_output>:


static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
	err_t errval;
	struct pbuf *q;
	__IO ETH_DMADescTypeDef	*DmaTxDesc;
	uint8_t *buffer =  (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800439e:	4b4a      	ldr	r3, [pc, #296]	; (80044c8 <low_level_output+0x134>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	61fb      	str	r3, [r7, #28]
	DmaTxDesc  = heth.TxDesc;
 80043a6:	4b48      	ldr	r3, [pc, #288]	; (80044c8 <low_level_output+0x134>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	623b      	str	r3, [r7, #32]

	uint32_t framelength = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
	uint32_t bufferoffset = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
	uint32_t byteslefttocopy = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]
	uint32_t payloadoffset = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]


	/*Copy frames from pbufs ro ETH buff*/

	for(q = p; q != NULL; q =  q->next )
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	627b      	str	r3, [r7, #36]	; 0x24
 80043c0:	e05a      	b.n	8004478 <low_level_output+0xe4>
	{
		/*Check if buffer is available*/
		if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) !=  (uint32_t)RESET)
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	da03      	bge.n	80043d2 <low_level_output+0x3e>
		{
			errval =  ERR_USE;
 80043ca:	23f8      	movs	r3, #248	; 0xf8
 80043cc:	72fb      	strb	r3, [r7, #11]
			process_error();
 80043ce:	f000 f87d 	bl	80044cc <process_error>
		}

	    byteslefttocopy = q->len;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	895b      	ldrh	r3, [r3, #10]
 80043d6:	613b      	str	r3, [r7, #16]
	    payloadoffset = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

	    /*Copy and update size variables when data length is larger than TX BUFF Size*/
	    while((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 80043dc:	e02f      	b.n	800443e <low_level_output+0xaa>
	    {
	    	/*Copy data to TX buffer*/
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	18d0      	adds	r0, r2, r3
	    			(uint8_t *)((uint8_t *)q->payload + payloadoffset),
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	685a      	ldr	r2, [r3, #4]
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	18d1      	adds	r1, r2, r3
					(ETH_TX_BUF_SIZE - bufferoffset));
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80043f2:	1a9b      	subs	r3, r3, r2
	    	memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 80043f4:	461a      	mov	r2, r3
 80043f6:	f00a fbbb 	bl	800eb70 <memcpy>

	    	/*Point to the next descriptor*/
	    	DmaTxDesc  =  (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	623b      	str	r3, [r7, #32]

			/*Check if buffer is available*/
			if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) !=  (uint32_t)RESET)
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	da03      	bge.n	8004410 <low_level_output+0x7c>
			{
				errval =  ERR_USE;
 8004408:	23f8      	movs	r3, #248	; 0xf8
 800440a:	72fb      	strb	r3, [r7, #11]
				process_error();
 800440c:	f000 f85e 	bl	80044cc <process_error>
			}

			buffer  =  (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	61fb      	str	r3, [r7, #28]

			byteslefttocopy  = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset );
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004420:	613b      	str	r3, [r7, #16]
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset );
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800442c:	60fb      	str	r3, [r7, #12]
			framelength =  framelength + (ETH_TX_BUF_SIZE - bufferoffset );
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004438:	61bb      	str	r3, [r7, #24]

			bufferoffset = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
	    while((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4413      	add	r3, r2
 8004444:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004448:	4293      	cmp	r3, r2
 800444a:	d8c8      	bhi.n	80043de <low_level_output+0x4a>
	    }

	    /*Copy the rest of bytes*/
	    memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	18d0      	adds	r0, r2, r3
    			(uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	685a      	ldr	r2, [r3, #4]
	    memcpy((uint8_t *)((uint8_t *)buffer +bufferoffset),
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4413      	add	r3, r2
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4619      	mov	r1, r3
 800445e:	f00a fb87 	bl	800eb70 <memcpy>
				byteslefttocopy);

    	bufferoffset  =  bufferoffset + byteslefttocopy;
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	617b      	str	r3, [r7, #20]
    	framelength   =  framelength + byteslefttocopy;
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4413      	add	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
	for(q = p; q != NULL; q =  q->next )
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1a1      	bne.n	80043c2 <low_level_output+0x2e>


	}

	/*Prep TX descriptors to give to DMA*/
	HAL_ETH_TransmitFrame(&heth,framelength);
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	4811      	ldr	r0, [pc, #68]	; (80044c8 <low_level_output+0x134>)
 8004482:	f7fd fa79 	bl	8001978 <HAL_ETH_TransmitFrame>

	errval = ERR_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	72fb      	strb	r3, [r7, #11]

	/*Check if Transmit Underflow Status (TUS) is set*/
	if((heth.Instance->DMASR & ETH_DMASR_TUS) !=  (uint32_t)RESET)
 800448a:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <low_level_output+0x134>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004492:	4413      	add	r3, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <low_level_output+0x126>
	{
		 /*Clear  Transmit Underflow Status (TUS)*/
		heth.Instance->DMASR =  ETH_DMASR_TUS;
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <low_level_output+0x134>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80044a6:	4413      	add	r3, r2
 80044a8:	2220      	movs	r2, #32
 80044aa:	601a      	str	r2, [r3, #0]

		/*Resume DMA Transmission*/
		heth.Instance->DMATPDR = 0;
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <low_level_output+0x134>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	f241 0304 	movw	r3, #4100	; 0x1004
 80044b4:	4413      	add	r3, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
	}


	return errval;
 80044ba:	f997 300b 	ldrsb.w	r3, [r7, #11]


}
 80044be:	4618      	mov	r0, r3
 80044c0:	3728      	adds	r7, #40	; 0x28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200022ac 	.word	0x200022ac

080044cc <process_error>:



static void process_error(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0

	/*Check if Transmit Underflow Status (TUS) is set*/
	if((heth.Instance->DMASR & ETH_DMASR_TUS) !=  (uint32_t)RESET)
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <process_error+0x40>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	f241 0314 	movw	r3, #4116	; 0x1014
 80044d8:	4413      	add	r3, r2
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <process_error+0x34>
	{
		 /*Clear  Transmit Underflow Status (TUS)*/
		heth.Instance->DMASR =  ETH_DMASR_TUS;
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <process_error+0x40>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80044ec:	4413      	add	r3, r2
 80044ee:	2220      	movs	r2, #32
 80044f0:	601a      	str	r2, [r3, #0]

		/*Resume DMA Transmission*/
		heth.Instance->DMATPDR = 0;
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <process_error+0x40>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80044fa:	4413      	add	r3, r2
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
	}
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	200022ac 	.word	0x200022ac

08004510 <low_level_input>:



static struct pbuf * low_level_input(struct netif * netif)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	__IO ETH_DMADescTypeDef  *dmarxdesc;
	uint8_t * buffer;
	struct pbuf *p = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
	struct pbuf *q = NULL;
 800451c:	2300      	movs	r3, #0
 800451e:	623b      	str	r3, [r7, #32]
	uint16_t len   = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	81fb      	strh	r3, [r7, #14]

	uint32_t bufferoffset    =  0;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
	uint32_t payloadoffset   =  0;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]
	uint32_t byteslefttocopy = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]


	/*Get received frame*/
	if(HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004530:	484e      	ldr	r0, [pc, #312]	; (800466c <low_level_input+0x15c>)
 8004532:	f7fd fb0b 	bl	8001b4c <HAL_ETH_GetReceivedFrame>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <low_level_input+0x30>
	{
		return NULL;
 800453c:	2300      	movs	r3, #0
 800453e:	e090      	b.n	8004662 <low_level_input+0x152>
	}


	/*Get size of packet*/
	len =  heth.RxFrameInfos.length;
 8004540:	4b4a      	ldr	r3, [pc, #296]	; (800466c <low_level_input+0x15c>)
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	81fb      	strh	r3, [r7, #14]

	buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004546:	4b49      	ldr	r3, [pc, #292]	; (800466c <low_level_input+0x15c>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28

	if( len > 0)
 800454c:	89fb      	ldrh	r3, [r7, #14]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <low_level_input+0x52>
	{
		/*Allocate pbuf from lwip buffer pool*/
		p  = pbuf_alloc(PBUF_RAW,len,PBUF_POOL);
 8004552:	89fb      	ldrh	r3, [r7, #14]
 8004554:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004558:	4619      	mov	r1, r3
 800455a:	2000      	movs	r0, #0
 800455c:	f001 fb06 	bl	8005b6c <pbuf_alloc>
 8004560:	6278      	str	r0, [r7, #36]	; 0x24

	}
		if( p != NULL)
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d049      	beq.n	80045fc <low_level_input+0xec>
		{
			dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004568:	4b40      	ldr	r3, [pc, #256]	; (800466c <low_level_input+0x15c>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
			bufferoffset =  0;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]

			for( q = p; q != NULL; q = q->next)
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	e03e      	b.n	80045f6 <low_level_input+0xe6>
			{
				byteslefttocopy =  q->len;
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	895b      	ldrh	r3, [r3, #10]
 800457c:	617b      	str	r3, [r7, #20]
				payloadoffset = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	61bb      	str	r3, [r7, #24]

			    /*Copy and update size variables when data length is larger than RX BUFF Size*/


				while( (byteslefttocopy + bufferoffset) >  ETH_RX_BUF_SIZE)
 8004582:	e01f      	b.n	80045c4 <low_level_input+0xb4>
				{

					/*Copy data to pbuf*/

					memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	18d0      	adds	r0, r2, r3
							((uint8_t *)((uint8_t *)buffer +  bufferoffset)),
 800458c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	18d1      	adds	r1, r2, r3
							(ETH_RX_BUF_SIZE -  bufferoffset));
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004598:	1a9b      	subs	r3, r3, r2
					memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 800459a:	461a      	mov	r2, r3
 800459c:	f00a fae8 	bl	800eb70 <memcpy>

					/*Poin to the next descriptor*/
					dmarxdesc =  (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c

					buffer = (uint8_t *) dmarxdesc->Buffer1Addr;
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28

					byteslefttocopy =  byteslefttocopy - (ETH_RX_BUF_SIZE -  bufferoffset);
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4413      	add	r3, r2
 80045b2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80045b6:	617b      	str	r3, [r7, #20]

					payloadoffset =  payloadoffset + (ETH_RX_BUF_SIZE -  bufferoffset);
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80045c2:	61bb      	str	r3, [r7, #24]
				while( (byteslefttocopy + bufferoffset) >  ETH_RX_BUF_SIZE)
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d8d8      	bhi.n	8004584 <low_level_input+0x74>

				}

				/*Copy remaining dat in pbuf*/

				memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	18d0      	adds	r0, r2, r3
						((uint8_t *)((uint8_t *)buffer +  bufferoffset)),
 80045da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4413      	add	r3, r2
				memcpy((uint8_t *)((uint8_t *)q->payload + payloadoffset),
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4619      	mov	r1, r3
 80045e4:	f00a fac4 	bl	800eb70 <memcpy>
						byteslefttocopy);


				bufferoffset  = bufferoffset + byteslefttocopy;
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	4413      	add	r3, r2
 80045ee:	61fb      	str	r3, [r7, #28]
			for( q = p; q != NULL; q = q->next)
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1bd      	bne.n	8004578 <low_level_input+0x68>



		/*Point to first descriptor*/

		dmarxdesc =  heth.RxFrameInfos.FSRxDesc;
 80045fc:	4b1b      	ldr	r3, [pc, #108]	; (800466c <low_level_input+0x15c>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c

		/*Set OWN bit in RX descriptors*/
		for(int i = 0; i<heth.RxFrameInfos.SegCount; i++)
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e00b      	b.n	8004620 <low_level_input+0x110>
		{
			dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	601a      	str	r2, [r3, #0]
			dmarxdesc =  (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(int i = 0; i<heth.RxFrameInfos.SegCount; i++)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3301      	adds	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <low_level_input+0x15c>)
 8004622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	429a      	cmp	r2, r3
 8004628:	d8ee      	bhi.n	8004608 <low_level_input+0xf8>
		}

		/*Clear Segment Count*/

		heth.RxFrameInfos.SegCount =  0;
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <low_level_input+0x15c>)
 800462c:	2200      	movs	r2, #0
 800462e:	639a      	str	r2, [r3, #56]	; 0x38

		/*Check if RX Buffer unavailable flag is set,
		 * if so, clear and resume reception*/

		if((heth.Instance->DMASR & ETH_DMASR_RBUS) !=  (uint32_t)RESET)
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <low_level_input+0x15c>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	f241 0314 	movw	r3, #4116	; 0x1014
 8004638:	4413      	add	r3, r2
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00d      	beq.n	8004660 <low_level_input+0x150>
		{
			/*Clear the RBUS flag*/
			heth.Instance->DMASR  = ETH_DMASR_RBUS;
 8004644:	4b09      	ldr	r3, [pc, #36]	; (800466c <low_level_input+0x15c>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	f241 0314 	movw	r3, #4116	; 0x1014
 800464c:	4413      	add	r3, r2
 800464e:	2280      	movs	r2, #128	; 0x80
 8004650:	601a      	str	r2, [r3, #0]

			/*Resume reception*/
			heth.Instance->DMARPDR = 0;
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <low_level_input+0x15c>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	f241 0308 	movw	r3, #4104	; 0x1008
 800465a:	4413      	add	r3, r2
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
		}

	return p;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004662:	4618      	mov	r0, r3
 8004664:	3730      	adds	r7, #48	; 0x30
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200022ac 	.word	0x200022ac

08004670 <ethernetif_input>:



void ethernetif_input(struct netif * netif)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	err_t err;
	struct pbuf *p;

	/*Move received pcket into new pbuf*/
	p = low_level_input(netif);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff49 	bl	8004510 <low_level_input>
 800467e:	60f8      	str	r0, [r7, #12]

	if( p == NULL)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d010      	beq.n	80046a8 <ethernetif_input+0x38>

	{
		return;
	}
	/*Entry point into LWIP stack*/
	err = netif->input(p,netif);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	4798      	blx	r3
 8004690:	4603      	mov	r3, r0
 8004692:	72fb      	strb	r3, [r7, #11]

	if(err != ERR_OK)
 8004694:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <ethernetif_input+0x3a>
	{
		pbuf_free(p);
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f001 fd05 	bl	80060ac <pbuf_free>

		p =NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e000      	b.n	80046aa <ethernetif_input+0x3a>
		return;
 80046a8:	bf00      	nop
	}
}
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <sys_now>:


u32_t sys_now(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80046b4:	f7fc fb1c 	bl	8000cf0 <HAL_GetTick>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <ethernetif_init>:



err_t ethernetif_init(struct netif * netif)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	/*Set netif name*/
	netif->name[0] =  IFNAME0;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2245      	movs	r2, #69	; 0x45
 80046cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	netif->name[1] =  IFNAME1;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2258      	movs	r2, #88	; 0x58
 80046d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	/*Set netif output function*/
	netif->output = etharp_output;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a06      	ldr	r2, [pc, #24]	; (80046f4 <ethernetif_init+0x34>)
 80046dc:	615a      	str	r2, [r3, #20]

	/*Set netif link output function*/
	netif->linkoutput =  low_level_output;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <ethernetif_init+0x38>)
 80046e2:	619a      	str	r2, [r3, #24]

	/*Init hardware*/
	low_level_init(netif);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fda7 	bl	8004238 <low_level_init>

	return ERR_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	0800ca29 	.word	0x0800ca29
 80046f8:	08004395 	.word	0x08004395

080046fc <ethernetif_update_config>:



void ethernetif_update_config(struct netif *netif)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	 __IO uint32_t tickstart = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
	 uint32_t regvalue = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	60bb      	str	r3, [r7, #8]

	 /*Check if link is up*/
	  if(netif_is_link_up(netif))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d062      	beq.n	80047e4 <ethernetif_update_config+0xe8>
	  {
		 /*Check if auto-negotiation is enabled*/
		  if(heth.Init.AutoNegotiation  != ETH_AUTONEGOTIATION_DISABLE)
 800471e:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <ethernetif_update_config+0xfc>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d047      	beq.n	80047b6 <ethernetif_update_config+0xba>
		  {
			/*Enable Auto-negotiation*/
			  HAL_ETH_WritePHYRegister(&heth,PHY_BCR, PHY_AUTONEGOTIATION);
 8004726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800472a:	2100      	movs	r1, #0
 800472c:	4832      	ldr	r0, [pc, #200]	; (80047f8 <ethernetif_update_config+0xfc>)
 800472e:	f7fd fb7e 	bl	8001e2e <HAL_ETH_WritePHYRegister>

			  /*Get current tick value*/
			  tickstart =  HAL_GetTick();
 8004732:	f7fc fadd 	bl	8000cf0 <HAL_GetTick>
 8004736:	4603      	mov	r3, r0
 8004738:	60fb      	str	r3, [r7, #12]

			  /*Wait for auto-negotiation to complete*/
			  do
			  {
				HAL_ETH_ReadPHYRegister(&heth,PHY_BSR,&regvalue);
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	461a      	mov	r2, r3
 8004740:	2101      	movs	r1, #1
 8004742:	482d      	ldr	r0, [pc, #180]	; (80047f8 <ethernetif_update_config+0xfc>)
 8004744:	f7fd fb0b 	bl	8001d5e <HAL_ETH_ReadPHYRegister>

				if((HAL_GetTick() - tickstart) > 1000 )
 8004748:	f7fc fad2 	bl	8000cf0 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004756:	d90e      	bls.n	8004776 <ethernetif_update_config+0x7a>
				{
					/*Set MAC speed and Duplex Mode to PHY*/
					HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <ethernetif_update_config+0xfc>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	08db      	lsrs	r3, r3, #3
 800475e:	b29a      	uxth	r2, r3
																(uint16_t)(heth.Init.Speed>>1));
 8004760:	4b25      	ldr	r3, [pc, #148]	; (80047f8 <ethernetif_update_config+0xfc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	b29b      	uxth	r3, r3
					HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 8004768:	4313      	orrs	r3, r2
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	2100      	movs	r1, #0
 8004770:	4821      	ldr	r0, [pc, #132]	; (80047f8 <ethernetif_update_config+0xfc>)
 8004772:	f7fd fb5c 	bl	8001e2e <HAL_ETH_WritePHYRegister>
				}

			  }while((regvalue & PHY_AUTONEGO_COMPLETE) !=  PHY_AUTONEGO_COMPLETE);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0dc      	beq.n	800473a <ethernetif_update_config+0x3e>

			  /*Read the results of the auto-negotiation*/

			  if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <ethernetif_update_config+0x98>
			  {
				  /*Set ETH duplex to full-duplex*/
				  heth.Init.DuplexMode =  ETH_MODE_FULLDUPLEX;
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <ethernetif_update_config+0xfc>)
 800478c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e002      	b.n	800479a <ethernetif_update_config+0x9e>
			  }
			  else
			  {
				  /*Set ETH duplex to half-duplex*/
				  heth.Init.DuplexMode =  ETH_MODE_HALFDUPLEX;
 8004794:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <ethernetif_update_config+0xfc>)
 8004796:	2200      	movs	r2, #0
 8004798:	60da      	str	r2, [r3, #12]
			  }

			  if(regvalue & PHY_SPEED_STATUS)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <ethernetif_update_config+0xb0>
			  {
				  /*Set ETH speed 10M*/
				  heth.Init.Speed  =  ETH_SPEED_10M;
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <ethernetif_update_config+0xfc>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	e013      	b.n	80047d4 <ethernetif_update_config+0xd8>
			  }
			  else
			  {
				  /*Set ETH speed 100M*/
				  heth.Init.Speed  =  ETH_SPEED_100M;
 80047ac:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <ethernetif_update_config+0xfc>)
 80047ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	e00e      	b.n	80047d4 <ethernetif_update_config+0xd8>
			  }
		  }
		  else
		  {
				/*Set MAC speed and Duplex Mode to PHY*/
				HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <ethernetif_update_config+0xfc>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	08db      	lsrs	r3, r3, #3
 80047bc:	b29a      	uxth	r2, r3
															(uint16_t)(heth.Init.Speed>>1));
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <ethernetif_update_config+0xfc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	b29b      	uxth	r3, r3
				HAL_ETH_WritePHYRegister(&heth, PHY_BCR,(uint16_t)(heth.Init.DuplexMode >>3)|
 80047c6:	4313      	orrs	r3, r2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	2100      	movs	r1, #0
 80047ce:	480a      	ldr	r0, [pc, #40]	; (80047f8 <ethernetif_update_config+0xfc>)
 80047d0:	f7fd fb2d 	bl	8001e2e <HAL_ETH_WritePHYRegister>
		  }


		  /*Re-configure ETH MAC*/
		  HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *)NULL);
 80047d4:	2100      	movs	r1, #0
 80047d6:	4808      	ldr	r0, [pc, #32]	; (80047f8 <ethernetif_update_config+0xfc>)
 80047d8:	f7fd fbee 	bl	8001fb8 <HAL_ETH_ConfigMAC>

		  /*Restart MAC interface*/
		  HAL_ETH_Start(&heth);
 80047dc:	4806      	ldr	r0, [pc, #24]	; (80047f8 <ethernetif_update_config+0xfc>)
 80047de:	f7fd fb8c 	bl	8001efa <HAL_ETH_Start>
 80047e2:	e002      	b.n	80047ea <ethernetif_update_config+0xee>

	  }
	  else
	  {
		  /*Stop MAC*/
		  HAL_ETH_Stop(&heth);
 80047e4:	4804      	ldr	r0, [pc, #16]	; (80047f8 <ethernetif_update_config+0xfc>)
 80047e6:	f7fd fbb7 	bl	8001f58 <HAL_ETH_Stop>
	  }

	  ethernetif_notify_conn_changed(netif);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fc f868 	bl	80008c0 <ethernetif_notify_conn_changed>
}
 80047f0:	bf00      	nop
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	200022ac 	.word	0x200022ac

080047fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	b21a      	sxth	r2, r3
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	b29b      	uxth	r3, r3
 8004812:	b21b      	sxth	r3, r3
 8004814:	4313      	orrs	r3, r2
 8004816:	b21b      	sxth	r3, r3
 8004818:	b29b      	uxth	r3, r3
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	061a      	lsls	r2, r3, #24
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0e1b      	lsrs	r3, r3, #24
 800484a:	4313      	orrs	r3, r2
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00d      	beq.n	8004898 <lwip_standard_chksum+0x40>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	dd0a      	ble.n	8004898 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	1c53      	adds	r3, r2, #1
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	f107 030e 	add.w	r3, r7, #14
 800488c:	3301      	adds	r3, #1
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	701a      	strb	r2, [r3, #0]
    len--;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	3b01      	subs	r3, #1
 8004896:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800489c:	e00a      	b.n	80048b4 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	61ba      	str	r2, [r7, #24]
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	4413      	add	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
    len -= 2;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	3b02      	subs	r3, #2
 80048b2:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	dcf1      	bgt.n	800489e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	dd04      	ble.n	80048ca <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80048c0:	f107 030e 	add.w	r3, r7, #14
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	7812      	ldrb	r2, [r2, #0]
 80048c8:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80048ca:	89fb      	ldrh	r3, [r7, #14]
 80048cc:	461a      	mov	r2, r3
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	4413      	add	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	0c1a      	lsrs	r2, r3, #16
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	0c1a      	lsrs	r2, r3, #16
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	b29b      	uxth	r3, r3
}
 8004906:	4618      	mov	r0, r3
 8004908:	3724      	adds	r7, #36	; 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b086      	sub	sp, #24
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	72fb      	strb	r3, [r7, #11]
 8004920:	4613      	mov	r3, r2
 8004922:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e02b      	b.n	8004986 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	895b      	ldrh	r3, [r3, #10]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7ff ff8d 	bl	8004858 <lwip_standard_chksum>
 800493e:	4603      	mov	r3, r0
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0c1a      	lsrs	r2, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	b29b      	uxth	r3, r3
 8004950:	4413      	add	r3, r2
 8004952:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	895b      	ldrh	r3, [r3, #10]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00e      	beq.n	8004980 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	b2db      	uxtb	r3, r3
 800497c:	4313      	orrs	r3, r2
 800497e:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1d0      	bne.n	800492e <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	b2db      	uxtb	r3, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80049a2:	7afb      	ldrb	r3, [r7, #11]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff28 	bl	80047fc <lwip_htons>
 80049ac:	4603      	mov	r3, r0
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4413      	add	r3, r2
 80049b4:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 80049b6:	893b      	ldrh	r3, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff ff1f 	bl	80047fc <lwip_htons>
 80049be:	4603      	mov	r3, r0
 80049c0:	461a      	mov	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	0c1a      	lsrs	r2, r3, #16
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0c1a      	lsrs	r2, r3, #16
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	4413      	add	r3, r2
 80049de:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	b29b      	uxth	r3, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	72fb      	strb	r3, [r7, #11]
 80049fe:	4613      	mov	r3, r2
 8004a00:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4413      	add	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	0c1b      	lsrs	r3, r3, #16
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	0c1a      	lsrs	r2, r3, #16
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	0c1a      	lsrs	r2, r3, #16
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	4413      	add	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8004a4a:	893a      	ldrh	r2, [r7, #8]
 8004a4c:	7af9      	ldrb	r1, [r7, #11]
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff ff5e 	bl	8004912 <inet_cksum_pseudo_base>
 8004a56:	4603      	mov	r3, r0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	72fb      	strb	r3, [r7, #11]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8004a72:	893a      	ldrh	r2, [r7, #8]
 8004a74:	7af9      	ldrb	r1, [r7, #11]
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ffb7 	bl	80049f0 <inet_chksum_pseudo>
 8004a82:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8004a98:	887b      	ldrh	r3, [r7, #2]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff fedb 	bl	8004858 <lwip_standard_chksum>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	b29b      	uxth	r3, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	e02b      	b.n	8004b1e <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	895b      	ldrh	r3, [r3, #10]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7ff fec1 	bl	8004858 <lwip_standard_chksum>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	461a      	mov	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	0c1a      	lsrs	r2, r3, #16
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	895b      	ldrh	r3, [r3, #10]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00e      	beq.n	8004b18 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1d0      	bne.n	8004ac6 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	b29b      	uxth	r3, r3
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8004b54:	f001 fd38 	bl	80065c8 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004b58:	f000 f8d4 	bl	8004d04 <mem_init>
  memp_init();
 8004b5c:	f000 fc3a 	bl	80053d4 <memp_init>
  pbuf_init();
  netif_init();
 8004b60:	f000 fd00 	bl	8005564 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004b64:	f007 f8dc 	bl	800bd20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004b68:	f001 fd36 	bl	80065d8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004b6c:	f007 f84e 	bl	800bc0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004b82:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <ptr_to_mem+0x20>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	4413      	add	r3, r2
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000098 	.word	0x20000098

08004b9c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <mem_to_ptr+0x20>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	b29b      	uxth	r3, r3
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000098 	.word	0x20000098

08004bc0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004bc8:	4b45      	ldr	r3, [pc, #276]	; (8004ce0 <plug_holes+0x120>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d206      	bcs.n	8004be0 <plug_holes+0x20>
 8004bd2:	4b44      	ldr	r3, [pc, #272]	; (8004ce4 <plug_holes+0x124>)
 8004bd4:	f240 12df 	movw	r2, #479	; 0x1df
 8004bd8:	4943      	ldr	r1, [pc, #268]	; (8004ce8 <plug_holes+0x128>)
 8004bda:	4844      	ldr	r0, [pc, #272]	; (8004cec <plug_holes+0x12c>)
 8004bdc:	f009 ffde 	bl	800eb9c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004be0:	4b43      	ldr	r3, [pc, #268]	; (8004cf0 <plug_holes+0x130>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d306      	bcc.n	8004bf8 <plug_holes+0x38>
 8004bea:	4b3e      	ldr	r3, [pc, #248]	; (8004ce4 <plug_holes+0x124>)
 8004bec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004bf0:	4940      	ldr	r1, [pc, #256]	; (8004cf4 <plug_holes+0x134>)
 8004bf2:	483e      	ldr	r0, [pc, #248]	; (8004cec <plug_holes+0x12c>)
 8004bf4:	f009 ffd2 	bl	800eb9c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	791b      	ldrb	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <plug_holes+0x4e>
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <plug_holes+0x124>)
 8004c02:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004c06:	493c      	ldr	r1, [pc, #240]	; (8004cf8 <plug_holes+0x138>)
 8004c08:	4838      	ldr	r0, [pc, #224]	; (8004cec <plug_holes+0x12c>)
 8004c0a:	f009 ffc7 	bl	800eb9c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c16:	d906      	bls.n	8004c26 <plug_holes+0x66>
 8004c18:	4b32      	ldr	r3, [pc, #200]	; (8004ce4 <plug_holes+0x124>)
 8004c1a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004c1e:	4937      	ldr	r1, [pc, #220]	; (8004cfc <plug_holes+0x13c>)
 8004c20:	4832      	ldr	r0, [pc, #200]	; (8004cec <plug_holes+0x12c>)
 8004c22:	f009 ffbb 	bl	800eb9c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ffa4 	bl	8004b78 <ptr_to_mem>
 8004c30:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d024      	beq.n	8004c84 <plug_holes+0xc4>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	791b      	ldrb	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d120      	bne.n	8004c84 <plug_holes+0xc4>
 8004c42:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <plug_holes+0x130>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d01b      	beq.n	8004c84 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004c4c:	4b2c      	ldr	r3, [pc, #176]	; (8004d00 <plug_holes+0x140>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d102      	bne.n	8004c5c <plug_holes+0x9c>
      lfree = mem;
 8004c56:	4a2a      	ldr	r2, [pc, #168]	; (8004d00 <plug_holes+0x140>)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	881a      	ldrh	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c6c:	d00a      	beq.n	8004c84 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff ff80 	bl	8004b78 <ptr_to_mem>
 8004c78:	4604      	mov	r4, r0
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff8e 	bl	8004b9c <mem_to_ptr>
 8004c80:	4603      	mov	r3, r0
 8004c82:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	885b      	ldrh	r3, [r3, #2]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff ff75 	bl	8004b78 <ptr_to_mem>
 8004c8e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d01f      	beq.n	8004cd8 <plug_holes+0x118>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	791b      	ldrb	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11b      	bne.n	8004cd8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004ca0:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <plug_holes+0x140>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d102      	bne.n	8004cb0 <plug_holes+0xf0>
      lfree = pmem;
 8004caa:	4a15      	ldr	r2, [pc, #84]	; (8004d00 <plug_holes+0x140>)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	881a      	ldrh	r2, [r3, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cc0:	d00a      	beq.n	8004cd8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ff56 	bl	8004b78 <ptr_to_mem>
 8004ccc:	4604      	mov	r4, r0
 8004cce:	68b8      	ldr	r0, [r7, #8]
 8004cd0:	f7ff ff64 	bl	8004b9c <mem_to_ptr>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd90      	pop	{r4, r7, pc}
 8004ce0:	20000098 	.word	0x20000098
 8004ce4:	0800fc20 	.word	0x0800fc20
 8004ce8:	0800fc50 	.word	0x0800fc50
 8004cec:	0800fc68 	.word	0x0800fc68
 8004cf0:	2000009c 	.word	0x2000009c
 8004cf4:	0800fc90 	.word	0x0800fc90
 8004cf8:	0800fcac 	.word	0x0800fcac
 8004cfc:	0800fcc8 	.word	0x0800fcc8
 8004d00:	200000a0 	.word	0x200000a0

08004d04 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004d0a:	4b19      	ldr	r3, [pc, #100]	; (8004d70 <mem_init+0x6c>)
 8004d0c:	4a19      	ldr	r2, [pc, #100]	; (8004d74 <mem_init+0x70>)
 8004d0e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004d10:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <mem_init+0x6c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004d1c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004d2a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004d2e:	f7ff ff23 	bl	8004b78 <ptr_to_mem>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4a10      	ldr	r2, [pc, #64]	; (8004d78 <mem_init+0x74>)
 8004d36:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <mem_init+0x74>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <mem_init+0x74>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004d48:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <mem_init+0x74>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004d52:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <mem_init+0x6c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a08      	ldr	r2, [pc, #32]	; (8004d7c <mem_init+0x78>)
 8004d5a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <mem_init+0x7c>)
 8004d5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004d62:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000098 	.word	0x20000098
 8004d74:	200040d0 	.word	0x200040d0
 8004d78:	2000009c 	.word	0x2000009c
 8004d7c:	200000a0 	.word	0x200000a0
 8004d80:	200075ac 	.word	0x200075ac

08004d84 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff05 	bl	8004b9c <mem_to_ptr>
 8004d92:	4603      	mov	r3, r0
 8004d94:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff feec 	bl	8004b78 <ptr_to_mem>
 8004da0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	885b      	ldrh	r3, [r3, #2]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fee6 	bl	8004b78 <ptr_to_mem>
 8004dac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004db6:	d818      	bhi.n	8004dea <mem_link_valid+0x66>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	885b      	ldrh	r3, [r3, #2]
 8004dbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dc0:	d813      	bhi.n	8004dea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004dc6:	8afa      	ldrh	r2, [r7, #22]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d004      	beq.n	8004dd6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	8afa      	ldrh	r2, [r7, #22]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d109      	bne.n	8004dea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <mem_link_valid+0x74>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d006      	beq.n	8004dee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	885b      	ldrh	r3, [r3, #2]
 8004de4:	8afa      	ldrh	r2, [r7, #22]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d001      	beq.n	8004dee <mem_link_valid+0x6a>
    return 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e000      	b.n	8004df0 <mem_link_valid+0x6c>
  }
  return 1;
 8004dee:	2301      	movs	r3, #1
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	2000009c 	.word	0x2000009c

08004dfc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d068      	beq.n	8004edc <mem_free+0xe0>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3b06      	subs	r3, #6
 8004e0e:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004e10:	4b34      	ldr	r3, [pc, #208]	; (8004ee4 <mem_free+0xe8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d306      	bcc.n	8004e28 <mem_free+0x2c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f103 020c 	add.w	r2, r3, #12
 8004e20:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <mem_free+0xec>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d90f      	bls.n	8004e48 <mem_free+0x4c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004e28:	4b30      	ldr	r3, [pc, #192]	; (8004eec <mem_free+0xf0>)
 8004e2a:	f240 227f 	movw	r2, #639	; 0x27f
 8004e2e:	4930      	ldr	r1, [pc, #192]	; (8004ef0 <mem_free+0xf4>)
 8004e30:	4830      	ldr	r0, [pc, #192]	; (8004ef4 <mem_free+0xf8>)
 8004e32:	f009 feb3 	bl	800eb9c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004e36:	4b30      	ldr	r3, [pc, #192]	; (8004ef8 <mem_free+0xfc>)
 8004e38:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <mem_free+0xfc>)
 8004e42:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 8004e46:	e04a      	b.n	8004ede <mem_free+0xe2>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	791b      	ldrb	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10f      	bne.n	8004e70 <mem_free+0x74>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004e50:	4b26      	ldr	r3, [pc, #152]	; (8004eec <mem_free+0xf0>)
 8004e52:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004e56:	4929      	ldr	r1, [pc, #164]	; (8004efc <mem_free+0x100>)
 8004e58:	4826      	ldr	r0, [pc, #152]	; (8004ef4 <mem_free+0xf8>)
 8004e5a:	f009 fe9f 	bl	800eb9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004e5e:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <mem_free+0xfc>)
 8004e60:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004e64:	3301      	adds	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <mem_free+0xfc>)
 8004e6a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 8004e6e:	e036      	b.n	8004ede <mem_free+0xe2>
  }

  if (!mem_link_valid(mem)) {
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7ff ff87 	bl	8004d84 <mem_link_valid>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10f      	bne.n	8004e9c <mem_free+0xa0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <mem_free+0xf0>)
 8004e7e:	f240 2295 	movw	r2, #661	; 0x295
 8004e82:	491f      	ldr	r1, [pc, #124]	; (8004f00 <mem_free+0x104>)
 8004e84:	481b      	ldr	r0, [pc, #108]	; (8004ef4 <mem_free+0xf8>)
 8004e86:	f009 fe89 	bl	800eb9c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <mem_free+0xfc>)
 8004e8c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004e90:	3301      	adds	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	4b18      	ldr	r3, [pc, #96]	; (8004ef8 <mem_free+0xfc>)
 8004e96:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 8004e9a:	e020      	b.n	8004ede <mem_free+0xe2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004ea2:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <mem_free+0x108>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d202      	bcs.n	8004eb2 <mem_free+0xb6>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004eac:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <mem_free+0x108>)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <mem_free+0xfc>)
 8004eb4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <mem_free+0xe8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	1acb      	subs	r3, r1, r3
 8004ec0:	b299      	uxth	r1, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	1acb      	subs	r3, r1, r3
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <mem_free+0xfc>)
 8004ed0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fe73 	bl	8004bc0 <plug_holes>
 8004eda:	e000      	b.n	8004ede <mem_free+0xe2>
    return;
 8004edc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000098 	.word	0x20000098
 8004ee8:	2000009c 	.word	0x2000009c
 8004eec:	0800fc20 	.word	0x0800fc20
 8004ef0:	0800fcf4 	.word	0x0800fcf4
 8004ef4:	0800fc68 	.word	0x0800fc68
 8004ef8:	200075ac 	.word	0x200075ac
 8004efc:	0800fd10 	.word	0x0800fd10
 8004f00:	0800fd38 	.word	0x0800fd38
 8004f04:	200000a0 	.word	0x200000a0

08004f08 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004f14:	887b      	ldrh	r3, [r7, #2]
 8004f16:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004f18:	8bfb      	ldrh	r3, [r7, #30]
 8004f1a:	2b0b      	cmp	r3, #11
 8004f1c:	d801      	bhi.n	8004f22 <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004f1e:	230c      	movs	r3, #12
 8004f20:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004f22:	8bfb      	ldrh	r3, [r7, #30]
 8004f24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f28:	d803      	bhi.n	8004f32 <mem_trim+0x2a>
 8004f2a:	8bfa      	ldrh	r2, [r7, #30]
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d201      	bcs.n	8004f36 <mem_trim+0x2e>
    return NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e0ec      	b.n	8005110 <mem_trim+0x208>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004f36:	4b78      	ldr	r3, [pc, #480]	; (8005118 <mem_trim+0x210>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d304      	bcc.n	8004f4a <mem_trim+0x42>
 8004f40:	4b76      	ldr	r3, [pc, #472]	; (800511c <mem_trim+0x214>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d306      	bcc.n	8004f58 <mem_trim+0x50>
 8004f4a:	4b75      	ldr	r3, [pc, #468]	; (8005120 <mem_trim+0x218>)
 8004f4c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004f50:	4974      	ldr	r1, [pc, #464]	; (8005124 <mem_trim+0x21c>)
 8004f52:	4875      	ldr	r0, [pc, #468]	; (8005128 <mem_trim+0x220>)
 8004f54:	f009 fe22 	bl	800eb9c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004f58:	4b6f      	ldr	r3, [pc, #444]	; (8005118 <mem_trim+0x210>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d304      	bcc.n	8004f6c <mem_trim+0x64>
 8004f62:	4b6e      	ldr	r3, [pc, #440]	; (800511c <mem_trim+0x214>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d309      	bcc.n	8004f80 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8004f6c:	4b6f      	ldr	r3, [pc, #444]	; (800512c <mem_trim+0x224>)
 8004f6e:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004f72:	3301      	adds	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	4b6d      	ldr	r3, [pc, #436]	; (800512c <mem_trim+0x224>)
 8004f78:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return rmem;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	e0c7      	b.n	8005110 <mem_trim+0x208>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3b06      	subs	r3, #6
 8004f84:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004f86:	69b8      	ldr	r0, [r7, #24]
 8004f88:	f7ff fe08 	bl	8004b9c <mem_to_ptr>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	8afb      	ldrh	r3, [r7, #22]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b06      	subs	r3, #6
 8004f9c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004f9e:	8bfa      	ldrh	r2, [r7, #30]
 8004fa0:	8abb      	ldrh	r3, [r7, #20]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d906      	bls.n	8004fb4 <mem_trim+0xac>
 8004fa6:	4b5e      	ldr	r3, [pc, #376]	; (8005120 <mem_trim+0x218>)
 8004fa8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004fac:	4960      	ldr	r1, [pc, #384]	; (8005130 <mem_trim+0x228>)
 8004fae:	485e      	ldr	r0, [pc, #376]	; (8005128 <mem_trim+0x220>)
 8004fb0:	f009 fdf4 	bl	800eb9c <iprintf>
  if (newsize > size) {
 8004fb4:	8bfa      	ldrh	r2, [r7, #30]
 8004fb6:	8abb      	ldrh	r3, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d901      	bls.n	8004fc0 <mem_trim+0xb8>
    /* not supported */
    return NULL;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e0a7      	b.n	8005110 <mem_trim+0x208>
  }
  if (newsize == size) {
 8004fc0:	8bfa      	ldrh	r2, [r7, #30]
 8004fc2:	8abb      	ldrh	r3, [r7, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d101      	bne.n	8004fcc <mem_trim+0xc4>
    /* No change in size, simply return */
    return rmem;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	e0a1      	b.n	8005110 <mem_trim+0x208>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fdd1 	bl	8004b78 <ptr_to_mem>
 8004fd6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	791b      	ldrb	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d14b      	bne.n	8005078 <mem_trim+0x170>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fe8:	d106      	bne.n	8004ff8 <mem_trim+0xf0>
 8004fea:	4b4d      	ldr	r3, [pc, #308]	; (8005120 <mem_trim+0x218>)
 8004fec:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004ff0:	4950      	ldr	r1, [pc, #320]	; (8005134 <mem_trim+0x22c>)
 8004ff2:	484d      	ldr	r0, [pc, #308]	; (8005128 <mem_trim+0x220>)
 8004ff4:	f009 fdd2 	bl	800eb9c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ffe:	8afa      	ldrh	r2, [r7, #22]
 8005000:	8bfb      	ldrh	r3, [r7, #30]
 8005002:	4413      	add	r3, r2
 8005004:	b29b      	uxth	r3, r3
 8005006:	3306      	adds	r3, #6
 8005008:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800500a:	4b4b      	ldr	r3, [pc, #300]	; (8005138 <mem_trim+0x230>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d106      	bne.n	8005022 <mem_trim+0x11a>
      lfree = ptr_to_mem(ptr2);
 8005014:	89fb      	ldrh	r3, [r7, #14]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fdae 	bl	8004b78 <ptr_to_mem>
 800501c:	4603      	mov	r3, r0
 800501e:	4a46      	ldr	r2, [pc, #280]	; (8005138 <mem_trim+0x230>)
 8005020:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005022:	89fb      	ldrh	r3, [r7, #14]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fda7 	bl	8004b78 <ptr_to_mem>
 800502a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2200      	movs	r2, #0
 8005030:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	89ba      	ldrh	r2, [r7, #12]
 8005036:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	8afa      	ldrh	r2, [r7, #22]
 800503c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	89fa      	ldrh	r2, [r7, #14]
 8005042:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800504c:	d007      	beq.n	800505e <mem_trim+0x156>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fd90 	bl	8004b78 <ptr_to_mem>
 8005058:	4602      	mov	r2, r0
 800505a:	89fb      	ldrh	r3, [r7, #14]
 800505c:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <mem_trim+0x224>)
 8005060:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8005064:	8bf9      	ldrh	r1, [r7, #30]
 8005066:	8abb      	ldrh	r3, [r7, #20]
 8005068:	1acb      	subs	r3, r1, r3
 800506a:	b29b      	uxth	r3, r3
 800506c:	4413      	add	r3, r2
 800506e:	b29a      	uxth	r2, r3
 8005070:	4b2e      	ldr	r3, [pc, #184]	; (800512c <mem_trim+0x224>)
 8005072:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005076:	e04a      	b.n	800510e <mem_trim+0x206>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005078:	8bfb      	ldrh	r3, [r7, #30]
 800507a:	f103 0212 	add.w	r2, r3, #18
 800507e:	8abb      	ldrh	r3, [r7, #20]
 8005080:	429a      	cmp	r2, r3
 8005082:	d844      	bhi.n	800510e <mem_trim+0x206>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005084:	8afa      	ldrh	r2, [r7, #22]
 8005086:	8bfb      	ldrh	r3, [r7, #30]
 8005088:	4413      	add	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	3306      	adds	r3, #6
 800508e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005098:	d106      	bne.n	80050a8 <mem_trim+0x1a0>
 800509a:	4b21      	ldr	r3, [pc, #132]	; (8005120 <mem_trim+0x218>)
 800509c:	f240 3216 	movw	r2, #790	; 0x316
 80050a0:	4924      	ldr	r1, [pc, #144]	; (8005134 <mem_trim+0x22c>)
 80050a2:	4821      	ldr	r0, [pc, #132]	; (8005128 <mem_trim+0x220>)
 80050a4:	f009 fd7a 	bl	800eb9c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80050a8:	89fb      	ldrh	r3, [r7, #14]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fd64 	bl	8004b78 <ptr_to_mem>
 80050b0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80050b2:	4b21      	ldr	r3, [pc, #132]	; (8005138 <mem_trim+0x230>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d202      	bcs.n	80050c2 <mem_trim+0x1ba>
      lfree = mem2;
 80050bc:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <mem_trim+0x230>)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2200      	movs	r2, #0
 80050c6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	881a      	ldrh	r2, [r3, #0]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	8afa      	ldrh	r2, [r7, #22]
 80050d4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	89fa      	ldrh	r2, [r7, #14]
 80050da:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050e4:	d007      	beq.n	80050f6 <mem_trim+0x1ee>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fd44 	bl	8004b78 <ptr_to_mem>
 80050f0:	4602      	mov	r2, r0
 80050f2:	89fb      	ldrh	r3, [r7, #14]
 80050f4:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 80050f6:	4b0d      	ldr	r3, [pc, #52]	; (800512c <mem_trim+0x224>)
 80050f8:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80050fc:	8bf9      	ldrh	r1, [r7, #30]
 80050fe:	8abb      	ldrh	r3, [r7, #20]
 8005100:	1acb      	subs	r3, r1, r3
 8005102:	b29b      	uxth	r3, r3
 8005104:	4413      	add	r3, r2
 8005106:	b29a      	uxth	r2, r3
 8005108:	4b08      	ldr	r3, [pc, #32]	; (800512c <mem_trim+0x224>)
 800510a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800510e:	687b      	ldr	r3, [r7, #4]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000098 	.word	0x20000098
 800511c:	2000009c 	.word	0x2000009c
 8005120:	0800fc20 	.word	0x0800fc20
 8005124:	0800fd6c 	.word	0x0800fd6c
 8005128:	0800fc68 	.word	0x0800fc68
 800512c:	200075ac 	.word	0x200075ac
 8005130:	0800fd84 	.word	0x0800fd84
 8005134:	0800fda4 	.word	0x0800fda4
 8005138:	200000a0 	.word	0x200000a0

0800513c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b089      	sub	sp, #36	; 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <mem_malloc+0x14>
    return NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	e0fa      	b.n	8005346 <mem_malloc+0x20a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005154:	8bbb      	ldrh	r3, [r7, #28]
 8005156:	2b0b      	cmp	r3, #11
 8005158:	d801      	bhi.n	800515e <mem_malloc+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800515a:	230c      	movs	r3, #12
 800515c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800515e:	8bbb      	ldrh	r3, [r7, #28]
 8005160:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005164:	d803      	bhi.n	800516e <mem_malloc+0x32>
 8005166:	8bba      	ldrh	r2, [r7, #28]
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	429a      	cmp	r2, r3
 800516c:	d201      	bcs.n	8005172 <mem_malloc+0x36>
    return NULL;
 800516e:	2300      	movs	r3, #0
 8005170:	e0e9      	b.n	8005346 <mem_malloc+0x20a>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005172:	4b77      	ldr	r3, [pc, #476]	; (8005350 <mem_malloc+0x214>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fd10 	bl	8004b9c <mem_to_ptr>
 800517c:	4603      	mov	r3, r0
 800517e:	83fb      	strh	r3, [r7, #30]
 8005180:	e0d1      	b.n	8005326 <mem_malloc+0x1ea>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005182:	8bfb      	ldrh	r3, [r7, #30]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fcf7 	bl	8004b78 <ptr_to_mem>
 800518a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	791b      	ldrb	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f040 80c1 	bne.w	8005318 <mem_malloc+0x1dc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	8bfb      	ldrh	r3, [r7, #30]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	1f9a      	subs	r2, r3, #6
 80051a2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80051a4:	429a      	cmp	r2, r3
 80051a6:	f0c0 80b7 	bcc.w	8005318 <mem_malloc+0x1dc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	8bfb      	ldrh	r3, [r7, #30]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	1f9a      	subs	r2, r3, #6
 80051b6:	8bbb      	ldrh	r3, [r7, #28]
 80051b8:	3312      	adds	r3, #18
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d34c      	bcc.n	8005258 <mem_malloc+0x11c>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80051be:	8bfa      	ldrh	r2, [r7, #30]
 80051c0:	8bbb      	ldrh	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3306      	adds	r3, #6
 80051c8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80051ca:	8a7b      	ldrh	r3, [r7, #18]
 80051cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80051d0:	d106      	bne.n	80051e0 <mem_malloc+0xa4>
 80051d2:	4b60      	ldr	r3, [pc, #384]	; (8005354 <mem_malloc+0x218>)
 80051d4:	f240 3287 	movw	r2, #903	; 0x387
 80051d8:	495f      	ldr	r1, [pc, #380]	; (8005358 <mem_malloc+0x21c>)
 80051da:	4860      	ldr	r0, [pc, #384]	; (800535c <mem_malloc+0x220>)
 80051dc:	f009 fcde 	bl	800eb9c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80051e0:	8a7b      	ldrh	r3, [r7, #18]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fcc8 	bl	8004b78 <ptr_to_mem>
 80051e8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	881a      	ldrh	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8bfa      	ldrh	r2, [r7, #30]
 80051fc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	8a7a      	ldrh	r2, [r7, #18]
 8005202:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2201      	movs	r2, #1
 8005208:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005212:	d007      	beq.n	8005224 <mem_malloc+0xe8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fcad 	bl	8004b78 <ptr_to_mem>
 800521e:	4602      	mov	r2, r0
 8005220:	8a7b      	ldrh	r3, [r7, #18]
 8005222:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8005224:	4b4e      	ldr	r3, [pc, #312]	; (8005360 <mem_malloc+0x224>)
 8005226:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800522a:	8bbb      	ldrh	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	b29b      	uxth	r3, r3
 8005230:	3306      	adds	r3, #6
 8005232:	b29a      	uxth	r2, r3
 8005234:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <mem_malloc+0x224>)
 8005236:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800523a:	4b49      	ldr	r3, [pc, #292]	; (8005360 <mem_malloc+0x224>)
 800523c:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8005240:	4b47      	ldr	r3, [pc, #284]	; (8005360 <mem_malloc+0x224>)
 8005242:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8005246:	429a      	cmp	r2, r3
 8005248:	d227      	bcs.n	800529a <mem_malloc+0x15e>
 800524a:	4b45      	ldr	r3, [pc, #276]	; (8005360 <mem_malloc+0x224>)
 800524c:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8005250:	4b43      	ldr	r3, [pc, #268]	; (8005360 <mem_malloc+0x224>)
 8005252:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005256:	e020      	b.n	800529a <mem_malloc+0x15e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2201      	movs	r2, #1
 800525c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800525e:	4b40      	ldr	r3, [pc, #256]	; (8005360 <mem_malloc+0x224>)
 8005260:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	4413      	add	r3, r2
 800526a:	b29c      	uxth	r4, r3
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f7ff fc95 	bl	8004b9c <mem_to_ptr>
 8005272:	4603      	mov	r3, r0
 8005274:	1ae3      	subs	r3, r4, r3
 8005276:	b29a      	uxth	r2, r3
 8005278:	4b39      	ldr	r3, [pc, #228]	; (8005360 <mem_malloc+0x224>)
 800527a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800527e:	4b38      	ldr	r3, [pc, #224]	; (8005360 <mem_malloc+0x224>)
 8005280:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 8005284:	4b36      	ldr	r3, [pc, #216]	; (8005360 <mem_malloc+0x224>)
 8005286:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800528a:	429a      	cmp	r2, r3
 800528c:	d205      	bcs.n	800529a <mem_malloc+0x15e>
 800528e:	4b34      	ldr	r3, [pc, #208]	; (8005360 <mem_malloc+0x224>)
 8005290:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8005294:	4b32      	ldr	r3, [pc, #200]	; (8005360 <mem_malloc+0x224>)
 8005296:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800529a:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <mem_malloc+0x214>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d127      	bne.n	80052f4 <mem_malloc+0x1b8>
          struct mem *cur = lfree;
 80052a4:	4b2a      	ldr	r3, [pc, #168]	; (8005350 <mem_malloc+0x214>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80052aa:	e005      	b.n	80052b8 <mem_malloc+0x17c>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fc61 	bl	8004b78 <ptr_to_mem>
 80052b6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	791b      	ldrb	r3, [r3, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <mem_malloc+0x18e>
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <mem_malloc+0x228>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d1f0      	bne.n	80052ac <mem_malloc+0x170>
          }
          lfree = cur;
 80052ca:	4a21      	ldr	r2, [pc, #132]	; (8005350 <mem_malloc+0x214>)
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80052d0:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <mem_malloc+0x214>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b23      	ldr	r3, [pc, #140]	; (8005364 <mem_malloc+0x228>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d00b      	beq.n	80052f4 <mem_malloc+0x1b8>
 80052dc:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <mem_malloc+0x214>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	791b      	ldrb	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d006      	beq.n	80052f4 <mem_malloc+0x1b8>
 80052e6:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <mem_malloc+0x218>)
 80052e8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80052ec:	491e      	ldr	r1, [pc, #120]	; (8005368 <mem_malloc+0x22c>)
 80052ee:	481b      	ldr	r0, [pc, #108]	; (800535c <mem_malloc+0x220>)
 80052f0:	f009 fc54 	bl	800eb9c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80052f4:	8bba      	ldrh	r2, [r7, #28]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	3306      	adds	r3, #6
 80052fc:	4a19      	ldr	r2, [pc, #100]	; (8005364 <mem_malloc+0x228>)
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	4293      	cmp	r3, r2
 8005302:	d906      	bls.n	8005312 <mem_malloc+0x1d6>
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <mem_malloc+0x218>)
 8005306:	f240 32b9 	movw	r2, #953	; 0x3b9
 800530a:	4918      	ldr	r1, [pc, #96]	; (800536c <mem_malloc+0x230>)
 800530c:	4813      	ldr	r0, [pc, #76]	; (800535c <mem_malloc+0x220>)
 800530e:	f009 fc45 	bl	800eb9c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	3306      	adds	r3, #6
 8005316:	e016      	b.n	8005346 <mem_malloc+0x20a>
         ptr = ptr_to_mem(ptr)->next) {
 8005318:	8bfb      	ldrh	r3, [r7, #30]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fc2c 	bl	8004b78 <ptr_to_mem>
 8005320:	4603      	mov	r3, r0
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005326:	8bfa      	ldrh	r2, [r7, #30]
 8005328:	8bbb      	ldrh	r3, [r7, #28]
 800532a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800532e:	429a      	cmp	r2, r3
 8005330:	f4ff af27 	bcc.w	8005182 <mem_malloc+0x46>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <mem_malloc+0x224>)
 8005336:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800533a:	3301      	adds	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <mem_malloc+0x224>)
 8005340:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3724      	adds	r7, #36	; 0x24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd90      	pop	{r4, r7, pc}
 800534e:	bf00      	nop
 8005350:	200000a0 	.word	0x200000a0
 8005354:	0800fc20 	.word	0x0800fc20
 8005358:	0800fda4 	.word	0x0800fda4
 800535c:	0800fc68 	.word	0x0800fc68
 8005360:	200075ac 	.word	0x200075ac
 8005364:	2000009c 	.word	0x2000009c
 8005368:	0800fdb8 	.word	0x0800fdb8
 800536c:	0800fdd4 	.word	0x0800fdd4

08005370 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e011      	b.n	80053b0 <memp_init_pool+0x40>
    memp->next = *desc->tab;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	889b      	ldrh	r3, [r3, #4]
 80053a2:	461a      	mov	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4413      	add	r3, r2
 80053a8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	88db      	ldrh	r3, [r3, #6]
 80053b4:	461a      	mov	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	dbe7      	blt.n	800538c <memp_init_pool+0x1c>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	88d2      	ldrh	r2, [r2, #6]
 80053c4:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80053da:	2300      	movs	r3, #0
 80053dc:	80fb      	strh	r3, [r7, #6]
 80053de:	e014      	b.n	800540a <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	4a0e      	ldr	r2, [pc, #56]	; (800541c <memp_init+0x48>)
 80053e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ffc1 	bl	8005370 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <memp_init+0x48>)
 80053f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	4909      	ldr	r1, [pc, #36]	; (8005420 <memp_init+0x4c>)
 80053fc:	332c      	adds	r3, #44	; 0x2c
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	3301      	adds	r3, #1
 8005408:	80fb      	strh	r3, [r7, #6]
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d9e7      	bls.n	80053e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	08012524 	.word	0x08012524
 8005420:	200075ac 	.word	0x200075ac

08005424 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01a      	beq.n	8005470 <do_memp_malloc_pool+0x4c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	601a      	str	r2, [r3, #0]
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	889a      	ldrh	r2, [r3, #4]
 800544a:	3201      	adds	r2, #1
 800544c:	b292      	uxth	r2, r2
 800544e:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	889a      	ldrh	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	88db      	ldrh	r3, [r3, #6]
 800545c:	429a      	cmp	r2, r3
 800545e:	d905      	bls.n	800546c <do_memp_malloc_pool+0x48>
      desc->stats->max = desc->stats->used;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	8892      	ldrh	r2, [r2, #4]
 800546a:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	e006      	b.n	800547e <do_memp_malloc_pool+0x5a>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	881a      	ldrh	r2, [r3, #0]
 8005476:	3201      	adds	r2, #1
 8005478:	b292      	uxth	r2, r2
 800547a:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d908      	bls.n	80054ae <memp_malloc+0x22>
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <memp_malloc+0x3c>)
 800549e:	f240 1257 	movw	r2, #343	; 0x157
 80054a2:	490a      	ldr	r1, [pc, #40]	; (80054cc <memp_malloc+0x40>)
 80054a4:	480a      	ldr	r0, [pc, #40]	; (80054d0 <memp_malloc+0x44>)
 80054a6:	f009 fb79 	bl	800eb9c <iprintf>
 80054aa:	2300      	movs	r3, #0
 80054ac:	e008      	b.n	80054c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <memp_malloc+0x48>)
 80054b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ffb4 	bl	8005424 <do_memp_malloc_pool>
 80054bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80054be:	68fb      	ldr	r3, [r7, #12]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	0800fe04 	.word	0x0800fe04
 80054cc:	0800fe70 	.word	0x0800fe70
 80054d0:	0800fe48 	.word	0x0800fe48
 80054d4:	08012524 	.word	0x08012524

080054d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]

  LWIP_ASSERT("memp_free: mem properly aligned",
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	60fb      	str	r3, [r7, #12]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	889a      	ldrh	r2, [r3, #4]
 80054ec:	3a01      	subs	r2, #1
 80054ee:	b292      	uxth	r2, r2
 80054f0:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	2b08      	cmp	r3, #8
 8005520:	d907      	bls.n	8005532 <memp_free+0x22>
 8005522:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <memp_free+0x44>)
 8005524:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005528:	490b      	ldr	r1, [pc, #44]	; (8005558 <memp_free+0x48>)
 800552a:	480c      	ldr	r0, [pc, #48]	; (800555c <memp_free+0x4c>)
 800552c:	f009 fb36 	bl	800eb9c <iprintf>
 8005530:	e00c      	b.n	800554c <memp_free+0x3c>

  if (mem == NULL) {
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	4a09      	ldr	r2, [pc, #36]	; (8005560 <memp_free+0x50>)
 800553c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f7ff ffc8 	bl	80054d8 <do_memp_free_pool>
 8005548:	e000      	b.n	800554c <memp_free+0x3c>
    return;
 800554a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	0800fe04 	.word	0x0800fe04
 8005558:	0800fe90 	.word	0x0800fe90
 800555c:	0800fe48 	.word	0x0800fe48
 8005560:	08012524 	.word	0x08012524

08005564 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <netif_add+0x26>
 8005588:	4b57      	ldr	r3, [pc, #348]	; (80056e8 <netif_add+0x174>)
 800558a:	f240 1227 	movw	r2, #295	; 0x127
 800558e:	4957      	ldr	r1, [pc, #348]	; (80056ec <netif_add+0x178>)
 8005590:	4857      	ldr	r0, [pc, #348]	; (80056f0 <netif_add+0x17c>)
 8005592:	f009 fb03 	bl	800eb9c <iprintf>
 8005596:	2300      	movs	r3, #0
 8005598:	e0a2      	b.n	80056e0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d108      	bne.n	80055b2 <netif_add+0x3e>
 80055a0:	4b51      	ldr	r3, [pc, #324]	; (80056e8 <netif_add+0x174>)
 80055a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80055a6:	4953      	ldr	r1, [pc, #332]	; (80056f4 <netif_add+0x180>)
 80055a8:	4851      	ldr	r0, [pc, #324]	; (80056f0 <netif_add+0x17c>)
 80055aa:	f009 faf7 	bl	800eb9c <iprintf>
 80055ae:	2300      	movs	r3, #0
 80055b0:	e096      	b.n	80056e0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80055b8:	4b4f      	ldr	r3, [pc, #316]	; (80056f8 <netif_add+0x184>)
 80055ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80055c2:	4b4d      	ldr	r3, [pc, #308]	; (80056f8 <netif_add+0x184>)
 80055c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80055cc:	4b4a      	ldr	r3, [pc, #296]	; (80056f8 <netif_add+0x184>)
 80055ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a45      	ldr	r2, [pc, #276]	; (80056fc <netif_add+0x188>)
 80055e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a3a      	ldr	r2, [r7, #32]
 8005600:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005602:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <netif_add+0x18c>)
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005610:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f913 	bl	8005844 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	4798      	blx	r3
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <netif_add+0xba>
    return NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	e058      	b.n	80056e0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005634:	2bff      	cmp	r3, #255	; 0xff
 8005636:	d103      	bne.n	8005640 <netif_add+0xcc>
        netif->num = 0;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005644:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <netif_add+0x190>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e02b      	b.n	80056a4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	429a      	cmp	r2, r3
 8005652:	d106      	bne.n	8005662 <netif_add+0xee>
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <netif_add+0x174>)
 8005656:	f240 128b 	movw	r2, #395	; 0x18b
 800565a:	492b      	ldr	r1, [pc, #172]	; (8005708 <netif_add+0x194>)
 800565c:	4824      	ldr	r0, [pc, #144]	; (80056f0 <netif_add+0x17c>)
 800565e:	f009 fa9d 	bl	800eb9c <iprintf>
        num_netifs++;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2bff      	cmp	r3, #255	; 0xff
 800566c:	dd06      	ble.n	800567c <netif_add+0x108>
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <netif_add+0x174>)
 8005670:	f240 128d 	movw	r2, #397	; 0x18d
 8005674:	4925      	ldr	r1, [pc, #148]	; (800570c <netif_add+0x198>)
 8005676:	481e      	ldr	r0, [pc, #120]	; (80056f0 <netif_add+0x17c>)
 8005678:	f009 fa90 	bl	800eb9c <iprintf>
        if (netif2->num == netif->num) {
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005688:	429a      	cmp	r2, r3
 800568a:	d108      	bne.n	800569e <netif_add+0x12a>
          netif->num++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005692:	3301      	adds	r3, #1
 8005694:	b2da      	uxtb	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800569c:	e005      	b.n	80056aa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1d0      	bne.n	800564c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1be      	bne.n	800562e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056b6:	2bfe      	cmp	r3, #254	; 0xfe
 80056b8:	d103      	bne.n	80056c2 <netif_add+0x14e>
    netif_num = 0;
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <netif_add+0x18c>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e006      	b.n	80056d0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056c8:	3301      	adds	r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <netif_add+0x18c>)
 80056ce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <netif_add+0x190>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80056d8:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <netif_add+0x190>)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80056de:	68fb      	ldr	r3, [r7, #12]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	0800feac 	.word	0x0800feac
 80056ec:	0800ff40 	.word	0x0800ff40
 80056f0:	0800fefc 	.word	0x0800fefc
 80056f4:	0800ff5c 	.word	0x0800ff5c
 80056f8:	08012588 	.word	0x08012588
 80056fc:	08005a57 	.word	0x08005a57
 8005700:	20000134 	.word	0x20000134
 8005704:	200075a0 	.word	0x200075a0
 8005708:	0800ff80 	.word	0x0800ff80
 800570c:	0800ff94 	.word	0x0800ff94

08005710 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f002 facd 	bl	8007cbc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f006 fce9 	bl	800c0fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <netif_do_set_ipaddr+0x20>
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <netif_do_set_ipaddr+0x88>)
 8005748:	f240 12cb 	movw	r2, #459	; 0x1cb
 800574c:	491c      	ldr	r1, [pc, #112]	; (80057c0 <netif_do_set_ipaddr+0x8c>)
 800574e:	481d      	ldr	r0, [pc, #116]	; (80057c4 <netif_do_set_ipaddr+0x90>)
 8005750:	f009 fa24 	bl	800eb9c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <netif_do_set_ipaddr+0x34>
 800575a:	4b18      	ldr	r3, [pc, #96]	; (80057bc <netif_do_set_ipaddr+0x88>)
 800575c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005760:	4917      	ldr	r1, [pc, #92]	; (80057c0 <netif_do_set_ipaddr+0x8c>)
 8005762:	4818      	ldr	r0, [pc, #96]	; (80057c4 <netif_do_set_ipaddr+0x90>)
 8005764:	f009 fa1a 	bl	800eb9c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3304      	adds	r3, #4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d01c      	beq.n	80057b0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3304      	adds	r3, #4
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005786:	f107 0314 	add.w	r3, r7, #20
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ffbf 	bl	8005710 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <netif_do_set_ipaddr+0x6a>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	e000      	b.n	80057a0 <netif_do_set_ipaddr+0x6c>
 800579e:	2300      	movs	r3, #0
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80057a4:	2101      	movs	r1, #1
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f8d2 	bl	8005950 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	0800feac 	.word	0x0800feac
 80057c0:	0800ffc4 	.word	0x0800ffc4
 80057c4:	0800fefc 	.word	0x0800fefc

080057c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3308      	adds	r3, #8
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d00a      	beq.n	80057f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <netif_do_set_netmask+0x26>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	e000      	b.n	80057f0 <netif_do_set_netmask+0x28>
 80057ee:	2300      	movs	r3, #0
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005806:	b480      	push	{r7}
 8005808:	b085      	sub	sp, #20
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	330c      	adds	r3, #12
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d00a      	beq.n	8005836 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <netif_do_set_gw+0x26>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	e000      	b.n	800582e <netif_do_set_gw+0x28>
 800582c:	2300      	movs	r3, #0
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005860:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <netif_set_addr+0x90>)
 8005862:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800586a:	4b1a      	ldr	r3, [pc, #104]	; (80058d4 <netif_set_addr+0x90>)
 800586c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005874:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <netif_set_addr+0x90>)
 8005876:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <netif_set_addr+0x42>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <netif_set_addr+0x46>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <netif_set_addr+0x48>
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005894:	f107 0310 	add.w	r3, r7, #16
 8005898:	461a      	mov	r2, r3
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff ff49 	bl	8005734 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff ff8e 	bl	80057c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff ffa8 	bl	8005806 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80058bc:	f107 0310 	add.w	r3, r7, #16
 80058c0:	461a      	mov	r2, r3
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff ff35 	bl	8005734 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80058ca:	bf00      	nop
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	08012588 	.word	0x08012588

080058d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80058e0:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <netif_set_default+0x1c>)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	200075a4 	.word	0x200075a4

080058f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d107      	bne.n	8005916 <netif_set_up+0x1e>
 8005906:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <netif_set_up+0x4c>)
 8005908:	f44f 7254 	mov.w	r2, #848	; 0x350
 800590c:	490e      	ldr	r1, [pc, #56]	; (8005948 <netif_set_up+0x50>)
 800590e:	480f      	ldr	r0, [pc, #60]	; (800594c <netif_set_up+0x54>)
 8005910:	f009 f944 	bl	800eb9c <iprintf>
 8005914:	e013      	b.n	800593e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10c      	bne.n	800593e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	b2da      	uxtb	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005936:	2103      	movs	r1, #3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f809 	bl	8005950 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	0800feac 	.word	0x0800feac
 8005948:	08010034 	.word	0x08010034
 800594c:	0800fefc 	.word	0x0800fefc

08005950 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <netif_issue_reports+0x20>
 8005962:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <netif_issue_reports+0x74>)
 8005964:	f240 326d 	movw	r2, #877	; 0x36d
 8005968:	4917      	ldr	r1, [pc, #92]	; (80059c8 <netif_issue_reports+0x78>)
 800596a:	4818      	ldr	r0, [pc, #96]	; (80059cc <netif_issue_reports+0x7c>)
 800596c:	f009 f916 	bl	800eb9c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d01e      	beq.n	80059bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005984:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005988:	2b00      	cmp	r3, #0
 800598a:	d017      	beq.n	80059bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d013      	beq.n	80059be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3304      	adds	r3, #4
 800599a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00e      	beq.n	80059be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f007 fb4b 	bl	800d050 <etharp_request>
 80059ba:	e000      	b.n	80059be <netif_issue_reports+0x6e>
    return;
 80059bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	0800feac 	.word	0x0800feac
 80059c8:	08010050 	.word	0x08010050
 80059cc:	0800fefc 	.word	0x0800fefc

080059d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <netif_set_down+0x1e>
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <netif_set_down+0x58>)
 80059e0:	f240 329b 	movw	r2, #923	; 0x39b
 80059e4:	4911      	ldr	r1, [pc, #68]	; (8005a2c <netif_set_down+0x5c>)
 80059e6:	4812      	ldr	r0, [pc, #72]	; (8005a30 <netif_set_down+0x60>)
 80059e8:	f009 f8d8 	bl	800eb9c <iprintf>
 80059ec:	e019      	b.n	8005a22 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d012      	beq.n	8005a22 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f006 fe95 	bl	800c74c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	0800feac 	.word	0x0800feac
 8005a2c:	08010074 	.word	0x08010074
 8005a30:	0800fefc 	.word	0x0800fefc

08005a34 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	61da      	str	r2, [r3, #28]
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005a62:	f06f 030b 	mvn.w	r3, #11
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d013      	beq.n	8005aac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <netif_get_by_index+0x48>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e00c      	b.n	8005aa6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a92:	3301      	adds	r3, #1
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	79fa      	ldrb	r2, [r7, #7]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d101      	bne.n	8005aa0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	e006      	b.n	8005aae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1ef      	bne.n	8005a8c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	200075a0 	.word	0x200075a0

08005ac0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <pbuf_free_ooseq+0x38>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <pbuf_free_ooseq+0x3c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	607b      	str	r3, [r7, #4]
 8005ad2:	e00a      	b.n	8005aea <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f002 f92b 	bl	8007d38 <tcp_free_ooseq>
      return;
 8005ae2:	e005      	b.n	8005af0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f1      	bne.n	8005ad4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200075a8 	.word	0x200075a8
 8005afc:	20007688 	.word	0x20007688

08005b00 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <pbuf_pool_is_empty+0x14>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	200075a8 	.word	0x200075a8

08005b18 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4611      	mov	r1, r2
 8005b24:	461a      	mov	r2, r3
 8005b26:	460b      	mov	r3, r1
 8005b28:	80fb      	strh	r3, [r7, #6]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	88fa      	ldrh	r2, [r7, #6]
 8005b3e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	88ba      	ldrh	r2, [r7, #4]
 8005b44:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005b46:	8b3b      	ldrh	r3, [r7, #24]
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	7f3a      	ldrb	r2, [r7, #28]
 8005b52:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	73da      	strb	r2, [r3, #15]
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08c      	sub	sp, #48	; 0x30
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
 8005b76:	460b      	mov	r3, r1
 8005b78:	80bb      	strh	r3, [r7, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005b82:	887b      	ldrh	r3, [r7, #2]
 8005b84:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b88:	d067      	beq.n	8005c5a <pbuf_alloc+0xee>
 8005b8a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b8e:	f300 808e 	bgt.w	8005cae <pbuf_alloc+0x142>
 8005b92:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b96:	d010      	beq.n	8005bba <pbuf_alloc+0x4e>
 8005b98:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b9c:	f300 8087 	bgt.w	8005cae <pbuf_alloc+0x142>
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d002      	beq.n	8005baa <pbuf_alloc+0x3e>
 8005ba4:	2b41      	cmp	r3, #65	; 0x41
 8005ba6:	f040 8082 	bne.w	8005cae <pbuf_alloc+0x142>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005baa:	887a      	ldrh	r2, [r7, #2]
 8005bac:	88bb      	ldrh	r3, [r7, #4]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	f000 f893 	bl	8005cdc <pbuf_alloc_reference>
 8005bb6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005bb8:	e082      	b.n	8005cc0 <pbuf_alloc+0x154>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005bc2:	88bb      	ldrh	r3, [r7, #4]
 8005bc4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005bc6:	2008      	movs	r0, #8
 8005bc8:	f7ff fc60 	bl	800548c <memp_malloc>
 8005bcc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d109      	bne.n	8005be8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005bd4:	f7ff ff94 	bl	8005b00 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005be0:	f000 fa64 	bl	80060ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e06c      	b.n	8005cc2 <pbuf_alloc+0x156>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005be8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bea:	f5c3 7313 	rsb	r3, r3, #588	; 0x24c
 8005bee:	3302      	adds	r3, #2
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8b7a      	ldrh	r2, [r7, #26]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	bf28      	it	cs
 8005bf8:	4613      	movcs	r3, r2
 8005bfa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005bfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bfe:	3310      	adds	r3, #16
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	18d1      	adds	r1, r2, r3
 8005c04:	89f8      	ldrh	r0, [r7, #14]
 8005c06:	8b7a      	ldrh	r2, [r7, #26]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	887b      	ldrh	r3, [r7, #2]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	4603      	mov	r3, r0
 8005c12:	6938      	ldr	r0, [r7, #16]
 8005c14:	f7ff ff80 	bl	8005b18 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005c18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c1a:	f240 224e 	movw	r2, #590	; 0x24e
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d106      	bne.n	8005c30 <pbuf_alloc+0xc4>
 8005c22:	4b2a      	ldr	r3, [pc, #168]	; (8005ccc <pbuf_alloc+0x160>)
 8005c24:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005c28:	4929      	ldr	r1, [pc, #164]	; (8005cd0 <pbuf_alloc+0x164>)
 8005c2a:	482a      	ldr	r0, [pc, #168]	; (8005cd4 <pbuf_alloc+0x168>)
 8005c2c:	f008 ffb6 	bl	800eb9c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <pbuf_alloc+0xd0>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	e002      	b.n	8005c42 <pbuf_alloc+0xd6>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005c46:	8b7a      	ldrh	r2, [r7, #26]
 8005c48:	89fb      	ldrh	r3, [r7, #14]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005c52:	8b7b      	ldrh	r3, [r7, #26]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1b6      	bne.n	8005bc6 <pbuf_alloc+0x5a>
      break;
 8005c58:	e032      	b.n	8005cc0 <pbuf_alloc+0x154>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005c5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005c5c:	88bb      	ldrh	r3, [r7, #4]
 8005c5e:	4413      	add	r3, r2
 8005c60:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005c62:	8b3b      	ldrh	r3, [r7, #24]
 8005c64:	3310      	adds	r3, #16
 8005c66:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c68:	8b3a      	ldrh	r2, [r7, #24]
 8005c6a:	88bb      	ldrh	r3, [r7, #4]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d303      	bcc.n	8005c78 <pbuf_alloc+0x10c>
 8005c70:	8afa      	ldrh	r2, [r7, #22]
 8005c72:	88bb      	ldrh	r3, [r7, #4]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d201      	bcs.n	8005c7c <pbuf_alloc+0x110>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
        return NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e022      	b.n	8005cc2 <pbuf_alloc+0x156>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005c7c:	8afb      	ldrh	r3, [r7, #22]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fa5c 	bl	800513c <mem_malloc>
 8005c84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <pbuf_alloc+0x124>
        return NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e018      	b.n	8005cc2 <pbuf_alloc+0x156>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005c90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c92:	3310      	adds	r3, #16
 8005c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c96:	18d1      	adds	r1, r2, r3
 8005c98:	88b8      	ldrh	r0, [r7, #4]
 8005c9a:	88ba      	ldrh	r2, [r7, #4]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	887b      	ldrh	r3, [r7, #2]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ca8:	f7ff ff36 	bl	8005b18 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005cac:	e008      	b.n	8005cc0 <pbuf_alloc+0x154>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <pbuf_alloc+0x160>)
 8005cb0:	f240 1227 	movw	r2, #295	; 0x127
 8005cb4:	4908      	ldr	r1, [pc, #32]	; (8005cd8 <pbuf_alloc+0x16c>)
 8005cb6:	4807      	ldr	r0, [pc, #28]	; (8005cd4 <pbuf_alloc+0x168>)
 8005cb8:	f008 ff70 	bl	800eb9c <iprintf>
      return NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <pbuf_alloc+0x156>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3728      	adds	r7, #40	; 0x28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	080100dc 	.word	0x080100dc
 8005cd0:	0801010c 	.word	0x0801010c
 8005cd4:	08010140 	.word	0x08010140
 8005cd8:	08010168 	.word	0x08010168

08005cdc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	807b      	strh	r3, [r7, #2]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005cec:	883b      	ldrh	r3, [r7, #0]
 8005cee:	2b41      	cmp	r3, #65	; 0x41
 8005cf0:	d009      	beq.n	8005d06 <pbuf_alloc_reference+0x2a>
 8005cf2:	883b      	ldrh	r3, [r7, #0]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d006      	beq.n	8005d06 <pbuf_alloc_reference+0x2a>
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <pbuf_alloc_reference+0x5c>)
 8005cfa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005cfe:	490f      	ldr	r1, [pc, #60]	; (8005d3c <pbuf_alloc_reference+0x60>)
 8005d00:	480f      	ldr	r0, [pc, #60]	; (8005d40 <pbuf_alloc_reference+0x64>)
 8005d02:	f008 ff4b 	bl	800eb9c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005d06:	2007      	movs	r0, #7
 8005d08:	f7ff fbc0 	bl	800548c <memp_malloc>
 8005d0c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	e00b      	b.n	8005d30 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005d18:	8879      	ldrh	r1, [r7, #2]
 8005d1a:	887a      	ldrh	r2, [r7, #2]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	883b      	ldrh	r3, [r7, #0]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	460b      	mov	r3, r1
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff fef5 	bl	8005b18 <pbuf_init_alloced_pbuf>
  return p;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	080100dc 	.word	0x080100dc
 8005d3c:	08010184 	.word	0x08010184
 8005d40:	08010140 	.word	0x08010140

08005d44 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]
 8005d50:	460b      	mov	r3, r1
 8005d52:	81bb      	strh	r3, [r7, #12]
 8005d54:	4613      	mov	r3, r2
 8005d56:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005d5c:	8a7a      	ldrh	r2, [r7, #18]
 8005d5e:	89bb      	ldrh	r3, [r7, #12]
 8005d60:	441a      	add	r2, r3
 8005d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d901      	bls.n	8005d6c <pbuf_alloced_custom+0x28>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e015      	b.n	8005d98 <pbuf_alloced_custom+0x54>
  }

  if (payload_mem != NULL) {
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <pbuf_alloced_custom+0x38>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005d72:	8a7b      	ldrh	r3, [r7, #18]
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	4413      	add	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e001      	b.n	8005d80 <pbuf_alloced_custom+0x3c>
  } else {
    payload = NULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	89b9      	ldrh	r1, [r7, #12]
 8005d84:	89ba      	ldrh	r2, [r7, #12]
 8005d86:	2302      	movs	r3, #2
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	897b      	ldrh	r3, [r7, #10]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	f7ff fec1 	bl	8005b18 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005d96:	687b      	ldr	r3, [r7, #4]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <pbuf_realloc+0x20>
 8005db2:	4b3a      	ldr	r3, [pc, #232]	; (8005e9c <pbuf_realloc+0xfc>)
 8005db4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005db8:	4939      	ldr	r1, [pc, #228]	; (8005ea0 <pbuf_realloc+0x100>)
 8005dba:	483a      	ldr	r0, [pc, #232]	; (8005ea4 <pbuf_realloc+0x104>)
 8005dbc:	f008 feee 	bl	800eb9c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	891b      	ldrh	r3, [r3, #8]
 8005dc4:	887a      	ldrh	r2, [r7, #2]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d263      	bcs.n	8005e92 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	891a      	ldrh	r2, [r3, #8]
 8005dce:	887b      	ldrh	r3, [r7, #2]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005dd4:	887b      	ldrh	r3, [r7, #2]
 8005dd6:	817b      	strh	r3, [r7, #10]
  q = p;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005ddc:	e018      	b.n	8005e10 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	895b      	ldrh	r3, [r3, #10]
 8005de2:	897a      	ldrh	r2, [r7, #10]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	891a      	ldrh	r2, [r3, #8]
 8005dec:	893b      	ldrh	r3, [r7, #8]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <pbuf_realloc+0x70>
 8005e02:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <pbuf_realloc+0xfc>)
 8005e04:	f240 12af 	movw	r2, #431	; 0x1af
 8005e08:	4927      	ldr	r1, [pc, #156]	; (8005ea8 <pbuf_realloc+0x108>)
 8005e0a:	4826      	ldr	r0, [pc, #152]	; (8005ea4 <pbuf_realloc+0x104>)
 8005e0c:	f008 fec6 	bl	800eb9c <iprintf>
  while (rem_len > q->len) {
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	895b      	ldrh	r3, [r3, #10]
 8005e14:	897a      	ldrh	r2, [r7, #10]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d8e1      	bhi.n	8005dde <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	7b1b      	ldrb	r3, [r3, #12]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d121      	bne.n	8005e6a <pbuf_realloc+0xca>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	895b      	ldrh	r3, [r3, #10]
 8005e2a:	897a      	ldrh	r2, [r7, #10]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d01c      	beq.n	8005e6a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	7b5b      	ldrb	r3, [r3, #13]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d116      	bne.n	8005e6a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	897b      	ldrh	r3, [r7, #10]
 8005e48:	4413      	add	r3, r2
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff f85a 	bl	8004f08 <mem_trim>
 8005e54:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d106      	bne.n	8005e6a <pbuf_realloc+0xca>
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <pbuf_realloc+0xfc>)
 8005e5e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005e62:	4912      	ldr	r1, [pc, #72]	; (8005eac <pbuf_realloc+0x10c>)
 8005e64:	480f      	ldr	r0, [pc, #60]	; (8005ea4 <pbuf_realloc+0x104>)
 8005e66:	f008 fe99 	bl	800eb9c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	897a      	ldrh	r2, [r7, #10]
 8005e6e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	895a      	ldrh	r2, [r3, #10]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 f911 	bl	80060ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e000      	b.n	8005e94 <pbuf_realloc+0xf4>
    return;
 8005e92:	bf00      	nop

}
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	080100dc 	.word	0x080100dc
 8005ea0:	08010198 	.word	0x08010198
 8005ea4:	08010140 	.word	0x08010140
 8005ea8:	080101b0 	.word	0x080101b0
 8005eac:	080101c8 	.word	0x080101c8

08005eb0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <pbuf_add_header_impl+0x22>
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <pbuf_add_header_impl+0xc4>)
 8005ec6:	f240 12df 	movw	r2, #479	; 0x1df
 8005eca:	492b      	ldr	r1, [pc, #172]	; (8005f78 <pbuf_add_header_impl+0xc8>)
 8005ecc:	482b      	ldr	r0, [pc, #172]	; (8005f7c <pbuf_add_header_impl+0xcc>)
 8005ece:	f008 fe65 	bl	800eb9c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <pbuf_add_header_impl+0x30>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ede:	d301      	bcc.n	8005ee4 <pbuf_add_header_impl+0x34>
    return 1;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e043      	b.n	8005f6c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <pbuf_add_header_impl+0x3e>
    return 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e03e      	b.n	8005f6c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	891a      	ldrh	r2, [r3, #8]
 8005ef6:	8a7b      	ldrh	r3, [r7, #18]
 8005ef8:	4413      	add	r3, r2
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8a7a      	ldrh	r2, [r7, #18]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d901      	bls.n	8005f06 <pbuf_add_header_impl+0x56>
    return 1;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e032      	b.n	8005f6c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	7b1b      	ldrb	r3, [r3, #12]
 8005f0a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005f0c:	8a3b      	ldrh	r3, [r7, #16]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00c      	beq.n	8005f30 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	4413      	add	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3310      	adds	r3, #16
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d20d      	bcs.n	8005f48 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e01d      	b.n	8005f6c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d006      	beq.n	8005f44 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	425b      	negs	r3, r3
 8005f3e:	4413      	add	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e001      	b.n	8005f48 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e011      	b.n	8005f6c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	895a      	ldrh	r2, [r3, #10]
 8005f52:	8a7b      	ldrh	r3, [r7, #18]
 8005f54:	4413      	add	r3, r2
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	891a      	ldrh	r2, [r3, #8]
 8005f60:	8a7b      	ldrh	r3, [r7, #18]
 8005f62:	4413      	add	r3, r2
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	811a      	strh	r2, [r3, #8]


  return 0;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	080100dc 	.word	0x080100dc
 8005f78:	080101e4 	.word	0x080101e4
 8005f7c:	08010140 	.word	0x08010140

08005f80 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ff8e 	bl	8005eb0 <pbuf_add_header_impl>
 8005f94:	4603      	mov	r3, r0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <pbuf_remove_header+0x1e>
 8005fb0:	4b20      	ldr	r3, [pc, #128]	; (8006034 <pbuf_remove_header+0x94>)
 8005fb2:	f240 224b 	movw	r2, #587	; 0x24b
 8005fb6:	4920      	ldr	r1, [pc, #128]	; (8006038 <pbuf_remove_header+0x98>)
 8005fb8:	4820      	ldr	r0, [pc, #128]	; (800603c <pbuf_remove_header+0x9c>)
 8005fba:	f008 fdef 	bl	800eb9c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <pbuf_remove_header+0x2c>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fca:	d301      	bcc.n	8005fd0 <pbuf_remove_header+0x30>
    return 1;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e02c      	b.n	800602a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <pbuf_remove_header+0x3a>
    return 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e027      	b.n	800602a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	895b      	ldrh	r3, [r3, #10]
 8005fe2:	89fa      	ldrh	r2, [r7, #14]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d908      	bls.n	8005ffa <pbuf_remove_header+0x5a>
 8005fe8:	4b12      	ldr	r3, [pc, #72]	; (8006034 <pbuf_remove_header+0x94>)
 8005fea:	f240 2255 	movw	r2, #597	; 0x255
 8005fee:	4914      	ldr	r1, [pc, #80]	; (8006040 <pbuf_remove_header+0xa0>)
 8005ff0:	4812      	ldr	r0, [pc, #72]	; (800603c <pbuf_remove_header+0x9c>)
 8005ff2:	f008 fdd3 	bl	800eb9c <iprintf>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e017      	b.n	800602a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	895a      	ldrh	r2, [r3, #10]
 8006010:	89fb      	ldrh	r3, [r7, #14]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	b29a      	uxth	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	891a      	ldrh	r2, [r3, #8]
 800601e:	89fb      	ldrh	r3, [r7, #14]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	b29a      	uxth	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	080100dc 	.word	0x080100dc
 8006038:	080101e4 	.word	0x080101e4
 800603c:	08010140 	.word	0x08010140
 8006040:	080101f0 	.word	0x080101f0

08006044 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	807b      	strh	r3, [r7, #2]
 8006050:	4613      	mov	r3, r2
 8006052:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006054:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006058:	2b00      	cmp	r3, #0
 800605a:	da08      	bge.n	800606e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800605c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006060:	425b      	negs	r3, r3
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff ff9b 	bl	8005fa0 <pbuf_remove_header>
 800606a:	4603      	mov	r3, r0
 800606c:	e007      	b.n	800607e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800606e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006072:	787a      	ldrb	r2, [r7, #1]
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff ff1a 	bl	8005eb0 <pbuf_add_header_impl>
 800607c:	4603      	mov	r3, r0
  }
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	460b      	mov	r3, r1
 8006090:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006092:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006096:	2201      	movs	r2, #1
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff ffd2 	bl	8006044 <pbuf_header_impl>
 80060a0:	4603      	mov	r3, r0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <pbuf_free+0x22>
 80060c0:	4b38      	ldr	r3, [pc, #224]	; (80061a4 <pbuf_free+0xf8>)
 80060c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80060c6:	4938      	ldr	r1, [pc, #224]	; (80061a8 <pbuf_free+0xfc>)
 80060c8:	4838      	ldr	r0, [pc, #224]	; (80061ac <pbuf_free+0x100>)
 80060ca:	f008 fd67 	bl	800eb9c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	e063      	b.n	800619a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80060d6:	e05c      	b.n	8006192 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	7b9b      	ldrb	r3, [r3, #14]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d106      	bne.n	80060ee <pbuf_free+0x42>
 80060e0:	4b30      	ldr	r3, [pc, #192]	; (80061a4 <pbuf_free+0xf8>)
 80060e2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80060e6:	4932      	ldr	r1, [pc, #200]	; (80061b0 <pbuf_free+0x104>)
 80060e8:	4830      	ldr	r0, [pc, #192]	; (80061ac <pbuf_free+0x100>)
 80060ea:	f008 fd57 	bl	800eb9c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	7b9b      	ldrb	r3, [r3, #14]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	739a      	strb	r2, [r3, #14]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	7b9b      	ldrb	r3, [r3, #14]
 80060fe:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006100:	7dbb      	ldrb	r3, [r7, #22]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d143      	bne.n	800618e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7b1b      	ldrb	r3, [r3, #12]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	7b5b      	ldrb	r3, [r3, #13]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d011      	beq.n	8006146 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <pbuf_free+0x90>
 800612e:	4b1d      	ldr	r3, [pc, #116]	; (80061a4 <pbuf_free+0xf8>)
 8006130:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006134:	491f      	ldr	r1, [pc, #124]	; (80061b4 <pbuf_free+0x108>)
 8006136:	481d      	ldr	r0, [pc, #116]	; (80061ac <pbuf_free+0x100>)
 8006138:	f008 fd30 	bl	800eb9c <iprintf>
        pc->custom_free_function(p);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
 8006144:	e01d      	b.n	8006182 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d104      	bne.n	8006156 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	2008      	movs	r0, #8
 8006150:	f7ff f9de 	bl	8005510 <memp_free>
 8006154:	e015      	b.n	8006182 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d104      	bne.n	8006166 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	2007      	movs	r0, #7
 8006160:	f7ff f9d6 	bl	8005510 <memp_free>
 8006164:	e00d      	b.n	8006182 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <pbuf_free+0xc8>
          mem_free(p);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fe fe45 	bl	8004dfc <mem_free>
 8006172:	e006      	b.n	8006182 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <pbuf_free+0xf8>)
 8006176:	f240 320f 	movw	r2, #783	; 0x30f
 800617a:	490f      	ldr	r1, [pc, #60]	; (80061b8 <pbuf_free+0x10c>)
 800617c:	480b      	ldr	r0, [pc, #44]	; (80061ac <pbuf_free+0x100>)
 800617e:	f008 fd0d 	bl	800eb9c <iprintf>
        }
      }
      count++;
 8006182:	7dfb      	ldrb	r3, [r7, #23]
 8006184:	3301      	adds	r3, #1
 8006186:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	607b      	str	r3, [r7, #4]
 800618c:	e001      	b.n	8006192 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d19f      	bne.n	80060d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006198:	7dfb      	ldrb	r3, [r7, #23]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	080100dc 	.word	0x080100dc
 80061a8:	080101e4 	.word	0x080101e4
 80061ac:	08010140 	.word	0x08010140
 80061b0:	08010210 	.word	0x08010210
 80061b4:	08010228 	.word	0x08010228
 80061b8:	0801024c 	.word	0x0801024c

080061bc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80061c4:	2300      	movs	r3, #0
 80061c6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80061c8:	e005      	b.n	80061d6 <pbuf_clen+0x1a>
    ++len;
 80061ca:	89fb      	ldrh	r3, [r7, #14]
 80061cc:	3301      	adds	r3, #1
 80061ce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1f6      	bne.n	80061ca <pbuf_clen+0xe>
  }
  return len;
 80061dc:	89fb      	ldrh	r3, [r7, #14]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d010      	beq.n	800621c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7b9b      	ldrb	r3, [r3, #14]
 80061fe:	3301      	adds	r3, #1
 8006200:	b2da      	uxtb	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	7b9b      	ldrb	r3, [r3, #14]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <pbuf_ref+0x30>
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <pbuf_ref+0x38>)
 8006210:	f240 3242 	movw	r2, #834	; 0x342
 8006214:	4904      	ldr	r1, [pc, #16]	; (8006228 <pbuf_ref+0x3c>)
 8006216:	4805      	ldr	r0, [pc, #20]	; (800622c <pbuf_ref+0x40>)
 8006218:	f008 fcc0 	bl	800eb9c <iprintf>
  }
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	080100dc 	.word	0x080100dc
 8006228:	08010260 	.word	0x08010260
 800622c:	08010140 	.word	0x08010140

08006230 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <pbuf_cat+0x16>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d107      	bne.n	8006256 <pbuf_cat+0x26>
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <pbuf_cat+0x98>)
 8006248:	f240 3259 	movw	r2, #857	; 0x359
 800624c:	491f      	ldr	r1, [pc, #124]	; (80062cc <pbuf_cat+0x9c>)
 800624e:	4820      	ldr	r0, [pc, #128]	; (80062d0 <pbuf_cat+0xa0>)
 8006250:	f008 fca4 	bl	800eb9c <iprintf>
 8006254:	e034      	b.n	80062c0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e00a      	b.n	8006272 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	891a      	ldrh	r2, [r3, #8]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	891b      	ldrh	r3, [r3, #8]
 8006264:	4413      	add	r3, r2
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	891a      	ldrh	r2, [r3, #8]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	895b      	ldrh	r3, [r3, #10]
 8006282:	429a      	cmp	r2, r3
 8006284:	d006      	beq.n	8006294 <pbuf_cat+0x64>
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <pbuf_cat+0x98>)
 8006288:	f240 3262 	movw	r2, #866	; 0x362
 800628c:	4911      	ldr	r1, [pc, #68]	; (80062d4 <pbuf_cat+0xa4>)
 800628e:	4810      	ldr	r0, [pc, #64]	; (80062d0 <pbuf_cat+0xa0>)
 8006290:	f008 fc84 	bl	800eb9c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d006      	beq.n	80062aa <pbuf_cat+0x7a>
 800629c:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <pbuf_cat+0x98>)
 800629e:	f240 3263 	movw	r2, #867	; 0x363
 80062a2:	490d      	ldr	r1, [pc, #52]	; (80062d8 <pbuf_cat+0xa8>)
 80062a4:	480a      	ldr	r0, [pc, #40]	; (80062d0 <pbuf_cat+0xa0>)
 80062a6:	f008 fc79 	bl	800eb9c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	891a      	ldrh	r2, [r3, #8]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	891b      	ldrh	r3, [r3, #8]
 80062b2:	4413      	add	r3, r2
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	080100dc 	.word	0x080100dc
 80062cc:	08010274 	.word	0x08010274
 80062d0:	08010140 	.word	0x08010140
 80062d4:	080102ac 	.word	0x080102ac
 80062d8:	080102dc 	.word	0x080102dc

080062dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <pbuf_copy+0x2a>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <pbuf_copy+0x2a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	891a      	ldrh	r2, [r3, #8]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	891b      	ldrh	r3, [r3, #8]
 8006302:	429a      	cmp	r2, r3
 8006304:	d209      	bcs.n	800631a <pbuf_copy+0x3e>
 8006306:	4b57      	ldr	r3, [pc, #348]	; (8006464 <pbuf_copy+0x188>)
 8006308:	f240 32c9 	movw	r2, #969	; 0x3c9
 800630c:	4956      	ldr	r1, [pc, #344]	; (8006468 <pbuf_copy+0x18c>)
 800630e:	4857      	ldr	r0, [pc, #348]	; (800646c <pbuf_copy+0x190>)
 8006310:	f008 fc44 	bl	800eb9c <iprintf>
 8006314:	f06f 030f 	mvn.w	r3, #15
 8006318:	e09f      	b.n	800645a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	895b      	ldrh	r3, [r3, #10]
 800631e:	461a      	mov	r2, r3
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	895b      	ldrh	r3, [r3, #10]
 8006328:	4619      	mov	r1, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1acb      	subs	r3, r1, r3
 800632e:	429a      	cmp	r2, r3
 8006330:	d306      	bcc.n	8006340 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	895b      	ldrh	r3, [r3, #10]
 8006336:	461a      	mov	r2, r3
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e005      	b.n	800634c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	895b      	ldrh	r3, [r3, #10]
 8006344:	461a      	mov	r2, r3
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	18d0      	adds	r0, r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4619      	mov	r1, r3
 8006360:	f008 fc06 	bl	800eb70 <memcpy>
    offset_to += len;
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	895b      	ldrh	r3, [r3, #10]
 8006378:	461a      	mov	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	4293      	cmp	r3, r2
 800637e:	d906      	bls.n	800638e <pbuf_copy+0xb2>
 8006380:	4b38      	ldr	r3, [pc, #224]	; (8006464 <pbuf_copy+0x188>)
 8006382:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006386:	493a      	ldr	r1, [pc, #232]	; (8006470 <pbuf_copy+0x194>)
 8006388:	4838      	ldr	r0, [pc, #224]	; (800646c <pbuf_copy+0x190>)
 800638a:	f008 fc07 	bl	800eb9c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	895b      	ldrh	r3, [r3, #10]
 8006392:	461a      	mov	r2, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4293      	cmp	r3, r2
 8006398:	d906      	bls.n	80063a8 <pbuf_copy+0xcc>
 800639a:	4b32      	ldr	r3, [pc, #200]	; (8006464 <pbuf_copy+0x188>)
 800639c:	f240 32da 	movw	r2, #986	; 0x3da
 80063a0:	4934      	ldr	r1, [pc, #208]	; (8006474 <pbuf_copy+0x198>)
 80063a2:	4832      	ldr	r0, [pc, #200]	; (800646c <pbuf_copy+0x190>)
 80063a4:	f008 fbfa 	bl	800eb9c <iprintf>
    if (offset_from >= p_from->len) {
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	895b      	ldrh	r3, [r3, #10]
 80063ac:	461a      	mov	r2, r3
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d304      	bcc.n	80063be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	895b      	ldrh	r3, [r3, #10]
 80063c2:	461a      	mov	r2, r3
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d114      	bne.n	80063f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10c      	bne.n	80063f4 <pbuf_copy+0x118>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <pbuf_copy+0x118>
 80063e0:	4b20      	ldr	r3, [pc, #128]	; (8006464 <pbuf_copy+0x188>)
 80063e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80063e6:	4924      	ldr	r1, [pc, #144]	; (8006478 <pbuf_copy+0x19c>)
 80063e8:	4820      	ldr	r0, [pc, #128]	; (800646c <pbuf_copy+0x190>)
 80063ea:	f008 fbd7 	bl	800eb9c <iprintf>
 80063ee:	f06f 030f 	mvn.w	r3, #15
 80063f2:	e032      	b.n	800645a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d013      	beq.n	8006422 <pbuf_copy+0x146>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	895a      	ldrh	r2, [r3, #10]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	891b      	ldrh	r3, [r3, #8]
 8006402:	429a      	cmp	r2, r3
 8006404:	d10d      	bne.n	8006422 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <pbuf_copy+0x146>
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <pbuf_copy+0x188>)
 8006410:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006414:	4919      	ldr	r1, [pc, #100]	; (800647c <pbuf_copy+0x1a0>)
 8006416:	4815      	ldr	r0, [pc, #84]	; (800646c <pbuf_copy+0x190>)
 8006418:	f008 fbc0 	bl	800eb9c <iprintf>
 800641c:	f06f 0305 	mvn.w	r3, #5
 8006420:	e01b      	b.n	800645a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d013      	beq.n	8006450 <pbuf_copy+0x174>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	895a      	ldrh	r2, [r3, #10]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	891b      	ldrh	r3, [r3, #8]
 8006430:	429a      	cmp	r2, r3
 8006432:	d10d      	bne.n	8006450 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d009      	beq.n	8006450 <pbuf_copy+0x174>
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <pbuf_copy+0x188>)
 800643e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006442:	490e      	ldr	r1, [pc, #56]	; (800647c <pbuf_copy+0x1a0>)
 8006444:	4809      	ldr	r0, [pc, #36]	; (800646c <pbuf_copy+0x190>)
 8006446:	f008 fba9 	bl	800eb9c <iprintf>
 800644a:	f06f 0305 	mvn.w	r3, #5
 800644e:	e004      	b.n	800645a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f47f af61 	bne.w	800631a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	080100dc 	.word	0x080100dc
 8006468:	08010328 	.word	0x08010328
 800646c:	08010140 	.word	0x08010140
 8006470:	08010358 	.word	0x08010358
 8006474:	08010370 	.word	0x08010370
 8006478:	0801038c 	.word	0x0801038c
 800647c:	0801039c 	.word	0x0801039c

08006480 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	4611      	mov	r1, r2
 800648c:	461a      	mov	r2, r3
 800648e:	460b      	mov	r3, r1
 8006490:	80fb      	strh	r3, [r7, #6]
 8006492:	4613      	mov	r3, r2
 8006494:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d108      	bne.n	80064b6 <pbuf_copy_partial+0x36>
 80064a4:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <pbuf_copy_partial+0xd4>)
 80064a6:	f240 420a 	movw	r2, #1034	; 0x40a
 80064aa:	492b      	ldr	r1, [pc, #172]	; (8006558 <pbuf_copy_partial+0xd8>)
 80064ac:	482b      	ldr	r0, [pc, #172]	; (800655c <pbuf_copy_partial+0xdc>)
 80064ae:	f008 fb75 	bl	800eb9c <iprintf>
 80064b2:	2300      	movs	r3, #0
 80064b4:	e04a      	b.n	800654c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d108      	bne.n	80064ce <pbuf_copy_partial+0x4e>
 80064bc:	4b25      	ldr	r3, [pc, #148]	; (8006554 <pbuf_copy_partial+0xd4>)
 80064be:	f240 420b 	movw	r2, #1035	; 0x40b
 80064c2:	4927      	ldr	r1, [pc, #156]	; (8006560 <pbuf_copy_partial+0xe0>)
 80064c4:	4825      	ldr	r0, [pc, #148]	; (800655c <pbuf_copy_partial+0xdc>)
 80064c6:	f008 fb69 	bl	800eb9c <iprintf>
 80064ca:	2300      	movs	r3, #0
 80064cc:	e03e      	b.n	800654c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	e034      	b.n	800653e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80064d4:	88bb      	ldrh	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <pbuf_copy_partial+0x70>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	895b      	ldrh	r3, [r3, #10]
 80064de:	88ba      	ldrh	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d305      	bcc.n	80064f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	895b      	ldrh	r3, [r3, #10]
 80064e8:	88ba      	ldrh	r2, [r7, #4]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	80bb      	strh	r3, [r7, #4]
 80064ee:	e023      	b.n	8006538 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	895a      	ldrh	r2, [r3, #10]
 80064f4:	88bb      	ldrh	r3, [r7, #4]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80064fa:	8b3a      	ldrh	r2, [r7, #24]
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d901      	bls.n	8006506 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006506:	8b7b      	ldrh	r3, [r7, #26]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	18d0      	adds	r0, r2, r3
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	88bb      	ldrh	r3, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	8b3a      	ldrh	r2, [r7, #24]
 8006516:	4619      	mov	r1, r3
 8006518:	f008 fb2a 	bl	800eb70 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800651c:	8afa      	ldrh	r2, [r7, #22]
 800651e:	8b3b      	ldrh	r3, [r7, #24]
 8006520:	4413      	add	r3, r2
 8006522:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006524:	8b7a      	ldrh	r2, [r7, #26]
 8006526:	8b3b      	ldrh	r3, [r7, #24]
 8006528:	4413      	add	r3, r2
 800652a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	8b3b      	ldrh	r3, [r7, #24]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	61fb      	str	r3, [r7, #28]
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <pbuf_copy_partial+0xca>
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1c4      	bne.n	80064d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800654a:	8afb      	ldrh	r3, [r7, #22]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	080100dc 	.word	0x080100dc
 8006558:	080103c8 	.word	0x080103c8
 800655c:	08010140 	.word	0x08010140
 8006560:	080103e8 	.word	0x080103e8

08006564 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	603a      	str	r2, [r7, #0]
 800656e:	71fb      	strb	r3, [r7, #7]
 8006570:	460b      	mov	r3, r1
 8006572:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	8919      	ldrh	r1, [r3, #8]
 8006578:	88ba      	ldrh	r2, [r7, #4]
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff faf5 	bl	8005b6c <pbuf_alloc>
 8006582:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <pbuf_clone+0x2a>
    return NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	e011      	b.n	80065b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f7ff fea3 	bl	80062dc <pbuf_copy>
 8006596:	4603      	mov	r3, r0
 8006598:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800659a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <pbuf_clone+0x4c>
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <pbuf_clone+0x58>)
 80065a4:	f240 5224 	movw	r2, #1316	; 0x524
 80065a8:	4905      	ldr	r1, [pc, #20]	; (80065c0 <pbuf_clone+0x5c>)
 80065aa:	4806      	ldr	r0, [pc, #24]	; (80065c4 <pbuf_clone+0x60>)
 80065ac:	f008 faf6 	bl	800eb9c <iprintf>
  return q;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	080100dc 	.word	0x080100dc
 80065c0:	080104f4 	.word	0x080104f4
 80065c4:	08010140 	.word	0x08010140

080065c8 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80065dc:	f008 faf6 	bl	800ebcc <rand>
 80065e0:	4603      	mov	r3, r0
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	4b01      	ldr	r3, [pc, #4]	; (80065f8 <tcp_init+0x20>)
 80065f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80065f4:	bf00      	nop
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	2000000a 	.word	0x2000000a

080065fc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	7d1b      	ldrb	r3, [r3, #20]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d105      	bne.n	8006618 <tcp_free+0x1c>
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <tcp_free+0x2c>)
 800660e:	22d4      	movs	r2, #212	; 0xd4
 8006610:	4906      	ldr	r1, [pc, #24]	; (800662c <tcp_free+0x30>)
 8006612:	4807      	ldr	r0, [pc, #28]	; (8006630 <tcp_free+0x34>)
 8006614:	f008 fac2 	bl	800eb9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	2001      	movs	r0, #1
 800661c:	f7fe ff78 	bl	8005510 <memp_free>
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	08010580 	.word	0x08010580
 800662c:	080105b0 	.word	0x080105b0
 8006630:	080105c4 	.word	0x080105c4

08006634 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	7d1b      	ldrb	r3, [r3, #20]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d105      	bne.n	8006650 <tcp_free_listen+0x1c>
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <tcp_free_listen+0x2c>)
 8006646:	22df      	movs	r2, #223	; 0xdf
 8006648:	4906      	ldr	r1, [pc, #24]	; (8006664 <tcp_free_listen+0x30>)
 800664a:	4807      	ldr	r0, [pc, #28]	; (8006668 <tcp_free_listen+0x34>)
 800664c:	f008 faa6 	bl	800eb9c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	2002      	movs	r0, #2
 8006654:	f7fe ff5c 	bl	8005510 <memp_free>
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	08010580 	.word	0x08010580
 8006664:	080105ec 	.word	0x080105ec
 8006668:	080105c4 	.word	0x080105c4

0800666c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006670:	f000 fea2 	bl	80073b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006674:	4b07      	ldr	r3, [pc, #28]	; (8006694 <tcp_tmr+0x28>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <tcp_tmr+0x28>)
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <tcp_tmr+0x28>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800668c:	f000 fb54 	bl	8006d38 <tcp_slowtmr>
  }
}
 8006690:	bf00      	nop
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20000135 	.word	0x20000135

08006698 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d105      	bne.n	80066b4 <tcp_remove_listener+0x1c>
 80066a8:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <tcp_remove_listener+0x48>)
 80066aa:	22ff      	movs	r2, #255	; 0xff
 80066ac:	490d      	ldr	r1, [pc, #52]	; (80066e4 <tcp_remove_listener+0x4c>)
 80066ae:	480e      	ldr	r0, [pc, #56]	; (80066e8 <tcp_remove_listener+0x50>)
 80066b0:	f008 fa74 	bl	800eb9c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	e00a      	b.n	80066d0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d102      	bne.n	80066ca <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f1      	bne.n	80066ba <tcp_remove_listener+0x22>
    }
  }
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	08010580 	.word	0x08010580
 80066e4:	08010608 	.word	0x08010608
 80066e8:	080105c4 	.word	0x080105c4

080066ec <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d106      	bne.n	8006708 <tcp_listen_closed+0x1c>
 80066fa:	4b14      	ldr	r3, [pc, #80]	; (800674c <tcp_listen_closed+0x60>)
 80066fc:	f240 1211 	movw	r2, #273	; 0x111
 8006700:	4913      	ldr	r1, [pc, #76]	; (8006750 <tcp_listen_closed+0x64>)
 8006702:	4814      	ldr	r0, [pc, #80]	; (8006754 <tcp_listen_closed+0x68>)
 8006704:	f008 fa4a 	bl	800eb9c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7d1b      	ldrb	r3, [r3, #20]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d006      	beq.n	800671e <tcp_listen_closed+0x32>
 8006710:	4b0e      	ldr	r3, [pc, #56]	; (800674c <tcp_listen_closed+0x60>)
 8006712:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006716:	4910      	ldr	r1, [pc, #64]	; (8006758 <tcp_listen_closed+0x6c>)
 8006718:	480e      	ldr	r0, [pc, #56]	; (8006754 <tcp_listen_closed+0x68>)
 800671a:	f008 fa3f 	bl	800eb9c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800671e:	2301      	movs	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e00b      	b.n	800673c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006724:	4a0d      	ldr	r2, [pc, #52]	; (800675c <tcp_listen_closed+0x70>)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff ffb1 	bl	8006698 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b03      	cmp	r3, #3
 8006740:	d9f0      	bls.n	8006724 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	08010580 	.word	0x08010580
 8006750:	08010630 	.word	0x08010630
 8006754:	080105c4 	.word	0x080105c4
 8006758:	0801063c 	.word	0x0801063c
 800675c:	08012560 	.word	0x08012560

08006760 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006760:	b5b0      	push	{r4, r5, r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af04      	add	r7, sp, #16
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <tcp_close_shutdown+0x20>
 8006772:	4b63      	ldr	r3, [pc, #396]	; (8006900 <tcp_close_shutdown+0x1a0>)
 8006774:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006778:	4962      	ldr	r1, [pc, #392]	; (8006904 <tcp_close_shutdown+0x1a4>)
 800677a:	4863      	ldr	r0, [pc, #396]	; (8006908 <tcp_close_shutdown+0x1a8>)
 800677c:	f008 fa0e 	bl	800eb9c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d066      	beq.n	8006854 <tcp_close_shutdown+0xf4>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	7d1b      	ldrb	r3, [r3, #20]
 800678a:	2b04      	cmp	r3, #4
 800678c:	d003      	beq.n	8006796 <tcp_close_shutdown+0x36>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7d1b      	ldrb	r3, [r3, #20]
 8006792:	2b07      	cmp	r3, #7
 8006794:	d15e      	bne.n	8006854 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <tcp_close_shutdown+0x48>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80067a6:	d055      	beq.n	8006854 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8b5b      	ldrh	r3, [r3, #26]
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <tcp_close_shutdown+0x62>
 80067b4:	4b52      	ldr	r3, [pc, #328]	; (8006900 <tcp_close_shutdown+0x1a0>)
 80067b6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80067ba:	4954      	ldr	r1, [pc, #336]	; (800690c <tcp_close_shutdown+0x1ac>)
 80067bc:	4852      	ldr	r0, [pc, #328]	; (8006908 <tcp_close_shutdown+0x1a8>)
 80067be:	f008 f9ed 	bl	800eb9c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80067ca:	687d      	ldr	r5, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3304      	adds	r3, #4
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	8ad2      	ldrh	r2, [r2, #22]
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	8b09      	ldrh	r1, [r1, #24]
 80067d8:	9102      	str	r1, [sp, #8]
 80067da:	9201      	str	r2, [sp, #4]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	462b      	mov	r3, r5
 80067e0:	4622      	mov	r2, r4
 80067e2:	4601      	mov	r1, r0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f004 ff8f 	bl	800b708 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 f8f0 	bl	80079d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80067f0:	4b47      	ldr	r3, [pc, #284]	; (8006910 <tcp_close_shutdown+0x1b0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d105      	bne.n	8006806 <tcp_close_shutdown+0xa6>
 80067fa:	4b45      	ldr	r3, [pc, #276]	; (8006910 <tcp_close_shutdown+0x1b0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	4a43      	ldr	r2, [pc, #268]	; (8006910 <tcp_close_shutdown+0x1b0>)
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	e013      	b.n	800682e <tcp_close_shutdown+0xce>
 8006806:	4b42      	ldr	r3, [pc, #264]	; (8006910 <tcp_close_shutdown+0x1b0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	e00c      	b.n	8006828 <tcp_close_shutdown+0xc8>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d104      	bne.n	8006822 <tcp_close_shutdown+0xc2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	60da      	str	r2, [r3, #12]
 8006820:	e005      	b.n	800682e <tcp_close_shutdown+0xce>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1ef      	bne.n	800680e <tcp_close_shutdown+0xae>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	60da      	str	r2, [r3, #12]
 8006834:	4b37      	ldr	r3, [pc, #220]	; (8006914 <tcp_close_shutdown+0x1b4>)
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800683a:	4b37      	ldr	r3, [pc, #220]	; (8006918 <tcp_close_shutdown+0x1b8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d102      	bne.n	800684a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006844:	f003 fe10 	bl	800a468 <tcp_trigger_input_pcb_close>
 8006848:	e002      	b.n	8006850 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff fed6 	bl	80065fc <tcp_free>
      }
      return ERR_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e050      	b.n	80068f6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	7d1b      	ldrb	r3, [r3, #20]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d03b      	beq.n	80068d4 <tcp_close_shutdown+0x174>
 800685c:	2b02      	cmp	r3, #2
 800685e:	dc44      	bgt.n	80068ea <tcp_close_shutdown+0x18a>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <tcp_close_shutdown+0x10a>
 8006864:	2b01      	cmp	r3, #1
 8006866:	d02a      	beq.n	80068be <tcp_close_shutdown+0x15e>
 8006868:	e03f      	b.n	80068ea <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	8adb      	ldrh	r3, [r3, #22]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d021      	beq.n	80068b6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006872:	4b2a      	ldr	r3, [pc, #168]	; (800691c <tcp_close_shutdown+0x1bc>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d105      	bne.n	8006888 <tcp_close_shutdown+0x128>
 800687c:	4b27      	ldr	r3, [pc, #156]	; (800691c <tcp_close_shutdown+0x1bc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	4a26      	ldr	r2, [pc, #152]	; (800691c <tcp_close_shutdown+0x1bc>)
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	e013      	b.n	80068b0 <tcp_close_shutdown+0x150>
 8006888:	4b24      	ldr	r3, [pc, #144]	; (800691c <tcp_close_shutdown+0x1bc>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	e00c      	b.n	80068aa <tcp_close_shutdown+0x14a>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d104      	bne.n	80068a4 <tcp_close_shutdown+0x144>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	e005      	b.n	80068b0 <tcp_close_shutdown+0x150>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	60bb      	str	r3, [r7, #8]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1ef      	bne.n	8006890 <tcp_close_shutdown+0x130>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fea0 	bl	80065fc <tcp_free>
      break;
 80068bc:	e01a      	b.n	80068f4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff ff14 	bl	80066ec <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4816      	ldr	r0, [pc, #88]	; (8006920 <tcp_close_shutdown+0x1c0>)
 80068c8:	f001 f8d2 	bl	8007a70 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff feb1 	bl	8006634 <tcp_free_listen>
      break;
 80068d2:	e00f      	b.n	80068f4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	480e      	ldr	r0, [pc, #56]	; (8006910 <tcp_close_shutdown+0x1b0>)
 80068d8:	f001 f8ca 	bl	8007a70 <tcp_pcb_remove>
 80068dc:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <tcp_close_shutdown+0x1b4>)
 80068de:	2201      	movs	r2, #1
 80068e0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fe8a 	bl	80065fc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80068e8:	e004      	b.n	80068f4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f81a 	bl	8006924 <tcp_close_shutdown_fin>
 80068f0:	4603      	mov	r3, r0
 80068f2:	e000      	b.n	80068f6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bdb0      	pop	{r4, r5, r7, pc}
 80068fe:	bf00      	nop
 8006900:	08010580 	.word	0x08010580
 8006904:	08010654 	.word	0x08010654
 8006908:	080105c4 	.word	0x080105c4
 800690c:	08010674 	.word	0x08010674
 8006910:	20007688 	.word	0x20007688
 8006914:	20007684 	.word	0x20007684
 8006918:	2000769c 	.word	0x2000769c
 800691c:	20007694 	.word	0x20007694
 8006920:	20007690 	.word	0x20007690

08006924 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <tcp_close_shutdown_fin+0x1c>
 8006932:	4b2e      	ldr	r3, [pc, #184]	; (80069ec <tcp_close_shutdown_fin+0xc8>)
 8006934:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006938:	492d      	ldr	r1, [pc, #180]	; (80069f0 <tcp_close_shutdown_fin+0xcc>)
 800693a:	482e      	ldr	r0, [pc, #184]	; (80069f4 <tcp_close_shutdown_fin+0xd0>)
 800693c:	f008 f92e 	bl	800eb9c <iprintf>

  switch (pcb->state) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7d1b      	ldrb	r3, [r3, #20]
 8006944:	2b07      	cmp	r3, #7
 8006946:	d020      	beq.n	800698a <tcp_close_shutdown_fin+0x66>
 8006948:	2b07      	cmp	r3, #7
 800694a:	dc2b      	bgt.n	80069a4 <tcp_close_shutdown_fin+0x80>
 800694c:	2b03      	cmp	r3, #3
 800694e:	d002      	beq.n	8006956 <tcp_close_shutdown_fin+0x32>
 8006950:	2b04      	cmp	r3, #4
 8006952:	d00d      	beq.n	8006970 <tcp_close_shutdown_fin+0x4c>
 8006954:	e026      	b.n	80069a4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f003 ffac 	bl	800a8b4 <tcp_send_fin>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11f      	bne.n	80069a8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2205      	movs	r2, #5
 800696c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800696e:	e01b      	b.n	80069a8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f003 ff9f 	bl	800a8b4 <tcp_send_fin>
 8006976:	4603      	mov	r3, r0
 8006978:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800697a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d114      	bne.n	80069ac <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2205      	movs	r2, #5
 8006986:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006988:	e010      	b.n	80069ac <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f003 ff92 	bl	800a8b4 <tcp_send_fin>
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2209      	movs	r2, #9
 80069a0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80069a2:	e005      	b.n	80069b0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e01c      	b.n	80069e2 <tcp_close_shutdown_fin+0xbe>
      break;
 80069a8:	bf00      	nop
 80069aa:	e002      	b.n	80069b2 <tcp_close_shutdown_fin+0x8e>
      break;
 80069ac:	bf00      	nop
 80069ae:	e000      	b.n	80069b2 <tcp_close_shutdown_fin+0x8e>
      break;
 80069b0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d103      	bne.n	80069c2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f004 f8ba 	bl	800ab34 <tcp_output>
 80069c0:	e00d      	b.n	80069de <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80069c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d108      	bne.n	80069de <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8b5b      	ldrh	r3, [r3, #26]
 80069d0:	f043 0308 	orr.w	r3, r3, #8
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e001      	b.n	80069e2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80069de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	08010580 	.word	0x08010580
 80069f0:	08010630 	.word	0x08010630
 80069f4:	080105c4 	.word	0x080105c4

080069f8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <tcp_close+0x22>
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <tcp_close+0x4c>)
 8006a08:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006a0c:	490e      	ldr	r1, [pc, #56]	; (8006a48 <tcp_close+0x50>)
 8006a0e:	480f      	ldr	r0, [pc, #60]	; (8006a4c <tcp_close+0x54>)
 8006a10:	f008 f8c4 	bl	800eb9c <iprintf>
 8006a14:	f06f 030f 	mvn.w	r3, #15
 8006a18:	e00f      	b.n	8006a3a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	7d1b      	ldrb	r3, [r3, #20]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d006      	beq.n	8006a30 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8b5b      	ldrh	r3, [r3, #26]
 8006a26:	f043 0310 	orr.w	r3, r3, #16
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006a30:	2101      	movs	r1, #1
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fe94 	bl	8006760 <tcp_close_shutdown>
 8006a38:	4603      	mov	r3, r0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	08010580 	.word	0x08010580
 8006a48:	08010690 	.word	0x08010690
 8006a4c:	080105c4 	.word	0x080105c4

08006a50 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af04      	add	r7, sp, #16
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d107      	bne.n	8006a70 <tcp_abandon+0x20>
 8006a60:	4b52      	ldr	r3, [pc, #328]	; (8006bac <tcp_abandon+0x15c>)
 8006a62:	f240 223d 	movw	r2, #573	; 0x23d
 8006a66:	4952      	ldr	r1, [pc, #328]	; (8006bb0 <tcp_abandon+0x160>)
 8006a68:	4852      	ldr	r0, [pc, #328]	; (8006bb4 <tcp_abandon+0x164>)
 8006a6a:	f008 f897 	bl	800eb9c <iprintf>
 8006a6e:	e099      	b.n	8006ba4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7d1b      	ldrb	r3, [r3, #20]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d106      	bne.n	8006a86 <tcp_abandon+0x36>
 8006a78:	4b4c      	ldr	r3, [pc, #304]	; (8006bac <tcp_abandon+0x15c>)
 8006a7a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006a7e:	494e      	ldr	r1, [pc, #312]	; (8006bb8 <tcp_abandon+0x168>)
 8006a80:	484c      	ldr	r0, [pc, #304]	; (8006bb4 <tcp_abandon+0x164>)
 8006a82:	f008 f88b 	bl	800eb9c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	7d1b      	ldrb	r3, [r3, #20]
 8006a8a:	2b0a      	cmp	r3, #10
 8006a8c:	d107      	bne.n	8006a9e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006a8e:	6879      	ldr	r1, [r7, #4]
 8006a90:	484a      	ldr	r0, [pc, #296]	; (8006bbc <tcp_abandon+0x16c>)
 8006a92:	f000 ffed 	bl	8007a70 <tcp_pcb_remove>
    tcp_free(pcb);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7ff fdb0 	bl	80065fc <tcp_free>
 8006a9c:	e082      	b.n	8006ba4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aaa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	7d1b      	ldrb	r3, [r3, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d126      	bne.n	8006b16 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8adb      	ldrh	r3, [r3, #22]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d02e      	beq.n	8006b2e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ad0:	4b3b      	ldr	r3, [pc, #236]	; (8006bc0 <tcp_abandon+0x170>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d105      	bne.n	8006ae6 <tcp_abandon+0x96>
 8006ada:	4b39      	ldr	r3, [pc, #228]	; (8006bc0 <tcp_abandon+0x170>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	4a37      	ldr	r2, [pc, #220]	; (8006bc0 <tcp_abandon+0x170>)
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	e013      	b.n	8006b0e <tcp_abandon+0xbe>
 8006ae6:	4b36      	ldr	r3, [pc, #216]	; (8006bc0 <tcp_abandon+0x170>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	e00c      	b.n	8006b08 <tcp_abandon+0xb8>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d104      	bne.n	8006b02 <tcp_abandon+0xb2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	60da      	str	r2, [r3, #12]
 8006b00:	e005      	b.n	8006b0e <tcp_abandon+0xbe>
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1ef      	bne.n	8006aee <tcp_abandon+0x9e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	60da      	str	r2, [r3, #12]
 8006b14:	e00b      	b.n	8006b2e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	8adb      	ldrh	r3, [r3, #22]
 8006b1e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	4828      	ldr	r0, [pc, #160]	; (8006bc4 <tcp_abandon+0x174>)
 8006b24:	f000 ffa4 	bl	8007a70 <tcp_pcb_remove>
 8006b28:	4b27      	ldr	r3, [pc, #156]	; (8006bc8 <tcp_abandon+0x178>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fd1c 	bl	8007578 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fd13 	bl	8007578 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fd0a 	bl	8007578 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00e      	beq.n	8006b88 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	8b12      	ldrh	r2, [r2, #24]
 8006b74:	9202      	str	r2, [sp, #8]
 8006b76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b78:	9201      	str	r2, [sp, #4]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	69b9      	ldr	r1, [r7, #24]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f004 fdc0 	bl	800b708 <tcp_rst>
    }
    last_state = pcb->state;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	7d1b      	ldrb	r3, [r3, #20]
 8006b8c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7ff fd34 	bl	80065fc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <tcp_abandon+0x154>
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f06f 010c 	mvn.w	r1, #12
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	4798      	blx	r3
  }
}
 8006ba4:	3728      	adds	r7, #40	; 0x28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	08010580 	.word	0x08010580
 8006bb0:	080106c4 	.word	0x080106c4
 8006bb4:	080105c4 	.word	0x080105c4
 8006bb8:	080106e0 	.word	0x080106e0
 8006bbc:	20007698 	.word	0x20007698
 8006bc0:	20007694 	.word	0x20007694
 8006bc4:	20007688 	.word	0x20007688
 8006bc8:	20007684 	.word	0x20007684

08006bcc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7ff ff3a 	bl	8006a50 <tcp_abandon>
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <tcp_update_rcv_ann_wnd+0x1c>
 8006bf2:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <tcp_update_rcv_ann_wnd+0xa4>)
 8006bf4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006bf8:	4924      	ldr	r1, [pc, #144]	; (8006c8c <tcp_update_rcv_ann_wnd+0xa8>)
 8006bfa:	4825      	ldr	r0, [pc, #148]	; (8006c90 <tcp_update_rcv_ann_wnd+0xac>)
 8006bfc:	f007 ffce 	bl	800eb9c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006c08:	4413      	add	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006c14:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006c18:	bf28      	it	cs
 8006c1a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006c1e:	b292      	uxth	r2, r2
 8006c20:	4413      	add	r3, r2
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	db08      	blt.n	8006c3c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	e020      	b.n	8006c7e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dd03      	ble.n	8006c52 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c50:	e014      	b.n	8006c7c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d306      	bcc.n	8006c74 <tcp_update_rcv_ann_wnd+0x90>
 8006c66:	4b08      	ldr	r3, [pc, #32]	; (8006c88 <tcp_update_rcv_ann_wnd+0xa4>)
 8006c68:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006c6c:	4909      	ldr	r1, [pc, #36]	; (8006c94 <tcp_update_rcv_ann_wnd+0xb0>)
 8006c6e:	4808      	ldr	r0, [pc, #32]	; (8006c90 <tcp_update_rcv_ann_wnd+0xac>)
 8006c70:	f007 ff94 	bl	800eb9c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006c7c:	2300      	movs	r3, #0
  }
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	08010580 	.word	0x08010580
 8006c8c:	080107dc 	.word	0x080107dc
 8006c90:	080105c4 	.word	0x080105c4
 8006c94:	08010800 	.word	0x08010800

08006c98 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d107      	bne.n	8006cba <tcp_recved+0x22>
 8006caa:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <tcp_recved+0x90>)
 8006cac:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006cb0:	491e      	ldr	r1, [pc, #120]	; (8006d2c <tcp_recved+0x94>)
 8006cb2:	481f      	ldr	r0, [pc, #124]	; (8006d30 <tcp_recved+0x98>)
 8006cb4:	f007 ff72 	bl	800eb9c <iprintf>
 8006cb8:	e032      	b.n	8006d20 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	7d1b      	ldrb	r3, [r3, #20]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d106      	bne.n	8006cd0 <tcp_recved+0x38>
 8006cc2:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <tcp_recved+0x90>)
 8006cc4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006cc8:	491a      	ldr	r1, [pc, #104]	; (8006d34 <tcp_recved+0x9c>)
 8006cca:	4819      	ldr	r0, [pc, #100]	; (8006d30 <tcp_recved+0x98>)
 8006ccc:	f007 ff66 	bl	800eb9c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006cd4:	887b      	ldrh	r3, [r7, #2]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006cda:	89fb      	ldrh	r3, [r7, #14]
 8006cdc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ce0:	d804      	bhi.n	8006cec <tcp_recved+0x54>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce6:	89fa      	ldrh	r2, [r7, #14]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d204      	bcs.n	8006cf6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006cf2:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cf4:	e002      	b.n	8006cfc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	89fa      	ldrh	r2, [r7, #14]
 8006cfa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff ff71 	bl	8006be4 <tcp_update_rcv_ann_wnd>
 8006d02:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006d0a:	d309      	bcc.n	8006d20 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8b5b      	ldrh	r3, [r3, #26]
 8006d10:	f043 0302 	orr.w	r3, r3, #2
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f003 ff0a 	bl	800ab34 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	08010580 	.word	0x08010580
 8006d2c:	0801081c 	.word	0x0801081c
 8006d30:	080105c4 	.word	0x080105c4
 8006d34:	08010834 	.word	0x08010834

08006d38 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006d38:	b5b0      	push	{r4, r5, r7, lr}
 8006d3a:	b090      	sub	sp, #64	; 0x40
 8006d3c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006d44:	4b94      	ldr	r3, [pc, #592]	; (8006f98 <tcp_slowtmr+0x260>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	4a93      	ldr	r2, [pc, #588]	; (8006f98 <tcp_slowtmr+0x260>)
 8006d4c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006d4e:	4b93      	ldr	r3, [pc, #588]	; (8006f9c <tcp_slowtmr+0x264>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	4b91      	ldr	r3, [pc, #580]	; (8006f9c <tcp_slowtmr+0x264>)
 8006d58:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006d5e:	4b90      	ldr	r3, [pc, #576]	; (8006fa0 <tcp_slowtmr+0x268>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006d64:	e29d      	b.n	80072a2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	7d1b      	ldrb	r3, [r3, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <tcp_slowtmr+0x44>
 8006d6e:	4b8d      	ldr	r3, [pc, #564]	; (8006fa4 <tcp_slowtmr+0x26c>)
 8006d70:	f240 42be 	movw	r2, #1214	; 0x4be
 8006d74:	498c      	ldr	r1, [pc, #560]	; (8006fa8 <tcp_slowtmr+0x270>)
 8006d76:	488d      	ldr	r0, [pc, #564]	; (8006fac <tcp_slowtmr+0x274>)
 8006d78:	f007 ff10 	bl	800eb9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	7d1b      	ldrb	r3, [r3, #20]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <tcp_slowtmr+0x5a>
 8006d84:	4b87      	ldr	r3, [pc, #540]	; (8006fa4 <tcp_slowtmr+0x26c>)
 8006d86:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006d8a:	4989      	ldr	r1, [pc, #548]	; (8006fb0 <tcp_slowtmr+0x278>)
 8006d8c:	4887      	ldr	r0, [pc, #540]	; (8006fac <tcp_slowtmr+0x274>)
 8006d8e:	f007 ff05 	bl	800eb9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	7d1b      	ldrb	r3, [r3, #20]
 8006d96:	2b0a      	cmp	r3, #10
 8006d98:	d106      	bne.n	8006da8 <tcp_slowtmr+0x70>
 8006d9a:	4b82      	ldr	r3, [pc, #520]	; (8006fa4 <tcp_slowtmr+0x26c>)
 8006d9c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006da0:	4984      	ldr	r1, [pc, #528]	; (8006fb4 <tcp_slowtmr+0x27c>)
 8006da2:	4882      	ldr	r0, [pc, #520]	; (8006fac <tcp_slowtmr+0x274>)
 8006da4:	f007 fefa 	bl	800eb9c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006daa:	7f9a      	ldrb	r2, [r3, #30]
 8006dac:	4b7b      	ldr	r3, [pc, #492]	; (8006f9c <tcp_slowtmr+0x264>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d105      	bne.n	8006dc0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006dbe:	e270      	b.n	80072a2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006dc0:	4b76      	ldr	r3, [pc, #472]	; (8006f9c <tcp_slowtmr+0x264>)
 8006dc2:	781a      	ldrb	r2, [r3, #0]
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	7d1b      	ldrb	r3, [r3, #20]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d10a      	bne.n	8006df2 <tcp_slowtmr+0xba>
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d905      	bls.n	8006df2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dea:	3301      	adds	r3, #1
 8006dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006df0:	e11e      	b.n	8007030 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006df8:	2b0b      	cmp	r3, #11
 8006dfa:	d905      	bls.n	8006e08 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e00:	3301      	adds	r3, #1
 8006e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e06:	e113      	b.n	8007030 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d075      	beq.n	8006efe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d006      	beq.n	8006e28 <tcp_slowtmr+0xf0>
 8006e1a:	4b62      	ldr	r3, [pc, #392]	; (8006fa4 <tcp_slowtmr+0x26c>)
 8006e1c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006e20:	4965      	ldr	r1, [pc, #404]	; (8006fb8 <tcp_slowtmr+0x280>)
 8006e22:	4862      	ldr	r0, [pc, #392]	; (8006fac <tcp_slowtmr+0x274>)
 8006e24:	f007 feba 	bl	800eb9c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <tcp_slowtmr+0x106>
 8006e30:	4b5c      	ldr	r3, [pc, #368]	; (8006fa4 <tcp_slowtmr+0x26c>)
 8006e32:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006e36:	4961      	ldr	r1, [pc, #388]	; (8006fbc <tcp_slowtmr+0x284>)
 8006e38:	485c      	ldr	r0, [pc, #368]	; (8006fac <tcp_slowtmr+0x274>)
 8006e3a:	f007 feaf 	bl	800eb9c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006e44:	2b0b      	cmp	r3, #11
 8006e46:	d905      	bls.n	8006e54 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e52:	e0ed      	b.n	8007030 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	4a58      	ldr	r2, [pc, #352]	; (8006fc0 <tcp_slowtmr+0x288>)
 8006e5e:	5cd3      	ldrb	r3, [r2, r3]
 8006e60:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e68:	7c7a      	ldrb	r2, [r7, #17]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d907      	bls.n	8006e7e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e74:	3301      	adds	r3, #1
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e84:	7c7a      	ldrb	r2, [r7, #17]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	f200 80d2 	bhi.w	8007030 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d108      	bne.n	8006eac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e9c:	f004 fd28 	bl	800b8f0 <tcp_zero_window_probe>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d014      	beq.n	8006ed0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	e011      	b.n	8006ed0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eb6:	f003 fbab 	bl	800a610 <tcp_split_unsent_seg>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d107      	bne.n	8006ed0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006ec0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ec2:	f003 fe37 	bl	800ab34 <tcp_output>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80ac 	beq.w	8007030 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006ee6:	2b06      	cmp	r3, #6
 8006ee8:	f200 80a2 	bhi.w	8007030 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006efc:	e098      	b.n	8007030 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db0f      	blt.n	8006f28 <tcp_slowtmr+0x1f0>
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006f0e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d008      	beq.n	8006f28 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3301      	adds	r3, #1
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	b21a      	sxth	r2, r3
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006f34:	429a      	cmp	r2, r3
 8006f36:	db7b      	blt.n	8007030 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f3a:	f004 f909 	bl	800b150 <tcp_rexmit_rto_prepare>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <tcp_slowtmr+0x21c>
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d171      	bne.n	8007030 <tcp_slowtmr+0x2f8>
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d06d      	beq.n	8007030 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	7d1b      	ldrb	r3, [r3, #20]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d03a      	beq.n	8006fd2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f62:	2b0c      	cmp	r3, #12
 8006f64:	bf28      	it	cs
 8006f66:	230c      	movcs	r3, #12
 8006f68:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006f70:	10db      	asrs	r3, r3, #3
 8006f72:	b21b      	sxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006f7c:	4413      	add	r3, r2
 8006f7e:	7efa      	ldrb	r2, [r7, #27]
 8006f80:	4910      	ldr	r1, [pc, #64]	; (8006fc4 <tcp_slowtmr+0x28c>)
 8006f82:	5c8a      	ldrb	r2, [r1, r2]
 8006f84:	4093      	lsls	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	dc1a      	bgt.n	8006fc8 <tcp_slowtmr+0x290>
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	b21a      	sxth	r2, r3
 8006f96:	e019      	b.n	8006fcc <tcp_slowtmr+0x294>
 8006f98:	2000768c 	.word	0x2000768c
 8006f9c:	20000136 	.word	0x20000136
 8006fa0:	20007688 	.word	0x20007688
 8006fa4:	08010580 	.word	0x08010580
 8006fa8:	080108c4 	.word	0x080108c4
 8006fac:	080105c4 	.word	0x080105c4
 8006fb0:	080108f0 	.word	0x080108f0
 8006fb4:	0801091c 	.word	0x0801091c
 8006fb8:	0801094c 	.word	0x0801094c
 8006fbc:	08010980 	.word	0x08010980
 8006fc0:	08012558 	.word	0x08012558
 8006fc4:	08012548 	.word	0x08012548
 8006fc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bf28      	it	cs
 8006fe8:	4613      	movcs	r3, r2
 8006fea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006fec:	8a7b      	ldrh	r3, [r7, #18]
 8006fee:	085b      	lsrs	r3, r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	b29b      	uxth	r3, r3
 8007006:	429a      	cmp	r2, r3
 8007008:	d206      	bcs.n	8007018 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2200      	movs	r2, #0
 8007026:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800702a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800702c:	f004 f900 	bl	800b230 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	7d1b      	ldrb	r3, [r3, #20]
 8007034:	2b06      	cmp	r3, #6
 8007036:	d111      	bne.n	800705c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	8b5b      	ldrh	r3, [r3, #26]
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007044:	4b9c      	ldr	r3, [pc, #624]	; (80072b8 <tcp_slowtmr+0x580>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b28      	cmp	r3, #40	; 0x28
 8007050:	d904      	bls.n	800705c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007056:	3301      	adds	r3, #1
 8007058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	7a5b      	ldrb	r3, [r3, #9]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d04a      	beq.n	80070fe <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800706c:	2b04      	cmp	r3, #4
 800706e:	d003      	beq.n	8007078 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007074:	2b07      	cmp	r3, #7
 8007076:	d142      	bne.n	80070fe <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007078:	4b8f      	ldr	r3, [pc, #572]	; (80072b8 <tcp_slowtmr+0x580>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007088:	4b8c      	ldr	r3, [pc, #560]	; (80072bc <tcp_slowtmr+0x584>)
 800708a:	440b      	add	r3, r1
 800708c:	498c      	ldr	r1, [pc, #560]	; (80072c0 <tcp_slowtmr+0x588>)
 800708e:	fba1 1303 	umull	r1, r3, r1, r3
 8007092:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007094:	429a      	cmp	r2, r3
 8007096:	d90a      	bls.n	80070ae <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800709c:	3301      	adds	r3, #1
 800709e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80070a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070a6:	3301      	adds	r3, #1
 80070a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80070ac:	e027      	b.n	80070fe <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80070ae:	4b82      	ldr	r3, [pc, #520]	; (80072b8 <tcp_slowtmr+0x580>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80070c4:	4618      	mov	r0, r3
 80070c6:	4b7f      	ldr	r3, [pc, #508]	; (80072c4 <tcp_slowtmr+0x58c>)
 80070c8:	fb03 f300 	mul.w	r3, r3, r0
 80070cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80070ce:	497c      	ldr	r1, [pc, #496]	; (80072c0 <tcp_slowtmr+0x588>)
 80070d0:	fba1 1303 	umull	r1, r3, r1, r3
 80070d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d911      	bls.n	80070fe <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80070da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070dc:	f004 fbc8 	bl	800b870 <tcp_keepalive>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80070e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d107      	bne.n	80070fe <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80070f4:	3301      	adds	r3, #1
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007102:	2b00      	cmp	r3, #0
 8007104:	d011      	beq.n	800712a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007106:	4b6c      	ldr	r3, [pc, #432]	; (80072b8 <tcp_slowtmr+0x580>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007116:	4619      	mov	r1, r3
 8007118:	460b      	mov	r3, r1
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	440b      	add	r3, r1
 800711e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007120:	429a      	cmp	r2, r3
 8007122:	d302      	bcc.n	800712a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007124:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007126:	f000 fe07 	bl	8007d38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	7d1b      	ldrb	r3, [r3, #20]
 800712e:	2b03      	cmp	r3, #3
 8007130:	d10b      	bne.n	800714a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007132:	4b61      	ldr	r3, [pc, #388]	; (80072b8 <tcp_slowtmr+0x580>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b28      	cmp	r3, #40	; 0x28
 800713e:	d904      	bls.n	800714a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007144:	3301      	adds	r3, #1
 8007146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	7d1b      	ldrb	r3, [r3, #20]
 800714e:	2b09      	cmp	r3, #9
 8007150:	d10b      	bne.n	800716a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007152:	4b59      	ldr	r3, [pc, #356]	; (80072b8 <tcp_slowtmr+0x580>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2bf0      	cmp	r3, #240	; 0xf0
 800715e:	d904      	bls.n	800716a <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007164:	3301      	adds	r3, #1
 8007166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800716a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800716e:	2b00      	cmp	r3, #0
 8007170:	d060      	beq.n	8007234 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007178:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800717a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800717c:	f000 fc28 	bl	80079d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d010      	beq.n	80071a8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007186:	4b50      	ldr	r3, [pc, #320]	; (80072c8 <tcp_slowtmr+0x590>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718c:	429a      	cmp	r2, r3
 800718e:	d106      	bne.n	800719e <tcp_slowtmr+0x466>
 8007190:	4b4e      	ldr	r3, [pc, #312]	; (80072cc <tcp_slowtmr+0x594>)
 8007192:	f240 526d 	movw	r2, #1389	; 0x56d
 8007196:	494e      	ldr	r1, [pc, #312]	; (80072d0 <tcp_slowtmr+0x598>)
 8007198:	484e      	ldr	r0, [pc, #312]	; (80072d4 <tcp_slowtmr+0x59c>)
 800719a:	f007 fcff 	bl	800eb9c <iprintf>
        prev->next = pcb->next;
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	e00f      	b.n	80071c8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80071a8:	4b47      	ldr	r3, [pc, #284]	; (80072c8 <tcp_slowtmr+0x590>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d006      	beq.n	80071c0 <tcp_slowtmr+0x488>
 80071b2:	4b46      	ldr	r3, [pc, #280]	; (80072cc <tcp_slowtmr+0x594>)
 80071b4:	f240 5271 	movw	r2, #1393	; 0x571
 80071b8:	4947      	ldr	r1, [pc, #284]	; (80072d8 <tcp_slowtmr+0x5a0>)
 80071ba:	4846      	ldr	r0, [pc, #280]	; (80072d4 <tcp_slowtmr+0x59c>)
 80071bc:	f007 fcee 	bl	800eb9c <iprintf>
        tcp_active_pcbs = pcb->next;
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4a40      	ldr	r2, [pc, #256]	; (80072c8 <tcp_slowtmr+0x590>)
 80071c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80071c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d013      	beq.n	80071f8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80071d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	3304      	adds	r3, #4
 80071de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e0:	8ad2      	ldrh	r2, [r2, #22]
 80071e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e4:	8b09      	ldrh	r1, [r1, #24]
 80071e6:	9102      	str	r1, [sp, #8]
 80071e8:	9201      	str	r2, [sp, #4]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	462b      	mov	r3, r5
 80071ee:	4622      	mov	r2, r4
 80071f0:	4601      	mov	r1, r0
 80071f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071f4:	f004 fa88 	bl	800b708 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	7d1b      	ldrb	r3, [r3, #20]
 8007202:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800720e:	6838      	ldr	r0, [r7, #0]
 8007210:	f7ff f9f4 	bl	80065fc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007214:	4b31      	ldr	r3, [pc, #196]	; (80072dc <tcp_slowtmr+0x5a4>)
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <tcp_slowtmr+0x4f2>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f06f 010c 	mvn.w	r1, #12
 8007226:	68b8      	ldr	r0, [r7, #8]
 8007228:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800722a:	4b2c      	ldr	r3, [pc, #176]	; (80072dc <tcp_slowtmr+0x5a4>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d037      	beq.n	80072a2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007232:	e592      	b.n	8006d5a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	7f1b      	ldrb	r3, [r3, #28]
 8007242:	3301      	adds	r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	7f1a      	ldrb	r2, [r3, #28]
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	7f5b      	ldrb	r3, [r3, #29]
 8007252:	429a      	cmp	r2, r3
 8007254:	d325      	bcc.n	80072a2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	2200      	movs	r2, #0
 800725a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800725c:	4b1f      	ldr	r3, [pc, #124]	; (80072dc <tcp_slowtmr+0x5a4>)
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <tcp_slowtmr+0x54c>
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007274:	6912      	ldr	r2, [r2, #16]
 8007276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
 800727c:	4603      	mov	r3, r0
 800727e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007282:	e002      	b.n	800728a <tcp_slowtmr+0x552>
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800728a:	4b14      	ldr	r3, [pc, #80]	; (80072dc <tcp_slowtmr+0x5a4>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d000      	beq.n	8007294 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007292:	e562      	b.n	8006d5a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007294:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800729c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800729e:	f003 fc49 	bl	800ab34 <tcp_output>
  while (pcb != NULL) {
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f47f ad5e 	bne.w	8006d66 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80072ae:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <tcp_slowtmr+0x5a8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80072b4:	e069      	b.n	800738a <tcp_slowtmr+0x652>
 80072b6:	bf00      	nop
 80072b8:	2000768c 	.word	0x2000768c
 80072bc:	000a4cb8 	.word	0x000a4cb8
 80072c0:	10624dd3 	.word	0x10624dd3
 80072c4:	000124f8 	.word	0x000124f8
 80072c8:	20007688 	.word	0x20007688
 80072cc:	08010580 	.word	0x08010580
 80072d0:	080109b8 	.word	0x080109b8
 80072d4:	080105c4 	.word	0x080105c4
 80072d8:	080109e4 	.word	0x080109e4
 80072dc:	20007684 	.word	0x20007684
 80072e0:	20007698 	.word	0x20007698
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	7d1b      	ldrb	r3, [r3, #20]
 80072e8:	2b0a      	cmp	r3, #10
 80072ea:	d006      	beq.n	80072fa <tcp_slowtmr+0x5c2>
 80072ec:	4b2b      	ldr	r3, [pc, #172]	; (800739c <tcp_slowtmr+0x664>)
 80072ee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80072f2:	492b      	ldr	r1, [pc, #172]	; (80073a0 <tcp_slowtmr+0x668>)
 80072f4:	482b      	ldr	r0, [pc, #172]	; (80073a4 <tcp_slowtmr+0x66c>)
 80072f6:	f007 fc51 	bl	800eb9c <iprintf>
    pcb_remove = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007300:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <tcp_slowtmr+0x670>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2bf0      	cmp	r3, #240	; 0xf0
 800730c:	d904      	bls.n	8007318 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800730e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007312:	3301      	adds	r3, #1
 8007314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800731c:	2b00      	cmp	r3, #0
 800731e:	d02f      	beq.n	8007380 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007320:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007322:	f000 fb55 	bl	80079d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d010      	beq.n	800734e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800732c:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <tcp_slowtmr+0x674>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007332:	429a      	cmp	r2, r3
 8007334:	d106      	bne.n	8007344 <tcp_slowtmr+0x60c>
 8007336:	4b19      	ldr	r3, [pc, #100]	; (800739c <tcp_slowtmr+0x664>)
 8007338:	f240 52af 	movw	r2, #1455	; 0x5af
 800733c:	491c      	ldr	r1, [pc, #112]	; (80073b0 <tcp_slowtmr+0x678>)
 800733e:	4819      	ldr	r0, [pc, #100]	; (80073a4 <tcp_slowtmr+0x66c>)
 8007340:	f007 fc2c 	bl	800eb9c <iprintf>
        prev->next = pcb->next;
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	60da      	str	r2, [r3, #12]
 800734c:	e00f      	b.n	800736e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800734e:	4b17      	ldr	r3, [pc, #92]	; (80073ac <tcp_slowtmr+0x674>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d006      	beq.n	8007366 <tcp_slowtmr+0x62e>
 8007358:	4b10      	ldr	r3, [pc, #64]	; (800739c <tcp_slowtmr+0x664>)
 800735a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800735e:	4915      	ldr	r1, [pc, #84]	; (80073b4 <tcp_slowtmr+0x67c>)
 8007360:	4810      	ldr	r0, [pc, #64]	; (80073a4 <tcp_slowtmr+0x66c>)
 8007362:	f007 fc1b 	bl	800eb9c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	4a10      	ldr	r2, [pc, #64]	; (80073ac <tcp_slowtmr+0x674>)
 800736c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007378:	69f8      	ldr	r0, [r7, #28]
 800737a:	f7ff f93f 	bl	80065fc <tcp_free>
 800737e:	e004      	b.n	800738a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1a9      	bne.n	80072e4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	3730      	adds	r7, #48	; 0x30
 8007396:	46bd      	mov	sp, r7
 8007398:	bdb0      	pop	{r4, r5, r7, pc}
 800739a:	bf00      	nop
 800739c:	08010580 	.word	0x08010580
 80073a0:	08010a10 	.word	0x08010a10
 80073a4:	080105c4 	.word	0x080105c4
 80073a8:	2000768c 	.word	0x2000768c
 80073ac:	20007698 	.word	0x20007698
 80073b0:	08010a40 	.word	0x08010a40
 80073b4:	08010a68 	.word	0x08010a68

080073b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80073be:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <tcp_fasttmr+0xbc>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	3301      	adds	r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	4b2b      	ldr	r3, [pc, #172]	; (8007474 <tcp_fasttmr+0xbc>)
 80073c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80073ca:	4b2b      	ldr	r3, [pc, #172]	; (8007478 <tcp_fasttmr+0xc0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80073d0:	e048      	b.n	8007464 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	7f9a      	ldrb	r2, [r3, #30]
 80073d6:	4b27      	ldr	r3, [pc, #156]	; (8007474 <tcp_fasttmr+0xbc>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d03f      	beq.n	800745e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80073de:	4b25      	ldr	r3, [pc, #148]	; (8007474 <tcp_fasttmr+0xbc>)
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8b5b      	ldrh	r3, [r3, #26]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d010      	beq.n	8007414 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	8b5b      	ldrh	r3, [r3, #26]
 80073f6:	f043 0302 	orr.w	r3, r3, #2
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f003 fb97 	bl	800ab34 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	8b5b      	ldrh	r3, [r3, #26]
 800740a:	f023 0303 	bic.w	r3, r3, #3
 800740e:	b29a      	uxth	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8b5b      	ldrh	r3, [r3, #26]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d009      	beq.n	8007434 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8b5b      	ldrh	r3, [r3, #26]
 8007424:	f023 0308 	bic.w	r3, r3, #8
 8007428:	b29a      	uxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff fa78 	bl	8006924 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007442:	4b0e      	ldr	r3, [pc, #56]	; (800747c <tcp_fasttmr+0xc4>)
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f819 	bl	8007480 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800744e:	4b0b      	ldr	r3, [pc, #44]	; (800747c <tcp_fasttmr+0xc4>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d000      	beq.n	8007458 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007456:	e7b8      	b.n	80073ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	e002      	b.n	8007464 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1b3      	bne.n	80073d2 <tcp_fasttmr+0x1a>
    }
  }
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	20000136 	.word	0x20000136
 8007478:	20007688 	.word	0x20007688
 800747c:	20007684 	.word	0x20007684

08007480 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d109      	bne.n	80074a2 <tcp_process_refused_data+0x22>
 800748e:	4b37      	ldr	r3, [pc, #220]	; (800756c <tcp_process_refused_data+0xec>)
 8007490:	f240 6209 	movw	r2, #1545	; 0x609
 8007494:	4936      	ldr	r1, [pc, #216]	; (8007570 <tcp_process_refused_data+0xf0>)
 8007496:	4837      	ldr	r0, [pc, #220]	; (8007574 <tcp_process_refused_data+0xf4>)
 8007498:	f007 fb80 	bl	800eb9c <iprintf>
 800749c:	f06f 030f 	mvn.w	r3, #15
 80074a0:	e060      	b.n	8007564 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074a6:	7b5b      	ldrb	r3, [r3, #13]
 80074a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <tcp_process_refused_data+0x58>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6918      	ldr	r0, [r3, #16]
 80074ca:	2300      	movs	r3, #0
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	47a0      	blx	r4
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
 80074d6:	e007      	b.n	80074e8 <tcp_process_refused_data+0x68>
 80074d8:	2300      	movs	r3, #0
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	2000      	movs	r0, #0
 80074e0:	f000 f8a4 	bl	800762c <tcp_recv_null>
 80074e4:	4603      	mov	r3, r0
 80074e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80074e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d12a      	bne.n	8007546 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d033      	beq.n	8007562 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007502:	d005      	beq.n	8007510 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007508:	3301      	adds	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <tcp_process_refused_data+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6918      	ldr	r0, [r3, #16]
 8007524:	2300      	movs	r3, #0
 8007526:	2200      	movs	r2, #0
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	47a0      	blx	r4
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]
 8007530:	e001      	b.n	8007536 <tcp_process_refused_data+0xb6>
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800753a:	f113 0f0d 	cmn.w	r3, #13
 800753e:	d110      	bne.n	8007562 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007540:	f06f 030c 	mvn.w	r3, #12
 8007544:	e00e      	b.n	8007564 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800754a:	f113 0f0d 	cmn.w	r3, #13
 800754e:	d102      	bne.n	8007556 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007550:	f06f 030c 	mvn.w	r3, #12
 8007554:	e006      	b.n	8007564 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800755c:	f06f 0304 	mvn.w	r3, #4
 8007560:	e000      	b.n	8007564 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	bd90      	pop	{r4, r7, pc}
 800756c:	08010580 	.word	0x08010580
 8007570:	08010a90 	.word	0x08010a90
 8007574:	080105c4 	.word	0x080105c4

08007578 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007580:	e007      	b.n	8007592 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f80a 	bl	80075a2 <tcp_seg_free>
    seg = next;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f4      	bne.n	8007582 <tcp_segs_free+0xa>
  }
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00c      	beq.n	80075ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fe fd75 	bl	80060ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	2003      	movs	r0, #3
 80075c6:	f7fd ffa3 	bl	8005510 <memp_free>
  }
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <tcp_seg_copy+0x1c>
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <tcp_seg_copy+0x4c>)
 80075e4:	f240 6282 	movw	r2, #1666	; 0x682
 80075e8:	490e      	ldr	r1, [pc, #56]	; (8007624 <tcp_seg_copy+0x50>)
 80075ea:	480f      	ldr	r0, [pc, #60]	; (8007628 <tcp_seg_copy+0x54>)
 80075ec:	f007 fad6 	bl	800eb9c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80075f0:	2003      	movs	r0, #3
 80075f2:	f7fd ff4b 	bl	800548c <memp_malloc>
 80075f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <tcp_seg_copy+0x2e>
    return NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	e00a      	b.n	8007618 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007602:	2210      	movs	r2, #16
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f007 fab2 	bl	800eb70 <memcpy>
  pbuf_ref(cseg->p);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fdeb 	bl	80061ec <pbuf_ref>
  return cseg;
 8007616:	68fb      	ldr	r3, [r7, #12]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08010580 	.word	0x08010580
 8007624:	08010ad4 	.word	0x08010ad4
 8007628:	080105c4 	.word	0x080105c4

0800762c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <tcp_recv_null+0x28>
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <tcp_recv_null+0x60>)
 8007642:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007646:	4912      	ldr	r1, [pc, #72]	; (8007690 <tcp_recv_null+0x64>)
 8007648:	4812      	ldr	r0, [pc, #72]	; (8007694 <tcp_recv_null+0x68>)
 800764a:	f007 faa7 	bl	800eb9c <iprintf>
 800764e:	f06f 030f 	mvn.w	r3, #15
 8007652:	e016      	b.n	8007682 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	891b      	ldrh	r3, [r3, #8]
 800765e:	4619      	mov	r1, r3
 8007660:	68b8      	ldr	r0, [r7, #8]
 8007662:	f7ff fb19 	bl	8006c98 <tcp_recved>
    pbuf_free(p);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fe fd20 	bl	80060ac <pbuf_free>
 800766c:	e008      	b.n	8007680 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800766e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007676:	68b8      	ldr	r0, [r7, #8]
 8007678:	f7ff f9be 	bl	80069f8 <tcp_close>
 800767c:	4603      	mov	r3, r0
 800767e:	e000      	b.n	8007682 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	08010580 	.word	0x08010580
 8007690:	08010af0 	.word	0x08010af0
 8007694:	080105c4 	.word	0x080105c4

08007698 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80076a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	db01      	blt.n	80076ae <tcp_kill_prio+0x16>
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	e000      	b.n	80076b0 <tcp_kill_prio+0x18>
 80076ae:	237f      	movs	r3, #127	; 0x7f
 80076b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d034      	beq.n	8007722 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076c6:	4b19      	ldr	r3, [pc, #100]	; (800772c <tcp_kill_prio+0x94>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e01f      	b.n	800770e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	7d5b      	ldrb	r3, [r3, #21]
 80076d2:	7afa      	ldrb	r2, [r7, #11]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d80c      	bhi.n	80076f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80076dc:	7afa      	ldrb	r2, [r7, #11]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d112      	bne.n	8007708 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <tcp_kill_prio+0x98>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d80a      	bhi.n	8007708 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <tcp_kill_prio+0x98>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	7d5b      	ldrb	r3, [r3, #21]
 8007706:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1dc      	bne.n	80076ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800771a:	6938      	ldr	r0, [r7, #16]
 800771c:	f7ff fa56 	bl	8006bcc <tcp_abort>
 8007720:	e000      	b.n	8007724 <tcp_kill_prio+0x8c>
    return;
 8007722:	bf00      	nop
  }
}
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20007688 	.word	0x20007688
 8007730:	2000768c 	.word	0x2000768c

08007734 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b08      	cmp	r3, #8
 8007742:	d009      	beq.n	8007758 <tcp_kill_state+0x24>
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b09      	cmp	r3, #9
 8007748:	d006      	beq.n	8007758 <tcp_kill_state+0x24>
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <tcp_kill_state+0x80>)
 800774c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007750:	4919      	ldr	r1, [pc, #100]	; (80077b8 <tcp_kill_state+0x84>)
 8007752:	481a      	ldr	r0, [pc, #104]	; (80077bc <tcp_kill_state+0x88>)
 8007754:	f007 fa22 	bl	800eb9c <iprintf>

  inactivity = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007760:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <tcp_kill_state+0x8c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	e017      	b.n	8007798 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	7d1b      	ldrb	r3, [r3, #20]
 800776c:	79fa      	ldrb	r2, [r7, #7]
 800776e:	429a      	cmp	r2, r3
 8007770:	d10f      	bne.n	8007792 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <tcp_kill_state+0x90>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	429a      	cmp	r2, r3
 8007780:	d807      	bhi.n	8007792 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007782:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <tcp_kill_state+0x90>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e4      	bne.n	8007768 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80077a4:	2100      	movs	r1, #0
 80077a6:	6938      	ldr	r0, [r7, #16]
 80077a8:	f7ff f952 	bl	8006a50 <tcp_abandon>
  }
}
 80077ac:	bf00      	nop
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	08010580 	.word	0x08010580
 80077b8:	08010b0c 	.word	0x08010b0c
 80077bc:	080105c4 	.word	0x080105c4
 80077c0:	20007688 	.word	0x20007688
 80077c4:	2000768c 	.word	0x2000768c

080077c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077d6:	4b12      	ldr	r3, [pc, #72]	; (8007820 <tcp_kill_timewait+0x58>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e012      	b.n	8007804 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80077de:	4b11      	ldr	r3, [pc, #68]	; (8007824 <tcp_kill_timewait+0x5c>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d807      	bhi.n	80077fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <tcp_kill_timewait+0x5c>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e9      	bne.n	80077de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f7ff f9db 	bl	8006bcc <tcp_abort>
  }
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20007698 	.word	0x20007698
 8007824:	2000768c 	.word	0x2000768c

08007828 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800782e:	4b10      	ldr	r3, [pc, #64]	; (8007870 <tcp_handle_closepend+0x48>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007834:	e014      	b.n	8007860 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8b5b      	ldrh	r3, [r3, #26]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8b5b      	ldrh	r3, [r3, #26]
 800784c:	f023 0308 	bic.w	r3, r3, #8
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff f864 	bl	8006924 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e7      	bne.n	8007836 <tcp_handle_closepend+0xe>
  }
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20007688 	.word	0x20007688

08007874 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800787e:	2001      	movs	r0, #1
 8007880:	f7fd fe04 	bl	800548c <memp_malloc>
 8007884:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d14e      	bne.n	800792a <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800788c:	f7ff ffcc 	bl	8007828 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007890:	f7ff ff9a 	bl	80077c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007894:	2001      	movs	r0, #1
 8007896:	f7fd fdf9 	bl	800548c <memp_malloc>
 800789a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d139      	bne.n	8007916 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80078a2:	2009      	movs	r0, #9
 80078a4:	f7ff ff46 	bl	8007734 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078a8:	2001      	movs	r0, #1
 80078aa:	f7fd fdef 	bl	800548c <memp_malloc>
 80078ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d125      	bne.n	8007902 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80078b6:	2008      	movs	r0, #8
 80078b8:	f7ff ff3c 	bl	8007734 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078bc:	2001      	movs	r0, #1
 80078be:	f7fd fde5 	bl	800548c <memp_malloc>
 80078c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d111      	bne.n	80078ee <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fee3 	bl	8007698 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078d2:	2001      	movs	r0, #1
 80078d4:	f7fd fdda 	bl	800548c <memp_malloc>
 80078d8:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d006      	beq.n	80078ee <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80078e0:	4b36      	ldr	r3, [pc, #216]	; (80079bc <tcp_alloc+0x148>)
 80078e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80078e6:	881a      	ldrh	r2, [r3, #0]
 80078e8:	3a01      	subs	r2, #1
 80078ea:	b292      	uxth	r2, r2
 80078ec:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 80078f4:	4b31      	ldr	r3, [pc, #196]	; (80079bc <tcp_alloc+0x148>)
 80078f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80078fa:	881a      	ldrh	r2, [r3, #0]
 80078fc:	3a01      	subs	r2, #1
 80078fe:	b292      	uxth	r2, r2
 8007900:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d006      	beq.n	8007916 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8007908:	4b2c      	ldr	r3, [pc, #176]	; (80079bc <tcp_alloc+0x148>)
 800790a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	3a01      	subs	r2, #1
 8007912:	b292      	uxth	r2, r2
 8007914:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d006      	beq.n	800792a <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 800791c:	4b27      	ldr	r3, [pc, #156]	; (80079bc <tcp_alloc+0x148>)
 800791e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007922:	881a      	ldrh	r2, [r3, #0]
 8007924:	3a01      	subs	r2, #1
 8007926:	b292      	uxth	r2, r2
 8007928:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d03f      	beq.n	80079b0 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007930:	229c      	movs	r2, #156	; 0x9c
 8007932:	2100      	movs	r1, #0
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f007 f929 	bl	800eb8c <memset>
    pcb->prio = prio;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	79fa      	ldrb	r2, [r7, #7]
 800793e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007946:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007966:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2206      	movs	r2, #6
 800796c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2206      	movs	r2, #6
 8007974:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800797c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007986:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <tcp_alloc+0x14c>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800798e:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <tcp_alloc+0x150>)
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800799c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <tcp_alloc+0x154>)
 80079a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4a08      	ldr	r2, [pc, #32]	; (80079cc <tcp_alloc+0x158>)
 80079ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80079b0:	68fb      	ldr	r3, [r7, #12]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	200075ac 	.word	0x200075ac
 80079c0:	2000768c 	.word	0x2000768c
 80079c4:	20000136 	.word	0x20000136
 80079c8:	0800762d 	.word	0x0800762d
 80079cc:	006ddd00 	.word	0x006ddd00

080079d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <tcp_pcb_purge+0x1e>
 80079de:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <tcp_pcb_purge+0x94>)
 80079e0:	f640 0251 	movw	r2, #2129	; 0x851
 80079e4:	4920      	ldr	r1, [pc, #128]	; (8007a68 <tcp_pcb_purge+0x98>)
 80079e6:	4821      	ldr	r0, [pc, #132]	; (8007a6c <tcp_pcb_purge+0x9c>)
 80079e8:	f007 f8d8 	bl	800eb9c <iprintf>
 80079ec:	e037      	b.n	8007a5e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7d1b      	ldrb	r3, [r3, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d033      	beq.n	8007a5e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80079fa:	2b0a      	cmp	r3, #10
 80079fc:	d02f      	beq.n	8007a5e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d02b      	beq.n	8007a5e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fb4a 	bl	80060ac <pbuf_free>
      pcb->refused_data = NULL;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f986 	bl	8007d38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a32:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff fd9d 	bl	8007578 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fd98 	bl	8007578 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	08010580 	.word	0x08010580
 8007a68:	08010bcc 	.word	0x08010bcc
 8007a6c:	080105c4 	.word	0x080105c4

08007a70 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d106      	bne.n	8007a8e <tcp_pcb_remove+0x1e>
 8007a80:	4b3e      	ldr	r3, [pc, #248]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007a82:	f640 0283 	movw	r2, #2179	; 0x883
 8007a86:	493e      	ldr	r1, [pc, #248]	; (8007b80 <tcp_pcb_remove+0x110>)
 8007a88:	483e      	ldr	r0, [pc, #248]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007a8a:	f007 f887 	bl	800eb9c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <tcp_pcb_remove+0x32>
 8007a94:	4b39      	ldr	r3, [pc, #228]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007a96:	f640 0284 	movw	r2, #2180	; 0x884
 8007a9a:	493b      	ldr	r1, [pc, #236]	; (8007b88 <tcp_pcb_remove+0x118>)
 8007a9c:	4839      	ldr	r0, [pc, #228]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007a9e:	f007 f87d 	bl	800eb9c <iprintf>

  TCP_RMV(pcblist, pcb);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d105      	bne.n	8007ab8 <tcp_pcb_remove+0x48>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e013      	b.n	8007ae0 <tcp_pcb_remove+0x70>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e00c      	b.n	8007ada <tcp_pcb_remove+0x6a>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d104      	bne.n	8007ad4 <tcp_pcb_remove+0x64>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	60da      	str	r2, [r3, #12]
 8007ad2:	e005      	b.n	8007ae0 <tcp_pcb_remove+0x70>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1ef      	bne.n	8007ac0 <tcp_pcb_remove+0x50>
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007ae6:	6838      	ldr	r0, [r7, #0]
 8007ae8:	f7ff ff72 	bl	80079d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	7d1b      	ldrb	r3, [r3, #20]
 8007af0:	2b0a      	cmp	r3, #10
 8007af2:	d013      	beq.n	8007b1c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d00f      	beq.n	8007b1c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	8b5b      	ldrh	r3, [r3, #26]
 8007b00:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d009      	beq.n	8007b1c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	8b5b      	ldrh	r3, [r3, #26]
 8007b0c:	f043 0302 	orr.w	r3, r3, #2
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007b16:	6838      	ldr	r0, [r7, #0]
 8007b18:	f003 f80c 	bl	800ab34 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	7d1b      	ldrb	r3, [r3, #20]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d020      	beq.n	8007b66 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d006      	beq.n	8007b3a <tcp_pcb_remove+0xca>
 8007b2c:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b2e:	f640 0293 	movw	r2, #2195	; 0x893
 8007b32:	4916      	ldr	r1, [pc, #88]	; (8007b8c <tcp_pcb_remove+0x11c>)
 8007b34:	4813      	ldr	r0, [pc, #76]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b36:	f007 f831 	bl	800eb9c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d006      	beq.n	8007b50 <tcp_pcb_remove+0xe0>
 8007b42:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b44:	f640 0294 	movw	r2, #2196	; 0x894
 8007b48:	4911      	ldr	r1, [pc, #68]	; (8007b90 <tcp_pcb_remove+0x120>)
 8007b4a:	480e      	ldr	r0, [pc, #56]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b4c:	f007 f826 	bl	800eb9c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d006      	beq.n	8007b66 <tcp_pcb_remove+0xf6>
 8007b58:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <tcp_pcb_remove+0x10c>)
 8007b5a:	f640 0296 	movw	r2, #2198	; 0x896
 8007b5e:	490d      	ldr	r1, [pc, #52]	; (8007b94 <tcp_pcb_remove+0x124>)
 8007b60:	4808      	ldr	r0, [pc, #32]	; (8007b84 <tcp_pcb_remove+0x114>)
 8007b62:	f007 f81b 	bl	800eb9c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08010580 	.word	0x08010580
 8007b80:	08010be8 	.word	0x08010be8
 8007b84:	080105c4 	.word	0x080105c4
 8007b88:	08010c04 	.word	0x08010c04
 8007b8c:	08010c24 	.word	0x08010c24
 8007b90:	08010c3c 	.word	0x08010c3c
 8007b94:	08010c58 	.word	0x08010c58

08007b98 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <tcp_next_iss+0x1c>
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <tcp_next_iss+0x38>)
 8007ba8:	f640 02af 	movw	r2, #2223	; 0x8af
 8007bac:	4909      	ldr	r1, [pc, #36]	; (8007bd4 <tcp_next_iss+0x3c>)
 8007bae:	480a      	ldr	r0, [pc, #40]	; (8007bd8 <tcp_next_iss+0x40>)
 8007bb0:	f006 fff4 	bl	800eb9c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <tcp_next_iss+0x44>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <tcp_next_iss+0x48>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	4a07      	ldr	r2, [pc, #28]	; (8007bdc <tcp_next_iss+0x44>)
 8007bc0:	6013      	str	r3, [r2, #0]
  return iss;
 8007bc2:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <tcp_next_iss+0x44>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	08010580 	.word	0x08010580
 8007bd4:	08010c70 	.word	0x08010c70
 8007bd8:	080105c4 	.word	0x080105c4
 8007bdc:	2000000c 	.word	0x2000000c
 8007be0:	2000768c 	.word	0x2000768c

08007be4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
 8007bf0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <tcp_eff_send_mss_netif+0x22>
 8007bf8:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <tcp_eff_send_mss_netif+0x68>)
 8007bfa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007bfe:	4914      	ldr	r1, [pc, #80]	; (8007c50 <tcp_eff_send_mss_netif+0x6c>)
 8007c00:	4814      	ldr	r0, [pc, #80]	; (8007c54 <tcp_eff_send_mss_netif+0x70>)
 8007c02:	f006 ffcb 	bl	800eb9c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	e019      	b.n	8007c44 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c14:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007c16:	8afb      	ldrh	r3, [r7, #22]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d012      	beq.n	8007c42 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007c1c:	2328      	movs	r3, #40	; 0x28
 8007c1e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007c20:	8afa      	ldrh	r2, [r7, #22]
 8007c22:	8abb      	ldrh	r3, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d904      	bls.n	8007c32 <tcp_eff_send_mss_netif+0x4e>
 8007c28:	8afa      	ldrh	r2, [r7, #22]
 8007c2a:	8abb      	ldrh	r3, [r7, #20]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	e000      	b.n	8007c34 <tcp_eff_send_mss_netif+0x50>
 8007c32:	2300      	movs	r3, #0
 8007c34:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007c36:	8a7a      	ldrh	r2, [r7, #18]
 8007c38:	89fb      	ldrh	r3, [r7, #14]
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	bf28      	it	cs
 8007c3e:	4613      	movcs	r3, r2
 8007c40:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007c42:	89fb      	ldrh	r3, [r7, #14]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	08010580 	.word	0x08010580
 8007c50:	08010c8c 	.word	0x08010c8c
 8007c54:	080105c4 	.word	0x080105c4

08007c58 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d119      	bne.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007c6c:	4b10      	ldr	r3, [pc, #64]	; (8007cb0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007c6e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007c72:	4910      	ldr	r1, [pc, #64]	; (8007cb4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007c74:	4810      	ldr	r0, [pc, #64]	; (8007cb8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007c76:	f006 ff91 	bl	800eb9c <iprintf>

  while (pcb != NULL) {
 8007c7a:	e011      	b.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d108      	bne.n	8007c9a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7fe ff9c 	bl	8006bcc <tcp_abort>
      pcb = next;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e002      	b.n	8007ca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1ea      	bne.n	8007c7c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	08010580 	.word	0x08010580
 8007cb4:	08010cb4 	.word	0x08010cb4
 8007cb8:	080105c4 	.word	0x080105c4

08007cbc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02a      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d026      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007cd4:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <tcp_netif_ip_addr_changed+0x70>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff ffbc 	bl	8007c58 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007ce0:	4b13      	ldr	r3, [pc, #76]	; (8007d30 <tcp_netif_ip_addr_changed+0x74>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff ffb6 	bl	8007c58 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d013      	beq.n	8007d22 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <tcp_netif_ip_addr_changed+0x78>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	60fb      	str	r3, [r7, #12]
 8007d00:	e00c      	b.n	8007d1c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d103      	bne.n	8007d16 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1ef      	bne.n	8007d02 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20007688 	.word	0x20007688
 8007d30:	20007694 	.word	0x20007694
 8007d34:	20007690 	.word	0x20007690

08007d38 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff fc13 	bl	8007578 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007d60:	b590      	push	{r4, r7, lr}
 8007d62:	b08d      	sub	sp, #52	; 0x34
 8007d64:	af04      	add	r7, sp, #16
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <tcp_input+0x1c>
 8007d70:	4b5b      	ldr	r3, [pc, #364]	; (8007ee0 <tcp_input+0x180>)
 8007d72:	2283      	movs	r2, #131	; 0x83
 8007d74:	495b      	ldr	r1, [pc, #364]	; (8007ee4 <tcp_input+0x184>)
 8007d76:	485c      	ldr	r0, [pc, #368]	; (8007ee8 <tcp_input+0x188>)
 8007d78:	f006 ff10 	bl	800eb9c <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8007d7c:	4b5b      	ldr	r3, [pc, #364]	; (8007eec <tcp_input+0x18c>)
 8007d7e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8007d82:	3301      	adds	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	4b59      	ldr	r3, [pc, #356]	; (8007eec <tcp_input+0x18c>)
 8007d88:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	4a57      	ldr	r2, [pc, #348]	; (8007ef0 <tcp_input+0x190>)
 8007d92:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	895b      	ldrh	r3, [r3, #10]
 8007d98:	2b13      	cmp	r3, #19
 8007d9a:	d809      	bhi.n	8007db0 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8007d9c:	4b53      	ldr	r3, [pc, #332]	; (8007eec <tcp_input+0x18c>)
 8007d9e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8007da2:	3301      	adds	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	4b51      	ldr	r3, [pc, #324]	; (8007eec <tcp_input+0x18c>)
 8007da8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8007dac:	f000 bc36 	b.w	800861c <tcp_input+0x8bc>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007db0:	4b50      	ldr	r3, [pc, #320]	; (8007ef4 <tcp_input+0x194>)
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	4a4f      	ldr	r2, [pc, #316]	; (8007ef4 <tcp_input+0x194>)
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	4611      	mov	r1, r2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f005 fee6 	bl	800db8c <ip4_addr_isbroadcast_u32>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d105      	bne.n	8007dd2 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007dc6:	4b4b      	ldr	r3, [pc, #300]	; (8007ef4 <tcp_input+0x194>)
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007dce:	2be0      	cmp	r3, #224	; 0xe0
 8007dd0:	d109      	bne.n	8007de6 <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8007dd2:	4b46      	ldr	r3, [pc, #280]	; (8007eec <tcp_input+0x18c>)
 8007dd4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8007dd8:	3301      	adds	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	4b43      	ldr	r3, [pc, #268]	; (8007eec <tcp_input+0x18c>)
 8007dde:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 8007de2:	f000 bc1b 	b.w	800861c <tcp_input+0x8bc>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	891a      	ldrh	r2, [r3, #8]
 8007dea:	4b43      	ldr	r3, [pc, #268]	; (8007ef8 <tcp_input+0x198>)
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4b43      	ldr	r3, [pc, #268]	; (8007efc <tcp_input+0x19c>)
 8007df0:	2106      	movs	r1, #6
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fc fe34 	bl	8004a60 <ip_chksum_pseudo>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8007dfc:	8a3b      	ldrh	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <tcp_input+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
                                    chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
 8007e02:	4b3a      	ldr	r3, [pc, #232]	; (8007eec <tcp_input+0x18c>)
 8007e04:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007e08:	3301      	adds	r3, #1
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	4b37      	ldr	r3, [pc, #220]	; (8007eec <tcp_input+0x18c>)
 8007e0e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
      goto dropped;
 8007e12:	f000 bc03 	b.w	800861c <tcp_input+0x8bc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007e16:	4b36      	ldr	r3, [pc, #216]	; (8007ef0 <tcp_input+0x190>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	899b      	ldrh	r3, [r3, #12]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fc fcec 	bl	80047fc <lwip_htons>
 8007e24:	4603      	mov	r3, r0
 8007e26:	0b1b      	lsrs	r3, r3, #12
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	2b13      	cmp	r3, #19
 8007e34:	d905      	bls.n	8007e42 <tcp_input+0xe2>
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	891b      	ldrh	r3, [r3, #8]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d908      	bls.n	8007e54 <tcp_input+0xf4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8007e42:	4b2a      	ldr	r3, [pc, #168]	; (8007eec <tcp_input+0x18c>)
 8007e44:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8007e48:	3301      	adds	r3, #1
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	4b27      	ldr	r3, [pc, #156]	; (8007eec <tcp_input+0x18c>)
 8007e4e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8007e52:	e3e3      	b.n	800861c <tcp_input+0x8bc>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b14      	subs	r3, #20
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	4b28      	ldr	r3, [pc, #160]	; (8007f00 <tcp_input+0x1a0>)
 8007e5e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007e60:	4b28      	ldr	r3, [pc, #160]	; (8007f04 <tcp_input+0x1a4>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	895a      	ldrh	r2, [r3, #10]
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d309      	bcc.n	8007e86 <tcp_input+0x126>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007e72:	4b23      	ldr	r3, [pc, #140]	; (8007f00 <tcp_input+0x1a0>)
 8007e74:	881a      	ldrh	r2, [r3, #0]
 8007e76:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <tcp_input+0x1a8>)
 8007e78:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fe f88e 	bl	8005fa0 <pbuf_remove_header>
 8007e84:	e06e      	b.n	8007f64 <tcp_input+0x204>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <tcp_input+0x13a>
 8007e8e:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <tcp_input+0x180>)
 8007e90:	22c2      	movs	r2, #194	; 0xc2
 8007e92:	491e      	ldr	r1, [pc, #120]	; (8007f0c <tcp_input+0x1ac>)
 8007e94:	4814      	ldr	r0, [pc, #80]	; (8007ee8 <tcp_input+0x188>)
 8007e96:	f006 fe81 	bl	800eb9c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007e9a:	2114      	movs	r1, #20
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7fe f87f 	bl	8005fa0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	895a      	ldrh	r2, [r3, #10]
 8007ea6:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <tcp_input+0x1a8>)
 8007ea8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <tcp_input+0x1a0>)
 8007eac:	881a      	ldrh	r2, [r3, #0]
 8007eae:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <tcp_input+0x1a8>)
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <tcp_input+0x1a8>)
 8007eb8:	881b      	ldrh	r3, [r3, #0]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fe f86f 	bl	8005fa0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	895b      	ldrh	r3, [r3, #10]
 8007ec8:	89ba      	ldrh	r2, [r7, #12]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d920      	bls.n	8007f10 <tcp_input+0x1b0>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8007ece:	4b07      	ldr	r3, [pc, #28]	; (8007eec <tcp_input+0x18c>)
 8007ed0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <tcp_input+0x18c>)
 8007eda:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8007ede:	e39d      	b.n	800861c <tcp_input+0x8bc>
 8007ee0:	08010ce8 	.word	0x08010ce8
 8007ee4:	08010d1c 	.word	0x08010d1c
 8007ee8:	08010d34 	.word	0x08010d34
 8007eec:	200075ac 	.word	0x200075ac
 8007ef0:	20000148 	.word	0x20000148
 8007ef4:	200040b8 	.word	0x200040b8
 8007ef8:	200040cc 	.word	0x200040cc
 8007efc:	200040c8 	.word	0x200040c8
 8007f00:	2000014c 	.word	0x2000014c
 8007f04:	20000150 	.word	0x20000150
 8007f08:	2000014e 	.word	0x2000014e
 8007f0c:	08010d5c 	.word	0x08010d5c
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	4a91      	ldr	r2, [pc, #580]	; (800815c <tcp_input+0x3fc>)
 8007f18:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	89ba      	ldrh	r2, [r7, #12]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe f83c 	bl	8005fa0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	891a      	ldrh	r2, [r3, #8]
 8007f2c:	89bb      	ldrh	r3, [r7, #12]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	895b      	ldrh	r3, [r3, #10]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <tcp_input+0x1ea>
 8007f3e:	4b88      	ldr	r3, [pc, #544]	; (8008160 <tcp_input+0x400>)
 8007f40:	22df      	movs	r2, #223	; 0xdf
 8007f42:	4988      	ldr	r1, [pc, #544]	; (8008164 <tcp_input+0x404>)
 8007f44:	4888      	ldr	r0, [pc, #544]	; (8008168 <tcp_input+0x408>)
 8007f46:	f006 fe29 	bl	800eb9c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	891a      	ldrh	r2, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	891b      	ldrh	r3, [r3, #8]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d005      	beq.n	8007f64 <tcp_input+0x204>
 8007f58:	4b81      	ldr	r3, [pc, #516]	; (8008160 <tcp_input+0x400>)
 8007f5a:	22e0      	movs	r2, #224	; 0xe0
 8007f5c:	4983      	ldr	r1, [pc, #524]	; (800816c <tcp_input+0x40c>)
 8007f5e:	4882      	ldr	r0, [pc, #520]	; (8008168 <tcp_input+0x408>)
 8007f60:	f006 fe1c 	bl	800eb9c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007f64:	4b82      	ldr	r3, [pc, #520]	; (8008170 <tcp_input+0x410>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	4a80      	ldr	r2, [pc, #512]	; (8008170 <tcp_input+0x410>)
 8007f6e:	6814      	ldr	r4, [r2, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fc fc43 	bl	80047fc <lwip_htons>
 8007f76:	4603      	mov	r3, r0
 8007f78:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007f7a:	4b7d      	ldr	r3, [pc, #500]	; (8008170 <tcp_input+0x410>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	885b      	ldrh	r3, [r3, #2]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	4a7b      	ldr	r2, [pc, #492]	; (8008170 <tcp_input+0x410>)
 8007f84:	6814      	ldr	r4, [r2, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fc fc38 	bl	80047fc <lwip_htons>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007f90:	4b77      	ldr	r3, [pc, #476]	; (8008170 <tcp_input+0x410>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	4a76      	ldr	r2, [pc, #472]	; (8008170 <tcp_input+0x410>)
 8007f98:	6814      	ldr	r4, [r2, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fc fc43 	bl	8004826 <lwip_htonl>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	6863      	ldr	r3, [r4, #4]
 8007fa6:	4a73      	ldr	r2, [pc, #460]	; (8008174 <tcp_input+0x414>)
 8007fa8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007faa:	4b71      	ldr	r3, [pc, #452]	; (8008170 <tcp_input+0x410>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	4a6f      	ldr	r2, [pc, #444]	; (8008170 <tcp_input+0x410>)
 8007fb2:	6814      	ldr	r4, [r2, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fc fc36 	bl	8004826 <lwip_htonl>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	60a3      	str	r3, [r4, #8]
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	4a6d      	ldr	r2, [pc, #436]	; (8008178 <tcp_input+0x418>)
 8007fc2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007fc4:	4b6a      	ldr	r3, [pc, #424]	; (8008170 <tcp_input+0x410>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	89db      	ldrh	r3, [r3, #14]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	4a68      	ldr	r2, [pc, #416]	; (8008170 <tcp_input+0x410>)
 8007fce:	6814      	ldr	r4, [r2, #0]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fc fc13 	bl	80047fc <lwip_htons>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007fda:	4b65      	ldr	r3, [pc, #404]	; (8008170 <tcp_input+0x410>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	899b      	ldrh	r3, [r3, #12]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fc fc0a 	bl	80047fc <lwip_htons>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	4b62      	ldr	r3, [pc, #392]	; (800817c <tcp_input+0x41c>)
 8007ff4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	891a      	ldrh	r2, [r3, #8]
 8007ffa:	4b61      	ldr	r3, [pc, #388]	; (8008180 <tcp_input+0x420>)
 8007ffc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007ffe:	4b5f      	ldr	r3, [pc, #380]	; (800817c <tcp_input+0x41c>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d014      	beq.n	8008034 <tcp_input+0x2d4>
    tcplen++;
 800800a:	4b5d      	ldr	r3, [pc, #372]	; (8008180 <tcp_input+0x420>)
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	3301      	adds	r3, #1
 8008010:	b29a      	uxth	r2, r3
 8008012:	4b5b      	ldr	r3, [pc, #364]	; (8008180 <tcp_input+0x420>)
 8008014:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	891a      	ldrh	r2, [r3, #8]
 800801a:	4b59      	ldr	r3, [pc, #356]	; (8008180 <tcp_input+0x420>)
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d908      	bls.n	8008034 <tcp_input+0x2d4>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8008022:	4b58      	ldr	r3, [pc, #352]	; (8008184 <tcp_input+0x424>)
 8008024:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8008028:	3301      	adds	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	4b55      	ldr	r3, [pc, #340]	; (8008184 <tcp_input+0x424>)
 800802e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 8008032:	e2f3      	b.n	800861c <tcp_input+0x8bc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008034:	2300      	movs	r3, #0
 8008036:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008038:	4b53      	ldr	r3, [pc, #332]	; (8008188 <tcp_input+0x428>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	61fb      	str	r3, [r7, #28]
 800803e:	e07f      	b.n	8008140 <tcp_input+0x3e0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	7d1b      	ldrb	r3, [r3, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d105      	bne.n	8008054 <tcp_input+0x2f4>
 8008048:	4b45      	ldr	r3, [pc, #276]	; (8008160 <tcp_input+0x400>)
 800804a:	22fb      	movs	r2, #251	; 0xfb
 800804c:	494f      	ldr	r1, [pc, #316]	; (800818c <tcp_input+0x42c>)
 800804e:	4846      	ldr	r0, [pc, #280]	; (8008168 <tcp_input+0x408>)
 8008050:	f006 fda4 	bl	800eb9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	7d1b      	ldrb	r3, [r3, #20]
 8008058:	2b0a      	cmp	r3, #10
 800805a:	d105      	bne.n	8008068 <tcp_input+0x308>
 800805c:	4b40      	ldr	r3, [pc, #256]	; (8008160 <tcp_input+0x400>)
 800805e:	22fc      	movs	r2, #252	; 0xfc
 8008060:	494b      	ldr	r1, [pc, #300]	; (8008190 <tcp_input+0x430>)
 8008062:	4841      	ldr	r0, [pc, #260]	; (8008168 <tcp_input+0x408>)
 8008064:	f006 fd9a 	bl	800eb9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	7d1b      	ldrb	r3, [r3, #20]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d105      	bne.n	800807c <tcp_input+0x31c>
 8008070:	4b3b      	ldr	r3, [pc, #236]	; (8008160 <tcp_input+0x400>)
 8008072:	22fd      	movs	r2, #253	; 0xfd
 8008074:	4947      	ldr	r1, [pc, #284]	; (8008194 <tcp_input+0x434>)
 8008076:	483c      	ldr	r0, [pc, #240]	; (8008168 <tcp_input+0x408>)
 8008078:	f006 fd90 	bl	800eb9c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	7a1b      	ldrb	r3, [r3, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00c      	beq.n	800809e <tcp_input+0x33e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	7a1a      	ldrb	r2, [r3, #8]
 8008088:	4b43      	ldr	r3, [pc, #268]	; (8008198 <tcp_input+0x438>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008090:	3301      	adds	r3, #1
 8008092:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008094:	429a      	cmp	r2, r3
 8008096:	d002      	beq.n	800809e <tcp_input+0x33e>
      prev = pcb;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	61bb      	str	r3, [r7, #24]
      continue;
 800809c:	e04d      	b.n	800813a <tcp_input+0x3da>
    }

    if (pcb->remote_port == tcphdr->src &&
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	8b1a      	ldrh	r2, [r3, #24]
 80080a2:	4b33      	ldr	r3, [pc, #204]	; (8008170 <tcp_input+0x410>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	881b      	ldrh	r3, [r3, #0]
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d143      	bne.n	8008136 <tcp_input+0x3d6>
        pcb->local_port == tcphdr->dest &&
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	8ada      	ldrh	r2, [r3, #22]
 80080b2:	4b2f      	ldr	r3, [pc, #188]	; (8008170 <tcp_input+0x410>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	885b      	ldrh	r3, [r3, #2]
 80080b8:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d13b      	bne.n	8008136 <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	4b35      	ldr	r3, [pc, #212]	; (8008198 <tcp_input+0x438>)
 80080c4:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d135      	bne.n	8008136 <tcp_input+0x3d6>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	4b32      	ldr	r3, [pc, #200]	; (8008198 <tcp_input+0x438>)
 80080d0:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d12f      	bne.n	8008136 <tcp_input+0x3d6>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d106      	bne.n	80080ee <tcp_input+0x38e>
 80080e0:	4b1f      	ldr	r3, [pc, #124]	; (8008160 <tcp_input+0x400>)
 80080e2:	f240 120d 	movw	r2, #269	; 0x10d
 80080e6:	492d      	ldr	r1, [pc, #180]	; (800819c <tcp_input+0x43c>)
 80080e8:	481f      	ldr	r0, [pc, #124]	; (8008168 <tcp_input+0x408>)
 80080ea:	f006 fd57 	bl	800eb9c <iprintf>
      if (prev != NULL) {
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <tcp_input+0x3ac>
        prev->next = pcb->next;
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	68da      	ldr	r2, [r3, #12]
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80080fc:	4b22      	ldr	r3, [pc, #136]	; (8008188 <tcp_input+0x428>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008104:	4a20      	ldr	r2, [pc, #128]	; (8008188 <tcp_input+0x428>)
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	e007      	b.n	800811c <tcp_input+0x3bc>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 800810c:	4b1d      	ldr	r3, [pc, #116]	; (8008184 <tcp_input+0x424>)
 800810e:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8008112:	3301      	adds	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	4b1b      	ldr	r3, [pc, #108]	; (8008184 <tcp_input+0x424>)
 8008118:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	429a      	cmp	r2, r3
 8008124:	d111      	bne.n	800814a <tcp_input+0x3ea>
 8008126:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <tcp_input+0x400>)
 8008128:	f240 1215 	movw	r2, #277	; 0x115
 800812c:	491c      	ldr	r1, [pc, #112]	; (80081a0 <tcp_input+0x440>)
 800812e:	480e      	ldr	r0, [pc, #56]	; (8008168 <tcp_input+0x408>)
 8008130:	f006 fd34 	bl	800eb9c <iprintf>
      break;
 8008134:	e009      	b.n	800814a <tcp_input+0x3ea>
    }
    prev = pcb;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	61fb      	str	r3, [r7, #28]
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	2b00      	cmp	r3, #0
 8008144:	f47f af7c 	bne.w	8008040 <tcp_input+0x2e0>
 8008148:	e000      	b.n	800814c <tcp_input+0x3ec>
      break;
 800814a:	bf00      	nop
  }

  if (pcb == NULL) {
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f040 80c4 	bne.w	80082dc <tcp_input+0x57c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008154:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <tcp_input+0x444>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	61fb      	str	r3, [r7, #28]
 800815a:	e065      	b.n	8008228 <tcp_input+0x4c8>
 800815c:	20000150 	.word	0x20000150
 8008160:	08010ce8 	.word	0x08010ce8
 8008164:	08010d6c 	.word	0x08010d6c
 8008168:	08010d34 	.word	0x08010d34
 800816c:	08010d78 	.word	0x08010d78
 8008170:	20000148 	.word	0x20000148
 8008174:	20000158 	.word	0x20000158
 8008178:	2000015c 	.word	0x2000015c
 800817c:	20000164 	.word	0x20000164
 8008180:	20000162 	.word	0x20000162
 8008184:	200075ac 	.word	0x200075ac
 8008188:	20007688 	.word	0x20007688
 800818c:	08010d98 	.word	0x08010d98
 8008190:	08010dc0 	.word	0x08010dc0
 8008194:	08010dec 	.word	0x08010dec
 8008198:	200040b8 	.word	0x200040b8
 800819c:	08010e14 	.word	0x08010e14
 80081a0:	08010e40 	.word	0x08010e40
 80081a4:	20007698 	.word	0x20007698
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	7d1b      	ldrb	r3, [r3, #20]
 80081ac:	2b0a      	cmp	r3, #10
 80081ae:	d006      	beq.n	80081be <tcp_input+0x45e>
 80081b0:	4b91      	ldr	r3, [pc, #580]	; (80083f8 <tcp_input+0x698>)
 80081b2:	f240 121f 	movw	r2, #287	; 0x11f
 80081b6:	4991      	ldr	r1, [pc, #580]	; (80083fc <tcp_input+0x69c>)
 80081b8:	4891      	ldr	r0, [pc, #580]	; (8008400 <tcp_input+0x6a0>)
 80081ba:	f006 fcef 	bl	800eb9c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	7a1b      	ldrb	r3, [r3, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <tcp_input+0x47a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	7a1a      	ldrb	r2, [r3, #8]
 80081ca:	4b8e      	ldr	r3, [pc, #568]	; (8008404 <tcp_input+0x6a4>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081d2:	3301      	adds	r3, #1
 80081d4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d122      	bne.n	8008220 <tcp_input+0x4c0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	8b1a      	ldrh	r2, [r3, #24]
 80081de:	4b8a      	ldr	r3, [pc, #552]	; (8008408 <tcp_input+0x6a8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d11b      	bne.n	8008222 <tcp_input+0x4c2>
          pcb->local_port == tcphdr->dest &&
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	8ada      	ldrh	r2, [r3, #22]
 80081ee:	4b86      	ldr	r3, [pc, #536]	; (8008408 <tcp_input+0x6a8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	885b      	ldrh	r3, [r3, #2]
 80081f4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d113      	bne.n	8008222 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	4b81      	ldr	r3, [pc, #516]	; (8008404 <tcp_input+0x6a4>)
 8008200:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008202:	429a      	cmp	r2, r3
 8008204:	d10d      	bne.n	8008222 <tcp_input+0x4c2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	4b7e      	ldr	r3, [pc, #504]	; (8008404 <tcp_input+0x6a4>)
 800820c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800820e:	429a      	cmp	r2, r3
 8008210:	d107      	bne.n	8008222 <tcp_input+0x4c2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008212:	69f8      	ldr	r0, [r7, #28]
 8008214:	f000 fb78 	bl	8008908 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f7fd ff47 	bl	80060ac <pbuf_free>
        return;
 800821e:	e20a      	b.n	8008636 <tcp_input+0x8d6>
        continue;
 8008220:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1bc      	bne.n	80081a8 <tcp_input+0x448>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008232:	4b76      	ldr	r3, [pc, #472]	; (800840c <tcp_input+0x6ac>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e02a      	b.n	8008290 <tcp_input+0x530>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	7a1b      	ldrb	r3, [r3, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00c      	beq.n	800825c <tcp_input+0x4fc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	7a1a      	ldrb	r2, [r3, #8]
 8008246:	4b6f      	ldr	r3, [pc, #444]	; (8008404 <tcp_input+0x6a4>)
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800824e:	3301      	adds	r3, #1
 8008250:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008252:	429a      	cmp	r2, r3
 8008254:	d002      	beq.n	800825c <tcp_input+0x4fc>
        prev = (struct tcp_pcb *)lpcb;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	61bb      	str	r3, [r7, #24]
        continue;
 800825a:	e016      	b.n	800828a <tcp_input+0x52a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	8ada      	ldrh	r2, [r3, #22]
 8008260:	4b69      	ldr	r3, [pc, #420]	; (8008408 <tcp_input+0x6a8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	b29b      	uxth	r3, r3
 8008268:	429a      	cmp	r2, r3
 800826a:	d10c      	bne.n	8008286 <tcp_input+0x526>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	4b64      	ldr	r3, [pc, #400]	; (8008404 <tcp_input+0x6a4>)
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	429a      	cmp	r2, r3
 8008276:	d00f      	beq.n	8008298 <tcp_input+0x538>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00d      	beq.n	800829a <tcp_input+0x53a>
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <tcp_input+0x53a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1d1      	bne.n	800823a <tcp_input+0x4da>
 8008296:	e000      	b.n	800829a <tcp_input+0x53a>
            break;
 8008298:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01d      	beq.n	80082dc <tcp_input+0x57c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00b      	beq.n	80082be <tcp_input+0x55e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80082ae:	4b57      	ldr	r3, [pc, #348]	; (800840c <tcp_input+0x6ac>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80082b6:	4a55      	ldr	r2, [pc, #340]	; (800840c <tcp_input+0x6ac>)
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	e007      	b.n	80082ce <tcp_input+0x56e>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80082be:	4b54      	ldr	r3, [pc, #336]	; (8008410 <tcp_input+0x6b0>)
 80082c0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80082c4:	3301      	adds	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	4b51      	ldr	r3, [pc, #324]	; (8008410 <tcp_input+0x6b0>)
 80082ca:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f000 fa12 	bl	80086f8 <tcp_listen_input>
      }
      pbuf_free(p);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7fd fee9 	bl	80060ac <pbuf_free>
      return;
 80082da:	e1ac      	b.n	8008636 <tcp_input+0x8d6>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 8162 	beq.w	80085a8 <tcp_input+0x848>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80082e4:	4b4b      	ldr	r3, [pc, #300]	; (8008414 <tcp_input+0x6b4>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	891a      	ldrh	r2, [r3, #8]
 80082ee:	4b49      	ldr	r3, [pc, #292]	; (8008414 <tcp_input+0x6b4>)
 80082f0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80082f2:	4a48      	ldr	r2, [pc, #288]	; (8008414 <tcp_input+0x6b4>)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80082f8:	4b43      	ldr	r3, [pc, #268]	; (8008408 <tcp_input+0x6a8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a45      	ldr	r2, [pc, #276]	; (8008414 <tcp_input+0x6b4>)
 80082fe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008300:	4b45      	ldr	r3, [pc, #276]	; (8008418 <tcp_input+0x6b8>)
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008306:	4b45      	ldr	r3, [pc, #276]	; (800841c <tcp_input+0x6bc>)
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800830c:	4b44      	ldr	r3, [pc, #272]	; (8008420 <tcp_input+0x6c0>)
 800830e:	2200      	movs	r2, #0
 8008310:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008312:	4b44      	ldr	r3, [pc, #272]	; (8008424 <tcp_input+0x6c4>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	f003 0308 	and.w	r3, r3, #8
 800831a:	2b00      	cmp	r3, #0
 800831c:	d006      	beq.n	800832c <tcp_input+0x5cc>
      p->flags |= PBUF_FLAG_PUSH;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7b5b      	ldrb	r3, [r3, #13]
 8008322:	f043 0301 	orr.w	r3, r3, #1
 8008326:	b2da      	uxtb	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01e      	beq.n	8008372 <tcp_input+0x612>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008334:	69f8      	ldr	r0, [r7, #28]
 8008336:	f7ff f8a3 	bl	8007480 <tcp_process_refused_data>
 800833a:	4603      	mov	r3, r0
 800833c:	f113 0f0d 	cmn.w	r3, #13
 8008340:	d007      	beq.n	8008352 <tcp_input+0x5f2>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008346:	2b00      	cmp	r3, #0
 8008348:	d013      	beq.n	8008372 <tcp_input+0x612>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800834a:	4b37      	ldr	r3, [pc, #220]	; (8008428 <tcp_input+0x6c8>)
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00f      	beq.n	8008372 <tcp_input+0x612>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <tcp_input+0x600>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800835a:	69f8      	ldr	r0, [r7, #28]
 800835c:	f003 fa26 	bl	800b7ac <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8008360:	4b2b      	ldr	r3, [pc, #172]	; (8008410 <tcp_input+0x6b0>)
 8008362:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8008366:	3301      	adds	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	4b29      	ldr	r3, [pc, #164]	; (8008410 <tcp_input+0x6b0>)
 800836c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008370:	e107      	b.n	8008582 <tcp_input+0x822>
      }
    }
    tcp_input_pcb = pcb;
 8008372:	4a2e      	ldr	r2, [pc, #184]	; (800842c <tcp_input+0x6cc>)
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008378:	69f8      	ldr	r0, [r7, #28]
 800837a:	f000 fb3f 	bl	80089fc <tcp_process>
 800837e:	4603      	mov	r3, r0
 8008380:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008382:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008386:	f113 0f0d 	cmn.w	r3, #13
 800838a:	f000 80ef 	beq.w	800856c <tcp_input+0x80c>
      if (recv_flags & TF_RESET) {
 800838e:	4b23      	ldr	r3, [pc, #140]	; (800841c <tcp_input+0x6bc>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b00      	cmp	r3, #0
 8008398:	d015      	beq.n	80083c6 <tcp_input+0x666>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d008      	beq.n	80083b6 <tcp_input+0x656>
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	6912      	ldr	r2, [r2, #16]
 80083ae:	f06f 010d 	mvn.w	r1, #13
 80083b2:	4610      	mov	r0, r2
 80083b4:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80083b6:	69f9      	ldr	r1, [r7, #28]
 80083b8:	481d      	ldr	r0, [pc, #116]	; (8008430 <tcp_input+0x6d0>)
 80083ba:	f7ff fb59 	bl	8007a70 <tcp_pcb_remove>
        tcp_free(pcb);
 80083be:	69f8      	ldr	r0, [r7, #28]
 80083c0:	f7fe f91c 	bl	80065fc <tcp_free>
 80083c4:	e0dd      	b.n	8008582 <tcp_input+0x822>
      } else {
        err = ERR_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80083ca:	4b15      	ldr	r3, [pc, #84]	; (8008420 <tcp_input+0x6c0>)
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d03b      	beq.n	800844a <tcp_input+0x6ea>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80083d2:	4b13      	ldr	r3, [pc, #76]	; (8008420 <tcp_input+0x6c0>)
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d028      	beq.n	8008434 <tcp_input+0x6d4>
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	6910      	ldr	r0, [r2, #16]
 80083ec:	897a      	ldrh	r2, [r7, #10]
 80083ee:	69f9      	ldr	r1, [r7, #28]
 80083f0:	4798      	blx	r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	74fb      	strb	r3, [r7, #19]
 80083f6:	e01f      	b.n	8008438 <tcp_input+0x6d8>
 80083f8:	08010ce8 	.word	0x08010ce8
 80083fc:	08010e6c 	.word	0x08010e6c
 8008400:	08010d34 	.word	0x08010d34
 8008404:	200040b8 	.word	0x200040b8
 8008408:	20000148 	.word	0x20000148
 800840c:	20007690 	.word	0x20007690
 8008410:	200075ac 	.word	0x200075ac
 8008414:	20000138 	.word	0x20000138
 8008418:	20000168 	.word	0x20000168
 800841c:	20000165 	.word	0x20000165
 8008420:	20000160 	.word	0x20000160
 8008424:	20000164 	.word	0x20000164
 8008428:	20000162 	.word	0x20000162
 800842c:	2000769c 	.word	0x2000769c
 8008430:	20007688 	.word	0x20007688
 8008434:	2300      	movs	r3, #0
 8008436:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008438:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800843c:	f113 0f0d 	cmn.w	r3, #13
 8008440:	f000 8096 	beq.w	8008570 <tcp_input+0x810>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008444:	4b7d      	ldr	r3, [pc, #500]	; (800863c <tcp_input+0x8dc>)
 8008446:	2200      	movs	r2, #0
 8008448:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800844a:	69f8      	ldr	r0, [r7, #28]
 800844c:	f000 f914 	bl	8008678 <tcp_input_delayed_close>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	f040 808e 	bne.w	8008574 <tcp_input+0x814>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008458:	4b79      	ldr	r3, [pc, #484]	; (8008640 <tcp_input+0x8e0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d041      	beq.n	80084e4 <tcp_input+0x784>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008464:	2b00      	cmp	r3, #0
 8008466:	d006      	beq.n	8008476 <tcp_input+0x716>
 8008468:	4b76      	ldr	r3, [pc, #472]	; (8008644 <tcp_input+0x8e4>)
 800846a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800846e:	4976      	ldr	r1, [pc, #472]	; (8008648 <tcp_input+0x8e8>)
 8008470:	4876      	ldr	r0, [pc, #472]	; (800864c <tcp_input+0x8ec>)
 8008472:	f006 fb93 	bl	800eb9c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	8b5b      	ldrh	r3, [r3, #26]
 800847a:	f003 0310 	and.w	r3, r3, #16
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <tcp_input+0x734>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008482:	4b6f      	ldr	r3, [pc, #444]	; (8008640 <tcp_input+0x8e0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f7fd fe10 	bl	80060ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800848c:	69f8      	ldr	r0, [r7, #28]
 800848e:	f7fe fb9d 	bl	8006bcc <tcp_abort>
            goto aborted;
 8008492:	e076      	b.n	8008582 <tcp_input+0x822>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00c      	beq.n	80084b8 <tcp_input+0x758>
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	6918      	ldr	r0, [r3, #16]
 80084a8:	4b65      	ldr	r3, [pc, #404]	; (8008640 <tcp_input+0x8e0>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	2300      	movs	r3, #0
 80084ae:	69f9      	ldr	r1, [r7, #28]
 80084b0:	47a0      	blx	r4
 80084b2:	4603      	mov	r3, r0
 80084b4:	74fb      	strb	r3, [r7, #19]
 80084b6:	e008      	b.n	80084ca <tcp_input+0x76a>
 80084b8:	4b61      	ldr	r3, [pc, #388]	; (8008640 <tcp_input+0x8e0>)
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	2300      	movs	r3, #0
 80084be:	69f9      	ldr	r1, [r7, #28]
 80084c0:	2000      	movs	r0, #0
 80084c2:	f7ff f8b3 	bl	800762c <tcp_recv_null>
 80084c6:	4603      	mov	r3, r0
 80084c8:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80084ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084ce:	f113 0f0d 	cmn.w	r3, #13
 80084d2:	d051      	beq.n	8008578 <tcp_input+0x818>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80084d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <tcp_input+0x784>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80084dc:	4b58      	ldr	r3, [pc, #352]	; (8008640 <tcp_input+0x8e0>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80084e4:	4b5a      	ldr	r3, [pc, #360]	; (8008650 <tcp_input+0x8f0>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d030      	beq.n	8008552 <tcp_input+0x7f2>
          if (pcb->refused_data != NULL) {
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d009      	beq.n	800850c <tcp_input+0x7ac>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084fc:	7b5a      	ldrb	r2, [r3, #13]
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008502:	f042 0220 	orr.w	r2, r2, #32
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	735a      	strb	r2, [r3, #13]
 800850a:	e022      	b.n	8008552 <tcp_input+0x7f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008510:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008514:	d005      	beq.n	8008522 <tcp_input+0x7c2>
              pcb->rcv_wnd++;
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851a:	3301      	adds	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <tcp_input+0x7e4>
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	6918      	ldr	r0, [r3, #16]
 8008536:	2300      	movs	r3, #0
 8008538:	2200      	movs	r2, #0
 800853a:	69f9      	ldr	r1, [r7, #28]
 800853c:	47a0      	blx	r4
 800853e:	4603      	mov	r3, r0
 8008540:	74fb      	strb	r3, [r7, #19]
 8008542:	e001      	b.n	8008548 <tcp_input+0x7e8>
 8008544:	2300      	movs	r3, #0
 8008546:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800854c:	f113 0f0d 	cmn.w	r3, #13
 8008550:	d014      	beq.n	800857c <tcp_input+0x81c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008552:	4b40      	ldr	r3, [pc, #256]	; (8008654 <tcp_input+0x8f4>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008558:	69f8      	ldr	r0, [r7, #28]
 800855a:	f000 f88d 	bl	8008678 <tcp_input_delayed_close>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10d      	bne.n	8008580 <tcp_input+0x820>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008564:	69f8      	ldr	r0, [r7, #28]
 8008566:	f002 fae5 	bl	800ab34 <tcp_output>
 800856a:	e00a      	b.n	8008582 <tcp_input+0x822>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800856c:	bf00      	nop
 800856e:	e008      	b.n	8008582 <tcp_input+0x822>
              goto aborted;
 8008570:	bf00      	nop
 8008572:	e006      	b.n	8008582 <tcp_input+0x822>
          goto aborted;
 8008574:	bf00      	nop
 8008576:	e004      	b.n	8008582 <tcp_input+0x822>
            goto aborted;
 8008578:	bf00      	nop
 800857a:	e002      	b.n	8008582 <tcp_input+0x822>
              goto aborted;
 800857c:	bf00      	nop
 800857e:	e000      	b.n	8008582 <tcp_input+0x822>
          goto aborted;
 8008580:	bf00      	nop
    tcp_input_pcb = NULL;
 8008582:	4b34      	ldr	r3, [pc, #208]	; (8008654 <tcp_input+0x8f4>)
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008588:	4b2d      	ldr	r3, [pc, #180]	; (8008640 <tcp_input+0x8e0>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800858e:	4b32      	ldr	r3, [pc, #200]	; (8008658 <tcp_input+0x8f8>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d04e      	beq.n	8008634 <tcp_input+0x8d4>
      pbuf_free(inseg.p);
 8008596:	4b30      	ldr	r3, [pc, #192]	; (8008658 <tcp_input+0x8f8>)
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	4618      	mov	r0, r3
 800859c:	f7fd fd86 	bl	80060ac <pbuf_free>
      inseg.p = NULL;
 80085a0:	4b2d      	ldr	r3, [pc, #180]	; (8008658 <tcp_input+0x8f8>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80085a6:	e045      	b.n	8008634 <tcp_input+0x8d4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80085a8:	4b2c      	ldr	r3, [pc, #176]	; (800865c <tcp_input+0x8fc>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	899b      	ldrh	r3, [r3, #12]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fc f923 	bl	80047fc <lwip_htons>
 80085b6:	4603      	mov	r3, r0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d128      	bne.n	8008614 <tcp_input+0x8b4>
      TCP_STATS_INC(tcp.proterr);
 80085c2:	4b27      	ldr	r3, [pc, #156]	; (8008660 <tcp_input+0x900>)
 80085c4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80085c8:	3301      	adds	r3, #1
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	4b24      	ldr	r3, [pc, #144]	; (8008660 <tcp_input+0x900>)
 80085ce:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 80085d2:	4b23      	ldr	r3, [pc, #140]	; (8008660 <tcp_input+0x900>)
 80085d4:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80085d8:	3301      	adds	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	4b20      	ldr	r3, [pc, #128]	; (8008660 <tcp_input+0x900>)
 80085de:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085e2:	4b20      	ldr	r3, [pc, #128]	; (8008664 <tcp_input+0x904>)
 80085e4:	6819      	ldr	r1, [r3, #0]
 80085e6:	4b20      	ldr	r3, [pc, #128]	; (8008668 <tcp_input+0x908>)
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	4b1f      	ldr	r3, [pc, #124]	; (800866c <tcp_input+0x90c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085f2:	4b1a      	ldr	r3, [pc, #104]	; (800865c <tcp_input+0x8fc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085f6:	885b      	ldrh	r3, [r3, #2]
 80085f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085fa:	4a18      	ldr	r2, [pc, #96]	; (800865c <tcp_input+0x8fc>)
 80085fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085fe:	8812      	ldrh	r2, [r2, #0]
 8008600:	b292      	uxth	r2, r2
 8008602:	9202      	str	r2, [sp, #8]
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <tcp_input+0x910>)
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	4b1a      	ldr	r3, [pc, #104]	; (8008674 <tcp_input+0x914>)
 800860c:	4602      	mov	r2, r0
 800860e:	2000      	movs	r0, #0
 8008610:	f003 f87a 	bl	800b708 <tcp_rst>
    pbuf_free(p);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f7fd fd49 	bl	80060ac <pbuf_free>
  return;
 800861a:	e00b      	b.n	8008634 <tcp_input+0x8d4>
dropped:
  TCP_STATS_INC(tcp.drop);
 800861c:	4b10      	ldr	r3, [pc, #64]	; (8008660 <tcp_input+0x900>)
 800861e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8008622:	3301      	adds	r3, #1
 8008624:	b29a      	uxth	r2, r3
 8008626:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <tcp_input+0x900>)
 8008628:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7fd fd3d 	bl	80060ac <pbuf_free>
 8008632:	e000      	b.n	8008636 <tcp_input+0x8d6>
  return;
 8008634:	bf00      	nop
}
 8008636:	3724      	adds	r7, #36	; 0x24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd90      	pop	{r4, r7, pc}
 800863c:	20000160 	.word	0x20000160
 8008640:	20000168 	.word	0x20000168
 8008644:	08010ce8 	.word	0x08010ce8
 8008648:	08010e9c 	.word	0x08010e9c
 800864c:	08010d34 	.word	0x08010d34
 8008650:	20000165 	.word	0x20000165
 8008654:	2000769c 	.word	0x2000769c
 8008658:	20000138 	.word	0x20000138
 800865c:	20000148 	.word	0x20000148
 8008660:	200075ac 	.word	0x200075ac
 8008664:	2000015c 	.word	0x2000015c
 8008668:	20000162 	.word	0x20000162
 800866c:	20000158 	.word	0x20000158
 8008670:	200040c8 	.word	0x200040c8
 8008674:	200040cc 	.word	0x200040cc

08008678 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d106      	bne.n	8008694 <tcp_input_delayed_close+0x1c>
 8008686:	4b17      	ldr	r3, [pc, #92]	; (80086e4 <tcp_input_delayed_close+0x6c>)
 8008688:	f240 225a 	movw	r2, #602	; 0x25a
 800868c:	4916      	ldr	r1, [pc, #88]	; (80086e8 <tcp_input_delayed_close+0x70>)
 800868e:	4817      	ldr	r0, [pc, #92]	; (80086ec <tcp_input_delayed_close+0x74>)
 8008690:	f006 fa84 	bl	800eb9c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008694:	4b16      	ldr	r3, [pc, #88]	; (80086f0 <tcp_input_delayed_close+0x78>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	f003 0310 	and.w	r3, r3, #16
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01c      	beq.n	80086da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8b5b      	ldrh	r3, [r3, #26]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10d      	bne.n	80086c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d008      	beq.n	80086c8 <tcp_input_delayed_close+0x50>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6912      	ldr	r2, [r2, #16]
 80086c0:	f06f 010e 	mvn.w	r1, #14
 80086c4:	4610      	mov	r0, r2
 80086c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	480a      	ldr	r0, [pc, #40]	; (80086f4 <tcp_input_delayed_close+0x7c>)
 80086cc:	f7ff f9d0 	bl	8007a70 <tcp_pcb_remove>
    tcp_free(pcb);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7fd ff93 	bl	80065fc <tcp_free>
    return 1;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	08010ce8 	.word	0x08010ce8
 80086e8:	08010eb8 	.word	0x08010eb8
 80086ec:	08010d34 	.word	0x08010d34
 80086f0:	20000165 	.word	0x20000165
 80086f4:	20007688 	.word	0x20007688

080086f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80086f8:	b590      	push	{r4, r7, lr}
 80086fa:	b08b      	sub	sp, #44	; 0x2c
 80086fc:	af04      	add	r7, sp, #16
 80086fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008700:	4b73      	ldr	r3, [pc, #460]	; (80088d0 <tcp_listen_input+0x1d8>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f003 0304 	and.w	r3, r3, #4
 8008708:	2b00      	cmp	r3, #0
 800870a:	f040 80da 	bne.w	80088c2 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d106      	bne.n	8008722 <tcp_listen_input+0x2a>
 8008714:	4b6f      	ldr	r3, [pc, #444]	; (80088d4 <tcp_listen_input+0x1dc>)
 8008716:	f240 2281 	movw	r2, #641	; 0x281
 800871a:	496f      	ldr	r1, [pc, #444]	; (80088d8 <tcp_listen_input+0x1e0>)
 800871c:	486f      	ldr	r0, [pc, #444]	; (80088dc <tcp_listen_input+0x1e4>)
 800871e:	f006 fa3d 	bl	800eb9c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008722:	4b6b      	ldr	r3, [pc, #428]	; (80088d0 <tcp_listen_input+0x1d8>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f003 0310 	and.w	r3, r3, #16
 800872a:	2b00      	cmp	r3, #0
 800872c:	d019      	beq.n	8008762 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800872e:	4b6c      	ldr	r3, [pc, #432]	; (80088e0 <tcp_listen_input+0x1e8>)
 8008730:	6819      	ldr	r1, [r3, #0]
 8008732:	4b6c      	ldr	r3, [pc, #432]	; (80088e4 <tcp_listen_input+0x1ec>)
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	4b6b      	ldr	r3, [pc, #428]	; (80088e8 <tcp_listen_input+0x1f0>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800873e:	4b6b      	ldr	r3, [pc, #428]	; (80088ec <tcp_listen_input+0x1f4>)
 8008740:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008742:	885b      	ldrh	r3, [r3, #2]
 8008744:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008746:	4a69      	ldr	r2, [pc, #420]	; (80088ec <tcp_listen_input+0x1f4>)
 8008748:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800874a:	8812      	ldrh	r2, [r2, #0]
 800874c:	b292      	uxth	r2, r2
 800874e:	9202      	str	r2, [sp, #8]
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	4b67      	ldr	r3, [pc, #412]	; (80088f0 <tcp_listen_input+0x1f8>)
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	4b67      	ldr	r3, [pc, #412]	; (80088f4 <tcp_listen_input+0x1fc>)
 8008758:	4602      	mov	r2, r0
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f002 ffd4 	bl	800b708 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008760:	e0b1      	b.n	80088c6 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 8008762:	4b5b      	ldr	r3, [pc, #364]	; (80088d0 <tcp_listen_input+0x1d8>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 80ab 	beq.w	80088c6 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7d5b      	ldrb	r3, [r3, #21]
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff f87d 	bl	8007874 <tcp_alloc>
 800877a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d119      	bne.n	80087b6 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8008782:	4b5d      	ldr	r3, [pc, #372]	; (80088f8 <tcp_listen_input+0x200>)
 8008784:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8008788:	3301      	adds	r3, #1
 800878a:	b29a      	uxth	r2, r3
 800878c:	4b5a      	ldr	r3, [pc, #360]	; (80088f8 <tcp_listen_input+0x200>)
 800878e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <tcp_listen_input+0xb8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6910      	ldr	r0, [r2, #16]
 80087a2:	f04f 32ff 	mov.w	r2, #4294967295
 80087a6:	2100      	movs	r1, #0
 80087a8:	4798      	blx	r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	73bb      	strb	r3, [r7, #14]
      return;
 80087ae:	e08b      	b.n	80088c8 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80087b0:	23f0      	movs	r3, #240	; 0xf0
 80087b2:	73bb      	strb	r3, [r7, #14]
      return;
 80087b4:	e088      	b.n	80088c8 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80087b6:	4b51      	ldr	r3, [pc, #324]	; (80088fc <tcp_listen_input+0x204>)
 80087b8:	695a      	ldr	r2, [r3, #20]
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80087be:	4b4f      	ldr	r3, [pc, #316]	; (80088fc <tcp_listen_input+0x204>)
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	8ada      	ldrh	r2, [r3, #22]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80087ce:	4b47      	ldr	r3, [pc, #284]	; (80088ec <tcp_listen_input+0x1f4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2203      	movs	r2, #3
 80087de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80087e0:	4b41      	ldr	r3, [pc, #260]	; (80088e8 <tcp_listen_input+0x1f0>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80087f2:	6978      	ldr	r0, [r7, #20]
 80087f4:	f7ff f9d0 	bl	8007b98 <tcp_next_iss>
 80087f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008812:	4b35      	ldr	r3, [pc, #212]	; (80088e8 <tcp_listen_input+0x1f0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	1e5a      	subs	r2, r3, #1
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7a5b      	ldrb	r3, [r3, #9]
 800882e:	f003 030c 	and.w	r3, r3, #12
 8008832:	b2da      	uxtb	r2, r3
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	7a1a      	ldrb	r2, [r3, #8]
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008840:	4b2f      	ldr	r3, [pc, #188]	; (8008900 <tcp_listen_input+0x208>)
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	60da      	str	r2, [r3, #12]
 8008848:	4a2d      	ldr	r2, [pc, #180]	; (8008900 <tcp_listen_input+0x208>)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	6013      	str	r3, [r2, #0]
 800884e:	f003 f91d 	bl	800ba8c <tcp_timer_needed>
 8008852:	4b2c      	ldr	r3, [pc, #176]	; (8008904 <tcp_listen_input+0x20c>)
 8008854:	2201      	movs	r2, #1
 8008856:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008858:	6978      	ldr	r0, [r7, #20]
 800885a:	f001 fd8f 	bl	800a37c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800885e:	4b23      	ldr	r3, [pc, #140]	; (80088ec <tcp_listen_input+0x1f4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	89db      	ldrh	r3, [r3, #14]
 8008864:	b29a      	uxth	r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	3304      	adds	r3, #4
 8008880:	4618      	mov	r0, r3
 8008882:	f004 fdf9 	bl	800d478 <ip4_route>
 8008886:	4601      	mov	r1, r0
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	3304      	adds	r3, #4
 800888c:	461a      	mov	r2, r3
 800888e:	4620      	mov	r0, r4
 8008890:	f7ff f9a8 	bl	8007be4 <tcp_eff_send_mss_netif>
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800889c:	2112      	movs	r1, #18
 800889e:	6978      	ldr	r0, [r7, #20]
 80088a0:	f002 f858 	bl	800a954 <tcp_enqueue_flags>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80088a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 80088b0:	2100      	movs	r1, #0
 80088b2:	6978      	ldr	r0, [r7, #20]
 80088b4:	f7fe f8cc 	bl	8006a50 <tcp_abandon>
      return;
 80088b8:	e006      	b.n	80088c8 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 80088ba:	6978      	ldr	r0, [r7, #20]
 80088bc:	f002 f93a 	bl	800ab34 <tcp_output>
  return;
 80088c0:	e001      	b.n	80088c6 <tcp_listen_input+0x1ce>
    return;
 80088c2:	bf00      	nop
 80088c4:	e000      	b.n	80088c8 <tcp_listen_input+0x1d0>
  return;
 80088c6:	bf00      	nop
}
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd90      	pop	{r4, r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000164 	.word	0x20000164
 80088d4:	08010ce8 	.word	0x08010ce8
 80088d8:	08010ee0 	.word	0x08010ee0
 80088dc:	08010d34 	.word	0x08010d34
 80088e0:	2000015c 	.word	0x2000015c
 80088e4:	20000162 	.word	0x20000162
 80088e8:	20000158 	.word	0x20000158
 80088ec:	20000148 	.word	0x20000148
 80088f0:	200040c8 	.word	0x200040c8
 80088f4:	200040cc 	.word	0x200040cc
 80088f8:	200075ac 	.word	0x200075ac
 80088fc:	200040b8 	.word	0x200040b8
 8008900:	20007688 	.word	0x20007688
 8008904:	20007684 	.word	0x20007684

08008908 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af04      	add	r7, sp, #16
 800890e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008910:	4b2f      	ldr	r3, [pc, #188]	; (80089d0 <tcp_timewait_input+0xc8>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d153      	bne.n	80089c4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <tcp_timewait_input+0x28>
 8008922:	4b2c      	ldr	r3, [pc, #176]	; (80089d4 <tcp_timewait_input+0xcc>)
 8008924:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008928:	492b      	ldr	r1, [pc, #172]	; (80089d8 <tcp_timewait_input+0xd0>)
 800892a:	482c      	ldr	r0, [pc, #176]	; (80089dc <tcp_timewait_input+0xd4>)
 800892c:	f006 f936 	bl	800eb9c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008930:	4b27      	ldr	r3, [pc, #156]	; (80089d0 <tcp_timewait_input+0xc8>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d02a      	beq.n	8008992 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800893c:	4b28      	ldr	r3, [pc, #160]	; (80089e0 <tcp_timewait_input+0xd8>)
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	db2d      	blt.n	80089a6 <tcp_timewait_input+0x9e>
 800894a:	4b25      	ldr	r3, [pc, #148]	; (80089e0 <tcp_timewait_input+0xd8>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008956:	440b      	add	r3, r1
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	dc23      	bgt.n	80089a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800895e:	4b21      	ldr	r3, [pc, #132]	; (80089e4 <tcp_timewait_input+0xdc>)
 8008960:	6819      	ldr	r1, [r3, #0]
 8008962:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <tcp_timewait_input+0xe0>)
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <tcp_timewait_input+0xd8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800896e:	4b1f      	ldr	r3, [pc, #124]	; (80089ec <tcp_timewait_input+0xe4>)
 8008970:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008972:	885b      	ldrh	r3, [r3, #2]
 8008974:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008976:	4a1d      	ldr	r2, [pc, #116]	; (80089ec <tcp_timewait_input+0xe4>)
 8008978:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800897a:	8812      	ldrh	r2, [r2, #0]
 800897c:	b292      	uxth	r2, r2
 800897e:	9202      	str	r2, [sp, #8]
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	4b1b      	ldr	r3, [pc, #108]	; (80089f0 <tcp_timewait_input+0xe8>)
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	4b1b      	ldr	r3, [pc, #108]	; (80089f4 <tcp_timewait_input+0xec>)
 8008988:	4602      	mov	r2, r0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f002 febc 	bl	800b708 <tcp_rst>
      return;
 8008990:	e01b      	b.n	80089ca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008992:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <tcp_timewait_input+0xc8>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800899e:	4b16      	ldr	r3, [pc, #88]	; (80089f8 <tcp_timewait_input+0xf0>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <tcp_timewait_input+0xe0>)
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00c      	beq.n	80089c8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8b5b      	ldrh	r3, [r3, #26]
 80089b2:	f043 0302 	orr.w	r3, r3, #2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 f8b9 	bl	800ab34 <tcp_output>
  }
  return;
 80089c2:	e001      	b.n	80089c8 <tcp_timewait_input+0xc0>
    return;
 80089c4:	bf00      	nop
 80089c6:	e000      	b.n	80089ca <tcp_timewait_input+0xc2>
  return;
 80089c8:	bf00      	nop
}
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000164 	.word	0x20000164
 80089d4:	08010ce8 	.word	0x08010ce8
 80089d8:	08010f00 	.word	0x08010f00
 80089dc:	08010d34 	.word	0x08010d34
 80089e0:	20000158 	.word	0x20000158
 80089e4:	2000015c 	.word	0x2000015c
 80089e8:	20000162 	.word	0x20000162
 80089ec:	20000148 	.word	0x20000148
 80089f0:	200040c8 	.word	0x200040c8
 80089f4:	200040cc 	.word	0x200040cc
 80089f8:	2000768c 	.word	0x2000768c

080089fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80089fc:	b590      	push	{r4, r7, lr}
 80089fe:	b08d      	sub	sp, #52	; 0x34
 8008a00:	af04      	add	r7, sp, #16
 8008a02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <tcp_process+0x24>
 8008a12:	4ba5      	ldr	r3, [pc, #660]	; (8008ca8 <tcp_process+0x2ac>)
 8008a14:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008a18:	49a4      	ldr	r1, [pc, #656]	; (8008cac <tcp_process+0x2b0>)
 8008a1a:	48a5      	ldr	r0, [pc, #660]	; (8008cb0 <tcp_process+0x2b4>)
 8008a1c:	f006 f8be 	bl	800eb9c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008a20:	4ba4      	ldr	r3, [pc, #656]	; (8008cb4 <tcp_process+0x2b8>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	f003 0304 	and.w	r3, r3, #4
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d04e      	beq.n	8008aca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	7d1b      	ldrb	r3, [r3, #20]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d108      	bne.n	8008a46 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a38:	4b9f      	ldr	r3, [pc, #636]	; (8008cb8 <tcp_process+0x2bc>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d123      	bne.n	8008a88 <tcp_process+0x8c>
        acceptable = 1;
 8008a40:	2301      	movs	r3, #1
 8008a42:	76fb      	strb	r3, [r7, #27]
 8008a44:	e020      	b.n	8008a88 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a4a:	4b9c      	ldr	r3, [pc, #624]	; (8008cbc <tcp_process+0x2c0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d102      	bne.n	8008a58 <tcp_process+0x5c>
        acceptable = 1;
 8008a52:	2301      	movs	r3, #1
 8008a54:	76fb      	strb	r3, [r7, #27]
 8008a56:	e017      	b.n	8008a88 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008a58:	4b98      	ldr	r3, [pc, #608]	; (8008cbc <tcp_process+0x2c0>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	db10      	blt.n	8008a88 <tcp_process+0x8c>
 8008a66:	4b95      	ldr	r3, [pc, #596]	; (8008cbc <tcp_process+0x2c0>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a72:	440b      	add	r3, r1
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	dc06      	bgt.n	8008a88 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	8b5b      	ldrh	r3, [r3, #26]
 8008a7e:	f043 0302 	orr.w	r3, r3, #2
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008a88:	7efb      	ldrb	r3, [r7, #27]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d01b      	beq.n	8008ac6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	7d1b      	ldrb	r3, [r3, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <tcp_process+0xa8>
 8008a96:	4b84      	ldr	r3, [pc, #528]	; (8008ca8 <tcp_process+0x2ac>)
 8008a98:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008a9c:	4988      	ldr	r1, [pc, #544]	; (8008cc0 <tcp_process+0x2c4>)
 8008a9e:	4884      	ldr	r0, [pc, #528]	; (8008cb0 <tcp_process+0x2b4>)
 8008aa0:	f006 f87c 	bl	800eb9c <iprintf>
      recv_flags |= TF_RESET;
 8008aa4:	4b87      	ldr	r3, [pc, #540]	; (8008cc4 <tcp_process+0x2c8>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	f043 0308 	orr.w	r3, r3, #8
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	4b85      	ldr	r3, [pc, #532]	; (8008cc4 <tcp_process+0x2c8>)
 8008ab0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	8b5b      	ldrh	r3, [r3, #26]
 8008ab6:	f023 0301 	bic.w	r3, r3, #1
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008ac0:	f06f 030d 	mvn.w	r3, #13
 8008ac4:	e37a      	b.n	80091bc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e378      	b.n	80091bc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008aca:	4b7a      	ldr	r3, [pc, #488]	; (8008cb4 <tcp_process+0x2b8>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d010      	beq.n	8008af8 <tcp_process+0xfc>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	7d1b      	ldrb	r3, [r3, #20]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d00c      	beq.n	8008af8 <tcp_process+0xfc>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	7d1b      	ldrb	r3, [r3, #20]
 8008ae2:	2b03      	cmp	r3, #3
 8008ae4:	d008      	beq.n	8008af8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	8b5b      	ldrh	r3, [r3, #26]
 8008aea:	f043 0302 	orr.w	r3, r3, #2
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	e361      	b.n	80091bc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	8b5b      	ldrh	r3, [r3, #26]
 8008afc:	f003 0310 	and.w	r3, r3, #16
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008b04:	4b70      	ldr	r3, [pc, #448]	; (8008cc8 <tcp_process+0x2cc>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 fc2d 	bl	800a37c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	7d1b      	ldrb	r3, [r3, #20]
 8008b26:	3b02      	subs	r3, #2
 8008b28:	2b07      	cmp	r3, #7
 8008b2a:	f200 8337 	bhi.w	800919c <tcp_process+0x7a0>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <tcp_process+0x138>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b55 	.word	0x08008b55
 8008b38:	08008d85 	.word	0x08008d85
 8008b3c:	08008efd 	.word	0x08008efd
 8008b40:	08008f27 	.word	0x08008f27
 8008b44:	0800904b 	.word	0x0800904b
 8008b48:	08008efd 	.word	0x08008efd
 8008b4c:	080090d7 	.word	0x080090d7
 8008b50:	08009167 	.word	0x08009167
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008b54:	4b57      	ldr	r3, [pc, #348]	; (8008cb4 <tcp_process+0x2b8>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 80e4 	beq.w	8008d2a <tcp_process+0x32e>
 8008b62:	4b54      	ldr	r3, [pc, #336]	; (8008cb4 <tcp_process+0x2b8>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80dd 	beq.w	8008d2a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	4b50      	ldr	r3, [pc, #320]	; (8008cb8 <tcp_process+0x2bc>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	f040 80d5 	bne.w	8008d2a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008b80:	4b4e      	ldr	r3, [pc, #312]	; (8008cbc <tcp_process+0x2c0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008b92:	4b49      	ldr	r3, [pc, #292]	; (8008cb8 <tcp_process+0x2bc>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008b9a:	4b4c      	ldr	r3, [pc, #304]	; (8008ccc <tcp_process+0x2d0>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	89db      	ldrh	r3, [r3, #14]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008bb4:	4b41      	ldr	r3, [pc, #260]	; (8008cbc <tcp_process+0x2c0>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	1e5a      	subs	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2204      	movs	r2, #4
 8008bc2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f004 fc53 	bl	800d478 <ip4_route>
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f7ff f802 	bl	8007be4 <tcp_eff_send_mss_netif>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bec:	009a      	lsls	r2, r3, #2
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	f241 111c 	movw	r1, #4380	; 0x111c
 8008bf8:	428b      	cmp	r3, r1
 8008bfa:	bf38      	it	cc
 8008bfc:	460b      	movcc	r3, r1
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d204      	bcs.n	8008c0c <tcp_process+0x210>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	e00d      	b.n	8008c28 <tcp_process+0x22c>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	f241 121c 	movw	r2, #4380	; 0x111c
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d904      	bls.n	8008c24 <tcp_process+0x228>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	e001      	b.n	8008c28 <tcp_process+0x22c>
 8008c24:	f241 131c 	movw	r3, #4380	; 0x111c
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <tcp_process+0x24a>
 8008c38:	4b1b      	ldr	r3, [pc, #108]	; (8008ca8 <tcp_process+0x2ac>)
 8008c3a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008c3e:	4924      	ldr	r1, [pc, #144]	; (8008cd0 <tcp_process+0x2d4>)
 8008c40:	481b      	ldr	r0, [pc, #108]	; (8008cb0 <tcp_process+0x2b4>)
 8008c42:	f005 ffab 	bl	800eb9c <iprintf>
        --pcb->snd_queuelen;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d111      	bne.n	8008c86 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c66:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <tcp_process+0x280>
 8008c6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ca8 <tcp_process+0x2ac>)
 8008c70:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008c74:	4917      	ldr	r1, [pc, #92]	; (8008cd4 <tcp_process+0x2d8>)
 8008c76:	480e      	ldr	r0, [pc, #56]	; (8008cb0 <tcp_process+0x2b4>)
 8008c78:	f005 ff90 	bl	800eb9c <iprintf>
          pcb->unsent = rseg->next;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c84:	e003      	b.n	8008c8e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008c8e:	69f8      	ldr	r0, [r7, #28]
 8008c90:	f7fe fc87 	bl	80075a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d11d      	bne.n	8008cd8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ca2:	861a      	strh	r2, [r3, #48]	; 0x30
 8008ca4:	e01f      	b.n	8008ce6 <tcp_process+0x2ea>
 8008ca6:	bf00      	nop
 8008ca8:	08010ce8 	.word	0x08010ce8
 8008cac:	08010f20 	.word	0x08010f20
 8008cb0:	08010d34 	.word	0x08010d34
 8008cb4:	20000164 	.word	0x20000164
 8008cb8:	2000015c 	.word	0x2000015c
 8008cbc:	20000158 	.word	0x20000158
 8008cc0:	08010f3c 	.word	0x08010f3c
 8008cc4:	20000165 	.word	0x20000165
 8008cc8:	2000768c 	.word	0x2000768c
 8008ccc:	20000148 	.word	0x20000148
 8008cd0:	08010f5c 	.word	0x08010f5c
 8008cd4:	08010f74 	.word	0x08010f74
        } else {
          pcb->rtime = 0;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <tcp_process+0x30a>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6910      	ldr	r0, [r2, #16]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4798      	blx	r3
 8008d00:	4603      	mov	r3, r0
 8008d02:	76bb      	strb	r3, [r7, #26]
 8008d04:	e001      	b.n	8008d0a <tcp_process+0x30e>
 8008d06:	2300      	movs	r3, #0
 8008d08:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008d0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008d0e:	f113 0f0d 	cmn.w	r3, #13
 8008d12:	d102      	bne.n	8008d1a <tcp_process+0x31e>
          return ERR_ABRT;
 8008d14:	f06f 030c 	mvn.w	r3, #12
 8008d18:	e250      	b.n	80091bc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	8b5b      	ldrh	r3, [r3, #26]
 8008d1e:	f043 0302 	orr.w	r3, r3, #2
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008d28:	e23a      	b.n	80091a0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008d2a:	4b9d      	ldr	r3, [pc, #628]	; (8008fa0 <tcp_process+0x5a4>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	f003 0310 	and.w	r3, r3, #16
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 8234 	beq.w	80091a0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d38:	4b9a      	ldr	r3, [pc, #616]	; (8008fa4 <tcp_process+0x5a8>)
 8008d3a:	6819      	ldr	r1, [r3, #0]
 8008d3c:	4b9a      	ldr	r3, [pc, #616]	; (8008fa8 <tcp_process+0x5ac>)
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	4b9a      	ldr	r3, [pc, #616]	; (8008fac <tcp_process+0x5b0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d48:	4b99      	ldr	r3, [pc, #612]	; (8008fb0 <tcp_process+0x5b4>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d4c:	885b      	ldrh	r3, [r3, #2]
 8008d4e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d50:	4a97      	ldr	r2, [pc, #604]	; (8008fb0 <tcp_process+0x5b4>)
 8008d52:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d54:	8812      	ldrh	r2, [r2, #0]
 8008d56:	b292      	uxth	r2, r2
 8008d58:	9202      	str	r2, [sp, #8]
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	4b95      	ldr	r3, [pc, #596]	; (8008fb4 <tcp_process+0x5b8>)
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	4b95      	ldr	r3, [pc, #596]	; (8008fb8 <tcp_process+0x5bc>)
 8008d62:	4602      	mov	r2, r0
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f002 fccf 	bl	800b708 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d70:	2b05      	cmp	r3, #5
 8008d72:	f200 8215 	bhi.w	80091a0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f002 fa7f 	bl	800b280 <tcp_rexmit_rto>
      break;
 8008d82:	e20d      	b.n	80091a0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008d84:	4b86      	ldr	r3, [pc, #536]	; (8008fa0 <tcp_process+0x5a4>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 0310 	and.w	r3, r3, #16
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 80a1 	beq.w	8008ed4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d92:	4b84      	ldr	r3, [pc, #528]	; (8008fa4 <tcp_process+0x5a8>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	db7e      	blt.n	8008ea0 <tcp_process+0x4a4>
 8008da2:	4b80      	ldr	r3, [pc, #512]	; (8008fa4 <tcp_process+0x5a8>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dc77      	bgt.n	8008ea0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2204      	movs	r2, #4
 8008db4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008dbe:	23fa      	movs	r3, #250	; 0xfa
 8008dc0:	76bb      	strb	r3, [r7, #26]
 8008dc2:	e01d      	b.n	8008e00 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <tcp_process+0x3e0>
 8008dce:	4b7b      	ldr	r3, [pc, #492]	; (8008fbc <tcp_process+0x5c0>)
 8008dd0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008dd4:	497a      	ldr	r1, [pc, #488]	; (8008fc0 <tcp_process+0x5c4>)
 8008dd6:	487b      	ldr	r0, [pc, #492]	; (8008fc4 <tcp_process+0x5c8>)
 8008dd8:	f005 fee0 	bl	800eb9c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <tcp_process+0x400>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6910      	ldr	r0, [r2, #16]
 8008df0:	2200      	movs	r2, #0
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4798      	blx	r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	76bb      	strb	r3, [r7, #26]
 8008dfa:	e001      	b.n	8008e00 <tcp_process+0x404>
 8008dfc:	23f0      	movs	r3, #240	; 0xf0
 8008dfe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008e00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00a      	beq.n	8008e1e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008e08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e0c:	f113 0f0d 	cmn.w	r3, #13
 8008e10:	d002      	beq.n	8008e18 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7fd feda 	bl	8006bcc <tcp_abort>
            }
            return ERR_ABRT;
 8008e18:	f06f 030c 	mvn.w	r3, #12
 8008e1c:	e1ce      	b.n	80091bc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fae0 	bl	80093e4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008e24:	4b68      	ldr	r3, [pc, #416]	; (8008fc8 <tcp_process+0x5cc>)
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d005      	beq.n	8008e38 <tcp_process+0x43c>
            recv_acked--;
 8008e2c:	4b66      	ldr	r3, [pc, #408]	; (8008fc8 <tcp_process+0x5cc>)
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	4b64      	ldr	r3, [pc, #400]	; (8008fc8 <tcp_process+0x5cc>)
 8008e36:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e3c:	009a      	lsls	r2, r3, #2
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	f241 111c 	movw	r1, #4380	; 0x111c
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	bf38      	it	cc
 8008e4c:	460b      	movcc	r3, r1
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d204      	bcs.n	8008e5c <tcp_process+0x460>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	e00d      	b.n	8008e78 <tcp_process+0x47c>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e60:	005b      	lsls	r3, r3, #1
 8008e62:	f241 121c 	movw	r2, #4380	; 0x111c
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d904      	bls.n	8008e74 <tcp_process+0x478>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	e001      	b.n	8008e78 <tcp_process+0x47c>
 8008e74:	f241 131c 	movw	r3, #4380	; 0x111c
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008e7e:	4b53      	ldr	r3, [pc, #332]	; (8008fcc <tcp_process+0x5d0>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d037      	beq.n	8008efa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	8b5b      	ldrh	r3, [r3, #26]
 8008e8e:	f043 0302 	orr.w	r3, r3, #2
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2207      	movs	r2, #7
 8008e9c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008e9e:	e02c      	b.n	8008efa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ea0:	4b40      	ldr	r3, [pc, #256]	; (8008fa4 <tcp_process+0x5a8>)
 8008ea2:	6819      	ldr	r1, [r3, #0]
 8008ea4:	4b40      	ldr	r3, [pc, #256]	; (8008fa8 <tcp_process+0x5ac>)
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4b40      	ldr	r3, [pc, #256]	; (8008fac <tcp_process+0x5b0>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008eb0:	4b3f      	ldr	r3, [pc, #252]	; (8008fb0 <tcp_process+0x5b4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008eb4:	885b      	ldrh	r3, [r3, #2]
 8008eb6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008eb8:	4a3d      	ldr	r2, [pc, #244]	; (8008fb0 <tcp_process+0x5b4>)
 8008eba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ebc:	8812      	ldrh	r2, [r2, #0]
 8008ebe:	b292      	uxth	r2, r2
 8008ec0:	9202      	str	r2, [sp, #8]
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	4b3b      	ldr	r3, [pc, #236]	; (8008fb4 <tcp_process+0x5b8>)
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	4b3b      	ldr	r3, [pc, #236]	; (8008fb8 <tcp_process+0x5bc>)
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f002 fc1b 	bl	800b708 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008ed2:	e167      	b.n	80091a4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008ed4:	4b32      	ldr	r3, [pc, #200]	; (8008fa0 <tcp_process+0x5a4>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8161 	beq.w	80091a4 <tcp_process+0x7a8>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	1e5a      	subs	r2, r3, #1
 8008ee8:	4b30      	ldr	r3, [pc, #192]	; (8008fac <tcp_process+0x5b0>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	f040 8159 	bne.w	80091a4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f002 f9e6 	bl	800b2c4 <tcp_rexmit>
      break;
 8008ef8:	e154      	b.n	80091a4 <tcp_process+0x7a8>
 8008efa:	e153      	b.n	80091a4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa71 	bl	80093e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008f02:	4b32      	ldr	r3, [pc, #200]	; (8008fcc <tcp_process+0x5d0>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 814c 	beq.w	80091a8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	8b5b      	ldrh	r3, [r3, #26]
 8008f14:	f043 0302 	orr.w	r3, r3, #2
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2207      	movs	r2, #7
 8008f22:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008f24:	e140      	b.n	80091a8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa5c 	bl	80093e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008f2c:	4b27      	ldr	r3, [pc, #156]	; (8008fcc <tcp_process+0x5d0>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d071      	beq.n	800901c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f38:	4b19      	ldr	r3, [pc, #100]	; (8008fa0 <tcp_process+0x5a4>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 0310 	and.w	r3, r3, #16
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d060      	beq.n	8009006 <tcp_process+0x60a>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f48:	4b16      	ldr	r3, [pc, #88]	; (8008fa4 <tcp_process+0x5a8>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d15a      	bne.n	8009006 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d156      	bne.n	8009006 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	8b5b      	ldrh	r3, [r3, #26]
 8008f5c:	f043 0302 	orr.w	r3, r3, #2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7fe fd32 	bl	80079d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008f6c:	4b18      	ldr	r3, [pc, #96]	; (8008fd0 <tcp_process+0x5d4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d105      	bne.n	8008f82 <tcp_process+0x586>
 8008f76:	4b16      	ldr	r3, [pc, #88]	; (8008fd0 <tcp_process+0x5d4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	4a14      	ldr	r2, [pc, #80]	; (8008fd0 <tcp_process+0x5d4>)
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	e02e      	b.n	8008fe0 <tcp_process+0x5e4>
 8008f82:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <tcp_process+0x5d4>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e027      	b.n	8008fda <tcp_process+0x5de>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d11f      	bne.n	8008fd4 <tcp_process+0x5d8>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	60da      	str	r2, [r3, #12]
 8008f9c:	e020      	b.n	8008fe0 <tcp_process+0x5e4>
 8008f9e:	bf00      	nop
 8008fa0:	20000164 	.word	0x20000164
 8008fa4:	2000015c 	.word	0x2000015c
 8008fa8:	20000162 	.word	0x20000162
 8008fac:	20000158 	.word	0x20000158
 8008fb0:	20000148 	.word	0x20000148
 8008fb4:	200040c8 	.word	0x200040c8
 8008fb8:	200040cc 	.word	0x200040cc
 8008fbc:	08010ce8 	.word	0x08010ce8
 8008fc0:	08010f88 	.word	0x08010f88
 8008fc4:	08010d34 	.word	0x08010d34
 8008fc8:	20000160 	.word	0x20000160
 8008fcc:	20000165 	.word	0x20000165
 8008fd0:	20007688 	.word	0x20007688
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1d4      	bne.n	8008f8a <tcp_process+0x58e>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	60da      	str	r2, [r3, #12]
 8008fe6:	4b77      	ldr	r3, [pc, #476]	; (80091c4 <tcp_process+0x7c8>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	220a      	movs	r2, #10
 8008ff0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008ff2:	4b75      	ldr	r3, [pc, #468]	; (80091c8 <tcp_process+0x7cc>)
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	60da      	str	r2, [r3, #12]
 8008ffa:	4a73      	ldr	r2, [pc, #460]	; (80091c8 <tcp_process+0x7cc>)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	f002 fd44 	bl	800ba8c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009004:	e0d2      	b.n	80091ac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	8b5b      	ldrh	r3, [r3, #26]
 800900a:	f043 0302 	orr.w	r3, r3, #2
 800900e:	b29a      	uxth	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2208      	movs	r2, #8
 8009018:	751a      	strb	r2, [r3, #20]
      break;
 800901a:	e0c7      	b.n	80091ac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800901c:	4b6b      	ldr	r3, [pc, #428]	; (80091cc <tcp_process+0x7d0>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 80c1 	beq.w	80091ac <tcp_process+0x7b0>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800902e:	4b68      	ldr	r3, [pc, #416]	; (80091d0 <tcp_process+0x7d4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	f040 80ba 	bne.w	80091ac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800903c:	2b00      	cmp	r3, #0
 800903e:	f040 80b5 	bne.w	80091ac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2206      	movs	r2, #6
 8009046:	751a      	strb	r2, [r3, #20]
      break;
 8009048:	e0b0      	b.n	80091ac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f9ca 	bl	80093e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009050:	4b60      	ldr	r3, [pc, #384]	; (80091d4 <tcp_process+0x7d8>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	f003 0320 	and.w	r3, r3, #32
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80a9 	beq.w	80091b0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	8b5b      	ldrh	r3, [r3, #26]
 8009062:	f043 0302 	orr.w	r3, r3, #2
 8009066:	b29a      	uxth	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7fe fcaf 	bl	80079d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009072:	4b59      	ldr	r3, [pc, #356]	; (80091d8 <tcp_process+0x7dc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	429a      	cmp	r2, r3
 800907a:	d105      	bne.n	8009088 <tcp_process+0x68c>
 800907c:	4b56      	ldr	r3, [pc, #344]	; (80091d8 <tcp_process+0x7dc>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	4a55      	ldr	r2, [pc, #340]	; (80091d8 <tcp_process+0x7dc>)
 8009084:	6013      	str	r3, [r2, #0]
 8009086:	e013      	b.n	80090b0 <tcp_process+0x6b4>
 8009088:	4b53      	ldr	r3, [pc, #332]	; (80091d8 <tcp_process+0x7dc>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	613b      	str	r3, [r7, #16]
 800908e:	e00c      	b.n	80090aa <tcp_process+0x6ae>
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d104      	bne.n	80090a4 <tcp_process+0x6a8>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	68da      	ldr	r2, [r3, #12]
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	60da      	str	r2, [r3, #12]
 80090a2:	e005      	b.n	80090b0 <tcp_process+0x6b4>
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	613b      	str	r3, [r7, #16]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1ef      	bne.n	8009090 <tcp_process+0x694>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	60da      	str	r2, [r3, #12]
 80090b6:	4b43      	ldr	r3, [pc, #268]	; (80091c4 <tcp_process+0x7c8>)
 80090b8:	2201      	movs	r2, #1
 80090ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	220a      	movs	r2, #10
 80090c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80090c2:	4b41      	ldr	r3, [pc, #260]	; (80091c8 <tcp_process+0x7cc>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60da      	str	r2, [r3, #12]
 80090ca:	4a3f      	ldr	r2, [pc, #252]	; (80091c8 <tcp_process+0x7cc>)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	f002 fcdc 	bl	800ba8c <tcp_timer_needed>
      }
      break;
 80090d4:	e06c      	b.n	80091b0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f984 	bl	80093e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80090dc:	4b3b      	ldr	r3, [pc, #236]	; (80091cc <tcp_process+0x7d0>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	f003 0310 	and.w	r3, r3, #16
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d065      	beq.n	80091b4 <tcp_process+0x7b8>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090ec:	4b38      	ldr	r3, [pc, #224]	; (80091d0 <tcp_process+0x7d4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d15f      	bne.n	80091b4 <tcp_process+0x7b8>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d15b      	bne.n	80091b4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fe fc67 	bl	80079d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009102:	4b35      	ldr	r3, [pc, #212]	; (80091d8 <tcp_process+0x7dc>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	429a      	cmp	r2, r3
 800910a:	d105      	bne.n	8009118 <tcp_process+0x71c>
 800910c:	4b32      	ldr	r3, [pc, #200]	; (80091d8 <tcp_process+0x7dc>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	4a31      	ldr	r2, [pc, #196]	; (80091d8 <tcp_process+0x7dc>)
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	e013      	b.n	8009140 <tcp_process+0x744>
 8009118:	4b2f      	ldr	r3, [pc, #188]	; (80091d8 <tcp_process+0x7dc>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	e00c      	b.n	800913a <tcp_process+0x73e>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d104      	bne.n	8009134 <tcp_process+0x738>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	60da      	str	r2, [r3, #12]
 8009132:	e005      	b.n	8009140 <tcp_process+0x744>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1ef      	bne.n	8009120 <tcp_process+0x724>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	60da      	str	r2, [r3, #12]
 8009146:	4b1f      	ldr	r3, [pc, #124]	; (80091c4 <tcp_process+0x7c8>)
 8009148:	2201      	movs	r2, #1
 800914a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	220a      	movs	r2, #10
 8009150:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009152:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <tcp_process+0x7cc>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	4a1b      	ldr	r2, [pc, #108]	; (80091c8 <tcp_process+0x7cc>)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	f002 fc94 	bl	800ba8c <tcp_timer_needed>
      }
      break;
 8009164:	e026      	b.n	80091b4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f93c 	bl	80093e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800916c:	4b17      	ldr	r3, [pc, #92]	; (80091cc <tcp_process+0x7d0>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 0310 	and.w	r3, r3, #16
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01f      	beq.n	80091b8 <tcp_process+0x7bc>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800917c:	4b14      	ldr	r3, [pc, #80]	; (80091d0 <tcp_process+0x7d4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d119      	bne.n	80091b8 <tcp_process+0x7bc>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d115      	bne.n	80091b8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800918c:	4b11      	ldr	r3, [pc, #68]	; (80091d4 <tcp_process+0x7d8>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f043 0310 	orr.w	r3, r3, #16
 8009194:	b2da      	uxtb	r2, r3
 8009196:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <tcp_process+0x7d8>)
 8009198:	701a      	strb	r2, [r3, #0]
      }
      break;
 800919a:	e00d      	b.n	80091b8 <tcp_process+0x7bc>
    default:
      break;
 800919c:	bf00      	nop
 800919e:	e00c      	b.n	80091ba <tcp_process+0x7be>
      break;
 80091a0:	bf00      	nop
 80091a2:	e00a      	b.n	80091ba <tcp_process+0x7be>
      break;
 80091a4:	bf00      	nop
 80091a6:	e008      	b.n	80091ba <tcp_process+0x7be>
      break;
 80091a8:	bf00      	nop
 80091aa:	e006      	b.n	80091ba <tcp_process+0x7be>
      break;
 80091ac:	bf00      	nop
 80091ae:	e004      	b.n	80091ba <tcp_process+0x7be>
      break;
 80091b0:	bf00      	nop
 80091b2:	e002      	b.n	80091ba <tcp_process+0x7be>
      break;
 80091b4:	bf00      	nop
 80091b6:	e000      	b.n	80091ba <tcp_process+0x7be>
      break;
 80091b8:	bf00      	nop
  }
  return ERR_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3724      	adds	r7, #36	; 0x24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd90      	pop	{r4, r7, pc}
 80091c4:	20007684 	.word	0x20007684
 80091c8:	20007698 	.word	0x20007698
 80091cc:	20000164 	.word	0x20000164
 80091d0:	2000015c 	.word	0x2000015c
 80091d4:	20000165 	.word	0x20000165
 80091d8:	20007688 	.word	0x20007688

080091dc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80091dc:	b590      	push	{r4, r7, lr}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d106      	bne.n	80091fa <tcp_oos_insert_segment+0x1e>
 80091ec:	4b3b      	ldr	r3, [pc, #236]	; (80092dc <tcp_oos_insert_segment+0x100>)
 80091ee:	f240 421f 	movw	r2, #1055	; 0x41f
 80091f2:	493b      	ldr	r1, [pc, #236]	; (80092e0 <tcp_oos_insert_segment+0x104>)
 80091f4:	483b      	ldr	r0, [pc, #236]	; (80092e4 <tcp_oos_insert_segment+0x108>)
 80091f6:	f005 fcd1 	bl	800eb9c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	899b      	ldrh	r3, [r3, #12]
 8009200:	b29b      	uxth	r3, r3
 8009202:	4618      	mov	r0, r3
 8009204:	f7fb fafa 	bl	80047fc <lwip_htons>
 8009208:	4603      	mov	r3, r0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d028      	beq.n	8009266 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009214:	6838      	ldr	r0, [r7, #0]
 8009216:	f7fe f9af 	bl	8007578 <tcp_segs_free>
    next = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	e056      	b.n	80092ce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	899b      	ldrh	r3, [r3, #12]
 8009226:	b29b      	uxth	r3, r3
 8009228:	4618      	mov	r0, r3
 800922a:	f7fb fae7 	bl	80047fc <lwip_htons>
 800922e:	4603      	mov	r3, r0
 8009230:	b2db      	uxtb	r3, r3
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00d      	beq.n	8009256 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	899b      	ldrh	r3, [r3, #12]
 8009240:	b29c      	uxth	r4, r3
 8009242:	2001      	movs	r0, #1
 8009244:	f7fb fada 	bl	80047fc <lwip_htons>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	4322      	orrs	r2, r4
 8009252:	b292      	uxth	r2, r2
 8009254:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7fe f99e 	bl	80075a2 <tcp_seg_free>
    while (next &&
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00e      	beq.n	800928a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	891b      	ldrh	r3, [r3, #8]
 8009270:	461a      	mov	r2, r3
 8009272:	4b1d      	ldr	r3, [pc, #116]	; (80092e8 <tcp_oos_insert_segment+0x10c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	441a      	add	r2, r3
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	8909      	ldrh	r1, [r1, #8]
 8009282:	440b      	add	r3, r1
 8009284:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009286:	2b00      	cmp	r3, #0
 8009288:	daca      	bge.n	8009220 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01e      	beq.n	80092ce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	891b      	ldrh	r3, [r3, #8]
 8009294:	461a      	mov	r2, r3
 8009296:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <tcp_oos_insert_segment+0x10c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	441a      	add	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd12      	ble.n	80092ce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	4b0d      	ldr	r3, [pc, #52]	; (80092e8 <tcp_oos_insert_segment+0x10c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	891b      	ldrh	r3, [r3, #8]
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f7fc fd69 	bl	8005da0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	601a      	str	r2, [r3, #0]
}
 80092d4:	bf00      	nop
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd90      	pop	{r4, r7, pc}
 80092dc:	08010ce8 	.word	0x08010ce8
 80092e0:	08010fa8 	.word	0x08010fa8
 80092e4:	08010d34 	.word	0x08010d34
 80092e8:	20000158 	.word	0x20000158

080092ec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80092ec:	b5b0      	push	{r4, r5, r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80092fa:	e03e      	b.n	800937a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	4618      	mov	r0, r3
 800930c:	f7fc ff56 	bl	80061bc <pbuf_clen>
 8009310:	4603      	mov	r3, r0
 8009312:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800931a:	8a7a      	ldrh	r2, [r7, #18]
 800931c:	429a      	cmp	r2, r3
 800931e:	d906      	bls.n	800932e <tcp_free_acked_segments+0x42>
 8009320:	4b2a      	ldr	r3, [pc, #168]	; (80093cc <tcp_free_acked_segments+0xe0>)
 8009322:	f240 4257 	movw	r2, #1111	; 0x457
 8009326:	492a      	ldr	r1, [pc, #168]	; (80093d0 <tcp_free_acked_segments+0xe4>)
 8009328:	482a      	ldr	r0, [pc, #168]	; (80093d4 <tcp_free_acked_segments+0xe8>)
 800932a:	f005 fc37 	bl	800eb9c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009334:	8a7b      	ldrh	r3, [r7, #18]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	891a      	ldrh	r2, [r3, #8]
 8009344:	4b24      	ldr	r3, [pc, #144]	; (80093d8 <tcp_free_acked_segments+0xec>)
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	4413      	add	r3, r2
 800934a:	b29a      	uxth	r2, r3
 800934c:	4b22      	ldr	r3, [pc, #136]	; (80093d8 <tcp_free_acked_segments+0xec>)
 800934e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009350:	6978      	ldr	r0, [r7, #20]
 8009352:	f7fe f926 	bl	80075a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00c      	beq.n	800937a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d109      	bne.n	800937a <tcp_free_acked_segments+0x8e>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d106      	bne.n	800937a <tcp_free_acked_segments+0x8e>
 800936c:	4b17      	ldr	r3, [pc, #92]	; (80093cc <tcp_free_acked_segments+0xe0>)
 800936e:	f240 4261 	movw	r2, #1121	; 0x461
 8009372:	491a      	ldr	r1, [pc, #104]	; (80093dc <tcp_free_acked_segments+0xf0>)
 8009374:	4817      	ldr	r0, [pc, #92]	; (80093d4 <tcp_free_acked_segments+0xe8>)
 8009376:	f005 fc11 	bl	800eb9c <iprintf>
  while (seg_list != NULL &&
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d020      	beq.n	80093c2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	4618      	mov	r0, r3
 8009388:	f7fb fa4d 	bl	8004826 <lwip_htonl>
 800938c:	4604      	mov	r4, r0
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	891b      	ldrh	r3, [r3, #8]
 8009392:	461d      	mov	r5, r3
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	899b      	ldrh	r3, [r3, #12]
 800939a:	b29b      	uxth	r3, r3
 800939c:	4618      	mov	r0, r3
 800939e:	f7fb fa2d 	bl	80047fc <lwip_htons>
 80093a2:	4603      	mov	r3, r0
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	f003 0303 	and.w	r3, r3, #3
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <tcp_free_acked_segments+0xc6>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e000      	b.n	80093b4 <tcp_free_acked_segments+0xc8>
 80093b2:	2300      	movs	r3, #0
 80093b4:	442b      	add	r3, r5
 80093b6:	18e2      	adds	r2, r4, r3
 80093b8:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <tcp_free_acked_segments+0xf4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dd9c      	ble.n	80092fc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80093c2:	68bb      	ldr	r3, [r7, #8]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3718      	adds	r7, #24
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bdb0      	pop	{r4, r5, r7, pc}
 80093cc:	08010ce8 	.word	0x08010ce8
 80093d0:	08010fd0 	.word	0x08010fd0
 80093d4:	08010d34 	.word	0x08010d34
 80093d8:	20000160 	.word	0x20000160
 80093dc:	08010ff8 	.word	0x08010ff8
 80093e0:	2000015c 	.word	0x2000015c

080093e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80093e4:	b5b0      	push	{r4, r5, r7, lr}
 80093e6:	b094      	sub	sp, #80	; 0x50
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <tcp_receive+0x20>
 80093f6:	4ba6      	ldr	r3, [pc, #664]	; (8009690 <tcp_receive+0x2ac>)
 80093f8:	f240 427b 	movw	r2, #1147	; 0x47b
 80093fc:	49a5      	ldr	r1, [pc, #660]	; (8009694 <tcp_receive+0x2b0>)
 80093fe:	48a6      	ldr	r0, [pc, #664]	; (8009698 <tcp_receive+0x2b4>)
 8009400:	f005 fbcc 	bl	800eb9c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7d1b      	ldrb	r3, [r3, #20]
 8009408:	2b03      	cmp	r3, #3
 800940a:	d806      	bhi.n	800941a <tcp_receive+0x36>
 800940c:	4ba0      	ldr	r3, [pc, #640]	; (8009690 <tcp_receive+0x2ac>)
 800940e:	f240 427c 	movw	r2, #1148	; 0x47c
 8009412:	49a2      	ldr	r1, [pc, #648]	; (800969c <tcp_receive+0x2b8>)
 8009414:	48a0      	ldr	r0, [pc, #640]	; (8009698 <tcp_receive+0x2b4>)
 8009416:	f005 fbc1 	bl	800eb9c <iprintf>

  if (flags & TCP_ACK) {
 800941a:	4ba1      	ldr	r3, [pc, #644]	; (80096a0 <tcp_receive+0x2bc>)
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	f003 0310 	and.w	r3, r3, #16
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 8263 	beq.w	80098ee <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009434:	4413      	add	r3, r2
 8009436:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800943c:	4b99      	ldr	r3, [pc, #612]	; (80096a4 <tcp_receive+0x2c0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	db1b      	blt.n	800947e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800944a:	4b96      	ldr	r3, [pc, #600]	; (80096a4 <tcp_receive+0x2c0>)
 800944c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800944e:	429a      	cmp	r2, r3
 8009450:	d106      	bne.n	8009460 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009456:	4b94      	ldr	r3, [pc, #592]	; (80096a8 <tcp_receive+0x2c4>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b00      	cmp	r3, #0
 800945e:	db0e      	blt.n	800947e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009464:	4b90      	ldr	r3, [pc, #576]	; (80096a8 <tcp_receive+0x2c4>)
 8009466:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009468:	429a      	cmp	r2, r3
 800946a:	d125      	bne.n	80094b8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800946c:	4b8f      	ldr	r3, [pc, #572]	; (80096ac <tcp_receive+0x2c8>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	89db      	ldrh	r3, [r3, #14]
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800947a:	429a      	cmp	r2, r3
 800947c:	d91c      	bls.n	80094b8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800947e:	4b8b      	ldr	r3, [pc, #556]	; (80096ac <tcp_receive+0x2c8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	89db      	ldrh	r3, [r3, #14]
 8009484:	b29a      	uxth	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009498:	429a      	cmp	r2, r3
 800949a:	d205      	bcs.n	80094a8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80094a8:	4b7e      	ldr	r3, [pc, #504]	; (80096a4 <tcp_receive+0x2c0>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80094b0:	4b7d      	ldr	r3, [pc, #500]	; (80096a8 <tcp_receive+0x2c4>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80094b8:	4b7b      	ldr	r3, [pc, #492]	; (80096a8 <tcp_receive+0x2c4>)
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dc58      	bgt.n	8009578 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80094c6:	4b7a      	ldr	r3, [pc, #488]	; (80096b0 <tcp_receive+0x2cc>)
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d14b      	bne.n	8009566 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80094d8:	4413      	add	r3, r2
 80094da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094dc:	429a      	cmp	r2, r3
 80094de:	d142      	bne.n	8009566 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	db3d      	blt.n	8009566 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094ee:	4b6e      	ldr	r3, [pc, #440]	; (80096a8 <tcp_receive+0x2c4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d137      	bne.n	8009566 <tcp_receive+0x182>
              found_dupack = 1;
 80094f6:	2301      	movs	r3, #1
 80094f8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009500:	2bff      	cmp	r3, #255	; 0xff
 8009502:	d007      	beq.n	8009514 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800950a:	3301      	adds	r3, #1
 800950c:	b2da      	uxtb	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800951a:	2b03      	cmp	r3, #3
 800951c:	d91b      	bls.n	8009556 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009528:	4413      	add	r3, r2
 800952a:	b29a      	uxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009532:	429a      	cmp	r2, r3
 8009534:	d30a      	bcc.n	800954c <tcp_receive+0x168>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009540:	4413      	add	r3, r2
 8009542:	b29a      	uxth	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800954a:	e004      	b.n	8009556 <tcp_receive+0x172>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009552:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800955c:	2b02      	cmp	r3, #2
 800955e:	d902      	bls.n	8009566 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 ff1b 	bl	800b39c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009568:	2b00      	cmp	r3, #0
 800956a:	f040 8160 	bne.w	800982e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009576:	e15a      	b.n	800982e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009578:	4b4b      	ldr	r3, [pc, #300]	; (80096a8 <tcp_receive+0x2c4>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	f2c0 814d 	blt.w	8009824 <tcp_receive+0x440>
 800958a:	4b47      	ldr	r3, [pc, #284]	; (80096a8 <tcp_receive+0x2c4>)
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	f300 8145 	bgt.w	8009824 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	8b5b      	ldrh	r3, [r3, #26]
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d010      	beq.n	80095c8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	8b5b      	ldrh	r3, [r3, #26]
 80095aa:	f023 0304 	bic.w	r3, r3, #4
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80095d6:	10db      	asrs	r3, r3, #3
 80095d8:	b21b      	sxth	r3, r3
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	b21a      	sxth	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80095f0:	4b2d      	ldr	r3, [pc, #180]	; (80096a8 <tcp_receive+0x2c4>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009608:	4b27      	ldr	r3, [pc, #156]	; (80096a8 <tcp_receive+0x2c4>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7d1b      	ldrb	r3, [r3, #20]
 8009614:	2b03      	cmp	r3, #3
 8009616:	f240 8096 	bls.w	8009746 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009626:	429a      	cmp	r2, r3
 8009628:	d244      	bcs.n	80096b4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8b5b      	ldrh	r3, [r3, #26]
 800962e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009632:	2b00      	cmp	r3, #0
 8009634:	d001      	beq.n	800963a <tcp_receive+0x256>
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <tcp_receive+0x258>
 800963a:	2302      	movs	r3, #2
 800963c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009640:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009644:	b29a      	uxth	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800964a:	fb12 f303 	smulbb	r3, r2, r3
 800964e:	b29b      	uxth	r3, r3
 8009650:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009652:	4293      	cmp	r3, r2
 8009654:	bf28      	it	cs
 8009656:	4613      	movcs	r3, r2
 8009658:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009660:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009662:	4413      	add	r3, r2
 8009664:	b29a      	uxth	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800966c:	429a      	cmp	r2, r3
 800966e:	d309      	bcc.n	8009684 <tcp_receive+0x2a0>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009676:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009678:	4413      	add	r3, r2
 800967a:	b29a      	uxth	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009682:	e060      	b.n	8009746 <tcp_receive+0x362>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800968a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800968e:	e05a      	b.n	8009746 <tcp_receive+0x362>
 8009690:	08010ce8 	.word	0x08010ce8
 8009694:	08011018 	.word	0x08011018
 8009698:	08010d34 	.word	0x08010d34
 800969c:	08011034 	.word	0x08011034
 80096a0:	20000164 	.word	0x20000164
 80096a4:	20000158 	.word	0x20000158
 80096a8:	2000015c 	.word	0x2000015c
 80096ac:	20000148 	.word	0x20000148
 80096b0:	20000162 	.word	0x20000162
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096bc:	4413      	add	r3, r2
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d309      	bcc.n	80096de <tcp_receive+0x2fa>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096d2:	4413      	add	r3, r2
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80096dc:	e004      	b.n	80096e8 <tcp_receive+0x304>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d326      	bcc.n	8009746 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	b29a      	uxth	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009718:	4413      	add	r3, r2
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009722:	429a      	cmp	r2, r3
 8009724:	d30a      	bcc.n	800973c <tcp_receive+0x358>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009730:	4413      	add	r3, r2
 8009732:	b29a      	uxth	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800973a:	e004      	b.n	8009746 <tcp_receive+0x362>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800974e:	4a98      	ldr	r2, [pc, #608]	; (80099b0 <tcp_receive+0x5cc>)
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fdcb 	bl	80092ec <tcp_free_acked_segments>
 8009756:	4602      	mov	r2, r0
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009764:	4a93      	ldr	r2, [pc, #588]	; (80099b4 <tcp_receive+0x5d0>)
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7ff fdc0 	bl	80092ec <tcp_free_acked_segments>
 800976c:	4602      	mov	r2, r0
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009776:	2b00      	cmp	r3, #0
 8009778:	d104      	bne.n	8009784 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009780:	861a      	strh	r2, [r3, #48]	; 0x30
 8009782:	e002      	b.n	800978a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009794:	2b00      	cmp	r3, #0
 8009796:	d103      	bne.n	80097a0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80097a6:	4b84      	ldr	r3, [pc, #528]	; (80099b8 <tcp_receive+0x5d4>)
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	4413      	add	r3, r2
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	8b5b      	ldrh	r3, [r3, #26]
 80097b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d035      	beq.n	800982c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d118      	bne.n	80097fa <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00c      	beq.n	80097ea <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fb f822 	bl	8004826 <lwip_htonl>
 80097e2:	4603      	mov	r3, r0
 80097e4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	dc20      	bgt.n	800982c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	8b5b      	ldrh	r3, [r3, #26]
 80097ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097f8:	e018      	b.n	800982c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	4618      	mov	r0, r3
 8009808:	f7fb f80d 	bl	8004826 <lwip_htonl>
 800980c:	4603      	mov	r3, r0
 800980e:	1ae3      	subs	r3, r4, r3
 8009810:	2b00      	cmp	r3, #0
 8009812:	dc0b      	bgt.n	800982c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	8b5b      	ldrh	r3, [r3, #26]
 8009818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800981c:	b29a      	uxth	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009822:	e003      	b.n	800982c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 ffc1 	bl	800b7ac <tcp_send_empty_ack>
 800982a:	e000      	b.n	800982e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800982c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009832:	2b00      	cmp	r3, #0
 8009834:	d05b      	beq.n	80098ee <tcp_receive+0x50a>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800983a:	4b60      	ldr	r3, [pc, #384]	; (80099bc <tcp_receive+0x5d8>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	da54      	bge.n	80098ee <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009844:	4b5e      	ldr	r3, [pc, #376]	; (80099c0 <tcp_receive+0x5dc>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	b29a      	uxth	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984e:	b29b      	uxth	r3, r3
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	b29b      	uxth	r3, r3
 8009854:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009858:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009862:	10db      	asrs	r3, r3, #3
 8009864:	b21b      	sxth	r3, r3
 8009866:	b29b      	uxth	r3, r3
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	b29b      	uxth	r3, r3
 800986c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009876:	b29a      	uxth	r2, r3
 8009878:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800987c:	4413      	add	r3, r2
 800987e:	b29b      	uxth	r3, r3
 8009880:	b21a      	sxth	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009886:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800988a:	2b00      	cmp	r3, #0
 800988c:	da05      	bge.n	800989a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800988e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009892:	425b      	negs	r3, r3
 8009894:	b29b      	uxth	r3, r3
 8009896:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800989a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098a4:	109b      	asrs	r3, r3, #2
 80098a6:	b21b      	sxth	r3, r3
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80098be:	4413      	add	r3, r2
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	b21a      	sxth	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80098ce:	10db      	asrs	r3, r3, #3
 80098d0:	b21b      	sxth	r3, r3
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098da:	b29b      	uxth	r3, r3
 80098dc:	4413      	add	r3, r2
 80098de:	b29b      	uxth	r3, r3
 80098e0:	b21a      	sxth	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80098ee:	4b35      	ldr	r3, [pc, #212]	; (80099c4 <tcp_receive+0x5e0>)
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 84e1 	beq.w	800a2ba <tcp_receive+0xed6>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	7d1b      	ldrb	r3, [r3, #20]
 80098fc:	2b06      	cmp	r3, #6
 80098fe:	f200 84dc 	bhi.w	800a2ba <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009906:	4b30      	ldr	r3, [pc, #192]	; (80099c8 <tcp_receive+0x5e4>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	3b01      	subs	r3, #1
 800990e:	2b00      	cmp	r3, #0
 8009910:	f2c0 808e 	blt.w	8009a30 <tcp_receive+0x64c>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009918:	4b2a      	ldr	r3, [pc, #168]	; (80099c4 <tcp_receive+0x5e0>)
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	4619      	mov	r1, r3
 800991e:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <tcp_receive+0x5e4>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	440b      	add	r3, r1
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	3301      	adds	r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	f300 8081 	bgt.w	8009a30 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800992e:	4b27      	ldr	r3, [pc, #156]	; (80099cc <tcp_receive+0x5e8>)
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009938:	4b23      	ldr	r3, [pc, #140]	; (80099c8 <tcp_receive+0x5e4>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009940:	4b22      	ldr	r3, [pc, #136]	; (80099cc <tcp_receive+0x5e8>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d106      	bne.n	8009956 <tcp_receive+0x572>
 8009948:	4b21      	ldr	r3, [pc, #132]	; (80099d0 <tcp_receive+0x5ec>)
 800994a:	f240 5294 	movw	r2, #1428	; 0x594
 800994e:	4921      	ldr	r1, [pc, #132]	; (80099d4 <tcp_receive+0x5f0>)
 8009950:	4821      	ldr	r0, [pc, #132]	; (80099d8 <tcp_receive+0x5f4>)
 8009952:	f005 f923 	bl	800eb9c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800995c:	4293      	cmp	r3, r2
 800995e:	d906      	bls.n	800996e <tcp_receive+0x58a>
 8009960:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <tcp_receive+0x5ec>)
 8009962:	f240 5295 	movw	r2, #1429	; 0x595
 8009966:	491d      	ldr	r1, [pc, #116]	; (80099dc <tcp_receive+0x5f8>)
 8009968:	481b      	ldr	r0, [pc, #108]	; (80099d8 <tcp_receive+0x5f4>)
 800996a:	f005 f917 	bl	800eb9c <iprintf>
      off = (u16_t)off32;
 800996e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009970:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009974:	4b15      	ldr	r3, [pc, #84]	; (80099cc <tcp_receive+0x5e8>)
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	891b      	ldrh	r3, [r3, #8]
 800997a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800997e:	429a      	cmp	r2, r3
 8009980:	d906      	bls.n	8009990 <tcp_receive+0x5ac>
 8009982:	4b13      	ldr	r3, [pc, #76]	; (80099d0 <tcp_receive+0x5ec>)
 8009984:	f240 5297 	movw	r2, #1431	; 0x597
 8009988:	4915      	ldr	r1, [pc, #84]	; (80099e0 <tcp_receive+0x5fc>)
 800998a:	4813      	ldr	r0, [pc, #76]	; (80099d8 <tcp_receive+0x5f4>)
 800998c:	f005 f906 	bl	800eb9c <iprintf>
      inseg.len -= off;
 8009990:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <tcp_receive+0x5e8>)
 8009992:	891a      	ldrh	r2, [r3, #8]
 8009994:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	b29a      	uxth	r2, r3
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <tcp_receive+0x5e8>)
 800999e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <tcp_receive+0x5e8>)
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	891a      	ldrh	r2, [r3, #8]
 80099a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80099ae:	e029      	b.n	8009a04 <tcp_receive+0x620>
 80099b0:	08011050 	.word	0x08011050
 80099b4:	08011058 	.word	0x08011058
 80099b8:	20000160 	.word	0x20000160
 80099bc:	2000015c 	.word	0x2000015c
 80099c0:	2000768c 	.word	0x2000768c
 80099c4:	20000162 	.word	0x20000162
 80099c8:	20000158 	.word	0x20000158
 80099cc:	20000138 	.word	0x20000138
 80099d0:	08010ce8 	.word	0x08010ce8
 80099d4:	08011060 	.word	0x08011060
 80099d8:	08010d34 	.word	0x08010d34
 80099dc:	08011070 	.word	0x08011070
 80099e0:	08011080 	.word	0x08011080
        off -= p->len;
 80099e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099e6:	895b      	ldrh	r3, [r3, #10]
 80099e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80099f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80099f6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80099f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fa:	2200      	movs	r2, #0
 80099fc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80099fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a06:	895b      	ldrh	r3, [r3, #10]
 8009a08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d8e9      	bhi.n	80099e4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009a10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a14:	4619      	mov	r1, r3
 8009a16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009a18:	f7fc fac2 	bl	8005fa0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	4a91      	ldr	r2, [pc, #580]	; (8009c68 <tcp_receive+0x884>)
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	4b91      	ldr	r3, [pc, #580]	; (8009c6c <tcp_receive+0x888>)
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	4a8f      	ldr	r2, [pc, #572]	; (8009c68 <tcp_receive+0x884>)
 8009a2a:	6812      	ldr	r2, [r2, #0]
 8009a2c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a2e:	e00d      	b.n	8009a4c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009a30:	4b8d      	ldr	r3, [pc, #564]	; (8009c68 <tcp_receive+0x884>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da06      	bge.n	8009a4c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	8b5b      	ldrh	r3, [r3, #26]
 8009a42:	f043 0302 	orr.w	r3, r3, #2
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a4c:	4b86      	ldr	r3, [pc, #536]	; (8009c68 <tcp_receive+0x884>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f2c0 842a 	blt.w	800a2b0 <tcp_receive+0xecc>
 8009a5c:	4b82      	ldr	r3, [pc, #520]	; (8009c68 <tcp_receive+0x884>)
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a68:	440b      	add	r3, r1
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f300 841e 	bgt.w	800a2b0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a78:	4b7b      	ldr	r3, [pc, #492]	; (8009c68 <tcp_receive+0x884>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	f040 829a 	bne.w	8009fb6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009a82:	4b7a      	ldr	r3, [pc, #488]	; (8009c6c <tcp_receive+0x888>)
 8009a84:	891c      	ldrh	r4, [r3, #8]
 8009a86:	4b79      	ldr	r3, [pc, #484]	; (8009c6c <tcp_receive+0x888>)
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	899b      	ldrh	r3, [r3, #12]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fa feb4 	bl	80047fc <lwip_htons>
 8009a94:	4603      	mov	r3, r0
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <tcp_receive+0x6c0>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e000      	b.n	8009aa6 <tcp_receive+0x6c2>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4423      	add	r3, r4
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	4b71      	ldr	r3, [pc, #452]	; (8009c70 <tcp_receive+0x88c>)
 8009aac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ab2:	4b6f      	ldr	r3, [pc, #444]	; (8009c70 <tcp_receive+0x88c>)
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d275      	bcs.n	8009ba6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009aba:	4b6c      	ldr	r3, [pc, #432]	; (8009c6c <tcp_receive+0x888>)
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	899b      	ldrh	r3, [r3, #12]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fa fe9a 	bl	80047fc <lwip_htons>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01f      	beq.n	8009b14 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009ad4:	4b65      	ldr	r3, [pc, #404]	; (8009c6c <tcp_receive+0x888>)
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	899b      	ldrh	r3, [r3, #12]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	b21b      	sxth	r3, r3
 8009ade:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009ae2:	b21c      	sxth	r4, r3
 8009ae4:	4b61      	ldr	r3, [pc, #388]	; (8009c6c <tcp_receive+0x888>)
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	899b      	ldrh	r3, [r3, #12]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fa fe85 	bl	80047fc <lwip_htons>
 8009af2:	4603      	mov	r3, r0
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fa fe7c 	bl	80047fc <lwip_htons>
 8009b04:	4603      	mov	r3, r0
 8009b06:	b21b      	sxth	r3, r3
 8009b08:	4323      	orrs	r3, r4
 8009b0a:	b21a      	sxth	r2, r3
 8009b0c:	4b57      	ldr	r3, [pc, #348]	; (8009c6c <tcp_receive+0x888>)
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	b292      	uxth	r2, r2
 8009b12:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b18:	4b54      	ldr	r3, [pc, #336]	; (8009c6c <tcp_receive+0x888>)
 8009b1a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009b1c:	4b53      	ldr	r3, [pc, #332]	; (8009c6c <tcp_receive+0x888>)
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	899b      	ldrh	r3, [r3, #12]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fa fe69 	bl	80047fc <lwip_htons>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d005      	beq.n	8009b42 <tcp_receive+0x75e>
            inseg.len -= 1;
 8009b36:	4b4d      	ldr	r3, [pc, #308]	; (8009c6c <tcp_receive+0x888>)
 8009b38:	891b      	ldrh	r3, [r3, #8]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	4b4b      	ldr	r3, [pc, #300]	; (8009c6c <tcp_receive+0x888>)
 8009b40:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009b42:	4b4a      	ldr	r3, [pc, #296]	; (8009c6c <tcp_receive+0x888>)
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	4a49      	ldr	r2, [pc, #292]	; (8009c6c <tcp_receive+0x888>)
 8009b48:	8912      	ldrh	r2, [r2, #8]
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7fc f927 	bl	8005da0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009b52:	4b46      	ldr	r3, [pc, #280]	; (8009c6c <tcp_receive+0x888>)
 8009b54:	891c      	ldrh	r4, [r3, #8]
 8009b56:	4b45      	ldr	r3, [pc, #276]	; (8009c6c <tcp_receive+0x888>)
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	899b      	ldrh	r3, [r3, #12]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fa fe4c 	bl	80047fc <lwip_htons>
 8009b64:	4603      	mov	r3, r0
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	f003 0303 	and.w	r3, r3, #3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <tcp_receive+0x790>
 8009b70:	2301      	movs	r3, #1
 8009b72:	e000      	b.n	8009b76 <tcp_receive+0x792>
 8009b74:	2300      	movs	r3, #0
 8009b76:	4423      	add	r3, r4
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	4b3d      	ldr	r3, [pc, #244]	; (8009c70 <tcp_receive+0x88c>)
 8009b7c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009b7e:	4b3c      	ldr	r3, [pc, #240]	; (8009c70 <tcp_receive+0x88c>)
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	461a      	mov	r2, r3
 8009b84:	4b38      	ldr	r3, [pc, #224]	; (8009c68 <tcp_receive+0x884>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	441a      	add	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b92:	440b      	add	r3, r1
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d006      	beq.n	8009ba6 <tcp_receive+0x7c2>
 8009b98:	4b36      	ldr	r3, [pc, #216]	; (8009c74 <tcp_receive+0x890>)
 8009b9a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009b9e:	4936      	ldr	r1, [pc, #216]	; (8009c78 <tcp_receive+0x894>)
 8009ba0:	4836      	ldr	r0, [pc, #216]	; (8009c7c <tcp_receive+0x898>)
 8009ba2:	f004 fffb 	bl	800eb9c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 80e7 	beq.w	8009d7e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bb0:	4b2e      	ldr	r3, [pc, #184]	; (8009c6c <tcp_receive+0x888>)
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	899b      	ldrh	r3, [r3, #12]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fa fe1f 	bl	80047fc <lwip_htons>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d010      	beq.n	8009bec <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009bca:	e00a      	b.n	8009be2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7fd fce0 	bl	80075a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1f0      	bne.n	8009bcc <tcp_receive+0x7e8>
 8009bea:	e0c8      	b.n	8009d7e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009bf2:	e052      	b.n	8009c9a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	899b      	ldrh	r3, [r3, #12]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fa fdfd 	bl	80047fc <lwip_htons>
 8009c02:	4603      	mov	r3, r0
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d03d      	beq.n	8009c8a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009c0e:	4b17      	ldr	r3, [pc, #92]	; (8009c6c <tcp_receive+0x888>)
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	899b      	ldrh	r3, [r3, #12]
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fa fdf0 	bl	80047fc <lwip_htons>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d130      	bne.n	8009c8a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009c28:	4b10      	ldr	r3, [pc, #64]	; (8009c6c <tcp_receive+0x888>)
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	899b      	ldrh	r3, [r3, #12]
 8009c2e:	b29c      	uxth	r4, r3
 8009c30:	2001      	movs	r0, #1
 8009c32:	f7fa fde3 	bl	80047fc <lwip_htons>
 8009c36:	4603      	mov	r3, r0
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <tcp_receive+0x888>)
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4322      	orrs	r2, r4
 8009c40:	b292      	uxth	r2, r2
 8009c42:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009c44:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <tcp_receive+0x888>)
 8009c46:	891c      	ldrh	r4, [r3, #8]
 8009c48:	4b08      	ldr	r3, [pc, #32]	; (8009c6c <tcp_receive+0x888>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	899b      	ldrh	r3, [r3, #12]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fa fdd3 	bl	80047fc <lwip_htons>
 8009c56:	4603      	mov	r3, r0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00e      	beq.n	8009c80 <tcp_receive+0x89c>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e00d      	b.n	8009c82 <tcp_receive+0x89e>
 8009c66:	bf00      	nop
 8009c68:	20000158 	.word	0x20000158
 8009c6c:	20000138 	.word	0x20000138
 8009c70:	20000162 	.word	0x20000162
 8009c74:	08010ce8 	.word	0x08010ce8
 8009c78:	08011090 	.word	0x08011090
 8009c7c:	08010d34 	.word	0x08010d34
 8009c80:	2300      	movs	r3, #0
 8009c82:	4423      	add	r3, r4
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	4b98      	ldr	r3, [pc, #608]	; (8009ee8 <tcp_receive+0xb04>)
 8009c88:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009c94:	6938      	ldr	r0, [r7, #16]
 8009c96:	f7fd fc84 	bl	80075a2 <tcp_seg_free>
            while (next &&
 8009c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00e      	beq.n	8009cbe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009ca0:	4b91      	ldr	r3, [pc, #580]	; (8009ee8 <tcp_receive+0xb04>)
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4b91      	ldr	r3, [pc, #580]	; (8009eec <tcp_receive+0xb08>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	441a      	add	r2, r3
 8009cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cb4:	8909      	ldrh	r1, [r1, #8]
 8009cb6:	440b      	add	r3, r1
 8009cb8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	da9a      	bge.n	8009bf4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d059      	beq.n	8009d78 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009cc4:	4b88      	ldr	r3, [pc, #544]	; (8009ee8 <tcp_receive+0xb04>)
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4b88      	ldr	r3, [pc, #544]	; (8009eec <tcp_receive+0xb08>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	441a      	add	r2, r3
 8009cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dd4d      	ble.n	8009d78 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	4b81      	ldr	r3, [pc, #516]	; (8009eec <tcp_receive+0xb08>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	4b80      	ldr	r3, [pc, #512]	; (8009ef0 <tcp_receive+0xb0c>)
 8009cf0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009cf2:	4b7f      	ldr	r3, [pc, #508]	; (8009ef0 <tcp_receive+0xb0c>)
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	899b      	ldrh	r3, [r3, #12]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fa fd7e 	bl	80047fc <lwip_htons>
 8009d00:	4603      	mov	r3, r0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	f003 0302 	and.w	r3, r3, #2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <tcp_receive+0x934>
                inseg.len -= 1;
 8009d0c:	4b78      	ldr	r3, [pc, #480]	; (8009ef0 <tcp_receive+0xb0c>)
 8009d0e:	891b      	ldrh	r3, [r3, #8]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	4b76      	ldr	r3, [pc, #472]	; (8009ef0 <tcp_receive+0xb0c>)
 8009d16:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009d18:	4b75      	ldr	r3, [pc, #468]	; (8009ef0 <tcp_receive+0xb0c>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	4a74      	ldr	r2, [pc, #464]	; (8009ef0 <tcp_receive+0xb0c>)
 8009d1e:	8912      	ldrh	r2, [r2, #8]
 8009d20:	4611      	mov	r1, r2
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fc f83c 	bl	8005da0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009d28:	4b71      	ldr	r3, [pc, #452]	; (8009ef0 <tcp_receive+0xb0c>)
 8009d2a:	891c      	ldrh	r4, [r3, #8]
 8009d2c:	4b70      	ldr	r3, [pc, #448]	; (8009ef0 <tcp_receive+0xb0c>)
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	899b      	ldrh	r3, [r3, #12]
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fa fd61 	bl	80047fc <lwip_htons>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <tcp_receive+0x966>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e000      	b.n	8009d4c <tcp_receive+0x968>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	4423      	add	r3, r4
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	4b65      	ldr	r3, [pc, #404]	; (8009ee8 <tcp_receive+0xb04>)
 8009d52:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009d54:	4b64      	ldr	r3, [pc, #400]	; (8009ee8 <tcp_receive+0xb04>)
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4b64      	ldr	r3, [pc, #400]	; (8009eec <tcp_receive+0xb08>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	441a      	add	r2, r3
 8009d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d006      	beq.n	8009d78 <tcp_receive+0x994>
 8009d6a:	4b62      	ldr	r3, [pc, #392]	; (8009ef4 <tcp_receive+0xb10>)
 8009d6c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009d70:	4961      	ldr	r1, [pc, #388]	; (8009ef8 <tcp_receive+0xb14>)
 8009d72:	4862      	ldr	r0, [pc, #392]	; (8009efc <tcp_receive+0xb18>)
 8009d74:	f004 ff12 	bl	800eb9c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d7c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009d7e:	4b5a      	ldr	r3, [pc, #360]	; (8009ee8 <tcp_receive+0xb04>)
 8009d80:	881b      	ldrh	r3, [r3, #0]
 8009d82:	461a      	mov	r2, r3
 8009d84:	4b59      	ldr	r3, [pc, #356]	; (8009eec <tcp_receive+0xb08>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	441a      	add	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d92:	4b55      	ldr	r3, [pc, #340]	; (8009ee8 <tcp_receive+0xb04>)
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d206      	bcs.n	8009da8 <tcp_receive+0x9c4>
 8009d9a:	4b56      	ldr	r3, [pc, #344]	; (8009ef4 <tcp_receive+0xb10>)
 8009d9c:	f240 6207 	movw	r2, #1543	; 0x607
 8009da0:	4957      	ldr	r1, [pc, #348]	; (8009f00 <tcp_receive+0xb1c>)
 8009da2:	4856      	ldr	r0, [pc, #344]	; (8009efc <tcp_receive+0xb18>)
 8009da4:	f004 fefa 	bl	800eb9c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009dac:	4b4e      	ldr	r3, [pc, #312]	; (8009ee8 <tcp_receive+0xb04>)
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7fc ff13 	bl	8006be4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009dbe:	4b4c      	ldr	r3, [pc, #304]	; (8009ef0 <tcp_receive+0xb0c>)
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	891b      	ldrh	r3, [r3, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009dc8:	4b49      	ldr	r3, [pc, #292]	; (8009ef0 <tcp_receive+0xb0c>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	4a4d      	ldr	r2, [pc, #308]	; (8009f04 <tcp_receive+0xb20>)
 8009dce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009dd0:	4b47      	ldr	r3, [pc, #284]	; (8009ef0 <tcp_receive+0xb0c>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009dd6:	4b46      	ldr	r3, [pc, #280]	; (8009ef0 <tcp_receive+0xb0c>)
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	899b      	ldrh	r3, [r3, #12]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fa fd0c 	bl	80047fc <lwip_htons>
 8009de4:	4603      	mov	r3, r0
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 80b8 	beq.w	8009f62 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009df2:	4b45      	ldr	r3, [pc, #276]	; (8009f08 <tcp_receive+0xb24>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	f043 0320 	orr.w	r3, r3, #32
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	4b42      	ldr	r3, [pc, #264]	; (8009f08 <tcp_receive+0xb24>)
 8009dfe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009e00:	e0af      	b.n	8009f62 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e06:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	4a36      	ldr	r2, [pc, #216]	; (8009eec <tcp_receive+0xb08>)
 8009e12:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	891b      	ldrh	r3, [r3, #8]
 8009e18:	461c      	mov	r4, r3
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	899b      	ldrh	r3, [r3, #12]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fa fcea 	bl	80047fc <lwip_htons>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	f003 0303 	and.w	r3, r3, #3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <tcp_receive+0xa54>
 8009e34:	2301      	movs	r3, #1
 8009e36:	e000      	b.n	8009e3a <tcp_receive+0xa56>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	191a      	adds	r2, r3, r4
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	441a      	add	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e4a:	461c      	mov	r4, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	891b      	ldrh	r3, [r3, #8]
 8009e50:	461d      	mov	r5, r3
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	899b      	ldrh	r3, [r3, #12]
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fa fcce 	bl	80047fc <lwip_htons>
 8009e60:	4603      	mov	r3, r0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <tcp_receive+0xa8c>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e000      	b.n	8009e72 <tcp_receive+0xa8e>
 8009e70:	2300      	movs	r3, #0
 8009e72:	442b      	add	r3, r5
 8009e74:	429c      	cmp	r4, r3
 8009e76:	d206      	bcs.n	8009e86 <tcp_receive+0xaa2>
 8009e78:	4b1e      	ldr	r3, [pc, #120]	; (8009ef4 <tcp_receive+0xb10>)
 8009e7a:	f240 622b 	movw	r2, #1579	; 0x62b
 8009e7e:	4923      	ldr	r1, [pc, #140]	; (8009f0c <tcp_receive+0xb28>)
 8009e80:	481e      	ldr	r0, [pc, #120]	; (8009efc <tcp_receive+0xb18>)
 8009e82:	f004 fe8b 	bl	800eb9c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	891b      	ldrh	r3, [r3, #8]
 8009e8a:	461c      	mov	r4, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	899b      	ldrh	r3, [r3, #12]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	4618      	mov	r0, r3
 8009e96:	f7fa fcb1 	bl	80047fc <lwip_htons>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	f003 0303 	and.w	r3, r3, #3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <tcp_receive+0xac6>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e000      	b.n	8009eac <tcp_receive+0xac8>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	1919      	adds	r1, r3, r4
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009eb2:	b28b      	uxth	r3, r1
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7fc fe91 	bl	8006be4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	891b      	ldrh	r3, [r3, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d028      	beq.n	8009f1e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <tcp_receive+0xb20>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01d      	beq.n	8009f10 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009ed4:	4b0b      	ldr	r3, [pc, #44]	; (8009f04 <tcp_receive+0xb20>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	4619      	mov	r1, r3
 8009ede:	4610      	mov	r0, r2
 8009ee0:	f7fc f9a6 	bl	8006230 <pbuf_cat>
 8009ee4:	e018      	b.n	8009f18 <tcp_receive+0xb34>
 8009ee6:	bf00      	nop
 8009ee8:	20000162 	.word	0x20000162
 8009eec:	20000158 	.word	0x20000158
 8009ef0:	20000138 	.word	0x20000138
 8009ef4:	08010ce8 	.word	0x08010ce8
 8009ef8:	080110c8 	.word	0x080110c8
 8009efc:	08010d34 	.word	0x08010d34
 8009f00:	08011104 	.word	0x08011104
 8009f04:	20000168 	.word	0x20000168
 8009f08:	20000165 	.word	0x20000165
 8009f0c:	08011124 	.word	0x08011124
            } else {
              recv_data = cseg->p;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	4a70      	ldr	r2, [pc, #448]	; (800a0d8 <tcp_receive+0xcf4>)
 8009f16:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	899b      	ldrh	r3, [r3, #12]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fa fc68 	bl	80047fc <lwip_htons>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00d      	beq.n	8009f54 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009f38:	4b68      	ldr	r3, [pc, #416]	; (800a0dc <tcp_receive+0xcf8>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	f043 0320 	orr.w	r3, r3, #32
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	4b66      	ldr	r3, [pc, #408]	; (800a0dc <tcp_receive+0xcf8>)
 8009f44:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	7d1b      	ldrb	r3, [r3, #20]
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d102      	bne.n	8009f54 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2207      	movs	r2, #7
 8009f52:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009f5c:	68b8      	ldr	r0, [r7, #8]
 8009f5e:	f7fd fb20 	bl	80075a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d008      	beq.n	8009f7c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009f76:	429a      	cmp	r2, r3
 8009f78:	f43f af43 	beq.w	8009e02 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8b5b      	ldrh	r3, [r3, #26]
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00e      	beq.n	8009fa6 <tcp_receive+0xbc2>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	8b5b      	ldrh	r3, [r3, #26]
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	835a      	strh	r2, [r3, #26]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	8b5b      	ldrh	r3, [r3, #26]
 8009f9a:	f043 0302 	orr.w	r3, r3, #2
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009fa4:	e188      	b.n	800a2b8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	8b5b      	ldrh	r3, [r3, #26]
 8009faa:	f043 0301 	orr.w	r3, r3, #1
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009fb4:	e180      	b.n	800a2b8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009fbe:	4848      	ldr	r0, [pc, #288]	; (800a0e0 <tcp_receive+0xcfc>)
 8009fc0:	f7fd fb08 	bl	80075d4 <tcp_seg_copy>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	675a      	str	r2, [r3, #116]	; 0x74
 8009fca:	e16d      	b.n	800a2a8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fd6:	e157      	b.n	800a288 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	4b41      	ldr	r3, [pc, #260]	; (800a0e4 <tcp_receive+0xd00>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d11d      	bne.n	800a022 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009fe6:	4b3e      	ldr	r3, [pc, #248]	; (800a0e0 <tcp_receive+0xcfc>)
 8009fe8:	891a      	ldrh	r2, [r3, #8]
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	891b      	ldrh	r3, [r3, #8]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	f240 814f 	bls.w	800a292 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ff4:	483a      	ldr	r0, [pc, #232]	; (800a0e0 <tcp_receive+0xcfc>)
 8009ff6:	f7fd faed 	bl	80075d4 <tcp_seg_copy>
 8009ffa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 8149 	beq.w	800a296 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	e002      	b.n	800a018 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a018:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a01a:	6978      	ldr	r0, [r7, #20]
 800a01c:	f7ff f8de 	bl	80091dc <tcp_oos_insert_segment>
                }
                break;
 800a020:	e139      	b.n	800a296 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a024:	2b00      	cmp	r3, #0
 800a026:	d117      	bne.n	800a058 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a028:	4b2e      	ldr	r3, [pc, #184]	; (800a0e4 <tcp_receive+0xd00>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	da57      	bge.n	800a0e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a038:	4829      	ldr	r0, [pc, #164]	; (800a0e0 <tcp_receive+0xcfc>)
 800a03a:	f7fd facb 	bl	80075d4 <tcp_seg_copy>
 800a03e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 8129 	beq.w	800a29a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	69ba      	ldr	r2, [r7, #24]
 800a04c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a04e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a050:	69b8      	ldr	r0, [r7, #24]
 800a052:	f7ff f8c3 	bl	80091dc <tcp_oos_insert_segment>
                  }
                  break;
 800a056:	e120      	b.n	800a29a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a058:	4b22      	ldr	r3, [pc, #136]	; (800a0e4 <tcp_receive+0xd00>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	3b01      	subs	r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	db3e      	blt.n	800a0e8 <tcp_receive+0xd04>
 800a06a:	4b1e      	ldr	r3, [pc, #120]	; (800a0e4 <tcp_receive+0xd00>)
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	3301      	adds	r3, #1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dc35      	bgt.n	800a0e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a07c:	4818      	ldr	r0, [pc, #96]	; (800a0e0 <tcp_receive+0xcfc>)
 800a07e:	f7fd faa9 	bl	80075d4 <tcp_seg_copy>
 800a082:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 8109 	beq.w	800a29e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a094:	8912      	ldrh	r2, [r2, #8]
 800a096:	441a      	add	r2, r3
 800a098:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <tcp_receive+0xd00>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	dd12      	ble.n	800a0c8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a0a2:	4b10      	ldr	r3, [pc, #64]	; (800a0e4 <tcp_receive+0xd00>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0be:	891b      	ldrh	r3, [r3, #8]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	4610      	mov	r0, r2
 800a0c4:	f7fb fe6c 	bl	8005da0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a0ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0d0:	69f8      	ldr	r0, [r7, #28]
 800a0d2:	f7ff f883 	bl	80091dc <tcp_oos_insert_segment>
                  }
                  break;
 800a0d6:	e0e2      	b.n	800a29e <tcp_receive+0xeba>
 800a0d8:	20000168 	.word	0x20000168
 800a0dc:	20000165 	.word	0x20000165
 800a0e0:	20000138 	.word	0x20000138
 800a0e4:	20000158 	.word	0x20000158
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f040 80c6 	bne.w	800a282 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a0f6:	4b80      	ldr	r3, [pc, #512]	; (800a2f8 <tcp_receive+0xf14>)
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a102:	2b00      	cmp	r3, #0
 800a104:	f340 80bd 	ble.w	800a282 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	899b      	ldrh	r3, [r3, #12]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	4618      	mov	r0, r3
 800a112:	f7fa fb73 	bl	80047fc <lwip_htons>
 800a116:	4603      	mov	r3, r0
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f040 80bf 	bne.w	800a2a2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a124:	4875      	ldr	r0, [pc, #468]	; (800a2fc <tcp_receive+0xf18>)
 800a126:	f7fd fa55 	bl	80075d4 <tcp_seg_copy>
 800a12a:	4602      	mov	r2, r0
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 80b6 	beq.w	800a2a6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a142:	8912      	ldrh	r2, [r2, #8]
 800a144:	441a      	add	r2, r3
 800a146:	4b6c      	ldr	r3, [pc, #432]	; (800a2f8 <tcp_receive+0xf14>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	dd12      	ble.n	800a176 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a150:	4b69      	ldr	r3, [pc, #420]	; (800a2f8 <tcp_receive+0xf14>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	b29a      	uxth	r2, r3
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	b29a      	uxth	r2, r3
 800a162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a164:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	891b      	ldrh	r3, [r3, #8]
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7fb fe15 	bl	8005da0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a176:	4b62      	ldr	r3, [pc, #392]	; (800a300 <tcp_receive+0xf1c>)
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	4b5e      	ldr	r3, [pc, #376]	; (800a2f8 <tcp_receive+0xf14>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	441a      	add	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a18a:	440b      	add	r3, r1
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f340 8089 	ble.w	800a2a6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	899b      	ldrh	r3, [r3, #12]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fa fb2c 	bl	80047fc <lwip_htons>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d022      	beq.n	800a1f6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	899b      	ldrh	r3, [r3, #12]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1c0:	b21c      	sxth	r4, r3
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	899b      	ldrh	r3, [r3, #12]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fa fb15 	bl	80047fc <lwip_htons>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fa fb0c 	bl	80047fc <lwip_htons>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	b21b      	sxth	r3, r3
 800a1e8:	4323      	orrs	r3, r4
 800a1ea:	b21a      	sxth	r2, r3
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	b292      	uxth	r2, r2
 800a1f4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a200:	4413      	add	r3, r2
 800a202:	b299      	uxth	r1, r3
 800a204:	4b3c      	ldr	r3, [pc, #240]	; (800a2f8 <tcp_receive+0xf14>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	b29a      	uxth	r2, r3
 800a20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	1a8a      	subs	r2, r1, r2
 800a210:	b292      	uxth	r2, r2
 800a212:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	891b      	ldrh	r3, [r3, #8]
 800a220:	4619      	mov	r1, r3
 800a222:	4610      	mov	r0, r2
 800a224:	f7fb fdbc 	bl	8005da0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	891c      	ldrh	r4, [r3, #8]
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	899b      	ldrh	r3, [r3, #12]
 800a236:	b29b      	uxth	r3, r3
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fa fadf 	bl	80047fc <lwip_htons>
 800a23e:	4603      	mov	r3, r0
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <tcp_receive+0xe6a>
 800a24a:	2301      	movs	r3, #1
 800a24c:	e000      	b.n	800a250 <tcp_receive+0xe6c>
 800a24e:	2300      	movs	r3, #0
 800a250:	4423      	add	r3, r4
 800a252:	b29a      	uxth	r2, r3
 800a254:	4b2a      	ldr	r3, [pc, #168]	; (800a300 <tcp_receive+0xf1c>)
 800a256:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a258:	4b29      	ldr	r3, [pc, #164]	; (800a300 <tcp_receive+0xf1c>)
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b26      	ldr	r3, [pc, #152]	; (800a2f8 <tcp_receive+0xf14>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	441a      	add	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a26c:	440b      	add	r3, r1
 800a26e:	429a      	cmp	r2, r3
 800a270:	d019      	beq.n	800a2a6 <tcp_receive+0xec2>
 800a272:	4b24      	ldr	r3, [pc, #144]	; (800a304 <tcp_receive+0xf20>)
 800a274:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a278:	4923      	ldr	r1, [pc, #140]	; (800a308 <tcp_receive+0xf24>)
 800a27a:	4824      	ldr	r0, [pc, #144]	; (800a30c <tcp_receive+0xf28>)
 800a27c:	f004 fc8e 	bl	800eb9c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a280:	e011      	b.n	800a2a6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	63bb      	str	r3, [r7, #56]	; 0x38
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f47f aea4 	bne.w	8009fd8 <tcp_receive+0xbf4>
 800a290:	e00a      	b.n	800a2a8 <tcp_receive+0xec4>
                break;
 800a292:	bf00      	nop
 800a294:	e008      	b.n	800a2a8 <tcp_receive+0xec4>
                break;
 800a296:	bf00      	nop
 800a298:	e006      	b.n	800a2a8 <tcp_receive+0xec4>
                  break;
 800a29a:	bf00      	nop
 800a29c:	e004      	b.n	800a2a8 <tcp_receive+0xec4>
                  break;
 800a29e:	bf00      	nop
 800a2a0:	e002      	b.n	800a2a8 <tcp_receive+0xec4>
                  break;
 800a2a2:	bf00      	nop
 800a2a4:	e000      	b.n	800a2a8 <tcp_receive+0xec4>
                break;
 800a2a6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 fa7f 	bl	800b7ac <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a2ae:	e003      	b.n	800a2b8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 fa7b 	bl	800b7ac <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a2b6:	e01a      	b.n	800a2ee <tcp_receive+0xf0a>
 800a2b8:	e019      	b.n	800a2ee <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a2ba:	4b0f      	ldr	r3, [pc, #60]	; (800a2f8 <tcp_receive+0xf14>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	db0a      	blt.n	800a2de <tcp_receive+0xefa>
 800a2c8:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <tcp_receive+0xf14>)
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	6879      	ldr	r1, [r7, #4]
 800a2d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2d4:	440b      	add	r3, r1
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	3301      	adds	r3, #1
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd07      	ble.n	800a2ee <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	8b5b      	ldrh	r3, [r3, #26]
 800a2e2:	f043 0302 	orr.w	r3, r3, #2
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a2ec:	e7ff      	b.n	800a2ee <tcp_receive+0xf0a>
 800a2ee:	bf00      	nop
 800a2f0:	3750      	adds	r7, #80	; 0x50
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20000158 	.word	0x20000158
 800a2fc:	20000138 	.word	0x20000138
 800a300:	20000162 	.word	0x20000162
 800a304:	08010ce8 	.word	0x08010ce8
 800a308:	08011090 	.word	0x08011090
 800a30c:	08010d34 	.word	0x08010d34

0800a310 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a316:	4b15      	ldr	r3, [pc, #84]	; (800a36c <tcp_get_next_optbyte+0x5c>)
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	b291      	uxth	r1, r2
 800a31e:	4a13      	ldr	r2, [pc, #76]	; (800a36c <tcp_get_next_optbyte+0x5c>)
 800a320:	8011      	strh	r1, [r2, #0]
 800a322:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a324:	4b12      	ldr	r3, [pc, #72]	; (800a370 <tcp_get_next_optbyte+0x60>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d004      	beq.n	800a336 <tcp_get_next_optbyte+0x26>
 800a32c:	4b11      	ldr	r3, [pc, #68]	; (800a374 <tcp_get_next_optbyte+0x64>)
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	88fa      	ldrh	r2, [r7, #6]
 800a332:	429a      	cmp	r2, r3
 800a334:	d208      	bcs.n	800a348 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a336:	4b10      	ldr	r3, [pc, #64]	; (800a378 <tcp_get_next_optbyte+0x68>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3314      	adds	r3, #20
 800a33c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a33e:	88fb      	ldrh	r3, [r7, #6]
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	4413      	add	r3, r2
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	e00b      	b.n	800a360 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a348:	88fb      	ldrh	r3, [r7, #6]
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <tcp_get_next_optbyte+0x64>)
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	b2db      	uxtb	r3, r3
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a356:	4b06      	ldr	r3, [pc, #24]	; (800a370 <tcp_get_next_optbyte+0x60>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	797b      	ldrb	r3, [r7, #5]
 800a35c:	4413      	add	r3, r2
 800a35e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	20000154 	.word	0x20000154
 800a370:	20000150 	.word	0x20000150
 800a374:	2000014e 	.word	0x2000014e
 800a378:	20000148 	.word	0x20000148

0800a37c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <tcp_parseopt+0x1c>
 800a38a:	4b32      	ldr	r3, [pc, #200]	; (800a454 <tcp_parseopt+0xd8>)
 800a38c:	f240 727d 	movw	r2, #1917	; 0x77d
 800a390:	4931      	ldr	r1, [pc, #196]	; (800a458 <tcp_parseopt+0xdc>)
 800a392:	4832      	ldr	r0, [pc, #200]	; (800a45c <tcp_parseopt+0xe0>)
 800a394:	f004 fc02 	bl	800eb9c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a398:	4b31      	ldr	r3, [pc, #196]	; (800a460 <tcp_parseopt+0xe4>)
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d055      	beq.n	800a44c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a3a0:	4b30      	ldr	r3, [pc, #192]	; (800a464 <tcp_parseopt+0xe8>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	801a      	strh	r2, [r3, #0]
 800a3a6:	e045      	b.n	800a434 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a3a8:	f7ff ffb2 	bl	800a310 <tcp_get_next_optbyte>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d006      	beq.n	800a3c4 <tcp_parseopt+0x48>
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	dc2b      	bgt.n	800a412 <tcp_parseopt+0x96>
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d041      	beq.n	800a442 <tcp_parseopt+0xc6>
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d127      	bne.n	800a412 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a3c2:	e037      	b.n	800a434 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a3c4:	f7ff ffa4 	bl	800a310 <tcp_get_next_optbyte>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	d13b      	bne.n	800a446 <tcp_parseopt+0xca>
 800a3ce:	4b25      	ldr	r3, [pc, #148]	; (800a464 <tcp_parseopt+0xe8>)
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	4a22      	ldr	r2, [pc, #136]	; (800a460 <tcp_parseopt+0xe4>)
 800a3d6:	8812      	ldrh	r2, [r2, #0]
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	da34      	bge.n	800a446 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a3dc:	f7ff ff98 	bl	800a310 <tcp_get_next_optbyte>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	021b      	lsls	r3, r3, #8
 800a3e6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a3e8:	f7ff ff92 	bl	800a310 <tcp_get_next_optbyte>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	89bb      	ldrh	r3, [r7, #12]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a3f6:	89bb      	ldrh	r3, [r7, #12]
 800a3f8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a3fc:	d804      	bhi.n	800a408 <tcp_parseopt+0x8c>
 800a3fe:	89bb      	ldrh	r3, [r7, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <tcp_parseopt+0x8c>
 800a404:	89ba      	ldrh	r2, [r7, #12]
 800a406:	e001      	b.n	800a40c <tcp_parseopt+0x90>
 800a408:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a410:	e010      	b.n	800a434 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a412:	f7ff ff7d 	bl	800a310 <tcp_get_next_optbyte>
 800a416:	4603      	mov	r3, r0
 800a418:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d914      	bls.n	800a44a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	b29a      	uxth	r2, r3
 800a424:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <tcp_parseopt+0xe8>)
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	4413      	add	r3, r2
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	3b02      	subs	r3, #2
 800a42e:	b29a      	uxth	r2, r3
 800a430:	4b0c      	ldr	r3, [pc, #48]	; (800a464 <tcp_parseopt+0xe8>)
 800a432:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a434:	4b0b      	ldr	r3, [pc, #44]	; (800a464 <tcp_parseopt+0xe8>)
 800a436:	881a      	ldrh	r2, [r3, #0]
 800a438:	4b09      	ldr	r3, [pc, #36]	; (800a460 <tcp_parseopt+0xe4>)
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d3b3      	bcc.n	800a3a8 <tcp_parseopt+0x2c>
 800a440:	e004      	b.n	800a44c <tcp_parseopt+0xd0>
          return;
 800a442:	bf00      	nop
 800a444:	e002      	b.n	800a44c <tcp_parseopt+0xd0>
            return;
 800a446:	bf00      	nop
 800a448:	e000      	b.n	800a44c <tcp_parseopt+0xd0>
            return;
 800a44a:	bf00      	nop
      }
    }
  }
}
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	08010ce8 	.word	0x08010ce8
 800a458:	0801114c 	.word	0x0801114c
 800a45c:	08010d34 	.word	0x08010d34
 800a460:	2000014c 	.word	0x2000014c
 800a464:	20000154 	.word	0x20000154

0800a468 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a468:	b480      	push	{r7}
 800a46a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a46c:	4b05      	ldr	r3, [pc, #20]	; (800a484 <tcp_trigger_input_pcb_close+0x1c>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	f043 0310 	orr.w	r3, r3, #16
 800a474:	b2da      	uxtb	r2, r3
 800a476:	4b03      	ldr	r3, [pc, #12]	; (800a484 <tcp_trigger_input_pcb_close+0x1c>)
 800a478:	701a      	strb	r2, [r3, #0]
}
 800a47a:	bf00      	nop
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	20000165 	.word	0x20000165

0800a488 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <tcp_route+0x28>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	7a1b      	ldrb	r3, [r3, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d006      	beq.n	800a4b0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	7a1b      	ldrb	r3, [r3, #8]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fb fae4 	bl	8005a74 <netif_get_by_index>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	e003      	b.n	800a4b8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f002 ffe1 	bl	800d478 <ip4_route>
 800a4b6:	4603      	mov	r3, r0
  }
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a4c0:	b590      	push	{r4, r7, lr}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d105      	bne.n	800a4e2 <tcp_create_segment+0x22>
 800a4d6:	4b48      	ldr	r3, [pc, #288]	; (800a5f8 <tcp_create_segment+0x138>)
 800a4d8:	22a3      	movs	r2, #163	; 0xa3
 800a4da:	4948      	ldr	r1, [pc, #288]	; (800a5fc <tcp_create_segment+0x13c>)
 800a4dc:	4848      	ldr	r0, [pc, #288]	; (800a600 <tcp_create_segment+0x140>)
 800a4de:	f004 fb5d 	bl	800eb9c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d105      	bne.n	800a4f4 <tcp_create_segment+0x34>
 800a4e8:	4b43      	ldr	r3, [pc, #268]	; (800a5f8 <tcp_create_segment+0x138>)
 800a4ea:	22a4      	movs	r2, #164	; 0xa4
 800a4ec:	4945      	ldr	r1, [pc, #276]	; (800a604 <tcp_create_segment+0x144>)
 800a4ee:	4844      	ldr	r0, [pc, #272]	; (800a600 <tcp_create_segment+0x140>)
 800a4f0:	f004 fb54 	bl	800eb9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a4f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a502:	2003      	movs	r0, #3
 800a504:	f7fa ffc2 	bl	800548c <memp_malloc>
 800a508:	6138      	str	r0, [r7, #16]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d104      	bne.n	800a51a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a510:	68b8      	ldr	r0, [r7, #8]
 800a512:	f7fb fdcb 	bl	80060ac <pbuf_free>
    return NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	e069      	b.n	800a5ee <tcp_create_segment+0x12e>
  }
  seg->flags = optflags;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a520:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	891a      	ldrh	r2, [r3, #8]
 800a532:	7dfb      	ldrb	r3, [r7, #23]
 800a534:	b29b      	uxth	r3, r3
 800a536:	429a      	cmp	r2, r3
 800a538:	d205      	bcs.n	800a546 <tcp_create_segment+0x86>
 800a53a:	4b2f      	ldr	r3, [pc, #188]	; (800a5f8 <tcp_create_segment+0x138>)
 800a53c:	22b0      	movs	r2, #176	; 0xb0
 800a53e:	4932      	ldr	r1, [pc, #200]	; (800a608 <tcp_create_segment+0x148>)
 800a540:	482f      	ldr	r0, [pc, #188]	; (800a600 <tcp_create_segment+0x140>)
 800a542:	f004 fb2b 	bl	800eb9c <iprintf>
  seg->len = p->tot_len - optlen;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	891a      	ldrh	r2, [r3, #8]
 800a54a:	7dfb      	ldrb	r3, [r7, #23]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	1ad3      	subs	r3, r2, r3
 800a550:	b29a      	uxth	r2, r3
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a556:	2114      	movs	r1, #20
 800a558:	68b8      	ldr	r0, [r7, #8]
 800a55a:	f7fb fd11 	bl	8005f80 <pbuf_add_header>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00c      	beq.n	800a57e <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 800a564:	4b29      	ldr	r3, [pc, #164]	; (800a60c <tcp_create_segment+0x14c>)
 800a566:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800a56a:	3301      	adds	r3, #1
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	4b27      	ldr	r3, [pc, #156]	; (800a60c <tcp_create_segment+0x14c>)
 800a570:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 800a574:	6938      	ldr	r0, [r7, #16]
 800a576:	f7fd f814 	bl	80075a2 <tcp_seg_free>
    return NULL;
 800a57a:	2300      	movs	r3, #0
 800a57c:	e037      	b.n	800a5ee <tcp_create_segment+0x12e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8ada      	ldrh	r2, [r3, #22]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	68dc      	ldr	r4, [r3, #12]
 800a590:	4610      	mov	r0, r2
 800a592:	f7fa f933 	bl	80047fc <lwip_htons>
 800a596:	4603      	mov	r3, r0
 800a598:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	8b1a      	ldrh	r2, [r3, #24]
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	68dc      	ldr	r4, [r3, #12]
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7fa f92a 	bl	80047fc <lwip_htons>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	68dc      	ldr	r4, [r3, #12]
 800a5b0:	6838      	ldr	r0, [r7, #0]
 800a5b2:	f7fa f938 	bl	8004826 <lwip_htonl>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	089b      	lsrs	r3, r3, #2
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	3305      	adds	r3, #5
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	031b      	lsls	r3, r3, #12
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	68dc      	ldr	r4, [r3, #12]
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f7fa f910 	bl	80047fc <lwip_htons>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	749a      	strb	r2, [r3, #18]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	74da      	strb	r2, [r3, #19]
  return seg;
 800a5ec:	693b      	ldr	r3, [r7, #16]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	371c      	adds	r7, #28
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd90      	pop	{r4, r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	08011168 	.word	0x08011168
 800a5fc:	0801119c 	.word	0x0801119c
 800a600:	080111bc 	.word	0x080111bc
 800a604:	080111e4 	.word	0x080111e4
 800a608:	08011208 	.word	0x08011208
 800a60c:	200075ac 	.word	0x200075ac

0800a610 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a610:	b590      	push	{r4, r7, lr}
 800a612:	b08b      	sub	sp, #44	; 0x2c
 800a614:	af02      	add	r7, sp, #8
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	460b      	mov	r3, r1
 800a61a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	61fb      	str	r3, [r7, #28]
 800a620:	2300      	movs	r3, #0
 800a622:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a624:	2300      	movs	r3, #0
 800a626:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <tcp_split_unsent_seg+0x2c>
 800a62e:	4b99      	ldr	r3, [pc, #612]	; (800a894 <tcp_split_unsent_seg+0x284>)
 800a630:	f240 324b 	movw	r2, #843	; 0x34b
 800a634:	4998      	ldr	r1, [pc, #608]	; (800a898 <tcp_split_unsent_seg+0x288>)
 800a636:	4899      	ldr	r0, [pc, #612]	; (800a89c <tcp_split_unsent_seg+0x28c>)
 800a638:	f004 fab0 	bl	800eb9c <iprintf>

  useg = pcb->unsent;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a640:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d102      	bne.n	800a64e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	e11e      	b.n	800a88c <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 800a64e:	887b      	ldrh	r3, [r7, #2]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d109      	bne.n	800a668 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a654:	4b8f      	ldr	r3, [pc, #572]	; (800a894 <tcp_split_unsent_seg+0x284>)
 800a656:	f240 3253 	movw	r2, #851	; 0x353
 800a65a:	4991      	ldr	r1, [pc, #580]	; (800a8a0 <tcp_split_unsent_seg+0x290>)
 800a65c:	488f      	ldr	r0, [pc, #572]	; (800a89c <tcp_split_unsent_seg+0x28c>)
 800a65e:	f004 fa9d 	bl	800eb9c <iprintf>
    return ERR_VAL;
 800a662:	f06f 0305 	mvn.w	r3, #5
 800a666:	e111      	b.n	800a88c <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	891b      	ldrh	r3, [r3, #8]
 800a66c:	887a      	ldrh	r2, [r7, #2]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d301      	bcc.n	800a676 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	e10a      	b.n	800a88c <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a67a:	887a      	ldrh	r2, [r7, #2]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d906      	bls.n	800a68e <tcp_split_unsent_seg+0x7e>
 800a680:	4b84      	ldr	r3, [pc, #528]	; (800a894 <tcp_split_unsent_seg+0x284>)
 800a682:	f240 325b 	movw	r2, #859	; 0x35b
 800a686:	4987      	ldr	r1, [pc, #540]	; (800a8a4 <tcp_split_unsent_seg+0x294>)
 800a688:	4884      	ldr	r0, [pc, #528]	; (800a89c <tcp_split_unsent_seg+0x28c>)
 800a68a:	f004 fa87 	bl	800eb9c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	891b      	ldrh	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <tcp_split_unsent_seg+0x94>
 800a696:	4b7f      	ldr	r3, [pc, #508]	; (800a894 <tcp_split_unsent_seg+0x284>)
 800a698:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a69c:	4982      	ldr	r1, [pc, #520]	; (800a8a8 <tcp_split_unsent_seg+0x298>)
 800a69e:	487f      	ldr	r0, [pc, #508]	; (800a89c <tcp_split_unsent_seg+0x28c>)
 800a6a0:	f004 fa7c 	bl	800eb9c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	7a9b      	ldrb	r3, [r3, #10]
 800a6a8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	891a      	ldrh	r2, [r3, #8]
 800a6ba:	887b      	ldrh	r3, [r7, #2]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	89bb      	ldrh	r3, [r7, #12]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	2036      	movs	r0, #54	; 0x36
 800a6d2:	f7fb fa4b 	bl	8005b6c <pbuf_alloc>
 800a6d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 80b7 	beq.w	800a84e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	891a      	ldrh	r2, [r3, #8]
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	891b      	ldrh	r3, [r3, #8]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	887b      	ldrh	r3, [r7, #2]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	6858      	ldr	r0, [r3, #4]
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
 800a6fe:	18d1      	adds	r1, r2, r3
 800a700:	897b      	ldrh	r3, [r7, #10]
 800a702:	89ba      	ldrh	r2, [r7, #12]
 800a704:	f7fb febc 	bl	8006480 <pbuf_copy_partial>
 800a708:	4603      	mov	r3, r0
 800a70a:	461a      	mov	r2, r3
 800a70c:	89bb      	ldrh	r3, [r7, #12]
 800a70e:	4293      	cmp	r3, r2
 800a710:	f040 809f 	bne.w	800a852 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	899b      	ldrh	r3, [r3, #12]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fa f86d 	bl	80047fc <lwip_htons>
 800a722:	4603      	mov	r3, r0
 800a724:	b2db      	uxtb	r3, r3
 800a726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a72a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a72c:	2300      	movs	r3, #0
 800a72e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a730:	7efb      	ldrb	r3, [r7, #27]
 800a732:	f003 0308 	and.w	r3, r3, #8
 800a736:	2b00      	cmp	r3, #0
 800a738:	d007      	beq.n	800a74a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a73a:	7efb      	ldrb	r3, [r7, #27]
 800a73c:	f023 0308 	bic.w	r3, r3, #8
 800a740:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a742:	7ebb      	ldrb	r3, [r7, #26]
 800a744:	f043 0308 	orr.w	r3, r3, #8
 800a748:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a74a:	7efb      	ldrb	r3, [r7, #27]
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	2b00      	cmp	r3, #0
 800a752:	d007      	beq.n	800a764 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a754:	7efb      	ldrb	r3, [r7, #27]
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a75c:	7ebb      	ldrb	r3, [r7, #26]
 800a75e:	f043 0301 	orr.w	r3, r3, #1
 800a762:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fa f85b 	bl	8004826 <lwip_htonl>
 800a770:	4602      	mov	r2, r0
 800a772:	887b      	ldrh	r3, [r7, #2]
 800a774:	18d1      	adds	r1, r2, r3
 800a776:	7eba      	ldrb	r2, [r7, #26]
 800a778:	7bfb      	ldrb	r3, [r7, #15]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	460b      	mov	r3, r1
 800a77e:	6939      	ldr	r1, [r7, #16]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7ff fe9d 	bl	800a4c0 <tcp_create_segment>
 800a786:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d063      	beq.n	800a856 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	4618      	mov	r0, r3
 800a794:	f7fb fd12 	bl	80061bc <pbuf_clen>
 800a798:	4603      	mov	r3, r0
 800a79a:	461a      	mov	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7a2:	1a9b      	subs	r3, r3, r2
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	6858      	ldr	r0, [r3, #4]
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	891a      	ldrh	r2, [r3, #8]
 800a7b6:	89bb      	ldrh	r3, [r7, #12]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	4619      	mov	r1, r3
 800a7be:	f7fb faef 	bl	8005da0 <pbuf_realloc>
  useg->len -= remainder;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	891a      	ldrh	r2, [r3, #8]
 800a7c6:	89bb      	ldrh	r3, [r7, #12]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	899b      	ldrh	r3, [r3, #12]
 800a7d6:	b29c      	uxth	r4, r3
 800a7d8:	7efb      	ldrb	r3, [r7, #27]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fa f80d 	bl	80047fc <lwip_htons>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	4322      	orrs	r2, r4
 800a7ec:	b292      	uxth	r2, r2
 800a7ee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fb fce1 	bl	80061bc <pbuf_clen>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a804:	4413      	add	r3, r2
 800a806:	b29a      	uxth	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	4618      	mov	r0, r3
 800a814:	f7fb fcd2 	bl	80061bc <pbuf_clen>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a822:	4413      	add	r3, r2
 800a824:	b29a      	uxth	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	69fa      	ldr	r2, [r7, #28]
 800a838:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	e01e      	b.n	800a88c <tcp_split_unsent_seg+0x27c>
    goto memerr;
 800a84e:	bf00      	nop
 800a850:	e002      	b.n	800a858 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a852:	bf00      	nop
 800a854:	e000      	b.n	800a858 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a856:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 800a858:	4b14      	ldr	r3, [pc, #80]	; (800a8ac <tcp_split_unsent_seg+0x29c>)
 800a85a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a85e:	3301      	adds	r3, #1
 800a860:	b29a      	uxth	r2, r3
 800a862:	4b12      	ldr	r3, [pc, #72]	; (800a8ac <tcp_split_unsent_seg+0x29c>)
 800a864:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d006      	beq.n	800a87c <tcp_split_unsent_seg+0x26c>
 800a86e:	4b09      	ldr	r3, [pc, #36]	; (800a894 <tcp_split_unsent_seg+0x284>)
 800a870:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a874:	490e      	ldr	r1, [pc, #56]	; (800a8b0 <tcp_split_unsent_seg+0x2a0>)
 800a876:	4809      	ldr	r0, [pc, #36]	; (800a89c <tcp_split_unsent_seg+0x28c>)
 800a878:	f004 f990 	bl	800eb9c <iprintf>
  if (p != NULL) {
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d002      	beq.n	800a888 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 800a882:	6938      	ldr	r0, [r7, #16]
 800a884:	f7fb fc12 	bl	80060ac <pbuf_free>
  }

  return ERR_MEM;
 800a888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3724      	adds	r7, #36	; 0x24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd90      	pop	{r4, r7, pc}
 800a894:	08011168 	.word	0x08011168
 800a898:	080114fc 	.word	0x080114fc
 800a89c:	080111bc 	.word	0x080111bc
 800a8a0:	08011520 	.word	0x08011520
 800a8a4:	08011544 	.word	0x08011544
 800a8a8:	08011554 	.word	0x08011554
 800a8ac:	200075ac 	.word	0x200075ac
 800a8b0:	08011564 	.word	0x08011564

0800a8b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a8b4:	b590      	push	{r4, r7, lr}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d106      	bne.n	800a8d0 <tcp_send_fin+0x1c>
 800a8c2:	4b21      	ldr	r3, [pc, #132]	; (800a948 <tcp_send_fin+0x94>)
 800a8c4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a8c8:	4920      	ldr	r1, [pc, #128]	; (800a94c <tcp_send_fin+0x98>)
 800a8ca:	4821      	ldr	r0, [pc, #132]	; (800a950 <tcp_send_fin+0x9c>)
 800a8cc:	f004 f966 	bl	800eb9c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d02e      	beq.n	800a936 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e002      	b.n	800a8e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1f8      	bne.n	800a8e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	899b      	ldrh	r3, [r3, #12]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7f9 ff80 	bl	80047fc <lwip_htons>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	2b00      	cmp	r3, #0
 800a906:	d116      	bne.n	800a936 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	899b      	ldrh	r3, [r3, #12]
 800a90e:	b29c      	uxth	r4, r3
 800a910:	2001      	movs	r0, #1
 800a912:	f7f9 ff73 	bl	80047fc <lwip_htons>
 800a916:	4603      	mov	r3, r0
 800a918:	461a      	mov	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	4322      	orrs	r2, r4
 800a920:	b292      	uxth	r2, r2
 800a922:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	8b5b      	ldrh	r3, [r3, #26]
 800a928:	f043 0320 	orr.w	r3, r3, #32
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	e004      	b.n	800a940 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a936:	2101      	movs	r1, #1
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f80b 	bl	800a954 <tcp_enqueue_flags>
 800a93e:	4603      	mov	r3, r0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	bd90      	pop	{r4, r7, pc}
 800a948:	08011168 	.word	0x08011168
 800a94c:	08011570 	.word	0x08011570
 800a950:	080111bc 	.word	0x080111bc

0800a954 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b08a      	sub	sp, #40	; 0x28
 800a958:	af02      	add	r7, sp, #8
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	460b      	mov	r3, r1
 800a95e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	f003 0303 	and.w	r3, r3, #3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d106      	bne.n	800a980 <tcp_enqueue_flags+0x2c>
 800a972:	4b68      	ldr	r3, [pc, #416]	; (800ab14 <tcp_enqueue_flags+0x1c0>)
 800a974:	f240 4211 	movw	r2, #1041	; 0x411
 800a978:	4967      	ldr	r1, [pc, #412]	; (800ab18 <tcp_enqueue_flags+0x1c4>)
 800a97a:	4868      	ldr	r0, [pc, #416]	; (800ab1c <tcp_enqueue_flags+0x1c8>)
 800a97c:	f004 f90e 	bl	800eb9c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <tcp_enqueue_flags+0x40>
 800a986:	4b63      	ldr	r3, [pc, #396]	; (800ab14 <tcp_enqueue_flags+0x1c0>)
 800a988:	f240 4213 	movw	r2, #1043	; 0x413
 800a98c:	4964      	ldr	r1, [pc, #400]	; (800ab20 <tcp_enqueue_flags+0x1cc>)
 800a98e:	4863      	ldr	r0, [pc, #396]	; (800ab1c <tcp_enqueue_flags+0x1c8>)
 800a990:	f004 f904 	bl	800eb9c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a9a2:	7ffb      	ldrb	r3, [r7, #31]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	2036      	movs	r0, #54	; 0x36
 800a9ba:	f7fb f8d7 	bl	8005b6c <pbuf_alloc>
 800a9be:	6138      	str	r0, [r7, #16]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d111      	bne.n	800a9ea <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	8b5b      	ldrh	r3, [r3, #26]
 800a9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800a9d4:	4b53      	ldr	r3, [pc, #332]	; (800ab24 <tcp_enqueue_flags+0x1d0>)
 800a9d6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800a9da:	3301      	adds	r3, #1
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	4b51      	ldr	r3, [pc, #324]	; (800ab24 <tcp_enqueue_flags+0x1d0>)
 800a9e0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800a9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e8:	e090      	b.n	800ab0c <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	895a      	ldrh	r2, [r3, #10]
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d206      	bcs.n	800aa04 <tcp_enqueue_flags+0xb0>
 800a9f6:	4b47      	ldr	r3, [pc, #284]	; (800ab14 <tcp_enqueue_flags+0x1c0>)
 800a9f8:	f240 4239 	movw	r2, #1081	; 0x439
 800a9fc:	494a      	ldr	r1, [pc, #296]	; (800ab28 <tcp_enqueue_flags+0x1d4>)
 800a9fe:	4847      	ldr	r0, [pc, #284]	; (800ab1c <tcp_enqueue_flags+0x1c8>)
 800aa00:	f004 f8cc 	bl	800eb9c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800aa08:	78fa      	ldrb	r2, [r7, #3]
 800aa0a:	7ffb      	ldrb	r3, [r7, #31]
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	6939      	ldr	r1, [r7, #16]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff fd54 	bl	800a4c0 <tcp_create_segment>
 800aa18:	60f8      	str	r0, [r7, #12]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d111      	bne.n	800aa44 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	8b5b      	ldrh	r3, [r3, #26]
 800aa24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 800aa2e:	4b3d      	ldr	r3, [pc, #244]	; (800ab24 <tcp_enqueue_flags+0x1d0>)
 800aa30:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800aa34:	3301      	adds	r3, #1
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	4b3a      	ldr	r3, [pc, #232]	; (800ab24 <tcp_enqueue_flags+0x1d0>)
 800aa3a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 800aa3e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa42:	e063      	b.n	800ab0c <tcp_enqueue_flags+0x1b8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	891b      	ldrh	r3, [r3, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <tcp_enqueue_flags+0x106>
 800aa4c:	4b31      	ldr	r3, [pc, #196]	; (800ab14 <tcp_enqueue_flags+0x1c0>)
 800aa4e:	f240 4243 	movw	r2, #1091	; 0x443
 800aa52:	4936      	ldr	r1, [pc, #216]	; (800ab2c <tcp_enqueue_flags+0x1d8>)
 800aa54:	4831      	ldr	r0, [pc, #196]	; (800ab1c <tcp_enqueue_flags+0x1c8>)
 800aa56:	f004 f8a1 	bl	800eb9c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d103      	bne.n	800aa6a <tcp_enqueue_flags+0x116>
    pcb->unsent = seg;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa68:	e00d      	b.n	800aa86 <tcp_enqueue_flags+0x132>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa6e:	61bb      	str	r3, [r7, #24]
 800aa70:	e002      	b.n	800aa78 <tcp_enqueue_flags+0x124>
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	61bb      	str	r3, [r7, #24]
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1f8      	bne.n	800aa72 <tcp_enqueue_flags+0x11e>
    useg->next = seg;
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800aa8e:	78fb      	ldrb	r3, [r7, #3]
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d104      	bne.n	800aaa2 <tcp_enqueue_flags+0x14e>
 800aa98:	78fb      	ldrb	r3, [r7, #3]
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d004      	beq.n	800aaac <tcp_enqueue_flags+0x158>
    pcb->snd_lbb++;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d006      	beq.n	800aac4 <tcp_enqueue_flags+0x170>
    tcp_set_flags(pcb, TF_FIN);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	8b5b      	ldrh	r3, [r3, #26]
 800aaba:	f043 0320 	orr.w	r3, r3, #32
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fb fb77 	bl	80061bc <pbuf_clen>
 800aace:	4603      	mov	r3, r0
 800aad0:	461a      	mov	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aad8:	4413      	add	r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00e      	beq.n	800ab0a <tcp_enqueue_flags+0x1b6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <tcp_enqueue_flags+0x1b6>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d106      	bne.n	800ab0a <tcp_enqueue_flags+0x1b6>
 800aafc:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <tcp_enqueue_flags+0x1c0>)
 800aafe:	f240 4265 	movw	r2, #1125	; 0x465
 800ab02:	490b      	ldr	r1, [pc, #44]	; (800ab30 <tcp_enqueue_flags+0x1dc>)
 800ab04:	4805      	ldr	r0, [pc, #20]	; (800ab1c <tcp_enqueue_flags+0x1c8>)
 800ab06:	f004 f849 	bl	800eb9c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3720      	adds	r7, #32
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	08011168 	.word	0x08011168
 800ab18:	0801158c 	.word	0x0801158c
 800ab1c:	080111bc 	.word	0x080111bc
 800ab20:	080115e4 	.word	0x080115e4
 800ab24:	200075ac 	.word	0x200075ac
 800ab28:	08011604 	.word	0x08011604
 800ab2c:	08011640 	.word	0x08011640
 800ab30:	0801166c 	.word	0x0801166c

0800ab34 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ab34:	b5b0      	push	{r4, r5, r7, lr}
 800ab36:	b08a      	sub	sp, #40	; 0x28
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <tcp_output+0x1c>
 800ab42:	4b9e      	ldr	r3, [pc, #632]	; (800adbc <tcp_output+0x288>)
 800ab44:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ab48:	499d      	ldr	r1, [pc, #628]	; (800adc0 <tcp_output+0x28c>)
 800ab4a:	489e      	ldr	r0, [pc, #632]	; (800adc4 <tcp_output+0x290>)
 800ab4c:	f004 f826 	bl	800eb9c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	7d1b      	ldrb	r3, [r3, #20]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d106      	bne.n	800ab66 <tcp_output+0x32>
 800ab58:	4b98      	ldr	r3, [pc, #608]	; (800adbc <tcp_output+0x288>)
 800ab5a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ab5e:	499a      	ldr	r1, [pc, #616]	; (800adc8 <tcp_output+0x294>)
 800ab60:	4898      	ldr	r0, [pc, #608]	; (800adc4 <tcp_output+0x290>)
 800ab62:	f004 f81b 	bl	800eb9c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ab66:	4b99      	ldr	r3, [pc, #612]	; (800adcc <tcp_output+0x298>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d101      	bne.n	800ab74 <tcp_output+0x40>
    return ERR_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	e1ce      	b.n	800af12 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab80:	4293      	cmp	r3, r2
 800ab82:	bf28      	it	cs
 800ab84:	4613      	movcs	r3, r2
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10b      	bne.n	800abae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	8b5b      	ldrh	r3, [r3, #26]
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 81aa 	beq.w	800aef8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fe01 	bl	800b7ac <tcp_send_empty_ack>
 800abaa:	4603      	mov	r3, r0
 800abac:	e1b1      	b.n	800af12 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3304      	adds	r3, #4
 800abb4:	461a      	mov	r2, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff fc66 	bl	800a488 <tcp_route>
 800abbc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <tcp_output+0x96>
    return ERR_RTE;
 800abc4:	f06f 0303 	mvn.w	r3, #3
 800abc8:	e1a3      	b.n	800af12 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <tcp_output+0xa4>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d111      	bne.n	800abfc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <tcp_output+0xb0>
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	3304      	adds	r3, #4
 800abe2:	e000      	b.n	800abe6 <tcp_output+0xb2>
 800abe4:	2300      	movs	r3, #0
 800abe6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <tcp_output+0xc0>
      return ERR_RTE;
 800abee:	f06f 0303 	mvn.w	r3, #3
 800abf2:	e18e      	b.n	800af12 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7f9 fe0f 	bl	8004826 <lwip_htonl>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac12:	8912      	ldrh	r2, [r2, #8]
 800ac14:	4413      	add	r3, r2
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d227      	bcs.n	800ac6c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac22:	461a      	mov	r2, r3
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d114      	bne.n	800ac54 <tcp_output+0x120>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d110      	bne.n	800ac54 <tcp_output+0x120>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10b      	bne.n	800ac54 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	8b5b      	ldrh	r3, [r3, #26]
 800ac58:	f003 0302 	and.w	r3, r3, #2
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 814d 	beq.w	800aefc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 fda2 	bl	800b7ac <tcp_send_empty_ack>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	e152      	b.n	800af12 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac78:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ac7a:	6a3b      	ldr	r3, [r7, #32]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 811c 	beq.w	800aeba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ac82:	e002      	b.n	800ac8a <tcp_output+0x156>
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	623b      	str	r3, [r7, #32]
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1f8      	bne.n	800ac84 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ac92:	e112      	b.n	800aeba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	899b      	ldrh	r3, [r3, #12]
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7f9 fdad 	bl	80047fc <lwip_htons>
 800aca2:	4603      	mov	r3, r0
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	f003 0304 	and.w	r3, r3, #4
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d006      	beq.n	800acbc <tcp_output+0x188>
 800acae:	4b43      	ldr	r3, [pc, #268]	; (800adbc <tcp_output+0x288>)
 800acb0:	f240 5236 	movw	r2, #1334	; 0x536
 800acb4:	4946      	ldr	r1, [pc, #280]	; (800add0 <tcp_output+0x29c>)
 800acb6:	4843      	ldr	r0, [pc, #268]	; (800adc4 <tcp_output+0x290>)
 800acb8:	f003 ff70 	bl	800eb9c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01f      	beq.n	800ad04 <tcp_output+0x1d0>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	8b5b      	ldrh	r3, [r3, #26]
 800acc8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800accc:	2b00      	cmp	r3, #0
 800acce:	d119      	bne.n	800ad04 <tcp_output+0x1d0>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <tcp_output+0x1bc>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d110      	bne.n	800ad04 <tcp_output+0x1d0>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace6:	891a      	ldrh	r2, [r3, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acec:	429a      	cmp	r2, r3
 800acee:	d209      	bcs.n	800ad04 <tcp_output+0x1d0>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d004      	beq.n	800ad04 <tcp_output+0x1d0>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad00:	2b07      	cmp	r3, #7
 800ad02:	d901      	bls.n	800ad08 <tcp_output+0x1d4>
 800ad04:	2301      	movs	r3, #1
 800ad06:	e000      	b.n	800ad0a <tcp_output+0x1d6>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d106      	bne.n	800ad1c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	8b5b      	ldrh	r3, [r3, #26]
 800ad12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f000 80e4 	beq.w	800aee4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	7d1b      	ldrb	r3, [r3, #20]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d00d      	beq.n	800ad40 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	899b      	ldrh	r3, [r3, #12]
 800ad2a:	b29c      	uxth	r4, r3
 800ad2c:	2010      	movs	r0, #16
 800ad2e:	f7f9 fd65 	bl	80047fc <lwip_htons>
 800ad32:	4603      	mov	r3, r0
 800ad34:	461a      	mov	r2, r3
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	4322      	orrs	r2, r4
 800ad3c:	b292      	uxth	r2, r2
 800ad3e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad46:	f000 f909 	bl	800af5c <tcp_output_segment>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ad4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d009      	beq.n	800ad6a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	8b5b      	ldrh	r3, [r3, #26]
 800ad5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5e:	b29a      	uxth	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	835a      	strh	r2, [r3, #26]
      return err;
 800ad64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad68:	e0d3      	b.n	800af12 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	7d1b      	ldrb	r3, [r3, #20]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d006      	beq.n	800ad88 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	8b5b      	ldrh	r3, [r3, #26]
 800ad7e:	f023 0303 	bic.w	r3, r3, #3
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f9 fd49 	bl	8004826 <lwip_htonl>
 800ad94:	4604      	mov	r4, r0
 800ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad98:	891b      	ldrh	r3, [r3, #8]
 800ad9a:	461d      	mov	r5, r3
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	899b      	ldrh	r3, [r3, #12]
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f9 fd29 	bl	80047fc <lwip_htons>
 800adaa:	4603      	mov	r3, r0
 800adac:	b2db      	uxtb	r3, r3
 800adae:	f003 0303 	and.w	r3, r3, #3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00e      	beq.n	800add4 <tcp_output+0x2a0>
 800adb6:	2301      	movs	r3, #1
 800adb8:	e00d      	b.n	800add6 <tcp_output+0x2a2>
 800adba:	bf00      	nop
 800adbc:	08011168 	.word	0x08011168
 800adc0:	08011694 	.word	0x08011694
 800adc4:	080111bc 	.word	0x080111bc
 800adc8:	080116ac 	.word	0x080116ac
 800adcc:	2000769c 	.word	0x2000769c
 800add0:	080116d4 	.word	0x080116d4
 800add4:	2300      	movs	r3, #0
 800add6:	442b      	add	r3, r5
 800add8:	4423      	add	r3, r4
 800adda:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	da02      	bge.n	800adee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	891b      	ldrh	r3, [r3, #8]
 800adf2:	461c      	mov	r4, r3
 800adf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	899b      	ldrh	r3, [r3, #12]
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7f9 fcfd 	bl	80047fc <lwip_htons>
 800ae02:	4603      	mov	r3, r0
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	f003 0303 	and.w	r3, r3, #3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <tcp_output+0x2de>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <tcp_output+0x2e0>
 800ae12:	2300      	movs	r3, #0
 800ae14:	4423      	add	r3, r4
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d049      	beq.n	800aeae <tcp_output+0x37a>
      seg->next = NULL;
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d105      	bne.n	800ae34 <tcp_output+0x300>
        pcb->unacked = seg;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae2c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	623b      	str	r3, [r7, #32]
 800ae32:	e03f      	b.n	800aeb4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f9 fcf3 	bl	8004826 <lwip_htonl>
 800ae40:	4604      	mov	r4, r0
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f9 fcec 	bl	8004826 <lwip_htonl>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	1ae3      	subs	r3, r4, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	da24      	bge.n	800aea0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3370      	adds	r3, #112	; 0x70
 800ae5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ae5c:	e002      	b.n	800ae64 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d011      	beq.n	800ae90 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7f9 fcd6 	bl	8004826 <lwip_htonl>
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7f9 fccf 	bl	8004826 <lwip_htonl>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	dbe6      	blt.n	800ae5e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	e009      	b.n	800aeb4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aea6:	6a3b      	ldr	r3, [r7, #32]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	623b      	str	r3, [r7, #32]
 800aeac:	e002      	b.n	800aeb4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aeae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aeb0:	f7fc fb77 	bl	80075a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d012      	beq.n	800aee6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7f9 fcad 	bl	8004826 <lwip_htonl>
 800aecc:	4602      	mov	r2, r0
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed6:	8912      	ldrh	r2, [r2, #8]
 800aed8:	4413      	add	r3, r2
  while (seg != NULL &&
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	429a      	cmp	r2, r3
 800aede:	f4bf aed9 	bcs.w	800ac94 <tcp_output+0x160>
 800aee2:	e000      	b.n	800aee6 <tcp_output+0x3b2>
      break;
 800aee4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d108      	bne.n	800af00 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800aef6:	e004      	b.n	800af02 <tcp_output+0x3ce>
    goto output_done;
 800aef8:	bf00      	nop
 800aefa:	e002      	b.n	800af02 <tcp_output+0x3ce>
    goto output_done;
 800aefc:	bf00      	nop
 800aefe:	e000      	b.n	800af02 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800af00:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	8b5b      	ldrh	r3, [r3, #26]
 800af06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3728      	adds	r7, #40	; 0x28
 800af16:	46bd      	mov	sp, r7
 800af18:	bdb0      	pop	{r4, r5, r7, pc}
 800af1a:	bf00      	nop

0800af1c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <tcp_output_segment_busy+0x1c>
 800af2a:	4b09      	ldr	r3, [pc, #36]	; (800af50 <tcp_output_segment_busy+0x34>)
 800af2c:	f240 529a 	movw	r2, #1434	; 0x59a
 800af30:	4908      	ldr	r1, [pc, #32]	; (800af54 <tcp_output_segment_busy+0x38>)
 800af32:	4809      	ldr	r0, [pc, #36]	; (800af58 <tcp_output_segment_busy+0x3c>)
 800af34:	f003 fe32 	bl	800eb9c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	7b9b      	ldrb	r3, [r3, #14]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d001      	beq.n	800af46 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800af42:	2301      	movs	r3, #1
 800af44:	e000      	b.n	800af48 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	08011168 	.word	0x08011168
 800af54:	080116ec 	.word	0x080116ec
 800af58:	080111bc 	.word	0x080111bc

0800af5c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800af5c:	b5b0      	push	{r4, r5, r7, lr}
 800af5e:	b08c      	sub	sp, #48	; 0x30
 800af60:	af04      	add	r7, sp, #16
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <tcp_output_segment+0x20>
 800af6e:	4b70      	ldr	r3, [pc, #448]	; (800b130 <tcp_output_segment+0x1d4>)
 800af70:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800af74:	496f      	ldr	r1, [pc, #444]	; (800b134 <tcp_output_segment+0x1d8>)
 800af76:	4870      	ldr	r0, [pc, #448]	; (800b138 <tcp_output_segment+0x1dc>)
 800af78:	f003 fe10 	bl	800eb9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <tcp_output_segment+0x34>
 800af82:	4b6b      	ldr	r3, [pc, #428]	; (800b130 <tcp_output_segment+0x1d4>)
 800af84:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800af88:	496c      	ldr	r1, [pc, #432]	; (800b13c <tcp_output_segment+0x1e0>)
 800af8a:	486b      	ldr	r0, [pc, #428]	; (800b138 <tcp_output_segment+0x1dc>)
 800af8c:	f003 fe06 	bl	800eb9c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <tcp_output_segment+0x48>
 800af96:	4b66      	ldr	r3, [pc, #408]	; (800b130 <tcp_output_segment+0x1d4>)
 800af98:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800af9c:	4968      	ldr	r1, [pc, #416]	; (800b140 <tcp_output_segment+0x1e4>)
 800af9e:	4866      	ldr	r0, [pc, #408]	; (800b138 <tcp_output_segment+0x1dc>)
 800afa0:	f003 fdfc 	bl	800eb9c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f7ff ffb9 	bl	800af1c <tcp_output_segment_busy>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e0b9      	b.n	800b128 <tcp_output_segment+0x1cc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68dc      	ldr	r4, [r3, #12]
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7f9 fc32 	bl	8004826 <lwip_htonl>
 800afc2:	4603      	mov	r3, r0
 800afc4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	68dc      	ldr	r4, [r3, #12]
 800afce:	4610      	mov	r0, r2
 800afd0:	f7f9 fc14 	bl	80047fc <lwip_htons>
 800afd4:	4603      	mov	r3, r0
 800afd6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800afe0:	441a      	add	r2, r3
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	3314      	adds	r3, #20
 800afec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	7a9b      	ldrb	r3, [r3, #10]
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d015      	beq.n	800b026 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	3304      	adds	r3, #4
 800affe:	461a      	mov	r2, r3
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b006:	f7fc fded 	bl	8007be4 <tcp_eff_send_mss_netif>
 800b00a:	4603      	mov	r3, r0
 800b00c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b00e:	8b7b      	ldrh	r3, [r7, #26]
 800b010:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b014:	4618      	mov	r0, r3
 800b016:	f7f9 fc06 	bl	8004826 <lwip_htonl>
 800b01a:	4602      	mov	r2, r0
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	3304      	adds	r3, #4
 800b024:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	da02      	bge.n	800b036 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2200      	movs	r2, #0
 800b034:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d10c      	bne.n	800b058 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b03e:	4b41      	ldr	r3, [pc, #260]	; (800b144 <tcp_output_segment+0x1e8>)
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7f9 fbea 	bl	8004826 <lwip_htonl>
 800b052:	4602      	mov	r2, r0
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	68da      	ldr	r2, [r3, #12]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	8959      	ldrh	r1, [r3, #10]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	8b3a      	ldrh	r2, [r7, #24]
 800b072:	1a8a      	subs	r2, r1, r2
 800b074:	b292      	uxth	r2, r2
 800b076:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	8919      	ldrh	r1, [r3, #8]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	8b3a      	ldrh	r2, [r7, #24]
 800b084:	1a8a      	subs	r2, r1, r2
 800b086:	b292      	uxth	r2, r2
 800b088:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	68d2      	ldr	r2, [r2, #12]
 800b092:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	741a      	strb	r2, [r3, #16]
 800b09c:	2200      	movs	r2, #0
 800b09e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	f103 0214 	add.w	r2, r3, #20
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	7a9b      	ldrb	r3, [r3, #10]
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	f003 0304 	and.w	r3, r3, #4
 800b0b2:	4413      	add	r3, r2
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d006      	beq.n	800b0c8 <tcp_output_segment+0x16c>
 800b0ba:	4b1d      	ldr	r3, [pc, #116]	; (800b130 <tcp_output_segment+0x1d4>)
 800b0bc:	f240 621c 	movw	r2, #1564	; 0x61c
 800b0c0:	4921      	ldr	r1, [pc, #132]	; (800b148 <tcp_output_segment+0x1ec>)
 800b0c2:	481d      	ldr	r0, [pc, #116]	; (800b138 <tcp_output_segment+0x1dc>)
 800b0c4:	f003 fd6a 	bl	800eb9c <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800b0d0:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800b0d2:	68bd      	ldr	r5, [r7, #8]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	68d4      	ldr	r4, [r2, #12]
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	462b      	mov	r3, r5
 800b0e0:	460a      	mov	r2, r1
 800b0e2:	2106      	movs	r1, #6
 800b0e4:	f7f9 fcbc 	bl	8004a60 <ip_chksum_pseudo>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	8223      	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 800b0ec:	4b17      	ldr	r3, [pc, #92]	; (800b14c <tcp_output_segment+0x1f0>)
 800b0ee:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	4b15      	ldr	r3, [pc, #84]	; (800b14c <tcp_output_segment+0x1f0>)
 800b0f8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6858      	ldr	r0, [r3, #4]
 800b100:	68b9      	ldr	r1, [r7, #8]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	1d1c      	adds	r4, r3, #4
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	7add      	ldrb	r5, [r3, #11]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	7a9b      	ldrb	r3, [r3, #10]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	9202      	str	r2, [sp, #8]
 800b112:	2206      	movs	r2, #6
 800b114:	9201      	str	r2, [sp, #4]
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	462b      	mov	r3, r5
 800b11a:	4622      	mov	r2, r4
 800b11c:	f002 fbde 	bl	800d8dc <ip4_output_if>
 800b120:	4603      	mov	r3, r0
 800b122:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3720      	adds	r7, #32
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bdb0      	pop	{r4, r5, r7, pc}
 800b130:	08011168 	.word	0x08011168
 800b134:	08011714 	.word	0x08011714
 800b138:	080111bc 	.word	0x080111bc
 800b13c:	08011734 	.word	0x08011734
 800b140:	08011754 	.word	0x08011754
 800b144:	2000768c 	.word	0x2000768c
 800b148:	08011778 	.word	0x08011778
 800b14c:	200075ac 	.word	0x200075ac

0800b150 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b150:	b5b0      	push	{r4, r5, r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d106      	bne.n	800b16c <tcp_rexmit_rto_prepare+0x1c>
 800b15e:	4b31      	ldr	r3, [pc, #196]	; (800b224 <tcp_rexmit_rto_prepare+0xd4>)
 800b160:	f240 6263 	movw	r2, #1635	; 0x663
 800b164:	4930      	ldr	r1, [pc, #192]	; (800b228 <tcp_rexmit_rto_prepare+0xd8>)
 800b166:	4831      	ldr	r0, [pc, #196]	; (800b22c <tcp_rexmit_rto_prepare+0xdc>)
 800b168:	f003 fd18 	bl	800eb9c <iprintf>

  if (pcb->unacked == NULL) {
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b174:	f06f 0305 	mvn.w	r3, #5
 800b178:	e050      	b.n	800b21c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	e00b      	b.n	800b19a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7ff feca 	bl	800af1c <tcp_output_segment_busy>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d002      	beq.n	800b194 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b18e:	f06f 0305 	mvn.w	r3, #5
 800b192:	e043      	b.n	800b21c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1ef      	bne.n	800b182 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f7ff feba 	bl	800af1c <tcp_output_segment_busy>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b1ae:	f06f 0305 	mvn.w	r3, #5
 800b1b2:	e033      	b.n	800b21c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	8b5b      	ldrh	r3, [r3, #26]
 800b1ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f9 fb21 	bl	8004826 <lwip_htonl>
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	891b      	ldrh	r3, [r3, #8]
 800b1ea:	461d      	mov	r5, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	899b      	ldrh	r3, [r3, #12]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7f9 fb01 	bl	80047fc <lwip_htons>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	f003 0303 	and.w	r3, r3, #3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d001      	beq.n	800b20a <tcp_rexmit_rto_prepare+0xba>
 800b206:	2301      	movs	r3, #1
 800b208:	e000      	b.n	800b20c <tcp_rexmit_rto_prepare+0xbc>
 800b20a:	2300      	movs	r3, #0
 800b20c:	442b      	add	r3, r5
 800b20e:	18e2      	adds	r2, r4, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bdb0      	pop	{r4, r5, r7, pc}
 800b224:	08011168 	.word	0x08011168
 800b228:	0801178c 	.word	0x0801178c
 800b22c:	080111bc 	.word	0x080111bc

0800b230 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <tcp_rexmit_rto_commit+0x1c>
 800b23e:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <tcp_rexmit_rto_commit+0x44>)
 800b240:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b244:	490c      	ldr	r1, [pc, #48]	; (800b278 <tcp_rexmit_rto_commit+0x48>)
 800b246:	480d      	ldr	r0, [pc, #52]	; (800b27c <tcp_rexmit_rto_commit+0x4c>)
 800b248:	f003 fca8 	bl	800eb9c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b252:	2bff      	cmp	r3, #255	; 0xff
 800b254:	d007      	beq.n	800b266 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b25c:	3301      	adds	r3, #1
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7ff fc64 	bl	800ab34 <tcp_output>
}
 800b26c:	bf00      	nop
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	08011168 	.word	0x08011168
 800b278:	080117b0 	.word	0x080117b0
 800b27c:	080111bc 	.word	0x080111bc

0800b280 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <tcp_rexmit_rto+0x1c>
 800b28e:	4b0a      	ldr	r3, [pc, #40]	; (800b2b8 <tcp_rexmit_rto+0x38>)
 800b290:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b294:	4909      	ldr	r1, [pc, #36]	; (800b2bc <tcp_rexmit_rto+0x3c>)
 800b296:	480a      	ldr	r0, [pc, #40]	; (800b2c0 <tcp_rexmit_rto+0x40>)
 800b298:	f003 fc80 	bl	800eb9c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f7ff ff57 	bl	800b150 <tcp_rexmit_rto_prepare>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d102      	bne.n	800b2ae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7ff ffc1 	bl	800b230 <tcp_rexmit_rto_commit>
  }
}
 800b2ae:	bf00      	nop
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	08011168 	.word	0x08011168
 800b2bc:	080117d4 	.word	0x080117d4
 800b2c0:	080111bc 	.word	0x080111bc

0800b2c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b2c4:	b590      	push	{r4, r7, lr}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <tcp_rexmit+0x1c>
 800b2d2:	4b2f      	ldr	r3, [pc, #188]	; (800b390 <tcp_rexmit+0xcc>)
 800b2d4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b2d8:	492e      	ldr	r1, [pc, #184]	; (800b394 <tcp_rexmit+0xd0>)
 800b2da:	482f      	ldr	r0, [pc, #188]	; (800b398 <tcp_rexmit+0xd4>)
 800b2dc:	f003 fc5e 	bl	800eb9c <iprintf>

  if (pcb->unacked == NULL) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d102      	bne.n	800b2ee <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b2e8:	f06f 0305 	mvn.w	r3, #5
 800b2ec:	e04c      	b.n	800b388 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b2f4:	68b8      	ldr	r0, [r7, #8]
 800b2f6:	f7ff fe11 	bl	800af1c <tcp_output_segment_busy>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b300:	f06f 0305 	mvn.w	r3, #5
 800b304:	e040      	b.n	800b388 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	336c      	adds	r3, #108	; 0x6c
 800b312:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b314:	e002      	b.n	800b31c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d011      	beq.n	800b348 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7f9 fa7a 	bl	8004826 <lwip_htonl>
 800b332:	4604      	mov	r4, r0
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7f9 fa73 	bl	8004826 <lwip_htonl>
 800b340:	4603      	mov	r3, r0
 800b342:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b344:	2b00      	cmp	r3, #0
 800b346:	dbe6      	blt.n	800b316 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d103      	bne.n	800b366 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b36c:	2bff      	cmp	r3, #255	; 0xff
 800b36e:	d007      	beq.n	800b380 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b376:	3301      	adds	r3, #1
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd90      	pop	{r4, r7, pc}
 800b390:	08011168 	.word	0x08011168
 800b394:	080117f0 	.word	0x080117f0
 800b398:	080111bc 	.word	0x080111bc

0800b39c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d106      	bne.n	800b3b8 <tcp_rexmit_fast+0x1c>
 800b3aa:	4b2a      	ldr	r3, [pc, #168]	; (800b454 <tcp_rexmit_fast+0xb8>)
 800b3ac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b3b0:	4929      	ldr	r1, [pc, #164]	; (800b458 <tcp_rexmit_fast+0xbc>)
 800b3b2:	482a      	ldr	r0, [pc, #168]	; (800b45c <tcp_rexmit_fast+0xc0>)
 800b3b4:	f003 fbf2 	bl	800eb9c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d045      	beq.n	800b44c <tcp_rexmit_fast+0xb0>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	8b5b      	ldrh	r3, [r3, #26]
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d13f      	bne.n	800b44c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7ff ff79 	bl	800b2c4 <tcp_rexmit>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d139      	bne.n	800b44c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	bf28      	it	cs
 800b3e8:	4613      	movcs	r3, r2
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	da00      	bge.n	800b3f2 <tcp_rexmit_fast+0x56>
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	105b      	asrs	r3, r3, #1
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b402:	461a      	mov	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b408:	005b      	lsls	r3, r3, #1
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d206      	bcs.n	800b41c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b426:	4619      	mov	r1, r3
 800b428:	0049      	lsls	r1, r1, #1
 800b42a:	440b      	add	r3, r1
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	4413      	add	r3, r2
 800b430:	b29a      	uxth	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8b5b      	ldrh	r3, [r3, #26]
 800b43c:	f043 0304 	orr.w	r3, r3, #4
 800b440:	b29a      	uxth	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	08011168 	.word	0x08011168
 800b458:	08011808 	.word	0x08011808
 800b45c:	080111bc 	.word	0x080111bc

0800b460 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	607b      	str	r3, [r7, #4]
 800b46a:	460b      	mov	r3, r1
 800b46c:	817b      	strh	r3, [r7, #10]
 800b46e:	4613      	mov	r3, r2
 800b470:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b472:	897a      	ldrh	r2, [r7, #10]
 800b474:	893b      	ldrh	r3, [r7, #8]
 800b476:	4413      	add	r3, r2
 800b478:	b29b      	uxth	r3, r3
 800b47a:	3314      	adds	r3, #20
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b482:	4619      	mov	r1, r3
 800b484:	2022      	movs	r0, #34	; 0x22
 800b486:	f7fa fb71 	bl	8005b6c <pbuf_alloc>
 800b48a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d04d      	beq.n	800b52e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b492:	897b      	ldrh	r3, [r7, #10]
 800b494:	3313      	adds	r3, #19
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	8952      	ldrh	r2, [r2, #10]
 800b49a:	4293      	cmp	r3, r2
 800b49c:	db06      	blt.n	800b4ac <tcp_output_alloc_header_common+0x4c>
 800b49e:	4b26      	ldr	r3, [pc, #152]	; (800b538 <tcp_output_alloc_header_common+0xd8>)
 800b4a0:	f240 7223 	movw	r2, #1827	; 0x723
 800b4a4:	4925      	ldr	r1, [pc, #148]	; (800b53c <tcp_output_alloc_header_common+0xdc>)
 800b4a6:	4826      	ldr	r0, [pc, #152]	; (800b540 <tcp_output_alloc_header_common+0xe0>)
 800b4a8:	f003 fb78 	bl	800eb9c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b4b2:	8c3b      	ldrh	r3, [r7, #32]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7f9 f9a1 	bl	80047fc <lwip_htons>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	461a      	mov	r2, r3
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b4c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7f9 f999 	bl	80047fc <lwip_htons>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b4d8:	68f8      	ldr	r0, [r7, #12]
 800b4da:	f7f9 f9a4 	bl	8004826 <lwip_htonl>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b4e4:	897b      	ldrh	r3, [r7, #10]
 800b4e6:	089b      	lsrs	r3, r3, #2
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	3305      	adds	r3, #5
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	031b      	lsls	r3, r3, #12
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7f9 f97d 	bl	80047fc <lwip_htons>
 800b502:	4603      	mov	r3, r0
 800b504:	461a      	mov	r2, r3
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b50a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7f9 f975 	bl	80047fc <lwip_htons>
 800b512:	4603      	mov	r3, r0
 800b514:	461a      	mov	r2, r3
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2200      	movs	r2, #0
 800b51e:	741a      	strb	r2, [r3, #16]
 800b520:	2200      	movs	r2, #0
 800b522:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	2200      	movs	r2, #0
 800b528:	749a      	strb	r2, [r3, #18]
 800b52a:	2200      	movs	r2, #0
 800b52c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b52e:	697b      	ldr	r3, [r7, #20]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3718      	adds	r7, #24
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	08011168 	.word	0x08011168
 800b53c:	08011828 	.word	0x08011828
 800b540:	080111bc 	.word	0x080111bc

0800b544 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b544:	b5b0      	push	{r4, r5, r7, lr}
 800b546:	b08a      	sub	sp, #40	; 0x28
 800b548:	af04      	add	r7, sp, #16
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	607b      	str	r3, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	817b      	strh	r3, [r7, #10]
 800b552:	4613      	mov	r3, r2
 800b554:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d106      	bne.n	800b56a <tcp_output_alloc_header+0x26>
 800b55c:	4b15      	ldr	r3, [pc, #84]	; (800b5b4 <tcp_output_alloc_header+0x70>)
 800b55e:	f240 7242 	movw	r2, #1858	; 0x742
 800b562:	4915      	ldr	r1, [pc, #84]	; (800b5b8 <tcp_output_alloc_header+0x74>)
 800b564:	4815      	ldr	r0, [pc, #84]	; (800b5bc <tcp_output_alloc_header+0x78>)
 800b566:	f003 fb19 	bl	800eb9c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	8adb      	ldrh	r3, [r3, #22]
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	8b12      	ldrh	r2, [r2, #24]
 800b576:	68f9      	ldr	r1, [r7, #12]
 800b578:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b57a:	893d      	ldrh	r5, [r7, #8]
 800b57c:	897c      	ldrh	r4, [r7, #10]
 800b57e:	9103      	str	r1, [sp, #12]
 800b580:	2110      	movs	r1, #16
 800b582:	9102      	str	r1, [sp, #8]
 800b584:	9201      	str	r2, [sp, #4]
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	462a      	mov	r2, r5
 800b58c:	4621      	mov	r1, r4
 800b58e:	f7ff ff67 	bl	800b460 <tcp_output_alloc_header_common>
 800b592:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d006      	beq.n	800b5a8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b5a2:	441a      	add	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b5a8:	697b      	ldr	r3, [r7, #20]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	08011168 	.word	0x08011168
 800b5b8:	08011858 	.word	0x08011858
 800b5bc:	080111bc 	.word	0x080111bc

0800b5c0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	71fb      	strb	r3, [r7, #7]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d106      	bne.n	800b5ee <tcp_output_fill_options+0x2e>
 800b5e0:	4b13      	ldr	r3, [pc, #76]	; (800b630 <tcp_output_fill_options+0x70>)
 800b5e2:	f240 7256 	movw	r2, #1878	; 0x756
 800b5e6:	4913      	ldr	r1, [pc, #76]	; (800b634 <tcp_output_fill_options+0x74>)
 800b5e8:	4813      	ldr	r0, [pc, #76]	; (800b638 <tcp_output_fill_options+0x78>)
 800b5ea:	f003 fad7 	bl	800eb9c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	3314      	adds	r3, #20
 800b5f8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	f103 0214 	add.w	r2, r3, #20
 800b600:	8bfb      	ldrh	r3, [r7, #30]
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	4619      	mov	r1, r3
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	440b      	add	r3, r1
 800b610:	4413      	add	r3, r2
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	429a      	cmp	r2, r3
 800b616:	d006      	beq.n	800b626 <tcp_output_fill_options+0x66>
 800b618:	4b05      	ldr	r3, [pc, #20]	; (800b630 <tcp_output_fill_options+0x70>)
 800b61a:	f240 7275 	movw	r2, #1909	; 0x775
 800b61e:	4907      	ldr	r1, [pc, #28]	; (800b63c <tcp_output_fill_options+0x7c>)
 800b620:	4805      	ldr	r0, [pc, #20]	; (800b638 <tcp_output_fill_options+0x78>)
 800b622:	f003 fabb 	bl	800eb9c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b626:	bf00      	nop
 800b628:	3720      	adds	r7, #32
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	08011168 	.word	0x08011168
 800b634:	08011880 	.word	0x08011880
 800b638:	080111bc 	.word	0x080111bc
 800b63c:	08011778 	.word	0x08011778

0800b640 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b08c      	sub	sp, #48	; 0x30
 800b644:	af04      	add	r7, sp, #16
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d106      	bne.n	800b662 <tcp_output_control_segment+0x22>
 800b654:	4b28      	ldr	r3, [pc, #160]	; (800b6f8 <tcp_output_control_segment+0xb8>)
 800b656:	f240 7287 	movw	r2, #1927	; 0x787
 800b65a:	4928      	ldr	r1, [pc, #160]	; (800b6fc <tcp_output_control_segment+0xbc>)
 800b65c:	4828      	ldr	r0, [pc, #160]	; (800b700 <tcp_output_control_segment+0xc0>)
 800b65e:	f003 fa9d 	bl	800eb9c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	6879      	ldr	r1, [r7, #4]
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f7fe ff0e 	bl	800a488 <tcp_route>
 800b66c:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d102      	bne.n	800b67a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b674:	23fc      	movs	r3, #252	; 0xfc
 800b676:	77fb      	strb	r3, [r7, #31]
 800b678:	e034      	b.n	800b6e4 <tcp_output_control_segment+0xa4>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	891a      	ldrh	r2, [r3, #8]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2106      	movs	r1, #6
 800b68c:	68b8      	ldr	r0, [r7, #8]
 800b68e:	f7f9 f9e7 	bl	8004a60 <ip_chksum_pseudo>
 800b692:	4603      	mov	r3, r0
 800b694:	461a      	mov	r2, r3
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d006      	beq.n	800b6ae <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	7adb      	ldrb	r3, [r3, #11]
 800b6a4:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	7a9b      	ldrb	r3, [r3, #10]
 800b6aa:	777b      	strb	r3, [r7, #29]
 800b6ac:	e003      	b.n	800b6b6 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b6ae:	23ff      	movs	r3, #255	; 0xff
 800b6b0:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
 800b6b6:	4b13      	ldr	r3, [pc, #76]	; (800b704 <tcp_output_control_segment+0xc4>)
 800b6b8:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 800b6bc:	3301      	adds	r3, #1
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	4b10      	ldr	r3, [pc, #64]	; (800b704 <tcp_output_control_segment+0xc4>)
 800b6c2:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b6c6:	7fba      	ldrb	r2, [r7, #30]
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	9302      	str	r3, [sp, #8]
 800b6cc:	2306      	movs	r3, #6
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	7f7b      	ldrb	r3, [r7, #29]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	6879      	ldr	r1, [r7, #4]
 800b6da:	68b8      	ldr	r0, [r7, #8]
 800b6dc:	f002 f8fe 	bl	800d8dc <ip4_output_if>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b6e4:	68b8      	ldr	r0, [r7, #8]
 800b6e6:	f7fa fce1 	bl	80060ac <pbuf_free>
  return err;
 800b6ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3720      	adds	r7, #32
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	08011168 	.word	0x08011168
 800b6fc:	080118a8 	.word	0x080118a8
 800b700:	080111bc 	.word	0x080111bc
 800b704:	200075ac 	.word	0x200075ac

0800b708 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b708:	b590      	push	{r4, r7, lr}
 800b70a:	b08b      	sub	sp, #44	; 0x2c
 800b70c:	af04      	add	r7, sp, #16
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d106      	bne.n	800b72a <tcp_rst+0x22>
 800b71c:	4b1f      	ldr	r3, [pc, #124]	; (800b79c <tcp_rst+0x94>)
 800b71e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b722:	491f      	ldr	r1, [pc, #124]	; (800b7a0 <tcp_rst+0x98>)
 800b724:	481f      	ldr	r0, [pc, #124]	; (800b7a4 <tcp_rst+0x9c>)
 800b726:	f003 fa39 	bl	800eb9c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <tcp_rst+0x36>
 800b730:	4b1a      	ldr	r3, [pc, #104]	; (800b79c <tcp_rst+0x94>)
 800b732:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b736:	491c      	ldr	r1, [pc, #112]	; (800b7a8 <tcp_rst+0xa0>)
 800b738:	481a      	ldr	r0, [pc, #104]	; (800b7a4 <tcp_rst+0x9c>)
 800b73a:	f003 fa2f 	bl	800eb9c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b73e:	2300      	movs	r3, #0
 800b740:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b742:	f246 0308 	movw	r3, #24584	; 0x6008
 800b746:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	b29c      	uxth	r4, r3
 800b74c:	68b8      	ldr	r0, [r7, #8]
 800b74e:	f7f9 f86a 	bl	8004826 <lwip_htonl>
 800b752:	4602      	mov	r2, r0
 800b754:	8abb      	ldrh	r3, [r7, #20]
 800b756:	9303      	str	r3, [sp, #12]
 800b758:	2314      	movs	r3, #20
 800b75a:	9302      	str	r3, [sp, #8]
 800b75c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b75e:	9301      	str	r3, [sp, #4]
 800b760:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	4613      	mov	r3, r2
 800b766:	2200      	movs	r2, #0
 800b768:	4621      	mov	r1, r4
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff fe78 	bl	800b460 <tcp_output_alloc_header_common>
 800b770:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00c      	beq.n	800b792 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	2200      	movs	r2, #0
 800b77c:	6939      	ldr	r1, [r7, #16]
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff ff1e 	bl	800b5c0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	6939      	ldr	r1, [r7, #16]
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f7ff ff58 	bl	800b640 <tcp_output_control_segment>
 800b790:	e000      	b.n	800b794 <tcp_rst+0x8c>
    return;
 800b792:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b794:	371c      	adds	r7, #28
 800b796:	46bd      	mov	sp, r7
 800b798:	bd90      	pop	{r4, r7, pc}
 800b79a:	bf00      	nop
 800b79c:	08011168 	.word	0x08011168
 800b7a0:	080118d4 	.word	0x080118d4
 800b7a4:	080111bc 	.word	0x080111bc
 800b7a8:	080118f0 	.word	0x080118f0

0800b7ac <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b7ac:	b590      	push	{r4, r7, lr}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d106      	bne.n	800b7d0 <tcp_send_empty_ack+0x24>
 800b7c2:	4b28      	ldr	r3, [pc, #160]	; (800b864 <tcp_send_empty_ack+0xb8>)
 800b7c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b7c8:	4927      	ldr	r1, [pc, #156]	; (800b868 <tcp_send_empty_ack+0xbc>)
 800b7ca:	4828      	ldr	r0, [pc, #160]	; (800b86c <tcp_send_empty_ack+0xc0>)
 800b7cc:	f003 f9e6 	bl	800eb9c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	f003 0304 	and.w	r3, r3, #4
 800b7da:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b7dc:	7d7b      	ldrb	r3, [r7, #21]
 800b7de:	b29c      	uxth	r4, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7f9 f81e 	bl	8004826 <lwip_htonl>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff fea7 	bl	800b544 <tcp_output_alloc_header>
 800b7f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d109      	bne.n	800b812 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8b5b      	ldrh	r3, [r3, #26]
 800b802:	f043 0303 	orr.w	r3, r3, #3
 800b806:	b29a      	uxth	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b80c:	f06f 0301 	mvn.w	r3, #1
 800b810:	e023      	b.n	800b85a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b812:	7dbb      	ldrb	r3, [r7, #22]
 800b814:	7dfa      	ldrb	r2, [r7, #23]
 800b816:	6939      	ldr	r1, [r7, #16]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff fed1 	bl	800b5c0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3304      	adds	r3, #4
 800b824:	6939      	ldr	r1, [r7, #16]
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f7ff ff0a 	bl	800b640 <tcp_output_control_segment>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d007      	beq.n	800b848 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	8b5b      	ldrh	r3, [r3, #26]
 800b83c:	f043 0303 	orr.w	r3, r3, #3
 800b840:	b29a      	uxth	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	835a      	strh	r2, [r3, #26]
 800b846:	e006      	b.n	800b856 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	8b5b      	ldrh	r3, [r3, #26]
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	b29a      	uxth	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd90      	pop	{r4, r7, pc}
 800b862:	bf00      	nop
 800b864:	08011168 	.word	0x08011168
 800b868:	0801190c 	.word	0x0801190c
 800b86c:	080111bc 	.word	0x080111bc

0800b870 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b870:	b590      	push	{r4, r7, lr}
 800b872:	b087      	sub	sp, #28
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b878:	2300      	movs	r3, #0
 800b87a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d106      	bne.n	800b890 <tcp_keepalive+0x20>
 800b882:	4b18      	ldr	r3, [pc, #96]	; (800b8e4 <tcp_keepalive+0x74>)
 800b884:	f640 0224 	movw	r2, #2084	; 0x824
 800b888:	4917      	ldr	r1, [pc, #92]	; (800b8e8 <tcp_keepalive+0x78>)
 800b88a:	4818      	ldr	r0, [pc, #96]	; (800b8ec <tcp_keepalive+0x7c>)
 800b88c:	f003 f986 	bl	800eb9c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b890:	7dfb      	ldrb	r3, [r7, #23]
 800b892:	b29c      	uxth	r4, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b898:	3b01      	subs	r3, #1
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7f8 ffc3 	bl	8004826 <lwip_htonl>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7ff fe4c 	bl	800b544 <tcp_output_alloc_header>
 800b8ac:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d102      	bne.n	800b8ba <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b8:	e010      	b.n	800b8dc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b8ba:	7dfb      	ldrb	r3, [r7, #23]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	6939      	ldr	r1, [r7, #16]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff fe7d 	bl	800b5c0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	6939      	ldr	r1, [r7, #16]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff feb6 	bl	800b640 <tcp_output_control_segment>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	371c      	adds	r7, #28
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd90      	pop	{r4, r7, pc}
 800b8e4:	08011168 	.word	0x08011168
 800b8e8:	0801192c 	.word	0x0801192c
 800b8ec:	080111bc 	.word	0x080111bc

0800b8f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b8f0:	b590      	push	{r4, r7, lr}
 800b8f2:	b08b      	sub	sp, #44	; 0x2c
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <tcp_zero_window_probe+0x22>
 800b904:	4b4c      	ldr	r3, [pc, #304]	; (800ba38 <tcp_zero_window_probe+0x148>)
 800b906:	f640 024f 	movw	r2, #2127	; 0x84f
 800b90a:	494c      	ldr	r1, [pc, #304]	; (800ba3c <tcp_zero_window_probe+0x14c>)
 800b90c:	484c      	ldr	r0, [pc, #304]	; (800ba40 <tcp_zero_window_probe+0x150>)
 800b90e:	f003 f945 	bl	800eb9c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b916:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	e086      	b.n	800ba30 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b928:	2bff      	cmp	r3, #255	; 0xff
 800b92a:	d007      	beq.n	800b93c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b932:	3301      	adds	r3, #1
 800b934:	b2da      	uxtb	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	899b      	ldrh	r3, [r3, #12]
 800b942:	b29b      	uxth	r3, r3
 800b944:	4618      	mov	r0, r3
 800b946:	f7f8 ff59 	bl	80047fc <lwip_htons>
 800b94a:	4603      	mov	r3, r0
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	f003 0301 	and.w	r3, r3, #1
 800b952:	2b00      	cmp	r3, #0
 800b954:	d005      	beq.n	800b962 <tcp_zero_window_probe+0x72>
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	891b      	ldrh	r3, [r3, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <tcp_zero_window_probe+0x72>
 800b95e:	2301      	movs	r3, #1
 800b960:	e000      	b.n	800b964 <tcp_zero_window_probe+0x74>
 800b962:	2300      	movs	r3, #0
 800b964:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b966:	7ffb      	ldrb	r3, [r7, #31]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bf0c      	ite	eq
 800b96c:	2301      	moveq	r3, #1
 800b96e:	2300      	movne	r3, #0
 800b970:	b2db      	uxtb	r3, r3
 800b972:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b978:	b299      	uxth	r1, r3
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	8bba      	ldrh	r2, [r7, #28]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fdde 	bl	800b544 <tcp_output_alloc_header>
 800b988:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d102      	bne.n	800b996 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b990:	f04f 33ff 	mov.w	r3, #4294967295
 800b994:	e04c      	b.n	800ba30 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b99c:	7ffb      	ldrb	r3, [r7, #31]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d011      	beq.n	800b9c6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	899b      	ldrh	r3, [r3, #12]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	b21b      	sxth	r3, r3
 800b9aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b9ae:	b21c      	sxth	r4, r3
 800b9b0:	2011      	movs	r0, #17
 800b9b2:	f7f8 ff23 	bl	80047fc <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	b21b      	sxth	r3, r3
 800b9ba:	4323      	orrs	r3, r4
 800b9bc:	b21b      	sxth	r3, r3
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	819a      	strh	r2, [r3, #12]
 800b9c4:	e010      	b.n	800b9e8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	3314      	adds	r3, #20
 800b9cc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b9ce:	6a3b      	ldr	r3, [r7, #32]
 800b9d0:	6858      	ldr	r0, [r3, #4]
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	891a      	ldrh	r2, [r3, #8]
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	891b      	ldrh	r3, [r3, #8]
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	6939      	ldr	r1, [r7, #16]
 800b9e4:	f7fa fd4c 	bl	8006480 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f8 ff19 	bl	8004826 <lwip_htonl>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	da02      	bge.n	800ba0c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba10:	2200      	movs	r2, #0
 800ba12:	69b9      	ldr	r1, [r7, #24]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff fdd3 	bl	800b5c0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	69b9      	ldr	r1, [r7, #24]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff fe0c 	bl	800b640 <tcp_output_control_segment>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ba2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	372c      	adds	r7, #44	; 0x2c
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd90      	pop	{r4, r7, pc}
 800ba38:	08011168 	.word	0x08011168
 800ba3c:	08011948 	.word	0x08011948
 800ba40:	080111bc 	.word	0x080111bc

0800ba44 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ba4c:	f7fa fe0e 	bl	800666c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ba50:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <tcpip_tcp_timer+0x38>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d103      	bne.n	800ba60 <tcpip_tcp_timer+0x1c>
 800ba58:	4b09      	ldr	r3, [pc, #36]	; (800ba80 <tcpip_tcp_timer+0x3c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d005      	beq.n	800ba6c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ba60:	2200      	movs	r2, #0
 800ba62:	4908      	ldr	r1, [pc, #32]	; (800ba84 <tcpip_tcp_timer+0x40>)
 800ba64:	20fa      	movs	r0, #250	; 0xfa
 800ba66:	f000 f8f3 	bl	800bc50 <sys_timeout>
 800ba6a:	e003      	b.n	800ba74 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ba6c:	4b06      	ldr	r3, [pc, #24]	; (800ba88 <tcpip_tcp_timer+0x44>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	601a      	str	r2, [r3, #0]
  }
}
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20007688 	.word	0x20007688
 800ba80:	20007698 	.word	0x20007698
 800ba84:	0800ba45 	.word	0x0800ba45
 800ba88:	20000174 	.word	0x20000174

0800ba8c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <tcp_timer_needed+0x30>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10f      	bne.n	800bab8 <tcp_timer_needed+0x2c>
 800ba98:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <tcp_timer_needed+0x34>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d103      	bne.n	800baa8 <tcp_timer_needed+0x1c>
 800baa0:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <tcp_timer_needed+0x38>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d007      	beq.n	800bab8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <tcp_timer_needed+0x30>)
 800baaa:	2201      	movs	r2, #1
 800baac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800baae:	2200      	movs	r2, #0
 800bab0:	4905      	ldr	r1, [pc, #20]	; (800bac8 <tcp_timer_needed+0x3c>)
 800bab2:	20fa      	movs	r0, #250	; 0xfa
 800bab4:	f000 f8cc 	bl	800bc50 <sys_timeout>
  }
}
 800bab8:	bf00      	nop
 800baba:	bd80      	pop	{r7, pc}
 800babc:	20000174 	.word	0x20000174
 800bac0:	20007688 	.word	0x20007688
 800bac4:	20007698 	.word	0x20007698
 800bac8:	0800ba45 	.word	0x0800ba45

0800bacc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bad8:	2006      	movs	r0, #6
 800bada:	f7f9 fcd7 	bl	800548c <memp_malloc>
 800bade:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d109      	bne.n	800bafa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d151      	bne.n	800bb90 <sys_timeout_abs+0xc4>
 800baec:	4b2a      	ldr	r3, [pc, #168]	; (800bb98 <sys_timeout_abs+0xcc>)
 800baee:	22be      	movs	r2, #190	; 0xbe
 800baf0:	492a      	ldr	r1, [pc, #168]	; (800bb9c <sys_timeout_abs+0xd0>)
 800baf2:	482b      	ldr	r0, [pc, #172]	; (800bba0 <sys_timeout_abs+0xd4>)
 800baf4:	f003 f852 	bl	800eb9c <iprintf>
    return;
 800baf8:	e04a      	b.n	800bb90 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2200      	movs	r2, #0
 800bafe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bb12:	4b24      	ldr	r3, [pc, #144]	; (800bba4 <sys_timeout_abs+0xd8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d103      	bne.n	800bb22 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bb1a:	4a22      	ldr	r2, [pc, #136]	; (800bba4 <sys_timeout_abs+0xd8>)
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	6013      	str	r3, [r2, #0]
    return;
 800bb20:	e037      	b.n	800bb92 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	4b1f      	ldr	r3, [pc, #124]	; (800bba4 <sys_timeout_abs+0xd8>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	0fdb      	lsrs	r3, r3, #31
 800bb30:	f003 0301 	and.w	r3, r3, #1
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d007      	beq.n	800bb4a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bb3a:	4b1a      	ldr	r3, [pc, #104]	; (800bba4 <sys_timeout_abs+0xd8>)
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bb42:	4a18      	ldr	r2, [pc, #96]	; (800bba4 <sys_timeout_abs+0xd8>)
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	e023      	b.n	800bb92 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bb4a:	4b16      	ldr	r3, [pc, #88]	; (800bba4 <sys_timeout_abs+0xd8>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	617b      	str	r3, [r7, #20]
 800bb50:	e01a      	b.n	800bb88 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00b      	beq.n	800bb72 <sys_timeout_abs+0xa6>
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	685a      	ldr	r2, [r3, #4]
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	0fdb      	lsrs	r3, r3, #31
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d007      	beq.n	800bb82 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	601a      	str	r2, [r3, #0]
        break;
 800bb80:	e007      	b.n	800bb92 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	617b      	str	r3, [r7, #20]
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1e1      	bne.n	800bb52 <sys_timeout_abs+0x86>
 800bb8e:	e000      	b.n	800bb92 <sys_timeout_abs+0xc6>
    return;
 800bb90:	bf00      	nop
      }
    }
  }
}
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	0801196c 	.word	0x0801196c
 800bb9c:	080119a0 	.word	0x080119a0
 800bba0:	080119e0 	.word	0x080119e0
 800bba4:	2000016c 	.word	0x2000016c

0800bba8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b086      	sub	sp, #24
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	4798      	blx	r3

  now = sys_now();
 800bbba:	f7f8 fd79 	bl	80046b0 <sys_now>
 800bbbe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <lwip_cyclic_timer+0x5c>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4413      	add	r3, r2
 800bbca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	0fdb      	lsrs	r3, r3, #31
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	4907      	ldr	r1, [pc, #28]	; (800bc08 <lwip_cyclic_timer+0x60>)
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff ff6e 	bl	800bacc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bbf0:	e004      	b.n	800bbfc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	4904      	ldr	r1, [pc, #16]	; (800bc08 <lwip_cyclic_timer+0x60>)
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7ff ff68 	bl	800bacc <sys_timeout_abs>
}
 800bbfc:	bf00      	nop
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	20000170 	.word	0x20000170
 800bc08:	0800bba9 	.word	0x0800bba9

0800bc0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bc12:	2301      	movs	r3, #1
 800bc14:	607b      	str	r3, [r7, #4]
 800bc16:	e00e      	b.n	800bc36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bc18:	4a0b      	ldr	r2, [pc, #44]	; (800bc48 <sys_timeouts_init+0x3c>)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	4a08      	ldr	r2, [pc, #32]	; (800bc48 <sys_timeouts_init+0x3c>)
 800bc26:	4413      	add	r3, r2
 800bc28:	461a      	mov	r2, r3
 800bc2a:	4908      	ldr	r1, [pc, #32]	; (800bc4c <sys_timeouts_init+0x40>)
 800bc2c:	f000 f810 	bl	800bc50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3301      	adds	r3, #1
 800bc34:	607b      	str	r3, [r7, #4]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d9ed      	bls.n	800bc18 <sys_timeouts_init+0xc>
  }
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	3708      	adds	r7, #8
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	08012570 	.word	0x08012570
 800bc4c:	0800bba9 	.word	0x0800bba9

0800bc50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc62:	d306      	bcc.n	800bc72 <sys_timeout+0x22>
 800bc64:	4b0a      	ldr	r3, [pc, #40]	; (800bc90 <sys_timeout+0x40>)
 800bc66:	f240 1229 	movw	r2, #297	; 0x129
 800bc6a:	490a      	ldr	r1, [pc, #40]	; (800bc94 <sys_timeout+0x44>)
 800bc6c:	480a      	ldr	r0, [pc, #40]	; (800bc98 <sys_timeout+0x48>)
 800bc6e:	f002 ff95 	bl	800eb9c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bc72:	f7f8 fd1d 	bl	80046b0 <sys_now>
 800bc76:	4602      	mov	r2, r0
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	68b9      	ldr	r1, [r7, #8]
 800bc82:	6978      	ldr	r0, [r7, #20]
 800bc84:	f7ff ff22 	bl	800bacc <sys_timeout_abs>
#endif
}
 800bc88:	bf00      	nop
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	0801196c 	.word	0x0801196c
 800bc94:	08011a08 	.word	0x08011a08
 800bc98:	080119e0 	.word	0x080119e0

0800bc9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bca2:	f7f8 fd05 	bl	80046b0 <sys_now>
 800bca6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bca8:	4b1a      	ldr	r3, [pc, #104]	; (800bd14 <sys_check_timeouts+0x78>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <sys_check_timeouts+0x1a>
 800bcb2:	f7f9 ff05 	bl	8005ac0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bcb6:	4b18      	ldr	r3, [pc, #96]	; (800bd18 <sys_check_timeouts+0x7c>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d022      	beq.n	800bd08 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	0fdb      	lsrs	r3, r3, #31
 800bccc:	f003 0301 	and.w	r3, r3, #1
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d11a      	bne.n	800bd0c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a0f      	ldr	r2, [pc, #60]	; (800bd18 <sys_check_timeouts+0x7c>)
 800bcdc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	4a0b      	ldr	r2, [pc, #44]	; (800bd1c <sys_check_timeouts+0x80>)
 800bcf0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bcf2:	68b9      	ldr	r1, [r7, #8]
 800bcf4:	2006      	movs	r0, #6
 800bcf6:	f7f9 fc0b 	bl	8005510 <memp_free>
    if (handler != NULL) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d0d3      	beq.n	800bca8 <sys_check_timeouts+0xc>
      handler(arg);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6838      	ldr	r0, [r7, #0]
 800bd04:	4798      	blx	r3
  do {
 800bd06:	e7cf      	b.n	800bca8 <sys_check_timeouts+0xc>
      return;
 800bd08:	bf00      	nop
 800bd0a:	e000      	b.n	800bd0e <sys_check_timeouts+0x72>
      return;
 800bd0c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	200075a8 	.word	0x200075a8
 800bd18:	2000016c 	.word	0x2000016c
 800bd1c:	20000170 	.word	0x20000170

0800bd20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bd24:	f002 ff52 	bl	800ebcc <rand>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	4b01      	ldr	r3, [pc, #4]	; (800bd40 <udp_init+0x20>)
 800bd3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bd3c:	bf00      	nop
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	20000010 	.word	0x20000010

0800bd44 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d105      	bne.n	800bd64 <udp_input_local_match+0x20>
 800bd58:	4b27      	ldr	r3, [pc, #156]	; (800bdf8 <udp_input_local_match+0xb4>)
 800bd5a:	2287      	movs	r2, #135	; 0x87
 800bd5c:	4927      	ldr	r1, [pc, #156]	; (800bdfc <udp_input_local_match+0xb8>)
 800bd5e:	4828      	ldr	r0, [pc, #160]	; (800be00 <udp_input_local_match+0xbc>)
 800bd60:	f002 ff1c 	bl	800eb9c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d105      	bne.n	800bd76 <udp_input_local_match+0x32>
 800bd6a:	4b23      	ldr	r3, [pc, #140]	; (800bdf8 <udp_input_local_match+0xb4>)
 800bd6c:	2288      	movs	r2, #136	; 0x88
 800bd6e:	4925      	ldr	r1, [pc, #148]	; (800be04 <udp_input_local_match+0xc0>)
 800bd70:	4823      	ldr	r0, [pc, #140]	; (800be00 <udp_input_local_match+0xbc>)
 800bd72:	f002 ff13 	bl	800eb9c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	7a1b      	ldrb	r3, [r3, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	7a1a      	ldrb	r2, [r3, #8]
 800bd82:	4b21      	ldr	r3, [pc, #132]	; (800be08 <udp_input_local_match+0xc4>)
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d001      	beq.n	800bd96 <udp_input_local_match+0x52>
    return 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	e02b      	b.n	800bdee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bd96:	79fb      	ldrb	r3, [r7, #7]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d018      	beq.n	800bdce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d013      	beq.n	800bdca <udp_input_local_match+0x86>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00f      	beq.n	800bdca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bdaa:	4b17      	ldr	r3, [pc, #92]	; (800be08 <udp_input_local_match+0xc4>)
 800bdac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb2:	d00a      	beq.n	800bdca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	4b13      	ldr	r3, [pc, #76]	; (800be08 <udp_input_local_match+0xc4>)
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	405a      	eors	r2, r3
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d110      	bne.n	800bdec <udp_input_local_match+0xa8>
          return 1;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e00f      	b.n	800bdee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d009      	beq.n	800bde8 <udp_input_local_match+0xa4>
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d005      	beq.n	800bde8 <udp_input_local_match+0xa4>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	4b09      	ldr	r3, [pc, #36]	; (800be08 <udp_input_local_match+0xc4>)
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d101      	bne.n	800bdec <udp_input_local_match+0xa8>
        return 1;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e000      	b.n	800bdee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	08011a54 	.word	0x08011a54
 800bdfc:	08011a84 	.word	0x08011a84
 800be00:	08011aa8 	.word	0x08011aa8
 800be04:	08011ad0 	.word	0x08011ad0
 800be08:	200040b8 	.word	0x200040b8

0800be0c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800be0c:	b590      	push	{r4, r7, lr}
 800be0e:	b08d      	sub	sp, #52	; 0x34
 800be10:	af02      	add	r7, sp, #8
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d105      	bne.n	800be2c <udp_input+0x20>
 800be20:	4b9f      	ldr	r3, [pc, #636]	; (800c0a0 <udp_input+0x294>)
 800be22:	22cf      	movs	r2, #207	; 0xcf
 800be24:	499f      	ldr	r1, [pc, #636]	; (800c0a4 <udp_input+0x298>)
 800be26:	48a0      	ldr	r0, [pc, #640]	; (800c0a8 <udp_input+0x29c>)
 800be28:	f002 feb8 	bl	800eb9c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d105      	bne.n	800be3e <udp_input+0x32>
 800be32:	4b9b      	ldr	r3, [pc, #620]	; (800c0a0 <udp_input+0x294>)
 800be34:	22d0      	movs	r2, #208	; 0xd0
 800be36:	499d      	ldr	r1, [pc, #628]	; (800c0ac <udp_input+0x2a0>)
 800be38:	489b      	ldr	r0, [pc, #620]	; (800c0a8 <udp_input+0x29c>)
 800be3a:	f002 feaf 	bl	800eb9c <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 800be3e:	4b9c      	ldr	r3, [pc, #624]	; (800c0b0 <udp_input+0x2a4>)
 800be40:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800be44:	3301      	adds	r3, #1
 800be46:	b29a      	uxth	r2, r3
 800be48:	4b99      	ldr	r3, [pc, #612]	; (800c0b0 <udp_input+0x2a4>)
 800be4a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	895b      	ldrh	r3, [r3, #10]
 800be52:	2b07      	cmp	r3, #7
 800be54:	d813      	bhi.n	800be7e <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 800be56:	4b96      	ldr	r3, [pc, #600]	; (800c0b0 <udp_input+0x2a4>)
 800be58:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800be5c:	3301      	adds	r3, #1
 800be5e:	b29a      	uxth	r2, r3
 800be60:	4b93      	ldr	r3, [pc, #588]	; (800c0b0 <udp_input+0x2a4>)
 800be62:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 800be66:	4b92      	ldr	r3, [pc, #584]	; (800c0b0 <udp_input+0x2a4>)
 800be68:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800be6c:	3301      	adds	r3, #1
 800be6e:	b29a      	uxth	r2, r3
 800be70:	4b8f      	ldr	r3, [pc, #572]	; (800c0b0 <udp_input+0x2a4>)
 800be72:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f7fa f918 	bl	80060ac <pbuf_free>
    goto end;
 800be7c:	e124      	b.n	800c0c8 <udp_input+0x2bc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800be84:	4b8b      	ldr	r3, [pc, #556]	; (800c0b4 <udp_input+0x2a8>)
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	4a8a      	ldr	r2, [pc, #552]	; (800c0b4 <udp_input+0x2a8>)
 800be8a:	6812      	ldr	r2, [r2, #0]
 800be8c:	4611      	mov	r1, r2
 800be8e:	4618      	mov	r0, r3
 800be90:	f001 fe7c 	bl	800db8c <ip4_addr_isbroadcast_u32>
 800be94:	4603      	mov	r3, r0
 800be96:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f8 fcac 	bl	80047fc <lwip_htons>
 800bea4:	4603      	mov	r3, r0
 800bea6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	885b      	ldrh	r3, [r3, #2]
 800beac:	b29b      	uxth	r3, r3
 800beae:	4618      	mov	r0, r3
 800beb0:	f7f8 fca4 	bl	80047fc <lwip_htons>
 800beb4:	4603      	mov	r3, r0
 800beb6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800beb8:	2300      	movs	r3, #0
 800beba:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bebc:	2300      	movs	r3, #0
 800bebe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bec0:	2300      	movs	r3, #0
 800bec2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bec4:	4b7c      	ldr	r3, [pc, #496]	; (800c0b8 <udp_input+0x2ac>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
 800beca:	e05d      	b.n	800bf88 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	8a5b      	ldrh	r3, [r3, #18]
 800bed0:	89fa      	ldrh	r2, [r7, #14]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d153      	bne.n	800bf7e <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bed6:	7cfb      	ldrb	r3, [r7, #19]
 800bed8:	461a      	mov	r2, r3
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bede:	f7ff ff31 	bl	800bd44 <udp_input_local_match>
 800bee2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d04a      	beq.n	800bf7e <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	7c1b      	ldrb	r3, [r3, #16]
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d11d      	bne.n	800bf30 <udp_input+0x124>
        if (uncon_pcb == NULL) {
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d102      	bne.n	800bf00 <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	61fb      	str	r3, [r7, #28]
 800befe:	e017      	b.n	800bf30 <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bf00:	7cfb      	ldrb	r3, [r7, #19]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d014      	beq.n	800bf30 <udp_input+0x124>
 800bf06:	4b6b      	ldr	r3, [pc, #428]	; (800c0b4 <udp_input+0x2a8>)
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0e:	d10f      	bne.n	800bf30 <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	3304      	adds	r3, #4
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d008      	beq.n	800bf30 <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	3304      	adds	r3, #4
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d101      	bne.n	800bf30 <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	8a9b      	ldrh	r3, [r3, #20]
 800bf34:	8a3a      	ldrh	r2, [r7, #16]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d121      	bne.n	800bf7e <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d005      	beq.n	800bf4e <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	4b5b      	ldr	r3, [pc, #364]	; (800c0b4 <udp_input+0x2a8>)
 800bf48:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d117      	bne.n	800bf7e <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00b      	beq.n	800bf6c <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	6a3b      	ldr	r3, [r7, #32]
 800bf5a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bf5c:	4b56      	ldr	r3, [pc, #344]	; (800c0b8 <udp_input+0x2ac>)
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bf64:	4a54      	ldr	r2, [pc, #336]	; (800c0b8 <udp_input+0x2ac>)
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bf6a:	e010      	b.n	800bf8e <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 800bf6c:	4b50      	ldr	r3, [pc, #320]	; (800c0b0 <udp_input+0x2a4>)
 800bf6e:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 800bf72:	3301      	adds	r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	4b4e      	ldr	r3, [pc, #312]	; (800c0b0 <udp_input+0x2a4>)
 800bf78:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 800bf7c:	e007      	b.n	800bf8e <udp_input+0x182>
      }
    }

    prev = pcb;
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf80:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	627b      	str	r3, [r7, #36]	; 0x24
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d19e      	bne.n	800becc <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <udp_input+0x18c>
    pcb = uncon_pcb;
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <udp_input+0x198>
    for_us = 1;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	76fb      	strb	r3, [r7, #27]
 800bfa2:	e00a      	b.n	800bfba <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	4b42      	ldr	r3, [pc, #264]	; (800c0b4 <udp_input+0x2a8>)
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	bf0c      	ite	eq
 800bfb2:	2301      	moveq	r3, #1
 800bfb4:	2300      	movne	r3, #0
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bfba:	7efb      	ldrb	r3, [r7, #27]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d06a      	beq.n	800c096 <udp_input+0x28a>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	88db      	ldrh	r3, [r3, #6]
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00b      	beq.n	800bfe2 <udp_input+0x1d6>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	891a      	ldrh	r2, [r3, #8]
 800bfce:	4b3b      	ldr	r3, [pc, #236]	; (800c0bc <udp_input+0x2b0>)
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	4b3b      	ldr	r3, [pc, #236]	; (800c0c0 <udp_input+0x2b4>)
 800bfd4:	2111      	movs	r1, #17
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7f8 fd42 	bl	8004a60 <ip_chksum_pseudo>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d173      	bne.n	800c0ca <udp_input+0x2be>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bfe2:	2108      	movs	r1, #8
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7f9 ffdb 	bl	8005fa0 <pbuf_remove_header>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d012      	beq.n	800c016 <udp_input+0x20a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bff0:	4b2b      	ldr	r3, [pc, #172]	; (800c0a0 <udp_input+0x294>)
 800bff2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bff6:	4933      	ldr	r1, [pc, #204]	; (800c0c4 <udp_input+0x2b8>)
 800bff8:	482b      	ldr	r0, [pc, #172]	; (800c0a8 <udp_input+0x29c>)
 800bffa:	f002 fdcf 	bl	800eb9c <iprintf>
      UDP_STATS_INC(udp.drop);
 800bffe:	4b2c      	ldr	r3, [pc, #176]	; (800c0b0 <udp_input+0x2a4>)
 800c000:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800c004:	3301      	adds	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	4b29      	ldr	r3, [pc, #164]	; (800c0b0 <udp_input+0x2a4>)
 800c00a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7fa f84c 	bl	80060ac <pbuf_free>
      goto end;
 800c014:	e058      	b.n	800c0c8 <udp_input+0x2bc>
    }

    if (pcb != NULL) {
 800c016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d012      	beq.n	800c042 <udp_input+0x236>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	699b      	ldr	r3, [r3, #24]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00a      	beq.n	800c03a <udp_input+0x22e>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	699c      	ldr	r4, [r3, #24]
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	69d8      	ldr	r0, [r3, #28]
 800c02c:	8a3b      	ldrh	r3, [r7, #16]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	4b23      	ldr	r3, [pc, #140]	; (800c0c0 <udp_input+0x2b4>)
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c036:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c038:	e05b      	b.n	800c0f2 <udp_input+0x2e6>
        pbuf_free(p);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f7fa f836 	bl	80060ac <pbuf_free>
        goto end;
 800c040:	e042      	b.n	800c0c8 <udp_input+0x2bc>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c042:	7cfb      	ldrb	r3, [r7, #19]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d112      	bne.n	800c06e <udp_input+0x262>
 800c048:	4b1a      	ldr	r3, [pc, #104]	; (800c0b4 <udp_input+0x2a8>)
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c050:	2be0      	cmp	r3, #224	; 0xe0
 800c052:	d00c      	beq.n	800c06e <udp_input+0x262>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c054:	4b17      	ldr	r3, [pc, #92]	; (800c0b4 <udp_input+0x2a8>)
 800c056:	899b      	ldrh	r3, [r3, #12]
 800c058:	3308      	adds	r3, #8
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	b21b      	sxth	r3, r3
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7fa f810 	bl	8006086 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c066:	2103      	movs	r1, #3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 f967 	bl	800d33c <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 800c06e:	4b10      	ldr	r3, [pc, #64]	; (800c0b0 <udp_input+0x2a4>)
 800c070:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800c074:	3301      	adds	r3, #1
 800c076:	b29a      	uxth	r2, r3
 800c078:	4b0d      	ldr	r3, [pc, #52]	; (800c0b0 <udp_input+0x2a4>)
 800c07a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 800c07e:	4b0c      	ldr	r3, [pc, #48]	; (800c0b0 <udp_input+0x2a4>)
 800c080:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800c084:	3301      	adds	r3, #1
 800c086:	b29a      	uxth	r2, r3
 800c088:	4b09      	ldr	r3, [pc, #36]	; (800c0b0 <udp_input+0x2a4>)
 800c08a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      pbuf_free(p);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7fa f80c 	bl	80060ac <pbuf_free>
  return;
 800c094:	e02d      	b.n	800c0f2 <udp_input+0x2e6>
    pbuf_free(p);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7fa f808 	bl	80060ac <pbuf_free>
  return;
 800c09c:	e029      	b.n	800c0f2 <udp_input+0x2e6>
 800c09e:	bf00      	nop
 800c0a0:	08011a54 	.word	0x08011a54
 800c0a4:	08011af8 	.word	0x08011af8
 800c0a8:	08011aa8 	.word	0x08011aa8
 800c0ac:	08011b10 	.word	0x08011b10
 800c0b0:	200075ac 	.word	0x200075ac
 800c0b4:	200040b8 	.word	0x200040b8
 800c0b8:	200076a0 	.word	0x200076a0
 800c0bc:	200040cc 	.word	0x200040cc
 800c0c0:	200040c8 	.word	0x200040c8
 800c0c4:	08011b2c 	.word	0x08011b2c
 800c0c8:	e013      	b.n	800c0f2 <udp_input+0x2e6>
            goto chkerr;
 800c0ca:	bf00      	nop
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
 800c0cc:	4b0a      	ldr	r3, [pc, #40]	; (800c0f8 <udp_input+0x2ec>)
 800c0ce:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	4b08      	ldr	r3, [pc, #32]	; (800c0f8 <udp_input+0x2ec>)
 800c0d8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
  UDP_STATS_INC(udp.drop);
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <udp_input+0x2ec>)
 800c0de:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	4b04      	ldr	r3, [pc, #16]	; (800c0f8 <udp_input+0x2ec>)
 800c0e8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7f9 ffdd 	bl	80060ac <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c0f2:	372c      	adds	r7, #44	; 0x2c
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd90      	pop	{r4, r7, pc}
 800c0f8:	200075ac 	.word	0x200075ac

0800c0fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d01e      	beq.n	800c14a <udp_netif_ip_addr_changed+0x4e>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01a      	beq.n	800c14a <udp_netif_ip_addr_changed+0x4e>
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d017      	beq.n	800c14a <udp_netif_ip_addr_changed+0x4e>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d013      	beq.n	800c14a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c122:	4b0d      	ldr	r3, [pc, #52]	; (800c158 <udp_netif_ip_addr_changed+0x5c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	60fb      	str	r3, [r7, #12]
 800c128:	e00c      	b.n	800c144 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	429a      	cmp	r2, r3
 800c134:	d103      	bne.n	800c13e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1ef      	bne.n	800c12a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c14a:	bf00      	nop
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	200076a0 	.word	0x200076a0

0800c15c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c164:	4915      	ldr	r1, [pc, #84]	; (800c1bc <etharp_free_entry+0x60>)
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	4613      	mov	r3, r2
 800c16a:	005b      	lsls	r3, r3, #1
 800c16c:	4413      	add	r3, r2
 800c16e:	00db      	lsls	r3, r3, #3
 800c170:	440b      	add	r3, r1
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d013      	beq.n	800c1a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c178:	4910      	ldr	r1, [pc, #64]	; (800c1bc <etharp_free_entry+0x60>)
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	4613      	mov	r3, r2
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	4413      	add	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	440b      	add	r3, r1
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4618      	mov	r0, r3
 800c18a:	f7f9 ff8f 	bl	80060ac <pbuf_free>
    arp_table[i].q = NULL;
 800c18e:	490b      	ldr	r1, [pc, #44]	; (800c1bc <etharp_free_entry+0x60>)
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	4613      	mov	r3, r2
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	4413      	add	r3, r2
 800c198:	00db      	lsls	r3, r3, #3
 800c19a:	440b      	add	r3, r1
 800c19c:	2200      	movs	r2, #0
 800c19e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c1a0:	4906      	ldr	r1, [pc, #24]	; (800c1bc <etharp_free_entry+0x60>)
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	4613      	mov	r3, r2
 800c1a6:	005b      	lsls	r3, r3, #1
 800c1a8:	4413      	add	r3, r2
 800c1aa:	00db      	lsls	r3, r3, #3
 800c1ac:	440b      	add	r3, r1
 800c1ae:	3314      	adds	r3, #20
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c1b4:	bf00      	nop
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	20000178 	.word	0x20000178

0800c1c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	607b      	str	r3, [r7, #4]
 800c1ca:	e096      	b.n	800c2fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c1cc:	494f      	ldr	r1, [pc, #316]	; (800c30c <etharp_tmr+0x14c>)
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	440b      	add	r3, r1
 800c1da:	3314      	adds	r3, #20
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 8086 	beq.w	800c2f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c1e8:	4948      	ldr	r1, [pc, #288]	; (800c30c <etharp_tmr+0x14c>)
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	005b      	lsls	r3, r3, #1
 800c1f0:	4413      	add	r3, r2
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	440b      	add	r3, r1
 800c1f6:	3312      	adds	r3, #18
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	b298      	uxth	r0, r3
 800c1fe:	4943      	ldr	r1, [pc, #268]	; (800c30c <etharp_tmr+0x14c>)
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	4613      	mov	r3, r2
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	4413      	add	r3, r2
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	440b      	add	r3, r1
 800c20c:	3312      	adds	r3, #18
 800c20e:	4602      	mov	r2, r0
 800c210:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c212:	493e      	ldr	r1, [pc, #248]	; (800c30c <etharp_tmr+0x14c>)
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	4613      	mov	r3, r2
 800c218:	005b      	lsls	r3, r3, #1
 800c21a:	4413      	add	r3, r2
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	440b      	add	r3, r1
 800c220:	3312      	adds	r3, #18
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c228:	d215      	bcs.n	800c256 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c22a:	4938      	ldr	r1, [pc, #224]	; (800c30c <etharp_tmr+0x14c>)
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	4613      	mov	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4413      	add	r3, r2
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	440b      	add	r3, r1
 800c238:	3314      	adds	r3, #20
 800c23a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d10e      	bne.n	800c25e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c240:	4932      	ldr	r1, [pc, #200]	; (800c30c <etharp_tmr+0x14c>)
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4613      	mov	r3, r2
 800c246:	005b      	lsls	r3, r3, #1
 800c248:	4413      	add	r3, r2
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	440b      	add	r3, r1
 800c24e:	3312      	adds	r3, #18
 800c250:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c252:	2b04      	cmp	r3, #4
 800c254:	d903      	bls.n	800c25e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff ff80 	bl	800c15c <etharp_free_entry>
 800c25c:	e04a      	b.n	800c2f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c25e:	492b      	ldr	r1, [pc, #172]	; (800c30c <etharp_tmr+0x14c>)
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	4413      	add	r3, r2
 800c268:	00db      	lsls	r3, r3, #3
 800c26a:	440b      	add	r3, r1
 800c26c:	3314      	adds	r3, #20
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b03      	cmp	r3, #3
 800c272:	d10a      	bne.n	800c28a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c274:	4925      	ldr	r1, [pc, #148]	; (800c30c <etharp_tmr+0x14c>)
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	4613      	mov	r3, r2
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	4413      	add	r3, r2
 800c27e:	00db      	lsls	r3, r3, #3
 800c280:	440b      	add	r3, r1
 800c282:	3314      	adds	r3, #20
 800c284:	2204      	movs	r2, #4
 800c286:	701a      	strb	r2, [r3, #0]
 800c288:	e034      	b.n	800c2f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c28a:	4920      	ldr	r1, [pc, #128]	; (800c30c <etharp_tmr+0x14c>)
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	4613      	mov	r3, r2
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	4413      	add	r3, r2
 800c294:	00db      	lsls	r3, r3, #3
 800c296:	440b      	add	r3, r1
 800c298:	3314      	adds	r3, #20
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b04      	cmp	r3, #4
 800c29e:	d10a      	bne.n	800c2b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c2a0:	491a      	ldr	r1, [pc, #104]	; (800c30c <etharp_tmr+0x14c>)
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	440b      	add	r3, r1
 800c2ae:	3314      	adds	r3, #20
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	e01e      	b.n	800c2f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c2b6:	4915      	ldr	r1, [pc, #84]	; (800c30c <etharp_tmr+0x14c>)
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	4413      	add	r3, r2
 800c2c0:	00db      	lsls	r3, r3, #3
 800c2c2:	440b      	add	r3, r1
 800c2c4:	3314      	adds	r3, #20
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d113      	bne.n	800c2f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c2cc:	490f      	ldr	r1, [pc, #60]	; (800c30c <etharp_tmr+0x14c>)
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	4413      	add	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	440b      	add	r3, r1
 800c2da:	3308      	adds	r3, #8
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	4413      	add	r3, r2
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	4a08      	ldr	r2, [pc, #32]	; (800c30c <etharp_tmr+0x14c>)
 800c2ea:	4413      	add	r3, r2
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	f000 feae 	bl	800d050 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	607b      	str	r3, [r7, #4]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b09      	cmp	r3, #9
 800c2fe:	f77f af65 	ble.w	800c1cc <etharp_tmr+0xc>
      }
    }
  }
}
 800c302:	bf00      	nop
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20000178 	.word	0x20000178

0800c310 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b08a      	sub	sp, #40	; 0x28
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	460b      	mov	r3, r1
 800c31a:	607a      	str	r2, [r7, #4]
 800c31c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c31e:	230a      	movs	r3, #10
 800c320:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c322:	230a      	movs	r3, #10
 800c324:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c326:	230a      	movs	r3, #10
 800c328:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c32a:	2300      	movs	r3, #0
 800c32c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c32e:	230a      	movs	r3, #10
 800c330:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	83bb      	strh	r3, [r7, #28]
 800c336:	2300      	movs	r3, #0
 800c338:	837b      	strh	r3, [r7, #26]
 800c33a:	2300      	movs	r3, #0
 800c33c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c33e:	2300      	movs	r3, #0
 800c340:	843b      	strh	r3, [r7, #32]
 800c342:	e0ae      	b.n	800c4a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c348:	49a6      	ldr	r1, [pc, #664]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c34a:	4613      	mov	r3, r2
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	4413      	add	r3, r2
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	440b      	add	r3, r1
 800c354:	3314      	adds	r3, #20
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c35a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c35e:	2b0a      	cmp	r3, #10
 800c360:	d105      	bne.n	800c36e <etharp_find_entry+0x5e>
 800c362:	7dfb      	ldrb	r3, [r7, #23]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d102      	bne.n	800c36e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c368:	8c3b      	ldrh	r3, [r7, #32]
 800c36a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c36c:	e095      	b.n	800c49a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
 800c370:	2b00      	cmp	r3, #0
 800c372:	f000 8092 	beq.w	800c49a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d009      	beq.n	800c390 <etharp_find_entry+0x80>
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d806      	bhi.n	800c390 <etharp_find_entry+0x80>
 800c382:	4b99      	ldr	r3, [pc, #612]	; (800c5e8 <etharp_find_entry+0x2d8>)
 800c384:	f240 1223 	movw	r2, #291	; 0x123
 800c388:	4998      	ldr	r1, [pc, #608]	; (800c5ec <etharp_find_entry+0x2dc>)
 800c38a:	4899      	ldr	r0, [pc, #612]	; (800c5f0 <etharp_find_entry+0x2e0>)
 800c38c:	f002 fc06 	bl	800eb9c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d020      	beq.n	800c3d8 <etharp_find_entry+0xc8>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6819      	ldr	r1, [r3, #0]
 800c39a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c39e:	4891      	ldr	r0, [pc, #580]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	4413      	add	r3, r2
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	4403      	add	r3, r0
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4299      	cmp	r1, r3
 800c3b0:	d112      	bne.n	800c3d8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00c      	beq.n	800c3d2 <etharp_find_entry+0xc2>
 800c3b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3bc:	4989      	ldr	r1, [pc, #548]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c3be:	4613      	mov	r3, r2
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	4413      	add	r3, r2
 800c3c4:	00db      	lsls	r3, r3, #3
 800c3c6:	440b      	add	r3, r1
 800c3c8:	3308      	adds	r3, #8
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d102      	bne.n	800c3d8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c3d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c3d6:	e100      	b.n	800c5da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c3d8:	7dfb      	ldrb	r3, [r7, #23]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d140      	bne.n	800c460 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c3de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3e2:	4980      	ldr	r1, [pc, #512]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	4413      	add	r3, r2
 800c3ea:	00db      	lsls	r3, r3, #3
 800c3ec:	440b      	add	r3, r1
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d01a      	beq.n	800c42a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c3f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3f8:	497a      	ldr	r1, [pc, #488]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	4413      	add	r3, r2
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	440b      	add	r3, r1
 800c404:	3312      	adds	r3, #18
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	8bba      	ldrh	r2, [r7, #28]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d845      	bhi.n	800c49a <etharp_find_entry+0x18a>
            old_queue = i;
 800c40e:	8c3b      	ldrh	r3, [r7, #32]
 800c410:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c412:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c416:	4973      	ldr	r1, [pc, #460]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c418:	4613      	mov	r3, r2
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	4413      	add	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	440b      	add	r3, r1
 800c422:	3312      	adds	r3, #18
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	83bb      	strh	r3, [r7, #28]
 800c428:	e037      	b.n	800c49a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c42a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c42e:	496d      	ldr	r1, [pc, #436]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c430:	4613      	mov	r3, r2
 800c432:	005b      	lsls	r3, r3, #1
 800c434:	4413      	add	r3, r2
 800c436:	00db      	lsls	r3, r3, #3
 800c438:	440b      	add	r3, r1
 800c43a:	3312      	adds	r3, #18
 800c43c:	881b      	ldrh	r3, [r3, #0]
 800c43e:	8b7a      	ldrh	r2, [r7, #26]
 800c440:	429a      	cmp	r2, r3
 800c442:	d82a      	bhi.n	800c49a <etharp_find_entry+0x18a>
            old_pending = i;
 800c444:	8c3b      	ldrh	r3, [r7, #32]
 800c446:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c448:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c44c:	4965      	ldr	r1, [pc, #404]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c44e:	4613      	mov	r3, r2
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	4413      	add	r3, r2
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	440b      	add	r3, r1
 800c458:	3312      	adds	r3, #18
 800c45a:	881b      	ldrh	r3, [r3, #0]
 800c45c:	837b      	strh	r3, [r7, #26]
 800c45e:	e01c      	b.n	800c49a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c460:	7dfb      	ldrb	r3, [r7, #23]
 800c462:	2b01      	cmp	r3, #1
 800c464:	d919      	bls.n	800c49a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c466:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c46a:	495e      	ldr	r1, [pc, #376]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c46c:	4613      	mov	r3, r2
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	4413      	add	r3, r2
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	440b      	add	r3, r1
 800c476:	3312      	adds	r3, #18
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	8b3a      	ldrh	r2, [r7, #24]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d80c      	bhi.n	800c49a <etharp_find_entry+0x18a>
            old_stable = i;
 800c480:	8c3b      	ldrh	r3, [r7, #32]
 800c482:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c484:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c488:	4956      	ldr	r1, [pc, #344]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c48a:	4613      	mov	r3, r2
 800c48c:	005b      	lsls	r3, r3, #1
 800c48e:	4413      	add	r3, r2
 800c490:	00db      	lsls	r3, r3, #3
 800c492:	440b      	add	r3, r1
 800c494:	3312      	adds	r3, #18
 800c496:	881b      	ldrh	r3, [r3, #0]
 800c498:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c49a:	8c3b      	ldrh	r3, [r7, #32]
 800c49c:	3301      	adds	r3, #1
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	843b      	strh	r3, [r7, #32]
 800c4a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4a6:	2b09      	cmp	r3, #9
 800c4a8:	f77f af4c 	ble.w	800c344 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d108      	bne.n	800c4c8 <etharp_find_entry+0x1b8>
 800c4b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c4ba:	2b0a      	cmp	r3, #10
 800c4bc:	d107      	bne.n	800c4ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c4be:	7afb      	ldrb	r3, [r7, #11]
 800c4c0:	f003 0301 	and.w	r3, r3, #1
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4cc:	e085      	b.n	800c5da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c4ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c4d2:	2b09      	cmp	r3, #9
 800c4d4:	dc02      	bgt.n	800c4dc <etharp_find_entry+0x1cc>
    i = empty;
 800c4d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4d8:	843b      	strh	r3, [r7, #32]
 800c4da:	e039      	b.n	800c550 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c4dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c4e0:	2b09      	cmp	r3, #9
 800c4e2:	dc14      	bgt.n	800c50e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c4e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c4e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4ec:	493d      	ldr	r1, [pc, #244]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	4413      	add	r3, r2
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	440b      	add	r3, r1
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d018      	beq.n	800c530 <etharp_find_entry+0x220>
 800c4fe:	4b3a      	ldr	r3, [pc, #232]	; (800c5e8 <etharp_find_entry+0x2d8>)
 800c500:	f240 126d 	movw	r2, #365	; 0x16d
 800c504:	493b      	ldr	r1, [pc, #236]	; (800c5f4 <etharp_find_entry+0x2e4>)
 800c506:	483a      	ldr	r0, [pc, #232]	; (800c5f0 <etharp_find_entry+0x2e0>)
 800c508:	f002 fb48 	bl	800eb9c <iprintf>
 800c50c:	e010      	b.n	800c530 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c50e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c512:	2b09      	cmp	r3, #9
 800c514:	dc02      	bgt.n	800c51c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c516:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c518:	843b      	strh	r3, [r7, #32]
 800c51a:	e009      	b.n	800c530 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c51c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c520:	2b09      	cmp	r3, #9
 800c522:	dc02      	bgt.n	800c52a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c524:	8bfb      	ldrh	r3, [r7, #30]
 800c526:	843b      	strh	r3, [r7, #32]
 800c528:	e002      	b.n	800c530 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c52a:	f04f 33ff 	mov.w	r3, #4294967295
 800c52e:	e054      	b.n	800c5da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c530:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c534:	2b09      	cmp	r3, #9
 800c536:	dd06      	ble.n	800c546 <etharp_find_entry+0x236>
 800c538:	4b2b      	ldr	r3, [pc, #172]	; (800c5e8 <etharp_find_entry+0x2d8>)
 800c53a:	f240 127f 	movw	r2, #383	; 0x17f
 800c53e:	492e      	ldr	r1, [pc, #184]	; (800c5f8 <etharp_find_entry+0x2e8>)
 800c540:	482b      	ldr	r0, [pc, #172]	; (800c5f0 <etharp_find_entry+0x2e0>)
 800c542:	f002 fb2b 	bl	800eb9c <iprintf>
    etharp_free_entry(i);
 800c546:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7ff fe06 	bl	800c15c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c550:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c554:	2b09      	cmp	r3, #9
 800c556:	dd06      	ble.n	800c566 <etharp_find_entry+0x256>
 800c558:	4b23      	ldr	r3, [pc, #140]	; (800c5e8 <etharp_find_entry+0x2d8>)
 800c55a:	f240 1283 	movw	r2, #387	; 0x183
 800c55e:	4926      	ldr	r1, [pc, #152]	; (800c5f8 <etharp_find_entry+0x2e8>)
 800c560:	4823      	ldr	r0, [pc, #140]	; (800c5f0 <etharp_find_entry+0x2e0>)
 800c562:	f002 fb1b 	bl	800eb9c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c566:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c56a:	491e      	ldr	r1, [pc, #120]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c56c:	4613      	mov	r3, r2
 800c56e:	005b      	lsls	r3, r3, #1
 800c570:	4413      	add	r3, r2
 800c572:	00db      	lsls	r3, r3, #3
 800c574:	440b      	add	r3, r1
 800c576:	3314      	adds	r3, #20
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d006      	beq.n	800c58c <etharp_find_entry+0x27c>
 800c57e:	4b1a      	ldr	r3, [pc, #104]	; (800c5e8 <etharp_find_entry+0x2d8>)
 800c580:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c584:	491d      	ldr	r1, [pc, #116]	; (800c5fc <etharp_find_entry+0x2ec>)
 800c586:	481a      	ldr	r0, [pc, #104]	; (800c5f0 <etharp_find_entry+0x2e0>)
 800c588:	f002 fb08 	bl	800eb9c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00b      	beq.n	800c5aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c592:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6819      	ldr	r1, [r3, #0]
 800c59a:	4812      	ldr	r0, [pc, #72]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c59c:	4613      	mov	r3, r2
 800c59e:	005b      	lsls	r3, r3, #1
 800c5a0:	4413      	add	r3, r2
 800c5a2:	00db      	lsls	r3, r3, #3
 800c5a4:	4403      	add	r3, r0
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c5aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5ae:	490d      	ldr	r1, [pc, #52]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	4413      	add	r3, r2
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	440b      	add	r3, r1
 800c5ba:	3312      	adds	r3, #18
 800c5bc:	2200      	movs	r2, #0
 800c5be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c5c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5c4:	4907      	ldr	r1, [pc, #28]	; (800c5e4 <etharp_find_entry+0x2d4>)
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4413      	add	r3, r2
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	440b      	add	r3, r1
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c5d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3728      	adds	r7, #40	; 0x28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20000178 	.word	0x20000178
 800c5e8:	08011db8 	.word	0x08011db8
 800c5ec:	08011df0 	.word	0x08011df0
 800c5f0:	08011e30 	.word	0x08011e30
 800c5f4:	08011e58 	.word	0x08011e58
 800c5f8:	08011e70 	.word	0x08011e70
 800c5fc:	08011e84 	.word	0x08011e84

0800c600 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af02      	add	r7, sp, #8
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c614:	2b06      	cmp	r3, #6
 800c616:	d006      	beq.n	800c626 <etharp_update_arp_entry+0x26>
 800c618:	4b48      	ldr	r3, [pc, #288]	; (800c73c <etharp_update_arp_entry+0x13c>)
 800c61a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c61e:	4948      	ldr	r1, [pc, #288]	; (800c740 <etharp_update_arp_entry+0x140>)
 800c620:	4848      	ldr	r0, [pc, #288]	; (800c744 <etharp_update_arp_entry+0x144>)
 800c622:	f002 fabb 	bl	800eb9c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d012      	beq.n	800c652 <etharp_update_arp_entry+0x52>
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d00e      	beq.n	800c652 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68f9      	ldr	r1, [r7, #12]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f001 faa6 	bl	800db8c <ip4_addr_isbroadcast_u32>
 800c640:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c642:	2b00      	cmp	r3, #0
 800c644:	d105      	bne.n	800c652 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c64e:	2be0      	cmp	r3, #224	; 0xe0
 800c650:	d102      	bne.n	800c658 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c652:	f06f 030f 	mvn.w	r3, #15
 800c656:	e06c      	b.n	800c732 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	4619      	mov	r1, r3
 800c65e:	68b8      	ldr	r0, [r7, #8]
 800c660:	f7ff fe56 	bl	800c310 <etharp_find_entry>
 800c664:	4603      	mov	r3, r0
 800c666:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c668:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	da02      	bge.n	800c676 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c670:	8afb      	ldrh	r3, [r7, #22]
 800c672:	b25b      	sxtb	r3, r3
 800c674:	e05d      	b.n	800c732 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c676:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c67a:	4933      	ldr	r1, [pc, #204]	; (800c748 <etharp_update_arp_entry+0x148>)
 800c67c:	4613      	mov	r3, r2
 800c67e:	005b      	lsls	r3, r3, #1
 800c680:	4413      	add	r3, r2
 800c682:	00db      	lsls	r3, r3, #3
 800c684:	440b      	add	r3, r1
 800c686:	3314      	adds	r3, #20
 800c688:	2202      	movs	r2, #2
 800c68a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c68c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c690:	492d      	ldr	r1, [pc, #180]	; (800c748 <etharp_update_arp_entry+0x148>)
 800c692:	4613      	mov	r3, r2
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	4413      	add	r3, r2
 800c698:	00db      	lsls	r3, r3, #3
 800c69a:	440b      	add	r3, r1
 800c69c:	3308      	adds	r3, #8
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c6a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	005b      	lsls	r3, r3, #1
 800c6aa:	4413      	add	r3, r2
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	4a25      	ldr	r2, [pc, #148]	; (800c748 <etharp_update_arp_entry+0x148>)
 800c6b2:	4413      	add	r3, r2
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	2206      	movs	r2, #6
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f002 fa58 	bl	800eb70 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c6c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6c4:	4920      	ldr	r1, [pc, #128]	; (800c748 <etharp_update_arp_entry+0x148>)
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	4413      	add	r3, r2
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	440b      	add	r3, r1
 800c6d0:	3312      	adds	r3, #18
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c6d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6da:	491b      	ldr	r1, [pc, #108]	; (800c748 <etharp_update_arp_entry+0x148>)
 800c6dc:	4613      	mov	r3, r2
 800c6de:	005b      	lsls	r3, r3, #1
 800c6e0:	4413      	add	r3, r2
 800c6e2:	00db      	lsls	r3, r3, #3
 800c6e4:	440b      	add	r3, r1
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d021      	beq.n	800c730 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c6ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c6f0:	4915      	ldr	r1, [pc, #84]	; (800c748 <etharp_update_arp_entry+0x148>)
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	005b      	lsls	r3, r3, #1
 800c6f6:	4413      	add	r3, r2
 800c6f8:	00db      	lsls	r3, r3, #3
 800c6fa:	440b      	add	r3, r1
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c700:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c704:	4910      	ldr	r1, [pc, #64]	; (800c748 <etharp_update_arp_entry+0x148>)
 800c706:	4613      	mov	r3, r2
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	4413      	add	r3, r2
 800c70c:	00db      	lsls	r3, r3, #3
 800c70e:	440b      	add	r3, r1
 800c710:	2200      	movs	r2, #0
 800c712:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c71a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6939      	ldr	r1, [r7, #16]
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f002 f9a1 	bl	800ea6c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c72a:	6938      	ldr	r0, [r7, #16]
 800c72c:	f7f9 fcbe 	bl	80060ac <pbuf_free>
  }
  return ERR_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	08011db8 	.word	0x08011db8
 800c740:	08011eb0 	.word	0x08011eb0
 800c744:	08011e30 	.word	0x08011e30
 800c748:	20000178 	.word	0x20000178

0800c74c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c754:	2300      	movs	r3, #0
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	e01e      	b.n	800c798 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c75a:	4913      	ldr	r1, [pc, #76]	; (800c7a8 <etharp_cleanup_netif+0x5c>)
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	4613      	mov	r3, r2
 800c760:	005b      	lsls	r3, r3, #1
 800c762:	4413      	add	r3, r2
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	440b      	add	r3, r1
 800c768:	3314      	adds	r3, #20
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c76e:	7afb      	ldrb	r3, [r7, #11]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d00e      	beq.n	800c792 <etharp_cleanup_netif+0x46>
 800c774:	490c      	ldr	r1, [pc, #48]	; (800c7a8 <etharp_cleanup_netif+0x5c>)
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	4613      	mov	r3, r2
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	4413      	add	r3, r2
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	440b      	add	r3, r1
 800c782:	3308      	adds	r3, #8
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d102      	bne.n	800c792 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7ff fce5 	bl	800c15c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3301      	adds	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b09      	cmp	r3, #9
 800c79c:	dddd      	ble.n	800c75a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c79e:	bf00      	nop
 800c7a0:	bf00      	nop
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	20000178 	.word	0x20000178

0800c7ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c7ac:	b5b0      	push	{r4, r5, r7, lr}
 800c7ae:	b08a      	sub	sp, #40	; 0x28
 800c7b0:	af04      	add	r7, sp, #16
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d107      	bne.n	800c7cc <etharp_input+0x20>
 800c7bc:	4b49      	ldr	r3, [pc, #292]	; (800c8e4 <etharp_input+0x138>)
 800c7be:	f240 228a 	movw	r2, #650	; 0x28a
 800c7c2:	4949      	ldr	r1, [pc, #292]	; (800c8e8 <etharp_input+0x13c>)
 800c7c4:	4849      	ldr	r0, [pc, #292]	; (800c8ec <etharp_input+0x140>)
 800c7c6:	f002 f9e9 	bl	800eb9c <iprintf>
 800c7ca:	e088      	b.n	800c8de <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7dc:	d10c      	bne.n	800c7f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c7e2:	2b06      	cmp	r3, #6
 800c7e4:	d108      	bne.n	800c7f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	d104      	bne.n	800c7f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	885b      	ldrh	r3, [r3, #2]
 800c7f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c7f4:	2b08      	cmp	r3, #8
 800c7f6:	d00f      	beq.n	800c818 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 800c7f8:	4b3d      	ldr	r3, [pc, #244]	; (800c8f0 <etharp_input+0x144>)
 800c7fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	4b3b      	ldr	r3, [pc, #236]	; (800c8f0 <etharp_input+0x144>)
 800c802:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800c804:	4b3a      	ldr	r3, [pc, #232]	; (800c8f0 <etharp_input+0x144>)
 800c806:	8bdb      	ldrh	r3, [r3, #30]
 800c808:	3301      	adds	r3, #1
 800c80a:	b29a      	uxth	r2, r3
 800c80c:	4b38      	ldr	r3, [pc, #224]	; (800c8f0 <etharp_input+0x144>)
 800c80e:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7f9 fc4b 	bl	80060ac <pbuf_free>
    return;
 800c816:	e062      	b.n	800c8de <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 800c818:	4b35      	ldr	r3, [pc, #212]	; (800c8f0 <etharp_input+0x144>)
 800c81a:	8b5b      	ldrh	r3, [r3, #26]
 800c81c:	3301      	adds	r3, #1
 800c81e:	b29a      	uxth	r2, r3
 800c820:	4b33      	ldr	r3, [pc, #204]	; (800c8f0 <etharp_input+0x144>)
 800c822:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	330e      	adds	r3, #14
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	3318      	adds	r3, #24
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	3304      	adds	r3, #4
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d102      	bne.n	800c844 <etharp_input+0x98>
    for_us = 0;
 800c83e:	2300      	movs	r3, #0
 800c840:	75fb      	strb	r3, [r7, #23]
 800c842:	e009      	b.n	800c858 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	3304      	adds	r3, #4
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	bf0c      	ite	eq
 800c850:	2301      	moveq	r3, #1
 800c852:	2300      	movne	r3, #0
 800c854:	b2db      	uxtb	r3, r3
 800c856:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	f103 0208 	add.w	r2, r3, #8
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <etharp_input+0xbc>
 800c864:	2301      	movs	r3, #1
 800c866:	e000      	b.n	800c86a <etharp_input+0xbe>
 800c868:	2302      	movs	r3, #2
 800c86a:	f107 010c 	add.w	r1, r7, #12
 800c86e:	6838      	ldr	r0, [r7, #0]
 800c870:	f7ff fec6 	bl	800c600 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	88db      	ldrh	r3, [r3, #6]
 800c878:	b29b      	uxth	r3, r3
 800c87a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c87e:	d003      	beq.n	800c888 <etharp_input+0xdc>
 800c880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c884:	d025      	beq.n	800c8d2 <etharp_input+0x126>
 800c886:	e01d      	b.n	800c8c4 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 800c888:	7dfb      	ldrb	r3, [r7, #23]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d023      	beq.n	800c8d6 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c8a4:	693a      	ldr	r2, [r7, #16]
 800c8a6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c8a8:	2102      	movs	r1, #2
 800c8aa:	9103      	str	r1, [sp, #12]
 800c8ac:	f107 010c 	add.w	r1, r7, #12
 800c8b0:	9102      	str	r1, [sp, #8]
 800c8b2:	9201      	str	r2, [sp, #4]
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	462b      	mov	r3, r5
 800c8b8:	4622      	mov	r2, r4
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	6838      	ldr	r0, [r7, #0]
 800c8be:	f000 fb0b 	bl	800ced8 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 800c8c2:	e008      	b.n	800c8d6 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 800c8c4:	4b0a      	ldr	r3, [pc, #40]	; (800c8f0 <etharp_input+0x144>)
 800c8c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	4b08      	ldr	r3, [pc, #32]	; (800c8f0 <etharp_input+0x144>)
 800c8ce:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 800c8d0:	e002      	b.n	800c8d8 <etharp_input+0x12c>
      break;
 800c8d2:	bf00      	nop
 800c8d4:	e000      	b.n	800c8d8 <etharp_input+0x12c>
      break;
 800c8d6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7f9 fbe7 	bl	80060ac <pbuf_free>
}
 800c8de:	3718      	adds	r7, #24
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c8e4:	08011db8 	.word	0x08011db8
 800c8e8:	08011f08 	.word	0x08011f08
 800c8ec:	08011e30 	.word	0x08011e30
 800c8f0:	200075ac 	.word	0x200075ac

0800c8f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af02      	add	r7, sp, #8
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	4613      	mov	r3, r2
 800c900:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c902:	79fa      	ldrb	r2, [r7, #7]
 800c904:	4944      	ldr	r1, [pc, #272]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c906:	4613      	mov	r3, r2
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	4413      	add	r3, r2
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	440b      	add	r3, r1
 800c910:	3314      	adds	r3, #20
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b01      	cmp	r3, #1
 800c916:	d806      	bhi.n	800c926 <etharp_output_to_arp_index+0x32>
 800c918:	4b40      	ldr	r3, [pc, #256]	; (800ca1c <etharp_output_to_arp_index+0x128>)
 800c91a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c91e:	4940      	ldr	r1, [pc, #256]	; (800ca20 <etharp_output_to_arp_index+0x12c>)
 800c920:	4840      	ldr	r0, [pc, #256]	; (800ca24 <etharp_output_to_arp_index+0x130>)
 800c922:	f002 f93b 	bl	800eb9c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c926:	79fa      	ldrb	r2, [r7, #7]
 800c928:	493b      	ldr	r1, [pc, #236]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c92a:	4613      	mov	r3, r2
 800c92c:	005b      	lsls	r3, r3, #1
 800c92e:	4413      	add	r3, r2
 800c930:	00db      	lsls	r3, r3, #3
 800c932:	440b      	add	r3, r1
 800c934:	3314      	adds	r3, #20
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d153      	bne.n	800c9e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c93c:	79fa      	ldrb	r2, [r7, #7]
 800c93e:	4936      	ldr	r1, [pc, #216]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c940:	4613      	mov	r3, r2
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	4413      	add	r3, r2
 800c946:	00db      	lsls	r3, r3, #3
 800c948:	440b      	add	r3, r1
 800c94a:	3312      	adds	r3, #18
 800c94c:	881b      	ldrh	r3, [r3, #0]
 800c94e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c952:	d919      	bls.n	800c988 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c954:	79fa      	ldrb	r2, [r7, #7]
 800c956:	4613      	mov	r3, r2
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	4413      	add	r3, r2
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	4a2e      	ldr	r2, [pc, #184]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c960:	4413      	add	r3, r2
 800c962:	3304      	adds	r3, #4
 800c964:	4619      	mov	r1, r3
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f000 fb72 	bl	800d050 <etharp_request>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d138      	bne.n	800c9e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c972:	79fa      	ldrb	r2, [r7, #7]
 800c974:	4928      	ldr	r1, [pc, #160]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c976:	4613      	mov	r3, r2
 800c978:	005b      	lsls	r3, r3, #1
 800c97a:	4413      	add	r3, r2
 800c97c:	00db      	lsls	r3, r3, #3
 800c97e:	440b      	add	r3, r1
 800c980:	3314      	adds	r3, #20
 800c982:	2203      	movs	r2, #3
 800c984:	701a      	strb	r2, [r3, #0]
 800c986:	e02d      	b.n	800c9e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c988:	79fa      	ldrb	r2, [r7, #7]
 800c98a:	4923      	ldr	r1, [pc, #140]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c98c:	4613      	mov	r3, r2
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	4413      	add	r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	440b      	add	r3, r1
 800c996:	3312      	adds	r3, #18
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c99e:	d321      	bcc.n	800c9e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c9a0:	79fa      	ldrb	r2, [r7, #7]
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	4413      	add	r3, r2
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	4a1b      	ldr	r2, [pc, #108]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c9ac:	4413      	add	r3, r2
 800c9ae:	1d19      	adds	r1, r3, #4
 800c9b0:	79fa      	ldrb	r2, [r7, #7]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	00db      	lsls	r3, r3, #3
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	4a16      	ldr	r2, [pc, #88]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c9be:	4413      	add	r3, r2
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 fb21 	bl	800d00c <etharp_request_dst>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d109      	bne.n	800c9e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c9d0:	79fa      	ldrb	r2, [r7, #7]
 800c9d2:	4911      	ldr	r1, [pc, #68]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	005b      	lsls	r3, r3, #1
 800c9d8:	4413      	add	r3, r2
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	440b      	add	r3, r1
 800c9de:	3314      	adds	r3, #20
 800c9e0:	2203      	movs	r2, #3
 800c9e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c9ea:	79fa      	ldrb	r2, [r7, #7]
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	4a08      	ldr	r2, [pc, #32]	; (800ca18 <etharp_output_to_arp_index+0x124>)
 800c9f8:	4413      	add	r3, r2
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca00:	9200      	str	r2, [sp, #0]
 800ca02:	460a      	mov	r2, r1
 800ca04:	68b9      	ldr	r1, [r7, #8]
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f002 f830 	bl	800ea6c <ethernet_output>
 800ca0c:	4603      	mov	r3, r0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	20000178 	.word	0x20000178
 800ca1c:	08011db8 	.word	0x08011db8
 800ca20:	08011f28 	.word	0x08011f28
 800ca24:	08011e30 	.word	0x08011e30

0800ca28 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08a      	sub	sp, #40	; 0x28
 800ca2c:	af02      	add	r7, sp, #8
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d106      	bne.n	800ca4c <etharp_output+0x24>
 800ca3e:	4b76      	ldr	r3, [pc, #472]	; (800cc18 <etharp_output+0x1f0>)
 800ca40:	f240 321e 	movw	r2, #798	; 0x31e
 800ca44:	4975      	ldr	r1, [pc, #468]	; (800cc1c <etharp_output+0x1f4>)
 800ca46:	4876      	ldr	r0, [pc, #472]	; (800cc20 <etharp_output+0x1f8>)
 800ca48:	f002 f8a8 	bl	800eb9c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d106      	bne.n	800ca60 <etharp_output+0x38>
 800ca52:	4b71      	ldr	r3, [pc, #452]	; (800cc18 <etharp_output+0x1f0>)
 800ca54:	f240 321f 	movw	r2, #799	; 0x31f
 800ca58:	4972      	ldr	r1, [pc, #456]	; (800cc24 <etharp_output+0x1fc>)
 800ca5a:	4871      	ldr	r0, [pc, #452]	; (800cc20 <etharp_output+0x1f8>)
 800ca5c:	f002 f89e 	bl	800eb9c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <etharp_output+0x4c>
 800ca66:	4b6c      	ldr	r3, [pc, #432]	; (800cc18 <etharp_output+0x1f0>)
 800ca68:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ca6c:	496e      	ldr	r1, [pc, #440]	; (800cc28 <etharp_output+0x200>)
 800ca6e:	486c      	ldr	r0, [pc, #432]	; (800cc20 <etharp_output+0x1f8>)
 800ca70:	f002 f894 	bl	800eb9c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	68f9      	ldr	r1, [r7, #12]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f001 f886 	bl	800db8c <ip4_addr_isbroadcast_u32>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ca86:	4b69      	ldr	r3, [pc, #420]	; (800cc2c <etharp_output+0x204>)
 800ca88:	61fb      	str	r3, [r7, #28]
 800ca8a:	e0b5      	b.n	800cbf8 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca94:	2be0      	cmp	r3, #224	; 0xe0
 800ca96:	d118      	bne.n	800caca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800caa0:	235e      	movs	r3, #94	; 0x5e
 800caa2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	3301      	adds	r3, #1
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3302      	adds	r3, #2
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3303      	adds	r3, #3
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cac2:	f107 0310 	add.w	r3, r7, #16
 800cac6:	61fb      	str	r3, [r7, #28]
 800cac8:	e096      	b.n	800cbf8 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3304      	adds	r3, #4
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	405a      	eors	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	3308      	adds	r3, #8
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4013      	ands	r3, r2
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d012      	beq.n	800cb08 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cae8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800caec:	4293      	cmp	r3, r2
 800caee:	d00b      	beq.n	800cb08 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	330c      	adds	r3, #12
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	330c      	adds	r3, #12
 800cafe:	61bb      	str	r3, [r7, #24]
 800cb00:	e002      	b.n	800cb08 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cb02:	f06f 0303 	mvn.w	r3, #3
 800cb06:	e083      	b.n	800cc10 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb08:	4b49      	ldr	r3, [pc, #292]	; (800cc30 <etharp_output+0x208>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4a49      	ldr	r2, [pc, #292]	; (800cc34 <etharp_output+0x20c>)
 800cb10:	460b      	mov	r3, r1
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	440b      	add	r3, r1
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	4413      	add	r3, r2
 800cb1a:	3314      	adds	r3, #20
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d92b      	bls.n	800cb7a <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cb22:	4b43      	ldr	r3, [pc, #268]	; (800cc30 <etharp_output+0x208>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	4619      	mov	r1, r3
 800cb28:	4a42      	ldr	r2, [pc, #264]	; (800cc34 <etharp_output+0x20c>)
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	005b      	lsls	r3, r3, #1
 800cb2e:	440b      	add	r3, r1
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	4413      	add	r3, r2
 800cb34:	3308      	adds	r3, #8
 800cb36:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d11d      	bne.n	800cb7a <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	4b3b      	ldr	r3, [pc, #236]	; (800cc30 <etharp_output+0x208>)
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	4618      	mov	r0, r3
 800cb48:	493a      	ldr	r1, [pc, #232]	; (800cc34 <etharp_output+0x20c>)
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	4403      	add	r3, r0
 800cb50:	00db      	lsls	r3, r3, #3
 800cb52:	440b      	add	r3, r1
 800cb54:	3304      	adds	r3, #4
 800cb56:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d10e      	bne.n	800cb7a <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 800cb5c:	4b36      	ldr	r3, [pc, #216]	; (800cc38 <etharp_output+0x210>)
 800cb5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb60:	3301      	adds	r3, #1
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	4b34      	ldr	r3, [pc, #208]	; (800cc38 <etharp_output+0x210>)
 800cb66:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cb68:	4b31      	ldr	r3, [pc, #196]	; (800cc30 <etharp_output+0x208>)
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7ff febf 	bl	800c8f4 <etharp_output_to_arp_index>
 800cb76:	4603      	mov	r3, r0
 800cb78:	e04a      	b.n	800cc10 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	75fb      	strb	r3, [r7, #23]
 800cb7e:	e031      	b.n	800cbe4 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cb80:	7dfa      	ldrb	r2, [r7, #23]
 800cb82:	492c      	ldr	r1, [pc, #176]	; (800cc34 <etharp_output+0x20c>)
 800cb84:	4613      	mov	r3, r2
 800cb86:	005b      	lsls	r3, r3, #1
 800cb88:	4413      	add	r3, r2
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	440b      	add	r3, r1
 800cb8e:	3314      	adds	r3, #20
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d923      	bls.n	800cbde <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cb96:	7dfa      	ldrb	r2, [r7, #23]
 800cb98:	4926      	ldr	r1, [pc, #152]	; (800cc34 <etharp_output+0x20c>)
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	4413      	add	r3, r2
 800cba0:	00db      	lsls	r3, r3, #3
 800cba2:	440b      	add	r3, r1
 800cba4:	3308      	adds	r3, #8
 800cba6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d117      	bne.n	800cbde <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	6819      	ldr	r1, [r3, #0]
 800cbb2:	7dfa      	ldrb	r2, [r7, #23]
 800cbb4:	481f      	ldr	r0, [pc, #124]	; (800cc34 <etharp_output+0x20c>)
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	4413      	add	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	4403      	add	r3, r0
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cbc4:	4299      	cmp	r1, r3
 800cbc6:	d10a      	bne.n	800cbde <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cbc8:	4a19      	ldr	r2, [pc, #100]	; (800cc30 <etharp_output+0x208>)
 800cbca:	7dfb      	ldrb	r3, [r7, #23]
 800cbcc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	68b9      	ldr	r1, [r7, #8]
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f7ff fe8d 	bl	800c8f4 <etharp_output_to_arp_index>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	e018      	b.n	800cc10 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	75fb      	strb	r3, [r7, #23]
 800cbe4:	7dfb      	ldrb	r3, [r7, #23]
 800cbe6:	2b09      	cmp	r3, #9
 800cbe8:	d9ca      	bls.n	800cb80 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	69b9      	ldr	r1, [r7, #24]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 f824 	bl	800cc3c <etharp_query>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	e00b      	b.n	800cc10 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cbfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	68b9      	ldr	r1, [r7, #8]
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f001 ff2f 	bl	800ea6c <ethernet_output>
 800cc0e:	4603      	mov	r3, r0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3720      	adds	r7, #32
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	08011db8 	.word	0x08011db8
 800cc1c:	08011f08 	.word	0x08011f08
 800cc20:	08011e30 	.word	0x08011e30
 800cc24:	08011f58 	.word	0x08011f58
 800cc28:	08011ef8 	.word	0x08011ef8
 800cc2c:	0801258c 	.word	0x0801258c
 800cc30:	20000268 	.word	0x20000268
 800cc34:	20000178 	.word	0x20000178
 800cc38:	200075ac 	.word	0x200075ac

0800cc3c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08c      	sub	sp, #48	; 0x30
 800cc40:	af02      	add	r7, sp, #8
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3326      	adds	r3, #38	; 0x26
 800cc4c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cc4e:	23ff      	movs	r3, #255	; 0xff
 800cc50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68f9      	ldr	r1, [r7, #12]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 ff94 	bl	800db8c <ip4_addr_isbroadcast_u32>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10c      	bne.n	800cc84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc72:	2be0      	cmp	r3, #224	; 0xe0
 800cc74:	d006      	beq.n	800cc84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc84:	f06f 030f 	mvn.w	r3, #15
 800cc88:	e110      	b.n	800ceac <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	68b8      	ldr	r0, [r7, #8]
 800cc90:	f7ff fb3e 	bl	800c310 <etharp_find_entry>
 800cc94:	4603      	mov	r3, r0
 800cc96:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cc98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	da0b      	bge.n	800ccb8 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d005      	beq.n	800ccb2 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 800cca6:	4b83      	ldr	r3, [pc, #524]	; (800ceb4 <etharp_query+0x278>)
 800cca8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ccaa:	3301      	adds	r3, #1
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	4b81      	ldr	r3, [pc, #516]	; (800ceb4 <etharp_query+0x278>)
 800ccb0:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 800ccb2:	8a7b      	ldrh	r3, [r7, #18]
 800ccb4:	b25b      	sxtb	r3, r3
 800ccb6:	e0f9      	b.n	800ceac <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ccb8:	8a7b      	ldrh	r3, [r7, #18]
 800ccba:	2b7e      	cmp	r3, #126	; 0x7e
 800ccbc:	d906      	bls.n	800cccc <etharp_query+0x90>
 800ccbe:	4b7e      	ldr	r3, [pc, #504]	; (800ceb8 <etharp_query+0x27c>)
 800ccc0:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ccc4:	497d      	ldr	r1, [pc, #500]	; (800cebc <etharp_query+0x280>)
 800ccc6:	487e      	ldr	r0, [pc, #504]	; (800cec0 <etharp_query+0x284>)
 800ccc8:	f001 ff68 	bl	800eb9c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cccc:	8a7b      	ldrh	r3, [r7, #18]
 800ccce:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ccd0:	7c7a      	ldrb	r2, [r7, #17]
 800ccd2:	497c      	ldr	r1, [pc, #496]	; (800cec4 <etharp_query+0x288>)
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	005b      	lsls	r3, r3, #1
 800ccd8:	4413      	add	r3, r2
 800ccda:	00db      	lsls	r3, r3, #3
 800ccdc:	440b      	add	r3, r1
 800ccde:	3314      	adds	r3, #20
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d115      	bne.n	800cd12 <etharp_query+0xd6>
    is_new_entry = 1;
 800cce6:	2301      	movs	r3, #1
 800cce8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ccea:	7c7a      	ldrb	r2, [r7, #17]
 800ccec:	4975      	ldr	r1, [pc, #468]	; (800cec4 <etharp_query+0x288>)
 800ccee:	4613      	mov	r3, r2
 800ccf0:	005b      	lsls	r3, r3, #1
 800ccf2:	4413      	add	r3, r2
 800ccf4:	00db      	lsls	r3, r3, #3
 800ccf6:	440b      	add	r3, r1
 800ccf8:	3314      	adds	r3, #20
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ccfe:	7c7a      	ldrb	r2, [r7, #17]
 800cd00:	4970      	ldr	r1, [pc, #448]	; (800cec4 <etharp_query+0x288>)
 800cd02:	4613      	mov	r3, r2
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	4413      	add	r3, r2
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	440b      	add	r3, r1
 800cd0c:	3308      	adds	r3, #8
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cd12:	7c7a      	ldrb	r2, [r7, #17]
 800cd14:	496b      	ldr	r1, [pc, #428]	; (800cec4 <etharp_query+0x288>)
 800cd16:	4613      	mov	r3, r2
 800cd18:	005b      	lsls	r3, r3, #1
 800cd1a:	4413      	add	r3, r2
 800cd1c:	00db      	lsls	r3, r3, #3
 800cd1e:	440b      	add	r3, r1
 800cd20:	3314      	adds	r3, #20
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d011      	beq.n	800cd4c <etharp_query+0x110>
 800cd28:	7c7a      	ldrb	r2, [r7, #17]
 800cd2a:	4966      	ldr	r1, [pc, #408]	; (800cec4 <etharp_query+0x288>)
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	005b      	lsls	r3, r3, #1
 800cd30:	4413      	add	r3, r2
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	440b      	add	r3, r1
 800cd36:	3314      	adds	r3, #20
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d806      	bhi.n	800cd4c <etharp_query+0x110>
 800cd3e:	4b5e      	ldr	r3, [pc, #376]	; (800ceb8 <etharp_query+0x27c>)
 800cd40:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cd44:	4960      	ldr	r1, [pc, #384]	; (800cec8 <etharp_query+0x28c>)
 800cd46:	485e      	ldr	r0, [pc, #376]	; (800cec0 <etharp_query+0x284>)
 800cd48:	f001 ff28 	bl	800eb9c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d102      	bne.n	800cd58 <etharp_query+0x11c>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10c      	bne.n	800cd72 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cd58:	68b9      	ldr	r1, [r7, #8]
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	f000 f978 	bl	800d050 <etharp_request>
 800cd60:	4603      	mov	r3, r0
 800cd62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d102      	bne.n	800cd72 <etharp_query+0x136>
      return result;
 800cd6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd70:	e09c      	b.n	800ceac <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <etharp_query+0x14a>
 800cd78:	4b4f      	ldr	r3, [pc, #316]	; (800ceb8 <etharp_query+0x27c>)
 800cd7a:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cd7e:	4953      	ldr	r1, [pc, #332]	; (800cecc <etharp_query+0x290>)
 800cd80:	484f      	ldr	r0, [pc, #316]	; (800cec0 <etharp_query+0x284>)
 800cd82:	f001 ff0b 	bl	800eb9c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cd86:	7c7a      	ldrb	r2, [r7, #17]
 800cd88:	494e      	ldr	r1, [pc, #312]	; (800cec4 <etharp_query+0x288>)
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	4413      	add	r3, r2
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	440b      	add	r3, r1
 800cd94:	3314      	adds	r3, #20
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d917      	bls.n	800cdcc <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cd9c:	4a4c      	ldr	r2, [pc, #304]	; (800ced0 <etharp_query+0x294>)
 800cd9e:	7c7b      	ldrb	r3, [r7, #17]
 800cda0:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cda2:	7c7a      	ldrb	r2, [r7, #17]
 800cda4:	4613      	mov	r3, r2
 800cda6:	005b      	lsls	r3, r3, #1
 800cda8:	4413      	add	r3, r2
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	3308      	adds	r3, #8
 800cdae:	4a45      	ldr	r2, [pc, #276]	; (800cec4 <etharp_query+0x288>)
 800cdb0:	4413      	add	r3, r2
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdb8:	9200      	str	r2, [sp, #0]
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	6879      	ldr	r1, [r7, #4]
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f001 fe54 	bl	800ea6c <ethernet_output>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdca:	e06d      	b.n	800cea8 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cdcc:	7c7a      	ldrb	r2, [r7, #17]
 800cdce:	493d      	ldr	r1, [pc, #244]	; (800cec4 <etharp_query+0x288>)
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	4413      	add	r3, r2
 800cdd6:	00db      	lsls	r3, r3, #3
 800cdd8:	440b      	add	r3, r1
 800cdda:	3314      	adds	r3, #20
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d162      	bne.n	800cea8 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cdea:	e01c      	b.n	800ce26 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	895a      	ldrh	r2, [r3, #10]
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	891b      	ldrh	r3, [r3, #8]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d10a      	bne.n	800ce0e <etharp_query+0x1d2>
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d006      	beq.n	800ce0e <etharp_query+0x1d2>
 800ce00:	4b2d      	ldr	r3, [pc, #180]	; (800ceb8 <etharp_query+0x27c>)
 800ce02:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ce06:	4933      	ldr	r1, [pc, #204]	; (800ced4 <etharp_query+0x298>)
 800ce08:	482d      	ldr	r0, [pc, #180]	; (800cec0 <etharp_query+0x284>)
 800ce0a:	f001 fec7 	bl	800eb9c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	7b1b      	ldrb	r3, [r3, #12]
 800ce12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <etharp_query+0x1e4>
        copy_needed = 1;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	61bb      	str	r3, [r7, #24]
        break;
 800ce1e:	e005      	b.n	800ce2c <etharp_query+0x1f0>
      }
      p = p->next;
 800ce20:	69fb      	ldr	r3, [r7, #28]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1df      	bne.n	800cdec <etharp_query+0x1b0>
    }
    if (copy_needed) {
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d007      	beq.n	800ce42 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ce38:	200e      	movs	r0, #14
 800ce3a:	f7f9 fb93 	bl	8006564 <pbuf_clone>
 800ce3e:	61f8      	str	r0, [r7, #28]
 800ce40:	e004      	b.n	800ce4c <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ce46:	69f8      	ldr	r0, [r7, #28]
 800ce48:	f7f9 f9d0 	bl	80061ec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d021      	beq.n	800ce96 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ce52:	7c7a      	ldrb	r2, [r7, #17]
 800ce54:	491b      	ldr	r1, [pc, #108]	; (800cec4 <etharp_query+0x288>)
 800ce56:	4613      	mov	r3, r2
 800ce58:	005b      	lsls	r3, r3, #1
 800ce5a:	4413      	add	r3, r2
 800ce5c:	00db      	lsls	r3, r3, #3
 800ce5e:	440b      	add	r3, r1
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00a      	beq.n	800ce7c <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ce66:	7c7a      	ldrb	r2, [r7, #17]
 800ce68:	4916      	ldr	r1, [pc, #88]	; (800cec4 <etharp_query+0x288>)
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	4413      	add	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	440b      	add	r3, r1
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7f9 f918 	bl	80060ac <pbuf_free>
      }
      arp_table[i].q = p;
 800ce7c:	7c7a      	ldrb	r2, [r7, #17]
 800ce7e:	4911      	ldr	r1, [pc, #68]	; (800cec4 <etharp_query+0x288>)
 800ce80:	4613      	mov	r3, r2
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	4413      	add	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	440b      	add	r3, r1
 800ce8a:	69fa      	ldr	r2, [r7, #28]
 800ce8c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce94:	e008      	b.n	800cea8 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 800ce96:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <etharp_query+0x278>)
 800ce98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	b29a      	uxth	r2, r3
 800ce9e:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <etharp_query+0x278>)
 800cea0:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cea2:	23ff      	movs	r3, #255	; 0xff
 800cea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cea8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3728      	adds	r7, #40	; 0x28
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	200075ac 	.word	0x200075ac
 800ceb8:	08011db8 	.word	0x08011db8
 800cebc:	08011f64 	.word	0x08011f64
 800cec0:	08011e30 	.word	0x08011e30
 800cec4:	20000178 	.word	0x20000178
 800cec8:	08011f74 	.word	0x08011f74
 800cecc:	08011f58 	.word	0x08011f58
 800ced0:	20000268 	.word	0x20000268
 800ced4:	08011f9c 	.word	0x08011f9c

0800ced8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b08a      	sub	sp, #40	; 0x28
 800cedc:	af02      	add	r7, sp, #8
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d106      	bne.n	800cefe <etharp_raw+0x26>
 800cef0:	4b40      	ldr	r3, [pc, #256]	; (800cff4 <etharp_raw+0x11c>)
 800cef2:	f240 4257 	movw	r2, #1111	; 0x457
 800cef6:	4940      	ldr	r1, [pc, #256]	; (800cff8 <etharp_raw+0x120>)
 800cef8:	4840      	ldr	r0, [pc, #256]	; (800cffc <etharp_raw+0x124>)
 800cefa:	f001 fe4f 	bl	800eb9c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cefe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf02:	211c      	movs	r1, #28
 800cf04:	200e      	movs	r0, #14
 800cf06:	f7f8 fe31 	bl	8005b6c <pbuf_alloc>
 800cf0a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d108      	bne.n	800cf24 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 800cf12:	4b3b      	ldr	r3, [pc, #236]	; (800d000 <etharp_raw+0x128>)
 800cf14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cf16:	3301      	adds	r3, #1
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	4b39      	ldr	r3, [pc, #228]	; (800d000 <etharp_raw+0x128>)
 800cf1c:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 800cf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf22:	e063      	b.n	800cfec <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	895b      	ldrh	r3, [r3, #10]
 800cf28:	2b1b      	cmp	r3, #27
 800cf2a:	d806      	bhi.n	800cf3a <etharp_raw+0x62>
 800cf2c:	4b31      	ldr	r3, [pc, #196]	; (800cff4 <etharp_raw+0x11c>)
 800cf2e:	f240 4262 	movw	r2, #1122	; 0x462
 800cf32:	4934      	ldr	r1, [pc, #208]	; (800d004 <etharp_raw+0x12c>)
 800cf34:	4831      	ldr	r0, [pc, #196]	; (800cffc <etharp_raw+0x124>)
 800cf36:	f001 fe31 	bl	800eb9c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cf40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7f7 fc5a 	bl	80047fc <lwip_htons>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cf56:	2b06      	cmp	r3, #6
 800cf58:	d006      	beq.n	800cf68 <etharp_raw+0x90>
 800cf5a:	4b26      	ldr	r3, [pc, #152]	; (800cff4 <etharp_raw+0x11c>)
 800cf5c:	f240 4269 	movw	r2, #1129	; 0x469
 800cf60:	4929      	ldr	r1, [pc, #164]	; (800d008 <etharp_raw+0x130>)
 800cf62:	4826      	ldr	r0, [pc, #152]	; (800cffc <etharp_raw+0x124>)
 800cf64:	f001 fe1a 	bl	800eb9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	2206      	movs	r2, #6
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f001 fdfd 	bl	800eb70 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	3312      	adds	r3, #18
 800cf7a:	2206      	movs	r2, #6
 800cf7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f001 fdf6 	bl	800eb70 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	330e      	adds	r3, #14
 800cf88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf8a:	6812      	ldr	r2, [r2, #0]
 800cf8c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	3318      	adds	r3, #24
 800cf92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf94:	6812      	ldr	r2, [r2, #0]
 800cf96:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	701a      	strb	r2, [r3, #0]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f042 0201 	orr.w	r2, r2, #1
 800cfa4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f042 0208 	orr.w	r2, r2, #8
 800cfae:	709a      	strb	r2, [r3, #2]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	2206      	movs	r2, #6
 800cfb8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2204      	movs	r2, #4
 800cfbe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cfc0:	f640 0306 	movw	r3, #2054	; 0x806
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	69b9      	ldr	r1, [r7, #24]
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f001 fd4d 	bl	800ea6c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <etharp_raw+0x128>)
 800cfd4:	8b1b      	ldrh	r3, [r3, #24]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	4b09      	ldr	r3, [pc, #36]	; (800d000 <etharp_raw+0x128>)
 800cfdc:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 800cfde:	69b8      	ldr	r0, [r7, #24]
 800cfe0:	f7f9 f864 	bl	80060ac <pbuf_free>
  p = NULL;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cfe8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3720      	adds	r7, #32
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	08011db8 	.word	0x08011db8
 800cff8:	08011f08 	.word	0x08011f08
 800cffc:	08011e30 	.word	0x08011e30
 800d000:	200075ac 	.word	0x200075ac
 800d004:	08011fb8 	.word	0x08011fb8
 800d008:	08011fec 	.word	0x08011fec

0800d00c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af04      	add	r7, sp, #16
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d028:	2201      	movs	r2, #1
 800d02a:	9203      	str	r2, [sp, #12]
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	9202      	str	r2, [sp, #8]
 800d030:	4a06      	ldr	r2, [pc, #24]	; (800d04c <etharp_request_dst+0x40>)
 800d032:	9201      	str	r2, [sp, #4]
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	4603      	mov	r3, r0
 800d038:	687a      	ldr	r2, [r7, #4]
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f7ff ff4c 	bl	800ced8 <etharp_raw>
 800d040:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	08012594 	.word	0x08012594

0800d050 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d05a:	4a05      	ldr	r2, [pc, #20]	; (800d070 <etharp_request+0x20>)
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff ffd4 	bl	800d00c <etharp_request_dst>
 800d064:	4603      	mov	r3, r0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	0801258c 	.word	0x0801258c

0800d074 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b08e      	sub	sp, #56	; 0x38
 800d078:	af04      	add	r7, sp, #16
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 800d07e:	4ba8      	ldr	r3, [pc, #672]	; (800d320 <icmp_input+0x2ac>)
 800d080:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d084:	3301      	adds	r3, #1
 800d086:	b29a      	uxth	r2, r3
 800d088:	4ba5      	ldr	r3, [pc, #660]	; (800d320 <icmp_input+0x2ac>)
 800d08a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d08e:	4ba5      	ldr	r3, [pc, #660]	; (800d324 <icmp_input+0x2b0>)
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	f003 030f 	and.w	r3, r3, #15
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d0a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0a6:	2b13      	cmp	r3, #19
 800d0a8:	f240 8112 	bls.w	800d2d0 <icmp_input+0x25c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	895b      	ldrh	r3, [r3, #10]
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	f240 810f 	bls.w	800d2d4 <icmp_input+0x260>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d0c0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f000 80fc 	beq.w	800d2c2 <icmp_input+0x24e>
 800d0ca:	2b08      	cmp	r3, #8
 800d0cc:	f040 80e8 	bne.w	800d2a0 <icmp_input+0x22c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d0d0:	4b95      	ldr	r3, [pc, #596]	; (800d328 <icmp_input+0x2b4>)
 800d0d2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0d4:	4b93      	ldr	r3, [pc, #588]	; (800d324 <icmp_input+0x2b0>)
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0dc:	2be0      	cmp	r3, #224	; 0xe0
 800d0de:	f000 8108 	beq.w	800d2f2 <icmp_input+0x27e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d0e2:	4b90      	ldr	r3, [pc, #576]	; (800d324 <icmp_input+0x2b0>)
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	4a8f      	ldr	r2, [pc, #572]	; (800d324 <icmp_input+0x2b0>)
 800d0e8:	6812      	ldr	r2, [r2, #0]
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 fd4d 	bl	800db8c <ip4_addr_isbroadcast_u32>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f040 80fe 	bne.w	800d2f6 <icmp_input+0x282>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	891b      	ldrh	r3, [r3, #8]
 800d0fe:	2b07      	cmp	r3, #7
 800d100:	f240 80ea 	bls.w	800d2d8 <icmp_input+0x264>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7f7 fcd3 	bl	8004ab0 <inet_chksum_pbuf>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00b      	beq.n	800d128 <icmp_input+0xb4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7f8 ffcb 	bl	80060ac <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 800d116:	4b82      	ldr	r3, [pc, #520]	; (800d320 <icmp_input+0x2ac>)
 800d118:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d11c:	3301      	adds	r3, #1
 800d11e:	b29a      	uxth	r2, r3
 800d120:	4b7f      	ldr	r3, [pc, #508]	; (800d320 <icmp_input+0x2ac>)
 800d122:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800d126:	e0f7      	b.n	800d318 <icmp_input+0x2a4>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d12a:	330e      	adds	r3, #14
 800d12c:	4619      	mov	r1, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f7f8 ff26 	bl	8005f80 <pbuf_add_header>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d04b      	beq.n	800d1d2 <icmp_input+0x15e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	891a      	ldrh	r2, [r3, #8]
 800d13e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d140:	4413      	add	r3, r2
 800d142:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	891b      	ldrh	r3, [r3, #8]
 800d148:	8b7a      	ldrh	r2, [r7, #26]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	f0c0 80d5 	bcc.w	800d2fa <icmp_input+0x286>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d150:	8b7b      	ldrh	r3, [r7, #26]
 800d152:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d156:	4619      	mov	r1, r3
 800d158:	200e      	movs	r0, #14
 800d15a:	f7f8 fd07 	bl	8005b6c <pbuf_alloc>
 800d15e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 80cb 	beq.w	800d2fe <icmp_input+0x28a>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	895b      	ldrh	r3, [r3, #10]
 800d16c:	461a      	mov	r2, r3
 800d16e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d170:	3308      	adds	r3, #8
 800d172:	429a      	cmp	r2, r3
 800d174:	d203      	bcs.n	800d17e <icmp_input+0x10a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d176:	6978      	ldr	r0, [r7, #20]
 800d178:	f7f8 ff98 	bl	80060ac <pbuf_free>
          goto icmperr;
 800d17c:	e0c0      	b.n	800d300 <icmp_input+0x28c>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d184:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d186:	4618      	mov	r0, r3
 800d188:	f001 fcf2 	bl	800eb70 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d18c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d18e:	4619      	mov	r1, r3
 800d190:	6978      	ldr	r0, [r7, #20]
 800d192:	f7f8 ff05 	bl	8005fa0 <pbuf_remove_header>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d009      	beq.n	800d1b0 <icmp_input+0x13c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d19c:	4b63      	ldr	r3, [pc, #396]	; (800d32c <icmp_input+0x2b8>)
 800d19e:	22b6      	movs	r2, #182	; 0xb6
 800d1a0:	4963      	ldr	r1, [pc, #396]	; (800d330 <icmp_input+0x2bc>)
 800d1a2:	4864      	ldr	r0, [pc, #400]	; (800d334 <icmp_input+0x2c0>)
 800d1a4:	f001 fcfa 	bl	800eb9c <iprintf>
          pbuf_free(r);
 800d1a8:	6978      	ldr	r0, [r7, #20]
 800d1aa:	f7f8 ff7f 	bl	80060ac <pbuf_free>
          goto icmperr;
 800d1ae:	e0a7      	b.n	800d300 <icmp_input+0x28c>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	6978      	ldr	r0, [r7, #20]
 800d1b4:	f7f9 f892 	bl	80062dc <pbuf_copy>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <icmp_input+0x152>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d1be:	6978      	ldr	r0, [r7, #20]
 800d1c0:	f7f8 ff74 	bl	80060ac <pbuf_free>
          goto icmperr;
 800d1c4:	e09c      	b.n	800d300 <icmp_input+0x28c>
        }
        /* free the original p */
        pbuf_free(p);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f7f8 ff70 	bl	80060ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	607b      	str	r3, [r7, #4]
 800d1d0:	e00f      	b.n	800d1f2 <icmp_input+0x17e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d1d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1d4:	330e      	adds	r3, #14
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7f8 fee1 	bl	8005fa0 <pbuf_remove_header>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d006      	beq.n	800d1f2 <icmp_input+0x17e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d1e4:	4b51      	ldr	r3, [pc, #324]	; (800d32c <icmp_input+0x2b8>)
 800d1e6:	22c7      	movs	r2, #199	; 0xc7
 800d1e8:	4953      	ldr	r1, [pc, #332]	; (800d338 <icmp_input+0x2c4>)
 800d1ea:	4852      	ldr	r0, [pc, #328]	; (800d334 <icmp_input+0x2c0>)
 800d1ec:	f001 fcd6 	bl	800eb9c <iprintf>
          goto icmperr;
 800d1f0:	e086      	b.n	800d300 <icmp_input+0x28c>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d1f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f7f8 febf 	bl	8005f80 <pbuf_add_header>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d15e      	bne.n	800d2c6 <icmp_input+0x252>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d216:	4b43      	ldr	r3, [pc, #268]	; (800d324 <icmp_input+0x2b0>)
 800d218:	691a      	ldr	r2, [r3, #16]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	2200      	movs	r2, #0
 800d222:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	885b      	ldrh	r3, [r3, #2]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d22e:	4293      	cmp	r3, r2
 800d230:	d907      	bls.n	800d242 <icmp_input+0x1ce>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	885b      	ldrh	r3, [r3, #2]
 800d236:	b29b      	uxth	r3, r3
 800d238:	3309      	adds	r3, #9
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	805a      	strh	r2, [r3, #2]
 800d240:	e006      	b.n	800d250 <icmp_input+0x1dc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	885b      	ldrh	r3, [r3, #2]
 800d246:	b29b      	uxth	r3, r3
 800d248:	3308      	adds	r3, #8
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	22ff      	movs	r2, #255	; 0xff
 800d254:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	729a      	strb	r2, [r3, #10]
 800d25c:	2200      	movs	r2, #0
 800d25e:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 800d260:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d262:	4619      	mov	r1, r3
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7f7 fc11 	bl	8004a8c <inet_chksum>
 800d26a:	4603      	mov	r3, r0
 800d26c:	461a      	mov	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	815a      	strh	r2, [r3, #10]
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 800d272:	4b2b      	ldr	r3, [pc, #172]	; (800d320 <icmp_input+0x2ac>)
 800d274:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d278:	3301      	adds	r3, #1
 800d27a:	b29a      	uxth	r2, r3
 800d27c:	4b28      	ldr	r3, [pc, #160]	; (800d320 <icmp_input+0x2ac>)
 800d27e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	9302      	str	r3, [sp, #8]
 800d286:	2301      	movs	r3, #1
 800d288:	9301      	str	r3, [sp, #4]
 800d28a:	2300      	movs	r3, #0
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	23ff      	movs	r3, #255	; 0xff
 800d290:	2200      	movs	r2, #0
 800d292:	69f9      	ldr	r1, [r7, #28]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fb21 	bl	800d8dc <ip4_output_if>
 800d29a:	4603      	mov	r3, r0
 800d29c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d29e:	e012      	b.n	800d2c6 <icmp_input+0x252>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 800d2a0:	4b1f      	ldr	r3, [pc, #124]	; (800d320 <icmp_input+0x2ac>)
 800d2a2:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	b29a      	uxth	r2, r3
 800d2aa:	4b1d      	ldr	r3, [pc, #116]	; (800d320 <icmp_input+0x2ac>)
 800d2ac:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 800d2b0:	4b1b      	ldr	r3, [pc, #108]	; (800d320 <icmp_input+0x2ac>)
 800d2b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	b29a      	uxth	r2, r3
 800d2ba:	4b19      	ldr	r3, [pc, #100]	; (800d320 <icmp_input+0x2ac>)
 800d2bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800d2c0:	e002      	b.n	800d2c8 <icmp_input+0x254>
      break;
 800d2c2:	bf00      	nop
 800d2c4:	e000      	b.n	800d2c8 <icmp_input+0x254>
      break;
 800d2c6:	bf00      	nop
  }
  pbuf_free(p);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7f8 feef 	bl	80060ac <pbuf_free>
  return;
 800d2ce:	e023      	b.n	800d318 <icmp_input+0x2a4>
    goto lenerr;
 800d2d0:	bf00      	nop
 800d2d2:	e002      	b.n	800d2da <icmp_input+0x266>
    goto lenerr;
 800d2d4:	bf00      	nop
 800d2d6:	e000      	b.n	800d2da <icmp_input+0x266>
        goto lenerr;
 800d2d8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7f8 fee6 	bl	80060ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 800d2e0:	4b0f      	ldr	r3, [pc, #60]	; (800d320 <icmp_input+0x2ac>)
 800d2e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	4b0d      	ldr	r3, [pc, #52]	; (800d320 <icmp_input+0x2ac>)
 800d2ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d2f0:	e012      	b.n	800d318 <icmp_input+0x2a4>
        goto icmperr;
 800d2f2:	bf00      	nop
 800d2f4:	e004      	b.n	800d300 <icmp_input+0x28c>
        goto icmperr;
 800d2f6:	bf00      	nop
 800d2f8:	e002      	b.n	800d300 <icmp_input+0x28c>
          goto icmperr;
 800d2fa:	bf00      	nop
 800d2fc:	e000      	b.n	800d300 <icmp_input+0x28c>
          goto icmperr;
 800d2fe:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7f8 fed3 	bl	80060ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 800d306:	4b06      	ldr	r3, [pc, #24]	; (800d320 <icmp_input+0x2ac>)
 800d308:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800d30c:	3301      	adds	r3, #1
 800d30e:	b29a      	uxth	r2, r3
 800d310:	4b03      	ldr	r3, [pc, #12]	; (800d320 <icmp_input+0x2ac>)
 800d312:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d316:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d318:	3728      	adds	r7, #40	; 0x28
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	200075ac 	.word	0x200075ac
 800d324:	200040b8 	.word	0x200040b8
 800d328:	200040cc 	.word	0x200040cc
 800d32c:	08012030 	.word	0x08012030
 800d330:	08012068 	.word	0x08012068
 800d334:	080120a0 	.word	0x080120a0
 800d338:	080120c8 	.word	0x080120c8

0800d33c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d348:	78fb      	ldrb	r3, [r7, #3]
 800d34a:	461a      	mov	r2, r3
 800d34c:	2103      	movs	r1, #3
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f814 	bl	800d37c <icmp_send_response>
}
 800d354:	bf00      	nop
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d368:	78fb      	ldrb	r3, [r7, #3]
 800d36a:	461a      	mov	r2, r3
 800d36c:	210b      	movs	r1, #11
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f804 	bl	800d37c <icmp_send_response>
}
 800d374:	bf00      	nop
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b08c      	sub	sp, #48	; 0x30
 800d380:	af04      	add	r7, sp, #16
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	70fb      	strb	r3, [r7, #3]
 800d388:	4613      	mov	r3, r2
 800d38a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d38c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d390:	2124      	movs	r1, #36	; 0x24
 800d392:	2022      	movs	r0, #34	; 0x22
 800d394:	f7f8 fbea 	bl	8005b6c <pbuf_alloc>
 800d398:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d39a:	69fb      	ldr	r3, [r7, #28]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d05e      	beq.n	800d45e <icmp_send_response+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	895b      	ldrh	r3, [r3, #10]
 800d3a4:	2b23      	cmp	r3, #35	; 0x23
 800d3a6:	d806      	bhi.n	800d3b6 <icmp_send_response+0x3a>
 800d3a8:	4b2f      	ldr	r3, [pc, #188]	; (800d468 <icmp_send_response+0xec>)
 800d3aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d3ae:	492f      	ldr	r1, [pc, #188]	; (800d46c <icmp_send_response+0xf0>)
 800d3b0:	482f      	ldr	r0, [pc, #188]	; (800d470 <icmp_send_response+0xf4>)
 800d3b2:	f001 fbf3 	bl	800eb9c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	78fa      	ldrb	r2, [r7, #3]
 800d3c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	78ba      	ldrb	r2, [r7, #2]
 800d3cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	711a      	strb	r2, [r3, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	719a      	strb	r2, [r3, #6]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	f103 0008 	add.w	r0, r3, #8
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	221c      	movs	r2, #28
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	f001 fbbd 	bl	800eb70 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d3fc:	f107 030c 	add.w	r3, r7, #12
 800d400:	4618      	mov	r0, r3
 800d402:	f000 f839 	bl	800d478 <ip4_route>
 800d406:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d023      	beq.n	800d456 <icmp_send_response+0xda>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2200      	movs	r2, #0
 800d412:	709a      	strb	r2, [r3, #2]
 800d414:	2200      	movs	r2, #0
 800d416:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	895b      	ldrh	r3, [r3, #10]
 800d41c:	4619      	mov	r1, r3
 800d41e:	6978      	ldr	r0, [r7, #20]
 800d420:	f7f7 fb34 	bl	8004a8c <inet_chksum>
 800d424:	4603      	mov	r3, r0
 800d426:	461a      	mov	r2, r3
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 800d42c:	4b11      	ldr	r3, [pc, #68]	; (800d474 <icmp_send_response+0xf8>)
 800d42e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d432:	3301      	adds	r3, #1
 800d434:	b29a      	uxth	r2, r3
 800d436:	4b0f      	ldr	r3, [pc, #60]	; (800d474 <icmp_send_response+0xf8>)
 800d438:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d43c:	f107 020c 	add.w	r2, r7, #12
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	9302      	str	r3, [sp, #8]
 800d444:	2301      	movs	r3, #1
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	2300      	movs	r3, #0
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	23ff      	movs	r3, #255	; 0xff
 800d44e:	2100      	movs	r1, #0
 800d450:	69f8      	ldr	r0, [r7, #28]
 800d452:	f000 fa43 	bl	800d8dc <ip4_output_if>
  }
  pbuf_free(q);
 800d456:	69f8      	ldr	r0, [r7, #28]
 800d458:	f7f8 fe28 	bl	80060ac <pbuf_free>
 800d45c:	e000      	b.n	800d460 <icmp_send_response+0xe4>
    return;
 800d45e:	bf00      	nop
}
 800d460:	3720      	adds	r7, #32
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	08012030 	.word	0x08012030
 800d46c:	080120fc 	.word	0x080120fc
 800d470:	080120a0 	.word	0x080120a0
 800d474:	200075ac 	.word	0x200075ac

0800d478 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d480:	4b37      	ldr	r3, [pc, #220]	; (800d560 <ip4_route+0xe8>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	60fb      	str	r3, [r7, #12]
 800d486:	e036      	b.n	800d4f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	b2db      	uxtb	r3, r3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d02b      	beq.n	800d4f0 <ip4_route+0x78>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d49e:	089b      	lsrs	r3, r3, #2
 800d4a0:	f003 0301 	and.w	r3, r3, #1
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d022      	beq.n	800d4f0 <ip4_route+0x78>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d01d      	beq.n	800d4f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	405a      	eors	r2, r3
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	e040      	b.n	800d552 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4d6:	f003 0302 	and.w	r3, r3, #2
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d108      	bne.n	800d4f0 <ip4_route+0x78>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	330c      	adds	r3, #12
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d101      	bne.n	800d4f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	e030      	b.n	800d552 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1c5      	bne.n	800d488 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d4fc:	4b19      	ldr	r3, [pc, #100]	; (800d564 <ip4_route+0xec>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d01a      	beq.n	800d53a <ip4_route+0xc2>
 800d504:	4b17      	ldr	r3, [pc, #92]	; (800d564 <ip4_route+0xec>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	2b00      	cmp	r3, #0
 800d512:	d012      	beq.n	800d53a <ip4_route+0xc2>
 800d514:	4b13      	ldr	r3, [pc, #76]	; (800d564 <ip4_route+0xec>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d51c:	f003 0304 	and.w	r3, r3, #4
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00a      	beq.n	800d53a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d524:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <ip4_route+0xec>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3304      	adds	r3, #4
 800d52a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d004      	beq.n	800d53a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b7f      	cmp	r3, #127	; 0x7f
 800d538:	d109      	bne.n	800d54e <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 800d53a:	4b0b      	ldr	r3, [pc, #44]	; (800d568 <ip4_route+0xf0>)
 800d53c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d540:	3301      	adds	r3, #1
 800d542:	b29a      	uxth	r2, r3
 800d544:	4b08      	ldr	r3, [pc, #32]	; (800d568 <ip4_route+0xf0>)
 800d546:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d54a:	2300      	movs	r3, #0
 800d54c:	e001      	b.n	800d552 <ip4_route+0xda>
  }

  return netif_default;
 800d54e:	4b05      	ldr	r3, [pc, #20]	; (800d564 <ip4_route+0xec>)
 800d550:	681b      	ldr	r3, [r3, #0]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	200075a0 	.word	0x200075a0
 800d564:	200075a4 	.word	0x200075a4
 800d568:	200075ac 	.word	0x200075ac

0800d56c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2b00      	cmp	r3, #0
 800d582:	d016      	beq.n	800d5b2 <ip4_input_accept+0x46>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3304      	adds	r3, #4
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d011      	beq.n	800d5b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d58e:	4b0b      	ldr	r3, [pc, #44]	; (800d5bc <ip4_input_accept+0x50>)
 800d590:	695a      	ldr	r2, [r3, #20]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	3304      	adds	r3, #4
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d008      	beq.n	800d5ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d59c:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <ip4_input_accept+0x50>)
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	6879      	ldr	r1, [r7, #4]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 faf2 	bl	800db8c <ip4_addr_isbroadcast_u32>
 800d5a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d001      	beq.n	800d5b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	200040b8 	.word	0x200040b8

0800d5c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b086      	sub	sp, #24
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 800d5ca:	4b9d      	ldr	r3, [pc, #628]	; (800d840 <ip4_input+0x280>)
 800d5cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	4b9a      	ldr	r3, [pc, #616]	; (800d840 <ip4_input+0x280>)
 800d5d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	091b      	lsrs	r3, r3, #4
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	2b04      	cmp	r3, #4
 800d5ea:	d014      	beq.n	800d616 <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f7f8 fd5d 	bl	80060ac <pbuf_free>
    IP_STATS_INC(ip.err);
 800d5f2:	4b93      	ldr	r3, [pc, #588]	; (800d840 <ip4_input+0x280>)
 800d5f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	4b90      	ldr	r3, [pc, #576]	; (800d840 <ip4_input+0x280>)
 800d5fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 800d602:	4b8f      	ldr	r3, [pc, #572]	; (800d840 <ip4_input+0x280>)
 800d604:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d608:	3301      	adds	r3, #1
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	4b8c      	ldr	r3, [pc, #560]	; (800d840 <ip4_input+0x280>)
 800d60e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d612:	2300      	movs	r3, #0
 800d614:	e15a      	b.n	800d8cc <ip4_input+0x30c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	f003 030f 	and.w	r3, r3, #15
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	b2db      	uxtb	r3, r3
 800d624:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	885b      	ldrh	r3, [r3, #2]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7f7 f8e5 	bl	80047fc <lwip_htons>
 800d632:	4603      	mov	r3, r0
 800d634:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	891b      	ldrh	r3, [r3, #8]
 800d63a:	89ba      	ldrh	r2, [r7, #12]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d204      	bcs.n	800d64a <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 800d640:	89bb      	ldrh	r3, [r7, #12]
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7f8 fbab 	bl	8005da0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	895b      	ldrh	r3, [r3, #10]
 800d64e:	89fa      	ldrh	r2, [r7, #14]
 800d650:	429a      	cmp	r2, r3
 800d652:	d807      	bhi.n	800d664 <ip4_input+0xa4>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	891b      	ldrh	r3, [r3, #8]
 800d658:	89ba      	ldrh	r2, [r7, #12]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d802      	bhi.n	800d664 <ip4_input+0xa4>
 800d65e:	89fb      	ldrh	r3, [r7, #14]
 800d660:	2b13      	cmp	r3, #19
 800d662:	d814      	bhi.n	800d68e <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7f8 fd21 	bl	80060ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 800d66a:	4b75      	ldr	r3, [pc, #468]	; (800d840 <ip4_input+0x280>)
 800d66c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d670:	3301      	adds	r3, #1
 800d672:	b29a      	uxth	r2, r3
 800d674:	4b72      	ldr	r3, [pc, #456]	; (800d840 <ip4_input+0x280>)
 800d676:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 800d67a:	4b71      	ldr	r3, [pc, #452]	; (800d840 <ip4_input+0x280>)
 800d67c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d680:	3301      	adds	r3, #1
 800d682:	b29a      	uxth	r2, r3
 800d684:	4b6e      	ldr	r3, [pc, #440]	; (800d840 <ip4_input+0x280>)
 800d686:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d68a:	2300      	movs	r3, #0
 800d68c:	e11e      	b.n	800d8cc <ip4_input+0x30c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 800d68e:	89fb      	ldrh	r3, [r7, #14]
 800d690:	4619      	mov	r1, r3
 800d692:	6978      	ldr	r0, [r7, #20]
 800d694:	f7f7 f9fa 	bl	8004a8c <inet_chksum>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d014      	beq.n	800d6c8 <ip4_input+0x108>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7f8 fd04 	bl	80060ac <pbuf_free>
      IP_STATS_INC(ip.chkerr);
 800d6a4:	4b66      	ldr	r3, [pc, #408]	; (800d840 <ip4_input+0x280>)
 800d6a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	4b64      	ldr	r3, [pc, #400]	; (800d840 <ip4_input+0x280>)
 800d6b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
 800d6b4:	4b62      	ldr	r3, [pc, #392]	; (800d840 <ip4_input+0x280>)
 800d6b6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	4b60      	ldr	r3, [pc, #384]	; (800d840 <ip4_input+0x280>)
 800d6c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e101      	b.n	800d8cc <ip4_input+0x30c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	4a5d      	ldr	r2, [pc, #372]	; (800d844 <ip4_input+0x284>)
 800d6ce:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	4a5b      	ldr	r2, [pc, #364]	; (800d844 <ip4_input+0x284>)
 800d6d6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d6d8:	4b5a      	ldr	r3, [pc, #360]	; (800d844 <ip4_input+0x284>)
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6e0:	2be0      	cmp	r3, #224	; 0xe0
 800d6e2:	d112      	bne.n	800d70a <ip4_input+0x14a>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6ea:	f003 0301 	and.w	r3, r3, #1
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d007      	beq.n	800d704 <ip4_input+0x144>
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <ip4_input+0x144>
      netif = inp;
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	613b      	str	r3, [r7, #16]
 800d702:	e02a      	b.n	800d75a <ip4_input+0x19a>
    } else {
      netif = NULL;
 800d704:	2300      	movs	r3, #0
 800d706:	613b      	str	r3, [r7, #16]
 800d708:	e027      	b.n	800d75a <ip4_input+0x19a>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d70a:	6838      	ldr	r0, [r7, #0]
 800d70c:	f7ff ff2e 	bl	800d56c <ip4_input_accept>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d002      	beq.n	800d71c <ip4_input+0x15c>
      netif = inp;
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	613b      	str	r3, [r7, #16]
 800d71a:	e01e      	b.n	800d75a <ip4_input+0x19a>
    } else {
      netif = NULL;
 800d71c:	2300      	movs	r3, #0
 800d71e:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d720:	4b48      	ldr	r3, [pc, #288]	; (800d844 <ip4_input+0x284>)
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b7f      	cmp	r3, #127	; 0x7f
 800d728:	d017      	beq.n	800d75a <ip4_input+0x19a>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d72a:	4b47      	ldr	r3, [pc, #284]	; (800d848 <ip4_input+0x288>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	613b      	str	r3, [r7, #16]
 800d730:	e00e      	b.n	800d750 <ip4_input+0x190>
          if (netif == inp) {
 800d732:	693a      	ldr	r2, [r7, #16]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	429a      	cmp	r2, r3
 800d738:	d006      	beq.n	800d748 <ip4_input+0x188>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d73a:	6938      	ldr	r0, [r7, #16]
 800d73c:	f7ff ff16 	bl	800d56c <ip4_input_accept>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d108      	bne.n	800d758 <ip4_input+0x198>
 800d746:	e000      	b.n	800d74a <ip4_input+0x18a>
            continue;
 800d748:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	613b      	str	r3, [r7, #16]
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1ed      	bne.n	800d732 <ip4_input+0x172>
 800d756:	e000      	b.n	800d75a <ip4_input+0x19a>
            break;
 800d758:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d75a:	4b3a      	ldr	r3, [pc, #232]	; (800d844 <ip4_input+0x284>)
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	6839      	ldr	r1, [r7, #0]
 800d760:	4618      	mov	r0, r3
 800d762:	f000 fa13 	bl	800db8c <ip4_addr_isbroadcast_u32>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d105      	bne.n	800d778 <ip4_input+0x1b8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d76c:	4b35      	ldr	r3, [pc, #212]	; (800d844 <ip4_input+0x284>)
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d774:	2be0      	cmp	r3, #224	; 0xe0
 800d776:	d10c      	bne.n	800d792 <ip4_input+0x1d2>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7f8 fc97 	bl	80060ac <pbuf_free>
      IP_STATS_INC(ip.drop);
 800d77e:	4b30      	ldr	r3, [pc, #192]	; (800d840 <ip4_input+0x280>)
 800d780:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d784:	3301      	adds	r3, #1
 800d786:	b29a      	uxth	r2, r3
 800d788:	4b2d      	ldr	r3, [pc, #180]	; (800d840 <ip4_input+0x280>)
 800d78a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	e09c      	b.n	800d8cc <ip4_input+0x30c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10c      	bne.n	800d7b2 <ip4_input+0x1f2>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 800d798:	4b29      	ldr	r3, [pc, #164]	; (800d840 <ip4_input+0x280>)
 800d79a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d79e:	3301      	adds	r3, #1
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	4b27      	ldr	r3, [pc, #156]	; (800d840 <ip4_input+0x280>)
 800d7a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7f8 fc7f 	bl	80060ac <pbuf_free>
    return ERR_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e08c      	b.n	800d8cc <ip4_input+0x30c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	88db      	ldrh	r3, [r3, #6]
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d7be:	4013      	ands	r3, r2
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00b      	beq.n	800d7dc <ip4_input+0x21c>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fd2f 	bl	800e228 <ip4_reass>
 800d7ca:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <ip4_input+0x216>
      return ERR_OK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e07a      	b.n	800d8cc <ip4_input+0x30c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d7dc:	4a19      	ldr	r2, [pc, #100]	; (800d844 <ip4_input+0x284>)
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d7e2:	4a18      	ldr	r2, [pc, #96]	; (800d844 <ip4_input+0x284>)
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d7e8:	4a16      	ldr	r2, [pc, #88]	; (800d844 <ip4_input+0x284>)
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	f003 030f 	and.w	r3, r3, #15
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	4b11      	ldr	r3, [pc, #68]	; (800d844 <ip4_input+0x284>)
 800d800:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d802:	89fb      	ldrh	r3, [r7, #14]
 800d804:	4619      	mov	r1, r3
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7f8 fbca 	bl	8005fa0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	7a5b      	ldrb	r3, [r3, #9]
 800d810:	2b11      	cmp	r3, #17
 800d812:	d006      	beq.n	800d822 <ip4_input+0x262>
 800d814:	2b11      	cmp	r3, #17
 800d816:	dc19      	bgt.n	800d84c <ip4_input+0x28c>
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d00c      	beq.n	800d836 <ip4_input+0x276>
 800d81c:	2b06      	cmp	r3, #6
 800d81e:	d005      	beq.n	800d82c <ip4_input+0x26c>
 800d820:	e014      	b.n	800d84c <ip4_input+0x28c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7fe faf1 	bl	800be0c <udp_input>
        break;
 800d82a:	e03c      	b.n	800d8a6 <ip4_input+0x2e6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d82c:	6839      	ldr	r1, [r7, #0]
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7fa fa96 	bl	8007d60 <tcp_input>
        break;
 800d834:	e037      	b.n	800d8a6 <ip4_input+0x2e6>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d836:	6839      	ldr	r1, [r7, #0]
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f7ff fc1b 	bl	800d074 <icmp_input>
        break;
 800d83e:	e032      	b.n	800d8a6 <ip4_input+0x2e6>
 800d840:	200075ac 	.word	0x200075ac
 800d844:	200040b8 	.word	0x200040b8
 800d848:	200075a0 	.word	0x200075a0
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d84c:	4b21      	ldr	r3, [pc, #132]	; (800d8d4 <ip4_input+0x314>)
 800d84e:	695b      	ldr	r3, [r3, #20]
 800d850:	6939      	ldr	r1, [r7, #16]
 800d852:	4618      	mov	r0, r3
 800d854:	f000 f99a 	bl	800db8c <ip4_addr_isbroadcast_u32>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10f      	bne.n	800d87e <ip4_input+0x2be>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d85e:	4b1d      	ldr	r3, [pc, #116]	; (800d8d4 <ip4_input+0x314>)
 800d860:	695b      	ldr	r3, [r3, #20]
 800d862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d866:	2be0      	cmp	r3, #224	; 0xe0
 800d868:	d009      	beq.n	800d87e <ip4_input+0x2be>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d86a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d86e:	4619      	mov	r1, r3
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7f8 fc08 	bl	8006086 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d876:	2102      	movs	r1, #2
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f7ff fd5f 	bl	800d33c <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 800d87e:	4b16      	ldr	r3, [pc, #88]	; (800d8d8 <ip4_input+0x318>)
 800d880:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d884:	3301      	adds	r3, #1
 800d886:	b29a      	uxth	r2, r3
 800d888:	4b13      	ldr	r3, [pc, #76]	; (800d8d8 <ip4_input+0x318>)
 800d88a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 800d88e:	4b12      	ldr	r3, [pc, #72]	; (800d8d8 <ip4_input+0x318>)
 800d890:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800d894:	3301      	adds	r3, #1
 800d896:	b29a      	uxth	r2, r3
 800d898:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <ip4_input+0x318>)
 800d89a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7f8 fc04 	bl	80060ac <pbuf_free>
        break;
 800d8a4:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d8a6:	4b0b      	ldr	r3, [pc, #44]	; (800d8d4 <ip4_input+0x314>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d8ac:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <ip4_input+0x314>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d8b2:	4b08      	ldr	r3, [pc, #32]	; (800d8d4 <ip4_input+0x314>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d8b8:	4b06      	ldr	r3, [pc, #24]	; (800d8d4 <ip4_input+0x314>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d8be:	4b05      	ldr	r3, [pc, #20]	; (800d8d4 <ip4_input+0x314>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d8c4:	4b03      	ldr	r3, [pc, #12]	; (800d8d4 <ip4_input+0x314>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	200040b8 	.word	0x200040b8
 800d8d8:	200075ac 	.word	0x200075ac

0800d8dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b08a      	sub	sp, #40	; 0x28
 800d8e0:	af04      	add	r7, sp, #16
 800d8e2:	60f8      	str	r0, [r7, #12]
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	607a      	str	r2, [r7, #4]
 800d8e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d009      	beq.n	800d908 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d003      	beq.n	800d902 <ip4_output_if+0x26>
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d102      	bne.n	800d908 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d904:	3304      	adds	r3, #4
 800d906:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d908:	78fa      	ldrb	r2, [r7, #3]
 800d90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90c:	9302      	str	r3, [sp, #8]
 800d90e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d912:	9301      	str	r3, [sp, #4]
 800d914:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	4613      	mov	r3, r2
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	6979      	ldr	r1, [r7, #20]
 800d920:	68f8      	ldr	r0, [r7, #12]
 800d922:	f000 f805 	bl	800d930 <ip4_output_if_src>
 800d926:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3718      	adds	r7, #24
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b088      	sub	sp, #32
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
 800d93c:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 800d93e:	2300      	movs	r3, #0
 800d940:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	7b9b      	ldrb	r3, [r3, #14]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d006      	beq.n	800d958 <ip4_output_if_src+0x28>
 800d94a:	4b89      	ldr	r3, [pc, #548]	; (800db70 <ip4_output_if_src+0x240>)
 800d94c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d950:	4988      	ldr	r1, [pc, #544]	; (800db74 <ip4_output_if_src+0x244>)
 800d952:	4889      	ldr	r0, [pc, #548]	; (800db78 <ip4_output_if_src+0x248>)
 800d954:	f001 f922 	bl	800eb9c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f000 80cc 	beq.w	800daf8 <ip4_output_if_src+0x1c8>
    u16_t ip_hlen = IP_HLEN;
 800d960:	2314      	movs	r3, #20
 800d962:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d964:	2114      	movs	r1, #20
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f7f8 fb0a 	bl	8005f80 <pbuf_add_header>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00a      	beq.n	800d988 <ip4_output_if_src+0x58>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 800d972:	4b82      	ldr	r3, [pc, #520]	; (800db7c <ip4_output_if_src+0x24c>)
 800d974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d978:	3301      	adds	r3, #1
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	4b7f      	ldr	r3, [pc, #508]	; (800db7c <ip4_output_if_src+0x24c>)
 800d97e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d982:	f06f 0301 	mvn.w	r3, #1
 800d986:	e0ef      	b.n	800db68 <ip4_output_if_src+0x238>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	895b      	ldrh	r3, [r3, #10]
 800d992:	2b13      	cmp	r3, #19
 800d994:	d806      	bhi.n	800d9a4 <ip4_output_if_src+0x74>
 800d996:	4b76      	ldr	r3, [pc, #472]	; (800db70 <ip4_output_if_src+0x240>)
 800d998:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d99c:	4978      	ldr	r1, [pc, #480]	; (800db80 <ip4_output_if_src+0x250>)
 800d99e:	4876      	ldr	r0, [pc, #472]	; (800db78 <ip4_output_if_src+0x248>)
 800d9a0:	f001 f8fc 	bl	800eb9c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	78fa      	ldrb	r2, [r7, #3]
 800d9a8:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d9b0:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 800d9b2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d9b6:	78fb      	ldrb	r3, [r7, #3]
 800d9b8:	021b      	lsls	r3, r3, #8
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	021b      	lsls	r3, r3, #8
 800d9be:	b21a      	sxth	r2, r3
 800d9c0:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	021b      	lsls	r3, r3, #8
 800d9c8:	430b      	orrs	r3, r1
 800d9ca:	121b      	asrs	r3, r3, #8
 800d9cc:	b21b      	sxth	r3, r3
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	b21b      	sxth	r3, r3
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	b21b      	sxth	r3, r3
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	461a      	mov	r2, r3
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	4413      	add	r3, r2
 800d9de:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 800d9e8:	69bb      	ldr	r3, [r7, #24]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	69fa      	ldr	r2, [r7, #28]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	0c1b      	lsrs	r3, r3, #16
 800d9fa:	69fa      	ldr	r2, [r7, #28]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800da00:	8afb      	ldrh	r3, [r7, #22]
 800da02:	089b      	lsrs	r3, r3, #2
 800da04:	b29b      	uxth	r3, r3
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800da18:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 800da1a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	021b      	lsls	r3, r3, #8
 800da24:	4313      	orrs	r3, r2
 800da26:	021b      	lsls	r3, r3, #8
 800da28:	b21a      	sxth	r2, r3
 800da2a:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	021b      	lsls	r3, r3, #8
 800da34:	430b      	orrs	r3, r1
 800da36:	121b      	asrs	r3, r3, #8
 800da38:	b21b      	sxth	r3, r3
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	b21b      	sxth	r3, r3
 800da3e:	4313      	orrs	r3, r2
 800da40:	b21b      	sxth	r3, r3
 800da42:	b29b      	uxth	r3, r3
 800da44:	461a      	mov	r2, r3
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	4413      	add	r3, r2
 800da4a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	891b      	ldrh	r3, [r3, #8]
 800da50:	4618      	mov	r0, r3
 800da52:	f7f6 fed3 	bl	80047fc <lwip_htons>
 800da56:	4603      	mov	r3, r0
 800da58:	461a      	mov	r2, r3
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 800da5e:	69bb      	ldr	r3, [r7, #24]
 800da60:	885b      	ldrh	r3, [r3, #2]
 800da62:	b29b      	uxth	r3, r3
 800da64:	461a      	mov	r2, r3
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	4413      	add	r3, r2
 800da6a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	2200      	movs	r2, #0
 800da70:	719a      	strb	r2, [r3, #6]
 800da72:	2200      	movs	r2, #0
 800da74:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800da76:	4b43      	ldr	r3, [pc, #268]	; (800db84 <ip4_output_if_src+0x254>)
 800da78:	881b      	ldrh	r3, [r3, #0]
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7f6 febe 	bl	80047fc <lwip_htons>
 800da80:	4603      	mov	r3, r0
 800da82:	461a      	mov	r2, r3
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	889b      	ldrh	r3, [r3, #4]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	461a      	mov	r2, r3
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	4413      	add	r3, r2
 800da94:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800da96:	4b3b      	ldr	r3, [pc, #236]	; (800db84 <ip4_output_if_src+0x254>)
 800da98:	881b      	ldrh	r3, [r3, #0]
 800da9a:	3301      	adds	r3, #1
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	4b39      	ldr	r3, [pc, #228]	; (800db84 <ip4_output_if_src+0x254>)
 800daa0:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d104      	bne.n	800dab2 <ip4_output_if_src+0x182>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800daa8:	4b37      	ldr	r3, [pc, #220]	; (800db88 <ip4_output_if_src+0x258>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	60da      	str	r2, [r3, #12]
 800dab0:	e003      	b.n	800daba <ip4_output_if_src+0x18a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	69fa      	ldr	r2, [r7, #28]
 800dac2:	4413      	add	r3, r2
 800dac4:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	0c1b      	lsrs	r3, r3, #16
 800dacc:	69fa      	ldr	r2, [r7, #28]
 800dace:	4413      	add	r3, r2
 800dad0:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	0c1a      	lsrs	r2, r3, #16
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	4413      	add	r3, r2
 800dadc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	0c1b      	lsrs	r3, r3, #16
 800dae2:	69fa      	ldr	r2, [r7, #28]
 800dae4:	4413      	add	r3, r2
 800dae6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	43db      	mvns	r3, r3
 800daec:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	815a      	strh	r2, [r3, #10]
 800daf6:	e017      	b.n	800db28 <ip4_output_if_src+0x1f8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	895b      	ldrh	r3, [r3, #10]
 800dafc:	2b13      	cmp	r3, #19
 800dafe:	d80a      	bhi.n	800db16 <ip4_output_if_src+0x1e6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 800db00:	4b1e      	ldr	r3, [pc, #120]	; (800db7c <ip4_output_if_src+0x24c>)
 800db02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db06:	3301      	adds	r3, #1
 800db08:	b29a      	uxth	r2, r3
 800db0a:	4b1c      	ldr	r3, [pc, #112]	; (800db7c <ip4_output_if_src+0x24c>)
 800db0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800db10:	f06f 0301 	mvn.w	r3, #1
 800db14:	e028      	b.n	800db68 <ip4_output_if_src+0x238>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 800db22:	f107 0310 	add.w	r3, r7, #16
 800db26:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 800db28:	4b14      	ldr	r3, [pc, #80]	; (800db7c <ip4_output_if_src+0x24c>)
 800db2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800db2e:	3301      	adds	r3, #1
 800db30:	b29a      	uxth	r2, r3
 800db32:	4b12      	ldr	r3, [pc, #72]	; (800db7c <ip4_output_if_src+0x24c>)
 800db34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800db38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00c      	beq.n	800db5a <ip4_output_if_src+0x22a>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	891a      	ldrh	r2, [r3, #8]
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db48:	429a      	cmp	r2, r3
 800db4a:	d906      	bls.n	800db5a <ip4_output_if_src+0x22a>
    return ip4_frag(p, netif, dest);
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f000 fd83 	bl	800e65c <ip4_frag>
 800db56:	4603      	mov	r3, r0
 800db58:	e006      	b.n	800db68 <ip4_output_if_src+0x238>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5c:	695b      	ldr	r3, [r3, #20]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	68f9      	ldr	r1, [r7, #12]
 800db62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db64:	4798      	blx	r3
 800db66:	4603      	mov	r3, r0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3720      	adds	r7, #32
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	08012128 	.word	0x08012128
 800db74:	0801215c 	.word	0x0801215c
 800db78:	08012168 	.word	0x08012168
 800db7c:	200075ac 	.word	0x200075ac
 800db80:	08012190 	.word	0x08012190
 800db84:	2000026a 	.word	0x2000026a
 800db88:	08012588 	.word	0x08012588

0800db8c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b085      	sub	sp, #20
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba0:	d002      	beq.n	800dba8 <ip4_addr_isbroadcast_u32+0x1c>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e02a      	b.n	800dc02 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbb2:	f003 0302 	and.w	r3, r3, #2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e021      	b.n	800dc02 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d101      	bne.n	800dbce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e019      	b.n	800dc02 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	405a      	eors	r2, r3
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4013      	ands	r3, r2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d10d      	bne.n	800dc00 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	43da      	mvns	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	3308      	adds	r3, #8
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d101      	bne.n	800dc00 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e000      	b.n	800dc02 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dc00:	2300      	movs	r3, #0
  }
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3714      	adds	r7, #20
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
	...

0800dc10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dc1a:	4b12      	ldr	r3, [pc, #72]	; (800dc64 <ip_reass_tmr+0x54>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dc20:	e018      	b.n	800dc54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	7fdb      	ldrb	r3, [r3, #31]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00b      	beq.n	800dc42 <ip_reass_tmr+0x32>
      r->timer--;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	7fdb      	ldrb	r3, [r3, #31]
 800dc2e:	3b01      	subs	r3, #1
 800dc30:	b2da      	uxtb	r2, r3
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	60fb      	str	r3, [r7, #12]
 800dc40:	e008      	b.n	800dc54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dc4c:	68b9      	ldr	r1, [r7, #8]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f80a 	bl	800dc68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1e3      	bne.n	800dc22 <ip_reass_tmr+0x12>
    }
  }
}
 800dc5a:	bf00      	nop
 800dc5c:	bf00      	nop
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	2000026c 	.word	0x2000026c

0800dc68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d105      	bne.n	800dc8a <ip_reass_free_complete_datagram+0x22>
 800dc7e:	4b45      	ldr	r3, [pc, #276]	; (800dd94 <ip_reass_free_complete_datagram+0x12c>)
 800dc80:	22ab      	movs	r2, #171	; 0xab
 800dc82:	4945      	ldr	r1, [pc, #276]	; (800dd98 <ip_reass_free_complete_datagram+0x130>)
 800dc84:	4845      	ldr	r0, [pc, #276]	; (800dd9c <ip_reass_free_complete_datagram+0x134>)
 800dc86:	f000 ff89 	bl	800eb9c <iprintf>
  if (prev != NULL) {
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00a      	beq.n	800dca6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	687a      	ldr	r2, [r7, #4]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d005      	beq.n	800dca6 <ip_reass_free_complete_datagram+0x3e>
 800dc9a:	4b3e      	ldr	r3, [pc, #248]	; (800dd94 <ip_reass_free_complete_datagram+0x12c>)
 800dc9c:	22ad      	movs	r2, #173	; 0xad
 800dc9e:	4940      	ldr	r1, [pc, #256]	; (800dda0 <ip_reass_free_complete_datagram+0x138>)
 800dca0:	483e      	ldr	r0, [pc, #248]	; (800dd9c <ip_reass_free_complete_datagram+0x134>)
 800dca2:	f000 ff7b 	bl	800eb9c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	889b      	ldrh	r3, [r3, #4]
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d12a      	bne.n	800dd0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	6858      	ldr	r0, [r3, #4]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	3308      	adds	r3, #8
 800dcce:	2214      	movs	r2, #20
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	f000 ff4d 	bl	800eb70 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	69b8      	ldr	r0, [r7, #24]
 800dcda:	f7ff fb3f 	bl	800d35c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800dcde:	69b8      	ldr	r0, [r7, #24]
 800dce0:	f7f8 fa6c 	bl	80061bc <pbuf_clen>
 800dce4:	4603      	mov	r3, r0
 800dce6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dce8:	8bfa      	ldrh	r2, [r7, #30]
 800dcea:	8a7b      	ldrh	r3, [r7, #18]
 800dcec:	4413      	add	r3, r2
 800dcee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcf2:	db05      	blt.n	800dd00 <ip_reass_free_complete_datagram+0x98>
 800dcf4:	4b27      	ldr	r3, [pc, #156]	; (800dd94 <ip_reass_free_complete_datagram+0x12c>)
 800dcf6:	22bc      	movs	r2, #188	; 0xbc
 800dcf8:	492a      	ldr	r1, [pc, #168]	; (800dda4 <ip_reass_free_complete_datagram+0x13c>)
 800dcfa:	4828      	ldr	r0, [pc, #160]	; (800dd9c <ip_reass_free_complete_datagram+0x134>)
 800dcfc:	f000 ff4e 	bl	800eb9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dd00:	8bfa      	ldrh	r2, [r7, #30]
 800dd02:	8a7b      	ldrh	r3, [r7, #18]
 800dd04:	4413      	add	r3, r2
 800dd06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800dd08:	69b8      	ldr	r0, [r7, #24]
 800dd0a:	f7f8 f9cf 	bl	80060ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800dd14:	e01f      	b.n	800dd56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f7f8 fa48 	bl	80061bc <pbuf_clen>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dd30:	8bfa      	ldrh	r2, [r7, #30]
 800dd32:	8a7b      	ldrh	r3, [r7, #18]
 800dd34:	4413      	add	r3, r2
 800dd36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd3a:	db05      	blt.n	800dd48 <ip_reass_free_complete_datagram+0xe0>
 800dd3c:	4b15      	ldr	r3, [pc, #84]	; (800dd94 <ip_reass_free_complete_datagram+0x12c>)
 800dd3e:	22cc      	movs	r2, #204	; 0xcc
 800dd40:	4918      	ldr	r1, [pc, #96]	; (800dda4 <ip_reass_free_complete_datagram+0x13c>)
 800dd42:	4816      	ldr	r0, [pc, #88]	; (800dd9c <ip_reass_free_complete_datagram+0x134>)
 800dd44:	f000 ff2a 	bl	800eb9c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dd48:	8bfa      	ldrh	r2, [r7, #30]
 800dd4a:	8a7b      	ldrh	r3, [r7, #18]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f7f8 f9ab 	bl	80060ac <pbuf_free>
  while (p != NULL) {
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d1dc      	bne.n	800dd16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f8ca 	bl	800def8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dd64:	4b10      	ldr	r3, [pc, #64]	; (800dda8 <ip_reass_free_complete_datagram+0x140>)
 800dd66:	881b      	ldrh	r3, [r3, #0]
 800dd68:	8bfa      	ldrh	r2, [r7, #30]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d905      	bls.n	800dd7a <ip_reass_free_complete_datagram+0x112>
 800dd6e:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <ip_reass_free_complete_datagram+0x12c>)
 800dd70:	22d2      	movs	r2, #210	; 0xd2
 800dd72:	490e      	ldr	r1, [pc, #56]	; (800ddac <ip_reass_free_complete_datagram+0x144>)
 800dd74:	4809      	ldr	r0, [pc, #36]	; (800dd9c <ip_reass_free_complete_datagram+0x134>)
 800dd76:	f000 ff11 	bl	800eb9c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dd7a:	4b0b      	ldr	r3, [pc, #44]	; (800dda8 <ip_reass_free_complete_datagram+0x140>)
 800dd7c:	881a      	ldrh	r2, [r3, #0]
 800dd7e:	8bfb      	ldrh	r3, [r7, #30]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	4b08      	ldr	r3, [pc, #32]	; (800dda8 <ip_reass_free_complete_datagram+0x140>)
 800dd86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dd88:	8bfb      	ldrh	r3, [r7, #30]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3720      	adds	r7, #32
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	080121c0 	.word	0x080121c0
 800dd98:	080121fc 	.word	0x080121fc
 800dd9c:	08012208 	.word	0x08012208
 800dda0:	08012230 	.word	0x08012230
 800dda4:	08012244 	.word	0x08012244
 800dda8:	20000270 	.word	0x20000270
 800ddac:	08012264 	.word	0x08012264

0800ddb0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b08a      	sub	sp, #40	; 0x28
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ddce:	4b28      	ldr	r3, [pc, #160]	; (800de70 <ip_reass_remove_oldest_datagram+0xc0>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ddd4:	e030      	b.n	800de38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	695a      	ldr	r2, [r3, #20]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d10c      	bne.n	800ddfc <ip_reass_remove_oldest_datagram+0x4c>
 800dde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde4:	699a      	ldr	r2, [r3, #24]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d106      	bne.n	800ddfc <ip_reass_remove_oldest_datagram+0x4c>
 800ddee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf0:	899a      	ldrh	r2, [r3, #12]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	889b      	ldrh	r3, [r3, #4]
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d014      	beq.n	800de26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	3301      	adds	r3, #1
 800de00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800de02:	6a3b      	ldr	r3, [r7, #32]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d104      	bne.n	800de12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	61bb      	str	r3, [r7, #24]
 800de10:	e009      	b.n	800de26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800de12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de14:	7fda      	ldrb	r2, [r3, #31]
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	7fdb      	ldrb	r3, [r3, #31]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d803      	bhi.n	800de26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800de26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d1cb      	bne.n	800ddd6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800de3e:	6a3b      	ldr	r3, [r7, #32]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d008      	beq.n	800de56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800de44:	69b9      	ldr	r1, [r7, #24]
 800de46:	6a38      	ldr	r0, [r7, #32]
 800de48:	f7ff ff0e 	bl	800dc68 <ip_reass_free_complete_datagram>
 800de4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800de4e:	697a      	ldr	r2, [r7, #20]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	4413      	add	r3, r2
 800de54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800de56:	697a      	ldr	r2, [r7, #20]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	429a      	cmp	r2, r3
 800de5c:	da02      	bge.n	800de64 <ip_reass_remove_oldest_datagram+0xb4>
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	2b01      	cmp	r3, #1
 800de62:	dcac      	bgt.n	800ddbe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800de64:	697b      	ldr	r3, [r7, #20]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3728      	adds	r7, #40	; 0x28
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	2000026c 	.word	0x2000026c

0800de74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800de7e:	2004      	movs	r0, #4
 800de80:	f7f7 fb04 	bl	800548c <memp_malloc>
 800de84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d116      	bne.n	800deba <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f7ff ff8e 	bl	800ddb0 <ip_reass_remove_oldest_datagram>
 800de94:	4602      	mov	r2, r0
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	4293      	cmp	r3, r2
 800de9a:	dc03      	bgt.n	800dea4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800de9c:	2004      	movs	r0, #4
 800de9e:	f7f7 faf5 	bl	800548c <memp_malloc>
 800dea2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d107      	bne.n	800deba <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 800deaa:	4b11      	ldr	r3, [pc, #68]	; (800def0 <ip_reass_enqueue_new_datagram+0x7c>)
 800deac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800deae:	3301      	adds	r3, #1
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	4b0f      	ldr	r3, [pc, #60]	; (800def0 <ip_reass_enqueue_new_datagram+0x7c>)
 800deb4:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800deb6:	2300      	movs	r3, #0
 800deb8:	e016      	b.n	800dee8 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800deba:	2220      	movs	r2, #32
 800debc:	2100      	movs	r1, #0
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f000 fe64 	bl	800eb8c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	220f      	movs	r2, #15
 800dec8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800deca:	4b0a      	ldr	r3, [pc, #40]	; (800def4 <ip_reass_enqueue_new_datagram+0x80>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ded2:	4a08      	ldr	r2, [pc, #32]	; (800def4 <ip_reass_enqueue_new_datagram+0x80>)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3308      	adds	r3, #8
 800dedc:	2214      	movs	r2, #20
 800dede:	6879      	ldr	r1, [r7, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fe45 	bl	800eb70 <memcpy>
  return ipr;
 800dee6:	68fb      	ldr	r3, [r7, #12]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	200075ac 	.word	0x200075ac
 800def4:	2000026c 	.word	0x2000026c

0800def8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800df02:	4b10      	ldr	r3, [pc, #64]	; (800df44 <ip_reass_dequeue_datagram+0x4c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d104      	bne.n	800df16 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a0c      	ldr	r2, [pc, #48]	; (800df44 <ip_reass_dequeue_datagram+0x4c>)
 800df12:	6013      	str	r3, [r2, #0]
 800df14:	e00d      	b.n	800df32 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d106      	bne.n	800df2a <ip_reass_dequeue_datagram+0x32>
 800df1c:	4b0a      	ldr	r3, [pc, #40]	; (800df48 <ip_reass_dequeue_datagram+0x50>)
 800df1e:	f240 1245 	movw	r2, #325	; 0x145
 800df22:	490a      	ldr	r1, [pc, #40]	; (800df4c <ip_reass_dequeue_datagram+0x54>)
 800df24:	480a      	ldr	r0, [pc, #40]	; (800df50 <ip_reass_dequeue_datagram+0x58>)
 800df26:	f000 fe39 	bl	800eb9c <iprintf>
    prev->next = ipr->next;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800df32:	6879      	ldr	r1, [r7, #4]
 800df34:	2004      	movs	r0, #4
 800df36:	f7f7 faeb 	bl	8005510 <memp_free>
}
 800df3a:	bf00      	nop
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	2000026c 	.word	0x2000026c
 800df48:	080121c0 	.word	0x080121c0
 800df4c:	08012288 	.word	0x08012288
 800df50:	08012208 	.word	0x08012208

0800df54 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b08c      	sub	sp, #48	; 0x30
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800df60:	2300      	movs	r3, #0
 800df62:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800df64:	2301      	movs	r3, #1
 800df66:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	885b      	ldrh	r3, [r3, #2]
 800df72:	b29b      	uxth	r3, r3
 800df74:	4618      	mov	r0, r3
 800df76:	f7f6 fc41 	bl	80047fc <lwip_htons>
 800df7a:	4603      	mov	r3, r0
 800df7c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	f003 030f 	and.w	r3, r3, #15
 800df86:	b2db      	uxtb	r3, r3
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800df8c:	7e7b      	ldrb	r3, [r7, #25]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	8b7a      	ldrh	r2, [r7, #26]
 800df92:	429a      	cmp	r2, r3
 800df94:	d202      	bcs.n	800df9c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df96:	f04f 33ff 	mov.w	r3, #4294967295
 800df9a:	e135      	b.n	800e208 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800df9c:	7e7b      	ldrb	r3, [r7, #25]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	8b7a      	ldrh	r2, [r7, #26]
 800dfa2:	1ad3      	subs	r3, r2, r3
 800dfa4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	88db      	ldrh	r3, [r3, #6]
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7f6 fc25 	bl	80047fc <lwip_htons>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	701a      	strb	r2, [r3, #0]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	705a      	strb	r2, [r3, #1]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	709a      	strb	r2, [r3, #2]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd8:	8afa      	ldrh	r2, [r7, #22]
 800dfda:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dfdc:	8afa      	ldrh	r2, [r7, #22]
 800dfde:	8b7b      	ldrh	r3, [r7, #26]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfea:	88db      	ldrh	r3, [r3, #6]
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	8afa      	ldrh	r2, [r7, #22]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d902      	bls.n	800dffa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dff4:	f04f 33ff 	mov.w	r3, #4294967295
 800dff8:	e106      	b.n	800e208 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
 800e000:	e068      	b.n	800e0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00a:	889b      	ldrh	r3, [r3, #4]
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	889b      	ldrh	r3, [r3, #4]
 800e012:	b29b      	uxth	r3, r3
 800e014:	429a      	cmp	r2, r3
 800e016:	d235      	bcs.n	800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e01c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e020:	2b00      	cmp	r3, #0
 800e022:	d020      	beq.n	800e066 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e026:	889b      	ldrh	r3, [r3, #4]
 800e028:	b29a      	uxth	r2, r3
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	88db      	ldrh	r3, [r3, #6]
 800e02e:	b29b      	uxth	r3, r3
 800e030:	429a      	cmp	r2, r3
 800e032:	d307      	bcc.n	800e044 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e036:	88db      	ldrh	r3, [r3, #6]
 800e038:	b29a      	uxth	r2, r3
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	889b      	ldrh	r3, [r3, #4]
 800e03e:	b29b      	uxth	r3, r3
 800e040:	429a      	cmp	r2, r3
 800e042:	d902      	bls.n	800e04a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e044:	f04f 33ff 	mov.w	r3, #4294967295
 800e048:	e0de      	b.n	800e208 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e052:	88db      	ldrh	r3, [r3, #6]
 800e054:	b29a      	uxth	r2, r3
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	889b      	ldrh	r3, [r3, #4]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d03d      	beq.n	800e0dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e060:	2300      	movs	r3, #0
 800e062:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e064:	e03a      	b.n	800e0dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e068:	88db      	ldrh	r3, [r3, #6]
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	889b      	ldrh	r3, [r3, #4]
 800e070:	b29b      	uxth	r3, r3
 800e072:	429a      	cmp	r2, r3
 800e074:	d902      	bls.n	800e07c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e076:	f04f 33ff 	mov.w	r3, #4294967295
 800e07a:	e0c5      	b.n	800e208 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	605a      	str	r2, [r3, #4]
      break;
 800e082:	e02b      	b.n	800e0dc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e086:	889b      	ldrh	r3, [r3, #4]
 800e088:	b29a      	uxth	r2, r3
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	889b      	ldrh	r3, [r3, #4]
 800e08e:	b29b      	uxth	r3, r3
 800e090:	429a      	cmp	r2, r3
 800e092:	d102      	bne.n	800e09a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e094:	f04f 33ff 	mov.w	r3, #4294967295
 800e098:	e0b6      	b.n	800e208 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09c:	889b      	ldrh	r3, [r3, #4]
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	88db      	ldrh	r3, [r3, #6]
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d202      	bcs.n	800e0b0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ae:	e0ab      	b.n	800e208 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d009      	beq.n	800e0ca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	88db      	ldrh	r3, [r3, #6]
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	889b      	ldrh	r3, [r3, #4]
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d001      	beq.n	800e0ca <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d193      	bne.n	800e002 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e0da:	e000      	b.n	800e0de <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e0dc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d12d      	bne.n	800e140 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d01c      	beq.n	800e124 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ec:	88db      	ldrh	r3, [r3, #6]
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f2:	889b      	ldrh	r3, [r3, #4]
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d906      	bls.n	800e108 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e0fa:	4b45      	ldr	r3, [pc, #276]	; (800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e0fc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e100:	4944      	ldr	r1, [pc, #272]	; (800e214 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e102:	4845      	ldr	r0, [pc, #276]	; (800e218 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e104:	f000 fd4a 	bl	800eb9c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e110:	88db      	ldrh	r3, [r3, #6]
 800e112:	b29a      	uxth	r2, r3
 800e114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e116:	889b      	ldrh	r3, [r3, #4]
 800e118:	b29b      	uxth	r3, r3
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d010      	beq.n	800e140 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	623b      	str	r3, [r7, #32]
 800e122:	e00d      	b.n	800e140 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d006      	beq.n	800e13a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e12c:	4b38      	ldr	r3, [pc, #224]	; (800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e12e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e132:	493a      	ldr	r1, [pc, #232]	; (800e21c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e134:	4838      	ldr	r0, [pc, #224]	; (800e218 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e136:	f000 fd31 	bl	800eb9c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	68ba      	ldr	r2, [r7, #8]
 800e13e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d105      	bne.n	800e152 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	7f9b      	ldrb	r3, [r3, #30]
 800e14a:	f003 0301 	and.w	r3, r3, #1
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d059      	beq.n	800e206 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d04f      	beq.n	800e1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d006      	beq.n	800e16e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	889b      	ldrh	r3, [r3, #4]
 800e168:	b29b      	uxth	r3, r3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	623b      	str	r3, [r7, #32]
 800e172:	e041      	b.n	800e1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e176:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e17e:	e012      	b.n	800e1a6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e188:	88db      	ldrh	r3, [r3, #6]
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	889b      	ldrh	r3, [r3, #4]
 800e190:	b29b      	uxth	r3, r3
 800e192:	429a      	cmp	r2, r3
 800e194:	d002      	beq.n	800e19c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	623b      	str	r3, [r7, #32]
            break;
 800e19a:	e007      	b.n	800e1ac <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1e9      	bne.n	800e180 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d022      	beq.n	800e1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d106      	bne.n	800e1c8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e1ba:	4b15      	ldr	r3, [pc, #84]	; (800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1bc:	f240 12df 	movw	r2, #479	; 0x1df
 800e1c0:	4917      	ldr	r1, [pc, #92]	; (800e220 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e1c2:	4815      	ldr	r0, [pc, #84]	; (800e218 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1c4:	f000 fcea 	bl	800eb9c <iprintf>
          LWIP_ASSERT("sanity check",
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d106      	bne.n	800e1e2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e1d4:	4b0e      	ldr	r3, [pc, #56]	; (800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e1da:	4911      	ldr	r1, [pc, #68]	; (800e220 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e1dc:	480e      	ldr	r0, [pc, #56]	; (800e218 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1de:	f000 fcdd 	bl	800eb9c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d006      	beq.n	800e1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e1ea:	4b09      	ldr	r3, [pc, #36]	; (800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e1ec:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e1f0:	490c      	ldr	r1, [pc, #48]	; (800e224 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e1f2:	4809      	ldr	r0, [pc, #36]	; (800e218 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e1f4:	f000 fcd2 	bl	800eb9c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e1f8:	6a3b      	ldr	r3, [r7, #32]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	bf14      	ite	ne
 800e1fe:	2301      	movne	r3, #1
 800e200:	2300      	moveq	r3, #0
 800e202:	b2db      	uxtb	r3, r3
 800e204:	e000      	b.n	800e208 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3730      	adds	r7, #48	; 0x30
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}
 800e210:	080121c0 	.word	0x080121c0
 800e214:	080122a4 	.word	0x080122a4
 800e218:	08012208 	.word	0x08012208
 800e21c:	080122c4 	.word	0x080122c4
 800e220:	080122fc 	.word	0x080122fc
 800e224:	0801230c 	.word	0x0801230c

0800e228 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b08e      	sub	sp, #56	; 0x38
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 800e230:	4ba3      	ldr	r3, [pc, #652]	; (800e4c0 <ip4_reass+0x298>)
 800e232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e234:	3301      	adds	r3, #1
 800e236:	b29a      	uxth	r2, r3
 800e238:	4ba1      	ldr	r3, [pc, #644]	; (800e4c0 <ip4_reass+0x298>)
 800e23a:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	f003 030f 	and.w	r3, r3, #15
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b14      	cmp	r3, #20
 800e252:	d008      	beq.n	800e266 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 800e254:	4b9a      	ldr	r3, [pc, #616]	; (800e4c0 <ip4_reass+0x298>)
 800e256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e25a:	3301      	adds	r3, #1
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	4b98      	ldr	r3, [pc, #608]	; (800e4c0 <ip4_reass+0x298>)
 800e260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 800e264:	e184      	b.n	800e570 <ip4_reass+0x348>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	88db      	ldrh	r3, [r3, #6]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7f6 fac5 	bl	80047fc <lwip_htons>
 800e272:	4603      	mov	r3, r0
 800e274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e278:	b29b      	uxth	r3, r3
 800e27a:	00db      	lsls	r3, r3, #3
 800e27c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	885b      	ldrh	r3, [r3, #2]
 800e282:	b29b      	uxth	r3, r3
 800e284:	4618      	mov	r0, r3
 800e286:	f7f6 fab9 	bl	80047fc <lwip_htons>
 800e28a:	4603      	mov	r3, r0
 800e28c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	f003 030f 	and.w	r3, r3, #15
 800e296:	b2db      	uxtb	r3, r3
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e29e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	f0c0 815f 	bcc.w	800e56a <ip4_reass+0x342>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e2ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2b4:	1ad3      	subs	r3, r2, r3
 800e2b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7f7 ff7f 	bl	80061bc <pbuf_clen>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e2c2:	4b80      	ldr	r3, [pc, #512]	; (800e4c4 <ip4_reass+0x29c>)
 800e2c4:	881b      	ldrh	r3, [r3, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	8c3b      	ldrh	r3, [r7, #32]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	2b0a      	cmp	r3, #10
 800e2ce:	dd15      	ble.n	800e2fc <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e2d0:	8c3b      	ldrh	r3, [r7, #32]
 800e2d2:	4619      	mov	r1, r3
 800e2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2d6:	f7ff fd6b 	bl	800ddb0 <ip_reass_remove_oldest_datagram>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d006      	beq.n	800e2ee <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e2e0:	4b78      	ldr	r3, [pc, #480]	; (800e4c4 <ip4_reass+0x29c>)
 800e2e2:	881b      	ldrh	r3, [r3, #0]
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	8c3b      	ldrh	r3, [r7, #32]
 800e2e8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e2ea:	2b0a      	cmp	r3, #10
 800e2ec:	dd06      	ble.n	800e2fc <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 800e2ee:	4b74      	ldr	r3, [pc, #464]	; (800e4c0 <ip4_reass+0x298>)
 800e2f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	4b72      	ldr	r3, [pc, #456]	; (800e4c0 <ip4_reass+0x298>)
 800e2f8:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 800e2fa:	e139      	b.n	800e570 <ip4_reass+0x348>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e2fc:	4b72      	ldr	r3, [pc, #456]	; (800e4c8 <ip4_reass+0x2a0>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	633b      	str	r3, [r7, #48]	; 0x30
 800e302:	e01e      	b.n	800e342 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e306:	695a      	ldr	r2, [r3, #20]
 800e308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	429a      	cmp	r2, r3
 800e30e:	d115      	bne.n	800e33c <ip4_reass+0x114>
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	699a      	ldr	r2, [r3, #24]
 800e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d10f      	bne.n	800e33c <ip4_reass+0x114>
 800e31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31e:	899a      	ldrh	r2, [r3, #12]
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	889b      	ldrh	r3, [r3, #4]
 800e324:	b29b      	uxth	r3, r3
 800e326:	429a      	cmp	r2, r3
 800e328:	d108      	bne.n	800e33c <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 800e32a:	4b65      	ldr	r3, [pc, #404]	; (800e4c0 <ip4_reass+0x298>)
 800e32c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e330:	3301      	adds	r3, #1
 800e332:	b29a      	uxth	r2, r3
 800e334:	4b62      	ldr	r3, [pc, #392]	; (800e4c0 <ip4_reass+0x298>)
 800e336:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 800e33a:	e005      	b.n	800e348 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	633b      	str	r3, [r7, #48]	; 0x30
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1dd      	bne.n	800e304 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 800e348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d109      	bne.n	800e362 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e34e:	8c3b      	ldrh	r3, [r7, #32]
 800e350:	4619      	mov	r1, r3
 800e352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e354:	f7ff fd8e 	bl	800de74 <ip_reass_enqueue_new_datagram>
 800e358:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d11c      	bne.n	800e39a <ip4_reass+0x172>
      goto nullreturn;
 800e360:	e106      	b.n	800e570 <ip4_reass+0x348>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e364:	88db      	ldrh	r3, [r3, #6]
 800e366:	b29b      	uxth	r3, r3
 800e368:	4618      	mov	r0, r3
 800e36a:	f7f6 fa47 	bl	80047fc <lwip_htons>
 800e36e:	4603      	mov	r3, r0
 800e370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e374:	2b00      	cmp	r3, #0
 800e376:	d110      	bne.n	800e39a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e37a:	89db      	ldrh	r3, [r3, #14]
 800e37c:	4618      	mov	r0, r3
 800e37e:	f7f6 fa3d 	bl	80047fc <lwip_htons>
 800e382:	4603      	mov	r3, r0
 800e384:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d006      	beq.n	800e39a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38e:	3308      	adds	r3, #8
 800e390:	2214      	movs	r2, #20
 800e392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e394:	4618      	mov	r0, r3
 800e396:	f000 fbeb 	bl	800eb70 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39c:	88db      	ldrh	r3, [r3, #6]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	f003 0320 	and.w	r3, r3, #32
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	bf0c      	ite	eq
 800e3a8:	2301      	moveq	r3, #1
 800e3aa:	2300      	movne	r3, #0
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00e      	beq.n	800e3d4 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 800e3b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e3b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3ba:	4413      	add	r3, r2
 800e3bc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e3be:	8b7a      	ldrh	r2, [r7, #26]
 800e3c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	f0c0 80af 	bcc.w	800e526 <ip4_reass+0x2fe>
 800e3c8:	8b7b      	ldrh	r3, [r7, #26]
 800e3ca:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	f200 80a9 	bhi.w	800e526 <ip4_reass+0x2fe>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e3d4:	69fa      	ldr	r2, [r7, #28]
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3da:	f7ff fdbb 	bl	800df54 <ip_reass_chain_frag_into_datagram_and_validate>
 800e3de:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e6:	f000 80a0 	beq.w	800e52a <ip4_reass+0x302>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e3ea:	4b36      	ldr	r3, [pc, #216]	; (800e4c4 <ip4_reass+0x29c>)
 800e3ec:	881a      	ldrh	r2, [r3, #0]
 800e3ee:	8c3b      	ldrh	r3, [r7, #32]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	4b33      	ldr	r3, [pc, #204]	; (800e4c4 <ip4_reass+0x29c>)
 800e3f6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d00d      	beq.n	800e41a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 800e3fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e402:	4413      	add	r3, r2
 800e404:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	8a7a      	ldrh	r2, [r7, #18]
 800e40a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40e:	7f9b      	ldrb	r3, [r3, #30]
 800e410:	f043 0301 	orr.w	r3, r3, #1
 800e414:	b2da      	uxtb	r2, r3
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	f040 8080 	bne.w	800e522 <ip4_reass+0x2fa>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e424:	8b9b      	ldrh	r3, [r3, #28]
 800e426:	3314      	adds	r3, #20
 800e428:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43e:	3308      	adds	r3, #8
 800e440:	2214      	movs	r2, #20
 800e442:	4619      	mov	r1, r3
 800e444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e446:	f000 fb93 	bl	800eb70 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e44a:	8a3b      	ldrh	r3, [r7, #16]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7f6 f9d5 	bl	80047fc <lwip_htons>
 800e452:	4603      	mov	r3, r0
 800e454:	461a      	mov	r2, r3
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45c:	2200      	movs	r2, #0
 800e45e:	719a      	strb	r2, [r3, #6]
 800e460:	2200      	movs	r2, #0
 800e462:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	2200      	movs	r2, #0
 800e468:	729a      	strb	r2, [r3, #10]
 800e46a:	2200      	movs	r2, #0
 800e46c:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 800e46e:	2114      	movs	r1, #20
 800e470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e472:	f7f6 fb0b 	bl	8004a8c <inet_chksum>
 800e476:	4603      	mov	r3, r0
 800e478:	461a      	mov	r2, r3
 800e47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47c:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e484:	e00d      	b.n	800e4a2 <ip4_reass+0x27a>
      iprh = (struct ip_reass_helper *)r->payload;
 800e486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e48c:	2114      	movs	r1, #20
 800e48e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e490:	f7f7 fd86 	bl	8005fa0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e494:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7f7 feca 	bl	8006230 <pbuf_cat>
      r = iprh->next_pbuf;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1ee      	bne.n	800e486 <ip4_reass+0x25e>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e4a8:	4b07      	ldr	r3, [pc, #28]	; (800e4c8 <ip4_reass+0x2a0>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d102      	bne.n	800e4b8 <ip4_reass+0x290>
      ipr_prev = NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4b6:	e016      	b.n	800e4e6 <ip4_reass+0x2be>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e4b8:	4b03      	ldr	r3, [pc, #12]	; (800e4c8 <ip4_reass+0x2a0>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4be:	e00d      	b.n	800e4dc <ip4_reass+0x2b4>
 800e4c0:	200075ac 	.word	0x200075ac
 800e4c4:	20000270 	.word	0x20000270
 800e4c8:	2000026c 	.word	0x2000026c
        if (ipr_prev->next == ipr) {
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d006      	beq.n	800e4e4 <ip4_reass+0x2bc>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1f4      	bne.n	800e4cc <ip4_reass+0x2a4>
 800e4e2:	e000      	b.n	800e4e6 <ip4_reass+0x2be>
          break;
 800e4e4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e4e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ea:	f7ff fd05 	bl	800def8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7f7 fe64 	bl	80061bc <pbuf_clen>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e4f8:	4b24      	ldr	r3, [pc, #144]	; (800e58c <ip4_reass+0x364>)
 800e4fa:	881b      	ldrh	r3, [r3, #0]
 800e4fc:	8c3a      	ldrh	r2, [r7, #32]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d906      	bls.n	800e510 <ip4_reass+0x2e8>
 800e502:	4b23      	ldr	r3, [pc, #140]	; (800e590 <ip4_reass+0x368>)
 800e504:	f240 229b 	movw	r2, #667	; 0x29b
 800e508:	4922      	ldr	r1, [pc, #136]	; (800e594 <ip4_reass+0x36c>)
 800e50a:	4823      	ldr	r0, [pc, #140]	; (800e598 <ip4_reass+0x370>)
 800e50c:	f000 fb46 	bl	800eb9c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e510:	4b1e      	ldr	r3, [pc, #120]	; (800e58c <ip4_reass+0x364>)
 800e512:	881a      	ldrh	r2, [r3, #0]
 800e514:	8c3b      	ldrh	r3, [r7, #32]
 800e516:	1ad3      	subs	r3, r2, r3
 800e518:	b29a      	uxth	r2, r3
 800e51a:	4b1c      	ldr	r3, [pc, #112]	; (800e58c <ip4_reass+0x364>)
 800e51c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	e030      	b.n	800e584 <ip4_reass+0x35c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e522:	2300      	movs	r3, #0
 800e524:	e02e      	b.n	800e584 <ip4_reass+0x35c>
      goto nullreturn_ipr;
 800e526:	bf00      	nop
 800e528:	e000      	b.n	800e52c <ip4_reass+0x304>
    goto nullreturn_ipr;
 800e52a:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <ip4_reass+0x318>
 800e532:	4b17      	ldr	r3, [pc, #92]	; (800e590 <ip4_reass+0x368>)
 800e534:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e538:	4918      	ldr	r1, [pc, #96]	; (800e59c <ip4_reass+0x374>)
 800e53a:	4817      	ldr	r0, [pc, #92]	; (800e598 <ip4_reass+0x370>)
 800e53c:	f000 fb2e 	bl	800eb9c <iprintf>
  if (ipr->p == NULL) {
 800e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d112      	bne.n	800e56e <ip4_reass+0x346>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e548:	4b15      	ldr	r3, [pc, #84]	; (800e5a0 <ip4_reass+0x378>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e54e:	429a      	cmp	r2, r3
 800e550:	d006      	beq.n	800e560 <ip4_reass+0x338>
 800e552:	4b0f      	ldr	r3, [pc, #60]	; (800e590 <ip4_reass+0x368>)
 800e554:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e558:	4912      	ldr	r1, [pc, #72]	; (800e5a4 <ip4_reass+0x37c>)
 800e55a:	480f      	ldr	r0, [pc, #60]	; (800e598 <ip4_reass+0x370>)
 800e55c:	f000 fb1e 	bl	800eb9c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e560:	2100      	movs	r1, #0
 800e562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e564:	f7ff fcc8 	bl	800def8 <ip_reass_dequeue_datagram>
 800e568:	e002      	b.n	800e570 <ip4_reass+0x348>
    goto nullreturn;
 800e56a:	bf00      	nop
 800e56c:	e000      	b.n	800e570 <ip4_reass+0x348>
  }

nullreturn:
 800e56e:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 800e570:	4b0d      	ldr	r3, [pc, #52]	; (800e5a8 <ip4_reass+0x380>)
 800e572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e574:	3301      	adds	r3, #1
 800e576:	b29a      	uxth	r2, r3
 800e578:	4b0b      	ldr	r3, [pc, #44]	; (800e5a8 <ip4_reass+0x380>)
 800e57a:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f7f7 fd95 	bl	80060ac <pbuf_free>
  return NULL;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3738      	adds	r7, #56	; 0x38
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20000270 	.word	0x20000270
 800e590:	080121c0 	.word	0x080121c0
 800e594:	08012330 	.word	0x08012330
 800e598:	08012208 	.word	0x08012208
 800e59c:	0801234c 	.word	0x0801234c
 800e5a0:	2000026c 	.word	0x2000026c
 800e5a4:	08012358 	.word	0x08012358
 800e5a8:	200075ac 	.word	0x200075ac

0800e5ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e5b0:	2005      	movs	r0, #5
 800e5b2:	f7f6 ff6b 	bl	800548c <memp_malloc>
 800e5b6:	4603      	mov	r3, r0
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d106      	bne.n	800e5d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e5ca:	4b07      	ldr	r3, [pc, #28]	; (800e5e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e5cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e5d0:	4906      	ldr	r1, [pc, #24]	; (800e5ec <ip_frag_free_pbuf_custom_ref+0x30>)
 800e5d2:	4807      	ldr	r0, [pc, #28]	; (800e5f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e5d4:	f000 fae2 	bl	800eb9c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	2005      	movs	r0, #5
 800e5dc:	f7f6 ff98 	bl	8005510 <memp_free>
}
 800e5e0:	bf00      	nop
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	080121c0 	.word	0x080121c0
 800e5ec:	08012378 	.word	0x08012378
 800e5f0:	08012208 	.word	0x08012208

0800e5f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d106      	bne.n	800e614 <ipfrag_free_pbuf_custom+0x20>
 800e606:	4b11      	ldr	r3, [pc, #68]	; (800e64c <ipfrag_free_pbuf_custom+0x58>)
 800e608:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e60c:	4910      	ldr	r1, [pc, #64]	; (800e650 <ipfrag_free_pbuf_custom+0x5c>)
 800e60e:	4811      	ldr	r0, [pc, #68]	; (800e654 <ipfrag_free_pbuf_custom+0x60>)
 800e610:	f000 fac4 	bl	800eb9c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d006      	beq.n	800e62a <ipfrag_free_pbuf_custom+0x36>
 800e61c:	4b0b      	ldr	r3, [pc, #44]	; (800e64c <ipfrag_free_pbuf_custom+0x58>)
 800e61e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e622:	490d      	ldr	r1, [pc, #52]	; (800e658 <ipfrag_free_pbuf_custom+0x64>)
 800e624:	480b      	ldr	r0, [pc, #44]	; (800e654 <ipfrag_free_pbuf_custom+0x60>)
 800e626:	f000 fab9 	bl	800eb9c <iprintf>
  if (pcr->original != NULL) {
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	695b      	ldr	r3, [r3, #20]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d004      	beq.n	800e63c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	695b      	ldr	r3, [r3, #20]
 800e636:	4618      	mov	r0, r3
 800e638:	f7f7 fd38 	bl	80060ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f7ff ffbd 	bl	800e5bc <ip_frag_free_pbuf_custom_ref>
}
 800e642:	bf00      	nop
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	080121c0 	.word	0x080121c0
 800e650:	08012384 	.word	0x08012384
 800e654:	08012208 	.word	0x08012208
 800e658:	08012390 	.word	0x08012390

0800e65c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b094      	sub	sp, #80	; 0x50
 800e660:	af02      	add	r7, sp, #8
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e668:	2300      	movs	r3, #0
 800e66a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e672:	3b14      	subs	r3, #20
 800e674:	2b00      	cmp	r3, #0
 800e676:	da00      	bge.n	800e67a <ip4_frag+0x1e>
 800e678:	3307      	adds	r3, #7
 800e67a:	10db      	asrs	r3, r3, #3
 800e67c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e67e:	2314      	movs	r3, #20
 800e680:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e68a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	f003 030f 	and.w	r3, r3, #15
 800e694:	b2db      	uxtb	r3, r3
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	2b14      	cmp	r3, #20
 800e69c:	d002      	beq.n	800e6a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e69e:	f06f 0305 	mvn.w	r3, #5
 800e6a2:	e11e      	b.n	800e8e2 <ip4_frag+0x286>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	895b      	ldrh	r3, [r3, #10]
 800e6a8:	2b13      	cmp	r3, #19
 800e6aa:	d809      	bhi.n	800e6c0 <ip4_frag+0x64>
 800e6ac:	4b8f      	ldr	r3, [pc, #572]	; (800e8ec <ip4_frag+0x290>)
 800e6ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e6b2:	498f      	ldr	r1, [pc, #572]	; (800e8f0 <ip4_frag+0x294>)
 800e6b4:	488f      	ldr	r0, [pc, #572]	; (800e8f4 <ip4_frag+0x298>)
 800e6b6:	f000 fa71 	bl	800eb9c <iprintf>
 800e6ba:	f06f 0305 	mvn.w	r3, #5
 800e6be:	e110      	b.n	800e8e2 <ip4_frag+0x286>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	88db      	ldrh	r3, [r3, #6]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7f6 f898 	bl	80047fc <lwip_htons>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e6d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e6da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e6dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e6e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	891b      	ldrh	r3, [r3, #8]
 800e6e6:	3b14      	subs	r3, #20
 800e6e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e6ec:	e0ef      	b.n	800e8ce <ip4_frag+0x272>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e6ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e6f0:	00db      	lsls	r3, r3, #3
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	bf28      	it	cs
 800e6fc:	4613      	movcs	r3, r2
 800e6fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e700:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e704:	2114      	movs	r1, #20
 800e706:	200e      	movs	r0, #14
 800e708:	f7f7 fa30 	bl	8005b6c <pbuf_alloc>
 800e70c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e710:	2b00      	cmp	r3, #0
 800e712:	f000 80e3 	beq.w	800e8dc <ip4_frag+0x280>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	895b      	ldrh	r3, [r3, #10]
 800e71a:	2b13      	cmp	r3, #19
 800e71c:	d806      	bhi.n	800e72c <ip4_frag+0xd0>
 800e71e:	4b73      	ldr	r3, [pc, #460]	; (800e8ec <ip4_frag+0x290>)
 800e720:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e724:	4974      	ldr	r1, [pc, #464]	; (800e8f8 <ip4_frag+0x29c>)
 800e726:	4873      	ldr	r0, [pc, #460]	; (800e8f4 <ip4_frag+0x298>)
 800e728:	f000 fa38 	bl	800eb9c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	2214      	movs	r2, #20
 800e732:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e734:	4618      	mov	r0, r3
 800e736:	f000 fa1b 	bl	800eb70 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e740:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e742:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e746:	e064      	b.n	800e812 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	895a      	ldrh	r2, [r3, #10]
 800e74c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	895b      	ldrh	r3, [r3, #10]
 800e756:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e758:	429a      	cmp	r2, r3
 800e75a:	d906      	bls.n	800e76a <ip4_frag+0x10e>
 800e75c:	4b63      	ldr	r3, [pc, #396]	; (800e8ec <ip4_frag+0x290>)
 800e75e:	f240 322d 	movw	r2, #813	; 0x32d
 800e762:	4966      	ldr	r1, [pc, #408]	; (800e8fc <ip4_frag+0x2a0>)
 800e764:	4863      	ldr	r0, [pc, #396]	; (800e8f4 <ip4_frag+0x298>)
 800e766:	f000 fa19 	bl	800eb9c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e76a:	8bfa      	ldrh	r2, [r7, #30]
 800e76c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e770:	4293      	cmp	r3, r2
 800e772:	bf28      	it	cs
 800e774:	4613      	movcs	r3, r2
 800e776:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e77a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d105      	bne.n	800e78e <ip4_frag+0x132>
        poff = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	60fb      	str	r3, [r7, #12]
        continue;
 800e78c:	e041      	b.n	800e812 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e78e:	f7ff ff0d 	bl	800e5ac <ip_frag_alloc_pbuf_custom_ref>
 800e792:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d103      	bne.n	800e7a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e79a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e79c:	f7f7 fc86 	bl	80060ac <pbuf_free>
        goto memerr;
 800e7a0:	e09d      	b.n	800e8de <ip4_frag+0x282>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e7a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e7a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e7aa:	4413      	add	r3, r2
 800e7ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e7b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e7b4:	9201      	str	r2, [sp, #4]
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2241      	movs	r2, #65	; 0x41
 800e7bc:	2000      	movs	r0, #0
 800e7be:	f7f7 fac1 	bl	8005d44 <pbuf_alloced_custom>
 800e7c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e7ca:	69b8      	ldr	r0, [r7, #24]
 800e7cc:	f7ff fef6 	bl	800e5bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e7d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7d2:	f7f7 fc6b 	bl	80060ac <pbuf_free>
        goto memerr;
 800e7d6:	e082      	b.n	800e8de <ip4_frag+0x282>
      }
      pbuf_ref(p);
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f7f7 fd07 	bl	80061ec <pbuf_ref>
      pcr->original = p;
 800e7de:	69bb      	ldr	r3, [r7, #24]
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	4a46      	ldr	r2, [pc, #280]	; (800e900 <ip4_frag+0x2a4>)
 800e7e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e7ea:	6979      	ldr	r1, [r7, #20]
 800e7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7ee:	f7f7 fd1f 	bl	8006230 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e7f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e7f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e7fa:	1ad3      	subs	r3, r2, r3
 800e7fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e800:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e804:	2b00      	cmp	r3, #0
 800e806:	d004      	beq.n	800e812 <ip4_frag+0x1b6>
        poff = 0;
 800e808:	2300      	movs	r3, #0
 800e80a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e812:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e816:	2b00      	cmp	r3, #0
 800e818:	d196      	bne.n	800e748 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e81a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e81c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e820:	4413      	add	r3, r2
 800e822:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e828:	f1a3 0213 	sub.w	r2, r3, #19
 800e82c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e830:	429a      	cmp	r2, r3
 800e832:	bfcc      	ite	gt
 800e834:	2301      	movgt	r3, #1
 800e836:	2300      	movle	r3, #0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e83c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e844:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e846:	6a3b      	ldr	r3, [r7, #32]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <ip4_frag+0x1f6>
 800e84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d003      	beq.n	800e85a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e852:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e858:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e85a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7f5 ffcd 	bl	80047fc <lwip_htons>
 800e862:	4603      	mov	r3, r0
 800e864:	461a      	mov	r2, r3
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e86a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e86c:	3314      	adds	r3, #20
 800e86e:	b29b      	uxth	r3, r3
 800e870:	4618      	mov	r0, r3
 800e872:	f7f5 ffc3 	bl	80047fc <lwip_htons>
 800e876:	4603      	mov	r3, r0
 800e878:	461a      	mov	r2, r3
 800e87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	2200      	movs	r2, #0
 800e882:	729a      	strb	r2, [r3, #10]
 800e884:	2200      	movs	r2, #0
 800e886:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 800e888:	2114      	movs	r1, #20
 800e88a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e88c:	f7f6 f8fe 	bl	8004a8c <inet_chksum>
 800e890:	4603      	mov	r3, r0
 800e892:	461a      	mov	r2, r3
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	695b      	ldr	r3, [r3, #20]
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8a0:	68b8      	ldr	r0, [r7, #8]
 800e8a2:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 800e8a4:	4b17      	ldr	r3, [pc, #92]	; (800e904 <ip4_frag+0x2a8>)
 800e8a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	4b15      	ldr	r3, [pc, #84]	; (800e904 <ip4_frag+0x2a8>)
 800e8ae:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e8b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8b2:	f7f7 fbfb 	bl	80060ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e8b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e8ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e8c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e8c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e8c8:	4413      	add	r3, r2
 800e8ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e8ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f47f af0b 	bne.w	800e6ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	e002      	b.n	800e8e2 <ip4_frag+0x286>
      goto memerr;
 800e8dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e8de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3748      	adds	r7, #72	; 0x48
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	080121c0 	.word	0x080121c0
 800e8f0:	0801239c 	.word	0x0801239c
 800e8f4:	08012208 	.word	0x08012208
 800e8f8:	080123b8 	.word	0x080123b8
 800e8fc:	080123d8 	.word	0x080123d8
 800e900:	0800e5f5 	.word	0x0800e5f5
 800e904:	200075ac 	.word	0x200075ac

0800e908 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e912:	230e      	movs	r3, #14
 800e914:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	895b      	ldrh	r3, [r3, #10]
 800e91a:	2b0e      	cmp	r3, #14
 800e91c:	d80c      	bhi.n	800e938 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 800e91e:	4b51      	ldr	r3, [pc, #324]	; (800ea64 <ethernet_input+0x15c>)
 800e920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e922:	3301      	adds	r3, #1
 800e924:	b29a      	uxth	r2, r3
 800e926:	4b4f      	ldr	r3, [pc, #316]	; (800ea64 <ethernet_input+0x15c>)
 800e928:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 800e92a:	4b4e      	ldr	r3, [pc, #312]	; (800ea64 <ethernet_input+0x15c>)
 800e92c:	8bdb      	ldrh	r3, [r3, #30]
 800e92e:	3301      	adds	r3, #1
 800e930:	b29a      	uxth	r2, r3
 800e932:	4b4c      	ldr	r3, [pc, #304]	; (800ea64 <ethernet_input+0x15c>)
 800e934:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 800e936:	e08d      	b.n	800ea54 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	7bdb      	ldrb	r3, [r3, #15]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d106      	bne.n	800e94e <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e946:	3301      	adds	r3, #1
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	7b1a      	ldrb	r2, [r3, #12]
 800e958:	7b5b      	ldrb	r3, [r3, #13]
 800e95a:	021b      	lsls	r3, r3, #8
 800e95c:	4313      	orrs	r3, r2
 800e95e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	f003 0301 	and.w	r3, r3, #1
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d023      	beq.n	800e9b4 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	2b01      	cmp	r3, #1
 800e972:	d10f      	bne.n	800e994 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	785b      	ldrb	r3, [r3, #1]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d11b      	bne.n	800e9b4 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e980:	2b5e      	cmp	r3, #94	; 0x5e
 800e982:	d117      	bne.n	800e9b4 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	7b5b      	ldrb	r3, [r3, #13]
 800e988:	f043 0310 	orr.w	r3, r3, #16
 800e98c:	b2da      	uxtb	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	735a      	strb	r2, [r3, #13]
 800e992:	e00f      	b.n	800e9b4 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	2206      	movs	r2, #6
 800e998:	4933      	ldr	r1, [pc, #204]	; (800ea68 <ethernet_input+0x160>)
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 f8da 	bl	800eb54 <memcmp>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	7b5b      	ldrb	r3, [r3, #13]
 800e9aa:	f043 0308 	orr.w	r3, r3, #8
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e9b4:	89fb      	ldrh	r3, [r7, #14]
 800e9b6:	2b08      	cmp	r3, #8
 800e9b8:	d003      	beq.n	800e9c2 <ethernet_input+0xba>
 800e9ba:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e9be:	d014      	beq.n	800e9ea <ethernet_input+0xe2>
 800e9c0:	e034      	b.n	800ea2c <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9c8:	f003 0308 	and.w	r3, r3, #8
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d03c      	beq.n	800ea4a <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e9d0:	8afb      	ldrh	r3, [r7, #22]
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7f7 fae3 	bl	8005fa0 <pbuf_remove_header>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d136      	bne.n	800ea4e <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 800e9e0:	6839      	ldr	r1, [r7, #0]
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f7fe fdec 	bl	800d5c0 <ip4_input>
      }
      break;
 800e9e8:	e02d      	b.n	800ea46 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9f0:	f003 0308 	and.w	r3, r3, #8
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d02c      	beq.n	800ea52 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e9f8:	8afb      	ldrh	r3, [r7, #22]
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7f7 facf 	bl	8005fa0 <pbuf_remove_header>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00c      	beq.n	800ea22 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 800ea08:	4b16      	ldr	r3, [pc, #88]	; (800ea64 <ethernet_input+0x15c>)
 800ea0a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	4b14      	ldr	r3, [pc, #80]	; (800ea64 <ethernet_input+0x15c>)
 800ea12:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 800ea14:	4b13      	ldr	r3, [pc, #76]	; (800ea64 <ethernet_input+0x15c>)
 800ea16:	8bdb      	ldrh	r3, [r3, #30]
 800ea18:	3301      	adds	r3, #1
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	4b11      	ldr	r3, [pc, #68]	; (800ea64 <ethernet_input+0x15c>)
 800ea1e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 800ea20:	e018      	b.n	800ea54 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7fd fec1 	bl	800c7ac <etharp_input>
      }
      break;
 800ea2a:	e00c      	b.n	800ea46 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 800ea2c:	4b0d      	ldr	r3, [pc, #52]	; (800ea64 <ethernet_input+0x15c>)
 800ea2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea30:	3301      	adds	r3, #1
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	4b0b      	ldr	r3, [pc, #44]	; (800ea64 <ethernet_input+0x15c>)
 800ea36:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 800ea38:	4b0a      	ldr	r3, [pc, #40]	; (800ea64 <ethernet_input+0x15c>)
 800ea3a:	8bdb      	ldrh	r3, [r3, #30]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	4b08      	ldr	r3, [pc, #32]	; (800ea64 <ethernet_input+0x15c>)
 800ea42:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ea44:	e006      	b.n	800ea54 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	e008      	b.n	800ea5c <ethernet_input+0x154>
        goto free_and_return;
 800ea4a:	bf00      	nop
 800ea4c:	e002      	b.n	800ea54 <ethernet_input+0x14c>
        goto free_and_return;
 800ea4e:	bf00      	nop
 800ea50:	e000      	b.n	800ea54 <ethernet_input+0x14c>
        goto free_and_return;
 800ea52:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f7f7 fb29 	bl	80060ac <pbuf_free>
  return ERR_OK;
 800ea5a:	2300      	movs	r3, #0
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3718      	adds	r7, #24
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	200075ac 	.word	0x200075ac
 800ea68:	0801258c 	.word	0x0801258c

0800ea6c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ea7a:	8c3b      	ldrh	r3, [r7, #32]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7f5 febd 	bl	80047fc <lwip_htons>
 800ea82:	4603      	mov	r3, r0
 800ea84:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ea86:	210e      	movs	r1, #14
 800ea88:	68b8      	ldr	r0, [r7, #8]
 800ea8a:	f7f7 fa79 	bl	8005f80 <pbuf_add_header>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d125      	bne.n	800eae0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	8afa      	ldrh	r2, [r7, #22]
 800ea9e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	2206      	movs	r2, #6
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 f862 	bl	800eb70 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	3306      	adds	r3, #6
 800eab0:	2206      	movs	r2, #6
 800eab2:	6879      	ldr	r1, [r7, #4]
 800eab4:	4618      	mov	r0, r3
 800eab6:	f000 f85b 	bl	800eb70 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eac0:	2b06      	cmp	r3, #6
 800eac2:	d006      	beq.n	800ead2 <ethernet_output+0x66>
 800eac4:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <ethernet_output+0x90>)
 800eac6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800eaca:	490d      	ldr	r1, [pc, #52]	; (800eb00 <ethernet_output+0x94>)
 800eacc:	480d      	ldr	r0, [pc, #52]	; (800eb04 <ethernet_output+0x98>)
 800eace:	f000 f865 	bl	800eb9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	68b9      	ldr	r1, [r7, #8]
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	4798      	blx	r3
 800eadc:	4603      	mov	r3, r0
 800eade:	e008      	b.n	800eaf2 <ethernet_output+0x86>
      goto pbuf_header_failed;
 800eae0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 800eae2:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <ethernet_output+0x9c>)
 800eae4:	895b      	ldrh	r3, [r3, #10]
 800eae6:	3301      	adds	r3, #1
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	4b07      	ldr	r3, [pc, #28]	; (800eb08 <ethernet_output+0x9c>)
 800eaec:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 800eaee:	f06f 0301 	mvn.w	r3, #1
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3718      	adds	r7, #24
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	080123e8 	.word	0x080123e8
 800eb00:	08012420 	.word	0x08012420
 800eb04:	08012454 	.word	0x08012454
 800eb08:	200075ac 	.word	0x200075ac

0800eb0c <__libc_init_array>:
 800eb0c:	b570      	push	{r4, r5, r6, lr}
 800eb0e:	4d0d      	ldr	r5, [pc, #52]	; (800eb44 <__libc_init_array+0x38>)
 800eb10:	4c0d      	ldr	r4, [pc, #52]	; (800eb48 <__libc_init_array+0x3c>)
 800eb12:	1b64      	subs	r4, r4, r5
 800eb14:	10a4      	asrs	r4, r4, #2
 800eb16:	2600      	movs	r6, #0
 800eb18:	42a6      	cmp	r6, r4
 800eb1a:	d109      	bne.n	800eb30 <__libc_init_array+0x24>
 800eb1c:	4d0b      	ldr	r5, [pc, #44]	; (800eb4c <__libc_init_array+0x40>)
 800eb1e:	4c0c      	ldr	r4, [pc, #48]	; (800eb50 <__libc_init_array+0x44>)
 800eb20:	f001 f856 	bl	800fbd0 <_init>
 800eb24:	1b64      	subs	r4, r4, r5
 800eb26:	10a4      	asrs	r4, r4, #2
 800eb28:	2600      	movs	r6, #0
 800eb2a:	42a6      	cmp	r6, r4
 800eb2c:	d105      	bne.n	800eb3a <__libc_init_array+0x2e>
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb34:	4798      	blx	r3
 800eb36:	3601      	adds	r6, #1
 800eb38:	e7ee      	b.n	800eb18 <__libc_init_array+0xc>
 800eb3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb3e:	4798      	blx	r3
 800eb40:	3601      	adds	r6, #1
 800eb42:	e7f2      	b.n	800eb2a <__libc_init_array+0x1e>
 800eb44:	080126f0 	.word	0x080126f0
 800eb48:	080126f0 	.word	0x080126f0
 800eb4c:	080126f0 	.word	0x080126f0
 800eb50:	080126f4 	.word	0x080126f4

0800eb54 <memcmp>:
 800eb54:	b530      	push	{r4, r5, lr}
 800eb56:	3901      	subs	r1, #1
 800eb58:	2400      	movs	r4, #0
 800eb5a:	42a2      	cmp	r2, r4
 800eb5c:	d101      	bne.n	800eb62 <memcmp+0xe>
 800eb5e:	2000      	movs	r0, #0
 800eb60:	e005      	b.n	800eb6e <memcmp+0x1a>
 800eb62:	5d03      	ldrb	r3, [r0, r4]
 800eb64:	3401      	adds	r4, #1
 800eb66:	5d0d      	ldrb	r5, [r1, r4]
 800eb68:	42ab      	cmp	r3, r5
 800eb6a:	d0f6      	beq.n	800eb5a <memcmp+0x6>
 800eb6c:	1b58      	subs	r0, r3, r5
 800eb6e:	bd30      	pop	{r4, r5, pc}

0800eb70 <memcpy>:
 800eb70:	440a      	add	r2, r1
 800eb72:	4291      	cmp	r1, r2
 800eb74:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb78:	d100      	bne.n	800eb7c <memcpy+0xc>
 800eb7a:	4770      	bx	lr
 800eb7c:	b510      	push	{r4, lr}
 800eb7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb86:	4291      	cmp	r1, r2
 800eb88:	d1f9      	bne.n	800eb7e <memcpy+0xe>
 800eb8a:	bd10      	pop	{r4, pc}

0800eb8c <memset>:
 800eb8c:	4402      	add	r2, r0
 800eb8e:	4603      	mov	r3, r0
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d100      	bne.n	800eb96 <memset+0xa>
 800eb94:	4770      	bx	lr
 800eb96:	f803 1b01 	strb.w	r1, [r3], #1
 800eb9a:	e7f9      	b.n	800eb90 <memset+0x4>

0800eb9c <iprintf>:
 800eb9c:	b40f      	push	{r0, r1, r2, r3}
 800eb9e:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <iprintf+0x2c>)
 800eba0:	b513      	push	{r0, r1, r4, lr}
 800eba2:	681c      	ldr	r4, [r3, #0]
 800eba4:	b124      	cbz	r4, 800ebb0 <iprintf+0x14>
 800eba6:	69a3      	ldr	r3, [r4, #24]
 800eba8:	b913      	cbnz	r3, 800ebb0 <iprintf+0x14>
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f000 f8c4 	bl	800ed38 <__sinit>
 800ebb0:	ab05      	add	r3, sp, #20
 800ebb2:	9a04      	ldr	r2, [sp, #16]
 800ebb4:	68a1      	ldr	r1, [r4, #8]
 800ebb6:	9301      	str	r3, [sp, #4]
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f000 fa4b 	bl	800f054 <_vfiprintf_r>
 800ebbe:	b002      	add	sp, #8
 800ebc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebc4:	b004      	add	sp, #16
 800ebc6:	4770      	bx	lr
 800ebc8:	20000014 	.word	0x20000014

0800ebcc <rand>:
 800ebcc:	4b17      	ldr	r3, [pc, #92]	; (800ec2c <rand+0x60>)
 800ebce:	b510      	push	{r4, lr}
 800ebd0:	681c      	ldr	r4, [r3, #0]
 800ebd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ebd4:	b9b3      	cbnz	r3, 800ec04 <rand+0x38>
 800ebd6:	2018      	movs	r0, #24
 800ebd8:	f000 f960 	bl	800ee9c <malloc>
 800ebdc:	63a0      	str	r0, [r4, #56]	; 0x38
 800ebde:	b928      	cbnz	r0, 800ebec <rand+0x20>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	4b13      	ldr	r3, [pc, #76]	; (800ec30 <rand+0x64>)
 800ebe4:	4813      	ldr	r0, [pc, #76]	; (800ec34 <rand+0x68>)
 800ebe6:	214e      	movs	r1, #78	; 0x4e
 800ebe8:	f000 f830 	bl	800ec4c <__assert_func>
 800ebec:	4a12      	ldr	r2, [pc, #72]	; (800ec38 <rand+0x6c>)
 800ebee:	4b13      	ldr	r3, [pc, #76]	; (800ec3c <rand+0x70>)
 800ebf0:	e9c0 2300 	strd	r2, r3, [r0]
 800ebf4:	4b12      	ldr	r3, [pc, #72]	; (800ec40 <rand+0x74>)
 800ebf6:	6083      	str	r3, [r0, #8]
 800ebf8:	230b      	movs	r3, #11
 800ebfa:	8183      	strh	r3, [r0, #12]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	2300      	movs	r3, #0
 800ec00:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ec04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec06:	480f      	ldr	r0, [pc, #60]	; (800ec44 <rand+0x78>)
 800ec08:	690a      	ldr	r2, [r1, #16]
 800ec0a:	694b      	ldr	r3, [r1, #20]
 800ec0c:	4c0e      	ldr	r4, [pc, #56]	; (800ec48 <rand+0x7c>)
 800ec0e:	4350      	muls	r0, r2
 800ec10:	fb04 0003 	mla	r0, r4, r3, r0
 800ec14:	fba2 3404 	umull	r3, r4, r2, r4
 800ec18:	1c5a      	adds	r2, r3, #1
 800ec1a:	4404      	add	r4, r0
 800ec1c:	f144 0000 	adc.w	r0, r4, #0
 800ec20:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ec24:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ec28:	bd10      	pop	{r4, pc}
 800ec2a:	bf00      	nop
 800ec2c:	20000014 	.word	0x20000014
 800ec30:	080125a0 	.word	0x080125a0
 800ec34:	080125b7 	.word	0x080125b7
 800ec38:	abcd330e 	.word	0xabcd330e
 800ec3c:	e66d1234 	.word	0xe66d1234
 800ec40:	0005deec 	.word	0x0005deec
 800ec44:	5851f42d 	.word	0x5851f42d
 800ec48:	4c957f2d 	.word	0x4c957f2d

0800ec4c <__assert_func>:
 800ec4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec4e:	4614      	mov	r4, r2
 800ec50:	461a      	mov	r2, r3
 800ec52:	4b09      	ldr	r3, [pc, #36]	; (800ec78 <__assert_func+0x2c>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4605      	mov	r5, r0
 800ec58:	68d8      	ldr	r0, [r3, #12]
 800ec5a:	b14c      	cbz	r4, 800ec70 <__assert_func+0x24>
 800ec5c:	4b07      	ldr	r3, [pc, #28]	; (800ec7c <__assert_func+0x30>)
 800ec5e:	9100      	str	r1, [sp, #0]
 800ec60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ec64:	4906      	ldr	r1, [pc, #24]	; (800ec80 <__assert_func+0x34>)
 800ec66:	462b      	mov	r3, r5
 800ec68:	f000 f8e4 	bl	800ee34 <fiprintf>
 800ec6c:	f000 fddc 	bl	800f828 <abort>
 800ec70:	4b04      	ldr	r3, [pc, #16]	; (800ec84 <__assert_func+0x38>)
 800ec72:	461c      	mov	r4, r3
 800ec74:	e7f3      	b.n	800ec5e <__assert_func+0x12>
 800ec76:	bf00      	nop
 800ec78:	20000014 	.word	0x20000014
 800ec7c:	08012616 	.word	0x08012616
 800ec80:	08012623 	.word	0x08012623
 800ec84:	08012651 	.word	0x08012651

0800ec88 <std>:
 800ec88:	2300      	movs	r3, #0
 800ec8a:	b510      	push	{r4, lr}
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ec92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec96:	6083      	str	r3, [r0, #8]
 800ec98:	8181      	strh	r1, [r0, #12]
 800ec9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ec9c:	81c2      	strh	r2, [r0, #14]
 800ec9e:	6183      	str	r3, [r0, #24]
 800eca0:	4619      	mov	r1, r3
 800eca2:	2208      	movs	r2, #8
 800eca4:	305c      	adds	r0, #92	; 0x5c
 800eca6:	f7ff ff71 	bl	800eb8c <memset>
 800ecaa:	4b05      	ldr	r3, [pc, #20]	; (800ecc0 <std+0x38>)
 800ecac:	6263      	str	r3, [r4, #36]	; 0x24
 800ecae:	4b05      	ldr	r3, [pc, #20]	; (800ecc4 <std+0x3c>)
 800ecb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ecb2:	4b05      	ldr	r3, [pc, #20]	; (800ecc8 <std+0x40>)
 800ecb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ecb6:	4b05      	ldr	r3, [pc, #20]	; (800eccc <std+0x44>)
 800ecb8:	6224      	str	r4, [r4, #32]
 800ecba:	6323      	str	r3, [r4, #48]	; 0x30
 800ecbc:	bd10      	pop	{r4, pc}
 800ecbe:	bf00      	nop
 800ecc0:	0800f5fd 	.word	0x0800f5fd
 800ecc4:	0800f61f 	.word	0x0800f61f
 800ecc8:	0800f657 	.word	0x0800f657
 800eccc:	0800f67b 	.word	0x0800f67b

0800ecd0 <_cleanup_r>:
 800ecd0:	4901      	ldr	r1, [pc, #4]	; (800ecd8 <_cleanup_r+0x8>)
 800ecd2:	f000 b8c1 	b.w	800ee58 <_fwalk_reent>
 800ecd6:	bf00      	nop
 800ecd8:	0800f965 	.word	0x0800f965

0800ecdc <__sfmoreglue>:
 800ecdc:	b570      	push	{r4, r5, r6, lr}
 800ecde:	1e4a      	subs	r2, r1, #1
 800ece0:	2568      	movs	r5, #104	; 0x68
 800ece2:	4355      	muls	r5, r2
 800ece4:	460e      	mov	r6, r1
 800ece6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ecea:	f000 f92f 	bl	800ef4c <_malloc_r>
 800ecee:	4604      	mov	r4, r0
 800ecf0:	b140      	cbz	r0, 800ed04 <__sfmoreglue+0x28>
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	e9c0 1600 	strd	r1, r6, [r0]
 800ecf8:	300c      	adds	r0, #12
 800ecfa:	60a0      	str	r0, [r4, #8]
 800ecfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed00:	f7ff ff44 	bl	800eb8c <memset>
 800ed04:	4620      	mov	r0, r4
 800ed06:	bd70      	pop	{r4, r5, r6, pc}

0800ed08 <__sfp_lock_acquire>:
 800ed08:	4801      	ldr	r0, [pc, #4]	; (800ed10 <__sfp_lock_acquire+0x8>)
 800ed0a:	f000 b8c5 	b.w	800ee98 <__retarget_lock_acquire_recursive>
 800ed0e:	bf00      	nop
 800ed10:	200076b0 	.word	0x200076b0

0800ed14 <__sfp_lock_release>:
 800ed14:	4801      	ldr	r0, [pc, #4]	; (800ed1c <__sfp_lock_release+0x8>)
 800ed16:	f000 b8c0 	b.w	800ee9a <__retarget_lock_release_recursive>
 800ed1a:	bf00      	nop
 800ed1c:	200076b0 	.word	0x200076b0

0800ed20 <__sinit_lock_acquire>:
 800ed20:	4801      	ldr	r0, [pc, #4]	; (800ed28 <__sinit_lock_acquire+0x8>)
 800ed22:	f000 b8b9 	b.w	800ee98 <__retarget_lock_acquire_recursive>
 800ed26:	bf00      	nop
 800ed28:	200076ab 	.word	0x200076ab

0800ed2c <__sinit_lock_release>:
 800ed2c:	4801      	ldr	r0, [pc, #4]	; (800ed34 <__sinit_lock_release+0x8>)
 800ed2e:	f000 b8b4 	b.w	800ee9a <__retarget_lock_release_recursive>
 800ed32:	bf00      	nop
 800ed34:	200076ab 	.word	0x200076ab

0800ed38 <__sinit>:
 800ed38:	b510      	push	{r4, lr}
 800ed3a:	4604      	mov	r4, r0
 800ed3c:	f7ff fff0 	bl	800ed20 <__sinit_lock_acquire>
 800ed40:	69a3      	ldr	r3, [r4, #24]
 800ed42:	b11b      	cbz	r3, 800ed4c <__sinit+0x14>
 800ed44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed48:	f7ff bff0 	b.w	800ed2c <__sinit_lock_release>
 800ed4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ed50:	6523      	str	r3, [r4, #80]	; 0x50
 800ed52:	4b13      	ldr	r3, [pc, #76]	; (800eda0 <__sinit+0x68>)
 800ed54:	4a13      	ldr	r2, [pc, #76]	; (800eda4 <__sinit+0x6c>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	62a2      	str	r2, [r4, #40]	; 0x28
 800ed5a:	42a3      	cmp	r3, r4
 800ed5c:	bf04      	itt	eq
 800ed5e:	2301      	moveq	r3, #1
 800ed60:	61a3      	streq	r3, [r4, #24]
 800ed62:	4620      	mov	r0, r4
 800ed64:	f000 f820 	bl	800eda8 <__sfp>
 800ed68:	6060      	str	r0, [r4, #4]
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f000 f81c 	bl	800eda8 <__sfp>
 800ed70:	60a0      	str	r0, [r4, #8]
 800ed72:	4620      	mov	r0, r4
 800ed74:	f000 f818 	bl	800eda8 <__sfp>
 800ed78:	2200      	movs	r2, #0
 800ed7a:	60e0      	str	r0, [r4, #12]
 800ed7c:	2104      	movs	r1, #4
 800ed7e:	6860      	ldr	r0, [r4, #4]
 800ed80:	f7ff ff82 	bl	800ec88 <std>
 800ed84:	68a0      	ldr	r0, [r4, #8]
 800ed86:	2201      	movs	r2, #1
 800ed88:	2109      	movs	r1, #9
 800ed8a:	f7ff ff7d 	bl	800ec88 <std>
 800ed8e:	68e0      	ldr	r0, [r4, #12]
 800ed90:	2202      	movs	r2, #2
 800ed92:	2112      	movs	r1, #18
 800ed94:	f7ff ff78 	bl	800ec88 <std>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	61a3      	str	r3, [r4, #24]
 800ed9c:	e7d2      	b.n	800ed44 <__sinit+0xc>
 800ed9e:	bf00      	nop
 800eda0:	0801259c 	.word	0x0801259c
 800eda4:	0800ecd1 	.word	0x0800ecd1

0800eda8 <__sfp>:
 800eda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edaa:	4607      	mov	r7, r0
 800edac:	f7ff ffac 	bl	800ed08 <__sfp_lock_acquire>
 800edb0:	4b1e      	ldr	r3, [pc, #120]	; (800ee2c <__sfp+0x84>)
 800edb2:	681e      	ldr	r6, [r3, #0]
 800edb4:	69b3      	ldr	r3, [r6, #24]
 800edb6:	b913      	cbnz	r3, 800edbe <__sfp+0x16>
 800edb8:	4630      	mov	r0, r6
 800edba:	f7ff ffbd 	bl	800ed38 <__sinit>
 800edbe:	3648      	adds	r6, #72	; 0x48
 800edc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800edc4:	3b01      	subs	r3, #1
 800edc6:	d503      	bpl.n	800edd0 <__sfp+0x28>
 800edc8:	6833      	ldr	r3, [r6, #0]
 800edca:	b30b      	cbz	r3, 800ee10 <__sfp+0x68>
 800edcc:	6836      	ldr	r6, [r6, #0]
 800edce:	e7f7      	b.n	800edc0 <__sfp+0x18>
 800edd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800edd4:	b9d5      	cbnz	r5, 800ee0c <__sfp+0x64>
 800edd6:	4b16      	ldr	r3, [pc, #88]	; (800ee30 <__sfp+0x88>)
 800edd8:	60e3      	str	r3, [r4, #12]
 800edda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800edde:	6665      	str	r5, [r4, #100]	; 0x64
 800ede0:	f000 f859 	bl	800ee96 <__retarget_lock_init_recursive>
 800ede4:	f7ff ff96 	bl	800ed14 <__sfp_lock_release>
 800ede8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800edec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800edf0:	6025      	str	r5, [r4, #0]
 800edf2:	61a5      	str	r5, [r4, #24]
 800edf4:	2208      	movs	r2, #8
 800edf6:	4629      	mov	r1, r5
 800edf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800edfc:	f7ff fec6 	bl	800eb8c <memset>
 800ee00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee08:	4620      	mov	r0, r4
 800ee0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee0c:	3468      	adds	r4, #104	; 0x68
 800ee0e:	e7d9      	b.n	800edc4 <__sfp+0x1c>
 800ee10:	2104      	movs	r1, #4
 800ee12:	4638      	mov	r0, r7
 800ee14:	f7ff ff62 	bl	800ecdc <__sfmoreglue>
 800ee18:	4604      	mov	r4, r0
 800ee1a:	6030      	str	r0, [r6, #0]
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d1d5      	bne.n	800edcc <__sfp+0x24>
 800ee20:	f7ff ff78 	bl	800ed14 <__sfp_lock_release>
 800ee24:	230c      	movs	r3, #12
 800ee26:	603b      	str	r3, [r7, #0]
 800ee28:	e7ee      	b.n	800ee08 <__sfp+0x60>
 800ee2a:	bf00      	nop
 800ee2c:	0801259c 	.word	0x0801259c
 800ee30:	ffff0001 	.word	0xffff0001

0800ee34 <fiprintf>:
 800ee34:	b40e      	push	{r1, r2, r3}
 800ee36:	b503      	push	{r0, r1, lr}
 800ee38:	4601      	mov	r1, r0
 800ee3a:	ab03      	add	r3, sp, #12
 800ee3c:	4805      	ldr	r0, [pc, #20]	; (800ee54 <fiprintf+0x20>)
 800ee3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee42:	6800      	ldr	r0, [r0, #0]
 800ee44:	9301      	str	r3, [sp, #4]
 800ee46:	f000 f905 	bl	800f054 <_vfiprintf_r>
 800ee4a:	b002      	add	sp, #8
 800ee4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee50:	b003      	add	sp, #12
 800ee52:	4770      	bx	lr
 800ee54:	20000014 	.word	0x20000014

0800ee58 <_fwalk_reent>:
 800ee58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	4688      	mov	r8, r1
 800ee60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee64:	2700      	movs	r7, #0
 800ee66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee6a:	f1b9 0901 	subs.w	r9, r9, #1
 800ee6e:	d505      	bpl.n	800ee7c <_fwalk_reent+0x24>
 800ee70:	6824      	ldr	r4, [r4, #0]
 800ee72:	2c00      	cmp	r4, #0
 800ee74:	d1f7      	bne.n	800ee66 <_fwalk_reent+0xe>
 800ee76:	4638      	mov	r0, r7
 800ee78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee7c:	89ab      	ldrh	r3, [r5, #12]
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d907      	bls.n	800ee92 <_fwalk_reent+0x3a>
 800ee82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee86:	3301      	adds	r3, #1
 800ee88:	d003      	beq.n	800ee92 <_fwalk_reent+0x3a>
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	47c0      	blx	r8
 800ee90:	4307      	orrs	r7, r0
 800ee92:	3568      	adds	r5, #104	; 0x68
 800ee94:	e7e9      	b.n	800ee6a <_fwalk_reent+0x12>

0800ee96 <__retarget_lock_init_recursive>:
 800ee96:	4770      	bx	lr

0800ee98 <__retarget_lock_acquire_recursive>:
 800ee98:	4770      	bx	lr

0800ee9a <__retarget_lock_release_recursive>:
 800ee9a:	4770      	bx	lr

0800ee9c <malloc>:
 800ee9c:	4b02      	ldr	r3, [pc, #8]	; (800eea8 <malloc+0xc>)
 800ee9e:	4601      	mov	r1, r0
 800eea0:	6818      	ldr	r0, [r3, #0]
 800eea2:	f000 b853 	b.w	800ef4c <_malloc_r>
 800eea6:	bf00      	nop
 800eea8:	20000014 	.word	0x20000014

0800eeac <_free_r>:
 800eeac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeae:	2900      	cmp	r1, #0
 800eeb0:	d048      	beq.n	800ef44 <_free_r+0x98>
 800eeb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeb6:	9001      	str	r0, [sp, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f1a1 0404 	sub.w	r4, r1, #4
 800eebe:	bfb8      	it	lt
 800eec0:	18e4      	addlt	r4, r4, r3
 800eec2:	f000 fe01 	bl	800fac8 <__malloc_lock>
 800eec6:	4a20      	ldr	r2, [pc, #128]	; (800ef48 <_free_r+0x9c>)
 800eec8:	9801      	ldr	r0, [sp, #4]
 800eeca:	6813      	ldr	r3, [r2, #0]
 800eecc:	4615      	mov	r5, r2
 800eece:	b933      	cbnz	r3, 800eede <_free_r+0x32>
 800eed0:	6063      	str	r3, [r4, #4]
 800eed2:	6014      	str	r4, [r2, #0]
 800eed4:	b003      	add	sp, #12
 800eed6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eeda:	f000 bdfb 	b.w	800fad4 <__malloc_unlock>
 800eede:	42a3      	cmp	r3, r4
 800eee0:	d90b      	bls.n	800eefa <_free_r+0x4e>
 800eee2:	6821      	ldr	r1, [r4, #0]
 800eee4:	1862      	adds	r2, r4, r1
 800eee6:	4293      	cmp	r3, r2
 800eee8:	bf04      	itt	eq
 800eeea:	681a      	ldreq	r2, [r3, #0]
 800eeec:	685b      	ldreq	r3, [r3, #4]
 800eeee:	6063      	str	r3, [r4, #4]
 800eef0:	bf04      	itt	eq
 800eef2:	1852      	addeq	r2, r2, r1
 800eef4:	6022      	streq	r2, [r4, #0]
 800eef6:	602c      	str	r4, [r5, #0]
 800eef8:	e7ec      	b.n	800eed4 <_free_r+0x28>
 800eefa:	461a      	mov	r2, r3
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	b10b      	cbz	r3, 800ef04 <_free_r+0x58>
 800ef00:	42a3      	cmp	r3, r4
 800ef02:	d9fa      	bls.n	800eefa <_free_r+0x4e>
 800ef04:	6811      	ldr	r1, [r2, #0]
 800ef06:	1855      	adds	r5, r2, r1
 800ef08:	42a5      	cmp	r5, r4
 800ef0a:	d10b      	bne.n	800ef24 <_free_r+0x78>
 800ef0c:	6824      	ldr	r4, [r4, #0]
 800ef0e:	4421      	add	r1, r4
 800ef10:	1854      	adds	r4, r2, r1
 800ef12:	42a3      	cmp	r3, r4
 800ef14:	6011      	str	r1, [r2, #0]
 800ef16:	d1dd      	bne.n	800eed4 <_free_r+0x28>
 800ef18:	681c      	ldr	r4, [r3, #0]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	6053      	str	r3, [r2, #4]
 800ef1e:	4421      	add	r1, r4
 800ef20:	6011      	str	r1, [r2, #0]
 800ef22:	e7d7      	b.n	800eed4 <_free_r+0x28>
 800ef24:	d902      	bls.n	800ef2c <_free_r+0x80>
 800ef26:	230c      	movs	r3, #12
 800ef28:	6003      	str	r3, [r0, #0]
 800ef2a:	e7d3      	b.n	800eed4 <_free_r+0x28>
 800ef2c:	6825      	ldr	r5, [r4, #0]
 800ef2e:	1961      	adds	r1, r4, r5
 800ef30:	428b      	cmp	r3, r1
 800ef32:	bf04      	itt	eq
 800ef34:	6819      	ldreq	r1, [r3, #0]
 800ef36:	685b      	ldreq	r3, [r3, #4]
 800ef38:	6063      	str	r3, [r4, #4]
 800ef3a:	bf04      	itt	eq
 800ef3c:	1949      	addeq	r1, r1, r5
 800ef3e:	6021      	streq	r1, [r4, #0]
 800ef40:	6054      	str	r4, [r2, #4]
 800ef42:	e7c7      	b.n	800eed4 <_free_r+0x28>
 800ef44:	b003      	add	sp, #12
 800ef46:	bd30      	pop	{r4, r5, pc}
 800ef48:	20000274 	.word	0x20000274

0800ef4c <_malloc_r>:
 800ef4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4e:	1ccd      	adds	r5, r1, #3
 800ef50:	f025 0503 	bic.w	r5, r5, #3
 800ef54:	3508      	adds	r5, #8
 800ef56:	2d0c      	cmp	r5, #12
 800ef58:	bf38      	it	cc
 800ef5a:	250c      	movcc	r5, #12
 800ef5c:	2d00      	cmp	r5, #0
 800ef5e:	4606      	mov	r6, r0
 800ef60:	db01      	blt.n	800ef66 <_malloc_r+0x1a>
 800ef62:	42a9      	cmp	r1, r5
 800ef64:	d903      	bls.n	800ef6e <_malloc_r+0x22>
 800ef66:	230c      	movs	r3, #12
 800ef68:	6033      	str	r3, [r6, #0]
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef6e:	f000 fdab 	bl	800fac8 <__malloc_lock>
 800ef72:	4921      	ldr	r1, [pc, #132]	; (800eff8 <_malloc_r+0xac>)
 800ef74:	680a      	ldr	r2, [r1, #0]
 800ef76:	4614      	mov	r4, r2
 800ef78:	b99c      	cbnz	r4, 800efa2 <_malloc_r+0x56>
 800ef7a:	4f20      	ldr	r7, [pc, #128]	; (800effc <_malloc_r+0xb0>)
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	b923      	cbnz	r3, 800ef8a <_malloc_r+0x3e>
 800ef80:	4621      	mov	r1, r4
 800ef82:	4630      	mov	r0, r6
 800ef84:	f000 fb2a 	bl	800f5dc <_sbrk_r>
 800ef88:	6038      	str	r0, [r7, #0]
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	4630      	mov	r0, r6
 800ef8e:	f000 fb25 	bl	800f5dc <_sbrk_r>
 800ef92:	1c43      	adds	r3, r0, #1
 800ef94:	d123      	bne.n	800efde <_malloc_r+0x92>
 800ef96:	230c      	movs	r3, #12
 800ef98:	6033      	str	r3, [r6, #0]
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f000 fd9a 	bl	800fad4 <__malloc_unlock>
 800efa0:	e7e3      	b.n	800ef6a <_malloc_r+0x1e>
 800efa2:	6823      	ldr	r3, [r4, #0]
 800efa4:	1b5b      	subs	r3, r3, r5
 800efa6:	d417      	bmi.n	800efd8 <_malloc_r+0x8c>
 800efa8:	2b0b      	cmp	r3, #11
 800efaa:	d903      	bls.n	800efb4 <_malloc_r+0x68>
 800efac:	6023      	str	r3, [r4, #0]
 800efae:	441c      	add	r4, r3
 800efb0:	6025      	str	r5, [r4, #0]
 800efb2:	e004      	b.n	800efbe <_malloc_r+0x72>
 800efb4:	6863      	ldr	r3, [r4, #4]
 800efb6:	42a2      	cmp	r2, r4
 800efb8:	bf0c      	ite	eq
 800efba:	600b      	streq	r3, [r1, #0]
 800efbc:	6053      	strne	r3, [r2, #4]
 800efbe:	4630      	mov	r0, r6
 800efc0:	f000 fd88 	bl	800fad4 <__malloc_unlock>
 800efc4:	f104 000b 	add.w	r0, r4, #11
 800efc8:	1d23      	adds	r3, r4, #4
 800efca:	f020 0007 	bic.w	r0, r0, #7
 800efce:	1ac2      	subs	r2, r0, r3
 800efd0:	d0cc      	beq.n	800ef6c <_malloc_r+0x20>
 800efd2:	1a1b      	subs	r3, r3, r0
 800efd4:	50a3      	str	r3, [r4, r2]
 800efd6:	e7c9      	b.n	800ef6c <_malloc_r+0x20>
 800efd8:	4622      	mov	r2, r4
 800efda:	6864      	ldr	r4, [r4, #4]
 800efdc:	e7cc      	b.n	800ef78 <_malloc_r+0x2c>
 800efde:	1cc4      	adds	r4, r0, #3
 800efe0:	f024 0403 	bic.w	r4, r4, #3
 800efe4:	42a0      	cmp	r0, r4
 800efe6:	d0e3      	beq.n	800efb0 <_malloc_r+0x64>
 800efe8:	1a21      	subs	r1, r4, r0
 800efea:	4630      	mov	r0, r6
 800efec:	f000 faf6 	bl	800f5dc <_sbrk_r>
 800eff0:	3001      	adds	r0, #1
 800eff2:	d1dd      	bne.n	800efb0 <_malloc_r+0x64>
 800eff4:	e7cf      	b.n	800ef96 <_malloc_r+0x4a>
 800eff6:	bf00      	nop
 800eff8:	20000274 	.word	0x20000274
 800effc:	20000278 	.word	0x20000278

0800f000 <__sfputc_r>:
 800f000:	6893      	ldr	r3, [r2, #8]
 800f002:	3b01      	subs	r3, #1
 800f004:	2b00      	cmp	r3, #0
 800f006:	b410      	push	{r4}
 800f008:	6093      	str	r3, [r2, #8]
 800f00a:	da08      	bge.n	800f01e <__sfputc_r+0x1e>
 800f00c:	6994      	ldr	r4, [r2, #24]
 800f00e:	42a3      	cmp	r3, r4
 800f010:	db01      	blt.n	800f016 <__sfputc_r+0x16>
 800f012:	290a      	cmp	r1, #10
 800f014:	d103      	bne.n	800f01e <__sfputc_r+0x1e>
 800f016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f01a:	f000 bb33 	b.w	800f684 <__swbuf_r>
 800f01e:	6813      	ldr	r3, [r2, #0]
 800f020:	1c58      	adds	r0, r3, #1
 800f022:	6010      	str	r0, [r2, #0]
 800f024:	7019      	strb	r1, [r3, #0]
 800f026:	4608      	mov	r0, r1
 800f028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f02c:	4770      	bx	lr

0800f02e <__sfputs_r>:
 800f02e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f030:	4606      	mov	r6, r0
 800f032:	460f      	mov	r7, r1
 800f034:	4614      	mov	r4, r2
 800f036:	18d5      	adds	r5, r2, r3
 800f038:	42ac      	cmp	r4, r5
 800f03a:	d101      	bne.n	800f040 <__sfputs_r+0x12>
 800f03c:	2000      	movs	r0, #0
 800f03e:	e007      	b.n	800f050 <__sfputs_r+0x22>
 800f040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f044:	463a      	mov	r2, r7
 800f046:	4630      	mov	r0, r6
 800f048:	f7ff ffda 	bl	800f000 <__sfputc_r>
 800f04c:	1c43      	adds	r3, r0, #1
 800f04e:	d1f3      	bne.n	800f038 <__sfputs_r+0xa>
 800f050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f054 <_vfiprintf_r>:
 800f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f058:	460d      	mov	r5, r1
 800f05a:	b09d      	sub	sp, #116	; 0x74
 800f05c:	4614      	mov	r4, r2
 800f05e:	4698      	mov	r8, r3
 800f060:	4606      	mov	r6, r0
 800f062:	b118      	cbz	r0, 800f06c <_vfiprintf_r+0x18>
 800f064:	6983      	ldr	r3, [r0, #24]
 800f066:	b90b      	cbnz	r3, 800f06c <_vfiprintf_r+0x18>
 800f068:	f7ff fe66 	bl	800ed38 <__sinit>
 800f06c:	4b89      	ldr	r3, [pc, #548]	; (800f294 <_vfiprintf_r+0x240>)
 800f06e:	429d      	cmp	r5, r3
 800f070:	d11b      	bne.n	800f0aa <_vfiprintf_r+0x56>
 800f072:	6875      	ldr	r5, [r6, #4]
 800f074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f076:	07d9      	lsls	r1, r3, #31
 800f078:	d405      	bmi.n	800f086 <_vfiprintf_r+0x32>
 800f07a:	89ab      	ldrh	r3, [r5, #12]
 800f07c:	059a      	lsls	r2, r3, #22
 800f07e:	d402      	bmi.n	800f086 <_vfiprintf_r+0x32>
 800f080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f082:	f7ff ff09 	bl	800ee98 <__retarget_lock_acquire_recursive>
 800f086:	89ab      	ldrh	r3, [r5, #12]
 800f088:	071b      	lsls	r3, r3, #28
 800f08a:	d501      	bpl.n	800f090 <_vfiprintf_r+0x3c>
 800f08c:	692b      	ldr	r3, [r5, #16]
 800f08e:	b9eb      	cbnz	r3, 800f0cc <_vfiprintf_r+0x78>
 800f090:	4629      	mov	r1, r5
 800f092:	4630      	mov	r0, r6
 800f094:	f000 fb5a 	bl	800f74c <__swsetup_r>
 800f098:	b1c0      	cbz	r0, 800f0cc <_vfiprintf_r+0x78>
 800f09a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f09c:	07dc      	lsls	r4, r3, #31
 800f09e:	d50e      	bpl.n	800f0be <_vfiprintf_r+0x6a>
 800f0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a4:	b01d      	add	sp, #116	; 0x74
 800f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0aa:	4b7b      	ldr	r3, [pc, #492]	; (800f298 <_vfiprintf_r+0x244>)
 800f0ac:	429d      	cmp	r5, r3
 800f0ae:	d101      	bne.n	800f0b4 <_vfiprintf_r+0x60>
 800f0b0:	68b5      	ldr	r5, [r6, #8]
 800f0b2:	e7df      	b.n	800f074 <_vfiprintf_r+0x20>
 800f0b4:	4b79      	ldr	r3, [pc, #484]	; (800f29c <_vfiprintf_r+0x248>)
 800f0b6:	429d      	cmp	r5, r3
 800f0b8:	bf08      	it	eq
 800f0ba:	68f5      	ldreq	r5, [r6, #12]
 800f0bc:	e7da      	b.n	800f074 <_vfiprintf_r+0x20>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	0598      	lsls	r0, r3, #22
 800f0c2:	d4ed      	bmi.n	800f0a0 <_vfiprintf_r+0x4c>
 800f0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0c6:	f7ff fee8 	bl	800ee9a <__retarget_lock_release_recursive>
 800f0ca:	e7e9      	b.n	800f0a0 <_vfiprintf_r+0x4c>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f0d0:	2320      	movs	r3, #32
 800f0d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0da:	2330      	movs	r3, #48	; 0x30
 800f0dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2a0 <_vfiprintf_r+0x24c>
 800f0e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0e4:	f04f 0901 	mov.w	r9, #1
 800f0e8:	4623      	mov	r3, r4
 800f0ea:	469a      	mov	sl, r3
 800f0ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0f0:	b10a      	cbz	r2, 800f0f6 <_vfiprintf_r+0xa2>
 800f0f2:	2a25      	cmp	r2, #37	; 0x25
 800f0f4:	d1f9      	bne.n	800f0ea <_vfiprintf_r+0x96>
 800f0f6:	ebba 0b04 	subs.w	fp, sl, r4
 800f0fa:	d00b      	beq.n	800f114 <_vfiprintf_r+0xc0>
 800f0fc:	465b      	mov	r3, fp
 800f0fe:	4622      	mov	r2, r4
 800f100:	4629      	mov	r1, r5
 800f102:	4630      	mov	r0, r6
 800f104:	f7ff ff93 	bl	800f02e <__sfputs_r>
 800f108:	3001      	adds	r0, #1
 800f10a:	f000 80aa 	beq.w	800f262 <_vfiprintf_r+0x20e>
 800f10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f110:	445a      	add	r2, fp
 800f112:	9209      	str	r2, [sp, #36]	; 0x24
 800f114:	f89a 3000 	ldrb.w	r3, [sl]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 80a2 	beq.w	800f262 <_vfiprintf_r+0x20e>
 800f11e:	2300      	movs	r3, #0
 800f120:	f04f 32ff 	mov.w	r2, #4294967295
 800f124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f128:	f10a 0a01 	add.w	sl, sl, #1
 800f12c:	9304      	str	r3, [sp, #16]
 800f12e:	9307      	str	r3, [sp, #28]
 800f130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f134:	931a      	str	r3, [sp, #104]	; 0x68
 800f136:	4654      	mov	r4, sl
 800f138:	2205      	movs	r2, #5
 800f13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f13e:	4858      	ldr	r0, [pc, #352]	; (800f2a0 <_vfiprintf_r+0x24c>)
 800f140:	f7f1 f87e 	bl	8000240 <memchr>
 800f144:	9a04      	ldr	r2, [sp, #16]
 800f146:	b9d8      	cbnz	r0, 800f180 <_vfiprintf_r+0x12c>
 800f148:	06d1      	lsls	r1, r2, #27
 800f14a:	bf44      	itt	mi
 800f14c:	2320      	movmi	r3, #32
 800f14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f152:	0713      	lsls	r3, r2, #28
 800f154:	bf44      	itt	mi
 800f156:	232b      	movmi	r3, #43	; 0x2b
 800f158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f15c:	f89a 3000 	ldrb.w	r3, [sl]
 800f160:	2b2a      	cmp	r3, #42	; 0x2a
 800f162:	d015      	beq.n	800f190 <_vfiprintf_r+0x13c>
 800f164:	9a07      	ldr	r2, [sp, #28]
 800f166:	4654      	mov	r4, sl
 800f168:	2000      	movs	r0, #0
 800f16a:	f04f 0c0a 	mov.w	ip, #10
 800f16e:	4621      	mov	r1, r4
 800f170:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f174:	3b30      	subs	r3, #48	; 0x30
 800f176:	2b09      	cmp	r3, #9
 800f178:	d94e      	bls.n	800f218 <_vfiprintf_r+0x1c4>
 800f17a:	b1b0      	cbz	r0, 800f1aa <_vfiprintf_r+0x156>
 800f17c:	9207      	str	r2, [sp, #28]
 800f17e:	e014      	b.n	800f1aa <_vfiprintf_r+0x156>
 800f180:	eba0 0308 	sub.w	r3, r0, r8
 800f184:	fa09 f303 	lsl.w	r3, r9, r3
 800f188:	4313      	orrs	r3, r2
 800f18a:	9304      	str	r3, [sp, #16]
 800f18c:	46a2      	mov	sl, r4
 800f18e:	e7d2      	b.n	800f136 <_vfiprintf_r+0xe2>
 800f190:	9b03      	ldr	r3, [sp, #12]
 800f192:	1d19      	adds	r1, r3, #4
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	9103      	str	r1, [sp, #12]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	bfbb      	ittet	lt
 800f19c:	425b      	neglt	r3, r3
 800f19e:	f042 0202 	orrlt.w	r2, r2, #2
 800f1a2:	9307      	strge	r3, [sp, #28]
 800f1a4:	9307      	strlt	r3, [sp, #28]
 800f1a6:	bfb8      	it	lt
 800f1a8:	9204      	strlt	r2, [sp, #16]
 800f1aa:	7823      	ldrb	r3, [r4, #0]
 800f1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ae:	d10c      	bne.n	800f1ca <_vfiprintf_r+0x176>
 800f1b0:	7863      	ldrb	r3, [r4, #1]
 800f1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f1b4:	d135      	bne.n	800f222 <_vfiprintf_r+0x1ce>
 800f1b6:	9b03      	ldr	r3, [sp, #12]
 800f1b8:	1d1a      	adds	r2, r3, #4
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	9203      	str	r2, [sp, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	bfb8      	it	lt
 800f1c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800f1c6:	3402      	adds	r4, #2
 800f1c8:	9305      	str	r3, [sp, #20]
 800f1ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2b0 <_vfiprintf_r+0x25c>
 800f1ce:	7821      	ldrb	r1, [r4, #0]
 800f1d0:	2203      	movs	r2, #3
 800f1d2:	4650      	mov	r0, sl
 800f1d4:	f7f1 f834 	bl	8000240 <memchr>
 800f1d8:	b140      	cbz	r0, 800f1ec <_vfiprintf_r+0x198>
 800f1da:	2340      	movs	r3, #64	; 0x40
 800f1dc:	eba0 000a 	sub.w	r0, r0, sl
 800f1e0:	fa03 f000 	lsl.w	r0, r3, r0
 800f1e4:	9b04      	ldr	r3, [sp, #16]
 800f1e6:	4303      	orrs	r3, r0
 800f1e8:	3401      	adds	r4, #1
 800f1ea:	9304      	str	r3, [sp, #16]
 800f1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f0:	482c      	ldr	r0, [pc, #176]	; (800f2a4 <_vfiprintf_r+0x250>)
 800f1f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1f6:	2206      	movs	r2, #6
 800f1f8:	f7f1 f822 	bl	8000240 <memchr>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d03f      	beq.n	800f280 <_vfiprintf_r+0x22c>
 800f200:	4b29      	ldr	r3, [pc, #164]	; (800f2a8 <_vfiprintf_r+0x254>)
 800f202:	bb1b      	cbnz	r3, 800f24c <_vfiprintf_r+0x1f8>
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	3307      	adds	r3, #7
 800f208:	f023 0307 	bic.w	r3, r3, #7
 800f20c:	3308      	adds	r3, #8
 800f20e:	9303      	str	r3, [sp, #12]
 800f210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f212:	443b      	add	r3, r7
 800f214:	9309      	str	r3, [sp, #36]	; 0x24
 800f216:	e767      	b.n	800f0e8 <_vfiprintf_r+0x94>
 800f218:	fb0c 3202 	mla	r2, ip, r2, r3
 800f21c:	460c      	mov	r4, r1
 800f21e:	2001      	movs	r0, #1
 800f220:	e7a5      	b.n	800f16e <_vfiprintf_r+0x11a>
 800f222:	2300      	movs	r3, #0
 800f224:	3401      	adds	r4, #1
 800f226:	9305      	str	r3, [sp, #20]
 800f228:	4619      	mov	r1, r3
 800f22a:	f04f 0c0a 	mov.w	ip, #10
 800f22e:	4620      	mov	r0, r4
 800f230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f234:	3a30      	subs	r2, #48	; 0x30
 800f236:	2a09      	cmp	r2, #9
 800f238:	d903      	bls.n	800f242 <_vfiprintf_r+0x1ee>
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0c5      	beq.n	800f1ca <_vfiprintf_r+0x176>
 800f23e:	9105      	str	r1, [sp, #20]
 800f240:	e7c3      	b.n	800f1ca <_vfiprintf_r+0x176>
 800f242:	fb0c 2101 	mla	r1, ip, r1, r2
 800f246:	4604      	mov	r4, r0
 800f248:	2301      	movs	r3, #1
 800f24a:	e7f0      	b.n	800f22e <_vfiprintf_r+0x1da>
 800f24c:	ab03      	add	r3, sp, #12
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	462a      	mov	r2, r5
 800f252:	4b16      	ldr	r3, [pc, #88]	; (800f2ac <_vfiprintf_r+0x258>)
 800f254:	a904      	add	r1, sp, #16
 800f256:	4630      	mov	r0, r6
 800f258:	f3af 8000 	nop.w
 800f25c:	4607      	mov	r7, r0
 800f25e:	1c78      	adds	r0, r7, #1
 800f260:	d1d6      	bne.n	800f210 <_vfiprintf_r+0x1bc>
 800f262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f264:	07d9      	lsls	r1, r3, #31
 800f266:	d405      	bmi.n	800f274 <_vfiprintf_r+0x220>
 800f268:	89ab      	ldrh	r3, [r5, #12]
 800f26a:	059a      	lsls	r2, r3, #22
 800f26c:	d402      	bmi.n	800f274 <_vfiprintf_r+0x220>
 800f26e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f270:	f7ff fe13 	bl	800ee9a <__retarget_lock_release_recursive>
 800f274:	89ab      	ldrh	r3, [r5, #12]
 800f276:	065b      	lsls	r3, r3, #25
 800f278:	f53f af12 	bmi.w	800f0a0 <_vfiprintf_r+0x4c>
 800f27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f27e:	e711      	b.n	800f0a4 <_vfiprintf_r+0x50>
 800f280:	ab03      	add	r3, sp, #12
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	462a      	mov	r2, r5
 800f286:	4b09      	ldr	r3, [pc, #36]	; (800f2ac <_vfiprintf_r+0x258>)
 800f288:	a904      	add	r1, sp, #16
 800f28a:	4630      	mov	r0, r6
 800f28c:	f000 f880 	bl	800f390 <_printf_i>
 800f290:	e7e4      	b.n	800f25c <_vfiprintf_r+0x208>
 800f292:	bf00      	nop
 800f294:	08012674 	.word	0x08012674
 800f298:	08012694 	.word	0x08012694
 800f29c:	08012654 	.word	0x08012654
 800f2a0:	080126b4 	.word	0x080126b4
 800f2a4:	080126be 	.word	0x080126be
 800f2a8:	00000000 	.word	0x00000000
 800f2ac:	0800f02f 	.word	0x0800f02f
 800f2b0:	080126ba 	.word	0x080126ba

0800f2b4 <_printf_common>:
 800f2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b8:	4616      	mov	r6, r2
 800f2ba:	4699      	mov	r9, r3
 800f2bc:	688a      	ldr	r2, [r1, #8]
 800f2be:	690b      	ldr	r3, [r1, #16]
 800f2c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	bfb8      	it	lt
 800f2c8:	4613      	movlt	r3, r2
 800f2ca:	6033      	str	r3, [r6, #0]
 800f2cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	b10a      	cbz	r2, 800f2da <_printf_common+0x26>
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	6033      	str	r3, [r6, #0]
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	0699      	lsls	r1, r3, #26
 800f2de:	bf42      	ittt	mi
 800f2e0:	6833      	ldrmi	r3, [r6, #0]
 800f2e2:	3302      	addmi	r3, #2
 800f2e4:	6033      	strmi	r3, [r6, #0]
 800f2e6:	6825      	ldr	r5, [r4, #0]
 800f2e8:	f015 0506 	ands.w	r5, r5, #6
 800f2ec:	d106      	bne.n	800f2fc <_printf_common+0x48>
 800f2ee:	f104 0a19 	add.w	sl, r4, #25
 800f2f2:	68e3      	ldr	r3, [r4, #12]
 800f2f4:	6832      	ldr	r2, [r6, #0]
 800f2f6:	1a9b      	subs	r3, r3, r2
 800f2f8:	42ab      	cmp	r3, r5
 800f2fa:	dc26      	bgt.n	800f34a <_printf_common+0x96>
 800f2fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f300:	1e13      	subs	r3, r2, #0
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	bf18      	it	ne
 800f306:	2301      	movne	r3, #1
 800f308:	0692      	lsls	r2, r2, #26
 800f30a:	d42b      	bmi.n	800f364 <_printf_common+0xb0>
 800f30c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f310:	4649      	mov	r1, r9
 800f312:	4638      	mov	r0, r7
 800f314:	47c0      	blx	r8
 800f316:	3001      	adds	r0, #1
 800f318:	d01e      	beq.n	800f358 <_printf_common+0xa4>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	68e5      	ldr	r5, [r4, #12]
 800f31e:	6832      	ldr	r2, [r6, #0]
 800f320:	f003 0306 	and.w	r3, r3, #6
 800f324:	2b04      	cmp	r3, #4
 800f326:	bf08      	it	eq
 800f328:	1aad      	subeq	r5, r5, r2
 800f32a:	68a3      	ldr	r3, [r4, #8]
 800f32c:	6922      	ldr	r2, [r4, #16]
 800f32e:	bf0c      	ite	eq
 800f330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f334:	2500      	movne	r5, #0
 800f336:	4293      	cmp	r3, r2
 800f338:	bfc4      	itt	gt
 800f33a:	1a9b      	subgt	r3, r3, r2
 800f33c:	18ed      	addgt	r5, r5, r3
 800f33e:	2600      	movs	r6, #0
 800f340:	341a      	adds	r4, #26
 800f342:	42b5      	cmp	r5, r6
 800f344:	d11a      	bne.n	800f37c <_printf_common+0xc8>
 800f346:	2000      	movs	r0, #0
 800f348:	e008      	b.n	800f35c <_printf_common+0xa8>
 800f34a:	2301      	movs	r3, #1
 800f34c:	4652      	mov	r2, sl
 800f34e:	4649      	mov	r1, r9
 800f350:	4638      	mov	r0, r7
 800f352:	47c0      	blx	r8
 800f354:	3001      	adds	r0, #1
 800f356:	d103      	bne.n	800f360 <_printf_common+0xac>
 800f358:	f04f 30ff 	mov.w	r0, #4294967295
 800f35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f360:	3501      	adds	r5, #1
 800f362:	e7c6      	b.n	800f2f2 <_printf_common+0x3e>
 800f364:	18e1      	adds	r1, r4, r3
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	2030      	movs	r0, #48	; 0x30
 800f36a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f36e:	4422      	add	r2, r4
 800f370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f378:	3302      	adds	r3, #2
 800f37a:	e7c7      	b.n	800f30c <_printf_common+0x58>
 800f37c:	2301      	movs	r3, #1
 800f37e:	4622      	mov	r2, r4
 800f380:	4649      	mov	r1, r9
 800f382:	4638      	mov	r0, r7
 800f384:	47c0      	blx	r8
 800f386:	3001      	adds	r0, #1
 800f388:	d0e6      	beq.n	800f358 <_printf_common+0xa4>
 800f38a:	3601      	adds	r6, #1
 800f38c:	e7d9      	b.n	800f342 <_printf_common+0x8e>
	...

0800f390 <_printf_i>:
 800f390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f394:	460c      	mov	r4, r1
 800f396:	4691      	mov	r9, r2
 800f398:	7e27      	ldrb	r7, [r4, #24]
 800f39a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f39c:	2f78      	cmp	r7, #120	; 0x78
 800f39e:	4680      	mov	r8, r0
 800f3a0:	469a      	mov	sl, r3
 800f3a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3a6:	d807      	bhi.n	800f3b8 <_printf_i+0x28>
 800f3a8:	2f62      	cmp	r7, #98	; 0x62
 800f3aa:	d80a      	bhi.n	800f3c2 <_printf_i+0x32>
 800f3ac:	2f00      	cmp	r7, #0
 800f3ae:	f000 80d8 	beq.w	800f562 <_printf_i+0x1d2>
 800f3b2:	2f58      	cmp	r7, #88	; 0x58
 800f3b4:	f000 80a3 	beq.w	800f4fe <_printf_i+0x16e>
 800f3b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f3bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3c0:	e03a      	b.n	800f438 <_printf_i+0xa8>
 800f3c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3c6:	2b15      	cmp	r3, #21
 800f3c8:	d8f6      	bhi.n	800f3b8 <_printf_i+0x28>
 800f3ca:	a001      	add	r0, pc, #4	; (adr r0, 800f3d0 <_printf_i+0x40>)
 800f3cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f3d0:	0800f429 	.word	0x0800f429
 800f3d4:	0800f43d 	.word	0x0800f43d
 800f3d8:	0800f3b9 	.word	0x0800f3b9
 800f3dc:	0800f3b9 	.word	0x0800f3b9
 800f3e0:	0800f3b9 	.word	0x0800f3b9
 800f3e4:	0800f3b9 	.word	0x0800f3b9
 800f3e8:	0800f43d 	.word	0x0800f43d
 800f3ec:	0800f3b9 	.word	0x0800f3b9
 800f3f0:	0800f3b9 	.word	0x0800f3b9
 800f3f4:	0800f3b9 	.word	0x0800f3b9
 800f3f8:	0800f3b9 	.word	0x0800f3b9
 800f3fc:	0800f549 	.word	0x0800f549
 800f400:	0800f46d 	.word	0x0800f46d
 800f404:	0800f52b 	.word	0x0800f52b
 800f408:	0800f3b9 	.word	0x0800f3b9
 800f40c:	0800f3b9 	.word	0x0800f3b9
 800f410:	0800f56b 	.word	0x0800f56b
 800f414:	0800f3b9 	.word	0x0800f3b9
 800f418:	0800f46d 	.word	0x0800f46d
 800f41c:	0800f3b9 	.word	0x0800f3b9
 800f420:	0800f3b9 	.word	0x0800f3b9
 800f424:	0800f533 	.word	0x0800f533
 800f428:	680b      	ldr	r3, [r1, #0]
 800f42a:	1d1a      	adds	r2, r3, #4
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	600a      	str	r2, [r1, #0]
 800f430:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f438:	2301      	movs	r3, #1
 800f43a:	e0a3      	b.n	800f584 <_printf_i+0x1f4>
 800f43c:	6825      	ldr	r5, [r4, #0]
 800f43e:	6808      	ldr	r0, [r1, #0]
 800f440:	062e      	lsls	r6, r5, #24
 800f442:	f100 0304 	add.w	r3, r0, #4
 800f446:	d50a      	bpl.n	800f45e <_printf_i+0xce>
 800f448:	6805      	ldr	r5, [r0, #0]
 800f44a:	600b      	str	r3, [r1, #0]
 800f44c:	2d00      	cmp	r5, #0
 800f44e:	da03      	bge.n	800f458 <_printf_i+0xc8>
 800f450:	232d      	movs	r3, #45	; 0x2d
 800f452:	426d      	negs	r5, r5
 800f454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f458:	485e      	ldr	r0, [pc, #376]	; (800f5d4 <_printf_i+0x244>)
 800f45a:	230a      	movs	r3, #10
 800f45c:	e019      	b.n	800f492 <_printf_i+0x102>
 800f45e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f462:	6805      	ldr	r5, [r0, #0]
 800f464:	600b      	str	r3, [r1, #0]
 800f466:	bf18      	it	ne
 800f468:	b22d      	sxthne	r5, r5
 800f46a:	e7ef      	b.n	800f44c <_printf_i+0xbc>
 800f46c:	680b      	ldr	r3, [r1, #0]
 800f46e:	6825      	ldr	r5, [r4, #0]
 800f470:	1d18      	adds	r0, r3, #4
 800f472:	6008      	str	r0, [r1, #0]
 800f474:	0628      	lsls	r0, r5, #24
 800f476:	d501      	bpl.n	800f47c <_printf_i+0xec>
 800f478:	681d      	ldr	r5, [r3, #0]
 800f47a:	e002      	b.n	800f482 <_printf_i+0xf2>
 800f47c:	0669      	lsls	r1, r5, #25
 800f47e:	d5fb      	bpl.n	800f478 <_printf_i+0xe8>
 800f480:	881d      	ldrh	r5, [r3, #0]
 800f482:	4854      	ldr	r0, [pc, #336]	; (800f5d4 <_printf_i+0x244>)
 800f484:	2f6f      	cmp	r7, #111	; 0x6f
 800f486:	bf0c      	ite	eq
 800f488:	2308      	moveq	r3, #8
 800f48a:	230a      	movne	r3, #10
 800f48c:	2100      	movs	r1, #0
 800f48e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f492:	6866      	ldr	r6, [r4, #4]
 800f494:	60a6      	str	r6, [r4, #8]
 800f496:	2e00      	cmp	r6, #0
 800f498:	bfa2      	ittt	ge
 800f49a:	6821      	ldrge	r1, [r4, #0]
 800f49c:	f021 0104 	bicge.w	r1, r1, #4
 800f4a0:	6021      	strge	r1, [r4, #0]
 800f4a2:	b90d      	cbnz	r5, 800f4a8 <_printf_i+0x118>
 800f4a4:	2e00      	cmp	r6, #0
 800f4a6:	d04d      	beq.n	800f544 <_printf_i+0x1b4>
 800f4a8:	4616      	mov	r6, r2
 800f4aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800f4ae:	fb03 5711 	mls	r7, r3, r1, r5
 800f4b2:	5dc7      	ldrb	r7, [r0, r7]
 800f4b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f4b8:	462f      	mov	r7, r5
 800f4ba:	42bb      	cmp	r3, r7
 800f4bc:	460d      	mov	r5, r1
 800f4be:	d9f4      	bls.n	800f4aa <_printf_i+0x11a>
 800f4c0:	2b08      	cmp	r3, #8
 800f4c2:	d10b      	bne.n	800f4dc <_printf_i+0x14c>
 800f4c4:	6823      	ldr	r3, [r4, #0]
 800f4c6:	07df      	lsls	r7, r3, #31
 800f4c8:	d508      	bpl.n	800f4dc <_printf_i+0x14c>
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	6861      	ldr	r1, [r4, #4]
 800f4ce:	4299      	cmp	r1, r3
 800f4d0:	bfde      	ittt	le
 800f4d2:	2330      	movle	r3, #48	; 0x30
 800f4d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f4d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f4dc:	1b92      	subs	r2, r2, r6
 800f4de:	6122      	str	r2, [r4, #16]
 800f4e0:	f8cd a000 	str.w	sl, [sp]
 800f4e4:	464b      	mov	r3, r9
 800f4e6:	aa03      	add	r2, sp, #12
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	f7ff fee2 	bl	800f2b4 <_printf_common>
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d14c      	bne.n	800f58e <_printf_i+0x1fe>
 800f4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f8:	b004      	add	sp, #16
 800f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fe:	4835      	ldr	r0, [pc, #212]	; (800f5d4 <_printf_i+0x244>)
 800f500:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	680e      	ldr	r6, [r1, #0]
 800f508:	061f      	lsls	r7, r3, #24
 800f50a:	f856 5b04 	ldr.w	r5, [r6], #4
 800f50e:	600e      	str	r6, [r1, #0]
 800f510:	d514      	bpl.n	800f53c <_printf_i+0x1ac>
 800f512:	07d9      	lsls	r1, r3, #31
 800f514:	bf44      	itt	mi
 800f516:	f043 0320 	orrmi.w	r3, r3, #32
 800f51a:	6023      	strmi	r3, [r4, #0]
 800f51c:	b91d      	cbnz	r5, 800f526 <_printf_i+0x196>
 800f51e:	6823      	ldr	r3, [r4, #0]
 800f520:	f023 0320 	bic.w	r3, r3, #32
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	2310      	movs	r3, #16
 800f528:	e7b0      	b.n	800f48c <_printf_i+0xfc>
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	f043 0320 	orr.w	r3, r3, #32
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	2378      	movs	r3, #120	; 0x78
 800f534:	4828      	ldr	r0, [pc, #160]	; (800f5d8 <_printf_i+0x248>)
 800f536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f53a:	e7e3      	b.n	800f504 <_printf_i+0x174>
 800f53c:	065e      	lsls	r6, r3, #25
 800f53e:	bf48      	it	mi
 800f540:	b2ad      	uxthmi	r5, r5
 800f542:	e7e6      	b.n	800f512 <_printf_i+0x182>
 800f544:	4616      	mov	r6, r2
 800f546:	e7bb      	b.n	800f4c0 <_printf_i+0x130>
 800f548:	680b      	ldr	r3, [r1, #0]
 800f54a:	6826      	ldr	r6, [r4, #0]
 800f54c:	6960      	ldr	r0, [r4, #20]
 800f54e:	1d1d      	adds	r5, r3, #4
 800f550:	600d      	str	r5, [r1, #0]
 800f552:	0635      	lsls	r5, r6, #24
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	d501      	bpl.n	800f55c <_printf_i+0x1cc>
 800f558:	6018      	str	r0, [r3, #0]
 800f55a:	e002      	b.n	800f562 <_printf_i+0x1d2>
 800f55c:	0671      	lsls	r1, r6, #25
 800f55e:	d5fb      	bpl.n	800f558 <_printf_i+0x1c8>
 800f560:	8018      	strh	r0, [r3, #0]
 800f562:	2300      	movs	r3, #0
 800f564:	6123      	str	r3, [r4, #16]
 800f566:	4616      	mov	r6, r2
 800f568:	e7ba      	b.n	800f4e0 <_printf_i+0x150>
 800f56a:	680b      	ldr	r3, [r1, #0]
 800f56c:	1d1a      	adds	r2, r3, #4
 800f56e:	600a      	str	r2, [r1, #0]
 800f570:	681e      	ldr	r6, [r3, #0]
 800f572:	6862      	ldr	r2, [r4, #4]
 800f574:	2100      	movs	r1, #0
 800f576:	4630      	mov	r0, r6
 800f578:	f7f0 fe62 	bl	8000240 <memchr>
 800f57c:	b108      	cbz	r0, 800f582 <_printf_i+0x1f2>
 800f57e:	1b80      	subs	r0, r0, r6
 800f580:	6060      	str	r0, [r4, #4]
 800f582:	6863      	ldr	r3, [r4, #4]
 800f584:	6123      	str	r3, [r4, #16]
 800f586:	2300      	movs	r3, #0
 800f588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f58c:	e7a8      	b.n	800f4e0 <_printf_i+0x150>
 800f58e:	6923      	ldr	r3, [r4, #16]
 800f590:	4632      	mov	r2, r6
 800f592:	4649      	mov	r1, r9
 800f594:	4640      	mov	r0, r8
 800f596:	47d0      	blx	sl
 800f598:	3001      	adds	r0, #1
 800f59a:	d0ab      	beq.n	800f4f4 <_printf_i+0x164>
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	079b      	lsls	r3, r3, #30
 800f5a0:	d413      	bmi.n	800f5ca <_printf_i+0x23a>
 800f5a2:	68e0      	ldr	r0, [r4, #12]
 800f5a4:	9b03      	ldr	r3, [sp, #12]
 800f5a6:	4298      	cmp	r0, r3
 800f5a8:	bfb8      	it	lt
 800f5aa:	4618      	movlt	r0, r3
 800f5ac:	e7a4      	b.n	800f4f8 <_printf_i+0x168>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	4632      	mov	r2, r6
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	47d0      	blx	sl
 800f5b8:	3001      	adds	r0, #1
 800f5ba:	d09b      	beq.n	800f4f4 <_printf_i+0x164>
 800f5bc:	3501      	adds	r5, #1
 800f5be:	68e3      	ldr	r3, [r4, #12]
 800f5c0:	9903      	ldr	r1, [sp, #12]
 800f5c2:	1a5b      	subs	r3, r3, r1
 800f5c4:	42ab      	cmp	r3, r5
 800f5c6:	dcf2      	bgt.n	800f5ae <_printf_i+0x21e>
 800f5c8:	e7eb      	b.n	800f5a2 <_printf_i+0x212>
 800f5ca:	2500      	movs	r5, #0
 800f5cc:	f104 0619 	add.w	r6, r4, #25
 800f5d0:	e7f5      	b.n	800f5be <_printf_i+0x22e>
 800f5d2:	bf00      	nop
 800f5d4:	080126c5 	.word	0x080126c5
 800f5d8:	080126d6 	.word	0x080126d6

0800f5dc <_sbrk_r>:
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	4d06      	ldr	r5, [pc, #24]	; (800f5f8 <_sbrk_r+0x1c>)
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	4608      	mov	r0, r1
 800f5e6:	602b      	str	r3, [r5, #0]
 800f5e8:	f7f1 fa28 	bl	8000a3c <_sbrk>
 800f5ec:	1c43      	adds	r3, r0, #1
 800f5ee:	d102      	bne.n	800f5f6 <_sbrk_r+0x1a>
 800f5f0:	682b      	ldr	r3, [r5, #0]
 800f5f2:	b103      	cbz	r3, 800f5f6 <_sbrk_r+0x1a>
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	bd38      	pop	{r3, r4, r5, pc}
 800f5f8:	200076a4 	.word	0x200076a4

0800f5fc <__sread>:
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	460c      	mov	r4, r1
 800f600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f604:	f000 fa6c 	bl	800fae0 <_read_r>
 800f608:	2800      	cmp	r0, #0
 800f60a:	bfab      	itete	ge
 800f60c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f60e:	89a3      	ldrhlt	r3, [r4, #12]
 800f610:	181b      	addge	r3, r3, r0
 800f612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f616:	bfac      	ite	ge
 800f618:	6563      	strge	r3, [r4, #84]	; 0x54
 800f61a:	81a3      	strhlt	r3, [r4, #12]
 800f61c:	bd10      	pop	{r4, pc}

0800f61e <__swrite>:
 800f61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f622:	461f      	mov	r7, r3
 800f624:	898b      	ldrh	r3, [r1, #12]
 800f626:	05db      	lsls	r3, r3, #23
 800f628:	4605      	mov	r5, r0
 800f62a:	460c      	mov	r4, r1
 800f62c:	4616      	mov	r6, r2
 800f62e:	d505      	bpl.n	800f63c <__swrite+0x1e>
 800f630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f634:	2302      	movs	r3, #2
 800f636:	2200      	movs	r2, #0
 800f638:	f000 f9d0 	bl	800f9dc <_lseek_r>
 800f63c:	89a3      	ldrh	r3, [r4, #12]
 800f63e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f646:	81a3      	strh	r3, [r4, #12]
 800f648:	4632      	mov	r2, r6
 800f64a:	463b      	mov	r3, r7
 800f64c:	4628      	mov	r0, r5
 800f64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f652:	f000 b869 	b.w	800f728 <_write_r>

0800f656 <__sseek>:
 800f656:	b510      	push	{r4, lr}
 800f658:	460c      	mov	r4, r1
 800f65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f65e:	f000 f9bd 	bl	800f9dc <_lseek_r>
 800f662:	1c43      	adds	r3, r0, #1
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	bf15      	itete	ne
 800f668:	6560      	strne	r0, [r4, #84]	; 0x54
 800f66a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f66e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f672:	81a3      	strheq	r3, [r4, #12]
 800f674:	bf18      	it	ne
 800f676:	81a3      	strhne	r3, [r4, #12]
 800f678:	bd10      	pop	{r4, pc}

0800f67a <__sclose>:
 800f67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f67e:	f000 b8db 	b.w	800f838 <_close_r>
	...

0800f684 <__swbuf_r>:
 800f684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f686:	460e      	mov	r6, r1
 800f688:	4614      	mov	r4, r2
 800f68a:	4605      	mov	r5, r0
 800f68c:	b118      	cbz	r0, 800f696 <__swbuf_r+0x12>
 800f68e:	6983      	ldr	r3, [r0, #24]
 800f690:	b90b      	cbnz	r3, 800f696 <__swbuf_r+0x12>
 800f692:	f7ff fb51 	bl	800ed38 <__sinit>
 800f696:	4b21      	ldr	r3, [pc, #132]	; (800f71c <__swbuf_r+0x98>)
 800f698:	429c      	cmp	r4, r3
 800f69a:	d12b      	bne.n	800f6f4 <__swbuf_r+0x70>
 800f69c:	686c      	ldr	r4, [r5, #4]
 800f69e:	69a3      	ldr	r3, [r4, #24]
 800f6a0:	60a3      	str	r3, [r4, #8]
 800f6a2:	89a3      	ldrh	r3, [r4, #12]
 800f6a4:	071a      	lsls	r2, r3, #28
 800f6a6:	d52f      	bpl.n	800f708 <__swbuf_r+0x84>
 800f6a8:	6923      	ldr	r3, [r4, #16]
 800f6aa:	b36b      	cbz	r3, 800f708 <__swbuf_r+0x84>
 800f6ac:	6923      	ldr	r3, [r4, #16]
 800f6ae:	6820      	ldr	r0, [r4, #0]
 800f6b0:	1ac0      	subs	r0, r0, r3
 800f6b2:	6963      	ldr	r3, [r4, #20]
 800f6b4:	b2f6      	uxtb	r6, r6
 800f6b6:	4283      	cmp	r3, r0
 800f6b8:	4637      	mov	r7, r6
 800f6ba:	dc04      	bgt.n	800f6c6 <__swbuf_r+0x42>
 800f6bc:	4621      	mov	r1, r4
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f000 f950 	bl	800f964 <_fflush_r>
 800f6c4:	bb30      	cbnz	r0, 800f714 <__swbuf_r+0x90>
 800f6c6:	68a3      	ldr	r3, [r4, #8]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	60a3      	str	r3, [r4, #8]
 800f6cc:	6823      	ldr	r3, [r4, #0]
 800f6ce:	1c5a      	adds	r2, r3, #1
 800f6d0:	6022      	str	r2, [r4, #0]
 800f6d2:	701e      	strb	r6, [r3, #0]
 800f6d4:	6963      	ldr	r3, [r4, #20]
 800f6d6:	3001      	adds	r0, #1
 800f6d8:	4283      	cmp	r3, r0
 800f6da:	d004      	beq.n	800f6e6 <__swbuf_r+0x62>
 800f6dc:	89a3      	ldrh	r3, [r4, #12]
 800f6de:	07db      	lsls	r3, r3, #31
 800f6e0:	d506      	bpl.n	800f6f0 <__swbuf_r+0x6c>
 800f6e2:	2e0a      	cmp	r6, #10
 800f6e4:	d104      	bne.n	800f6f0 <__swbuf_r+0x6c>
 800f6e6:	4621      	mov	r1, r4
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	f000 f93b 	bl	800f964 <_fflush_r>
 800f6ee:	b988      	cbnz	r0, 800f714 <__swbuf_r+0x90>
 800f6f0:	4638      	mov	r0, r7
 800f6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6f4:	4b0a      	ldr	r3, [pc, #40]	; (800f720 <__swbuf_r+0x9c>)
 800f6f6:	429c      	cmp	r4, r3
 800f6f8:	d101      	bne.n	800f6fe <__swbuf_r+0x7a>
 800f6fa:	68ac      	ldr	r4, [r5, #8]
 800f6fc:	e7cf      	b.n	800f69e <__swbuf_r+0x1a>
 800f6fe:	4b09      	ldr	r3, [pc, #36]	; (800f724 <__swbuf_r+0xa0>)
 800f700:	429c      	cmp	r4, r3
 800f702:	bf08      	it	eq
 800f704:	68ec      	ldreq	r4, [r5, #12]
 800f706:	e7ca      	b.n	800f69e <__swbuf_r+0x1a>
 800f708:	4621      	mov	r1, r4
 800f70a:	4628      	mov	r0, r5
 800f70c:	f000 f81e 	bl	800f74c <__swsetup_r>
 800f710:	2800      	cmp	r0, #0
 800f712:	d0cb      	beq.n	800f6ac <__swbuf_r+0x28>
 800f714:	f04f 37ff 	mov.w	r7, #4294967295
 800f718:	e7ea      	b.n	800f6f0 <__swbuf_r+0x6c>
 800f71a:	bf00      	nop
 800f71c:	08012674 	.word	0x08012674
 800f720:	08012694 	.word	0x08012694
 800f724:	08012654 	.word	0x08012654

0800f728 <_write_r>:
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	4d07      	ldr	r5, [pc, #28]	; (800f748 <_write_r+0x20>)
 800f72c:	4604      	mov	r4, r0
 800f72e:	4608      	mov	r0, r1
 800f730:	4611      	mov	r1, r2
 800f732:	2200      	movs	r2, #0
 800f734:	602a      	str	r2, [r5, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	f7f1 f92f 	bl	800099a <_write>
 800f73c:	1c43      	adds	r3, r0, #1
 800f73e:	d102      	bne.n	800f746 <_write_r+0x1e>
 800f740:	682b      	ldr	r3, [r5, #0]
 800f742:	b103      	cbz	r3, 800f746 <_write_r+0x1e>
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	bd38      	pop	{r3, r4, r5, pc}
 800f748:	200076a4 	.word	0x200076a4

0800f74c <__swsetup_r>:
 800f74c:	4b32      	ldr	r3, [pc, #200]	; (800f818 <__swsetup_r+0xcc>)
 800f74e:	b570      	push	{r4, r5, r6, lr}
 800f750:	681d      	ldr	r5, [r3, #0]
 800f752:	4606      	mov	r6, r0
 800f754:	460c      	mov	r4, r1
 800f756:	b125      	cbz	r5, 800f762 <__swsetup_r+0x16>
 800f758:	69ab      	ldr	r3, [r5, #24]
 800f75a:	b913      	cbnz	r3, 800f762 <__swsetup_r+0x16>
 800f75c:	4628      	mov	r0, r5
 800f75e:	f7ff faeb 	bl	800ed38 <__sinit>
 800f762:	4b2e      	ldr	r3, [pc, #184]	; (800f81c <__swsetup_r+0xd0>)
 800f764:	429c      	cmp	r4, r3
 800f766:	d10f      	bne.n	800f788 <__swsetup_r+0x3c>
 800f768:	686c      	ldr	r4, [r5, #4]
 800f76a:	89a3      	ldrh	r3, [r4, #12]
 800f76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f770:	0719      	lsls	r1, r3, #28
 800f772:	d42c      	bmi.n	800f7ce <__swsetup_r+0x82>
 800f774:	06dd      	lsls	r5, r3, #27
 800f776:	d411      	bmi.n	800f79c <__swsetup_r+0x50>
 800f778:	2309      	movs	r3, #9
 800f77a:	6033      	str	r3, [r6, #0]
 800f77c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f780:	81a3      	strh	r3, [r4, #12]
 800f782:	f04f 30ff 	mov.w	r0, #4294967295
 800f786:	e03e      	b.n	800f806 <__swsetup_r+0xba>
 800f788:	4b25      	ldr	r3, [pc, #148]	; (800f820 <__swsetup_r+0xd4>)
 800f78a:	429c      	cmp	r4, r3
 800f78c:	d101      	bne.n	800f792 <__swsetup_r+0x46>
 800f78e:	68ac      	ldr	r4, [r5, #8]
 800f790:	e7eb      	b.n	800f76a <__swsetup_r+0x1e>
 800f792:	4b24      	ldr	r3, [pc, #144]	; (800f824 <__swsetup_r+0xd8>)
 800f794:	429c      	cmp	r4, r3
 800f796:	bf08      	it	eq
 800f798:	68ec      	ldreq	r4, [r5, #12]
 800f79a:	e7e6      	b.n	800f76a <__swsetup_r+0x1e>
 800f79c:	0758      	lsls	r0, r3, #29
 800f79e:	d512      	bpl.n	800f7c6 <__swsetup_r+0x7a>
 800f7a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7a2:	b141      	cbz	r1, 800f7b6 <__swsetup_r+0x6a>
 800f7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7a8:	4299      	cmp	r1, r3
 800f7aa:	d002      	beq.n	800f7b2 <__swsetup_r+0x66>
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f7ff fb7d 	bl	800eeac <_free_r>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	6363      	str	r3, [r4, #52]	; 0x34
 800f7b6:	89a3      	ldrh	r3, [r4, #12]
 800f7b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f7bc:	81a3      	strh	r3, [r4, #12]
 800f7be:	2300      	movs	r3, #0
 800f7c0:	6063      	str	r3, [r4, #4]
 800f7c2:	6923      	ldr	r3, [r4, #16]
 800f7c4:	6023      	str	r3, [r4, #0]
 800f7c6:	89a3      	ldrh	r3, [r4, #12]
 800f7c8:	f043 0308 	orr.w	r3, r3, #8
 800f7cc:	81a3      	strh	r3, [r4, #12]
 800f7ce:	6923      	ldr	r3, [r4, #16]
 800f7d0:	b94b      	cbnz	r3, 800f7e6 <__swsetup_r+0x9a>
 800f7d2:	89a3      	ldrh	r3, [r4, #12]
 800f7d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7dc:	d003      	beq.n	800f7e6 <__swsetup_r+0x9a>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f000 f931 	bl	800fa48 <__smakebuf_r>
 800f7e6:	89a0      	ldrh	r0, [r4, #12]
 800f7e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7ec:	f010 0301 	ands.w	r3, r0, #1
 800f7f0:	d00a      	beq.n	800f808 <__swsetup_r+0xbc>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	60a3      	str	r3, [r4, #8]
 800f7f6:	6963      	ldr	r3, [r4, #20]
 800f7f8:	425b      	negs	r3, r3
 800f7fa:	61a3      	str	r3, [r4, #24]
 800f7fc:	6923      	ldr	r3, [r4, #16]
 800f7fe:	b943      	cbnz	r3, 800f812 <__swsetup_r+0xc6>
 800f800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f804:	d1ba      	bne.n	800f77c <__swsetup_r+0x30>
 800f806:	bd70      	pop	{r4, r5, r6, pc}
 800f808:	0781      	lsls	r1, r0, #30
 800f80a:	bf58      	it	pl
 800f80c:	6963      	ldrpl	r3, [r4, #20]
 800f80e:	60a3      	str	r3, [r4, #8]
 800f810:	e7f4      	b.n	800f7fc <__swsetup_r+0xb0>
 800f812:	2000      	movs	r0, #0
 800f814:	e7f7      	b.n	800f806 <__swsetup_r+0xba>
 800f816:	bf00      	nop
 800f818:	20000014 	.word	0x20000014
 800f81c:	08012674 	.word	0x08012674
 800f820:	08012694 	.word	0x08012694
 800f824:	08012654 	.word	0x08012654

0800f828 <abort>:
 800f828:	b508      	push	{r3, lr}
 800f82a:	2006      	movs	r0, #6
 800f82c:	f000 f992 	bl	800fb54 <raise>
 800f830:	2001      	movs	r0, #1
 800f832:	f7f1 f88b 	bl	800094c <_exit>
	...

0800f838 <_close_r>:
 800f838:	b538      	push	{r3, r4, r5, lr}
 800f83a:	4d06      	ldr	r5, [pc, #24]	; (800f854 <_close_r+0x1c>)
 800f83c:	2300      	movs	r3, #0
 800f83e:	4604      	mov	r4, r0
 800f840:	4608      	mov	r0, r1
 800f842:	602b      	str	r3, [r5, #0]
 800f844:	f7f1 f8c5 	bl	80009d2 <_close>
 800f848:	1c43      	adds	r3, r0, #1
 800f84a:	d102      	bne.n	800f852 <_close_r+0x1a>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	b103      	cbz	r3, 800f852 <_close_r+0x1a>
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	200076a4 	.word	0x200076a4

0800f858 <__sflush_r>:
 800f858:	898a      	ldrh	r2, [r1, #12]
 800f85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f85e:	4605      	mov	r5, r0
 800f860:	0710      	lsls	r0, r2, #28
 800f862:	460c      	mov	r4, r1
 800f864:	d458      	bmi.n	800f918 <__sflush_r+0xc0>
 800f866:	684b      	ldr	r3, [r1, #4]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	dc05      	bgt.n	800f878 <__sflush_r+0x20>
 800f86c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f86e:	2b00      	cmp	r3, #0
 800f870:	dc02      	bgt.n	800f878 <__sflush_r+0x20>
 800f872:	2000      	movs	r0, #0
 800f874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f87a:	2e00      	cmp	r6, #0
 800f87c:	d0f9      	beq.n	800f872 <__sflush_r+0x1a>
 800f87e:	2300      	movs	r3, #0
 800f880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f884:	682f      	ldr	r7, [r5, #0]
 800f886:	602b      	str	r3, [r5, #0]
 800f888:	d032      	beq.n	800f8f0 <__sflush_r+0x98>
 800f88a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f88c:	89a3      	ldrh	r3, [r4, #12]
 800f88e:	075a      	lsls	r2, r3, #29
 800f890:	d505      	bpl.n	800f89e <__sflush_r+0x46>
 800f892:	6863      	ldr	r3, [r4, #4]
 800f894:	1ac0      	subs	r0, r0, r3
 800f896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f898:	b10b      	cbz	r3, 800f89e <__sflush_r+0x46>
 800f89a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f89c:	1ac0      	subs	r0, r0, r3
 800f89e:	2300      	movs	r3, #0
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8a4:	6a21      	ldr	r1, [r4, #32]
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	47b0      	blx	r6
 800f8aa:	1c43      	adds	r3, r0, #1
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	d106      	bne.n	800f8be <__sflush_r+0x66>
 800f8b0:	6829      	ldr	r1, [r5, #0]
 800f8b2:	291d      	cmp	r1, #29
 800f8b4:	d82c      	bhi.n	800f910 <__sflush_r+0xb8>
 800f8b6:	4a2a      	ldr	r2, [pc, #168]	; (800f960 <__sflush_r+0x108>)
 800f8b8:	40ca      	lsrs	r2, r1
 800f8ba:	07d6      	lsls	r6, r2, #31
 800f8bc:	d528      	bpl.n	800f910 <__sflush_r+0xb8>
 800f8be:	2200      	movs	r2, #0
 800f8c0:	6062      	str	r2, [r4, #4]
 800f8c2:	04d9      	lsls	r1, r3, #19
 800f8c4:	6922      	ldr	r2, [r4, #16]
 800f8c6:	6022      	str	r2, [r4, #0]
 800f8c8:	d504      	bpl.n	800f8d4 <__sflush_r+0x7c>
 800f8ca:	1c42      	adds	r2, r0, #1
 800f8cc:	d101      	bne.n	800f8d2 <__sflush_r+0x7a>
 800f8ce:	682b      	ldr	r3, [r5, #0]
 800f8d0:	b903      	cbnz	r3, 800f8d4 <__sflush_r+0x7c>
 800f8d2:	6560      	str	r0, [r4, #84]	; 0x54
 800f8d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8d6:	602f      	str	r7, [r5, #0]
 800f8d8:	2900      	cmp	r1, #0
 800f8da:	d0ca      	beq.n	800f872 <__sflush_r+0x1a>
 800f8dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8e0:	4299      	cmp	r1, r3
 800f8e2:	d002      	beq.n	800f8ea <__sflush_r+0x92>
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	f7ff fae1 	bl	800eeac <_free_r>
 800f8ea:	2000      	movs	r0, #0
 800f8ec:	6360      	str	r0, [r4, #52]	; 0x34
 800f8ee:	e7c1      	b.n	800f874 <__sflush_r+0x1c>
 800f8f0:	6a21      	ldr	r1, [r4, #32]
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b0      	blx	r6
 800f8f8:	1c41      	adds	r1, r0, #1
 800f8fa:	d1c7      	bne.n	800f88c <__sflush_r+0x34>
 800f8fc:	682b      	ldr	r3, [r5, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d0c4      	beq.n	800f88c <__sflush_r+0x34>
 800f902:	2b1d      	cmp	r3, #29
 800f904:	d001      	beq.n	800f90a <__sflush_r+0xb2>
 800f906:	2b16      	cmp	r3, #22
 800f908:	d101      	bne.n	800f90e <__sflush_r+0xb6>
 800f90a:	602f      	str	r7, [r5, #0]
 800f90c:	e7b1      	b.n	800f872 <__sflush_r+0x1a>
 800f90e:	89a3      	ldrh	r3, [r4, #12]
 800f910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f914:	81a3      	strh	r3, [r4, #12]
 800f916:	e7ad      	b.n	800f874 <__sflush_r+0x1c>
 800f918:	690f      	ldr	r7, [r1, #16]
 800f91a:	2f00      	cmp	r7, #0
 800f91c:	d0a9      	beq.n	800f872 <__sflush_r+0x1a>
 800f91e:	0793      	lsls	r3, r2, #30
 800f920:	680e      	ldr	r6, [r1, #0]
 800f922:	bf08      	it	eq
 800f924:	694b      	ldreq	r3, [r1, #20]
 800f926:	600f      	str	r7, [r1, #0]
 800f928:	bf18      	it	ne
 800f92a:	2300      	movne	r3, #0
 800f92c:	eba6 0807 	sub.w	r8, r6, r7
 800f930:	608b      	str	r3, [r1, #8]
 800f932:	f1b8 0f00 	cmp.w	r8, #0
 800f936:	dd9c      	ble.n	800f872 <__sflush_r+0x1a>
 800f938:	6a21      	ldr	r1, [r4, #32]
 800f93a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f93c:	4643      	mov	r3, r8
 800f93e:	463a      	mov	r2, r7
 800f940:	4628      	mov	r0, r5
 800f942:	47b0      	blx	r6
 800f944:	2800      	cmp	r0, #0
 800f946:	dc06      	bgt.n	800f956 <__sflush_r+0xfe>
 800f948:	89a3      	ldrh	r3, [r4, #12]
 800f94a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f94e:	81a3      	strh	r3, [r4, #12]
 800f950:	f04f 30ff 	mov.w	r0, #4294967295
 800f954:	e78e      	b.n	800f874 <__sflush_r+0x1c>
 800f956:	4407      	add	r7, r0
 800f958:	eba8 0800 	sub.w	r8, r8, r0
 800f95c:	e7e9      	b.n	800f932 <__sflush_r+0xda>
 800f95e:	bf00      	nop
 800f960:	20400001 	.word	0x20400001

0800f964 <_fflush_r>:
 800f964:	b538      	push	{r3, r4, r5, lr}
 800f966:	690b      	ldr	r3, [r1, #16]
 800f968:	4605      	mov	r5, r0
 800f96a:	460c      	mov	r4, r1
 800f96c:	b913      	cbnz	r3, 800f974 <_fflush_r+0x10>
 800f96e:	2500      	movs	r5, #0
 800f970:	4628      	mov	r0, r5
 800f972:	bd38      	pop	{r3, r4, r5, pc}
 800f974:	b118      	cbz	r0, 800f97e <_fflush_r+0x1a>
 800f976:	6983      	ldr	r3, [r0, #24]
 800f978:	b90b      	cbnz	r3, 800f97e <_fflush_r+0x1a>
 800f97a:	f7ff f9dd 	bl	800ed38 <__sinit>
 800f97e:	4b14      	ldr	r3, [pc, #80]	; (800f9d0 <_fflush_r+0x6c>)
 800f980:	429c      	cmp	r4, r3
 800f982:	d11b      	bne.n	800f9bc <_fflush_r+0x58>
 800f984:	686c      	ldr	r4, [r5, #4]
 800f986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d0ef      	beq.n	800f96e <_fflush_r+0xa>
 800f98e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f990:	07d0      	lsls	r0, r2, #31
 800f992:	d404      	bmi.n	800f99e <_fflush_r+0x3a>
 800f994:	0599      	lsls	r1, r3, #22
 800f996:	d402      	bmi.n	800f99e <_fflush_r+0x3a>
 800f998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f99a:	f7ff fa7d 	bl	800ee98 <__retarget_lock_acquire_recursive>
 800f99e:	4628      	mov	r0, r5
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	f7ff ff59 	bl	800f858 <__sflush_r>
 800f9a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9a8:	07da      	lsls	r2, r3, #31
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	d4e0      	bmi.n	800f970 <_fflush_r+0xc>
 800f9ae:	89a3      	ldrh	r3, [r4, #12]
 800f9b0:	059b      	lsls	r3, r3, #22
 800f9b2:	d4dd      	bmi.n	800f970 <_fflush_r+0xc>
 800f9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9b6:	f7ff fa70 	bl	800ee9a <__retarget_lock_release_recursive>
 800f9ba:	e7d9      	b.n	800f970 <_fflush_r+0xc>
 800f9bc:	4b05      	ldr	r3, [pc, #20]	; (800f9d4 <_fflush_r+0x70>)
 800f9be:	429c      	cmp	r4, r3
 800f9c0:	d101      	bne.n	800f9c6 <_fflush_r+0x62>
 800f9c2:	68ac      	ldr	r4, [r5, #8]
 800f9c4:	e7df      	b.n	800f986 <_fflush_r+0x22>
 800f9c6:	4b04      	ldr	r3, [pc, #16]	; (800f9d8 <_fflush_r+0x74>)
 800f9c8:	429c      	cmp	r4, r3
 800f9ca:	bf08      	it	eq
 800f9cc:	68ec      	ldreq	r4, [r5, #12]
 800f9ce:	e7da      	b.n	800f986 <_fflush_r+0x22>
 800f9d0:	08012674 	.word	0x08012674
 800f9d4:	08012694 	.word	0x08012694
 800f9d8:	08012654 	.word	0x08012654

0800f9dc <_lseek_r>:
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	4d07      	ldr	r5, [pc, #28]	; (800f9fc <_lseek_r+0x20>)
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	4608      	mov	r0, r1
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	602a      	str	r2, [r5, #0]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	f7f1 f818 	bl	8000a20 <_lseek>
 800f9f0:	1c43      	adds	r3, r0, #1
 800f9f2:	d102      	bne.n	800f9fa <_lseek_r+0x1e>
 800f9f4:	682b      	ldr	r3, [r5, #0]
 800f9f6:	b103      	cbz	r3, 800f9fa <_lseek_r+0x1e>
 800f9f8:	6023      	str	r3, [r4, #0]
 800f9fa:	bd38      	pop	{r3, r4, r5, pc}
 800f9fc:	200076a4 	.word	0x200076a4

0800fa00 <__swhatbuf_r>:
 800fa00:	b570      	push	{r4, r5, r6, lr}
 800fa02:	460e      	mov	r6, r1
 800fa04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa08:	2900      	cmp	r1, #0
 800fa0a:	b096      	sub	sp, #88	; 0x58
 800fa0c:	4614      	mov	r4, r2
 800fa0e:	461d      	mov	r5, r3
 800fa10:	da07      	bge.n	800fa22 <__swhatbuf_r+0x22>
 800fa12:	2300      	movs	r3, #0
 800fa14:	602b      	str	r3, [r5, #0]
 800fa16:	89b3      	ldrh	r3, [r6, #12]
 800fa18:	061a      	lsls	r2, r3, #24
 800fa1a:	d410      	bmi.n	800fa3e <__swhatbuf_r+0x3e>
 800fa1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa20:	e00e      	b.n	800fa40 <__swhatbuf_r+0x40>
 800fa22:	466a      	mov	r2, sp
 800fa24:	f000 f8b2 	bl	800fb8c <_fstat_r>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	dbf2      	blt.n	800fa12 <__swhatbuf_r+0x12>
 800fa2c:	9a01      	ldr	r2, [sp, #4]
 800fa2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa36:	425a      	negs	r2, r3
 800fa38:	415a      	adcs	r2, r3
 800fa3a:	602a      	str	r2, [r5, #0]
 800fa3c:	e7ee      	b.n	800fa1c <__swhatbuf_r+0x1c>
 800fa3e:	2340      	movs	r3, #64	; 0x40
 800fa40:	2000      	movs	r0, #0
 800fa42:	6023      	str	r3, [r4, #0]
 800fa44:	b016      	add	sp, #88	; 0x58
 800fa46:	bd70      	pop	{r4, r5, r6, pc}

0800fa48 <__smakebuf_r>:
 800fa48:	898b      	ldrh	r3, [r1, #12]
 800fa4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa4c:	079d      	lsls	r5, r3, #30
 800fa4e:	4606      	mov	r6, r0
 800fa50:	460c      	mov	r4, r1
 800fa52:	d507      	bpl.n	800fa64 <__smakebuf_r+0x1c>
 800fa54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	6123      	str	r3, [r4, #16]
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	6163      	str	r3, [r4, #20]
 800fa60:	b002      	add	sp, #8
 800fa62:	bd70      	pop	{r4, r5, r6, pc}
 800fa64:	ab01      	add	r3, sp, #4
 800fa66:	466a      	mov	r2, sp
 800fa68:	f7ff ffca 	bl	800fa00 <__swhatbuf_r>
 800fa6c:	9900      	ldr	r1, [sp, #0]
 800fa6e:	4605      	mov	r5, r0
 800fa70:	4630      	mov	r0, r6
 800fa72:	f7ff fa6b 	bl	800ef4c <_malloc_r>
 800fa76:	b948      	cbnz	r0, 800fa8c <__smakebuf_r+0x44>
 800fa78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7c:	059a      	lsls	r2, r3, #22
 800fa7e:	d4ef      	bmi.n	800fa60 <__smakebuf_r+0x18>
 800fa80:	f023 0303 	bic.w	r3, r3, #3
 800fa84:	f043 0302 	orr.w	r3, r3, #2
 800fa88:	81a3      	strh	r3, [r4, #12]
 800fa8a:	e7e3      	b.n	800fa54 <__smakebuf_r+0xc>
 800fa8c:	4b0d      	ldr	r3, [pc, #52]	; (800fac4 <__smakebuf_r+0x7c>)
 800fa8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	6020      	str	r0, [r4, #0]
 800fa94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa98:	81a3      	strh	r3, [r4, #12]
 800fa9a:	9b00      	ldr	r3, [sp, #0]
 800fa9c:	6163      	str	r3, [r4, #20]
 800fa9e:	9b01      	ldr	r3, [sp, #4]
 800faa0:	6120      	str	r0, [r4, #16]
 800faa2:	b15b      	cbz	r3, 800fabc <__smakebuf_r+0x74>
 800faa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faa8:	4630      	mov	r0, r6
 800faaa:	f000 f881 	bl	800fbb0 <_isatty_r>
 800faae:	b128      	cbz	r0, 800fabc <__smakebuf_r+0x74>
 800fab0:	89a3      	ldrh	r3, [r4, #12]
 800fab2:	f023 0303 	bic.w	r3, r3, #3
 800fab6:	f043 0301 	orr.w	r3, r3, #1
 800faba:	81a3      	strh	r3, [r4, #12]
 800fabc:	89a0      	ldrh	r0, [r4, #12]
 800fabe:	4305      	orrs	r5, r0
 800fac0:	81a5      	strh	r5, [r4, #12]
 800fac2:	e7cd      	b.n	800fa60 <__smakebuf_r+0x18>
 800fac4:	0800ecd1 	.word	0x0800ecd1

0800fac8 <__malloc_lock>:
 800fac8:	4801      	ldr	r0, [pc, #4]	; (800fad0 <__malloc_lock+0x8>)
 800faca:	f7ff b9e5 	b.w	800ee98 <__retarget_lock_acquire_recursive>
 800face:	bf00      	nop
 800fad0:	200076ac 	.word	0x200076ac

0800fad4 <__malloc_unlock>:
 800fad4:	4801      	ldr	r0, [pc, #4]	; (800fadc <__malloc_unlock+0x8>)
 800fad6:	f7ff b9e0 	b.w	800ee9a <__retarget_lock_release_recursive>
 800fada:	bf00      	nop
 800fadc:	200076ac 	.word	0x200076ac

0800fae0 <_read_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4d07      	ldr	r5, [pc, #28]	; (800fb00 <_read_r+0x20>)
 800fae4:	4604      	mov	r4, r0
 800fae6:	4608      	mov	r0, r1
 800fae8:	4611      	mov	r1, r2
 800faea:	2200      	movs	r2, #0
 800faec:	602a      	str	r2, [r5, #0]
 800faee:	461a      	mov	r2, r3
 800faf0:	f7f0 ff36 	bl	8000960 <_read>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_read_r+0x1e>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_read_r+0x1e>
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	200076a4 	.word	0x200076a4

0800fb04 <_raise_r>:
 800fb04:	291f      	cmp	r1, #31
 800fb06:	b538      	push	{r3, r4, r5, lr}
 800fb08:	4604      	mov	r4, r0
 800fb0a:	460d      	mov	r5, r1
 800fb0c:	d904      	bls.n	800fb18 <_raise_r+0x14>
 800fb0e:	2316      	movs	r3, #22
 800fb10:	6003      	str	r3, [r0, #0]
 800fb12:	f04f 30ff 	mov.w	r0, #4294967295
 800fb16:	bd38      	pop	{r3, r4, r5, pc}
 800fb18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fb1a:	b112      	cbz	r2, 800fb22 <_raise_r+0x1e>
 800fb1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb20:	b94b      	cbnz	r3, 800fb36 <_raise_r+0x32>
 800fb22:	4620      	mov	r0, r4
 800fb24:	f000 f830 	bl	800fb88 <_getpid_r>
 800fb28:	462a      	mov	r2, r5
 800fb2a:	4601      	mov	r1, r0
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb32:	f000 b817 	b.w	800fb64 <_kill_r>
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d00a      	beq.n	800fb50 <_raise_r+0x4c>
 800fb3a:	1c59      	adds	r1, r3, #1
 800fb3c:	d103      	bne.n	800fb46 <_raise_r+0x42>
 800fb3e:	2316      	movs	r3, #22
 800fb40:	6003      	str	r3, [r0, #0]
 800fb42:	2001      	movs	r0, #1
 800fb44:	e7e7      	b.n	800fb16 <_raise_r+0x12>
 800fb46:	2400      	movs	r4, #0
 800fb48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	4798      	blx	r3
 800fb50:	2000      	movs	r0, #0
 800fb52:	e7e0      	b.n	800fb16 <_raise_r+0x12>

0800fb54 <raise>:
 800fb54:	4b02      	ldr	r3, [pc, #8]	; (800fb60 <raise+0xc>)
 800fb56:	4601      	mov	r1, r0
 800fb58:	6818      	ldr	r0, [r3, #0]
 800fb5a:	f7ff bfd3 	b.w	800fb04 <_raise_r>
 800fb5e:	bf00      	nop
 800fb60:	20000014 	.word	0x20000014

0800fb64 <_kill_r>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	4d07      	ldr	r5, [pc, #28]	; (800fb84 <_kill_r+0x20>)
 800fb68:	2300      	movs	r3, #0
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	4608      	mov	r0, r1
 800fb6e:	4611      	mov	r1, r2
 800fb70:	602b      	str	r3, [r5, #0]
 800fb72:	f7f0 fed9 	bl	8000928 <_kill>
 800fb76:	1c43      	adds	r3, r0, #1
 800fb78:	d102      	bne.n	800fb80 <_kill_r+0x1c>
 800fb7a:	682b      	ldr	r3, [r5, #0]
 800fb7c:	b103      	cbz	r3, 800fb80 <_kill_r+0x1c>
 800fb7e:	6023      	str	r3, [r4, #0]
 800fb80:	bd38      	pop	{r3, r4, r5, pc}
 800fb82:	bf00      	nop
 800fb84:	200076a4 	.word	0x200076a4

0800fb88 <_getpid_r>:
 800fb88:	f7f0 bec6 	b.w	8000918 <_getpid>

0800fb8c <_fstat_r>:
 800fb8c:	b538      	push	{r3, r4, r5, lr}
 800fb8e:	4d07      	ldr	r5, [pc, #28]	; (800fbac <_fstat_r+0x20>)
 800fb90:	2300      	movs	r3, #0
 800fb92:	4604      	mov	r4, r0
 800fb94:	4608      	mov	r0, r1
 800fb96:	4611      	mov	r1, r2
 800fb98:	602b      	str	r3, [r5, #0]
 800fb9a:	f7f0 ff26 	bl	80009ea <_fstat>
 800fb9e:	1c43      	adds	r3, r0, #1
 800fba0:	d102      	bne.n	800fba8 <_fstat_r+0x1c>
 800fba2:	682b      	ldr	r3, [r5, #0]
 800fba4:	b103      	cbz	r3, 800fba8 <_fstat_r+0x1c>
 800fba6:	6023      	str	r3, [r4, #0]
 800fba8:	bd38      	pop	{r3, r4, r5, pc}
 800fbaa:	bf00      	nop
 800fbac:	200076a4 	.word	0x200076a4

0800fbb0 <_isatty_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4d06      	ldr	r5, [pc, #24]	; (800fbcc <_isatty_r+0x1c>)
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	4608      	mov	r0, r1
 800fbba:	602b      	str	r3, [r5, #0]
 800fbbc:	f7f0 ff25 	bl	8000a0a <_isatty>
 800fbc0:	1c43      	adds	r3, r0, #1
 800fbc2:	d102      	bne.n	800fbca <_isatty_r+0x1a>
 800fbc4:	682b      	ldr	r3, [r5, #0]
 800fbc6:	b103      	cbz	r3, 800fbca <_isatty_r+0x1a>
 800fbc8:	6023      	str	r3, [r4, #0]
 800fbca:	bd38      	pop	{r3, r4, r5, pc}
 800fbcc:	200076a4 	.word	0x200076a4

0800fbd0 <_init>:
 800fbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd2:	bf00      	nop
 800fbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbd6:	bc08      	pop	{r3}
 800fbd8:	469e      	mov	lr, r3
 800fbda:	4770      	bx	lr

0800fbdc <_fini>:
 800fbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbde:	bf00      	nop
 800fbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbe2:	bc08      	pop	{r3}
 800fbe4:	469e      	mov	lr, r3
 800fbe6:	4770      	bx	lr
